{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         }\n     }\n    private Properties initProperties() {\n         final Properties props = new Properties();\n         props.put(\"a\", \"A\");\n         props.put(\"b\", \"B\");", "fixed": "         }\n     }\n    private static Properties initProperties() {\n         final Properties props = new Properties();\n         props.put(\"a\", \"A\");\n         props.put(\"b\", \"B\");", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.debug(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "fixed": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.trace(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "sourceBeforeFix": "logger.debug(\"Received MyQ  JSON: {}\",dataString)", "sourceAfterFix": "logger.trace(\"Received MyQ  JSON: {}\",dataString)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMina2EndpointBuilder\n             extends\n                 AdvancedMina2EndpointConsumerBuilder, AdvancedMina2EndpointProducerBuilder {\n         default Mina2EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMina2EndpointBuilder\n             extends\n                 AdvancedMina2EndpointConsumerBuilder, AdvancedMina2EndpointProducerBuilder {\n         default Mina2EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "                 + \") match jale-[:MEMBER_OF]->()-[:PART_OF*0..]->group return group.name\";\n         gen.get().addSnippet( \"query-get-user-memberships\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-user-memberships\",", "fixed": "                 + \") match jale-[:MEMBER_OF]->()-[:PART_OF*0..]->group return group.name\";\n         gen.get().addSnippet( \"query-get-user-memberships\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-user-memberships\",", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader\")\n  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "   }\n   @GwtIncompatible(\"Reader\")\n  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "69c1fc12079616a75ac51f90aed6dbfbefd586a2", "projectName": "apache.flink", "bugType": "Less Specific If", "problem": " \t@Override\n \tpublic PactRecord jsonToRecord(IJsonNode value, PactRecord target, EvaluationContext context) {\n \t\tIObjectNode others;\n\t\tif (target == null) {\n \t\t\ttarget = new PactRecord(this.mappings.size() + 1);\n \t\t\tfor (int i = 0; i < this.mappings.size(); i++)", "fixed": " \t@Override\n \tpublic PactRecord jsonToRecord(IJsonNode value, PactRecord target, EvaluationContext context) {\n \t\tIObjectNode others;\n\t\tif (target == null || target.getNumFields() < this.mappings.size() + 1) {\n \t\t\ttarget = new PactRecord(this.mappings.size() + 1);\n \t\t\tfor (int i = 0; i < this.mappings.size(); i++)", "sourceBeforeFix": "target == null", "sourceAfterFix": "target == null || target.getNumFields() < this.mappings.size() + 1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b6eb90370ad063bff5f74d4dc90632fe7ac6ccd3", "projectName": "apache.hadoop", "bugType": "Change Numeric Literal", "problem": "     Configuration config = new YarnConfiguration();\n     historyServer.init(config);\n     assertEquals(STATE.INITED, historyServer.getServiceState());\n    assertEquals(3, historyServer.getServices().size());\n     ApplicationHistoryClientService historyService = historyServer\n         .getClientService();\n     assertNotNull(historyServer.getClientService());", "fixed": "     Configuration config = new YarnConfiguration();\n     historyServer.init(config);\n     assertEquals(STATE.INITED, historyServer.getServiceState());\n    assertEquals(2, historyServer.getServices().size());\n     ApplicationHistoryClientService historyService = historyServer\n         .getClientService();\n     assertNotNull(historyServer.getClientService());", "sourceBeforeFix": "assertEquals(3,historyServer.getServices().size())", "sourceAfterFix": "assertEquals(2,historyServer.getServices().size())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "53694f29adf8c68992e1b966c86380219f438c14", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(100);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(200)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJBPMEndpointBuilder\n             extends\n                 AdvancedJBPMEndpointConsumerBuilder, AdvancedJBPMEndpointProducerBuilder {\n         default JBPMEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJBPMEndpointBuilder\n             extends\n                 AdvancedJBPMEndpointConsumerBuilder, AdvancedJBPMEndpointProducerBuilder {\n         default JBPMEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3e3515f2af47dc0c1f9c080a257edb56f5eb72a7", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         if (node.getNodeType() == Node.ELEMENT_NODE) {\n             Document doc = node.getOwnerDocument();\n             if (((Element) node).getNamespaceURI().equals(BLUEPRINT_NS)) {\n                doc.renameNode(node, SPRING_NS, node.getNodeName());\n             }\n         }\n         NodeList list = node.getChildNodes();", "fixed": "         if (node.getNodeType() == Node.ELEMENT_NODE) {\n             Document doc = node.getOwnerDocument();\n             if (((Element) node).getNamespaceURI().equals(BLUEPRINT_NS)) {\n                doc.renameNode(node, SPRING_NS, node.getLocalName());\n             }\n         }\n         NodeList list = node.getChildNodes();", "sourceBeforeFix": "element.getNodeName()", "sourceAfterFix": "element.getLocalName()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RefEndpointBuilder\n             extends\n                 RefEndpointConsumerBuilder, RefEndpointProducerBuilder {\n         default AdvancedRefEndpointBuilder advanced() {", "fixed": "     \n    public interface RefEndpointBuilder\n             extends\n                 RefEndpointConsumerBuilder, RefEndpointProducerBuilder {\n         default AdvancedRefEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3b1d91e0105be86ffa011c5ca9ebbba49e3fcd5d", "projectName": "antlr.antlr4", "bugType": "Wrong Function Name", "problem": "tokens.LT(i++);\n         tokens.LT(i++);\n        String result = tokens.toString();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }", "fixed": "tokens.LT(i++);\n         tokens.LT(i++);\n        String result = tokens.getText();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }", "sourceBeforeFix": "tokens.toString()", "sourceAfterFix": "tokens.getText()"}
{"fixCommitSHA1": "14eade7f6e21e560a08de348504584cba5e94c94", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     public static Archive<?> deployment() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.addAsWebInfResource(SimpleWebTestCase.class.getPackage(), \"web.xml\");\n         System.out.println(war.toString(true));\n         return war;\n     }", "fixed": "     public static Archive<?> deployment() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.setWebXML(SimpleWebTestCase.class.getPackage(), \"web.xml\");\n         System.out.println(war.toString(true));\n         return war;\n     }", "sourceBeforeFix": "war.addAsWebInfResource(SimpleWebTestCase.class.getPackage(),\"web.xml\")", "sourceAfterFix": "war.setWebXML(SimpleWebTestCase.class.getPackage(),\"web.xml\")"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Wrong Function Name", "problem": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n     private String getJSDocTypeWithBraces(CodegenOperation co) {\n         String jsDocType = getJSDocType(co);\n         return jsDocType == null ? null : \"{\" + jsDocType + \"}\";\n     }\n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);", "fixed": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n    \n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);", "sourceBeforeFix": "getJSDocTypeWithBraces(cp)", "sourceAfterFix": "getJSDocType(cp)"}
{"fixCommitSHA1": "3c136fbd9f79b179f010322aff8ed2b829209db8", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n        assertEquals(fc, fc2);\n     }\n }", "fixed": "         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n        assertEquals(fc2, fc);\n     }\n }", "sourceBeforeFix": "assertEquals(fc,fc2)", "sourceAfterFix": "assertEquals(fc2,fc)"}
{"fixCommitSHA1": "7ebe053ac1abce6e3b218beaee801ebbc6da2ecb", "projectName": "druid-io.druid", "bugType": "Change Unary Operator\t", "problem": "     private synchronized void addSegment(DataSegment segment)\n     {\n      if (! segments.add(segment)) {\n         currSize += segment.getSize();\n       }\n     }", "fixed": "     private synchronized void addSegment(DataSegment segment)\n     {\n      if (segments.add(segment)) {\n         currSize += segment.getSize();\n       }\n     }", "sourceBeforeFix": "!segments.add(segment)", "sourceAfterFix": "segments.add(segment)"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "         void delta() {}\n         void epsilon() {}\n     }\n    private static class Super {\n         void testOne() {}\n     }\n    private static class Sub extends Super {\n         void testTwo() {}\n     }", "fixed": "         void delta() {}\n         void epsilon() {}\n     }\n    static class Super {\n         void testOne() {}\n     }\n    static class Sub extends Super {\n         void testTwo() {}\n     }", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "385b42d9fd284c23c48987dae294449740a70853", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tresponder.doRespond(call);\n \t\t\t\t} catch (InterruptedException e) {\nif (running) {\n\t\t\t\t\t\tLOG.info(getName() + \" caught: \", e);\n \t\t\t\t\t}\n \t\t\t\t} catch (Exception e) {\n\t\t\t\t\tLOG.info(getName() + \" caught: \", e);\n \t\t\t\t}\n \t\t\t}\n \t\t\tLOG.debug(getName() + \": exiting\");", "fixed": " \t\t\t\t\tresponder.doRespond(call);\n \t\t\t\t} catch (InterruptedException e) {\nif (running) {\n\t\t\t\t\t\tLOG.error(getName() + \" caught: \", e);\n \t\t\t\t\t}\n \t\t\t\t} catch (Exception e) {\n\t\t\t\t\tLOG.error(getName() + \" caught: \", e);\n \t\t\t\t}\n \t\t\t}\n \t\t\tLOG.debug(getName() + \": exiting\");", "sourceBeforeFix": "LOG.info(getName() + \" caught: \",e)", "sourceAfterFix": "LOG.error(getName() + \" caught: \",e)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStream<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStream<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "fixed": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStreamSink<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastMultimapEndpointBuilder\n             extends\n                 HazelcastMultimapEndpointConsumerBuilder, HazelcastMultimapEndpointProducerBuilder {\n         default AdvancedHazelcastMultimapEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastMultimapEndpointBuilder\n             extends\n                 HazelcastMultimapEndpointConsumerBuilder, HazelcastMultimapEndpointProducerBuilder {\n         default AdvancedHazelcastMultimapEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "149b8d85f0e5390ddcf03810279fbbe9d34f64f8", "projectName": "thinkaurelius.titan", "bugType": "Change Identifier Used", "problem": "                 public KeyIterator call() throws StorageException {\n                     KeyIterator ki = backend.getKeys(query, txh);\n                     if (null != p) {\n                        return MetricInstrumentedIterator.of(ki, p + \".\" + M_ITERATOR);\n                     } else {\n                         return ki;\n                     }", "fixed": "                 public KeyIterator call() throws StorageException {\n                     KeyIterator ki = backend.getKeys(query, txh);\n                     if (null != p) {\n                        return MetricInstrumentedIterator.of(ki, p + \".\" + M_GET_KEYS + \".\" + M_ITERATOR);\n                     } else {\n                         return ki;\n                     }", "sourceBeforeFix": "p + \".\" + M_ITERATOR", "sourceAfterFix": "p + \".\" + M_GET_KEYS+ \".\"+ M_ITERATOR"}
{"fixCommitSHA1": "4a7e4baf334f0a22230e99046b4f63321ae9ccc4", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       DiagnosticType.disabled(\"JSC_JSDOC_MISSING_TYPE_WARNING\", \"{0}\");\n   static final DiagnosticType TOO_MANY_TEMPLATE_PARAMS =\n      DiagnosticType.error(\"JSC_TOO_MANY_TEMPLATE_PARAMS\", \"{0}\");", "fixed": "       DiagnosticType.disabled(\"JSC_JSDOC_MISSING_TYPE_WARNING\", \"{0}\");\n   static final DiagnosticType TOO_MANY_TEMPLATE_PARAMS =\n      DiagnosticType.disabled(\"JSC_TOO_MANY_TEMPLATE_PARAMS\", \"{0}\");", "sourceBeforeFix": "DiagnosticType.error(\"JSC_TOO_MANY_TEMPLATE_PARAMS\",\"{0}\")", "sourceAfterFix": "DiagnosticType.disabled(\"JSC_TOO_MANY_TEMPLATE_PARAMS\",\"{0}\")"}
{"fixCommitSHA1": "6aff6baea9a815da5528f09bf1dac322a002fdc5", "projectName": "Atmosphere.atmosphere", "bugType": "Change Numeric Literal", "problem": "                 InputStream inputStream = r.getRequest().getInputStream();\n                 if (inputStream != null) {\n                     bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n                    char[] charBuffer = new char[128];\n                     int bytesRead = -1;\n                     while ((bytesRead = bufferedReader.read(charBuffer)) > 0) {\n                         stringBuilder.append(charBuffer, 0, bytesRead);", "fixed": "                 InputStream inputStream = r.getRequest().getInputStream();\n                 if (inputStream != null) {\n                     bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n                    char[] charBuffer = new char[8192];\n                     int bytesRead = -1;\n                     while ((bytesRead = bufferedReader.read(charBuffer)) > 0) {\n                         stringBuilder.append(charBuffer, 0, bytesRead);", "sourceBeforeFix": "new char[128]", "sourceAfterFix": "new char[8192]"}
{"fixCommitSHA1": "8a91b07d5ab85b6bf100a36c5e26e6297a7f3a2a", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t\t\t\treturn element;\n \t\t\t}\n \t\t} catch (IOException e) {\n\t\t\tthrow new FlinkRuntimeException(\"Unexpected list element deserialization failure\");\n \t\t}\n \t\treturn null;\n \t}", "fixed": " \t\t\t\treturn element;\n \t\t\t}\n \t\t} catch (IOException e) {\n\t\t\tthrow new FlinkRuntimeException(\"Unexpected list element deserialization failure\", e);\n \t\t}\n \t\treturn null;\n \t}", "sourceBeforeFix": "new FlinkRuntimeException(\"Unexpected list element deserialization failure\")", "sourceAfterFix": "new FlinkRuntimeException(\"Unexpected list element deserialization failure\",e)"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(2);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(2);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\");\r", "sourceBeforeFix": "result.expectedMessageCount(2)", "sourceAfterFix": "result.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "fixed": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic abstract boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "e81be4536f5156b105fff4b7328fc3e4e7a24931", "projectName": "junit-team.junit", "bugType": "Same Function Less Args", "problem": "         }\n         Method suiteMethod = null;\n         try {\n            suiteMethod = testClass.getMethod(SUITE_METHODNAME, new Class[0]);\n         } catch (Exception e) {\n             clearStatus();", "fixed": "         }\n         Method suiteMethod = null;\n         try {\n            suiteMethod = testClass.getMethod(SUITE_METHODNAME);\n         } catch (Exception e) {\n             clearStatus();", "sourceBeforeFix": "testClass.getMethod(SUITE_METHODNAME,new Class[0])", "sourceAfterFix": "testClass.getMethod(SUITE_METHODNAME)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "projectName": "eclipse.vert.x", "bugType": "Same Function More Args", "problem": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException();\n   }\n }", "fixed": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n }", "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: succeeded\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDdbStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default DdbStreamEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDdbStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default DdbStreamEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "e07a7b8bcd1e3abc3f3ea5559c8c74a6f8f8ccdc", "projectName": "openmrs.openmrs-core", "bugType": "Change Numeric Literal", "problem": " \t\texecuteDataSet(PROGRAM_WITH_OUTCOMES_XML);\r\n \t\tList<Concept> possibleOutcomes = Context.getProgramWorkflowService().getPossibleOutcomes(4);\r\n\t\tassertEquals(2, possibleOutcomes.size());\r\n \t}\r\n \t@Test\r", "fixed": " \t\texecuteDataSet(PROGRAM_WITH_OUTCOMES_XML);\r\n \t\tList<Concept> possibleOutcomes = Context.getProgramWorkflowService().getPossibleOutcomes(4);\r\n\t\tassertEquals(4, possibleOutcomes.size());\r\n \t}\r\n \t@Test\r", "sourceBeforeFix": "assertEquals(2,possibleOutcomes.size())", "sourceAfterFix": "assertEquals(4,possibleOutcomes.size())"}
{"fixCommitSHA1": "2c3e641f9f9b847eb609a575107ad67a63edc09b", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             throw new IOException(\"Address is required!\");\n         }\n        ClientConnection clientConnection = connections.get(address);\n         if (clientConnection == null) {\n            final Object lock = getLock(address);\n             synchronized (lock) {\n                clientConnection = connections.get(address);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);", "fixed": "             throw new IOException(\"Address is required!\");\n         }\n        ClientConnection clientConnection = connections.get(target);\n         if (clientConnection == null) {\n            final Object lock = getLock(target);\n             synchronized (lock) {\n                clientConnection = connections.get(target);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);", "sourceBeforeFix": "connections.get(address)", "sourceAfterFix": "connections.get(target)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generatePositionEqualsPositionMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "fixed": "                 .retInt();\n     }\n    private static void generatePositionEqualsPositionMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BrowseEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBrowseEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface BrowseEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBrowseEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastSetEndpointBuilder\n             extends\n                 HazelcastSetEndpointConsumerBuilder, HazelcastSetEndpointProducerBuilder {\n         default AdvancedHazelcastSetEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastSetEndpointBuilder\n             extends\n                 HazelcastSetEndpointConsumerBuilder, HazelcastSetEndpointProducerBuilder {\n         default AdvancedHazelcastSetEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Set the format for a check.\n      * @param format a <code>String</code> value\n      */\n    public void setCheckFormat(String format) {\n         checkFormat = format;\n     }", "fixed": "      * Set the format for a check.\n      * @param format a <code>String</code> value\n      */\n    public final void setCheckFormat(String format) {\n         checkFormat = format;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "063331b78a8974fa056781a86df1e211c4a6884e", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "         scorer.forwardPropagateTree(collapsedUnary);\n         setPredictedLabels(collapsedUnary);\n       } else {\n        setUnknownLabels(binarized, mainLabel);\n       }\n       Trees.convertToCoreLabels(collapsedUnary);", "fixed": "         scorer.forwardPropagateTree(collapsedUnary);\n         setPredictedLabels(collapsedUnary);\n       } else {\n        setUnknownLabels(collapsedUnary, mainLabel);\n       }\n       Trees.convertToCoreLabels(collapsedUnary);", "sourceBeforeFix": "setUnknownLabels(binarized,mainLabel)", "sourceAfterFix": "setUnknownLabels(collapsedUnary,mainLabel)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "         _nameApply(mw, property, context, _end);\n         _get(mw, context, property);\n        mw.visitVarInsn(DSTORE, context.var(\"double\"));\n         _filters(mw, property, context, _end);\n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(DLOAD, context.var(\"double\"));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\n         _seperator(mw, context);", "fixed": "         _nameApply(mw, property, context, _end);\n         _get(mw, context, property);\n        mw.visitVarInsn(DSTORE, context.var(\"double\", 2));\n         _filters(mw, property, context, _end);\n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\n         _seperator(mw, context);", "sourceBeforeFix": "context.var(\"long\")", "sourceAfterFix": "context.var(\"long\",2)"}
{"fixCommitSHA1": "5a58a4ac4be0bee7c3ab573f6bf325f68cb3df85", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n\tpublic Set<Class<? extends CustomDatatypeHandler<?, ?>>> getAllHandlerClasses() {\r\n \t\tif (handlerClasses == null) {\r\n \t\t\tpopulateBeanListsFromContext();\r\n \t\t}\r", "fixed": " \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n\tpublic synchronized Set<Class<? extends CustomDatatypeHandler<?, ?>>> getAllHandlerClasses() {\r\n \t\tif (handlerClasses == null) {\r\n \t\t\tpopulateBeanListsFromContext();\r\n \t\t}\r", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "f5a277900f4bc700a17d349aa9f30af3ddca94fe", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                         WebSocketEventListener.class.cast(l).onMessage(event);\n                         break;\n                     case HANDSHAKE:\n                        WebSocketEventListener.class.cast(l).onMessage(event);\n                         break;\n                     case CLOSE:\n                        WebSocketEventListener.class.cast(l).onMessage(event);\n                         break;\n                 }\n             }", "fixed": "                         WebSocketEventListener.class.cast(l).onMessage(event);\n                         break;\n                     case HANDSHAKE:\n                        WebSocketEventListener.class.cast(l).onHandshake(event);\n                         break;\n                     case CLOSE:\n                        WebSocketEventListener.class.cast(l).onClose(event);\n                         break;\n                 }\n             }", "sourceBeforeFix": "WebSocketEventListener.class.cast(l).onMessage(event)", "sourceAfterFix": "WebSocketEventListener.class.cast(l).onClose(event)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "bafb1f877934f826d5f74f9f33e824dd1aa30432", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         return getOutputFactory().createXMLStreamWriter(result);\n     }\n    @Converter\n     public XMLStreamReader createXMLStreamReader(InputStream in) throws XMLStreamException {\n         return getInputFactory().createXMLStreamReader(in);\n     }", "fixed": "         return getOutputFactory().createXMLStreamWriter(result);\n     }\n    @Deprecated\n     public XMLStreamReader createXMLStreamReader(InputStream in) throws XMLStreamException {\n         return getInputFactory().createXMLStreamReader(in);\n     }", "sourceBeforeFix": "@Converter", "sourceAfterFix": "@Deprecated"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e08f74620ba29298d59c97e7327cbe51fbd5b39e", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic boolean isVisualPressed () {\r\n \t\tif (pressed) return true;\r\n \t\tif (visualPressedTime <= 0) return false;\r\n\t\tif (visualPressedTime > TimeUtils.nanoTime() && Gdx.graphics.isContinuousRendering()) return true;\r\n \t\tvisualPressedTime = 0;\r\n \t\treturn false;\r\n \t}\r", "fixed": " \tpublic boolean isVisualPressed () {\r\n \t\tif (pressed) return true;\r\n \t\tif (visualPressedTime <= 0) return false;\r\n\t\tif (visualPressedTime > TimeUtils.millis() && Gdx.graphics.isContinuousRendering()) return true;\r\n \t\tvisualPressedTime = 0;\r\n \t\treturn false;\r\n \t}\r", "sourceBeforeFix": "TimeUtils.nanoTime()", "sourceAfterFix": "TimeUtils.millis()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n          intBuf = buf.DATA.asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {", "fixed": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6e44c2ab7f925356eebe85a007e5d89d2880fef2", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "       DiagnosticType.disabled(\"JSC_JSDOC_MISSING_TYPE_WARNING\", \"{0}\");\n   static final DiagnosticType TOO_MANY_TEMPLATE_PARAMS =\n      DiagnosticType.disabled(\"JSC_TOO_MANY_TEMPLATE_PARAMS\", \"{0}\");", "fixed": "       DiagnosticType.disabled(\"JSC_JSDOC_MISSING_TYPE_WARNING\", \"{0}\");\n   static final DiagnosticType TOO_MANY_TEMPLATE_PARAMS =\n      DiagnosticType.error(\"JSC_TOO_MANY_TEMPLATE_PARAMS\", \"{0}\");", "sourceBeforeFix": "DiagnosticType.disabled(\"JSC_TOO_MANY_TEMPLATE_PARAMS\",\"{0}\")", "sourceAfterFix": "DiagnosticType.error(\"JSC_TOO_MANY_TEMPLATE_PARAMS\",\"{0}\")"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();", "fixed": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9d75ba8916acfb46b27d05c1be7dfd7e54711741", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Same Function Swap Args", "problem": "                 Assert.assertNotNull(values);\n                 Assert.assertEquals(values.length, expected.length);\n                 Arrays.sort(values);\n                Assert.assertEquals(expected, values);\n                 return STATE.ABORT;\n             }", "fixed": "                 Assert.assertNotNull(values);\n                 Assert.assertEquals(values.length, expected.length);\n                 Arrays.sort(values);\n                Assert.assertEquals(values, expected);\n                 return STATE.ABORT;\n             }", "sourceBeforeFix": "Assert.assertEquals(expected,values)", "sourceAfterFix": "Assert.assertEquals(values,expected)"}
{"fixCommitSHA1": "007ea4a7f2ba64fad78f78c1b798ca45455719e4", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     public void defaultsToAllowingComments() throws Exception {\n         final ObjectMapper mapper = factory.build();\n        assertThat(mapper.getJsonFactory().isEnabled(JsonParser.Feature.ALLOW_COMMENTS))\n                 .isTrue();\n     }", "fixed": "     public void defaultsToAllowingComments() throws Exception {\n         final ObjectMapper mapper = factory.build();\n        assertThat(mapper.getFactory().isEnabled(JsonParser.Feature.ALLOW_COMMENTS))\n                 .isTrue();\n     }", "sourceBeforeFix": "mapper.getJsonFactory()", "sourceAfterFix": "mapper.getFactory()"}
{"fixCommitSHA1": "8c31000efa3e7745855734a2babc18fc0ab20bed", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tSet<Object> set1 = this.importSelector.determineImports(\n \t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsOne.class));\n \t\tSet<Object> set2 = this.importSelector.determineImports(\n\t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsOne.class));\n \t\tassertThat(set1).isEqualTo(set2);\n \t}", "fixed": " \t\tSet<Object> set1 = this.importSelector.determineImports(\n \t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsOne.class));\n \t\tSet<Object> set2 = this.importSelector.determineImports(\n\t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsTwo.class));\n \t\tassertThat(set1).isEqualTo(set2);\n \t}", "sourceBeforeFix": "@UnrelatedOne", "sourceAfterFix": "@UnrelatedTwo"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "6778ebb53736d821d376ec09b39933355de4f5e3", "projectName": "google.closure-compiler", "bugType": "Change Numeric Literal", "problem": "   private boolean prettyPrint = false;\n  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;\n   /**\n    * Creates an object type.", "fixed": "   private boolean prettyPrint = false;\n  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 10;\n   /**\n    * Creates an object type.", "sourceBeforeFix": "MAX_PRETTY_PRINTED_PROPERTIES=4", "sourceAfterFix": "MAX_PRETTY_PRINTED_PROPERTIES=10"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );", "fixed": "                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixValueEndpointBuilder\n             extends\n                 AtomixValueEndpointConsumerBuilder, AtomixValueEndpointProducerBuilder {\n         default AdvancedAtomixValueEndpointBuilder advanced() {", "fixed": "     \n    public interface AtomixValueEndpointBuilder\n             extends\n                 AtomixValueEndpointConsumerBuilder, AtomixValueEndpointProducerBuilder {\n         default AdvancedAtomixValueEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fc78d3384d12c17b4a4234a1d8f1568bf4dd3bc4", "projectName": "swagger-api.swagger-core", "bugType": "Wrong Function Name", "problem": "                 if (getter != null) {\n                     if (paramType == null) {\n                        paramType = getter.getRawReturnType();\n                     }\n                     for (final Annotation fieldAnnotation : getter.annotations()) {", "fixed": "                 if (getter != null) {\n                     if (paramType == null) {\n                        paramType = getter.getType();\n                     }\n                     for (final Annotation fieldAnnotation : getter.annotations()) {", "sourceBeforeFix": "getter.getRawReturnType()", "sourceAfterFix": "getter.getType()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnablednHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "fixed": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"diskspace\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"diskspace\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedBraintreeEndpointBuilder\n             extends\n                 AdvancedBraintreeEndpointConsumerBuilder, AdvancedBraintreeEndpointProducerBuilder {\n         default BraintreeEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedBraintreeEndpointBuilder\n             extends\n                 AdvancedBraintreeEndpointConsumerBuilder, AdvancedBraintreeEndpointProducerBuilder {\n         default BraintreeEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0aaa94462bb08336d43b9c8becbbd538108fa318", "projectName": "Atmosphere.atmosphere", "bugType": "Change Caller in Function Call", "problem": "         if (!wasResumed && isAtmosphereResourceValid(r)) {\n             logger.trace(\"Associating AtmosphereResource {} with Broadcaster {}\", r.uuid(), getID());\n            String parentUUID = (String) r.getRequest().getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);\n             if (!backwardCompatible && parentUUID != null) {\n                 AtmosphereResource p = AtmosphereResourceFactory.getDefault().find(parentUUID);\n                 if (p != null && !resources.contains(p)) {", "fixed": "         if (!wasResumed && isAtmosphereResourceValid(r)) {\n             logger.trace(\"Associating AtmosphereResource {} with Broadcaster {}\", r.uuid(), getID());\n            String parentUUID = (String) AtmosphereResourceImpl.class.cast(r).getRequest(false).getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);\n             if (!backwardCompatible && parentUUID != null) {\n                 AtmosphereResource p = AtmosphereResourceFactory.getDefault().find(parentUUID);\n                 if (p != null && !resources.contains(p)) {", "sourceBeforeFix": "r.getRequest()", "sourceAfterFix": "rImpl.getRequest()"}
{"fixCommitSHA1": "b186ed3519d4627f3352aa65db3d8283d1e8beda", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 if (attach) {\n                     acquired = semaphoreProxy.tryAcquireAttach(permits, packet.timeout, TimeUnit.MILLISECONDS);\n                     if (acquired) {\n                        getClientEndpoint(packet.conn).attachDetachPermits(packet.name, permits);\n                     }\n                 } else {\n                     acquired = semaphoreProxy.tryAcquire(permits, packet.timeout, TimeUnit.MILLISECONDS);", "fixed": "                 if (attach) {\n                     acquired = semaphoreProxy.tryAcquireAttach(permits, packet.timeout, TimeUnit.MILLISECONDS);\n                     if (acquired) {\n                        getClientEndpoint(packet.conn).attachDetachPermits(semaphoreProxy.getName(), permits);\n                     }\n                 } else {\n                     acquired = semaphoreProxy.tryAcquire(permits, packet.timeout, TimeUnit.MILLISECONDS);", "sourceBeforeFix": "factory.getSemaphore(packet.name)", "sourceAfterFix": "factory.getOrCreateProxyByName(packet.name)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9a0a814c76eb7b63376625513c16a8c91c045afb", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "     @Override\r\n     public byte[] decodeMessage() {\r\n        byte[] data = new byte[16];\r\n         data[0] = 0x10;\r\n         data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();\r", "fixed": "     @Override\r\n     public byte[] decodeMessage() {\r\n        byte[] data = new byte[17];\r\n         data[0] = 0x10;\r\n         data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();\r", "sourceBeforeFix": "new byte[16]", "sourceAfterFix": "new byte[17]"}
{"fixCommitSHA1": "e2c948782b942d79911cec09c8862de0948b31e4", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "     private void invokeFlush0(ChannelPromise promise) {\n         Channel channel = channel();\n         if (!channel.isRegistered() && !channel.isActive()) {\n            promise.setFailure(new ClosedChannelException());\n             return;\n         }", "fixed": "     private void invokeFlush0(ChannelPromise promise) {\n         Channel channel = channel();\n         if (!channel.isRegistered() && !channel.isActive()) {\n            promise.tryFailure(new ClosedChannelException());\n             return;\n         }", "sourceBeforeFix": "promise.setFailure(new ClosedChannelException())", "sourceAfterFix": "promise.tryFailure(new ClosedChannelException())"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "fixed": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "sourceBeforeFix": "GL.glPolygonOffsetEXT(factor,units)", "sourceAfterFix": "GL.glPolygonOffset(factor,units)"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResponseClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t@Override\r\n \tpublic String getString (String key) {\r\n\t\tNSString value = (NSString)nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return \"\";\r\n \t\treturn value.toString();\r\n \t}\r", "fixed": " \t@Override\r\n \tpublic String getString (String key) {\r\n\t\tObject value = nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return \"\";\r\n \t\treturn value.toString();\r\n \t}\r", "sourceBeforeFix": "value.longValue()", "sourceAfterFix": "value.longLongValue()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "97b8bc59615d4da0c51a91fef22ab462a8d69766", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         final Object child = parseTree.getChild(tree, 1);\n         Assert.assertTrue(\"Invalid child type\", child instanceof DetailAST);\n         Assert.assertEquals(\"Invalid child token type\",\n                TokenTypes.BLOCK_COMMENT_BEGIN, ((AST) child).getType());\n     }\n     @Test", "fixed": "         final Object child = parseTree.getChild(tree, 1);\n         Assert.assertTrue(\"Invalid child type\", child instanceof DetailAST);\n         Assert.assertEquals(\"Invalid child token type\",\n                TokenTypes.BLOCK_COMMENT_BEGIN, ((DetailAST) child).getType());\n     }\n     @Test", "sourceBeforeFix": "(AST)child", "sourceAfterFix": "(DetailAST)child"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NsqEndpointBuilder\n             extends\n                 NsqEndpointConsumerBuilder, NsqEndpointProducerBuilder {\n         default AdvancedNsqEndpointBuilder advanced() {", "fixed": "     \n    public interface NsqEndpointBuilder\n             extends\n                 NsqEndpointConsumerBuilder, NsqEndpointProducerBuilder {\n         default AdvancedNsqEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f3796bc81b3fa0369aa2790ec3a261a9b70b3563", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "   public Period connectionIdleTimeout = new Period(\"PT5M\");\n   @JsonProperty\n  public int maxRowsPerFrame = 100_000;\n   public int getMaxConnections()\n   {", "fixed": "   public Period connectionIdleTimeout = new Period(\"PT5M\");\n   @JsonProperty\n  public int maxRowsPerFrame = 5000;\n   public int getMaxConnections()\n   {", "sourceBeforeFix": "maxRowsPerFrame=100_000", "sourceAfterFix": "maxRowsPerFrame=5000"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3ae514dcbcea3287baaf498f28cce0267a2d50bb", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15874, value = \"Expected only one deployment, found %d\")\n     IllegalStateException expectedOnlyOneDeployment(int i);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10874, value = \"Expected only one deployment, found %d\")\n     IllegalStateException expectedOnlyOneDeployment(int i);\n     /**", "sourceBeforeFix": "id=15873", "sourceAfterFix": "id=10873"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2b6da52d6e3e42f393964a685c6ce1cf35f9918e", "projectName": "wildfly.wildfly", "bugType": "Change Boolean Literal", "problem": "             Class<?> injectionPointRawType = Reflections.getRawType(injectionPoint.getType());\n             Class<?> c = clazz;\n            boolean found = true;\n             while (c != null && c != Object.class) {\n                 if (injectionPointRawType.getName().equals(c.getName())) {\n                     found = true;", "fixed": "             Class<?> injectionPointRawType = Reflections.getRawType(injectionPoint.getType());\n             Class<?> c = clazz;\n            boolean found = false;\n             while (c != null && c != Object.class) {\n                 if (injectionPointRawType.getName().equals(c.getName())) {\n                     found = true;", "sourceBeforeFix": "found=true", "sourceAfterFix": "found=false"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "fixed": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3841ff0cd87dd048dff43379df81153ed9bcf265", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         OperationService opService = getOperationService(local);\n         int partitionId = getPartitionId(remote);\n        opService.invokeOnPartition(null, new SlowOperation(callTimeoutMs * 2), partitionId);\n        Future f = opService.invokeOnPartition(null, new DummyOperation(), partitionId);\n         try {\n             f.get(3 * callTimeoutMs, MILLISECONDS);", "fixed": "         OperationService opService = getOperationService(local);\n         int partitionId = getPartitionId(remote);\n        opService.invokeOnPartition(new SlowOperation(callTimeoutMs * 2).setPartitionId(partitionId));\n        Future f = opService.invokeOnPartition(new DummyOperation().setPartitionId(partitionId));\n         try {\n             f.get(3 * callTimeoutMs, MILLISECONDS);", "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BraintreeEndpointBuilder\n             extends\n                 BraintreeEndpointConsumerBuilder, BraintreeEndpointProducerBuilder {\n         default AdvancedBraintreeEndpointBuilder advanced() {", "fixed": "     \n    public interface BraintreeEndpointBuilder\n             extends\n                 BraintreeEndpointConsumerBuilder, BraintreeEndpointProducerBuilder {\n         default AdvancedBraintreeEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e04a3bf7703544cf5012eb2f55626af8e0a2cb8c", "projectName": "apache.flink", "bugType": "Delete Throws Exception", "problem": " \t\tprivate int lostRecordCnt = 0;\n \t\t@Override\n\t\tpublic Row map(Row value) throws Exception {\n \t\t\tif (saveRecordCnt == 1 && lostRecordCnt == 1) {", "fixed": " \t\tprivate int lostRecordCnt = 0;\n \t\t@Override\n\t\tpublic Row map(Row value) {\n \t\t\tif (saveRecordCnt == 1 && lostRecordCnt == 1) {", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId() throws APIException;\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "fixed": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId();\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"part-\" + i + '-' + j).toString();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "fixed": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"part-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "sourceBeforeFix": "new Path(bucketPath,\"part-\" + i + '-'+ j).toString()", "sourceAfterFix": "new Path(bucketPath,\"part-\" + i + '-'+ j).getPath()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "8489cbc64e450aea0a05cf2bca4d6e04285d1459", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "  * Configuration property keys. This class provides a set of pre-defined property keys.\n  */\n @ThreadSafe\npublic class PropertyKey implements Comparable<PropertyKey> {\n   \n   private static final Map<String, PropertyKey> DEFAULT_KEYS_MAP = new HashMap<>();", "fixed": "  * Configuration property keys. This class provides a set of pre-defined property keys.\n  */\n @ThreadSafe\npublic final class PropertyKey implements Comparable<PropertyKey> {\n   \n   private static final Map<String, PropertyKey> DEFAULT_KEYS_MAP = new HashMap<>();", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );", "fixed": "         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Event_String() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         String event = Request.READONLY_EVENT;\n         byte[] request = getRequestBytes(event, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Event_String() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         String event = Request.READONLY_EVENT;\n         byte[] request = getRequestBytes(event, header);", "sourceBeforeFix": "(byte)0xff", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "af6a4908c4dd38c0f935803ab6b8ed99387219f2", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "fixed": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "sourceBeforeFix": "logger.error(\"Error connecting to Plex\",e)", "sourceAfterFix": "logger.debug(\"Error connecting to Plex\",e)"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         };\n         verify(checkConfig,\n                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n     }\n     @Test", "fixed": "         };\n         verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          */\n         private static final long serialVersionUID = -1926935338069418119L;\n        public FileSelectionAction() {\n             super(\"Select Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_S);\n         }", "fixed": "          */\n         private static final long serialVersionUID = -1926935338069418119L;\n        FileSelectionAction() {\n             super(\"Select Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_S);\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void display(GL2 gl, GLU glu) {\n         markTime++;\n         VizModel vizModel = VizController.getInstance().getVizModel();", "fixed": "     }\n     @Override\n    public synchronized void display(GL2 gl, GLU glu) {\n         markTime++;\n         VizModel vizModel = VizController.getInstance().getVizModel();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "edbf3225efbcffe9f16f28cbb42c5d95a5de9996", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testLRWithLabels() throws Exception {\n \t\tmkdir(parserpkgdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(709);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"@parser::header {\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");", "fixed": " \t@Test\n \tpublic void testLRWithLabels() throws Exception {\n \t\tmkdir(parserpkgdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(726);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"@parser::header {\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");", "sourceBeforeFix": "new StringBuilder(709)", "sourceAfterFix": "new StringBuilder(726)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "849b3ba2b1282a89d8cf60a10891ea11a9e16bb4", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Wrong Function Name", "problem": "         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n        assertEquals(resp.getHeader(\"target\"), target);\n         client.close();\n     }", "fixed": "         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n        assertEquals(resp.getHeader(\"target\"), \"/\");\n         client.close();\n     }", "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\tif (!Context.isRefreshingContext())\n \t\t\t\tmementos.put(key, Context.getSchedulerService().saveToMemento());\n \t\t}\n\t\tcatch (Throwable t) {\n \t\t}\n \t}", "fixed": " \t\t\tif (!Context.isRefreshingContext())\n \t\t\t\tmementos.put(key, Context.getSchedulerService().saveToMemento());\n \t\t}\n\t\tcatch (Exception t) {\n \t\t}\n \t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "1ef123bf60e8f4ba348f2e6399175dee62f016b2", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param ast the variable ast.\n      * @return true, if the variable should be removed.\n      */\n    private boolean shouldRemoveVariable(ScopeData scopeData, DetailAST ast) {\n         boolean shouldRemove = true;\n         for (DetailAST variable : scopeData.uninitializedVariables) {\n             if (variable.getText().equals(ast.getText())) {", "fixed": "      * @param ast the variable ast.\n      * @return true, if the variable should be removed.\n      */\n    private static boolean shouldRemoveVariable(ScopeData scopeData, DetailAST ast) {\n         boolean shouldRemove = true;\n         for (DetailAST variable : scopeData.uninitializedVariables) {\n             if (variable.getText().equals(ast.getText())) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "619ff2bc073d1b8859c8c8e1fa351b7858529670", "projectName": "Atmosphere.atmosphere", "bugType": "Change Operand ", "problem": "     @Override\n     public String toString() {\n        return END + \" End Message Interceptor\";\n     }\n }", "fixed": "     @Override\n     public String toString() {\n        return end + \" End Message Interceptor\";\n     }\n }", "sourceBeforeFix": "END + \" End Message Interceptor\"", "sourceAfterFix": "end + \" End Message Interceptor\""}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "fixed": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "958fa58492daee485f640bf3261449d9bab9ee6e", "projectName": "facebook.presto", "bugType": "Missing Throws Exception", "problem": "         }\n     }\n    @Test(expectedExceptions = RuntimeException.class, expectedExceptionsMessageRegExp = \".*Failing getObjectMetadata call with \" + SC_FORBIDDEN + \".*\")\n     public void testGetMetadataForbidden()\n             throws Exception\n     {", "fixed": "         }\n     }\n    @Test(expectedExceptions = IOException.class, expectedExceptionsMessageRegExp = \".*Failing getObjectMetadata call with \" + SC_FORBIDDEN + \".*\")\n     public void testGetMetadataForbidden()\n             throws Exception\n     {", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "61572af5c51afa3897afcf177bed5f8fa8dd5b4a", "projectName": "neo4j.neo4j", "bugType": "Same Function Less Args", "problem": "     public void assertWriteLockDoesNotLeakMemory() throws InterruptedException\n     {\n         final TransactionManager tm = mock( TransactionManager.class );\n        final RagManager ragManager = new RagManager( tm );\n         final Object resource = new Object();\n         final RWLock lock = new RWLock( resource, ragManager );\n         final Transaction tx1 = mock( Transaction.class );", "fixed": "     public void assertWriteLockDoesNotLeakMemory() throws InterruptedException\n     {\n         final TransactionManager tm = mock( TransactionManager.class );\n        final RagManager ragManager = new RagManager();\n         final Object resource = new Object();\n         final RWLock lock = new RWLock( resource, ragManager );\n         final Transaction tx1 = mock( Transaction.class );", "sourceBeforeFix": "new RagManager(tm)", "sourceAfterFix": "new RagManager()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "c9985da6dd36ba713ee1a5a4fa055bbc56b1a916", "projectName": "Graylog2.graylog2-server", "bugType": "Same Function More Args", "problem": "         if (searchResult.getTotalResultCount() > 0) {\n             return ok(views.html.search.results.render(currentUser(), search, searchResult, histogramResult, q, page, stream));\n         } else {\n            return ok(views.html.search.noresults.render(currentUser(), q, searchResult));\n         }\n     }\n }", "fixed": "         if (searchResult.getTotalResultCount() > 0) {\n             return ok(views.html.search.results.render(currentUser(), search, searchResult, histogramResult, q, page, stream));\n         } else {\n            return ok(views.html.search.noresults.render(currentUser(), q, searchResult, stream));\n         }\n     }\n }", "sourceBeforeFix": "views.html.search.noresults.render(currentUser(),q,searchResult)", "sourceAfterFix": "views.html.search.noresults.render(currentUser(),q,searchResult,stream)"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ccc86e9f1cddebc731ac1ccabdd469df11d72d8b", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tenv.setBufferTimeout(0);", "fixed": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tenv.setBufferTimeout(0);", "sourceBeforeFix": "RestartStrategies.fixedDelayRestart(3,0)", "sourceAfterFix": "RestartStrategies.fixedDelayRestart(1,0)"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setContextPath(\"/say\");\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "fixed": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setContextPath(\"/say\");\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xdf, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "623a0ead3cbcf3a722365aedcbcecc4fbbc74131", "projectName": "openhab.openhab", "bugType": "Change Modifier", "problem": "     \n    public void restart() {\n         delayedExecutor.cancel();\n         delayedExecutor.schedule(new TimerTask() {", "fixed": "     \n    public synchronized void restart() {\n         delayedExecutor.cancel();\n         delayedExecutor.schedule(new TimerTask() {", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probePages.getTypes(), buildPages.getTypes()))\n                 .row(\"20\", 1020L, 2020L, \"20\", 30L, 40L)\n                 .row(\"21\", 1021L, 2021L, \"21\", 31L, 41L)\n                 .row(\"22\", 1022L, 2022L, \"22\", 32L, 42L)", "fixed": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probePages.getTypesWithoutHash(), buildPages.getTypesWithoutHash()))\n                 .row(\"20\", 1020L, 2020L, \"20\", 30L, 40L)\n                 .row(\"21\", 1021L, 2021L, \"21\", 31L, 41L)\n                 .row(\"22\", 1022L, 2022L, \"22\", 32L, 42L)", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "fd37bb87cc8aa1cf713c2f4ddfd2ec95be096d70", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "    * TODO: pass this in rather than create it here if we wind up using\n    * this in more place.  Right now it's only used in testOnTreebank.\n    */\n  protected Function<List<? extends HasWord>, ArrayList<TaggedWord>> tagger;\n   public EvaluateTreebank(LexicalizedParser parser) {\n     this(parser.getOp(), parser.lex, parser);", "fixed": "    * TODO: pass this in rather than create it here if we wind up using\n    * this in more place.  Right now it's only used in testOnTreebank.\n    */\n  protected Function<List<? extends HasWord>, List<TaggedWord>> tagger;\n   public EvaluateTreebank(LexicalizedParser parser) {\n     this(parser.getOp(), parser.lex, parser);", "sourceBeforeFix": "ArrayList<TaggedWord>", "sourceAfterFix": "List<TaggedWord>"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "}, tags={ \"fake_classname_tags 123\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClassname(@Valid Client body);\n }", "fixed": "}, tags={ \"fake_classname_tags 123\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClassname(@Valid Client body) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleDriveEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleDriveEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GoogleDriveEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleDriveEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "         void delta() {}\n         void epsilon() {}\n     }\n    private static class Super {\n         void testOne() {}\n     }\n    private static class Sub extends Super {\n         void testTwo() {}\n     }", "fixed": "         void delta() {}\n         void epsilon() {}\n     }\n    static class Super {\n         void testOne() {}\n     }\n    static class Sub extends Super {\n         void testTwo() {}\n     }", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "cb84b2788aeed6aad2bc4b1acb98290e060861e2", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "fixed": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "sourceBeforeFix": "ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())", "sourceAfterFix": "ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5c1a470af68205e2ef6914ac2892bb84c6f23ea6", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         System.out.println(\"configURL = \" + configURL);\n         BufferedReader reader = new BufferedReader(new InputStreamReader(configURL.openStream()));\n        mapper.parseDocument(operations, XMLInputFactory.newFactory().createXMLStreamReader(reader));\n         return operations;\n     }", "fixed": "         System.out.println(\"configURL = \" + configURL);\n         BufferedReader reader = new BufferedReader(new InputStreamReader(configURL.openStream()));\n        mapper.parseDocument(operations, XMLInputFactory.newInstance().createXMLStreamReader(reader));\n         return operations;\n     }", "sourceBeforeFix": "XMLInputFactory.newFactory()", "sourceAfterFix": "XMLInputFactory.newInstance()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ChatScriptEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedChatScriptEndpointBuilder advanced() {", "fixed": "     \n    public interface ChatScriptEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedChatScriptEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface QuickfixjEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedQuickfixjEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface QuickfixjEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedQuickfixjEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Boolean Literal", "problem": "         RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);\n         RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();\n        assertFalse(runtimeOptions.isMonochrome());\n     }", "fixed": "         RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);\n         RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();\n        assertTrue(runtimeOptions.isMonochrome());\n     }", "sourceBeforeFix": "monochrome=false", "sourceAfterFix": "monochrome=true"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CouchbaseEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCouchbaseEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CouchbaseEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCouchbaseEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SalesforceEndpointBuilder\n             extends\n                 SalesforceEndpointConsumerBuilder, SalesforceEndpointProducerBuilder {\n         default AdvancedSalesforceEndpointBuilder advanced() {", "fixed": "     \n    public interface SalesforceEndpointBuilder\n             extends\n                 SalesforceEndpointConsumerBuilder, SalesforceEndpointProducerBuilder {\n         default AdvancedSalesforceEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "69495db28bb98a92a4710ba2c86498bfb4005694", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "         socketSelector.close();\n       } catch (IOException ex) {\n        LOG.warn(\"Unable to close socket selector\", ex);\n       }\n       throw e;\n     }", "fixed": "         socketSelector.close();\n       } catch (IOException ex) {\n        LOG.warn(\"Unable to close socket selector\");\n       }\n       throw e;\n     }", "sourceBeforeFix": "LOG.warn(\"Unable to close socket selector\",ex)", "sourceAfterFix": "LOG.warn(\"Unable to close socket selector\")"}
{"fixCommitSHA1": "09f2dfd9a7d6ff6ef6ba810de47da813ba11081d", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                 continue;\n             }\n             if (toUpper) {\n                char upper = Character.toLowerCase(ch);\n                 sb.append(upper);\n                 toUpper = false;", "fixed": "                 continue;\n             }\n             if (toUpper) {\n                char upper = Character.toUpperCase(ch);\n                 sb.append(upper);\n                 toUpper = false;", "sourceBeforeFix": "Character.toLowerCase(ch)", "sourceAfterFix": "Character.toUpperCase(ch)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesNodesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesNodesEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KubernetesNodesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesNodesEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedIOTAEndpointBuilder\n             extends\n                 AdvancedIOTAEndpointConsumerBuilder, AdvancedIOTAEndpointProducerBuilder {\n         default IOTAEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedIOTAEndpointBuilder\n             extends\n                 AdvancedIOTAEndpointConsumerBuilder, AdvancedIOTAEndpointProducerBuilder {\n         default IOTAEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "f5fe5ae0a963ee7db95d1f459280017de281af8f", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     if (blockSizeByte > 0) {\n       return (int) mFSMasterClient.createFile(path.getPath(), blockSizeByte, recursive);\n     } else {\n      return (int) mFSMasterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.getPath(),\n           blockSizeByte, recursive);\n     }\n   }", "fixed": "     if (blockSizeByte > 0) {\n       return (int) mFSMasterClient.createFile(path.getPath(), blockSizeByte, recursive);\n     } else {\n      return (int) mFSMasterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.toString(),\n           blockSizeByte, recursive);\n     }\n   }", "sourceBeforeFix": "ufsPath.getPath()", "sourceAfterFix": "ufsPath.toString()"}
{"fixCommitSHA1": "2f892430d9908b1676a2f7138f38c62547744f18", "projectName": "facebook.presto", "bugType": "Same Function More Args", "problem": "                 operatorSignature = functionRegistry.resolveOperator(operatorType, argumentTypes.build());\n             }\n             catch (OperatorNotFoundException e) {\n                throw new SemanticException(TYPE_MISMATCH, node, e.getMessage());\n             }\n             for (int i = 0; i < arguments.length; i++) {", "fixed": "                 operatorSignature = functionRegistry.resolveOperator(operatorType, argumentTypes.build());\n             }\n             catch (OperatorNotFoundException e) {\n                throw new SemanticException(TYPE_MISMATCH, node, \"%s\", e.getMessage());\n             }\n             for (int i = 0; i < arguments.length; i++) {", "sourceBeforeFix": "new SemanticException(TYPE_MISMATCH,node,e.getMessage())", "sourceAfterFix": "new SemanticException(TYPE_MISMATCH,node,\"%s\",e.getMessage())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "b102d67173da3ca972abf7fcd0a2f779ef9870a3", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "   public Optional<ResourceManagementScheduler> getResourceManagementScheduler()\n   {\n     if (leading) {\n      return Optional.of(resourceManagementScheduler);\n     } else {\n       return Optional.absent();\n     }", "fixed": "   public Optional<ResourceManagementScheduler> getResourceManagementScheduler()\n   {\n     if (leading) {\n      return Optional.fromNullable(resourceManagementScheduler);\n     } else {\n       return Optional.absent();\n     }", "sourceBeforeFix": "Optional.of(resourceManagementScheduler)", "sourceAfterFix": "Optional.fromNullable(resourceManagementScheduler)"}
{"fixCommitSHA1": "d9cee23da79c7368a47a894f1bf861f04fdb6f00", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             out.writeDouble((Double) obj);\n         } else if (obj instanceof Float) {\n             out.writeByte(5);\n            out.writeDouble((Float) obj);\n         } else if (obj instanceof Boolean) {\n             out.writeByte(6);\n             out.writeBoolean((Boolean) obj);", "fixed": "             out.writeDouble((Double) obj);\n         } else if (obj instanceof Float) {\n             out.writeByte(5);\n            out.writeFloat((Float) obj);\n         } else if (obj instanceof Boolean) {\n             out.writeByte(6);\n             out.writeBoolean((Boolean) obj);", "sourceBeforeFix": "out.writeDouble((Float)obj)", "sourceAfterFix": "out.writeFloat((Float)obj)"}
{"fixCommitSHA1": "ece31da9a46bfdedf3549638f78d1d18483926fc", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                 }\n             });\n            assertEquals(body[0][0][0], resp.getOut().getHeader(HbaseAttribute.HBASE_VALUE.asHeader()));\n             assertEquals(body[0][1][2], resp.getOut().getHeader(HbaseAttribute.HBASE_VALUE.asHeader(2)));\n         }\n     }", "fixed": "                 }\n             });\n            assertEquals(body[0][0][1], resp.getOut().getHeader(HbaseAttribute.HBASE_VALUE.asHeader()));\n             assertEquals(body[0][1][2], resp.getOut().getHeader(HbaseAttribute.HBASE_VALUE.asHeader(2)));\n         }\n     }", "sourceBeforeFix": "body[0][0][0]", "sourceAfterFix": "body[0][0][1]"}
{"fixCommitSHA1": "66c325e004dc7d1ffb6b97e8af093a8455756d53", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "fixed": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "30c46ed134b6660f4099973832074ab809ffa0d1", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tString name = NettyConfig.CLIENT_THREAD_GROUP_NAME + \" (\" + config.getServerPort() + \")\";\n\t\tEpollEventLoopGroup epollGroup = new EpollEventLoopGroup(config.getServerNumThreads(), NettyServer.getNamedThreadFactory(name));\n \t\tbootstrap.group(epollGroup).channel(EpollSocketChannel.class);\n \t}", "fixed": " \t\tString name = NettyConfig.CLIENT_THREAD_GROUP_NAME + \" (\" + config.getServerPort() + \")\";\n\t\tEpollEventLoopGroup epollGroup = new EpollEventLoopGroup(config.getClientNumThreads(), NettyServer.getNamedThreadFactory(name));\n \t\tbootstrap.group(epollGroup).channel(EpollSocketChannel.class);\n \t}", "sourceBeforeFix": "config.getServerNumThreads()", "sourceAfterFix": "config.getClientNumThreads()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BoxEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBoxEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface BoxEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBoxEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4239763e8de74d0caf04eda4d9cafc2a182ab7cb", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     static int validateAndGetArrayQuantifierFromCurrentToken(String token, String fullPath) {\n         String quantifier = extractArgumentsFromAttributeName(token);\n         if (quantifier == null) {\n            throw new IllegalArgumentException(\"Malformed quantifier \" + quantifier + \" in \" + fullPath);\n         }\n        int index = Integer.valueOf(quantifier);\n         if (index < 0) {\n             throw new IllegalArgumentException(\"Array index \" + index + \" cannot be negative in \" + fullPath);\n         }", "fixed": "     static int validateAndGetArrayQuantifierFromCurrentToken(String token, String fullPath) {\n         String quantifier = extractArgumentsFromAttributeName(token);\n         if (quantifier == null) {\n            throw new IllegalArgumentException(\"Malformed quantifier in \" + fullPath);\n         }\n        int index = Integer.parseInt(quantifier);\n         if (index < 0) {\n             throw new IllegalArgumentException(\"Array index \" + index + \" cannot be negative in \" + fullPath);\n         }", "sourceBeforeFix": "Integer.valueOf(quantifier)", "sourceAfterFix": "Integer.parseInt(quantifier)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "c8b6b7ad22c1d315fa94ecb681f868be1df27744", "projectName": "apache.hbase", "bugType": "Change Unary Operator\t", "problem": "     }\n     LOG.debug(\"Removing:\" + filePath + \" from archive\");\n    if (this.fs.delete(filePath, false)) {\n       LOG.warn(\"Attempted to delete:\" + filePath\n           + \", but couldn't. Run cleaner chain and attempt to delete on next pass.\");\n     }", "fixed": "     }\n     LOG.debug(\"Removing:\" + filePath + \" from archive\");\n    if (!this.fs.delete(filePath, false)) {\n       LOG.warn(\"Attempted to delete:\" + filePath\n           + \", but couldn't. Run cleaner chain and attempt to delete on next pass.\");\n     }", "sourceBeforeFix": "this.fs.delete(filePath,false)", "sourceAfterFix": "!this.fs.delete(filePath,false)"}
{"fixCommitSHA1": "b5247d268fd7d0c60421becb0dd1297ca545d219", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\tconnection.setDoOutput(doingOutPut);\r\n \t\t\tconnection.setDoInput(true);\r\n \t\t\tconnection.setRequestMethod(method);\r\n\t\t\tconnection.setFollowRedirects(httpRequest.getFollowRedirects());\r\n \t\t\tlock.lock();\r\n \t\t\tconnections.put(httpRequest, connection);\r", "fixed": " \t\t\tconnection.setDoOutput(doingOutPut);\r\n \t\t\tconnection.setDoInput(true);\r\n \t\t\tconnection.setRequestMethod(method);\r\n\t\t\tHttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\r\n \t\t\tlock.lock();\r\n \t\t\tconnections.put(httpRequest, connection);\r", "sourceBeforeFix": "connection.setFollowRedirects(httpRequest.getFollowRedirects())", "sourceAfterFix": "HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())"}
{"fixCommitSHA1": "d08bf8738680178b111ce07d9b4593464125fe3a", "projectName": "yasserg.crawler4j", "bugType": "Less Specific If", "problem": "             webURL.setDocid(-1);\n             webURL.setAnchor(curURL.getAnchor());\n             if (shouldVisit(page, webURL)) {\n              if (robotstxtServer.allows(webURL)) {\n                 webURL.setDocid(docIdServer.getNewDocID(movedToUrl));\n                 frontier.schedule(webURL);\n               } else {", "fixed": "             webURL.setDocid(-1);\n             webURL.setAnchor(curURL.getAnchor());\n             if (shouldVisit(page, webURL)) {\n              if (!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)) {\n                 webURL.setDocid(docIdServer.getNewDocID(movedToUrl));\n                 frontier.schedule(webURL);\n               } else {", "sourceBeforeFix": "robotstxtServer.allows(webURL)", "sourceAfterFix": "!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "fixed": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "4bd91a10792b8d27f7807665718795bb551ad89b", "projectName": "alibaba.canal", "bugType": "Same Function More Args", "problem": "             hbaseSyncService = new HbaseSyncService(hbaseTemplate);\n             configMonitor = new HbaseConfigMonitor();\n            configMonitor.init(this);\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }", "fixed": "             hbaseSyncService = new HbaseSyncService(hbaseTemplate);\n             configMonitor = new HbaseConfigMonitor();\n            configMonitor.init(this, envProperties);\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }", "sourceBeforeFix": "configMonitor.init(this)", "sourceAfterFix": "configMonitor.init(this,envProperties)"}
{"fixCommitSHA1": "14b92d8c8c61a1acf6c472026bd66948da6fb28f", "projectName": "apache.hadoop", "bugType": "Change Numeric Literal", "problem": "   ClientProtocol client;\nstatic final long TIMEOUT = 20000L;\nstatic final double CAPACITY_ALLOWED_VARIANCE = 0.005;\nstatic final double BALANCE_ALLOWED_VARIANCE = 0.11;\n   static final int DEFAULT_BLOCK_SIZE = 10;", "fixed": "   ClientProtocol client;\nstatic final long TIMEOUT = 40000L;\nstatic final double CAPACITY_ALLOWED_VARIANCE = 0.005;\nstatic final double BALANCE_ALLOWED_VARIANCE = 0.11;\n   static final int DEFAULT_BLOCK_SIZE = 10;", "sourceBeforeFix": "TIMEOUT=20000L", "sourceAfterFix": "TIMEOUT=40000L"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CoAPEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCoAPEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CoAPEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCoAPEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "dea7ef0e0aae5ba4aef9d104cd10af986be9fc53", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     private int port2;\n     private static class MultipartHeaderFilterStrategy extends DefaultHeaderFilterStrategy {\n        public MultipartHeaderFilterStrategy() {\n             initialize();\n         }", "fixed": "     private int port2;\n     private static class MultipartHeaderFilterStrategy extends DefaultHeaderFilterStrategy {\n        MultipartHeaderFilterStrategy() {\n             initialize();\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KinesisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKinesisEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KinesisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKinesisEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4b5b23080231275733361d2dda966fce760cc295", "projectName": "netty.netty", "bugType": "Change Numeric Literal", "problem": " import static io.netty.handler.codec.http2.Http2Exception.connectionError;\n public class DefaultHttp2HeadersDecoder implements Http2HeadersDecoder, Http2HeadersDecoder.Configuration {\n    private static final float HEADERS_COUNT_WEIGHT_NEW = 1 / 5;\n     private static final float HEADERS_COUNT_WEIGHT_HISTORICAL = 1 - HEADERS_COUNT_WEIGHT_NEW;\n     private final int maxHeaderSize;", "fixed": " import static io.netty.handler.codec.http2.Http2Exception.connectionError;\n public class DefaultHttp2HeadersDecoder implements Http2HeadersDecoder, Http2HeadersDecoder.Configuration {\n    private static final float HEADERS_COUNT_WEIGHT_NEW = 1 / 5f;\n     private static final float HEADERS_COUNT_WEIGHT_HISTORICAL = 1 - HEADERS_COUNT_WEIGHT_NEW;\n     private final int maxHeaderSize;", "sourceBeforeFix": "1 / 5", "sourceAfterFix": "1 / 5f"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DigitalSignatureEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDigitalSignatureEndpointBuilder advanced() {", "fixed": "     \n    public interface DigitalSignatureEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDigitalSignatureEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8b3c80c0bf286943881455566423a18c563c3896", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "     }\n     protected Set<String> getSelectedFields(String fields) {\n        Set<String> selectedFields = Sets.newHashSet();\n         if (fields != null && !fields.isEmpty()) {\n             Iterables.addAll(selectedFields, Splitter.on(',').split(fields));\n         } else {", "fixed": "     }\n     protected Set<String> getSelectedFields(String fields) {\n        Set<String> selectedFields = Sets.newLinkedHashSet();\n         if (fields != null && !fields.isEmpty()) {\n             Iterables.addAll(selectedFields, Splitter.on(',').split(fields));\n         } else {", "sourceBeforeFix": "Sets.newHashSet()", "sourceAfterFix": "Sets.newLinkedHashSet()"}
{"fixCommitSHA1": "fb1a1ca0d397301efc3cc702e4836b9bca169251", "projectName": "openmrs.openmrs-core", "bugType": "Less Specific If", "problem": " \tpublic void before(Method method, Object[] args, Object target) throws Throwable {\r\n \t\tString methodName = method.getName();\r\n\t\tif (methodName.startsWith(\"save\")) {\r\n \t\t\tObject mainArgument = args[0];\r", "fixed": " \tpublic void before(Method method, Object[] args, Object target) throws Throwable {\r\n \t\tString methodName = method.getName();\r\n\t\tif (methodName.startsWith(\"save\") || methodName.startsWith(\"create\") || methodName.startsWith(\"update\")) {\r\n \t\t\tObject mainArgument = args[0];\r", "sourceBeforeFix": "methodName.startsWith(\"save\")", "sourceAfterFix": "methodName.startsWith(\"save\") || methodName.startsWith(\"create\") || methodName.startsWith(\"update\")"}
{"fixCommitSHA1": "46363095970e1bd8f6046414fcf15b41a9c25452", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         HttpRequest request = new DefaultHttpRequest(\n                HttpVersion.HTTP_1_1, HttpMethod.GET, uri.toASCIIString());\n         request.setHeader(HttpHeaders.Names.HOST, host);\n         request.setHeader(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE);\n         request.setHeader(HttpHeaders.Names.ACCEPT_ENCODING, HttpHeaders.Values.GZIP);", "fixed": "         HttpRequest request = new DefaultHttpRequest(\n                HttpVersion.HTTP_1_1, HttpMethod.GET, uri.getRawPath());\n         request.setHeader(HttpHeaders.Names.HOST, host);\n         request.setHeader(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE);\n         request.setHeader(HttpHeaders.Names.ACCEPT_ENCODING, HttpHeaders.Values.GZIP);", "sourceBeforeFix": "uri.toASCIIString()", "sourceAfterFix": "uri.getRawPath()"}
{"fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(littleEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "fixed": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}
{"fixCommitSHA1": "5b11b62810156d985ad70527c02708d9c7ecc2a4", "projectName": "wildfly.wildfly", "bugType": "Change Binary Operator", "problem": "         }\n         serviceBuilder.addDependency(threadFactoryName, ThreadFactory.class, service.getThreadFactoryInjector());\n         final String handoffExecutor = this.handoffExecutor;\n        if (handoffExecutor == null) {\n             final ServiceName handoffExecutorName = JBOSS_THREAD_EXECUTOR.append(handoffExecutor);\n             serviceBuilder.addDependency(handoffExecutorName, Executor.class, service.getHandoffExecutorInjector());\n         }", "fixed": "         }\n         serviceBuilder.addDependency(threadFactoryName, ThreadFactory.class, service.getThreadFactoryInjector());\n         final String handoffExecutor = this.handoffExecutor;\n        if (handoffExecutor != null) {\n             final ServiceName handoffExecutorName = JBOSS_THREAD_EXECUTOR.append(handoffExecutor);\n             serviceBuilder.addDependency(handoffExecutorName, Executor.class, service.getHandoffExecutorInjector());\n         }", "sourceBeforeFix": "handoffExecutor == null", "sourceAfterFix": "handoffExecutor != null"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "ab45cc12ff4e9b8e62aa1b3776367df3b1020b93", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "         @Override\n         public Number getMaximumValue() {\n             if (maximum == null) {\n                AbstractRanking.refreshMinMax(this, graph);\n             }\n             return maximum;\n         }", "fixed": "         @Override\n         public Number getMaximumValue() {\n             if (maximum == null) {\n                DynamicAttributeRanking.refreshMinMax(this, graph);\n             }\n             return maximum;\n         }", "sourceBeforeFix": "AbstractRanking.refreshMinMax(this,graph)", "sourceAfterFix": "DynamicAttributeRanking.refreshMinMax(this,graph)"}
{"fixCommitSHA1": "dc936e03bc02c2ac536b2929b676594bebb7124f", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         }\n         if (timeoutCheckerExecutorService != null) {\n            camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService);\n         }\n         ServiceHelper.stopServices(timeoutMap, processor, deadLetterProducerTemplate);", "fixed": "         }\n         if (timeoutCheckerExecutorService != null) {\n            camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService);\n         }\n         ServiceHelper.stopServices(timeoutMap, processor, deadLetterProducerTemplate);", "sourceBeforeFix": "camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService)", "sourceAfterFix": "camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BrowseEndpointBuilder\n             extends\n                 BrowseEndpointConsumerBuilder, BrowseEndpointProducerBuilder {\n         default AdvancedBrowseEndpointBuilder advanced() {", "fixed": "     \n    public interface BrowseEndpointBuilder\n             extends\n                 BrowseEndpointConsumerBuilder, BrowseEndpointProducerBuilder {\n         default AdvancedBrowseEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean mouseMoved (int screenX, int screenY) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].mouseMoved(screenX, screenY)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean mouseMoved (int screenX, int screenY) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).mouseMoved(screenX, screenY)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "cd699c562ec26d3909af08afb04de6080e4ad18f", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic static TaskManager createTaskManager(JobManager jm) throws Exception {\n\t\tInetAddress localhost = InetAddress.getLoopbackAddress();\n \t\tInetSocketAddress jmMockAddress = new InetSocketAddress(localhost, 55443);\n \t\tConfiguration cfg = new Configuration();", "fixed": " \t}\n \tpublic static TaskManager createTaskManager(JobManager jm) throws Exception {\n\t\tInetAddress localhost = InetAddress.getLocalHost();\n \t\tInetSocketAddress jmMockAddress = new InetSocketAddress(localhost, 55443);\n \t\tConfiguration cfg = new Configuration();", "sourceBeforeFix": "InetAddress.getLoopbackAddress()", "sourceAfterFix": "InetAddress.getLocalHost()"}
{"fixCommitSHA1": "9fc02469522f77d08bd814f383c3dbf59977b39b", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "       Logger.getLogger(SourceMapInput.class.getName());\n   private SourceFile sourceFile;\n  private volatile SourceMapConsumerV3 parsedSourceMap = null;\n   public SourceMapInput(SourceFile sourceFile) {\n     this.sourceFile = sourceFile;", "fixed": "       Logger.getLogger(SourceMapInput.class.getName());\n   private SourceFile sourceFile;\n  private SourceMapConsumerV3 parsedSourceMap = null;\n   public SourceMapInput(SourceFile sourceFile) {\n     this.sourceFile = sourceFile;", "sourceBeforeFix": "66", "sourceAfterFix": "2"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUser(@Valid User body);\n     @POST\n     @Path(\"/createWithArray\")", "fixed": "     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUser(@Valid User body) throws Exception;\n     @POST\n     @Path(\"/createWithArray\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CMISEndpointBuilder\n             extends\n                 CMISEndpointConsumerBuilder, CMISEndpointProducerBuilder {\n         default AdvancedCMISEndpointBuilder advanced() {", "fixed": "     \n    public interface CMISEndpointBuilder\n             extends\n                 CMISEndpointConsumerBuilder, CMISEndpointProducerBuilder {\n         default AdvancedCMISEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "250487e835b390d164789fcb58ba946e3c77ef22", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     \n     public Object lookupLink(String name) throws NamingException {\n        return lookup(parseName(name));\n     }\n     ", "fixed": "     \n     public Object lookupLink(String name) throws NamingException {\n        return lookupLink(parseName(name));\n     }\n     ", "sourceBeforeFix": "lookup(parseName(name))", "sourceAfterFix": "lookupLink(parseName(name))"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "5825d83fc69047c2b821beca9d27f69f49533e84", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   @Test\n   public void equalsTest() throws Exception {\n    CommonTestUtils.testEquals(CreateOptions.class);\n   }\n }", "fixed": "   @Test\n   public void equalsTest() throws Exception {\n    CommonTestUtils.testEquals(MkdirsOptions.class);\n   }\n }", "sourceBeforeFix": "CreateOptions.class", "sourceAfterFix": "MkdirsOptions.class"}
{"fixCommitSHA1": "73a03b5e232d8f7049a03361e0454cb2eecb90c7", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": " @Category(QuickTest.class)\n public class AdvancedSemaphoreTest extends HazelcastTestSupport {\n    @Test(timeout = 30000)\n     public void testSemaphoreWithFailures() throws InterruptedException {\n         final int k = 4;\n        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(k + 1);\n         final HazelcastInstance[] instances = factory.newInstances();\n         final ISemaphore semaphore = instances[k].getSemaphore(\"test\");", "fixed": " @Category(QuickTest.class)\n public class AdvancedSemaphoreTest extends HazelcastTestSupport {\n    @Test(timeout = 120000)\n     public void testSemaphoreWithFailures() throws InterruptedException {\n         final int k = 4;\n        final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(k + 1);\n         final HazelcastInstance[] instances = factory.newInstances();\n         final ISemaphore semaphore = instances[k].getSemaphore(\"test\");", "sourceBeforeFix": "timeout=30000", "sourceAfterFix": "timeout=120000"}
{"fixCommitSHA1": "99768f3572346de16f2e9985a957ed1f8119d66e", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "     return new JedisClusterCommand<Long>(connectionHandler, maxAttempts) {\n       @Override\n       public Long execute(Jedis connection) {\n        return connection.pexpire(key, millisecondsTimestamp);\n       }\n     }.runBinary(key);\n   }", "fixed": "     return new JedisClusterCommand<Long>(connectionHandler, maxAttempts) {\n       @Override\n       public Long execute(Jedis connection) {\n        return connection.pexpireAt(key, millisecondsTimestamp);\n       }\n     }.runBinary(key);\n   }", "sourceBeforeFix": "connection.pexpire(key,millisecondsTimestamp)", "sourceAfterFix": "connection.pexpireAt(key,millisecondsTimestamp)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "25923003ecdba4ed236618b917dadeb36e74addf", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                }\r\n                if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "fixed": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SplunkEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSplunkEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SplunkEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSplunkEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "220a7265cb4eafdd5fc40895b5822715b4f4461f", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             final CacheWanEventPublisher publisher = service.getCacheWanEventPublisher();\n             final CacheEntryView<Data, Data> view = CacheEntryViews.createDefaultEntryView(\n                     key, toData(record.getValue()), record);\n            publisher.publishWanReplicationUpdate(name, view);\n         }\n     }", "fixed": "             final CacheWanEventPublisher publisher = service.getCacheWanEventPublisher();\n             final CacheEntryView<Data, Data> view = CacheEntryViews.createDefaultEntryView(\n                     key, toData(record.getValue()), record);\n            publisher.publishWanReplicationUpdateBackup(name, view);\n         }\n     }", "sourceBeforeFix": "publisher.publishWanReplicationUpdate(name,view)", "sourceAfterFix": "publisher.publishWanReplicationUpdateBackup(name,view)"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "fixed": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "sourceBeforeFix": "factory.get(sResultWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResultWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastMapEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastMapEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HazelcastMapEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastMapEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "69fb121cc09b8fdf6c4aa63fbb634c1e322641db", "projectName": "alibaba.fastjson", "bugType": "Less Specific If", "problem": "             long millis = ((java.sql.Date) object).getTime();\r\n             TimeZone timeZone = serializer.timeZone;\r\n             int offset = timeZone.getOffset(millis);\r\n            if (millis % offset == 0) {\r\n                 out.writeString(object.toString());\r\n                 return;\r\n             }\r", "fixed": "             long millis = ((java.sql.Date) object).getTime();\r\n             TimeZone timeZone = serializer.timeZone;\r\n             int offset = timeZone.getOffset(millis);\r\n            if (offset == 0 || millis % offset == 0) {\r\n                 out.writeString(object.toString());\r\n                 return;\r\n             }\r", "sourceBeforeFix": "millis % offset == 0", "sourceAfterFix": "offset == 0 || millis % offset == 0"}
{"fixCommitSHA1": "a85bc005400d000cdf9efd1cf791d3e2f0ead12e", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     classes = {\n         CamelAutoConfiguration.class,\n         CamelCloudAutoConfiguration.class,\n        CamelCloudServiceCallConfiguration.class\n     },\n     properties = {\n         \"camel.cloud.load-balancer.enabled=false\",", "fixed": "     classes = {\n         CamelAutoConfiguration.class,\n         CamelCloudAutoConfiguration.class,\n        CamelCloudServiceCallRoutesAutoConfiguration.class\n     },\n     properties = {\n         \"camel.cloud.load-balancer.enabled=false\",", "sourceBeforeFix": "CamelCloudServiceCallConfiguration.class", "sourceAfterFix": "CamelCloudServiceCallRoutesAutoConfiguration.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fba66d652357d9f116945382b2e3b1e65e295376", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "         if (mFs.exists(new Path(path))) {\n           return true;\n         }\n        return mFs.mkdirs(new Path(path), null);\n       } catch (IOException e) {\n         cnt ++;\n         LOG.error(cnt + \" : \" + e.getMessage(), e);", "fixed": "         if (mFs.exists(new Path(path))) {\n           return true;\n         }\n        return mFs.mkdirs(new Path(path));\n       } catch (IOException e) {\n         cnt ++;\n         LOG.error(cnt + \" : \" + e.getMessage(), e);", "sourceBeforeFix": "mFs.mkdirs(new Path(path),null)", "sourceAfterFix": "mFs.mkdirs(new Path(path))"}
{"fixCommitSHA1": "6d04aa179485f331deff328f511f9b494bdb4d43", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       addRegionStateToPut(putA, RegionState.State.CLOSED);\n      addRegionStateToPut(putA, RegionState.State.CLOSED);\naddSequenceNum(putA, 1, -1, splitA.getReplicaId());\n       addSequenceNum(putB, 1, -1, splitB.getReplicaId());", "fixed": "       addRegionStateToPut(putA, RegionState.State.CLOSED);\n      addRegionStateToPut(putB, RegionState.State.CLOSED);\naddSequenceNum(putA, 1, -1, splitA.getReplicaId());\n       addSequenceNum(putB, 1, -1, splitB.getReplicaId());", "sourceBeforeFix": "addRegionStateToPut(putA,RegionState.State.CLOSED)", "sourceAfterFix": "addRegionStateToPut(putB,RegionState.State.CLOSED)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "40bc1faf5c4df7faea20f37ffce6a62fb90b8cd9", "projectName": "jersey.jersey", "bugType": "Less Specific If", "problem": "*         {@link\n      */\n     public static List<MediaType> createQualitySourceMediaTypes(Produces mime) {\n        if (mime == null) {\n             return GENERAL_QUALITY_SOURCE_MEDIA_TYPE_LIST;\n         }", "fixed": "*         {@link\n      */\n     public static List<MediaType> createQualitySourceMediaTypes(Produces mime) {\n        if (mime == null || mime.value().length == 0) {\n             return GENERAL_QUALITY_SOURCE_MEDIA_TYPE_LIST;\n         }", "sourceBeforeFix": "mime == null", "sourceAfterFix": "mime == null || mime.value().length == 0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesJobEndpointBuilder\n             extends\n                 KubernetesJobEndpointConsumerBuilder, KubernetesJobEndpointProducerBuilder {\n         default AdvancedKubernetesJobEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesJobEndpointBuilder\n             extends\n                 KubernetesJobEndpointConsumerBuilder, KubernetesJobEndpointProducerBuilder {\n         default AdvancedKubernetesJobEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.debug(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "fixed": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.trace(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "sourceBeforeFix": "logger.debug(\"Requsting URL {}\",url)", "sourceAfterFix": "logger.trace(\"Requsting URL {}\",url)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ConsulEndpointBuilder\n             extends\n                 ConsulEndpointConsumerBuilder, ConsulEndpointProducerBuilder {\n         default AdvancedConsulEndpointBuilder advanced() {", "fixed": "     \n    public interface ConsulEndpointBuilder\n             extends\n                 ConsulEndpointConsumerBuilder, ConsulEndpointProducerBuilder {\n         default AdvancedConsulEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "bd7bd6edc871d515c41d9c33f7593849f4d3dc40", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tSessionManager sessionManager = manager.getDeployment().getSessionManager();\n \t\tint sessionTimeout = (getSessionTimeout() == null || getSessionTimeout().isZero()\n \t\t\t\t|| getSessionTimeout().isNegative() ? -1\n\t\t\t\t\t\t: (int) getSessionTimeout().toMinutes());\n \t\tsessionManager.setDefaultSessionTimeout(sessionTimeout);\n \t\treturn manager;\n \t}", "fixed": " \t\tSessionManager sessionManager = manager.getDeployment().getSessionManager();\n \t\tint sessionTimeout = (getSessionTimeout() == null || getSessionTimeout().isZero()\n \t\t\t\t|| getSessionTimeout().isNegative() ? -1\n\t\t\t\t\t\t: (int) getSessionTimeout().getSeconds());\n \t\tsessionManager.setDefaultSessionTimeout(sessionTimeout);\n \t\treturn manager;\n \t}", "sourceBeforeFix": "getSessionTimeout().toMinutes()", "sourceAfterFix": "getSessionTimeout().getSeconds()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2230a91829f39b72973e6fecf275d9c664911ca0", "projectName": "clojure.clojure", "bugType": "Change Caller in Function Call", "problem": " \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n\t\tthrow new CompilerException(sourceName, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{", "fixed": " \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n\t\tthrow new CompilerException(sourcePath, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{", "sourceBeforeFix": "SOURCE.deref()", "sourceAfterFix": "SOURCE_PATH.deref()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e5d3850776174a63ddc2e0b5ead58409ca7c8706", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   protected void initTable() throws IOException {\n     super.initTable();\n    byte[] tableName = getTablename().getBytes();\n     HBaseAdmin admin = new HBaseAdmin(conf);\n     HTableDescriptor tableDesc = admin.getTableDescriptor(tableName);\n     LOG.info(\"Disabling table \" + getTablename());", "fixed": "   protected void initTable() throws IOException {\n     super.initTable();\n    byte[] tableName = getTablename().getName();\n     HBaseAdmin admin = new HBaseAdmin(conf);\n     HTableDescriptor tableDesc = admin.getTableDescriptor(tableName);\n     LOG.info(\"Disabling table \" + getTablename());", "sourceBeforeFix": "getTablename().getBytes()", "sourceAfterFix": "getTablename().getName()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "9d87dbad9f0c649c8244586cfea3ca25731da893", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       pushScope(s);\n       traverseBranch(root, null);\n       popScope();\n    } catch (Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }", "fixed": "       pushScope(s);\n       traverseBranch(root, null);\n       popScope();\n    } catch (Error | Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }", "sourceBeforeFix": "Exception unexpectedException", "sourceAfterFix": "Throwable unexpectedException"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "61e865ebbc51c172589f7f1ec9ef4ca4de62aa53", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             for (int i = 0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {\n                 RecordStore recordStore = getPartitionContainer(i).getRecordStore(mapContainer.getName());\n                if (nodeEngine.getPartitionService().getPartitionOwner(i).equals(nodeEngine.getClusterService().getThisAddress())) {\n                     if (!recordMap.containsKey(mapContainer)) {\n                         recordMap.put(mapContainer, new ArrayList<Record>());\n                     }", "fixed": "             for (int i = 0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {\n                 RecordStore recordStore = getPartitionContainer(i).getRecordStore(mapContainer.getName());\n                if (nodeEngine.getClusterService().getThisAddress().equals(nodeEngine.getPartitionService().getPartitionOwner(i))) {\n                     if (!recordMap.containsKey(mapContainer)) {\n                         recordMap.put(mapContainer, new ArrayList<Record>());\n                     }", "sourceBeforeFix": "nodeEngine.getPartitionService()", "sourceAfterFix": "nodeEngine.getClusterService()"}
{"fixCommitSHA1": "427bea8bae3af37769a58f579767d54cb7af415a", "projectName": "alibaba.druid", "bugType": "Change Identifier Used", "problem": "                     mbeanServer.registerMBean(instance, objectName);\r\n                 }\r\n             } catch (Exception ex) {\r\n                getLog().error(\"register druid-driver mbean error\", ex);\r\n             }\r\n             return true;\r", "fixed": "                     mbeanServer.registerMBean(instance, objectName);\r\n                 }\r\n             } catch (Exception ex) {\r\n                getLog().warn(\"register druid-driver mbean error\", ex);\r\n             }\r\n             return true;\r", "sourceBeforeFix": "getLog().error(\"register druid-driver mbean error\",ex)", "sourceAfterFix": "getLog().warn(\"register druid-driver mbean error\",ex)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fcea9dfeb6b2e12cb04602baac67b3a1c3cb58c9", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "     SimpleAttributeDefinition TARGET = SimpleAttributeDefinitionBuilder.create(\"target\", ModelType.STRING, true).\n             setDefaultValue(new ModelNode().set(Target.SYSTEM_OUT.toString())).\n            setValidator(EnumValidator.create(Target.class, false, false)).\n             build();\n     SimpleAttributeDefinition USE_PARENT_HANDLERS = SimpleAttributeDefinitionBuilder.create(\"use-parent-handlers\", ModelType.BOOLEAN, true).", "fixed": "     SimpleAttributeDefinition TARGET = SimpleAttributeDefinitionBuilder.create(\"target\", ModelType.STRING, true).\n             setDefaultValue(new ModelNode().set(Target.SYSTEM_OUT.toString())).\n            setValidator(EnumValidator.create(Target.class, true, false)).\n             build();\n     SimpleAttributeDefinition USE_PARENT_HANDLERS = SimpleAttributeDefinitionBuilder.create(\"use-parent-handlers\", ModelType.BOOLEAN, true).", "sourceBeforeFix": "SimpleAttributeDefinitionBuilder.create(\"min-level\",ModelType.STRING)", "sourceAfterFix": "SimpleAttributeDefinitionBuilder.create(\"min-level\",ModelType.STRING,true)"}
{"fixCommitSHA1": "cadd7d58548bdf3287bc1c2c1c148a202db7319e", "projectName": "brianfrankcooper.YCSB", "bugType": "Change Identifier Used", "problem": "           measurements.get((int)(totalOps*0.9999)).value());\n     }\n    exportReturnCodes(exporter);\n   }\n   @Override", "fixed": "           measurements.get((int)(totalOps*0.9999)).value());\n     }\n    exportStatusCounts(exporter);\n   }\n   @Override", "sourceBeforeFix": "exportReturnCodes(exporter)", "sourceAfterFix": "exportStatusCounts(exporter)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "dab3fd4ad03138276d58b212fcdd4efded59ee33", "projectName": "nhaarman.ListViewAnimations", "bugType": "Change Identifier Used", "problem": "     \n    @NonNull\n     private SwipeUndoTouchListener mSwipeUndoTouchListener;\n     /**", "fixed": "     \n    @Nullable\n     private SwipeUndoTouchListener mSwipeUndoTouchListener;\n     /**", "sourceBeforeFix": "@NonNull", "sourceAfterFix": "@Nullable"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "040343b917a3989fe6fba30a6deddb8974a68bb5", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "         url = url.setPath(RegistryService.class.getName())\r\n                 .addParameter(Constants.INTERFACE_KEY, RegistryService.class.getName())\r\n                 .removeParameters(Constants.EXPORT_KEY, Constants.REFER_KEY);\r\n        String key = url.toServiceString();\r\n         LOCK.lock();\r\n         try {\r", "fixed": "         url = url.setPath(RegistryService.class.getName())\r\n                 .addParameter(Constants.INTERFACE_KEY, RegistryService.class.getName())\r\n                 .removeParameters(Constants.EXPORT_KEY, Constants.REFER_KEY);\r\n        String key = url.toServiceStringWithoutResolving();\r\n         LOCK.lock();\r\n         try {\r", "sourceBeforeFix": "url.toServiceString()", "sourceAfterFix": "url.toServiceStringWithoutResolving()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArraysEXT(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "fixed": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArrays(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "sourceBeforeFix": "GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)", "sourceAfterFix": "GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5ac0dcd1b04e38a3dbe11a94897cc0a34ef2d5ec", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Override\n\tpublic void log (String tag, String message, Exception exception) {\n \t\tif (logLevel >= LOG_INFO) Log.i(tag, message, exception);\n \t}", "fixed": " \t}\n \t@Override\n\tpublic void log (String tag, String message, Throwable exception) {\n \t\tif (logLevel >= LOG_INFO) Log.i(tag, message, exception);\n \t}", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "Throwable exception"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8877ee97143e1eed99029be50bc62cc25c86d7e5", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "           }\n         },\n         factory,\n        Arrays.asList(new TimeBoundaryTieredBrokerSelectorStrategy(), new PriorityTieredBrokerSelectorStrategy(0, 1))\n     );\n     EasyMock.expect(factory.createSelector(EasyMock.<String>anyObject())).andReturn(selector).atLeastOnce();\n     EasyMock.replay(factory);", "fixed": "           }\n         },\n         factory,\n        Arrays.asList(new TimeBoundaryTieredBrokerSelectorStrategy(), new PriorityTieredBrokerSelectorStrategy(1, 1))\n     );\n     EasyMock.expect(factory.createSelector(EasyMock.<String>anyObject())).andReturn(selector).atLeastOnce();\n     EasyMock.replay(factory);", "sourceBeforeFix": "new PriorityTieredBrokerSelectorStrategy(0,1)", "sourceAfterFix": "new PriorityTieredBrokerSelectorStrategy(1,1)"}
{"fixCommitSHA1": "788f17bef1ee997c7652cf6c560682d37edc24eb", "projectName": "openmrs.openmrs-core", "bugType": "Change Numeric Literal", "problem": " \t\tconceptService.saveConceptStopWord(conceptStopWord);\r\n \t\tList<String> conceptStopWords = conceptService.getConceptStopWords(Locale.US);\r\n\t\tassertEquals(2, conceptStopWords.size());\r\n \t}\r\n \t/**\r", "fixed": " \t\tconceptService.saveConceptStopWord(conceptStopWord);\r\n \t\tList<String> conceptStopWords = conceptService.getConceptStopWords(Locale.US);\r\n\t\tassertEquals(1, conceptStopWords.size());\r\n \t}\r\n \t/**\r", "sourceBeforeFix": "assertEquals(2,conceptStopWords.size())", "sourceAfterFix": "assertEquals(1,conceptStopWords.size())"}
{"fixCommitSHA1": "868cffb44fac6d02e9bfe6a0bbaf615fe64017d1", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": " import java.io.Closeable;\nclass HiveMetastoreClient\n         extends ThriftHiveMetastore.Client\n         implements Closeable\n {\n     private final TTransport transport;\n    HiveMetastoreClient(TTransport transport)\n     {\n         super(new TBinaryProtocol(transport));\n         this.transport = transport;", "fixed": " import java.io.Closeable;\npublic class HiveMetastoreClient\n         extends ThriftHiveMetastore.Client\n         implements Closeable\n {\n     private final TTransport transport;\n    public HiveMetastoreClient(TTransport transport)\n     {\n         super(new TBinaryProtocol(transport));\n         this.transport = transport;", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bbe22e599c7516a08f1a0c5aff540d4ef5a02eb3", "projectName": "google.closure-compiler", "bugType": "Change Operand ", "problem": "         lineNo = sourceMapping.getLineNumber();\n         charNo = sourceMapping.getColumnPosition();\n         String identifier = sourceMapping.getIdentifier();\n        if (sourceMapping != null && !identifier.isEmpty()) {\n           originalName = identifier;\n         }\n       }", "fixed": "         lineNo = sourceMapping.getLineNumber();\n         charNo = sourceMapping.getColumnPosition();\n         String identifier = sourceMapping.getIdentifier();\n        if (identifier != null && !identifier.isEmpty()) {\n           originalName = identifier;\n         }\n       }", "sourceBeforeFix": "sourceMapping != null", "sourceAfterFix": "identifier != null"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "93facb514e158589060eacc69e50cc7ff76082b2", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (keys.isEmpty()) {\n             return;\n         }\n        final Collection<Data> dataKeys = convertKeysToData(keys);\n         if (replaceExistingValues) {\n             invalidateNearCache(dataKeys);\n         }", "fixed": "         if (keys.isEmpty()) {\n             return;\n         }\n        final List<Data> dataKeys = convertKeysToData(keys);\n         if (replaceExistingValues) {\n             invalidateNearCache(dataKeys);\n         }", "sourceBeforeFix": "Collection<Data>", "sourceAfterFix": "List<Data>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformiv(program,location,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public boolean updateWorld() {\n         boolean repositioned = octree.repositionNodes();\n         boolean updated = dataBridge.updateWorld();", "fixed": "     }\n     @Override\n    public synchronized boolean updateWorld() {\n         boolean repositioned = octree.repositionNodes();\n         boolean updated = dataBridge.updateWorld();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "3c8d3e908b01f47c69600a235fb7e5173f4f0d7b", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   \n  public final Iterable<ObjectType> getImplementedInterfaces() {\n     FunctionType superCtor = isConstructor() ? getSuperClassConstructor() : null;\n     if (superCtor == null) {\n       return implementedInterfaces;", "fixed": "   }\n   \n  public final ImmutableList<ObjectType> getImplementedInterfaces() {\n     FunctionType superCtor = isConstructor() ? getSuperClassConstructor() : null;\n     if (superCtor == null) {\n       return implementedInterfaces;", "sourceBeforeFix": "Iterable<ObjectType>", "sourceAfterFix": "ImmutableList<ObjectType>"}
{"fixCommitSHA1": "e0aff862bb608004841da3487d94aecb45964e17", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = FILES_BYTES * 1000L / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }", "fixed": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = FILES_BYTES * 1000.0 / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }", "sourceBeforeFix": "FILES_BYTES * 1000L", "sourceAfterFix": "FILES_BYTES * 1000.0"}
{"fixCommitSHA1": "fa04fa8df997e88d5109f9fd6d8ec61167cf5750", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "    */\n   public void clearPersistedFiles(List<Long> persistedFiles) {\n     synchronized (mPersistedFiles) {\n      mPersistedFiles.removeAll(mPersistedFiles);\n     }\n   }\n }", "fixed": "    */\n   public void clearPersistedFiles(List<Long> persistedFiles) {\n     synchronized (mPersistedFiles) {\n      mPersistedFiles.removeAll(persistedFiles);\n     }\n   }\n }", "sourceBeforeFix": "mPersistedFiles.removeAll(mPersistedFiles)", "sourceAfterFix": "mPersistedFiles.removeAll(persistedFiles)"}
{"fixCommitSHA1": "26604fde31e9f4586c18209285b7b5c3bc80d51e", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         return updatedUnpartitionedSources;\n     }\n    private void schedulePartitionedSource(TaskSource source)\n     {", "fixed": "         return updatedUnpartitionedSources;\n     }\n    private synchronized void schedulePartitionedSource(TaskSource source)\n     {", "sourceBeforeFix": "2", "sourceAfterFix": "34"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface XmlSignatureEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedXmlSignatureEndpointBuilder advanced() {", "fixed": "     \n    public interface XmlSignatureEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedXmlSignatureEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "d64a44547c2b2b69c771b16d9ac4e1ef5f8d8ce1", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tthis.pool.setMaxIdle(getMaxIdle());\n \t\tthis.pool.setMinIdle(getMinIdle());\n \t\tthis.pool.setTestOnBorrow(isTestOnBorrow());\n\t\tthis.pool.setTestOnReturn(isTestOnBorrow());\n \t\tthis.pool.setValidationQuery(getValidationQuery());\n \t\treturn this.pool;\n \t}", "fixed": " \t\tthis.pool.setMaxIdle(getMaxIdle());\n \t\tthis.pool.setMinIdle(getMinIdle());\n \t\tthis.pool.setTestOnBorrow(isTestOnBorrow());\n\t\tthis.pool.setTestOnReturn(isTestOnReturn());\n \t\tthis.pool.setValidationQuery(getValidationQuery());\n \t\treturn this.pool;\n \t}", "sourceBeforeFix": "isTestOnBorrow()", "sourceAfterFix": "isTestOnReturn()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(50);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "fixed": "                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return A deep copy of this comparator instance.\n \t */\n\tpublic TypeComparator<T> duplicate();\n }", "fixed": " \t * \n \t * @return A deep copy of this comparator instance.\n \t */\n\tpublic abstract TypeComparator<T> duplicate();\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @param from The element to be copied.\n \t * @param to The target element.\n \t */\n\tpublic void copyTo(T from, T to);", "fixed": " \t * @param from The element to be copied.\n \t * @param to The target element.\n \t */\n\tpublic abstract void copyTo(T from, T to);", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "fixed": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic abstract boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6b48897359d596d38fc59be7ffc70e63bb07c5fd", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             timeout = localParameters.remove(\"dataTimeout\");\n             if (timeout != null) {\n                dataTimeout = getCamelContext().getTypeConverter().convertTo(int.class, dataTimeout);\n             }\n             setProperties(client, localParameters);\n         }", "fixed": "             timeout = localParameters.remove(\"dataTimeout\");\n             if (timeout != null) {\n                dataTimeout = getCamelContext().getTypeConverter().convertTo(int.class, timeout);\n             }\n             setProperties(client, localParameters);\n         }", "sourceBeforeFix": "getCamelContext().getTypeConverter().convertTo(int.class,dataTimeout)", "sourceAfterFix": "getCamelContext().getTypeConverter().convertTo(int.class,timeout)"}
{"fixCommitSHA1": "fe2b27f01d3c2a3eb0090bec3f7badbd02780bf7", "projectName": "Graylog2.graylog2-server", "bugType": "Less Specific If", "problem": "             entryCursor = connection.search(searchBase,\n                                             filter,\n                                             SearchScope.SUBTREE,\n                                            groupIdAttribute, displayNameAttribute, \"dn\", \"uid\", \"userPrincipalName\", \"mail\", \"rfc822Mailbox\", \"memberOf\");\n             final Iterator<Entry> it = entryCursor.iterator();\n             if (it.hasNext()) {\n                 final Entry e = it.next();", "fixed": "             entryCursor = connection.search(searchBase,\n                                             filter,\n                                             SearchScope.SUBTREE,\n                                            groupIdAttribute, displayNameAttribute, \"dn\", \"uid\", \"userPrincipalName\", \"mail\", \"rfc822Mailbox\", \"memberOf\", \"isMemberOf\");\n             final Iterator<Entry> it = entryCursor.iterator();\n             if (it.hasNext()) {\n                 final Entry e = it.next();", "sourceBeforeFix": "\"memberOf\".equalsIgnoreCase(attribute.getId())", "sourceAfterFix": "\"memberOf\".equalsIgnoreCase(attribute.getId()) || \"isMemberOf\".equalsIgnoreCase(attribute.getId())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.debug(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "fixed": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "sourceBeforeFix": "logger.debug(\"myq ReturnCode: {}\",returnCode)", "sourceAfterFix": "logger.trace(\"myq ReturnCode: {}\",returnCode)"}
{"fixCommitSHA1": "c5edc0976145a61a5551053dfda8a8c3394100ee", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\tif (preferences.containsKey(name)) {\n \t\t\treturn preferences.get(name);\n \t\t} else {\n\t\t\tPreferences prefs = new LwjglPreferences(name);\n \t\t\tpreferences.put(name, prefs);\n \t\t\treturn prefs;\n \t\t}", "fixed": " \t\tif (preferences.containsKey(name)) {\n \t\t\treturn preferences.get(name);\n \t\t} else {\n\t\t\tPreferences prefs = new LwjglPreferences(name, \".prefs/\");\n \t\t\tpreferences.put(name, prefs);\n \t\t\treturn prefs;\n \t\t}", "sourceBeforeFix": "new LwjglPreferences(name)", "sourceAfterFix": "new LwjglPreferences(name,\".prefs/\")"}
{"fixCommitSHA1": "ce8d80dd2543eaa821e861969cfb53b9b3a666de", "projectName": "alibaba.fastjson", "bugType": "Less Specific If", "problem": "                }\n                superClass = superClass.getSuperclass();\n               if (superClass == Object.class) {\n                    break;\n                }\n             }", "fixed": "                }\n                superClass = superClass.getSuperclass();\n               if (superClass == Object.class || superClass == null) {\n                    break;\n                }\n             }", "sourceBeforeFix": "superClass == Object.class", "sourceAfterFix": "superClass == Object.class || superClass == null"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n     /**", "fixed": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n     /**", "sourceBeforeFix": "id=15802", "sourceAfterFix": "id=10802"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",", "fixed": "                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.debug(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "fixed": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "sourceBeforeFix": "logger.debug(\"attempting to login\")", "sourceAfterFix": "logger.trace(\"attempting to login\")"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResultClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "622d62ec3cd0ce3bd3678dd7579cc7978b7908ad", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         if (errorHandlerExecutorService != null) {\n            getExecutorServiceManager().shutdown(errorHandlerExecutorService);\n             errorHandlerExecutorService = null;\n         }", "fixed": "         if (errorHandlerExecutorService != null) {\n            getExecutorServiceManager().shutdownNow(errorHandlerExecutorService);\n             errorHandlerExecutorService = null;\n         }", "sourceBeforeFix": "getExecutorServiceManager().shutdown(errorHandlerExecutorService)", "sourceAfterFix": "getExecutorServiceManager().shutdownNow(errorHandlerExecutorService)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "ec729c57f331ebdce98a63d413210dc6496fff2c", "projectName": "libgdx.libgdx", "bugType": "More Specific If", "problem": " \t\t\tset(u_fogColor, ((ColorAttribute)attributes.get(ColorAttribute.Fog)).color);\r\n \t\t}\r\n\t\tif (lights.shadowMap != null) {\r\n \t\t\tset(u_shadowMapProjViewTrans, lights.shadowMap.getProjViewTrans());\r\n \t\t\tset(u_shadowTexture, lights.shadowMap.getDepthMap());\r\n \t\t\tset(u_shadowPCFOffset, 1.f / (float)(2f * lights.shadowMap.getDepthMap().texture.getWidth()));\r", "fixed": " \t\t\tset(u_fogColor, ((ColorAttribute)attributes.get(ColorAttribute.Fog)).color);\r\n \t\t}\r\n\t\tif (lights != null && lights.shadowMap != null) {\r\n \t\t\tset(u_shadowMapProjViewTrans, lights.shadowMap.getProjViewTrans());\r\n \t\t\tset(u_shadowTexture, lights.shadowMap.getDepthMap());\r\n \t\t\tset(u_shadowPCFOffset, 1.f / (float)(2f * lights.shadowMap.getDepthMap().texture.getWidth()));\r", "sourceBeforeFix": "lights.shadowMap != null", "sourceAfterFix": "lights != null && lights.shadowMap != null"}
{"fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t    \t\t\t\tsendAllowed.release();\n \t    \t\t\t}\n \t\t\t\t\trecvMessage = recvQueue.take();\n\t\t\t\t\tlogger.trace(\"Receive queue TAKE: Length={}\", recvQueue.size());\n \t\t\t\t\tlogger.debug(\"Process Message = {}\", SerialMessage.bb2hex(recvMessage.getMessageBuffer()));\n \t\t    \t\thandleIncomingMessage(recvMessage);", "fixed": " \t    \t\t\t\tsendAllowed.release();\n \t    \t\t\t}\n \t\t\t\t\trecvMessage = recvQueue.take();\n\t\t\t\t\tlogger.debug(\"Receive queue TAKE: Length={}\", recvQueue.size());\n \t\t\t\t\tlogger.debug(\"Process Message = {}\", SerialMessage.bb2hex(recvMessage.getMessageBuffer()));\n \t\t    \t\thandleIncomingMessage(recvMessage);", "sourceBeforeFix": "logger.trace(\"Receive queue ADD: Length={}\",recvQueue.size())", "sourceAfterFix": "logger.debug(\"Receive queue ADD: Length={}\",recvQueue.size())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.debug(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "fixed": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "sourceBeforeFix": "logger.debug(\"Invalid Account Credentials\")", "sourceAfterFix": "logger.trace(\"Invalid Account Credentials\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a10a471f4cb04226367516267fa636f257ef9807", "projectName": "yusuke.twitter4j", "bugType": "Change Numeric Literal", "problem": "         String reset = res.getResponseHeader(\"X-Rate-Limit-Reset\");\n         if (reset != null) {\n             long longReset = Long.parseLong(reset);\n            resetTimeInSeconds = (int) (longReset / 1000);\n         } else {\n             return null;\n         }", "fixed": "         String reset = res.getResponseHeader(\"X-Rate-Limit-Reset\");\n         if (reset != null) {\n             long longReset = Long.parseLong(reset);\n            resetTimeInSeconds = (int) longReset;\n         } else {\n             return null;\n         }", "sourceBeforeFix": "resetTimeInSeconds * 1000", "sourceAfterFix": "resetTimeInSeconds * 1000L"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d27dee43cab04016bd811fff8c7938488b424ea1", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                 cache = b.getBroadcasterConfig().getBroadcasterCache();\n                 List<Object> t = cache.retrieveFromCache(b.getID(), r);\n                t = b.getBroadcasterConfig().applyFilters(r, t);\n                 if (t.size() > 0) {\n                     logger.trace(\"Found Cached Messages For AtmosphereResource {} with Broadcaster {}\", r.uuid(), broadcasterID);\n                     cachedMessages.addAll(t);", "fixed": "                 cache = b.getBroadcasterConfig().getBroadcasterCache();\n                 List<Object> t = cache.retrieveFromCache(b.getID(), r);\n                cachedMessages = b.getBroadcasterConfig().applyFilters(r, t);\n                 if (t.size() > 0) {\n                     logger.trace(\"Found Cached Messages For AtmosphereResource {} with Broadcaster {}\", r.uuid(), broadcasterID);\n                     cachedMessages.addAll(t);", "sourceBeforeFix": "t=b.getBroadcasterConfig().applyFilters(r,t)", "sourceAfterFix": "cachedMessages=b.getBroadcasterConfig().applyFilters(r,t)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "b2b6b606f010d7d1da5a60bab132e65213e7c3bf", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "     String ufs = Configuration.get(PropertyKey.MASTER_MOUNT_TABLE_ROOT_UFS);\n     String parentPath = Paths.get(ufs, \"d1\").toString();\n     FileUtils.createDir(parentPath);\n    FileUtils.changeLocalFilePermission(parentPath, new Mode((short) 600).toString());\n     AlluxioURI path = new AlluxioURI(Paths.get(\"/d1\", \"d2\", \"d3\", \"d4\").toString());", "fixed": "     String ufs = Configuration.get(PropertyKey.MASTER_MOUNT_TABLE_ROOT_UFS);\n     String parentPath = Paths.get(ufs, \"d1\").toString();\n     FileUtils.createDir(parentPath);\n    FileUtils.changeLocalFilePermission(parentPath, new Mode((short) 0600).toString());\n     AlluxioURI path = new AlluxioURI(Paths.get(\"/d1\", \"d2\", \"d3\", \"d4\").toString());", "sourceBeforeFix": "(short)600", "sourceAfterFix": "(short)0600"}
{"fixCommitSHA1": "84a3d0b65bf27867edeb1617498726558ce73062", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 }\n                 Page page = serde.deserialize(serializedPage);\n                bytes += page.getSizeInBytes();\n                 rows += page.getPositionCount();\n                 pages.add(new RowIterable(session.toConnectorSession(), types, page));\n             }", "fixed": "                 }\n                 Page page = serde.deserialize(serializedPage);\n                bytes += page.getLogicalSizeInBytes();\n                 rows += page.getPositionCount();\n                 pages.add(new RowIterable(session.toConnectorSession(), types, page));\n             }", "sourceBeforeFix": "page.getSizeInBytes()", "sourceAfterFix": "page.getLogicalSizeInBytes()"}
{"fixCommitSHA1": "61cfdd767197dafcc4f201c5ec7577601b20ce25", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "     private int getStreamId(HttpHeaders httpHeaders) {\n         return httpHeaders.getInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),\n            connection.remote().nextStreamId());\n     }\n     @Override", "fixed": "     private int getStreamId(HttpHeaders httpHeaders) {\n         return httpHeaders.getInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),\n                                  connection.remote().incrementAndGetNextStreamId());\n     }\n     @Override", "sourceBeforeFix": "connection.remote().nextStreamId()", "sourceAfterFix": "connection.remote().incrementAndGetNextStreamId()"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n \t/**\n \t * Save the given list of global properties to the database.", "fixed": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t/**\n \t * Save the given list of global properties to the database.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "761d3ff3b19109715644ebc2bfa0396f3148d772", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "782a7444a6cf0d212cac614358d830cd66b8ae10", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "         assert(expr.getChildCount() == 2);\n         String tabAlias = BaseSemanticAnalyzer.unescapeIdentifier(expr.getChild(0).getText());\n         String colName = BaseSemanticAnalyzer.unescapeIdentifier(expr.getChild(1).getText());\n        if (tabAlias.equals(tableAlias) && tab.isPartitionKey(colName)) {\n           hasPPred = true;\n         }\n         break;", "fixed": "         assert(expr.getChildCount() == 2);\n         String tabAlias = BaseSemanticAnalyzer.unescapeIdentifier(expr.getChild(0).getText());\n         String colName = BaseSemanticAnalyzer.unescapeIdentifier(expr.getChild(1).getText());\n        if (tabAlias.equalsIgnoreCase(tableAlias) && tab.isPartitionKey(colName)) {\n           hasPPred = true;\n         }\n         break;", "sourceBeforeFix": "tabAlias.equals(tableAlias)", "sourceAfterFix": "tabAlias.equalsIgnoreCase(tableAlias)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixSetEndpointBuilder\n             extends\n                 AtomixSetEndpointConsumerBuilder, AtomixSetEndpointProducerBuilder {\n         default AdvancedAtomixSetEndpointBuilder advanced() {", "fixed": "     \n    public interface AtomixSetEndpointBuilder\n             extends\n                 AtomixSetEndpointConsumerBuilder, AtomixSetEndpointProducerBuilder {\n         default AdvancedAtomixSetEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c2023397cf81452d755a5401fe95b1d47dbde48a", "projectName": "scribejava.scribejava", "bugType": "Same Function Swap Args", "problem": "                 .protocol(Protocol.HTTP_1_1)\n                 .code(200)\n                 .message(\"ok\")\n                .body(ResponseBody.create(MediaType.get(\"text/plain\"), new byte[0]))\n                 .build();\n         handler.onResponse(call, response);\n         assertNotNull(callback.getResponse());", "fixed": "                 .protocol(Protocol.HTTP_1_1)\n                 .code(200)\n                 .message(\"ok\")\n                .body(ResponseBody.create(new byte[0], MediaType.get(\"text/plain\")))\n                 .build();\n         handler.onResponse(call, response);\n         assertNotNull(callback.getResponse());", "sourceBeforeFix": "ResponseBody.create(MediaType.get(\"text/plain\"),new byte[0])", "sourceAfterFix": "ResponseBody.create(new byte[0],MediaType.get(\"text/plain\"))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486d1df6b22e089bfe2f62b7f487ad09fb4d5fc3", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                     else if (any(taskStates, equalTo(TaskState.ABORTED))) {\n                         stageState.set(StageState.FAILED);\n                        failureCauses.add(new PrestoException(StandardErrorCode.INTERNAL_ERROR, \"A task is in the ABORTED state but stage is \" + stageState));\n                     }\n                     else if (currentState != StageState.PLANNED && currentState != StageState.SCHEDULING) {", "fixed": "                     else if (any(taskStates, equalTo(TaskState.ABORTED))) {\n                         stageState.set(StageState.FAILED);\n                        failureCauses.add(new PrestoException(StandardErrorCode.INTERNAL_ERROR, \"A task is in the ABORTED state but stage is \" + currentState));\n                     }\n                     else if (currentState != StageState.PLANNED && currentState != StageState.SCHEDULING) {", "sourceBeforeFix": "\"A task is in the ABORTED state but stage is \" + stageState", "sourceAfterFix": "\"A task is in the ABORTED state but stage is \" + currentState"}
{"fixCommitSHA1": "47985c11c1d9f11b94018539108ed65f0c6a32ab", "projectName": "netty.netty", "bugType": "Same Function More Args", "problem": "     @Override\n     public boolean release(int decrement) {\n        return getWrappedEngine().release();\n     }\n     @Override", "fixed": "     @Override\n     public boolean release(int decrement) {\n        return getWrappedEngine().release(decrement);\n     }\n     @Override", "sourceBeforeFix": "getWrappedEngine().release()", "sourceAfterFix": "getWrappedEngine().release(decrement)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnablednHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "fixed": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"jms\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"jms\")"}
{"fixCommitSHA1": "c46a39b13e1bfccdc09301b26f9cc4804d417c3b", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "fixed": "   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "29a532c691292b57576df51654cf1b9c65bea0be", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     public QueueItem txnPeek(long offerId, String transactionId) {\n         QueueItem item = getItemQueue().peek();\n         if (item == null) {\n            if ( offerId == -1L ){\n                 return null;\n             }\n             TxQueueItem txItem = txMap.get(offerId);", "fixed": "     public QueueItem txnPeek(long offerId, String transactionId) {\n         QueueItem item = getItemQueue().peek();\n         if (item == null) {\n            if ( offerId == -1 ){\n                 return null;\n             }\n             TxQueueItem txItem = txMap.get(offerId);", "sourceBeforeFix": "-1L", "sourceAfterFix": "-1"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 17:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 17:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),args.rest())"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "fixed": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "    * % hadoop key list [-provider providerPath]\n    * % hadoop key delete keyName [--provider providerPath] [-i]\n    * </pre>\n   * @param args\n   * @return\n    * @throws IOException\n    */\n   private int init(String[] args) throws IOException {", "fixed": "    * % hadoop key list [-provider providerPath]\n    * % hadoop key delete keyName [--provider providerPath] [-i]\n    * </pre>\n   * @param args Command line arguments.\n   * @return 0 on success, 1 on failure.\n    * @throws IOException\n    */\n   private int init(String[] args) throws IOException {", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  State getIntermediateState() {\n     return new State(\n         cssNames == null ? null : Maps.newHashMap(cssNames),\n         exportedNames == null ? null :", "fixed": "   }\n   @Override\n  protected State getIntermediateState() {\n     return new State(\n         cssNames == null ? null : Maps.newHashMap(cssNames),\n         exportedNames == null ? null :", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "edd056d3deb35b7f5b35ec3504ff0ce1e7863203", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                 channelInterestChanged(ctx, evt);\n                 break;\n             default:\n                ctx.sendDownstream(e);\n             }\n         } else if (e instanceof ExceptionEvent) {\n             exceptionCaught(ctx, (ExceptionEvent) e);", "fixed": "                 channelInterestChanged(ctx, evt);\n                 break;\n             default:\n                ctx.sendUpstream(e);\n             }\n         } else if (e instanceof ExceptionEvent) {\n             exceptionCaught(ctx, (ExceptionEvent) e);", "sourceBeforeFix": "ctx.sendDownstream(e)", "sourceAfterFix": "ctx.sendUpstream(e)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "e5f5decf8c607db5ce59b007200ce17c71f414f9", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                     if(file.startsWith(\"/\")) {\n                         d.addWelcomePages(file.substring(1));\n                     } else {\n                        d.addWelcomePages(welcomeFiles);\n                     }\n                 }\n             } else {", "fixed": "                     if(file.startsWith(\"/\")) {\n                         d.addWelcomePages(file.substring(1));\n                     } else {\n                        d.addWelcomePages(file);\n                     }\n                 }\n             } else {", "sourceBeforeFix": "d.addWelcomePages(welcomeFiles)", "sourceAfterFix": "d.addWelcomePages(file)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.error(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "fixed": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "sourceBeforeFix": "LOG.error(\"Failed to get files from \" + baseDirectory.getAbsolutePath())", "sourceAfterFix": "LOG.warn(\"Failed to get files from \" + baseDirectory.getAbsolutePath())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b09304b10d474c17e6f5a04ffb45f119168a9cd4", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             if (format != null) {\n                 SimpleDateFormat simpleDateFormat = null;\n                 try {\n                    simpleDateFormat = new SimpleDateFormat(format);\n                 } catch (IllegalArgumentException ex) {\n                     if (format.equals(\"yyyy-MM-ddTHH:mm:ss.SSS\")) {\n                         format = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";", "fixed": "             if (format != null) {\n                 SimpleDateFormat simpleDateFormat = null;\n                 try {\n                    simpleDateFormat = new SimpleDateFormat(format,JSON.defaultLocale);\n                 } catch (IllegalArgumentException ex) {\n                     if (format.equals(\"yyyy-MM-ddTHH:mm:ss.SSS\")) {\n                         format = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";", "sourceBeforeFix": "new SimpleDateFormat(format)", "sourceAfterFix": "new SimpleDateFormat(format,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "30e80f8c5c7f0bb692dfd8efeadb24d1cf840be6", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                 try {\n                     if (!isSupported(msg)) {\n                         if (out == null) {\n                            out = ctx.nextOutboundMessageBuffer();\n                         }\n                         out.add(msg);\n                         unsupportedFound = true;", "fixed": "                 try {\n                     if (!isSupported(msg)) {\n                         if (out == null) {\n                            out = ctx.nextInboundMessageBuffer();\n                         }\n                         out.add(msg);\n                         unsupportedFound = true;", "sourceBeforeFix": "ctx.nextOutboundMessageBuffer()", "sourceAfterFix": "ctx.nextInboundMessageBuffer()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "f2338bb71559d99dd76563b5cca93b8bd518b4d7", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "    * Closes all the resources asscoated with the context. Make sure all the resources are released\n    * back to this context before calling this close. Usually, you don't need to call this.\n    */\n  public synchronized void close() {\n     mFileSystemMasterClientPool.close();\n     mFileSystemMasterClientPool = null;\n     mBlockMasterClientPool.close();", "fixed": "    * Closes all the resources asscoated with the context. Make sure all the resources are released\n    * back to this context before calling this close. Usually, you don't need to call this.\n    */\n  public void close() {\n     mFileSystemMasterClientPool.close();\n     mFileSystemMasterClientPool = null;\n     mBlockMasterClientPool.close();", "sourceBeforeFix": "33", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9d87dbad9f0c649c8244586cfea3ca25731da893", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       initScopeRoots(scopeRoot.getParent());\n       traverseBranch(scopeRoot, scopeRoot.getParent());\n    } catch (Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }", "fixed": "       initScopeRoots(scopeRoot.getParent());\n       traverseBranch(scopeRoot, scopeRoot.getParent());\n    } catch (Error | Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }", "sourceBeforeFix": "Exception unexpectedException", "sourceAfterFix": "Throwable unexpectedException"}
{"fixCommitSHA1": "0b54767e246d4619cd9f40931b54947da38d317d", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "             LOG.warn(\"Interrupted when attempting to close writer for end point: \" + eldest, e);\n             Thread.currentThread().interrupt();\n         } catch (Exception e) {\n            LOG.warn(\"Interrupted when attempting to close writer for end point: \" + ep, e);\n         }\n     }", "fixed": "             LOG.warn(\"Interrupted when attempting to close writer for end point: \" + eldest, e);\n             Thread.currentThread().interrupt();\n         } catch (Exception e) {\n            LOG.warn(\"Interrupted when attempting to close writer for end point: \" + eldest, e);\n         }\n     }", "sourceBeforeFix": "\"Interrupted when attempting to close writer for end point: \" + ep", "sourceAfterFix": "\"Interrupted when attempting to close writer for end point: \" + eldest"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Set the list of illegal packages.\n      * @param from array of illegal packages\n      */\n    public void setIllegalPkgs(String... from) {\n         illegalPkgs = from.clone();\n     }", "fixed": "      * Set the list of illegal packages.\n      * @param from array of illegal packages\n      */\n    public final void setIllegalPkgs(String... from) {\n         illegalPkgs = from.clone();\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "fixed": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RedisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRedisEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface RedisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRedisEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return The Java class as {@link java.lang.Class}\n \t * @throws APIException\n \t */\n\tpublic Class getJavaClass() throws APIException {\n \t\ttry {\n \t\t\treturn Context.loadClass(javaClassName);\n \t\t}", "fixed": " \t * @return The Java class as {@link java.lang.Class}\n \t * @throws APIException\n \t */\n\tpublic Class getJavaClass() {\n \t\ttry {\n \t\t\treturn Context.loadClass(javaClassName);\n \t\t}", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GrpcEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGrpcEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GrpcEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGrpcEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cb7d7cafb8a6d90598de5b8254c27a5c821496b8", "projectName": "alibaba.fastjson", "bugType": "Change Identifier Used", "problem": "             JSONObject json = new JSONObject();\n             try {\n                javaBeanSerializer.getFieldValues(json);\n             } catch (Exception e) {\n                 throw new JSONException(\"toJSON error\", e);\n             }", "fixed": "             JSONObject json = new JSONObject();\n             try {\n                javaBeanSerializer.getFieldValues(javaObject, json);\n             } catch (Exception e) {\n                 throw new JSONException(\"toJSON error\", e);\n             }", "sourceBeforeFix": "javaBeanSerializer.getFieldValues(json)", "sourceAfterFix": "javaBeanSerializer.getFieldValues(javaObject,json)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "466bd55e92d40e7193aa1ffd28c823d66aeb0ab6", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "     }\n     public static int convertExpireField(String timestring) {\n        String trimmedTimeString = removeQuote(timestring.trim());\n         for (SimpleDateFormat sdf : simpleDateFormat.get()) {\n             Date date = sdf.parse(trimmedTimeString, new ParsePosition(0));", "fixed": "     }\n     public static int convertExpireField(String timestring) {\n        String trimmedTimeString = removeQuotes(timestring.trim());\n         for (SimpleDateFormat sdf : simpleDateFormat.get()) {\n             Date date = sdf.parse(trimmedTimeString, new ParsePosition(0));", "sourceBeforeFix": "removeQuote(timestring.trim())", "sourceAfterFix": "removeQuotes(timestring.trim())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b7e092e821021b7c0dbd91eacfe369181bfa28b8", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverAcceptor());\n \t\t}\n \t}", "fixed": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n \t\t}\n \t}", "sourceBeforeFix": "messageHandler.serverAcceptor()", "sourceAfterFix": "messageHandler.serverResponder()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "af87fe0e2580cafb6b563688f119b3d40ae100f2", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    TestSuiteEnvironment.getServerAddress(), serverPort);\n         }\n         protected abstract Policy getPolicy();", "fixed": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    CONTAINER_0.equals(containerId) ? TestSuiteEnvironment.getServerAddress() : TestSuiteEnvironment.getServerAddressNode1(),\n                    serverPort);\n         }\n         protected abstract Policy getPolicy();", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n            invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }", "fixed": "         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n            invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }", "sourceBeforeFix": "invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation)", "sourceAfterFix": "invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "08299be15b3f8e2082af0b5f6cda284140a65e33", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Boolean Literal", "problem": "     private final NettyAsyncHttpProviderConfig asyncHttpProviderConfig;\n    private boolean executeConnectAsync = false;\n     public static final ThreadLocal<Boolean> IN_IO_THREAD = new ThreadLocalBoolean();", "fixed": "     private final NettyAsyncHttpProviderConfig asyncHttpProviderConfig;\n    private boolean executeConnectAsync = true;\n     public static final ThreadLocal<Boolean> IN_IO_THREAD = new ThreadLocalBoolean();", "sourceBeforeFix": "executeConnectAsync=false", "sourceAfterFix": "executeConnectAsync=true"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 cacheRecordStore.updateRecordWithExpiry(keyData, value, record, expiryPolicy, now, false);\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNano(System.nanoTime() - start);\n                 }\n                 break;\n             case REMOVE:", "fixed": "                 cacheRecordStore.updateRecordWithExpiry(keyData, value, record, expiryPolicy, now, false);\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 break;\n             case REMOVE:", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7012976421d9e593d8b276697b2fbbc9328b6fa5", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\n \tpublic Container<T> maxSize (float width, float height) {\n\t\tmaxSize(new Fixed(width));\n \t\treturn this;\n \t}", "fixed": " \t\n \tpublic Container<T> maxSize (float width, float height) {\n\t\tmaxSize(new Fixed(width), new Fixed(height));\n \t\treturn this;\n \t}", "sourceBeforeFix": "minSize(new Fixed(width))", "sourceAfterFix": "minSize(new Fixed(width),new Fixed(height))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "890fa79f6486f5dbffd3c4270a42b7deceeaa765", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         }\n         @Override\n        public int getQueuedPartitionedSplitCount()\n         {\n             if (taskStateMachine.getState().isDone()) {\n                 return 0;", "fixed": "         }\n         @Override\n        public synchronized int getQueuedPartitionedSplitCount()\n         {\n             if (taskStateMachine.getState().isDone()) {\n                 return 0;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "898128ba6d065082235f096139827820e5660637", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                                 if (\"camel-core\".equals(project.getArtifactId())) {\n                                     if (row.containsKey(\"description\")) {\n                                        dataFormatModel.setLabel(row.get(\"description\"));\n                                     }\n                                 }\n                             }", "fixed": "                                 if (\"camel-core\".equals(project.getArtifactId())) {\n                                     if (row.containsKey(\"description\")) {\n                                        dataFormatModel.setDescription(row.get(\"description\"));\n                                     }\n                                 }\n                             }", "sourceBeforeFix": "dataFormatModel.setLabel(row.get(\"description\"))", "sourceAfterFix": "dataFormatModel.setDescription(row.get(\"description\"))"}
{"fixCommitSHA1": "9a861785b36e0b1132737bd8fa1f7caac5a41c87", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "             @Override\n             public void run()\n                     throws Exception {\n                assertTrue(stats.getLastAccessTime() > lastAccessTime);\n             }\n         });\n     }", "fixed": "             @Override\n             public void run()\n                     throws Exception {\n                assertTrue(stats.getLastAccessTime() >= lastAccessTime);\n             }\n         });\n     }", "sourceBeforeFix": "stats.getLastAccessTime() > lastAccessTime", "sourceAfterFix": "stats.getLastAccessTime() >= lastAccessTime"}
{"fixCommitSHA1": "041d650753ff4b846fc86e4266658fc64046bc45", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "     if (event instanceof ActivitiEntityEvent) {\n       Object entity = ((ActivitiEntityEvent) event).getEntity();\n      if (entity instanceof ProcessDefinition) {\n         result = (ProcessDefinitionEntity) entity;\n       }\n     }", "fixed": "     if (event instanceof ActivitiEntityEvent) {\n       Object entity = ((ActivitiEntityEvent) event).getEntity();\n      if (entity instanceof ProcessDefinitionEntity) {\n         result = (ProcessDefinitionEntity) entity;\n       }\n     }", "sourceBeforeFix": "entity instanceof ProcessDefinition", "sourceAfterFix": "entity instanceof ProcessDefinitionEntity"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\t\twithInputs(difference);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\t\twithInputs(difference);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "48a785f7125cd0b3338f6f9feb14ab22a020a313", "projectName": "Atmosphere.atmosphere", "bugType": "Change Binary Operator", "problem": "         if (create) {\n             return getSession();\n         }\n        return session != null && isNotNoOps() ? b.request.getSession(false) : session;\n     }\n     /**", "fixed": "         if (create) {\n             return getSession();\n         }\n        return session == null && isNotNoOps() ? b.request.getSession(false) : session;\n     }\n     /**", "sourceBeforeFix": "session != null", "sourceAfterFix": "session == null"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResultWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "3a43345ad0a599659d462cfc14dba9d8c0553bbf", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "         final ClosingRetentionStrategyConfig closingRetentionStrategyConfig = clusterConfigService.get(ClosingRetentionStrategyConfig.class);\n        final DeletionRetentionStrategy deletionRetentionStrategy = clusterConfigService.get(DeletionRetentionStrategy.class);\n         if (closingRetentionStrategyConfig == null) {\n             final ClosingRetentionStrategyConfig closingConfig = ClosingRetentionStrategyConfig.create(elasticsearchConfiguration.getMaxNumberOfIndices());", "fixed": "         final ClosingRetentionStrategyConfig closingRetentionStrategyConfig = clusterConfigService.get(ClosingRetentionStrategyConfig.class);\n        final DeletionRetentionStrategyConfig deletionRetentionStrategyConfig = clusterConfigService.get(DeletionRetentionStrategyConfig.class);\n         if (closingRetentionStrategyConfig == null) {\n             final ClosingRetentionStrategyConfig closingConfig = ClosingRetentionStrategyConfig.create(elasticsearchConfiguration.getMaxNumberOfIndices());", "sourceBeforeFix": "deletionRetentionStrategy == null", "sourceAfterFix": "deletionRetentionStrategyConfig == null"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "fixed": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "sourceBeforeFix": "final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); ", "sourceAfterFix": "final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); "}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return The length of the data type, or <code>-1</code> for variable length data types.\n \t */\n\tpublic int getLength();", "fixed": " \t * \n \t * @return The length of the data type, or <code>-1</code> for variable length data types.\n \t */\n\tpublic abstract int getLength();", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "fixed": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResultClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "cd913af4412ea58598043b4917156539fd905612", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "     }\n     public void delete(Node node, Input input, String extractorId) throws IOException, APIException {\n        api.path(resource.removeExtractor(input.getId(), extractorId))\n                 .node(node)\n                 .expect(Http.Status.NO_CONTENT)\n                 .execute();", "fixed": "     }\n     public void delete(Node node, Input input, String extractorId) throws IOException, APIException {\n        api.path(resource.terminate(input.getId(), extractorId))\n                 .node(node)\n                 .expect(Http.Status.NO_CONTENT)\n                 .execute();", "sourceBeforeFix": "resource.removeExtractor(input.getId(),extractorId)", "sourceAfterFix": "resource.terminate(input.getId(),extractorId)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glGenTextures (int n, int[] textures, int offset) {\n\t\tGL.glGenTexturesEXT(n, toBuffer(textures, offset), 0);\n \t}\n \tpublic void glGetIntegerv (int pname, int[] params, int offset) {", "fixed": " \t}\n \tpublic void glGenTextures (int n, int[] textures, int offset) {\n\t\tGL.glGenTextures(n, toBuffer(textures, offset), 0);\n \t}\n \tpublic void glGetIntegerv (int pname, int[] params, int offset) {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "14b91c00dca45c89cac63abe46f38955cdca7b86", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Same Function More Args", "problem": "   @Override\n   public Future<Void> sendBinaryFrame(ByteBuf payload, boolean finalFragment, int rsv) {\n    return channel.writeAndFlush(new BinaryWebSocketFrame(payload));\n   }\n   @Override", "fixed": "   @Override\n   public Future<Void> sendBinaryFrame(ByteBuf payload, boolean finalFragment, int rsv) {\n    return channel.writeAndFlush(new BinaryWebSocketFrame(finalFragment, rsv, payload));\n   }\n   @Override", "sourceBeforeFix": "new BinaryWebSocketFrame(payload)", "sourceAfterFix": "new BinaryWebSocketFrame(finalFragment,rsv,payload)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNano(System.nanoTime() - start);\n             }\n         }\n     }", "fixed": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResultClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "           sum += mBuf.get(pId % 16);\n           if (DEBUG_MODE) {\n            buf.DATA.flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();", "fixed": "           sum += mBuf.get(pId % 16);\n           if (DEBUG_MODE) {\n            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "cb6f6e26c12839e59243f25bfb142ec5e5b71135", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     private class MyAggregationStrategy implements TimeoutAwareAggregationStrategy {\n         public void timeout(Exchange oldExchange, int index, int total, long timeout) {\n            assertEquals(2000, timeout);\n             assertEquals(3, total);\n             assertEquals(0, index);\n             assertNotNull(oldExchange);", "fixed": "     private class MyAggregationStrategy implements TimeoutAwareAggregationStrategy {\n         public void timeout(Exchange oldExchange, int index, int total, long timeout) {\n            assertEquals(1000, timeout);\n             assertEquals(3, total);\n             assertEquals(0, index);\n             assertNotNull(oldExchange);", "sourceBeforeFix": "assertEquals(2000,timeout)", "sourceAfterFix": "assertEquals(1000,timeout)"}
{"fixCommitSHA1": "5782007c46e67cd4264aa05298cf72988dbd3537", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "         @Override\n         protected FeatureSet featureSet() {\n          return ES5;\n         }\n       };", "fixed": "         @Override\n         protected FeatureSet featureSet() {\n          return ES8_MODULES;\n         }\n       };", "sourceBeforeFix": "return ES5; ", "sourceAfterFix": "return ES8_MODULES; "}
{"fixCommitSHA1": "fc80cf0f323b8f45dd7e80f5a4cc814ae6d691a7", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "fixed": "   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "e10e9d38c4ec9ed081da916b924b43a6381fb93d", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         }\n        ch.unsafe().flushNow();\n     }\n     private static void unregisterWritableTasks(AbstractNioChannel ch) {", "fixed": "         }\n        ch.unsafe().flush();\n     }\n     private static void unregisterWritableTasks(AbstractNioChannel ch) {", "sourceBeforeFix": "ch.unsafe().flushNow()", "sourceAfterFix": "ch.unsafe().flush()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f6b33ebf179c7d5c0ddf16449374dcfb2c55d7df", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     \n    private DefaultConfiguration createConfig(boolean verbose)\n     {\n         final DefaultConfiguration checkConfig =\n             createCheckConfig(FileTabCharacterCheck.class);", "fixed": "     \n    private static DefaultConfiguration createConfig(boolean verbose)\n     {\n         final DefaultConfiguration checkConfig =\n             createCheckConfig(FileTabCharacterCheck.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "f59b698fc99211c010d569e7f71555183dfc29f1", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "       threads[i] = new Thread(new Runnable() {\n         private boolean safeAwait(int mySource, CyclicBarrier barrier) {\n           try {\n            barrier1.await(2, TimeUnit.SECONDS);\n           } catch (InterruptedException e) {\n             results[mySource] = \"Interrupted\";\n             return false;", "fixed": "       threads[i] = new Thread(new Runnable() {\n         private boolean safeAwait(int mySource, CyclicBarrier barrier) {\n           try {\n            barrier.await(2, TimeUnit.SECONDS);\n           } catch (InterruptedException e) {\n             results[mySource] = \"Interrupted\";\n             return false;", "sourceBeforeFix": "barrier1.await(2,TimeUnit.SECONDS)", "sourceAfterFix": "barrier.await(2,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7a90cfe13f0b030f6e091154c1d0091c685039f1", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     public BufferClassesResponse getBufferClasses() {\n         try {\n            return api.path(routes.BufferResource().getBufferClasses(), BufferClassesResponse.class).node(this).execute();\n         } catch (Exception e) {\n             LOG.error(\"Unable to read buffer class names from node \" + this, e);\n         }", "fixed": "     public BufferClassesResponse getBufferClasses() {\n         try {\n            return api.path(routes.BuffersResource().getBufferClasses(), BufferClassesResponse.class).node(this).execute();\n         } catch (Exception e) {\n             LOG.error(\"Unable to read buffer class names from node \" + this, e);\n         }", "sourceBeforeFix": "routes.BufferResource()", "sourceAfterFix": "routes.BuffersResource()"}
{"fixCommitSHA1": "d4468b05034b3c4166195394e88eed6633bec842", "projectName": "jersey.jersey", "bugType": "Change Identifier Used", "problem": "                         warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\\n');\n                         break;\n                     case HINT:\n                        warnings.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\\n');\n                         break;\n                 }\n             }", "fixed": "                         warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\\n');\n                         break;\n                     case HINT:\n                        hints.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\\n');\n                         break;\n                 }\n             }", "sourceBeforeFix": "warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))", "sourceAfterFix": "hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f616c0c70964fb4e88c3dc60c59d99b6d1d4759a", "projectName": "apache.hbase", "bugType": "Missing Throws Exception", "problem": "   }\n   @Test\n  public void testTableWithStringName() {\n     HTablePool pool =\n       new HTablePool(TEST_UTIL.getConfiguration(), Integer.MAX_VALUE);\n     String tableName = Bytes.toString(TABLENAME);", "fixed": "   }\n   @Test\n  public void testTableWithStringName() throws Exception {\n     HTablePool pool =\n       new HTablePool(TEST_UTIL.getConfiguration(), Integer.MAX_VALUE);\n     String tableName = Bytes.toString(TABLENAME);", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ce5f0a9ba85df298923dfdd4a493d30e4341ecfe", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Numeric Literal", "problem": "         try (AsyncHttpClient c = getAsyncHttpClient(cg)) {\n             Response response = c.prepareGet(getTargetUrl()).setHeader(\"X-redirect\", \"/foo/test\").execute().get();\n             assertNotNull(response);\n            assertEquals(response.getStatusCode(), 302);\n             assertEquals(response.getUri().toString(), getTargetUrl());\n         }\n     }", "fixed": "         try (AsyncHttpClient c = getAsyncHttpClient(cg)) {\n             Response response = c.prepareGet(getTargetUrl()).setHeader(\"X-redirect\", \"/foo/test\").execute().get();\n             assertNotNull(response);\n            assertEquals(response.getStatusCode(), 200);\n             assertEquals(response.getUri().toString(), getTargetUrl());\n         }\n     }", "sourceBeforeFix": "assertEquals(response.getStatusCode(),302)", "sourceAfterFix": "assertEquals(response.getStatusCode(),200)"}
{"fixCommitSHA1": "5fec881032668a72cdfaaa9082a8b35e398b599e", "projectName": "wildfly.wildfly", "bugType": "Change Modifier", "problem": " \ninterface AMBean {\n     int getCount();", "fixed": " \npublic interface AMBean {\n     int getCount();", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface StubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedStubEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface StubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedStubEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "b1aa0100b3f37551bcd8507d168449d8b03c5c57", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "             retract(view, ((AbstractNode) node));\n         }\n        graphVersion.incNodeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "fixed": "             retract(view, ((AbstractNode) node));\n         }\n        graphVersion.incNodeAndEdgeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "sourceBeforeFix": "graphVersion.incNodeVersion()", "sourceAfterFix": "graphVersion.incNodeAndEdgeVersion()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJdbcEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JdbcEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJdbcEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JdbcEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "ec57f0c31f8c41db175aa7dcaab5089c22b2a8a8", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n \t\t}\n \t\t@Bean", "fixed": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.responder());\n \t\t}\n \t\t@Bean", "sourceBeforeFix": "rSocketMessageHandler.serverResponder()", "sourceAfterFix": "rSocketMessageHandler.responder()"}
{"fixCommitSHA1": "3e97b0501c42c4adc47d32db7484295646632263", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "     @Override\n     public int getPeriodSeconds() {\n        return 30;\n     }\n     @Override", "fixed": "     @Override\n     public int getPeriodSeconds() {\n        return 2;\n     }\n     @Override", "sourceBeforeFix": "return 30; ", "sourceAfterFix": "return 2; "}
{"fixCommitSHA1": "f2338bb71559d99dd76563b5cca93b8bd518b4d7", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "   \n  public synchronized void reset() {\n     close();\n     init();\n   }", "fixed": "   \n  public void reset() {\n     close();\n     init();\n   }", "sourceBeforeFix": "33", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SjmsEndpointBuilder\n             extends\n                 SjmsEndpointConsumerBuilder, SjmsEndpointProducerBuilder {\n         default AdvancedSjmsEndpointBuilder advanced() {", "fixed": "     \n    public interface SjmsEndpointBuilder\n             extends\n                 SjmsEndpointConsumerBuilder, SjmsEndpointProducerBuilder {\n         default AdvancedSjmsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "d76ba8118cca9f2f1c4f0e89e2dd15a9db02f7e8", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\t\tcase MotionEvent.ACTION_CANCEL:\r\n \t\t\t\trealPointerIndex = input.lookUpPointerIndex(pointerId);\r\n \t\t\t\tif (realPointerIndex == -1) break;\r\n\t\t\t\tif (realPointerIndex > AndroidInput.NUM_TOUCHES) break;\r\n \t\t\t\tinput.realId[realPointerIndex] = -1;\r\n \t\t\t\tx = (int)event.getX(pointerIndex);\r\n \t\t\t\ty = (int)event.getY(pointerIndex);\r", "fixed": " \t\t\tcase MotionEvent.ACTION_CANCEL:\r\n \t\t\t\trealPointerIndex = input.lookUpPointerIndex(pointerId);\r\n \t\t\t\tif (realPointerIndex == -1) break;\r\n\t\t\t\tif (realPointerIndex >= AndroidInput.NUM_TOUCHES) break;\r\n \t\t\t\tinput.realId[realPointerIndex] = -1;\r\n \t\t\t\tx = (int)event.getX(pointerIndex);\r\n \t\t\t\ty = (int)event.getY(pointerIndex);\r", "sourceBeforeFix": "realPointerIndex > AndroidInput.NUM_TOUCHES", "sourceAfterFix": "realPointerIndex >= AndroidInput.NUM_TOUCHES"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "0aa7873db1048c41b279e4f216e4cf2ee35d0802", "projectName": "mcxiaoke.android-volley", "bugType": "Change Identifier Used", "problem": "      * Returns the cache key for this request.  By default, this is the URL.\n      */\n     public String getCacheKey() {\n        return getUrl();\n     }\n     /**", "fixed": "      * Returns the cache key for this request.  By default, this is the URL.\n      */\n     public String getCacheKey() {\n        return getOriginUrl();\n     }\n     /**", "sourceBeforeFix": "getUrl()", "sourceAfterFix": "getOriginUrl()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "d70d6a71ee43414e3ad54bacc9ac609dcd2efca9", "projectName": "Alluxio.alluxio", "bugType": "Change Caller in Function Call", "problem": "   }\n   private void getTestHelper(TachyonFS tfs) throws IOException {\n    int fileId = mTfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n    Assert.assertNotNull(mTfs.getFile(fileId));\n   }\n   @Test", "fixed": "   }\n   private void getTestHelper(TachyonFS tfs) throws IOException {\n    int fileId = tfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n    Assert.assertNotNull(tfs.getFile(fileId));\n   }\n   @Test", "sourceBeforeFix": "mTfs.getFile(fileId)", "sourceAfterFix": "tfs.getFile(fileId)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "fixed": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "sourceBeforeFix": "final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); ", "sourceAfterFix": "final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); "}
{"fixCommitSHA1": "54fc510a45928b0f76eec4ec4f3e9e14db0dfb2a", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \tpublic static final Color BLACK = new Color(0, 0, 0, 1);\n \tpublic static final Color WHITE = new Color(0xffffffff);\n\tpublic static final Color LIGHT_GRAY = new Color(0x696969ff);\n \tpublic static final Color GRAY = new Color(0x7f7f7fff);\n \tpublic static final Color DARK_GRAY = new Color(0x3f3f3fff);\n \tpublic static final Color SLATE = new Color(0x708090ff);", "fixed": " \tpublic static final Color BLACK = new Color(0, 0, 0, 1);\n \tpublic static final Color WHITE = new Color(0xffffffff);\n\tpublic static final Color LIGHT_GRAY = new Color(0xbfbfbfff);\n \tpublic static final Color GRAY = new Color(0x7f7f7fff);\n \tpublic static final Color DARK_GRAY = new Color(0x3f3f3fff);\n \tpublic static final Color SLATE = new Color(0x708090ff);", "sourceBeforeFix": "new Color(0x696969ff)", "sourceAfterFix": "new Color(0xbfbfbfff)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f4463337af407322d315b72b0cda79a1c484911e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": " @Category(CommonCriteria.class)\n public class AuthenticationTestCase {\n    private static final String SERVER_HOST_PORT = TestSuiteEnvironment.getServerAddress() + \":\" + TestSuiteEnvironment.getHttpPort();\nprivate static final String WAR_URL = \"http:\n     /*", "fixed": " @Category(CommonCriteria.class)\n public class AuthenticationTestCase {\n    private static final String SERVER_HOST_PORT = TestSuiteEnvironment.getHttpAddress() + \":\" + TestSuiteEnvironment.getHttpPort();\nprivate static final String WAR_URL = \"http:\n     /*", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getHttpAddress()"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.valueOf(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "fixed": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "fixed": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private static void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "307f01bf7c83512ca0762935d34c70ba6073b7b2", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "                 state = MachineState.RUNNING;\n             }\n            this.startTime = System.currentTimeMillis();\n             this.newAssignment = newAssignment;\n             this.pendingLocalization = null;\n             this.pendingDownload = null;", "fixed": "                 state = MachineState.RUNNING;\n             }\n            this.startTime = Time.currentTimeMillis();\n             this.newAssignment = newAssignment;\n             this.pendingLocalization = null;\n             this.pendingDownload = null;", "sourceBeforeFix": "System.currentTimeMillis()", "sourceAfterFix": "Time.currentTimeMillis()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "34a77d610669e59e9d5ab77c47908f907806e05f", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "     expected += \"WARNING: lsr is deprecated. Please use ls -R instead.\\n\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY);", "fixed": "     expected += \"WARNING: lsr is deprecated. Please use ls -R instead.\\n\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY);", "sourceBeforeFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)", "sourceAfterFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SmppEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSmppEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SmppEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSmppEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new DeleteCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName = \"--help\";", "fixed": "         command = new DeleteCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName = \"--help\";", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "9e756fefbb053926754108335e3ad78b586439ac", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         return new RouteBuilder() {\n             public void configure() {\n                 WebsocketComponent websocketComponent = (WebsocketComponent) context.getComponent(\"websocket\");\n                websocketComponent.setMaxThreads(11);\n                 websocketComponent.setMinThreads(1);\n                 from(\"direct:shop\")\n                     .log(\">>> Message received from Shopping center : ${body}\")", "fixed": "         return new RouteBuilder() {\n             public void configure() {\n                 WebsocketComponent websocketComponent = (WebsocketComponent) context.getComponent(\"websocket\");\n                websocketComponent.setMaxThreads(20);\n                 websocketComponent.setMinThreads(1);\n                 from(\"direct:shop\")\n                     .log(\">>> Message received from Shopping center : ${body}\")", "sourceBeforeFix": "websocketComponent.setMaxThreads(11)", "sourceAfterFix": "websocketComponent.setMaxThreads(20)"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    private static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fBodyClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedWebsocketEndpointBuilder\n             extends\n                 AdvancedWebsocketEndpointConsumerBuilder, AdvancedWebsocketEndpointProducerBuilder {\n         default WebsocketEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedWebsocketEndpointBuilder\n             extends\n                 AdvancedWebsocketEndpointConsumerBuilder, AdvancedWebsocketEndpointProducerBuilder {\n         default WebsocketEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDisruptorVmEndpointBuilder\n             extends\n                 AdvancedDisruptorVmEndpointConsumerBuilder, AdvancedDisruptorVmEndpointProducerBuilder {\n         default DisruptorVmEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDisruptorVmEndpointBuilder\n             extends\n                 AdvancedDisruptorVmEndpointConsumerBuilder, AdvancedDisruptorVmEndpointProducerBuilder {\n         default DisruptorVmEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73627df082ff499af4ca1c482f79e304905007eb", "projectName": "alibaba.canal", "bugType": "Same Function More Args", "problem": "                         if (i > 0) {\n                             buf.append(\", \");\n                         }\n                        element(i).toJsonString(buf);\n                     }\n                     buf.append(\"]\");\n                     break;", "fixed": "                         if (i > 0) {\n                             buf.append(\", \");\n                         }\n                        element(i, charsetName).toJsonString(buf, charsetName);\n                     }\n                     buf.append(\"]\");\n                     break;", "sourceBeforeFix": "m_data.getFixString((int)m_length)", "sourceAfterFix": "m_data.getFixString((int)m_length,charsetName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesNamespacesEndpointBuilder\n             extends\n                 KubernetesNamespacesEndpointConsumerBuilder, KubernetesNamespacesEndpointProducerBuilder {\n         default AdvancedKubernetesNamespacesEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesNamespacesEndpointBuilder\n             extends\n                 KubernetesNamespacesEndpointConsumerBuilder, KubernetesNamespacesEndpointProducerBuilder {\n         default AdvancedKubernetesNamespacesEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(-1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "fixed": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ff779778bb4c3ded0c996f5b7c45c403c18ce2e3", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t * @param style the {@link SliderStyle} */\r\n \tpublic Slider (float min, float max, float steps, boolean vertical, SliderStyle style) {\r\n \t\tif (min > max) throw new IllegalArgumentException(\"min must be > max: \" + min + \" > \" + max);\r\n\t\tif (steps < 0) throw new IllegalArgumentException(\"steps must be > 0: \" + steps);\r\n \t\tsetStyle(style);\r\n \t\tthis.min = min;\r\n \t\tthis.max = max;\r", "fixed": " \t * @param style the {@link SliderStyle} */\r\n \tpublic Slider (float min, float max, float steps, boolean vertical, SliderStyle style) {\r\n \t\tif (min > max) throw new IllegalArgumentException(\"min must be > max: \" + min + \" > \" + max);\r\n\t\tif (steps <= 0) throw new IllegalArgumentException(\"steps must be > 0: \" + steps);\r\n \t\tsetStyle(style);\r\n \t\tthis.min = min;\r\n \t\tthis.max = max;\r", "sourceBeforeFix": "steps < 0", "sourceAfterFix": "steps <= 0"}
{"fixCommitSHA1": "a6c394118fad3819a98baf4142fb59f6db3735f0", "projectName": "apache.camel", "bugType": "Missing Throws Exception", "problem": "      * @param config            the swagger configuration\n      * @param classResolver     class resolver to use\n      * @return the swagger model\n      */\n    public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {\n         Swagger swagger = new Swagger();\n         for (RestDefinition rest : rests) {", "fixed": "      * @param config            the swagger configuration\n      * @param classResolver     class resolver to use\n      * @return the swagger model\n     * @throws ClassNotFoundException \n      */\n    public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException {\n         Swagger swagger = new Swagger();\n         for (RestDefinition rest : rests) {", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request);\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         BroadcasterFactory.getDefault().lookup(\"/*\").broadcast(\"yoBroadcast\").get();", "fixed": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         BroadcasterFactory.getDefault().lookup(\"/*\").broadcast(\"yoBroadcast\").get();", "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}
{"fixCommitSHA1": "fae9ab4140b56123177d498845b738b3bb53808d", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": " \t\tthis.context.refresh();\n \t\tassertNotNull(this.context.getBean(AuthenticationManagerBuilder.class));\n\t\tassertEquals(9, this.context.getBean(FilterChainProxy.class).getFilterChains()\n \t\t\t\t.size());\n \t}", "fixed": " \t\tthis.context.refresh();\n \t\tassertNotNull(this.context.getBean(AuthenticationManagerBuilder.class));\n\t\tassertEquals(8, this.context.getBean(FilterChainProxy.class).getFilterChains()\n \t\t\t\t.size());\n \t}", "sourceBeforeFix": "assertEquals(9,this.context.getBean(FilterChainProxy.class).getFilterChains().size())", "sourceAfterFix": "assertEquals(8,this.context.getBean(FilterChainProxy.class).getFilterChains().size())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d83dd417fff4ae2407e04a21056f331a773d970b", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         private boolean fallback;\n        public SampleLanguage(boolean fallback) {\n             this.fallback = fallback;\n         }", "fixed": "         private boolean fallback;\n        SampleLanguage(boolean fallback) {\n             this.fallback = fallback;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "39dbb74a2606ed071ac998b9021f522e7488a372", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "                 long ownedEntryCount = context.stats.getOwnedEntryCount();\n                 assertTrue(format(\"Near Cache owned entry count didn't reach the desired value (%d vs. %d) (%s)\",\n                         ownedEntryCount, nearCacheSize, context.stats),\n                        ownedEntryCount >= nearCacheSize);\n             }\n         });\n     }", "fixed": "                 long ownedEntryCount = context.stats.getOwnedEntryCount();\n                 assertTrue(format(\"Near Cache owned entry count didn't reach the desired value (%d vs. %d) (%s)\",\n                         ownedEntryCount, nearCacheSize, context.stats),\n                        ownedEntryCount == nearCacheSize);\n             }\n         });\n     }", "sourceBeforeFix": "ownedEntryCount >= nearCacheSize", "sourceAfterFix": "ownedEntryCount == nearCacheSize"}
{"fixCommitSHA1": "9a0a814c76eb7b63376625513c16a8c91c045afb", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "     @Override\n     public byte[] decodeMessage() {\n        byte[] data = new byte[9];\n         data[0] = 0x09;\n         data[1] = RFXComBaseMessage.PacketType.UV.toByte();", "fixed": "     @Override\n     public byte[] decodeMessage() {\n        byte[] data = new byte[10];\n         data[0] = 0x09;\n         data[1] = RFXComBaseMessage.PacketType.UV.toByte();", "sourceBeforeFix": "new byte[9]", "sourceAfterFix": "new byte[10]"}
{"fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "         public OutType get()\n         {\n           try {\n            waitLatch.await(25, TimeUnit.MILLISECONDS);\n           }\n           catch (Exception e) {\n             throw Throwables.propagate(e);", "fixed": "         public OutType get()\n         {\n           try {\n            waitLatch.await(1000, TimeUnit.MILLISECONDS);\n           }\n           catch (Exception e) {\n             throw Throwables.propagate(e);", "sourceBeforeFix": "waitLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "waitLatch.await(1000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "871a4d8777f3be998cac121365bdb483fb08b9e5", "projectName": "libgdx.libgdx", "bugType": "Change Modifier", "problem": " \t * @author mzechner\r\n \t * \r\n \t */\r\n\tpublic final class Usage {\r\n \t\tpublic static final int Position = 0;\r\n \t\tpublic static final int Color = 1;\r\n \t\tpublic static final int ColorPacked = 5;\r", "fixed": " \t * @author mzechner\r\n \t * \r\n \t */\r\n\tpublic static final class Usage {\r\n \t\tpublic static final int Position = 0;\r\n \t\tpublic static final int Color = 1;\r\n \t\tpublic static final int ColorPacked = 5;\r", "sourceBeforeFix": "17", "sourceAfterFix": "25"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(2000L)\r\n                     .batchSize(100)\r", "fixed": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(500L)\r\n                     .batchSize(100)\r", "sourceBeforeFix": "result.expectedMessageCount(3)", "sourceAfterFix": "result.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "d55fc4de68d1c8d9a5aff883e2c5f84ad02aa0b8", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void testConfiguration() throws Exception {\n        assertNotPresent(GsonConverter.class);\n         assertPresent(JacksonConverter.class);\n     }", "fixed": "     @Test\n     public void testConfiguration() throws Exception {\n        assertPresent(GsonConverter.class);\n         assertPresent(JacksonConverter.class);\n     }", "sourceBeforeFix": "assertNotPresent(GsonConverter.class)", "sourceAfterFix": "assertPresent(GsonConverter.class)"}
{"fixCommitSHA1": "f8946ee2b640061a35a4c16bf2588242f27053d7", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": " \t\t\t\t\t}\r\n \t\t\t\t} else if (command.compareTo(oldPercent) < 0) {\r\n \t\t\t\t\tint repeatCount = (oldPercent.intValue() - command.intValue()) / 10;\r\n\t\t\t\t\tfor(int i = 0; i <= repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendDecrease(bulb, rgbwSteps, bridgeId);\r", "fixed": " \t\t\t\t\t}\r\n \t\t\t\t} else if (command.compareTo(oldPercent) < 0) {\r\n \t\t\t\t\tint repeatCount = (oldPercent.intValue() - command.intValue()) / 10;\r\n\t\t\t\t\tfor(int i = 0; i < repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendDecrease(bulb, rgbwSteps, bridgeId);\r", "sourceBeforeFix": "i <= repeatCount", "sourceAfterFix": "i < repeatCount"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 11:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 11:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "64bc69ef4c547771f44f6b6b103cda7be2f0922b", "projectName": "dropwizard.metrics", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic SortedMap<String, Meter> getMeters(MetricFilter filter) {\n\t\treturn adaptMetrics(Meter.class, reg.getCounters(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Timer> getTimers() {", "fixed": " \t}\n \tpublic SortedMap<String, Meter> getMeters(MetricFilter filter) {\n\t\treturn adaptMetrics(Meter.class, reg.getMeters(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Timer> getTimers() {", "sourceBeforeFix": "reg.getCounters(transformFilter(filter))", "sourceAfterFix": "reg.getTimers(transformFilter(filter))"}
{"fixCommitSHA1": "a7f54a539a4c8f92f4895934480061a2ccbcd499", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsAttribute(attribute.getDefinition(), model, false, writer);\n     }\n     private static <A extends Enum<A> & Attribute> void writeElements(XMLExtendedStreamWriter writer, ModelNode model, Class<A> attributeClass) throws XMLStreamException {", "fixed": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsAttribute(attribute.getDefinition(), model, false, writer);\n     }\n     private static <A extends Enum<A> & Attribute> void writeElements(XMLExtendedStreamWriter writer, ModelNode model, Class<A> attributeClass) throws XMLStreamException {", "sourceBeforeFix": "attribute.getDefinition().getAttributeMarshaller()", "sourceAfterFix": "attribute.getDefinition().getMarshaller()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ddfab2213db771b738d1f971e36e664f5a02f4ab", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     ExecDriverTaskHandle th = (ExecDriverTaskHandle)t;\n     RunningJob rj = th.getRunningJob();\n     this.mapProgress = Math.round(rj.mapProgress() * 100);\n    this.reduceProgress = Math.round(rj.mapProgress() * 100);\n     taskCounters.put(\"CNTR_NAME_\" + getId() + \"_MAP_PROGRESS\", Long.valueOf(this.mapProgress));\n     taskCounters.put(\"CNTR_NAME_\" + getId() + \"_REDUCE_PROGRESS\", Long.valueOf(this.reduceProgress));\n     Counters ctrs = th.getCounters();", "fixed": "     ExecDriverTaskHandle th = (ExecDriverTaskHandle)t;\n     RunningJob rj = th.getRunningJob();\n     this.mapProgress = Math.round(rj.mapProgress() * 100);\n    this.reduceProgress = Math.round(rj.reduceProgress() * 100);\n     taskCounters.put(\"CNTR_NAME_\" + getId() + \"_MAP_PROGRESS\", Long.valueOf(this.mapProgress));\n     taskCounters.put(\"CNTR_NAME_\" + getId() + \"_REDUCE_PROGRESS\", Long.valueOf(this.reduceProgress));\n     Counters ctrs = th.getCounters();", "sourceBeforeFix": "rj.mapProgress()", "sourceAfterFix": "rj.reduceProgress()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "099bf2014a8cd43c270c5900ce9d34689287d0ef", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "     expected += \"WARNING: lsr is deprecated. Please use ls -R instead.\\n\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY);", "fixed": "     expected += \"WARNING: lsr is deprecated. Please use ls -R instead.\\n\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY);", "sourceBeforeFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)", "sourceAfterFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cd70b8db19db4a22136c8411fd0b72252b2f975a", "projectName": "AsyncHttpClient.async-http-client", "bugType": "More Specific If", "problem": "     public String getResponseBody(String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "fixed": "     public String getResponseBody(String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "sourceBeforeFix": "contentType != null", "sourceAfterFix": "contentType != null && charset == null"}
{"fixCommitSHA1": "e7bf782a17d5972a02f3f196bd72442175881f22", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     public void run()\n             throws Exception {\n         if (cache != null) {\n            response = cache.remove(key, null);\n         } else {\n             response = Boolean.FALSE;\n         }", "fixed": "     public void run()\n             throws Exception {\n         if (cache != null) {\n            response = cache.removeRecord(key);\n         } else {\n             response = Boolean.FALSE;\n         }", "sourceBeforeFix": "cache.remove(key,null)", "sourceAfterFix": "cache.removeRecord(key)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e9b52691580bdf77a68f07ee178c5df6859b644f", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "             ArrayList<Route> list = new ArrayList<Route>();\n             RouteDefinition route = new RouteDefinition();\n             route.setCamelContext(first.getBuilder().getProcessBuilder().getContext());\n            RouteContext routeContext = new DefaultRouteContext(route, null, list);\n             overdueAction = overdueProcessors.createOutputsProcessor(routeContext);\n         }", "fixed": "             ArrayList<Route> list = new ArrayList<Route>();\n             RouteDefinition route = new RouteDefinition();\n             route.setCamelContext(first.getBuilder().getProcessBuilder().getContext());\n            RouteContext routeContext = new DefaultRouteContext(first.getBuilder().getProcessBuilder().getContext(), route, null, list);\n             overdueAction = overdueProcessors.createOutputsProcessor(routeContext);\n         }", "sourceBeforeFix": "new DefaultRouteContext(route,null,list)", "sourceAfterFix": "new DefaultRouteContext(first.getBuilder().getProcessBuilder().getContext(),route,null,list)"}
{"fixCommitSHA1": "28e013e68764d727ce67ac93663489e652562788", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testLRWithLabels() throws Exception {\n \t\tmkdir(parserpkgdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(709);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"@parser::header {\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");", "fixed": " \t@Test\n \tpublic void testLRWithLabels() throws Exception {\n \t\tmkdir(parserpkgdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(726);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"@parser::header {\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");", "sourceBeforeFix": "new StringBuilder(709)", "sourceAfterFix": "new StringBuilder(726)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "dea7ef0e0aae5ba4aef9d104cd10af986be9fc53", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         private String name;\n         private String queryString;\n        public MyHttpProducer(HttpEndpoint endpoint, String name, String queryString) {\n             super(endpoint);\n             this.name = name;\n             this.queryString = queryString;", "fixed": "         private String name;\n         private String queryString;\n        MyHttpProducer(HttpEndpoint endpoint, String name, String queryString) {\n             super(endpoint);\n             this.name = name;\n             this.queryString = queryString;", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "fixed": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithArrayInput(@Valid List<User> body);\n     @POST\n     @Path(\"/createWithList\")", "fixed": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithArrayInput(@Valid List<User> body) throws Exception;\n     @POST\n     @Path(\"/createWithList\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bc53fc00817adf77d0e25d07ae0aaea0f16dddd7", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "fixed": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\");\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "57ddaae5fd72ff2cef6d179568640b1fac8f4f08", "projectName": "apache.storm", "bugType": "Same Function More Args", "problem": "               }\n             }\n         } catch(IOException e) {\n            throw new RuntimeException(e);\n         }\n     }", "fixed": "               }\n             }\n         } catch(IOException e) {\n            throw new RuntimeException(\"Error during multilang processing\", e);\n         }\n     }", "sourceBeforeFix": "new RuntimeException(e)", "sourceAfterFix": "new RuntimeException(\"Error when launching multilang subprocess\",e)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MiloClientEndpointBuilder\n             extends\n                 MiloClientEndpointConsumerBuilder, MiloClientEndpointProducerBuilder {\n         default AdvancedMiloClientEndpointBuilder advanced() {", "fixed": "     \n    public interface MiloClientEndpointBuilder\n             extends\n                 MiloClientEndpointConsumerBuilder, MiloClientEndpointProducerBuilder {\n         default AdvancedMiloClientEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "                 for (CodegenParameter cp : operation.allParams) {\n                    String jsdocType = getJSDocTypeWithBraces(cp);\n                     cp.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n                 }\n                String jsdocType = getJSDocTypeWithBraces(operation);\n                 operation.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n             }\n         }", "fixed": "                 for (CodegenParameter cp : operation.allParams) {\n                    String jsdocType = getJSDocType(cp);\n                     cp.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n                 }\n                String jsdocType = getJSDocType(operation);\n                 operation.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n             }\n         }", "sourceBeforeFix": "getJSDocTypeWithBraces(cm,var)", "sourceAfterFix": "getJSDocType(cm,var)"}
{"fixCommitSHA1": "788d9452d8541b3ec7a11cae5d9fa605c2626fc1", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * @param sink The data sink to add.\n \t */\n \tpublic void addDataSink(GenericDataSinkBase<?> sink) {\n\t\tcheckNotNull(jobName, \"The data sink must not be null.\");\n \t\tif (!this.sinks.contains(sink)) {\n \t\t\tthis.sinks.add(sink);", "fixed": " \t * @param sink The data sink to add.\n \t */\n \tpublic void addDataSink(GenericDataSinkBase<?> sink) {\n\t\tcheckNotNull(sink, \"The data sink must not be null.\");\n \t\tif (!this.sinks.contains(sink)) {\n \t\t\tthis.sinks.add(sink);", "sourceBeforeFix": "checkNotNull(jobName,\"The data sink must not be null.\")", "sourceAfterFix": "checkNotNull(sink,\"The data sink must not be null.\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "5bb9d3bf8f6ca67da43de8cc4aa7ea0a5b382a29", "projectName": "Atmosphere.atmosphere", "bugType": "Less Specific If", "problem": "         Map<Class<? extends Annotation>, Set<Class<?>>> annotations = (Map<Class<? extends Annotation>, Set<Class<?>>>) sc.getAttribute(ANNOTATION_ATTRIBUTE);\n        if (annotations == null) {\n             delegate = new BytecodeBasedAnnotationProcessor();\n         } else {\n             delegate = new ServletContainerInitializerAnnotationProcessor(annotations, framework);", "fixed": "         Map<Class<? extends Annotation>, Set<Class<?>>> annotations = (Map<Class<? extends Annotation>, Set<Class<?>>>) sc.getAttribute(ANNOTATION_ATTRIBUTE);\n        if (annotations == null || annotations.isEmpty()) {\n             delegate = new BytecodeBasedAnnotationProcessor();\n         } else {\n             delegate = new ServletContainerInitializerAnnotationProcessor(annotations, framework);", "sourceBeforeFix": "annotations == null", "sourceAfterFix": "annotations == null || annotations.isEmpty()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "370ead7395fc9194a3dc2d05afc4b3409f6b27da", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "        (!destToClusterby.isEmpty()))\n       return false;\n    Iterator<Map.Entry<String, HashMap<String, ASTNode>>> aggrIter = destToAggregationExprs.entrySet().iterator();\n     while (aggrIter.hasNext()) {\n       HashMap<String, ASTNode> h = aggrIter.next().getValue();\n       if ((h != null) && (!h.isEmpty()))", "fixed": "        (!destToClusterby.isEmpty()))\n       return false;\n    Iterator<Map.Entry<String, LinkedHashMap<String, ASTNode>>> aggrIter = destToAggregationExprs.entrySet().iterator();\n     while (aggrIter.hasNext()) {\n       HashMap<String, ASTNode> h = aggrIter.next().getValue();\n       if ((h != null) && (!h.isEmpty()))", "sourceBeforeFix": "HashMap<String,ASTNode>", "sourceAfterFix": "LinkedHashMap<String,ASTNode>"}
{"fixCommitSHA1": "338d4a036b25526d2e5bf53c5e49f56ccbbf356f", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t */\r\n \tpublic void beginCache () {\r\n \t\tif (currentCache != null) throw new IllegalStateException(\"endCache must be called before begin.\");\r\n\t\tcurrentCache = new Cache(caches.size(), mesh.getNumVertices() / 2 * 6);\r\n \t\tcaches.add(currentCache);\r\n \t\tmesh.getVerticesBuffer().compact();\r\n \t}\r", "fixed": " \t */\r\n \tpublic void beginCache () {\r\n \t\tif (currentCache != null) throw new IllegalStateException(\"endCache must be called before begin.\");\r\n\t\tcurrentCache = new Cache(caches.size(), mesh.getNumVertices() / 4 * 6);\r\n \t\tcaches.add(currentCache);\r\n \t\tmesh.getVerticesBuffer().compact();\r\n \t}\r", "sourceBeforeFix": "offset * 12", "sourceAfterFix": "offset * 6"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStream<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStream<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "fixed": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStreamSink<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "a85bc005400d000cdf9efd1cf791d3e2f0ead12e", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     classes = {\n         CamelAutoConfiguration.class,\n         CamelCloudAutoConfiguration.class,\n        CamelCloudServiceCallConfiguration.class\n     },\n     properties = {\n         \"ribbon.eureka.enabled=false\",", "fixed": "     classes = {\n         CamelAutoConfiguration.class,\n         CamelCloudAutoConfiguration.class,\n        CamelCloudServiceCallRoutesAutoConfiguration.class\n     },\n     properties = {\n         \"ribbon.eureka.enabled=false\",", "sourceBeforeFix": "CamelCloudServiceCallConfiguration.class", "sourceAfterFix": "CamelCloudServiceCallRoutesAutoConfiguration.class"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"not assigning region (on kill list): \" +\n            info.getRegionName());\n         }\n         return;\n       }", "fixed": "         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"not assigning region (on kill list): \" +\n            info.getRegionNameAsString());\n         }\n         return;\n       }", "sourceBeforeFix": "info.getRegionName()", "sourceAfterFix": "info.getRegionNameAsString()"}
{"fixCommitSHA1": "ccc86e9f1cddebc731ac1ccabdd469df11d72d8b", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tFlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);", "fixed": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tFlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);", "sourceBeforeFix": "RestartStrategies.fixedDelayRestart(3,0)", "sourceAfterFix": "RestartStrategies.fixedDelayRestart(1,0)"}
{"fixCommitSHA1": "aebe2ca06a3fb220c7211b174c85250f36afae25", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForNone\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForNone\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "9e6f96dbfc8bf1ae1ffbe0115f53f1de0fc86ffc", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "fixed": "             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "fixed": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DropboxEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDropboxEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DropboxEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDropboxEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3eb03ea8da9525d9615fcef99c0f3dcc3f1218c9", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     protected R visitCreateTable(CreateTable node, C context)\n     {\n        return visitNode(node, context);\n     }\n     protected R visitDropTable(DropTable node, C context)\n     {\n        return visitNode(node, context);\n     }\n }", "fixed": "     protected R visitCreateTable(CreateTable node, C context)\n     {\n        return visitStatement(node, context);\n     }\n     protected R visitDropTable(DropTable node, C context)\n     {\n        return visitStatement(node, context);\n     }\n }", "sourceBeforeFix": "visitNode(node,context)", "sourceAfterFix": "visitStatement(node,context)"}
{"fixCommitSHA1": "c98bab51de22a20990ff8805825e8638e0686464", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     Files.copy(cnf2Path, cnfPath, StandardCopyOption.REPLACE_EXISTING);\n    Admin admin = TEST_UTIL.getHBaseAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getMaster().getServerName();\n     admin.updateConfiguration(server);\n     Configuration conf = TEST_UTIL.getMiniHBaseCluster().getMaster().getConfiguration();", "fixed": "     Files.copy(cnf2Path, cnfPath, StandardCopyOption.REPLACE_EXISTING);\n    Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getMaster().getServerName();\n     admin.updateConfiguration(server);\n     Configuration conf = TEST_UTIL.getMiniHBaseCluster().getMaster().getConfiguration();", "sourceBeforeFix": "TEST_UTIL.getHBaseAdmin()", "sourceAfterFix": "TEST_UTIL.getAdmin()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(2);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(2);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\");\r", "sourceBeforeFix": "result.expectedMessageCount(3)", "sourceAfterFix": "result.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "cb84b2788aeed6aad2bc4b1acb98290e060861e2", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "fixed": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "sourceBeforeFix": "ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())", "sourceAfterFix": "ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())"}
{"fixCommitSHA1": "48ea8f3eaa9a3047893d0acd5304035912ebb681", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     public void close()\n     {\n         current = null;\nfixedMemoryUsage.setBytes(compressedSliceInput.length());\n         buffer = null;\n         bufferMemoryUsage.setBytes(0);", "fixed": "     public void close()\n     {\n         current = null;\nfixedMemoryUsage.setBytes(compressedSliceInput.getRetainedSize());\n         buffer = null;\n         bufferMemoryUsage.setBytes(0);", "sourceBeforeFix": "compressedSliceInput.length()", "sourceAfterFix": "compressedSliceInput.getRetainedSize()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "08127e3110bd7ea8e6eb84fccaed501455394f63", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     }\n   }\n  private int totalSize(Iterable<? extends Entry<?>> entries) {\n     int sum = 0;\n     for (Entry<?> entry : entries) {\n       sum += entry.getCount();", "fixed": "     }\n   }\n  private static int totalSize(Iterable<? extends Entry<?>> entries) {\n     int sum = 0;\n     for (Entry<?> entry : entries) {\n       sum += entry.getCount();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "d2b1bc5c1f0762f06b72792cbf2885b40599d905", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "                 String trace = traceInText.get(i);\n                 String[] tokens = trace.split(\",\");\n                stackTrace[i] = new StackTraceElement(tokens[0], tokens[1], tokens[2], Integer.valueOf(tokens[3]));\n             }\n             return new ChildProcessException(exceptionClass + \": \" + message, stackTrace);", "fixed": "                 String trace = traceInText.get(i);\n                 String[] tokens = trace.split(\",\");\n                stackTrace[i] = new StackTraceElement(tokens[0], tokens[1], tokens[2], Integer.parseInt(tokens[3]));\n             }\n             return new ChildProcessException(exceptionClass + \": \" + message, stackTrace);", "sourceBeforeFix": "Integer.valueOf(tokens[3])", "sourceAfterFix": "Integer.parseInt(tokens[3])"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    private static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n \t/**\n \t * Get a listing or important variables used in openmrs", "fixed": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t/**\n \t * Get a listing or important variables used in openmrs", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean keyDown (int keycode) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].keyDown(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean keyDown (int keycode) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).keyDown(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {", "fixed": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "ce8d80dd2543eaa821e861969cfb53b9b3a666de", "projectName": "alibaba.fastjson", "bugType": "Less Specific If", "problem": "                }\n                superClass = superClass.getSuperclass();\n               if (superClass == Object.class) {\n                    break;\n                }\n             }", "fixed": "                }\n                superClass = superClass.getSuperclass();\n               if (superClass == Object.class || superClass == null) {\n                    break;\n                }\n             }", "sourceBeforeFix": "superClass == Object.class", "sourceAfterFix": "superClass == Object.class || superClass == null"}
{"fixCommitSHA1": "ef8206551c0ec51f70ec25e7371333dc5c8d99b1", "projectName": "junit-team.junit", "bugType": "Same Function Less Args", "problem": "         }\n         Method suiteMethod = null;\n         try {\n            suiteMethod = testClass.getMethod(SUITE_METHODNAME, new Class[0]);\n         } catch (Exception e) {\n             clearStatus();", "fixed": "         }\n         Method suiteMethod = null;\n         try {\n            suiteMethod = testClass.getMethod(SUITE_METHODNAME);\n         } catch (Exception e) {\n             clearStatus();", "sourceBeforeFix": "suiteMethod.invoke(null,(Object[])new Class[0])", "sourceAfterFix": "suiteMethod.invoke(null)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCouchbaseEndpointBuilder\n             extends\n                 AdvancedCouchbaseEndpointConsumerBuilder, AdvancedCouchbaseEndpointProducerBuilder {\n         default CouchbaseEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCouchbaseEndpointBuilder\n             extends\n                 AdvancedCouchbaseEndpointConsumerBuilder, AdvancedCouchbaseEndpointProducerBuilder {\n         default CouchbaseEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d270a8582b50321bc4b8a5921ff2439022a403d2", "projectName": "checkstyle.checkstyle", "bugType": "Less Specific If", "problem": "              token = token.getParent())\n         {\n             final int type = token.getType();\n            if (type == TokenTypes.CLASS_DEF) {\nbreak;\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\nbreak;", "fixed": "              token = token.getParent())\n         {\n             final int type = token.getType();\n            if (type == TokenTypes.CLASS_DEF\n                || type == TokenTypes.ENUM_DEF\n                || type == TokenTypes.ANNOTATION_DEF)\n            {\nbreak;\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\nbreak;", "sourceBeforeFix": "type == TokenTypes.CLASS_DEF", "sourceAfterFix": "type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.ANNOTATION_DEF"}
{"fixCommitSHA1": "a7f54a539a4c8f92f4895934480061a2ccbcd499", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeThreadPoolElements(XMLElement element, ThreadPoolResourceDefinition pool, XMLExtendedStreamWriter writer, ModelNode container) throws XMLStreamException {", "fixed": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeThreadPoolElements(XMLElement element, ThreadPoolResourceDefinition pool, XMLExtendedStreamWriter writer, ModelNode container) throws XMLStreamException {", "sourceBeforeFix": "attribute.getDefinition().getAttributeMarshaller()", "sourceAfterFix": "attribute.getDefinition().getMarshaller()"}
{"fixCommitSHA1": "e5298f62da9c8ff2319709bdd35aceef75e97228", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     @Override\n     protected void initRegistry() {\n         super.initRegistry();\n        getRegistry().put(\"hb\", hb);\n     }\n }", "fixed": "     @Override\n     protected void initRegistry() {\n         super.initRegistry();\n        getRegistry().bind(\"hb\", hb);\n     }\n }", "sourceBeforeFix": "getRegistry().put(\"hb\",hb)", "sourceAfterFix": "getRegistry().bind(\"hb\",hb)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "ab2d880793dd983f1d71e560272cb4fff791cf4c", "projectName": "yusuke.twitter4j", "bugType": "Change Numeric Literal", "problem": "             props.load(is);\n             Configuration conf = new PropertyConfiguration(props);\n             twitter = new TwitterFactory(conf).getInstance();\n            AccessToken at = twitter.getOAuthAccessToken(id1.screenName, id1.password);\n             twitter.updateStatus(new Date() + \": xAuth test.\");\n             twitter = new TwitterFactory().getInstance();", "fixed": "             props.load(is);\n             Configuration conf = new PropertyConfiguration(props);\n             twitter = new TwitterFactory(conf).getInstance();\n            twitter.getOAuthAccessToken(id1.screenName, id1.password);\n             twitter.updateStatus(new Date() + \": xAuth test.\");\n             twitter = new TwitterFactory().getInstance();", "sourceBeforeFix": "assertEquals(401,te.getStatusCode())", "sourceAfterFix": "assertEquals(403,te.getStatusCode())"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *  Does class have private ctors.\n          *  @return true if class has private ctors\n          */\n        boolean isWithPrivateCtor() {\n             return withPrivateCtor;\n         }", "fixed": "          *  Does class have private ctors.\n          *  @return true if class has private ctors\n          */\n        private boolean isWithPrivateCtor() {\n             return withPrivateCtor;\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "ed6b93c315cebbf53ffecd330f0835a791dad92c", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "         List<String> result = new ArrayList<String>();\n        Module module = Module.getModuleFromCallerModuleLoader(ModuleIdentifier.create(moduleName));\n         ModuleClassLoader mcl = module.getClassLoader();\n         Field pathsField = ModuleClassLoader.class.getDeclaredField(\"paths\");\n         Field sourceListField = null;", "fixed": "         List<String> result = new ArrayList<String>();\n        Module module = Module.getModuleFromCallerModuleLoader(ModuleIdentifier.fromString(moduleName));\n         ModuleClassLoader mcl = module.getClassLoader();\n         Field pathsField = ModuleClassLoader.class.getDeclaredField(\"paths\");\n         Field sourceListField = null;", "sourceBeforeFix": "ModuleIdentifier.create(moduleName)", "sourceAfterFix": "ModuleIdentifier.fromString(moduleName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "09ca7c3d598d13a865596fbfd5b2a6dc6ece7237", "projectName": "swagger-api.swagger-core", "bugType": "Less Specific If", "problem": "                 }\n             }\n         }\n        if (subtypeProps.isEmpty()) {\n             child.setProperties(null);\n         }\n     }", "fixed": "                 }\n             }\n         }\n        if (subtypeProps == null || subtypeProps.isEmpty()) {\n             child.setProperties(null);\n         }\n     }", "sourceBeforeFix": "subtypeProps.isEmpty()", "sourceAfterFix": "subtypeProps == null || subtypeProps.isEmpty()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dd6dbd5cf29795ac5bd8f76b76c562d4737917b8", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       throws IOException {\n     FileSystemMasterClient masterClient = mContext.acquireMasterClient();\n     try {\n      return masterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.getPath(), -1L, recursive);\n     } finally {\n       mContext.releaseMasterClient(masterClient);\n     }", "fixed": "       throws IOException {\n     FileSystemMasterClient masterClient = mContext.acquireMasterClient();\n     try {\n      return masterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.toString(), -1L, recursive);\n     } finally {\n       mContext.releaseMasterClient(masterClient);\n     }", "sourceBeforeFix": "ufsPath.getPath()", "sourceAfterFix": "ufsPath.toString()"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    private static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2b4a0c1d9d2f2b27558951c1bf7776d96bd495e1", "projectName": "stanfordnlp.CoreNLP", "bugType": "Wrong Function Name", "problem": "       String wordString = new String(ca);\n      if (Character.isSpaceChar(origText.charAt(i)) || Character.isISOControl(origText.charAt(i))) {\n         seg = true;\n       } else {", "fixed": "       String wordString = new String(ca);\n      if (Character.isWhitespace(origText.charAt(i)) || Character.isISOControl(origText.charAt(i))) {\n         seg = true;\n       } else {", "sourceBeforeFix": "Character.isSpaceChar(origText.charAt(i))", "sourceAfterFix": "Character.isWhitespace(origText.charAt(i))"}
{"fixCommitSHA1": "d594ce352220674c8834eebb48adbe1a29921f1e", "projectName": "Atmosphere.atmosphere", "bugType": "Change Modifier", "problem": "      * {@inheritDoc}\n      */\n     @Override\n    public Broadcaster lookup(Class<? extends Broadcaster> c, Object id, boolean createIfNull) {\n         Broadcaster b = store.get(id);\n         if (b != null && !c.isAssignableFrom(b.getClass())) {\n             String msg = \"Invalid lookup class \" + c.getName() + \". Cached class is: \" + b.getClass().getName();", "fixed": "      * {@inheritDoc}\n      */\n     @Override\n    public synchronized Broadcaster lookup(Class<? extends Broadcaster> c, Object id, boolean createIfNull) {\n         Broadcaster b = store.get(id);\n         if (b != null && !c.isAssignableFrom(b.getClass())) {\n             String msg = \"Invalid lookup class \" + c.getName() + \". Cached class is: \" + b.getClass().getName();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SipEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSipEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SipEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSipEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8d886e59bfc878cfbbbcd23160a7dd7c44e5fe94", "projectName": "druid-io.druid", "bugType": "Change Binary Operator", "problem": "     long totalSize = 0;\n     for (File file : directory.listFiles()) {\n       log.info(\"Adding file[%s] with size[%,d].  Total size so far[%,d]\", file, file.length(), totalSize);\n      if (file.length() >= Integer.MAX_VALUE) {\n         zipOut.finish();\n         throw new IOE(\"file[%s] too large [%,d]\", file, file.length());\n       }", "fixed": "     long totalSize = 0;\n     for (File file : directory.listFiles()) {\n       log.info(\"Adding file[%s] with size[%,d].  Total size so far[%,d]\", file, file.length(), totalSize);\n      if (file.length() > Integer.MAX_VALUE) {\n         zipOut.finish();\n         throw new IOE(\"file[%s] too large [%,d]\", file, file.length());\n       }", "sourceBeforeFix": "file.length() >= Integer.MAX_VALUE", "sourceAfterFix": "file.length() > Integer.MAX_VALUE"}
{"fixCommitSHA1": "ae6599c6ec02c7973209010991a23fde5db8217f", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": " public class MyConverters implements TypeConverters {\n     @Converter\n    public static Country toCountry(String iso) {\n         Country answer = new Country();\n         answer.setIso(\"en\");\n         answer.setName(\"England\");", "fixed": " public class MyConverters implements TypeConverters {\n     @Converter\n    public Country toCountry(String iso) {\n         Country answer = new Country();\n         answer.setIso(\"en\");\n         answer.setName(\"England\");", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9e6f96dbfc8bf1ae1ffbe0115f53f1de0fc86ffc", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;", "fixed": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "a161d8d1924d1fb49a4d229370d998be1493957c", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "             final long committedOffset = KafkaJournal.this.committedOffset.get();\n             final HashSet<LogSegment> logSegments = Sets.newHashSet(\n                    JavaConversions.asIterable(kafkaLog.logSegments(committedOffset, Long.MAX_VALUE))\n             );\n             loggerForCleaner.debug(\"[cleanup-committed] Keeping segments {}\", logSegments);\n             return kafkaLog.deleteOldSegments(new AbstractFunction1<LogSegment, Object>() {", "fixed": "             final long committedOffset = KafkaJournal.this.committedOffset.get();\n             final HashSet<LogSegment> logSegments = Sets.newHashSet(\n                    JavaConversions.asJavaIterable(kafkaLog.logSegments(committedOffset, Long.MAX_VALUE))\n             );\n             loggerForCleaner.debug(\"[cleanup-committed] Keeping segments {}\", logSegments);\n             return kafkaLog.deleteOldSegments(new AbstractFunction1<LogSegment, Object>() {", "sourceBeforeFix": "JavaConversions.asIterable(logManager.allLogs())", "sourceAfterFix": "JavaConversions.asJavaIterable(logManager.allLogs())"}
{"fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "projectName": "eclipse.vert.x", "bugType": "Same Function More Args", "problem": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException();\n   }\n }", "fixed": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n }", "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: succeeded\")"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "261f178a7b371d33b0c00c887821e8587534c32a", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "         if (target == this) {\n             task.run();\n         } else {\n            target.addTask(task);\n         }\n     }", "fixed": "         if (target == this) {\n             task.run();\n         } else {\n            target.addTaskAndWakeup(task);\n         }\n     }", "sourceBeforeFix": "17", "sourceAfterFix": "1"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).toString();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "fixed": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "sourceBeforeFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").toString()", "sourceAfterFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").getPath()"}
{"fixCommitSHA1": "4386fa36b154102760ddf440bbbeb4790de65d52", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         assertEquals(\"sample-tag-key\", aws.getTagKey());\n         assertEquals(\"sample-tag-value\", aws.getTagValue());\n        assertFalse(\"reuse-address\", networkConfig.isReuseAddress());\n     }", "fixed": "         assertEquals(\"sample-tag-key\", aws.getTagKey());\n         assertEquals(\"sample-tag-value\", aws.getTagValue());\n        assertTrue(\"reuse-address\", networkConfig.isReuseAddress());\n     }", "sourceBeforeFix": "assertFalse(\"reuse-address\",networkConfig.isReuseAddress())", "sourceAfterFix": "assertTrue(\"reuse-address\",networkConfig.isReuseAddress())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "ac9d639779e5c0c1482f1abc50c71551c9ca09c1", "projectName": "dropwizard.metrics", "bugType": "Change Binary Operator", "problem": "         final ThreadInfo[] threads = this.threads.dumpAllThreads(true, true);\n         final PrintWriter writer = new PrintWriter(out, true);\n        for (int ti = threads.length - 1; ti > 0; ti--) {\n             final ThreadInfo t = threads[ti];\n             writer.printf(\"%s id=%d state=%s\",\n                           t.getThreadName(),", "fixed": "         final ThreadInfo[] threads = this.threads.dumpAllThreads(true, true);\n         final PrintWriter writer = new PrintWriter(out, true);\n        for (int ti = threads.length - 1; ti >= 0; ti--) {\n             final ThreadInfo t = threads[ti];\n             writer.printf(\"%s id=%d state=%s\",\n                           t.getThreadName(),", "sourceBeforeFix": "ti > 0", "sourceAfterFix": "ti >= 0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5ef9fe421732a256519e0dbac06f73f728f12564", "projectName": "Alluxio.alluxio", "bugType": "Missing Throws Exception", "problem": "     return getFile(path, false);\n   }\n  public synchronized TachyonFile getFile(String path, boolean useCachedMetadata) {\n     path = CommonUtils.cleanPath(path);\n     ClientFileInfo clientFileInfo = getClientFileInfo(path, useCachedMetadata);\n     if (clientFileInfo == null) {", "fixed": "     return getFile(path, false);\n   }\n  public synchronized TachyonFile getFile(String path, boolean useCachedMetadata) \n      throws IOException {\n     path = CommonUtils.cleanPath(path);\n     ClientFileInfo clientFileInfo = getClientFileInfo(path, useCachedMetadata);\n     if (clientFileInfo == null) {", "sourceBeforeFix": "33", "sourceAfterFix": "33"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "      * @throws NullPointerException if the lines array is null\n      */\n     public FileText(File file, List<String> lines) {\n        final StringBuilder buf = new StringBuilder();\n         for (final String line : lines) {\n             buf.append(line).append('\\n');\n         }", "fixed": "      * @throws NullPointerException if the lines array is null\n      */\n     public FileText(File file, List<String> lines) {\n        final StringBuilder buf = new StringBuilder(1024);\n         for (final String line : lines) {\n             buf.append(line).append('\\n');\n         }", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "b7dfbc0a93d9a7135a1bbb1cc32fd715b2091eae", "projectName": "alibaba.druid", "bugType": "Wrong Function Name", "problem": "         dataMap.put(\"TestWhileIdle\", this.isTestWhileIdle());\n         dataMap.put(\"DefaultAutoCommit\", this.isDefaultAutoCommit());\n        dataMap.put(\"DefaultReadOnly\", this.isDefaultAutoCommit());\n         dataMap.put(\"DefaultTransactionIsolation\", this.getDefaultTransactionIsolation());\n         dataMap.put(\"LogicConnectCount\", connectCount);", "fixed": "         dataMap.put(\"TestWhileIdle\", this.isTestWhileIdle());\n         dataMap.put(\"DefaultAutoCommit\", this.isDefaultAutoCommit());\n        dataMap.put(\"DefaultReadOnly\", this.getDefaultReadOnly());\n         dataMap.put(\"DefaultTransactionIsolation\", this.getDefaultTransactionIsolation());\n         dataMap.put(\"LogicConnectCount\", connectCount);", "sourceBeforeFix": "this.isDefaultAutoCommit()", "sourceAfterFix": "this.getDefaultReadOnly()"}
{"fixCommitSHA1": "59939fddd703f0880268ee1dc33fded2dc54cd9e", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "         }\n        if (request.getEntity().getMediaType() != null && request.getEntity().getMediaType().equals(MediaType.APPLICATION_WWW_FORM)) {\n             Form form = new Form(request.getEntity());\n             for (String paramName : form.getValuesMap().keySet()) {\n                 String[] values = form.getValuesArray(paramName);", "fixed": "         }\n        if (request.getEntity().getMediaType() != null && request.getEntity().getMediaType().equals(MediaType.APPLICATION_WWW_FORM, true)) {\n             Form form = new Form(request.getEntity());\n             for (String paramName : form.getValuesMap().keySet()) {\n                 String[] values = form.getValuesArray(paramName);", "sourceBeforeFix": "request.getEntity().getMediaType().equals(MediaType.APPLICATION_WWW_FORM)", "sourceAfterFix": "request.getEntity().getMediaType().equals(MediaType.APPLICATION_WWW_FORM,true)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "378e87f1e3bf8b2451ca511668954b707680b843", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "  * @author <a href=\"mailto:checkstyle@puppycrawl.com\">Oliver Burn</a>\n  * @version 1.0\n  */\nclass LocalizedMessage\n     implements Comparable\n {\n     ", "fixed": "  * @author <a href=\"mailto:checkstyle@puppycrawl.com\">Oliver Burn</a>\n  * @version 1.0\n  */\npublic class LocalizedMessage\n     implements Comparable\n {\n     ", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}
{"fixCommitSHA1": "11b2dc6cb756eab64037bb27188e0c1eac3b01e0", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     Compiler compiler = new Compiler();\n     CompilerOptions options = new CompilerOptions();\n     options.setLanguageIn(LanguageMode.ECMASCRIPT6_STRICT);\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n     options.setCodingConvention(new GoogleCodingConvention());\n     options.setWarningLevel(DiagnosticGroups.MISSING_REQUIRE, CheckLevel.WARNING);\n     options.setWarningLevel(DiagnosticGroups.EXTRA_REQUIRE, CheckLevel.WARNING);", "fixed": "     Compiler compiler = new Compiler();\n     CompilerOptions options = new CompilerOptions();\n     options.setLanguageIn(LanguageMode.ECMASCRIPT6_STRICT);\n    options.setLanguageOut(LanguageMode.ECMASCRIPT5);\n     options.setCodingConvention(new GoogleCodingConvention());\n     options.setWarningLevel(DiagnosticGroups.MISSING_REQUIRE, CheckLevel.WARNING);\n     options.setWarningLevel(DiagnosticGroups.EXTRA_REQUIRE, CheckLevel.WARNING);", "sourceBeforeFix": "options.setLanguageIn(LanguageMode.ECMASCRIPT5)", "sourceAfterFix": "options.setLanguageOut(LanguageMode.ECMASCRIPT5)"}
{"fixCommitSHA1": "0d3c78b6f28fb3cad00c12605209c524702adb0a", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             }\n             if (!removed) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             }", "fixed": "             }\n             if (!removed) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             }", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "42b44935272ecf97acca3b7c9fe90b45fd8e01d2", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "          * you could append \"?olderThan=2912\u2033 to your request to get the 20\n          * messages prior to those you're seeing.\n          */\n        private Integer olderThan = -1;\n         /**\n          * Returns messages newer than the message ID specified as a numeric\n          * string. This should be used when polling for new messages. If you're", "fixed": "          * you could append \"?olderThan=2912\u2033 to your request to get the 20\n          * messages prior to those you're seeing.\n          */\n        private Long olderThan = -1L;\n         /**\n          * Returns messages newer than the message ID specified as a numeric\n          * string. This should be used when polling for new messages. If you're", "sourceBeforeFix": "public Integer getOlderThan(){   return olderThan; } ", "sourceAfterFix": "public Long getOlderThan(){   return olderThan; } "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface VmEndpointBuilder\n             extends\n                 VmEndpointConsumerBuilder, VmEndpointProducerBuilder {\n         default AdvancedVmEndpointBuilder advanced() {", "fixed": "     \n    public interface VmEndpointBuilder\n             extends\n                 VmEndpointConsumerBuilder, VmEndpointProducerBuilder {\n         default AdvancedVmEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleSheetsStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default GoogleSheetsStreamEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleSheetsStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default GoogleSheetsStreamEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "c3448fe289734ed7498eee4444af630f7abd6986", "projectName": "apache.hadoop", "bugType": "Change Numeric Literal", "problem": "     scheduler.handle(appRemovedEvent1);\n    assertEquals(0, scheduler.getQueueManager().getQueue(\"default\").getApplications().size());\n   }\n   @Test", "fixed": "     scheduler.handle(appRemovedEvent1);\n    assertEquals(0, scheduler.getQueueManager().getQueue(\"user1\").getApplications().size());\n   }\n   @Test", "sourceBeforeFix": "assertEquals(1,scheduler.getQueueManager().getQueues().size())", "sourceAfterFix": "assertEquals(2,scheduler.getQueueManager().getQueues().size())"}
{"fixCommitSHA1": "4a9d7457934350576e9e37a7f253066f4a5d3cce", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "   }\n   public static TwoDimensionalMap<String, String, SimpleMatrix> averageBinaryMatrices(List<TwoDimensionalMap<String, String, SimpleMatrix>> maps) {\n    TwoDimensionalMap<String, String, SimpleMatrix> averages = new TwoDimensionalMap<String, String, SimpleMatrix>();\n     for (Pair<String, String> binary : getBinaryMatrixNames(maps)) {\n       int count = 0;\n       SimpleMatrix matrix = null;", "fixed": "   }\n   public static TwoDimensionalMap<String, String, SimpleMatrix> averageBinaryMatrices(List<TwoDimensionalMap<String, String, SimpleMatrix>> maps) {\n    TwoDimensionalMap<String, String, SimpleMatrix> averages = TwoDimensionalMap.treeMap();\n     for (Pair<String, String> binary : getBinaryMatrixNames(maps)) {\n       int count = 0;\n       SimpleMatrix matrix = null;", "sourceBeforeFix": "Generics.newHashMap()", "sourceAfterFix": "Generics.newTreeMap()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FtpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFtpEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface FtpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFtpEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0b116a1a5ac6a369ab9622dce95c969ee591b809", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tthis.loggingSystem.initialize();\n \t\tjava.util.logging.Logger julLogger = java.util.logging.Logger\n \t\t\t\t.getLogger(getClass().getName());\n\t\tjulLogger.info(\"Hello world\");\n \t\tString output = this.output.toString().trim();\n \t\tassertTrue(\"Wrong output:\\n\" + output, output.contains(\"Hello world\"));\n \t}", "fixed": " \t\tthis.loggingSystem.initialize();\n \t\tjava.util.logging.Logger julLogger = java.util.logging.Logger\n \t\t\t\t.getLogger(getClass().getName());\n\t\tjulLogger.severe(\"Hello world\");\n \t\tString output = this.output.toString().trim();\n \t\tassertTrue(\"Wrong output:\\n\" + output, output.contains(\"Hello world\"));\n \t}", "sourceBeforeFix": "julLogger.info(\"Hello world\")", "sourceAfterFix": "julLogger.severe(\"Hello world\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GridFsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGridFsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GridFsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGridFsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    private static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid tag value\", response = Void.class, responseContainer = \"List\") })\n    List<List<Pet>> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags);\n     @GET\n     @Path(\"/{petId}\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid tag value\", response = Void.class, responseContainer = \"List\") })\n    List<Pet> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags) throws Exception;\n     @GET\n     @Path(\"/{petId}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fd172432f0b7fcb65b990ece77a85fe10ea42c21", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t\tprivate final long timeout;\n\t\tprivate FSDataInputStream fdis = null;\n\t\tprivate Throwable error = null;\n \t\tpublic InputSplitOpenThread(FileInputSplit split, long timeout)\n \t\t{", "fixed": " \t\tprivate final long timeout;\n\t\tprivate volatile FSDataInputStream fdis = null;\n\t\tprivate volatile Throwable error = null;\n \t\tpublic InputSplitOpenThread(FileInputSplit split, long timeout)\n \t\t{", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAMQPEndpointBuilder\n             extends\n                 AdvancedAMQPEndpointConsumerBuilder, AdvancedAMQPEndpointProducerBuilder {\n         default AMQPEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAMQPEndpointBuilder\n             extends\n                 AdvancedAMQPEndpointConsumerBuilder, AdvancedAMQPEndpointProducerBuilder {\n         default AMQPEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f1024ba0e7d5f1276a285a4218f26c70252719b5", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t\t\t\tthis.jobManager.updateTaskExecutionState(new TaskExecutionState(jobID, id, newExecutionState,\n \t\t\t\t\toptionalDescription));\n \t\t\t} catch (IOException e) {\n\t\t\t\tLOG.error(StringUtils.stringifyException(e));\n \t\t\t}\n \t\t}\n \t}", "fixed": " \t\t\t\tthis.jobManager.updateTaskExecutionState(new TaskExecutionState(jobID, id, newExecutionState,\n \t\t\t\t\toptionalDescription));\n \t\t\t} catch (IOException e) {\n\t\t\t\tLOG.error(e);\n \t\t\t}\n \t\t}\n \t}", "sourceBeforeFix": "LOG.error(result.getDescription())", "sourceAfterFix": "LOG.error(result.getDescription(),e)"}
{"fixCommitSHA1": "a207330fb2009b7e9b273d9a0b18518c9da7eea6", "projectName": "hazelcast.hazelcast", "bugType": "Delete Throws Exception", "problem": "     @Test\n     @SuppressWarnings(\"deprecation\")\n    public void testQueryWithTTL() throws Exception {\n         Config config = getConfig();\n         String mapName = \"default\";\n        config.getMapConfig(mapName).setTimeToLiveSeconds(5);\n         HazelcastInstance instance = createHazelcastInstance(config);", "fixed": "     @Test\n     @SuppressWarnings(\"deprecation\")\n    public void testQueryWithTTL() {\n         Config config = getConfig();\n         String mapName = \"default\";\n        config.getMapConfig(mapName).setTimeToLiveSeconds(10);\n         HazelcastInstance instance = createHazelcastInstance(config);", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page4 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 2, 4);\n         assertThat(page4.pagination().getCount()).isEqualTo(1);\n        assertThat(page4.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page4.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\");", "fixed": "         final PaginatedList<TestDTO> page4 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 2, 4);\n         assertThat(page4.pagination().getCount()).isEqualTo(1);\n        assertThat(page4.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page4.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\");", "sourceBeforeFix": "assertThat(page2.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page2.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "4e24ea071ff17f2b98b47dd42dcb4a0fd0ac74e6", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": " public class BatchInvalidatorTest extends AbstractInvalidatorTest {\n     @Override\n    Invalidator createInvalidator(NodeEngineImpl nodeEngine) {\n         return new BatchInvalidator(MapService.SERVICE_NAME, 100, 10, TRUE_FILTER, nodeEngine);\n     }\n }", "fixed": " public class BatchInvalidatorTest extends AbstractInvalidatorTest {\n     @Override\n    public Invalidator createInvalidator(NodeEngineImpl nodeEngine) {\n         return new BatchInvalidator(MapService.SERVICE_NAME, 100, 10, TRUE_FILTER, nodeEngine);\n     }\n }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "507556d0aaea8d964976062ba4c1257ba9454f4f", "projectName": "code4craft.webmagic", "bugType": "Same Function More Args", "problem": " \t@Test\n \tpublic void testProxy() {\n\t\tSimpleProxyPool proxyPool = new SimpleProxyPool(httpProxyList);\n \t\tproxyPool.setReuseInterval(500);\n \t\tassertThat(proxyPool.getIdleNum()).isEqualTo(4);\n \t\tassertThat(new File(proxyPool.getProxyFilePath()).exists()).isEqualTo(true);", "fixed": " \t@Test\n \tpublic void testProxy() {\n\t\tSimpleProxyPool proxyPool = new SimpleProxyPool(httpProxyList,false);\n \t\tproxyPool.setReuseInterval(500);\n \t\tassertThat(proxyPool.getIdleNum()).isEqualTo(4);\n \t\tassertThat(new File(proxyPool.getProxyFilePath()).exists()).isEqualTo(true);", "sourceBeforeFix": "new SimpleProxyPool(httpProxyList)", "sourceAfterFix": "new SimpleProxyPool(httpProxyList,false)"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     }\n     if (LOG.isDebugEnabled()) {\n      LOG.debug(split.getRegionName().toString()\n          +\" no longer has references to \" + parent.toString());\n     }\n     BatchUpdate b = new BatchUpdate(parent);", "fixed": "     }\n     if (LOG.isDebugEnabled()) {\n      LOG.debug(split.getRegionNameAsString() +\n        \" no longer has references to \" + parent.toString());\n     }\n     BatchUpdate b = new BatchUpdate(parent);", "sourceBeforeFix": "info.getRegionName()", "sourceAfterFix": "info.getRegionNameAsString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "fixed": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "78ce1b10c99e206776b8f2834114eaf85306ab92", "projectName": "apache.hbase", "bugType": "Missing Throws Exception", "problem": "    * @throws IOException \n    */\n   public static void initTableReduceJob(String table,\n      Class<? extends TableReduce> reducer, JobConf job) {\n     initTableReduceJob(table, reducer, job, null);\n   }", "fixed": "    * @throws IOException \n    */\n   public static void initTableReduceJob(String table,\n    Class<? extends TableReduce> reducer, JobConf job)\n  throws IOException {\n     initTableReduceJob(table, reducer, job, null);\n   }", "sourceBeforeFix": "9", "sourceAfterFix": "9"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "eafa92d908c571ad0d3c9432583a318cc86733bb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "                            HttpServletRequest request,\n                            HttpServletResponse response) throws IOException, ServletException {\n             if (\"GET\".equalsIgnoreCase(request.getMethod())) {\n                response.addHeader(\"target\", r.getUri().toString());\n                 response.setStatus(HttpServletResponse.SC_OK);\n} else {\n                 response.sendError(HttpServletResponse.SC_FORBIDDEN);", "fixed": "                            HttpServletRequest request,\n                            HttpServletResponse response) throws IOException, ServletException {\n             if (\"GET\".equalsIgnoreCase(request.getMethod())) {\n                response.addHeader(\"target\", r.getUri().getPath());\n                 response.setStatus(HttpServletResponse.SC_OK);\n} else {\n                 response.sendError(HttpServletResponse.SC_FORBIDDEN);", "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}
{"fixCommitSHA1": "9e6f96dbfc8bf1ae1ffbe0115f53f1de0fc86ffc", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);", "fixed": "             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6196f126f039a618d3b8cc4112def78be2b07891", "projectName": "libgdx.libgdx", "bugType": "Less Specific If", "problem": " \tpublic Mesh (VertexDataType type, boolean isStatic, int maxVertices, int maxIndices, VertexAttribute... attributes) {\r\n\t\tif (type == VertexDataType.VertexBufferObject) {\r\n \t\t\tvertices = new VertexBufferObject(isStatic, maxVertices, attributes);\r\n \t\t\tindices = new IndexBufferObject(isStatic, maxIndices);\r\n \t\t\tisVertexArray = false;\r", "fixed": " \tpublic Mesh (VertexDataType type, boolean isStatic, int maxVertices, int maxIndices, VertexAttribute... attributes) {\r\n\t\tif (type == VertexDataType.VertexBufferObject || Mesh.forceVBO) {\r\n \t\t\tvertices = new VertexBufferObject(isStatic, maxVertices, attributes);\r\n \t\t\tindices = new IndexBufferObject(isStatic, maxIndices);\r\n \t\t\tisVertexArray = false;\r", "sourceBeforeFix": "type == VertexDataType.VertexBufferObject", "sourceAfterFix": "type == VertexDataType.VertexBufferObject || Mesh.forceVBO"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "           sum += mBuf.get(pId % 16);\n           if (DEBUG_MODE) {\n            buf.DATA.flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();", "fixed": "           sum += mBuf.get(pId % 16);\n           if (DEBUG_MODE) {\n            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "da8362a2da7950fb84cba182a17a41e3b5152668", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tSkipPatternJarScanner(JarScanner jarScanner, Set<String> patterns) {\n \t\tAssert.notNull(jarScanner, \"JarScanner must not be null\");\n\t\tAssert.notNull(jarScanner, \"Patterns must not be null\");\n \t\tthis.jarScanner = jarScanner;\n \t\tthis.patterns = patterns;\n \t\tsetPatternToTomcat8SkipFilter();", "fixed": " \tSkipPatternJarScanner(JarScanner jarScanner, Set<String> patterns) {\n \t\tAssert.notNull(jarScanner, \"JarScanner must not be null\");\n\t\tAssert.notNull(patterns, \"Patterns must not be null\");\n \t\tthis.jarScanner = jarScanner;\n \t\tthis.patterns = patterns;\n \t\tsetPatternToTomcat8SkipFilter();", "sourceBeforeFix": "Assert.notNull(jarScanner,\"Patterns must not be null\")", "sourceAfterFix": "Assert.notNull(patterns,\"Patterns must not be null\")"}
{"fixCommitSHA1": "4344efd565b3ad079eff4780619a964c86ac0b11", "projectName": "NanoHttpd.nanohttpd", "bugType": "Change Modifier", "problem": "     private final int myPort;\n    private ServerSocket myServerSocket;\n     private SSLServerSocketFactory sslServerSocketFactory;", "fixed": "     private final int myPort;\n    private volatile ServerSocket myServerSocket;\n     private SSLServerSocketFactory sslServerSocketFactory;", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dbd841562137595e365ccf2ad1524ecfdee958c9", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "                 publicType,\n                 ImmutableSet.copyOf(entry.getValue()),\n                implemetationMethodDescriptors.build()));\n       } catch (IOException e) {\n         messager.printMessage(Kind.ERROR, \"failed\");\n       }", "fixed": "                 publicType,\n                 ImmutableSet.copyOf(entry.getValue()),\n                implementationMethodDescriptors.build()));\n       } catch (IOException e) {\n         messager.printMessage(Kind.ERROR, \"failed\");\n       }", "sourceBeforeFix": "ImmutableSet.Builder<ImplemetationMethodDescriptor>", "sourceAfterFix": "ImmutableSet.Builder<ImplementationMethodDescriptor>"}
{"fixCommitSHA1": "8cb66861957089a03000c71b66f1e66e8e66d4c1", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n                createQueryResultSnippet( engine.execute( query  ).toString() ) ) );\n         fw.append( \"\\nNext up we will add filtering to set more parts \"\n                    + \"in motion:\\n\\nIn this next example, we take a list of users \"", "fixed": "                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n                createQueryResultSnippet( engine.execute( query  ).dumpToString() ) ) );\n         fw.append( \"\\nNext up we will add filtering to set more parts \"\n                    + \"in motion:\\n\\nIn this next example, we take a list of users \"", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "296b9236fd1544637ae57d022c9e1dd9758577d0", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "       } else if (outputFS instanceof DistributedFileSystem) {\n         loadSpec = ImmutableMap.<String, Object>of(\n             \"type\", \"hdfs\",\n            \"path\", indexOutURI.getPath()\n         );\n       } else {\n         throw new ISE(\"Unknown file system[%s]\", outputFS.getClass());", "fixed": "       } else if (outputFS instanceof DistributedFileSystem) {\n         loadSpec = ImmutableMap.<String, Object>of(\n             \"type\", \"hdfs\",\n            \"path\", indexOutURI.toString()\n         );\n       } else {\n         throw new ISE(\"Unknown file system[%s]\", outputFS.getClass());", "sourceBeforeFix": "indexOutURI.getPath()", "sourceAfterFix": "indexOutURI.toString()"}
{"fixCommitSHA1": "4281cc1c5d3aa51b56db9d9e251c761c52a855e3", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t * before growing the backing table. */\r\n \tpublic ObjectMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "fixed": " \t * before growing the backing table. */\r\n \tpublic ObjectMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "bcb6eeec1d978d6d572ebec875d34dc64aeb5121", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.intValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "fixed": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.floatValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "sourceBeforeFix": "n.intValue()", "sourceAfterFix": "n.longValue()"}
{"fixCommitSHA1": "2b27f6006b63686c9e8f1ff03b411ab2a6d1c791", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         template.sendBody(serverUri + \"?one=uno&two=dos\", \"Hello World\");\n        assertMockEndpointsSatisifed();\n     }\n     public void testHttpGetWithParamsViaHeader() throws Exception {", "fixed": "         template.sendBody(serverUri + \"?one=uno&two=dos\", \"Hello World\");\n        assertMockEndpointsSatisfied();\n     }\n     public void testHttpGetWithParamsViaHeader() throws Exception {", "sourceBeforeFix": "assertMockEndpointsSatisifed()", "sourceAfterFix": "assertMockEndpointsSatisfied()"}
{"fixCommitSHA1": "55fcf189eb1c1c4d776ce3b3ad7835fb404b21d8", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "  * @author <a href=\"mailto:checkstyle@puppycrawl.com\">Oliver Burn</a>\n  * @version 1.0\n  */\npublic class ScopeUtils\n {\n     \n     private ScopeUtils()", "fixed": "  * @author <a href=\"mailto:checkstyle@puppycrawl.com\">Oliver Burn</a>\n  * @version 1.0\n  */\npublic final class ScopeUtils\n {\n     \n     private ScopeUtils()", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "284988f0cd9275e98b31a72440965fb4ce60c1c8", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " @EnableConfigurationProperties\n @ConditionalOnClass({ AbstractSecurityWebApplicationInitializer.class,\n \t\tSessionCreationPolicy.class })\n@AutoConfigureAfter(SpringBootWebSecurityConfiguration.class)\n public class SecurityFilterAutoConfiguration {\n \tprivate static final String DEFAULT_FILTER_NAME = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME;", "fixed": " @EnableConfigurationProperties\n @ConditionalOnClass({ AbstractSecurityWebApplicationInitializer.class,\n \t\tSessionCreationPolicy.class })\n@AutoConfigureAfter(SecurityAutoConfiguration.class)\n public class SecurityFilterAutoConfiguration {\n \tprivate static final String DEFAULT_FILTER_NAME = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME;", "sourceBeforeFix": "SpringBootWebSecurityConfiguration.class", "sourceAfterFix": "SecurityAutoConfiguration.class"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n     }\n     @Test", "fixed": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "5a1e22b7115658cfcb45ba9c8cbe86b8cd285fae", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Modifier", "problem": "     private boolean forceClose;\n     private boolean isAutoCommitDirty;\n     private boolean isCatalogDirty;\n    private boolean isClosed;\n     private boolean isReadOnlyDirty;\n     private boolean isTransactionIsolationDirty;\n     private volatile long lastAccess;", "fixed": "     private boolean forceClose;\n     private boolean isAutoCommitDirty;\n     private boolean isCatalogDirty;\n    private volatile boolean isClosed;\n     private boolean isReadOnlyDirty;\n     private boolean isTransactionIsolationDirty;\n     private volatile long lastAccess;", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c5f6760c6804b5f0dfbec1ddd2953b3c58db58ce", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         void fail(Throwable cause) {\n             ReferenceCountUtil.release(msg);\n             if (promise != null) {\n                promise.setFailure(cause);\n             }\n         }", "fixed": "         void fail(Throwable cause) {\n             ReferenceCountUtil.release(msg);\n             if (promise != null) {\n                promise.tryFailure(cause);\n             }\n         }", "sourceBeforeFix": "promise.setFailure(cause)", "sourceAfterFix": "promise.tryFailure(cause)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "57634b6921a0d40e0cedb8150a7051c9cc466a5a", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\t\t}\r\n \t\t\telse {\r\n\t\t\t\tlog.debug(\"PID contains identifier with no assigning authority\");\r\n \t\t\t\tcontinue;\r\n \t\t\t}\r\n \t\t}\r", "fixed": " \t\t\t}\r\n \t\t\telse {\r\n\t\t\t\tlog.error(\"PID contains identifier with no assigning authority\");\r\n \t\t\t\tcontinue;\r\n \t\t\t}\r\n \t\t}\r", "sourceBeforeFix": "log.debug(\"PID contains identifier with no assigning authority\")", "sourceAfterFix": "log.error(\"PID contains identifier with no assigning authority\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"redis\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"redis\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGuavaEventBusEndpointBuilder\n             extends\n                 AdvancedGuavaEventBusEndpointConsumerBuilder, AdvancedGuavaEventBusEndpointProducerBuilder {\n         default GuavaEventBusEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGuavaEventBusEndpointBuilder\n             extends\n                 AdvancedGuavaEventBusEndpointConsumerBuilder, AdvancedGuavaEventBusEndpointProducerBuilder {\n         default GuavaEventBusEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MyBatisEndpointBuilder\n             extends\n                 MyBatisEndpointConsumerBuilder, MyBatisEndpointProducerBuilder {\n         default AdvancedMyBatisEndpointBuilder advanced() {", "fixed": "     \n    public interface MyBatisEndpointBuilder\n             extends\n                 MyBatisEndpointConsumerBuilder, MyBatisEndpointProducerBuilder {\n         default AdvancedMyBatisEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JCacheEndpointBuilder\n             extends\n                 JCacheEndpointConsumerBuilder, JCacheEndpointProducerBuilder {\n         default AdvancedJCacheEndpointBuilder advanced() {", "fixed": "     \n    public interface JCacheEndpointBuilder\n             extends\n                 JCacheEndpointConsumerBuilder, JCacheEndpointProducerBuilder {\n         default AdvancedJCacheEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6cf86311e8d061d65c3b8c70d705b69a9d205127", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "                         MemberLeftException memberLeftException = (MemberLeftException) result;\n                         inner.innerSetMemberLeft(memberLeftException.getMember());\n                     } else if (result instanceof Throwable) {\n                        inner.innerSetException((Throwable) result);\n                     } else {\n                         if (dt instanceof MultiTask) {\n                             if (result != null) {", "fixed": "                         MemberLeftException memberLeftException = (MemberLeftException) result;\n                         inner.innerSetMemberLeft(memberLeftException.getMember());\n                     } else if (result instanceof Throwable) {\n                        inner.innerSetException((Throwable) result, true);\n                     } else {\n                         if (dt instanceof MultiTask) {\n                             if (result != null) {", "sourceBeforeFix": "inner.innerSetException((Throwable)result)", "sourceAfterFix": "inner.innerSetException((Throwable)result,true)"}
{"fixCommitSHA1": "6b8aba0b3f75950016c50a2d45baa50f3ce34235", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Binary Operator", "problem": "     public static SSLContext getSSLContext()\n             throws GeneralSecurityException, IOException {\n         SSLConfig config = new SSLConfig();\n        if (config.keyStoreLocation == null || config.trustStoreLocation != null) {\n             return getLooseSSLContext();\n         } else {\n             return getStrictSSLContext(config);", "fixed": "     public static SSLContext getSSLContext()\n             throws GeneralSecurityException, IOException {\n         SSLConfig config = new SSLConfig();\n        if (config.keyStoreLocation == null || config.trustStoreLocation == null) {\n             return getLooseSSLContext();\n         } else {\n             return getStrictSSLContext(config);", "sourceBeforeFix": "config.trustStoreLocation != null", "sourceAfterFix": "config.trustStoreLocation == null"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "3b0e5ccc430c5ae4187e6139535c32cc17bb2a2b", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                     formatDataRate(globalExecutionStats.getOutputDataSize(), elapsedTime, false),\n                     max(0, globalExecutionStats.getSplits() - globalExecutionStats.getStartedSplits()),\n                    max(0, globalExecutionStats.getSplits() - globalExecutionStats.getCompletedSplits()),\n                     globalExecutionStats.getCompletedSplits());\n             reprintLine(querySummary);\n         }", "fixed": "                     formatDataRate(globalExecutionStats.getOutputDataSize(), elapsedTime, false),\n                     max(0, globalExecutionStats.getSplits() - globalExecutionStats.getStartedSplits()),\n                    max(0, globalExecutionStats.getStartedSplits() - globalExecutionStats.getCompletedSplits()),\n                     globalExecutionStats.getCompletedSplits());\n             reprintLine(querySummary);\n         }", "sourceBeforeFix": "globalExecutionStats.getSplits()", "sourceAfterFix": "globalExecutionStats.getStartedSplits()"}
{"fixCommitSHA1": "d33c0ebf8f8f52fb6fb82d615cec50a10627d267", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\n\t\tprivate String port = \"5000\";\n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n\t\t\t\tconfig.put(\"crash.telnet.port\", this.port);\n \t\t\t}\n \t\t}", "fixed": " \t\t\n\t\tprivate Integer port = 5000;\n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n\t\t\t\tconfig.put(\"crash.telnet.port\", String.valueOf(this.port));\n \t\t\t}\n \t\t}", "sourceBeforeFix": "public String getPort(){   return this.port; } ", "sourceAfterFix": "public Integer getPort(){   return this.port; } "}
{"fixCommitSHA1": "55fcf189eb1c1c4d776ce3b3ad7835fb404b21d8", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "  * @author <a href=\"mailto:dobratzp@ele.uri.edu\">Peter Dobratz</a>\n  * @version 1.0\n  */\npublic class TokenTypes\n {\n     \n     private TokenTypes()", "fixed": "  * @author <a href=\"mailto:dobratzp@ele.uri.edu\">Peter Dobratz</a>\n  * @version 1.0\n  */\npublic final class TokenTypes\n {\n     \n     private TokenTypes()", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ClientEndpointBuilder\n             extends\n                 ClientEndpointConsumerBuilder, ClientEndpointProducerBuilder {\n         default AdvancedClientEndpointBuilder advanced() {", "fixed": "     \n    public interface ClientEndpointBuilder\n             extends\n                 ClientEndpointConsumerBuilder, ClientEndpointProducerBuilder {\n         default AdvancedClientEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Olingo4EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOlingo4EndpointProducerBuilder advanced() {", "fixed": "     \n    public interface Olingo4EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOlingo4EndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "55a4b30e72ad36e69499aa5db9b25f63ea7884ac", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\n         result.expectedMessageCount(2);\n         MockEndpoint error = getMockEndpoint(\"mock:error\");\n        error.expectedMessageCount(1);\n         template.sendBody(\"direct:start\", \"Hello World\");\n         template.sendBody(\"direct:start\", \"Bye World\");", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\n         result.expectedMessageCount(2);\n         MockEndpoint error = getMockEndpoint(\"mock:error\");\n        error.expectedMinimumMessageCount(1);\n         template.sendBody(\"direct:start\", \"Hello World\");\n         template.sendBody(\"direct:start\", \"Bye World\");", "sourceBeforeFix": "error.expectedMessageCount(2)", "sourceAfterFix": "error.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastListEndpointBuilder\n             extends\n                 HazelcastListEndpointConsumerBuilder, HazelcastListEndpointProducerBuilder {\n         default AdvancedHazelcastListEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastListEndpointBuilder\n             extends\n                 HazelcastListEndpointConsumerBuilder, HazelcastListEndpointProducerBuilder {\n         default AdvancedHazelcastListEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "41df5a6f7ebe103b007a01aa58d400864e09de26", "projectName": "brettwooldridge.HikariCP", "bugType": "More Specific If", "problem": "             logger.error(\"idleTimeout cannot be negative.\");\n             throw new IllegalStateException(\"idleTimeout cannot be negative.\");\n         }\n        else if (idleTimeout < 30000)\n         {\n             logger.warn(\"idleTimeout is less than 30000ms, did you specify the wrong time unit?  Using default instead.\");\n             idleTimeout = IDLE_TIMEOUT;", "fixed": "             logger.error(\"idleTimeout cannot be negative.\");\n             throw new IllegalStateException(\"idleTimeout cannot be negative.\");\n         }\n        else if (idleTimeout < 30000 && idleTimeout != 0)\n         {\n             logger.warn(\"idleTimeout is less than 30000ms, did you specify the wrong time unit?  Using default instead.\");\n             idleTimeout = IDLE_TIMEOUT;", "sourceBeforeFix": "maxLifetime < 120000", "sourceAfterFix": "maxLifetime < 120000 && maxLifetime != 0"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Heartbeat_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         byte[] request = getRequestBytes(null, header);\n         Request obj = (Request) decode(request);\n         Assert.assertEquals(null, obj.getData());", "fixed": "     @Test\n     public void test_Decode_Return_Request_Heartbeat_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         byte[] request = getRequestBytes(null, header);\n         Request obj = (Request) decode(request);\n         Assert.assertEquals(null, obj.getData());", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5622a68e763431819499b28fd976dd8d240480de", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "     if (event instanceof ActivitiEntityEvent) {\n       Object entity = ((ActivitiEntityEvent) event).getEntity();\n      if (entity instanceof ProcessDefinition) {\n         result = (ProcessDefinitionEntity) entity;\n       }\n     }", "fixed": "     if (event instanceof ActivitiEntityEvent) {\n       Object entity = ((ActivitiEntityEvent) event).getEntity();\n      if (entity instanceof ProcessDefinitionEntity) {\n         result = (ProcessDefinitionEntity) entity;\n       }\n     }", "sourceBeforeFix": "entity instanceof ProcessDefinition", "sourceAfterFix": "entity instanceof ProcessDefinitionEntity"}
{"fixCommitSHA1": "a115820be9614ac00631d84db93a1002492f4c40", "projectName": "apache.camel", "bugType": "Same Function Swap Args", "problem": "         File file = new File(\"./target/cachedir\");\n         String[] files = file.list();\n        assertEquals(\"There should be no files\", files.length, 0);\n     }\n     @Override", "fixed": "         File file = new File(\"./target/cachedir\");\n         String[] files = file.list();\n        assertEquals(\"There should be no files\", 0, files.length);\n     }\n     @Override", "sourceBeforeFix": "assertEquals(\"There should be no files\",files.length,0)", "sourceAfterFix": "assertEquals(\"There should be no files\",0,files.length)"}
{"fixCommitSHA1": "031f769fa3c610748b48bc105b4518c880161d0a", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t*/\n \tpublic Vector2 getLocalAnchorB () {\n\t\tjniGetLocalAnchorA(addr, tmp);\n \t\tlocalAnchorB.set(tmp[0], tmp[1]);\n \t\treturn localAnchorB;\n \t}", "fixed": " \t*/\n \tpublic Vector2 getLocalAnchorB () {\n\t\tjniGetLocalAnchorB(addr, tmp);\n \t\tlocalAnchorB.set(tmp[0], tmp[1]);\n \t\treturn localAnchorB;\n \t}", "sourceBeforeFix": "jniGetLocalAnchorA(addr,tmp)", "sourceAfterFix": "jniGetLocalAnchorB(addr,tmp)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "97dc0ab1bd49e5d7644b91bc07c56d759aa84cfa", "projectName": "openmrs.openmrs-core", "bugType": "Change Binary Operator", "problem": " \t */\r\n \t@Override\r\n \tpublic String getName() {\r\n\t\tif (getConcept() != null || getConcept().getName() != null) {\r\n \t\t\treturn getConcept().getName().toString();\r\n \t\t}\r\n \t\treturn null;\r", "fixed": " \t */\r\n \t@Override\r\n \tpublic String getName() {\r\n\t\tif (getConcept() != null && getConcept().getName() != null) {\r\n \t\t\treturn getConcept().getName().toString();\r\n \t\t}\r\n \t\treturn null;\r", "sourceBeforeFix": "getConcept() != null || getConcept().getName() != null", "sourceAfterFix": "getConcept() != null && getConcept().getName() != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7e69b806137604da52bdded56b711041943a3893", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       if (types.size() > 1) {\n         if (isFwd) {\n           warnings.add(JSError.make(\n              callNode, NOT_UNIQUE_INSTANTIATION, funType.toString(),\n               UniqueNameGenerator.getOriginalName(typeParam),\n              types.toString()));\n         }\n         builder.put(typeParam, JSType.UNKNOWN);\n       } else if (types.size() == 1) {", "fixed": "       if (types.size() > 1) {\n         if (isFwd) {\n           warnings.add(JSError.make(\n              callNode, NOT_UNIQUE_INSTANTIATION,\n              Integer.toString(types.size()),\n               UniqueNameGenerator.getOriginalName(typeParam),\n              types.toString(),\n              funType.toString()));\n         }\n         builder.put(typeParam, JSType.UNKNOWN);\n       } else if (types.size() == 1) {", "sourceBeforeFix": "funType.toString()", "sourceAfterFix": "Integer.toString(types.size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b4979166050e553fd967e5094509de7975651ec", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "             chunks.get(chunk.getId()).put(chunk.getSequenceNumber(), chunk);\n         } else {\n            Map<Integer, GELFMessageChunk> c = Maps.newHashMap();\n             c.put(chunk.getSequenceNumber(), chunk);\n             chunks.put(chunk.getId(), c);\n         }", "fixed": "             chunks.get(chunk.getId()).put(chunk.getSequenceNumber(), chunk);\n         } else {\n            Map<Integer, GELFMessageChunk> c = Maps.newTreeMap();\n             c.put(chunk.getSequenceNumber(), chunk);\n             chunks.put(chunk.getId(), c);\n         }", "sourceBeforeFix": "Maps.newHashMap()", "sourceAfterFix": "Maps.newTreeMap()"}
{"fixCommitSHA1": "35c519ad4da6e47b858e89f6378b5d626e41b2cf", "projectName": "NLPchina.ansj_seg", "bugType": "Change Identifier Used", "problem": " \t\tif (args != null && args.length == 2) {\n \t\t\tinputPath = args[0];\n\t\t\tinputPath = args[1];\n \t\t}\n \t\tif (StringUtil.isBlank(inputPath) || StringUtil.isBlank(outputPath)) {", "fixed": " \t\tif (args != null && args.length == 2) {\n \t\t\tinputPath = args[0];\n\t\t\toutputPath = args[1];\n \t\t}\n \t\tif (StringUtil.isBlank(inputPath) || StringUtil.isBlank(outputPath)) {", "sourceBeforeFix": "inputPath=args[1]", "sourceAfterFix": "outputPath=args[1]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0258c8ad89e63130480ff5e15d7d4a12be92ff1c", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": "     assertEquals(-1, counter.getCount());\n     ProcessDefinitionEntity processDefinition = processEngineConfiguration\n      .getCommandExecutorTxRequiresNew()\n       .execute(new Command<ProcessDefinitionEntity>() {\n         public ProcessDefinitionEntity execute(CommandContext commandContext) {\n           return Context", "fixed": "     assertEquals(-1, counter.getCount());\n     ProcessDefinitionEntity processDefinition = processEngineConfiguration\n      .getCommandExecutor()\n       .execute(new Command<ProcessDefinitionEntity>() {\n         public ProcessDefinitionEntity execute(CommandContext commandContext) {\n           return Context", "sourceBeforeFix": "processEngineConfiguration.getCommandExecutorTxRequiresNew()", "sourceAfterFix": "processEngineConfiguration.getCommandExecutor()"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNano(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "fixed": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "6190e5a019d5009864d47bf4b08ceef4ac52cf91", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "   @Test\n   public void doubleFlush() throws Exception {\n     mTestStream.write(INCREASING_BYTES, 1, 10);\n    Assert.assertEquals(0, mTestStream.getBytesFlushed());\n     mTestStream.flush();\n    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n     mTestStream.flush();\n    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n   }\n }", "fixed": "   @Test\n   public void doubleFlush() throws Exception {\n     mTestStream.write(INCREASING_BYTES, 1, 10);\n    Assert.assertEquals(0, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n   }\n }", "sourceBeforeFix": "mTestStream.getBytesFlushed()", "sourceAfterFix": "mTestStream.getFlushedBytes()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "fixed": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b024a63a49006f869d7af610ae0ff5810cdb7c47", "projectName": "Graylog2.graylog2-server", "bugType": "Same Function More Args", "problem": "         List<Notification> notifications = Lists.newArrayList();\n         for (NotificationSummaryResponse notification : r.notifications) {\n             try {\n                notifications.add(new Notification(notification));\n             } catch (IllegalArgumentException e) {\n                 LOG.warn(\"There is a notification type we can't handle: [{}]\", notification.type);\n             }", "fixed": "         List<Notification> notifications = Lists.newArrayList();\n         for (NotificationSummaryResponse notification : r.notifications) {\n             try {\n                notifications.add(new Notification(notification, nodeService));\n             } catch (IllegalArgumentException e) {\n                 LOG.warn(\"There is a notification type we can't handle: [{}]\", notification.type);\n             }", "sourceBeforeFix": "new Notification(notification)", "sourceAfterFix": "new Notification(notification,nodeService)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Sjms2EndpointBuilder\n             extends\n                 Sjms2EndpointConsumerBuilder, Sjms2EndpointProducerBuilder {\n         default AdvancedSjms2EndpointBuilder advanced() {", "fixed": "     \n    public interface Sjms2EndpointBuilder\n             extends\n                 Sjms2EndpointConsumerBuilder, Sjms2EndpointProducerBuilder {\n         default AdvancedSjms2EndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * base path is interpreted as a filename rather than a directory. E.g.:\n    *   getRelativeTo(\"../foo/bar.js\", \"baz/bam/qux.js\") --> \"baz/foo/bar.js\"\n    */\n  private String getRelativeTo(String relative, String base) {\n     return FileSystems.getDefault().getPath(base)\n         .resolveSibling(relative)\n         .normalize()", "fixed": "    * base path is interpreted as a filename rather than a directory. E.g.:\n    *   getRelativeTo(\"../foo/bar.js\", \"baz/bam/qux.js\") --> \"baz/foo/bar.js\"\n    */\n  private static String getRelativeTo(String relative, String base) {\n     return FileSystems.getDefault().getPath(base)\n         .resolveSibling(relative)\n         .normalize()", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "6b7a9eb44a285097eee57a08732ce247ca8e3bc3", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t@Override\n \tpublic <R> R accept(ExpressionVisitor<R> visitor) {\n\t\treturn visitor.visit(this);\n \t}\n \t@Override", "fixed": " \t@Override\n \tpublic <R> R accept(ExpressionVisitor<R> visitor) {\n\t\treturn visitor.visitTypeLiteral(this);\n \t}\n \t@Override", "sourceBeforeFix": "visitor.visit(this)", "sourceAfterFix": "visitor.visitTypeLiteral(this)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GangliaEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedGangliaEndpointBuilder advanced() {\n             return (AdvancedGangliaEndpointBuilder) this;\n         }", "fixed": "     \n    public interface GangliaEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedGangliaEndpointBuilder advanced() {\n             return (AdvancedGangliaEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6ec426667bbf19be4fca84eec48e03152e2cfffe", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Change Identifier Used", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6ed3c275fc3f67ecc814a1cb838915661f782f22", "projectName": "wildfly.wildfly", "bugType": "Change Caller in Function Call", "problem": "     @Test\n     public void testFormAuthSingleSignOn(@ArquillianResource URL baseURLNoAuth) throws Exception {\n         log.info(\"+++ testFormAuthSingleSignOn\");\n        SSOBaseCase.executeFormAuthSingleSignOnTest(baseURLNoAuth, baseURLNoAuth, log);\n     }\n     /**", "fixed": "     @Test\n     public void testFormAuthSingleSignOn(@ArquillianResource URL baseURLNoAuth) throws Exception {\n         log.info(\"+++ testFormAuthSingleSignOn\");\n        SSOTestBase.executeFormAuthSingleSignOnTest(baseURLNoAuth, baseURLNoAuth, log);\n     }\n     /**", "sourceBeforeFix": "SSOBaseCase.executeNoAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)", "sourceAfterFix": "SSOTestBase.executeNoAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)"}
{"fixCommitSHA1": "26604fde31e9f4586c18209285b7b5c3bc80d51e", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         }\n     }\n    public Set<PlanNodeId> getNoMoreSplits()\n     {\n         ImmutableSet.Builder<PlanNodeId> noMoreSplits = ImmutableSet.builder();\n         for (Entry<PlanNodeId, DriverSplitRunnerFactory> entry : partitionedDriverFactories.entrySet()) {", "fixed": "         }\n     }\n    public synchronized Set<PlanNodeId> getNoMoreSplits()\n     {\n         ImmutableSet.Builder<PlanNodeId> noMoreSplits = ImmutableSet.builder();\n         for (Entry<PlanNodeId, DriverSplitRunnerFactory> entry : partitionedDriverFactories.entrySet()) {", "sourceBeforeFix": "2", "sourceAfterFix": "34"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<NodeModel> getSelectedNodes() {\n         List<NodeModel> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<NodeModel> getSelectedNodes() {\n         List<NodeModel> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "34df86db858d325c9ae6951ae9e69c2fae914be7", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tfinal int row1 = Math.max(0, (int)(viewBounds.y / layerTileHeight));\r\n \t\tfinal int row2 = Math.min(layerHeight, (int)((viewBounds.y + viewBounds.height + layerTileHeight) / layerTileHeight));\r\n\t\tfloat y = row1 * layerTileHeight;\r\n \t\tfloat xStart = col1 * layerTileWidth;\r\n \t\tfinal float[] vertices = this.vertices;\r\n\t\tfor (int row = row1; row < row2; row++) {\r\n \t\t\tfloat x = xStart;\r\n \t\t\tfor (int col = col1; col < col2; col++) {\r\n \t\t\t\tfinal TiledMapTileLayer.Cell cell = layer.getCell(col, row);\r", "fixed": " \t\tfinal int row1 = Math.max(0, (int)(viewBounds.y / layerTileHeight));\r\n \t\tfinal int row2 = Math.min(layerHeight, (int)((viewBounds.y + viewBounds.height + layerTileHeight) / layerTileHeight));\r\n\t\tfloat y = row2 * layerTileHeight;\r\n \t\tfloat xStart = col1 * layerTileWidth;\r\n \t\tfinal float[] vertices = this.vertices;\r\n\t\tfor (int row = row2; row >= row1; row--) {\r\n \t\t\tfloat x = xStart;\r\n \t\t\tfor (int col = col1; col < col2; col++) {\r\n \t\t\t\tfinal TiledMapTileLayer.Cell cell = layer.getCell(col, row);\r", "sourceBeforeFix": "row1 * layerTileHeight", "sourceAfterFix": "row2 * layerTileHeight"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArraysEXT(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "fixed": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArrays(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "sourceBeforeFix": "GL.glDrawArraysEXT(mode,first,count)", "sourceAfterFix": "GL.glDrawArrays(mode,first,count)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mongo\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mongo\")"}
{"fixCommitSHA1": "7c0c5dae32338cc013c7107d41a3ecc8711e59a1", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     @Test\n     public void testDiscovery() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(3);\n         assertMockEndpointsSatisfied();", "fixed": "     @Test\n     public void testDiscovery() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(3);\n         assertMockEndpointsSatisfied();", "sourceBeforeFix": "mock.expectedMessageCount(3)", "sourceAfterFix": "mock.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastMultimapEndpointBuilder\n             extends\n                 HazelcastMultimapEndpointConsumerBuilder, HazelcastMultimapEndpointProducerBuilder {\n         default AdvancedHazelcastMultimapEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastMultimapEndpointBuilder\n             extends\n                 HazelcastMultimapEndpointConsumerBuilder, HazelcastMultimapEndpointProducerBuilder {\n         default AdvancedHazelcastMultimapEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d8d9e5711a908603f73f92872b127fe4d7ab4a15", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         MBeanServer mbeanServer = getMBeanServer();\n         Set<ObjectName> set = mbeanServer.queryNames(new ObjectName(\"*:type=services,*\"), null);\n        assertEquals(8, set.size());\n     }\n     @Override", "fixed": "         MBeanServer mbeanServer = getMBeanServer();\n         Set<ObjectName> set = mbeanServer.queryNames(new ObjectName(\"*:type=services,*\"), null);\n        assertEquals(9, set.size());\n     }\n     @Override", "sourceBeforeFix": "assertEquals(8,set.size())", "sourceAfterFix": "assertEquals(9,set.size())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSagaEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SagaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSagaEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SagaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e08f74620ba29298d59c97e7327cbe51fbd5b39e", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tprivate int pressedButton = -1;\r\n \tprivate int button;\r\n \tprivate boolean pressed, over, cancelled;\r\n\tprivate float visualPressedTime;\r\n \tprivate long tapCountInterval = (long)(0.4f * 1000000000l);\r\n \tprivate int tapCount;\r\n \tprivate long lastTapTime;\r", "fixed": " \tprivate int pressedButton = -1;\r\n \tprivate int button;\r\n \tprivate boolean pressed, over, cancelled;\r\n\tprivate long visualPressedTime;\r\n \tprivate long tapCountInterval = (long)(0.4f * 1000000000l);\r\n \tprivate int tapCount;\r\n \tprivate long lastTapTime;\r", "sourceBeforeFix": "TimeUtils.nanoTime()", "sourceAfterFix": "TimeUtils.millis()"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         appendToBody.ret();\n     }\n    private void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "fixed": "         appendToBody.ret();\n     }\n    private static void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "df0e14359abd61ff3a5713e5e12e116b3fb1c3ed", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " \tprivate static Log log = LogFactory.getLog(ModuleFactory.class);\n\tprotected static Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n\tprotected static Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n\tprotected static Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n\tprotected static Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n \tprivate static Map<String, Set<ModuleClassLoader>> providedPackages = new ConcurrentHashMap<String, Set<ModuleClassLoader>>();", "fixed": " \tprivate static Log log = LogFactory.getLog(ModuleFactory.class);\n\tprotected static volatile Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n\tprotected static volatile Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n\tprotected static volatile Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n\tprotected static volatile Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n \tprivate static Map<String, Set<ModuleClassLoader>> providedPackages = new ConcurrentHashMap<String, Set<ModuleClassLoader>>();", "sourceBeforeFix": "12", "sourceAfterFix": "76"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             return new ErrorCommand(ERROR_CLIENT);\n         }\n         if (st.hasMoreTokens()) {\n            flag = Integer.valueOf(st.nextToken());\n         } else {\n             return new ErrorCommand(ERROR_CLIENT);\n         }", "fixed": "             return new ErrorCommand(ERROR_CLIENT);\n         }\n         if (st.hasMoreTokens()) {\n            flag = Integer.parseInt(st.nextToken());\n         } else {\n             return new ErrorCommand(ERROR_CLIENT);\n         }", "sourceBeforeFix": "Integer.valueOf(st.nextToken())", "sourceAfterFix": "Integer.parseInt(st.nextToken())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "fixed": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "0592e84a3c07b4451e81d2eecc0c51af384858d2", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "     }\n     public static void gracefulShutdown(Executor executor, int timeout) {\n        if (!(executor instanceof ExecutorService) || isShutdown(executor)) {\n             return;\n         }\n         final ExecutorService es = (ExecutorService) executor;", "fixed": "     }\n     public static void gracefulShutdown(Executor executor, int timeout) {\n        if (!(executor instanceof ExecutorService) || isTerminated(executor)) {\n             return;\n         }\n         final ExecutorService es = (ExecutorService) executor;", "sourceBeforeFix": "((ExecutorService)executor).isShutdown()", "sourceAfterFix": "((ExecutorService)executor).isTerminated()"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\telse\nmod.getActivator().shutdown();\n \t\t\t}\n\t\t\tcatch (Throwable t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.shutdown() method\", t);\n \t\t\t}", "fixed": " \t\t\t\telse\nmod.getActivator().shutdown();\n \t\t\t}\n\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.shutdown() method\", t);\n \t\t\t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f33244ce792d0d1e420f55b222d56db0551d0bfb", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                 headers.put(name, value);\n             }\n         }\n        if (request.getMethod().equals(\"POST\") && request.getContentType() != null && request.getContentType().equals(\"application/x-www-form-urlencoded\")) {\n             String charset = request.getCharacterEncoding();\n             if (charset == null) {\n                 charset = \"UTF-8\";", "fixed": "                 headers.put(name, value);\n             }\n         }\n        if (request.getMethod().equals(\"POST\") && request.getContentType() != null && request.getContentType().startsWith(\"application/x-www-form-urlencoded\")) {\n             String charset = request.getCharacterEncoding();\n             if (charset == null) {\n                 charset = \"UTF-8\";", "sourceBeforeFix": "request.getContentType().equals(\"application/x-www-form-urlencoded\")", "sourceAfterFix": "request.getContentType().startsWith(\"application/x-www-form-urlencoded\")"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTextureEXT(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "fixed": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTexture(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)", "sourceAfterFix": "GL.glGenTextures(n,toBuffer(textures,offset),0)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJiraEndpointBuilder\n             extends\n                 AdvancedJiraEndpointConsumerBuilder, AdvancedJiraEndpointProducerBuilder {\n         default JiraEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJiraEndpointBuilder\n             extends\n                 AdvancedJiraEndpointConsumerBuilder, AdvancedJiraEndpointProducerBuilder {\n         default JiraEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "df2d6b370eaa8d29822b928b0f307cb6918dfe4f", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tload(CustomArgumentResolvers.class);\n \t\tRequestMappingHandlerAdapter adapter = this.context\n \t\t\t\t.getBean(RequestMappingHandlerAdapter.class);\n\t\tassertThat(adapter.getArgumentResolvers()).contains(\n \t\t\t\tthis.context.getBean(\"firstResolver\",\n \t\t\t\t\t\tHandlerMethodArgumentResolver.class),\n \t\t\t\tthis.context.getBean(\"secondResolver\",", "fixed": " \t\tload(CustomArgumentResolvers.class);\n \t\tRequestMappingHandlerAdapter adapter = this.context\n \t\t\t\t.getBean(RequestMappingHandlerAdapter.class);\n\t\tassertThat(adapter.getCustomArgumentResolvers()).contains(\n \t\t\t\tthis.context.getBean(\"firstResolver\",\n \t\t\t\t\t\tHandlerMethodArgumentResolver.class),\n \t\t\t\tthis.context.getBean(\"secondResolver\",", "sourceBeforeFix": "adapter.getArgumentResolvers()", "sourceAfterFix": "adapter.getCustomArgumentResolvers()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4d3362aa0a967882f43185cbee3ec82339106f6e", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                         from(\"direct:joinBrothers\").aggregator(header(TYPE_HEADER),\n                                 brothersAggregator);\n                agg.setBatchTimeout(1000L);\n                 agg.removeHeader(SURNAME_HEADER)\n                         .removeHeader(TYPE_HEADER)\n                         .to(\"mock:result\");", "fixed": "                         from(\"direct:joinBrothers\").aggregator(header(TYPE_HEADER),\n                                 brothersAggregator);\n                agg.setBatchTimeout(2000L);\n                 agg.removeHeader(SURNAME_HEADER)\n                         .removeHeader(TYPE_HEADER)\n                         .to(\"mock:result\");", "sourceBeforeFix": "agg.setBatchTimeout(1000L)", "sourceAfterFix": "agg.setBatchTimeout(2000L)"}
{"fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     }\n     protected void invalidateExpiredEntries() {\n        long now = System.nanoTime();\n         synchronized (messages) {\n             Set<String> inactiveClients = new HashSet<String>();", "fixed": "     }\n     protected void invalidateExpiredEntries() {\n        long now = System.currentTimeMillis();\n         synchronized (messages) {\n             Set<String> inactiveClients = new HashSet<String>();", "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "fixed": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "sourceBeforeFix": "logger.debug(\"Received MyQ  JSON: {}\",dataString)", "sourceAfterFix": "logger.trace(\"Received MyQ  JSON: {}\",dataString)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4446595a8d326298e7d3ceda6472c84ababfc2ff", "projectName": "eclipse.vert.x", "bugType": "Change Caller in Function Call", "problem": "                 if (resultHandler != null) {\n                   resultHandler.handle(Future.failedFuture(asyncResult.cause()));\n                 } else {\n                  log.error(ar.cause());\n                 }\n              }\n             });", "fixed": "                 if (resultHandler != null) {\n                   resultHandler.handle(Future.failedFuture(asyncResult.cause()));\n                 } else {\n                  log.error(asyncResult.cause());\n                 }\n              }\n             });", "sourceBeforeFix": "ar.cause()", "sourceAfterFix": "asyncResult.cause()"}
{"fixCommitSHA1": "ed1852a789daeef03ab260ef4f962bca9160d13e", "projectName": "iluwatar.java-design-patterns", "bugType": "Change Identifier Used", "problem": "    * @param testedPrototype  The tested prototype instance\n* @param expectedToString The expected {@link Prototype\n    */\n  public PrototypeTest(final Prototype testedPrototype, final String expectedToString) {\n     this.expectedToString = expectedToString;\n     this.testedPrototype = testedPrototype;\n   }", "fixed": "    * @param testedPrototype  The tested prototype instance\n* @param expectedToString The expected {@link Prototype\n    */\n  public PrototypeTest(final P testedPrototype, final String expectedToString) {\n     this.expectedToString = expectedToString;\n     this.testedPrototype = testedPrototype;\n   }", "sourceBeforeFix": "/**   * The tested prototype instance  */ private final Prototype testedPrototype; ", "sourceAfterFix": "/**   * The tested prototype instance  */ private final P testedPrototype; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9f1dcae64b97de86fccf34e7114790e22181de64", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "     } else if (Test.class.isAssignableFrom(testClass)) {\n      TestSuite testSuite = new TestSuite(testClass);\n       suite.addTest(testSuite);\n     } else {\n       throw new RuntimeException(\"Class \" + classname + \" is not a TestCase nor a TestSuite\");", "fixed": "     } else if (Test.class.isAssignableFrom(testClass)) {\n      ServletTestSuite testSuite = new ServletTestSuite(testClass);\n       suite.addTest(testSuite);\n     } else {\n       throw new RuntimeException(\"Class \" + classname + \" is not a TestCase nor a TestSuite\");", "sourceBeforeFix": "TestSuite testSuite=new TestSuite(testClass); ", "sourceAfterFix": "ServletTestSuite testSuite=new ServletTestSuite(testClass); "}
{"fixCommitSHA1": "eafa92d908c571ad0d3c9432583a318cc86733bb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n            assertEquals(resp.getHeader(\"target\"), target);\ntarget = \"http:\n             f = client.prepareGet(target).execute();", "fixed": "             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n            assertEquals(resp.getHeader(\"target\"), \"/\");\ntarget = \"http:\n             f = client.prepareGet(target).execute();", "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {", "sourceBeforeFix": "context.var(\"long\")", "sourceAfterFix": "context.var(\"long\",2)"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testSamplingFromExchangeStream() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "fixed": "     public void testSamplingFromExchangeStream() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "sourceBeforeFix": "mock.expectedMessageCount(10)", "sourceAfterFix": "mock.expectedMinimumMessageCount(10)"}
{"fixCommitSHA1": "d194da897cf8b34641f4fe5634dcf5af3b2544ed", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "         }\n     }\n    @Test(timeOut = 2000, expectedExceptions = { SSLHandshakeException.class } )\n     public void failInstantlyIfNotAllowedSelfSignedCertificate() throws Throwable {\n         try (AsyncHttpClient client = getAsyncHttpClient(new Builder().setRequestTimeout(2000).build())) {", "fixed": "         }\n     }\n    @Test(timeOut = 2000, expectedExceptions = { Exception.class } )\n     public void failInstantlyIfNotAllowedSelfSignedCertificate() throws Throwable {\n         try (AsyncHttpClient client = getAsyncHttpClient(new Builder().setRequestTimeout(2000).build())) {", "sourceBeforeFix": "SSLHandshakeException.class", "sourceAfterFix": "Exception.class"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page3 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 3, 2);\n         assertThat(page3.pagination().getCount()).isEqualTo(1);\n        assertThat(page3.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page3.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\");", "fixed": "         final PaginatedList<TestDTO> page3 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 3, 2);\n         assertThat(page3.pagination().getCount()).isEqualTo(1);\n        assertThat(page3.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page3.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\");", "sourceBeforeFix": "assertThat(page2.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page2.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "e9ee050bc804e672e21576bed722942973e6c3fb", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testConnectionFactoryRef() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n         ConnectionFactory connectionFactoryMock = Mockito.mock(ConnectionFactory.class);\n        registry.put(\"connectionFactoryMock\", connectionFactoryMock);\n         CamelContext defaultContext = new DefaultCamelContext(registry);", "fixed": "     public void testConnectionFactoryRef() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n         ConnectionFactory connectionFactoryMock = Mockito.mock(ConnectionFactory.class);\n        registry.bind(\"connectionFactoryMock\", connectionFactoryMock);\n         CamelContext defaultContext = new DefaultCamelContext(registry);", "sourceBeforeFix": "registry.put(\"connectionFactoryMock\",connectionFactoryMock)", "sourceAfterFix": "registry.bind(\"connectionFactoryMock\",connectionFactoryMock)"}
{"fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request);\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         BroadcasterFactory.getDefault().lookup(\"/*\").broadcast(\"yoBroadcast\").get();", "fixed": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         BroadcasterFactory.getDefault().lookup(\"/*\").broadcast(\"yoBroadcast\").get();", "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}
{"fixCommitSHA1": "b61375cec50559b26f5b22fb359e7f920a458dab", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         if (trustManager == null || (lastChain = trustManager.getLastFailedCertificateChain()) == null) {\n             return false;\n         }\n        error(\"Unable to connect due to unrecognised server certificate\");\n         for (Certificate current : lastChain) {\n             if (current instanceof X509Certificate) {\n                 X509Certificate x509Current = (X509Certificate) current;", "fixed": "         if (trustManager == null || (lastChain = trustManager.getLastFailedCertificateChain()) == null) {\n             return false;\n         }\n        printLine(\"Unable to connect due to unrecognised server certificate\");\n         for (Certificate current : lastChain) {\n             if (current instanceof X509Certificate) {\n                 X509Certificate x509Current = (X509Certificate) current;", "sourceBeforeFix": "error(\"Unable to connect due to unrecognised server certificate\")", "sourceAfterFix": "printLine(\"Unable to connect due to unrecognised server certificate\")"}
{"fixCommitSHA1": "46941b16a30e493238924701f938cbf3318eb355", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n    Preconditions.checkNotNull(manager);\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());", "fixed": "    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n    Preconditions.checkNotNull(manager, \"manager\");\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     }\n     compiler.setFeatureSet(compiler.getFeatureSet().without(MODULES));\n    GatherGettersAndSetterProperties.update(compiler, externs, root);\n   }\n   @Override", "fixed": "     }\n     compiler.setFeatureSet(compiler.getFeatureSet().without(MODULES));\n    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n   @Override", "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)", "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"}
{"fixCommitSHA1": "d365b8d6749db89c4accb4419be17293cb07cbda", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "     }\n     public static String getHost() {\n        return DatabaseDescriptor.getListenAddress().getHostName();\n     }\n     public static int getNativeTransportPort() {", "fixed": "     }\n     public static String getHost() {\n        return DatabaseDescriptor.getListenAddress().getHostAddress();\n     }\n     public static int getNativeTransportPort() {", "sourceBeforeFix": "DatabaseDescriptor.getListenAddress().getHostName()", "sourceAfterFix": "DatabaseDescriptor.getListenAddress().getHostAddress()"}
{"fixCommitSHA1": "c5edc0976145a61a5551053dfda8a8c3394100ee", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\tif (preferences.containsKey(name)) {\r\n \t\t\treturn preferences.get(name);\r\n \t\t} else {\r\n\t\t\tPreferences prefs = new LwjglPreferences(name);\r\n \t\t\tpreferences.put(name, prefs);\r\n \t\t\treturn prefs;\r\n \t\t}\r", "fixed": " \t\tif (preferences.containsKey(name)) {\r\n \t\t\treturn preferences.get(name);\r\n \t\t} else {\r\n\t\t\tPreferences prefs = new LwjglPreferences(name, \".prefs/\");\r\n \t\t\tpreferences.put(name, prefs);\r\n \t\t\treturn prefs;\r\n \t\t}\r", "sourceBeforeFix": "new LwjglPreferences(name)", "sourceAfterFix": "new LwjglPreferences(name,\".prefs/\")"}
{"fixCommitSHA1": "6031e948694c50252def3e1df5a65323567e03ed", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         super.compare(modelA, modelB);\n        assertRemoveSubsystemResources(servicesA);\n     }\n     @Override", "fixed": "         super.compare(modelA, modelB);\n        assertRemoveSubsystemResources(servicesB);\n     }\n     @Override", "sourceBeforeFix": "assertRemoveSubsystemResources(servicesA)", "sourceAfterFix": "assertRemoveSubsystemResources(servicesB)"}
{"fixCommitSHA1": "655c286b7a16a48581b82d63dc3e3b1690e5f1e1", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     System.setProperty(Constants.TACHYON_SECURITY_AUTHENTICATION,\n         AuthType.KERBEROS.getAuthName());\n    mThrown.expect(SaslException.class);\n     mThrown.expectMessage(\"Kerberos is not supported currently\");\n     mLocalTachyonCluster.start();", "fixed": "     System.setProperty(Constants.TACHYON_SECURITY_AUTHENTICATION,\n         AuthType.KERBEROS.getAuthName());\n    mThrown.expect(UnsupportedOperationException.class);\n     mThrown.expectMessage(\"Kerberos is not supported currently\");\n     mLocalTachyonCluster.start();", "sourceBeforeFix": "SaslException.class", "sourceAfterFix": "UnsupportedOperationException.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedQuickfixjEndpointBuilder\n             extends\n                 AdvancedQuickfixjEndpointConsumerBuilder, AdvancedQuickfixjEndpointProducerBuilder {\n         default QuickfixjEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedQuickfixjEndpointBuilder\n             extends\n                 AdvancedQuickfixjEndpointConsumerBuilder, AdvancedQuickfixjEndpointProducerBuilder {\n         default QuickfixjEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         c.add(new Cookie(\"yo\", \"man\"));\n         AtmosphereRequest request = new AtmosphereRequest.Builder().cookies(c).pathInfo(\"/a\").build();\n        processor.open(w, request);\n         r.get().getBroadcaster().broadcast(\"yo\").get();\n         assertNotNull(cValue.get());", "fixed": "         c.add(new Cookie(\"yo\", \"man\"));\n         AtmosphereRequest request = new AtmosphereRequest.Builder().cookies(c).pathInfo(\"/a\").build();\n        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         r.get().getBroadcaster().broadcast(\"yo\").get();\n         assertNotNull(cValue.get());", "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}
{"fixCommitSHA1": "20bc74dff0cf1e1834e99d1f2499a3f5e4c38a36", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "     }\n     for (AsyncCall call : toCleanup) {\n       call.setFailed(new CallTimeoutException(\"Call id=\" + call.id + \", waitTime=\"\n          + (currentTime - call.getRpcTimeout()) + \", rpcTimeout=\" + call.getRpcTimeout()));\n     }\n   }", "fixed": "     }\n     for (AsyncCall call : toCleanup) {\n       call.setFailed(new CallTimeoutException(\"Call id=\" + call.id + \", waitTime=\"\n          + (currentTime - call.getStartTime()) + \", rpcTimeout=\" + call.getRpcTimeout()));\n     }\n   }", "sourceBeforeFix": "call.getRpcTimeout()", "sourceAfterFix": "call.getStartTime()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * @param importFullPath\n          *        import full path variable.\n          */\n        public void setImportFullPath(String importFullPath) {\n             this.importFullPath = importFullPath;\n         }", "fixed": "          * @param importFullPath\n          *        import full path variable.\n          */\n        public final void setImportFullPath(String importFullPath) {\n             this.importFullPath = importFullPath;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "ef8206551c0ec51f70ec25e7371333dc5c8d99b1", "projectName": "junit-team.junit", "bugType": "Same Function Less Args", "problem": "         } catch (NoSuchMethodException e) {\n         }\n        return theClass.getConstructor(new Class[0]);\n     }\n     /**", "fixed": "         } catch (NoSuchMethodException e) {\n         }\n        return theClass.getConstructor();\n     }\n     /**", "sourceBeforeFix": "theClass.getConstructor(new Class[0])", "sourceAfterFix": "theClass.getConstructor()"}
{"fixCommitSHA1": "e007ca9e7d3692b65de28d1018d2d7f8228ed112", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         }\n         public void shutdown() {\n            channel.close();\n             bossGroup.shutdownGracefully();\n             workerGroup.shutdownGracefully();\n         }", "fixed": "         }\n         public void shutdown() {\n            channel.disconnect();\n             bossGroup.shutdownGracefully();\n             workerGroup.shutdownGracefully();\n         }", "sourceBeforeFix": "channel.close()", "sourceAfterFix": "channel.disconnect()"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "fixed": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")"}
{"fixCommitSHA1": "e5e1f1535e3cc33523f486ceee3630eaa8b42b93", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\tcase stringValue:\r\n \t\t\treturn stringValue.equalsIgnoreCase(\"true\");\r\n \t\tcase doubleValue:\r\n\t\t\treturn doubleValue == 0;\r\n \t\tcase longValue:\r\n\t\t\treturn longValue == 0;\r\n \t\tcase booleanValue:\r\n \t\t\treturn longValue != 0;\r\n \t\t}\r", "fixed": " \t\tcase stringValue:\r\n \t\t\treturn stringValue.equalsIgnoreCase(\"true\");\r\n \t\tcase doubleValue:\r\n\t\t\treturn doubleValue != 0;\r\n \t\tcase longValue:\r\n\t\t\treturn longValue != 0;\r\n \t\tcase booleanValue:\r\n \t\t\treturn longValue != 0;\r\n \t\t}\r", "sourceBeforeFix": "longValue == 0", "sourceAfterFix": "longValue != 0"}
{"fixCommitSHA1": "385b42d9fd284c23c48987dae294449740a70853", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tresponder.doRespond(call);\n \t\t\t\t} catch (InterruptedException e) {\nif (running) {\n\t\t\t\t\t\tLOG.info(getName() + \" caught: \", e);\n \t\t\t\t\t}\n \t\t\t\t} catch (Exception e) {\n\t\t\t\t\tLOG.info(getName() + \" caught: \", e);\n \t\t\t\t}\n \t\t\t}\n \t\t\tLOG.debug(getName() + \": exiting\");", "fixed": " \t\t\t\t\tresponder.doRespond(call);\n \t\t\t\t} catch (InterruptedException e) {\nif (running) {\n\t\t\t\t\t\tLOG.error(getName() + \" caught: \", e);\n \t\t\t\t\t}\n \t\t\t\t} catch (Exception e) {\n\t\t\t\t\tLOG.error(getName() + \" caught: \", e);\n \t\t\t\t}\n \t\t\t}\n \t\t\tLOG.debug(getName() + \": exiting\");", "sourceBeforeFix": "LOG.info(getName() + \" caught: \",e)", "sourceAfterFix": "LOG.error(getName() + \" caught: \",e)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "bd1e046a1936703ac62a693a0e44fbb88398a927", "projectName": "dropwizard.dropwizard", "bugType": "Change Modifier", "problem": "     }\n     @VisibleForTesting\n    static void setLogger(Logger newLogger) {\n         logger = newLogger;\n     }\n }", "fixed": "     }\n     @VisibleForTesting\n    static synchronized void setLogger(Logger newLogger) {\n         logger = newLogger;\n     }\n }", "sourceBeforeFix": "8", "sourceAfterFix": "40"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "9338e13c38d7b70e1a919c650ebea63f6f42beff", "projectName": "code4craft.webmagic", "bugType": "Change Identifier Used", "problem": "     public String select(String text) {\n         Document doc = Jsoup.parse(text);\n         Elements elements = doc.select(selectorText);\n        if (CollectionUtils.isNotEmpty(elements)) {\n             return null;\n         }\n         return elements.get(0).outerHtml();", "fixed": "     public String select(String text) {\n         Document doc = Jsoup.parse(text);\n         Elements elements = doc.select(selectorText);\n        if (CollectionUtils.isEmpty(elements)) {\n             return null;\n         }\n         return elements.get(0).outerHtml();", "sourceBeforeFix": "CollectionUtils.isNotEmpty(elements)", "sourceAfterFix": "CollectionUtils.isEmpty(elements)"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    */\n   public List<DependencyInfo> parseFileReader(String filePath, Reader reader) {\n     depInfos = Lists.newArrayList();\n    logger.info(\"Parsing Dep: \" + filePath);\n     doParse(filePath, reader);\n     return depInfos;\n   }", "fixed": "    */\n   public List<DependencyInfo> parseFileReader(String filePath, Reader reader) {\n     depInfos = Lists.newArrayList();\n    logger.fine(\"Parsing Dep: \" + filePath);\n     doParse(filePath, reader);\n     return depInfos;\n   }", "sourceBeforeFix": "logger.info(\"Parsing Dep: \" + filePath)", "sourceAfterFix": "logger.fine(\"Parsing Dep: \" + filePath)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "6ee3e54020bc8b28badd689fae4cd34948f78e7a", "projectName": "yusuke.twitter4j", "bugType": "Change Numeric Literal", "problem": "         assertEquals(1, medias.length);\n         MediaEntity media = medias[0];\n         assertEquals(\"pic.twitter.com/qbJx26r\", media.getDisplayURL());\nassertEquals(\"http:\n         assertEquals(76360760611180544L, media.getId());\nassertEquals(\"http:\nassertEquals(\"https:", "fixed": "         assertEquals(1, medias.length);\n         MediaEntity media = medias[0];\n         assertEquals(\"pic.twitter.com/qbJx26r\", media.getDisplayURL());\nassertEquals(\"https:\n         assertEquals(76360760611180544L, media.getId());\nassertEquals(\"http:\nassertEquals(\"https:", "sourceBeforeFix": "twitter1.getRetweeterIds(18594701629l,-1)", "sourceAfterFix": "twitter1.getRetweeterIds(1021608606934822912L,-1)"}
{"fixCommitSHA1": "ad3c1adb1c911a348c35bec42a1ec102de7dfdde", "projectName": "Alluxio.alluxio", "bugType": "Change Boolean Literal", "problem": "   }\n   /**\n   * Convenience method for delete with recursive set. This is the same as calling delete(file,\n   * true).\n    *\n    * @param file the handler for the file to delete recursively\n    * @throws FileDoesNotExistException if the file does not exist in Tachyon space", "fixed": "   }\n   /**\n   * Convenience method for delete without recursive set. This is the same as calling delete(file,\n   * false).\n    *\n    * @param file the handler for the file to delete recursively\n    * @throws FileDoesNotExistException if the file does not exist in Tachyon space", "sourceBeforeFix": "setPin(file,false)", "sourceAfterFix": "setPin(file,true)"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(InstantiationException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(InstantiationException.class))\n         );\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "36861f2d8c45c809ce7d13944320bb144dbc6757", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tif (tiled != null) return tiled;\r\n \t\tDrawable drawable = optional(name, Drawable.class);\r\n\t\tif (tiled != null) {\r\n \t\t\tif (!(drawable instanceof TiledDrawable)) {\r\n \t\t\t\tthrow new GdxRuntimeException(\"Drawable found but is not a TiledDrawable: \" + name + \", \"\r\n \t\t\t\t\t+ drawable.getClass().getName());\r\n \t\t\t}\r\n\t\t\treturn tiled;\r\n \t\t}\r\n \t\ttiled = new TiledDrawable(getRegion(name));\r", "fixed": " \t\tif (tiled != null) return tiled;\r\n \t\tDrawable drawable = optional(name, Drawable.class);\r\n\t\tif (drawable != null) {\r\n \t\t\tif (!(drawable instanceof TiledDrawable)) {\r\n \t\t\t\tthrow new GdxRuntimeException(\"Drawable found but is not a TiledDrawable: \" + name + \", \"\r\n \t\t\t\t\t+ drawable.getClass().getName());\r\n \t\t\t}\r\n\t\t\treturn (TiledDrawable)drawable;\r\n \t\t}\r\n \t\ttiled = new TiledDrawable(getRegion(name));\r", "sourceBeforeFix": "tiled != null", "sourceAfterFix": "drawable != null"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EhcacheEndpointBuilder\n             extends\n                 EhcacheEndpointConsumerBuilder, EhcacheEndpointProducerBuilder {\n         default AdvancedEhcacheEndpointBuilder advanced() {", "fixed": "     \n    public interface EhcacheEndpointBuilder\n             extends\n                 EhcacheEndpointConsumerBuilder, EhcacheEndpointProducerBuilder {\n         default AdvancedEhcacheEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean touchUp (int screenX, int screenY, int pointer, int button) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].touchUp(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean touchUp (int screenX, int screenY, int pointer, int button) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).touchUp(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "737a3508546a125e900be9d1bb123952c0a81f20", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": " \npublic class UdtChannelOption<T> extends ChannelOption<T> {\n     /**\n* See {@link OptionUDT", "fixed": " \npublic final class UdtChannelOption<T> extends ChannelOption<T> {\n     /**\n* See {@link OptionUDT", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "0c04572d3c4dfd164456a085aaa9782541c8d718", "projectName": "openhab.openhab", "bugType": "Same Function More Args", "problem": " \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "fixed": " \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp, serviceName);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "sourceBeforeFix": "historicState(item,timestamp)", "sourceAfterFix": "historicState(item,timestamp,serviceName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "66181be1c62816d916c9301dddd2c8c5bc7be1dc", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "       @JsonProperty(\"function\") final String function\n   )\n   {\n    Preconditions.checkNotNull(name, \"Must have a valid, non-null aggregator name\");\n     Preconditions.checkNotNull(fieldNames, \"Must have a valid, non-null fieldNames\");\n    Preconditions.checkNotNull(function, \"Must have a valid, non-null fnAggregate\");\n     this.name = name;\n     this.fieldNames = fieldNames;", "fixed": "       @JsonProperty(\"function\") final String function\n   )\n   {\n    Preconditions.checkNotNull(name, \"Must have a valid, non-null post-aggregator name\");\n     Preconditions.checkNotNull(fieldNames, \"Must have a valid, non-null fieldNames\");\n    Preconditions.checkNotNull(function, \"Must have a valid, non-null function\");\n     this.name = name;\n     this.fieldNames = fieldNames;", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "64bc69ef4c547771f44f6b6b103cda7be2f0922b", "projectName": "dropwizard.metrics", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic SortedMap<String, Histogram> getHistograms(MetricFilter filter) {\n\t\treturn adaptMetrics(Histogram.class, reg.getCounters(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Meter> getMeters() {", "fixed": " \t}\n \tpublic SortedMap<String, Histogram> getHistograms(MetricFilter filter) {\n\t\treturn adaptMetrics(Histogram.class, reg.getHistograms(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Meter> getMeters() {", "sourceBeforeFix": "reg.getCounters(transformFilter(filter))", "sourceAfterFix": "reg.getTimers(transformFilter(filter))"}
{"fixCommitSHA1": "6fe8de61d192f14262b455497dc5cc174d88659c", "projectName": "naver.pinpoint", "bugType": "Change Numeric Literal", "problem": "         LinkDataDuplexMap select = bfsLinkSelector.select(APP_A, range, option);\n        Assert.assertEquals(select.size(), 1);\n     }", "fixed": "         LinkDataDuplexMap select = bfsLinkSelector.select(APP_A, range, option);\n        Assert.assertEquals(select.size(), 0);\n     }", "sourceBeforeFix": "Assert.assertEquals(select.size(),1)", "sourceAfterFix": "Assert.assertEquals(select.size(),0)"}
{"fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         String annotation)\n     {\n         if (ast == null) {\n            throw new NullPointerException(\"the ast is null\");\n         }\n         if (annotation == null) {\n            throw new NullPointerException(\"the annotation is null\");\n         }\n         if (StringUtils.isBlank(annotation)) {", "fixed": "         String annotation)\n     {\n         if (ast == null) {\n            throw new IllegalArgumentException(\"the ast is null\");\n         }\n         if (annotation == null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n         }\n         if (StringUtils.isBlank(annotation)) {", "sourceBeforeFix": "new NullPointerException(\"the ast is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the ast is null\")"}
{"fixCommitSHA1": "5ac2955ff4451c72db1e157dda76786f30511679", "projectName": "eclipse.vert.x", "bugType": "Change Numeric Literal", "problem": "     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n    int trafficClass = TestUtils.randomByte() + 127;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();", "fixed": "     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n    int trafficClass = TestUtils.randomByte() + 128;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();", "sourceBeforeFix": "TestUtils.randomByte() + 127", "sourceAfterFix": "TestUtils.randomByte() + 128"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f4463337af407322d315b72b0cda79a1c484911e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": " @Category(CommonCriteria.class)\n public class AuthenticationTestCase {\n    private static final String SERVER_HOST_PORT = TestSuiteEnvironment.getServerAddress() + \":\" + TestSuiteEnvironment.getHttpPort();\nprivate static final String WAR_URL = \"http:\n     /*", "fixed": " @Category(CommonCriteria.class)\n public class AuthenticationTestCase {\n    private static final String SERVER_HOST_PORT = TestSuiteEnvironment.getHttpAddress() + \":\" + TestSuiteEnvironment.getHttpPort();\nprivate static final String WAR_URL = \"http:\n     /*", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getHttpAddress()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JooqEndpointBuilder\n             extends\n                 JooqEndpointConsumerBuilder, JooqEndpointProducerBuilder {\n         default AdvancedJooqEndpointBuilder advanced() {", "fixed": "     \n    public interface JooqEndpointBuilder\n             extends\n                 JooqEndpointConsumerBuilder, JooqEndpointProducerBuilder {\n         default AdvancedJooqEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0eea03987839ba88fac6015355a2b067d6cfe436", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": " @RunWith(PowerMockRunner.class)\n @PrepareForTest(Permission.class)\npublic class CreateOptionsTest {\n   ", "fixed": " @RunWith(PowerMockRunner.class)\n @PrepareForTest(Permission.class)\npublic final class CreateOptionsTest {\n   ", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedOlingo4EndpointBuilder\n             extends\n                 AdvancedOlingo4EndpointConsumerBuilder, AdvancedOlingo4EndpointProducerBuilder {\n         default Olingo4EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedOlingo4EndpointBuilder\n             extends\n                 AdvancedOlingo4EndpointConsumerBuilder, AdvancedOlingo4EndpointProducerBuilder {\n         default Olingo4EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "fixed": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CxfRsEndpointBuilder\n             extends\n                 CxfRsEndpointConsumerBuilder, CxfRsEndpointProducerBuilder {\n         default AdvancedCxfRsEndpointBuilder advanced() {", "fixed": "     \n    public interface CxfRsEndpointBuilder\n             extends\n                 CxfRsEndpointConsumerBuilder, CxfRsEndpointProducerBuilder {\n         default AdvancedCxfRsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CaffeineCacheEndpointBuilder\n             extends\n                 CaffeineCacheEndpointConsumerBuilder, CaffeineCacheEndpointProducerBuilder {\n         default AdvancedCaffeineCacheEndpointBuilder advanced() {", "fixed": "     \n    public interface CaffeineCacheEndpointBuilder\n             extends\n                 CaffeineCacheEndpointConsumerBuilder, CaffeineCacheEndpointProducerBuilder {\n         default AdvancedCaffeineCacheEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "852c8b720dd810c699d6303d0470efa246c84d26", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"hello\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"hello\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForRoles\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRoles\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "ad392b3d40e7e7299f06b969c5f4a90ba90ed2fa", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       case COMPLETE_STORE:\n         return entry.getCompleteStore();\n       case CREATE_STORE:\n        return entry.getCompleteStore();\n       case DELETE_STORE:\n         return entry.getDeleteStore();\n       case MERGE_STORE:", "fixed": "       case COMPLETE_STORE:\n         return entry.getCompleteStore();\n       case CREATE_STORE:\n        return entry.getCreateStore();\n       case DELETE_STORE:\n         return entry.getDeleteStore();\n       case MERGE_STORE:", "sourceBeforeFix": "entry.getCompleteStore()", "sourceAfterFix": "entry.getCreateStore()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastMapEndpointBuilder\n             extends\n                 HazelcastMapEndpointConsumerBuilder, HazelcastMapEndpointProducerBuilder {\n         default AdvancedHazelcastMapEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastMapEndpointBuilder\n             extends\n                 HazelcastMapEndpointConsumerBuilder, HazelcastMapEndpointProducerBuilder {\n         default AdvancedHazelcastMapEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6bd0ee7bd9734e71b9ef61da7c0417770d9d877b", "projectName": "hazelcast.hazelcast", "bugType": "More Specific If", "problem": "         }\n         boolean returnValue = tcpIpEndpointManager.registerConnection(remoteEndpoint, connection);\n        if (remoteAddressAliases != null) {\n             for (Address remoteAddressAlias : remoteAddressAliases) {\n                 if (logger.isLoggable(Level.FINEST)) {\n                     logger.finest(\"Registering connection \" + connection + \" to address alias \" + remoteAddressAlias);", "fixed": "         }\n         boolean returnValue = tcpIpEndpointManager.registerConnection(remoteEndpoint, connection);\n        if (remoteAddressAliases != null && returnValue) {\n             for (Address remoteAddressAlias : remoteAddressAliases) {\n                 if (logger.isLoggable(Level.FINEST)) {\n                     logger.finest(\"Registering connection \" + connection + \" to address alias \" + remoteAddressAlias);", "sourceBeforeFix": "remoteAddressAliases != null", "sourceAfterFix": "remoteAddressAliases != null && returnValue"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "d0cb778dc8811906c7e7b5a20e08bd70f49dd163", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     AlluxioURI src = new AlluxioURI(\"/file\");\n     AlluxioURI dst = new AlluxioURI(\"/file2\");\n     RenameOptions renameOptions = RenameOptions.defaults();\n    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src, dst);\n     try {\n       mFileSystem.rename(src, dst, renameOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);", "fixed": "     AlluxioURI src = new AlluxioURI(\"/file\");\n     AlluxioURI dst = new AlluxioURI(\"/file2\");\n     RenameOptions renameOptions = RenameOptions.defaults();\n    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src, dst, renameOptions);\n     try {\n       mFileSystem.rename(src, dst, renameOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);", "sourceBeforeFix": "Mockito.doNothing().when(mFileSystemMasterClient).rename(src,dst)", "sourceAfterFix": "Mockito.doNothing().when(mFileSystemMasterClient).rename(src,dst,renameOptions)"}
{"fixCommitSHA1": "f5a277900f4bc700a17d349aa9f30af3ddca94fe", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "                         WebSocketEventListener.class.cast(l).onMessage(event);\n                         break;\n                     case HANDSHAKE:\n                        WebSocketEventListener.class.cast(l).onMessage(event);\n                         break;\n                     case CLOSE:\n                        WebSocketEventListener.class.cast(l).onMessage(event);\n                         break;\n                 }\n             }", "fixed": "                         WebSocketEventListener.class.cast(l).onMessage(event);\n                         break;\n                     case HANDSHAKE:\n                        WebSocketEventListener.class.cast(l).onHandshake(event);\n                         break;\n                     case CLOSE:\n                        WebSocketEventListener.class.cast(l).onClose(event);\n                         break;\n                 }\n             }", "sourceBeforeFix": "WebSocketEventListener.class.cast(l).onMessage(event)", "sourceAfterFix": "WebSocketEventListener.class.cast(l).onClose(event)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5f78aa9c52a2f28419a5fa646ab28ee273e17e6a", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public Connection getOrConnect(Address address, boolean silent) {\n         return getOrConnect(address);\n     }\n    public void block(Address address) {\n         blockedAddresses.add(address);\n         Connection connection = getConnection(address);\n         if (connection != null) {", "fixed": "     }\n     @Override\n    public synchronized Connection getOrConnect(Address address, boolean silent) {\n         return getOrConnect(address);\n     }\n    public synchronized void block(Address address) {\n         blockedAddresses.add(address);\n         Connection connection = getConnection(address);\n         if (connection != null) {", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Before\n     @Override\n     public void setUp() throws Exception {\n        nagios = new NagiosNscaStub(25667, \"password\");\n         nagios.start();\n         super.setUp();", "fixed": "     @Before\n     @Override\n     public void setUp() throws Exception {\n        nagios = new NagiosNscaStub(25669, \"password\");\n         nagios.start();\n         super.setUp();", "sourceBeforeFix": "new NagiosNscaStub(25667,\"password\")", "sourceAfterFix": "new NagiosNscaStub(25669,\"password\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AsteriskEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAsteriskEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AsteriskEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAsteriskEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a9609b959492ff428061f06faff767fa9cbe2263", "projectName": "thinkaurelius.titan", "bugType": "Less Specific If", "problem": "         final List configuredScriptEngineNames = properties.getConfiguredScriptEngines();\n        if (configuredScriptEngineNames == null) {\n             log.info(\"No configuration for <script-engines>.  Using gremlin-groovy by default.\");\n             EngineController.configure(scriptEngineThreshold, scriptEngineInitFile);", "fixed": "         final List configuredScriptEngineNames = properties.getConfiguredScriptEngines();\n        if (configuredScriptEngineNames == null || configuredScriptEngineNames.isEmpty()) {\n             log.info(\"No configuration for <script-engines>.  Using gremlin-groovy by default.\");\n             EngineController.configure(scriptEngineThreshold, scriptEngineInitFile);", "sourceBeforeFix": "configuredScriptEngineNames == null", "sourceAfterFix": "configuredScriptEngineNames == null || configuredScriptEngineNames.isEmpty()"}
{"fixCommitSHA1": "44fb6541bca9101e1144c25fc5561ebf8b06dfa0", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Less Specific If", "problem": "         int port = p;\n         if (port == -1) {\n             final String protocol = uri.getScheme().toLowerCase();\n            if (\"http\".equals(protocol)) {\n                 port = 80;\n            } else if (\"https\".equals(protocol)) {\n                 port = 443;\n             } else {\n                 throw new IllegalArgumentException(\"Unknown protocol: \" + protocol);", "fixed": "         int port = p;\n         if (port == -1) {\n             final String protocol = uri.getScheme().toLowerCase();\n            if (\"http\".equals(protocol) || \"ws\".equals(protocol)) {\n                 port = 80;\n            } else if (\"https\".equals(protocol) || \"wss\".equals(protocol)) {\n                 port = 443;\n             } else {\n                 throw new IllegalArgumentException(\"Unknown protocol: \" + protocol);", "sourceBeforeFix": "\"http\".equals(protocol)", "sourceAfterFix": "\"http\".equals(protocol) || \"ws\".equals(protocol)"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\tif (!Context.isRefreshingContext())\n \t\t\t\tmementos.put(key, Context.getSchedulerService().saveToMemento());\n \t\t}\n\t\tcatch (Throwable t) {\n \t\t}\n \t}", "fixed": " \t\t\tif (!Context.isRefreshingContext())\n \t\t\t\tmementos.put(key, Context.getSchedulerService().saveToMemento());\n \t\t}\n\t\tcatch (Exception t) {\n \t\t}\n \t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "0ffdc3246d1bd202e6cef4b486ffb4e9257b0311", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "      * @param task the task to add.\n      * @throws NullPointerException if task is null\n      */\n    public final void addTaskAndWakeup(Runnable task) {\n         taskQueue.add(task);\n         if (!selectNow) {\n             selector.wakeup();", "fixed": "      * @param task the task to add.\n      * @throws NullPointerException if task is null\n      */\n    public void addTaskAndWakeup(Runnable task) {\n         taskQueue.add(task);\n         if (!selectNow) {\n             selector.wakeup();", "sourceBeforeFix": "target.addTask(task)", "sourceAfterFix": "target.addTaskAndWakeup(task)"}
{"fixCommitSHA1": "ea323fc628b5c5f5fb0a954650e96be6adc32858", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\tdouble temp = ParseUtils.parseTemperature(S300TH_DATA_1);\n \t\tAssert.assertEquals(23.2, temp, 0.01);\n\t\tdouble humidity = ParseUtils.parseHumidity(S300TH_DATA_1);\n \t\tAssert.assertEquals(50.8, humidity, 0.01);\n \t\tString address = ParseUtils.parseS300THAddress(S300TH_DATA_1);", "fixed": " \t\tdouble temp = ParseUtils.parseTemperature(S300TH_DATA_1);\n \t\tAssert.assertEquals(23.2, temp, 0.01);\n\t\tdouble humidity = ParseUtils.parseS300THHumidity(S300TH_DATA_1);\n \t\tAssert.assertEquals(50.8, humidity, 0.01);\n \t\tString address = ParseUtils.parseS300THAddress(S300TH_DATA_1);", "sourceBeforeFix": "ParseUtils.parseHumidity(S300TH_DATA_1)", "sourceAfterFix": "ParseUtils.parseS300THHumidity(S300TH_DATA_1)"}
{"fixCommitSHA1": "d5f8dbfc487cc66a50f7bfbbf03b4a0a8f9cdec3", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                         throw e;\n                     }\n                 }\n                if (attempt >= maxRetryAttempts || Duration.nanosSince(startTime).compareTo(maxRetryTime) >= 0) {\n                     throw e;\n                 }\n                 log.debug(\"Failed on executing %s with attempt %d, will retry. Exception: %s\", callableName, attempt, e.getMessage());", "fixed": "                         throw e;\n                     }\n                 }\n                if (attempt >= maxAttempts || Duration.nanosSince(startTime).compareTo(maxRetryTime) >= 0) {\n                     throw e;\n                 }\n                 log.debug(\"Failed on executing %s with attempt %d, will retry. Exception: %s\", callableName, attempt, e.getMessage());", "sourceBeforeFix": "new RetryDriver(maxRetryAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptions)", "sourceAfterFix": "new RetryDriver(maxAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptions)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8659914038f88e67dc9bd80c4e0c57bb341e07c0", "projectName": "perwendel.spark", "bugType": "Change Modifier", "problem": "      *\n      * @param page the custom 500 internal server error page.\n      */\n    public void internalServerError(String page) {\n         CustomErrorPages.add(500, page);\n     }", "fixed": "      *\n      * @param page the custom 500 internal server error page.\n      */\n    public synchronized void internalServerError(String page) {\n         CustomErrorPages.add(500, page);\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JdbcEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedJdbcEndpointBuilder advanced() {\n             return (AdvancedJdbcEndpointBuilder) this;\n         }", "fixed": "     \n    public interface JdbcEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedJdbcEndpointBuilder advanced() {\n             return (AdvancedJdbcEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "453488cff2a54f32c573589f1cfc47bbf30ebe09", "projectName": "apache.hadoop", "bugType": "Same Function More Args", "problem": "         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     if (yarnSiteXMLInputStream != null) {\n      this.conf.addResource(yarnSiteXMLInputStream);\n     }\n     validateConfigs(this.conf);", "fixed": "         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     if (yarnSiteXMLInputStream != null) {\n      this.conf.addResource(yarnSiteXMLInputStream,\n          YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     }\n     validateConfigs(this.conf);", "sourceBeforeFix": "this.conf.addResource(coreSiteXMLInputStream)", "sourceAfterFix": "this.conf.addResource(coreSiteXMLInputStream,YarnConfiguration.CORE_SITE_CONFIGURATION_FILE)"}
{"fixCommitSHA1": "e0aff862bb608004841da3487d94aecb45964e17", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = FILES_BYTES * 1000L / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }", "fixed": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = FILES_BYTES * 1000.0 / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }", "sourceBeforeFix": "1000L * FILES_BYTES", "sourceAfterFix": "1000.0 * FILES_BYTES"}
{"fixCommitSHA1": "11fc33161f47544de5d2c50444340438f09a5b82", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t\t}\r\n \t\tpublic boolean hasChildRecursive (String name) {\r\n\t\t\tif (attributes == null) return false;\r\n \t\t\treturn getChildByNameRecursive(name) != null;\r\n \t\t}\r", "fixed": " \t\t}\r\n \t\tpublic boolean hasChildRecursive (String name) {\r\n\t\t\tif (children == null) return false;\r\n \t\t\treturn getChildByNameRecursive(name) != null;\r\n \t\t}\r", "sourceBeforeFix": "attributes == null", "sourceAfterFix": "children == null"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void closeRegion(final String regionname, final String serverName)\n   throws IOException {\n    closeRegion(Bytes.toBytesBinary(regionname), serverName);\n   }\n   /**", "fixed": "    */\n   public void closeRegion(final String regionname, final String serverName)\n   throws IOException {\n    closeRegion(Bytes.toBytes(regionname), serverName);\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RestletEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRestletEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface RestletEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRestletEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "885f7d1e71f16d5051ea7a71fb522ebf85821e97", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                             }\n                         });\n                        configuration.addClientInterceptor(method, factory, InterceptorOrder.View.COMPONENT_DISPATCHER);\n                     }\n                 }", "fixed": "                             }\n                         });\n                        configuration.addViewInterceptor(method, factory, InterceptorOrder.View.COMPONENT_DISPATCHER);\n                     }\n                 }", "sourceBeforeFix": "configuration.addClientInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)", "sourceAfterFix": "configuration.addViewInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)"}
{"fixCommitSHA1": "8e5020ce3091e4fb07d86e4b935afec5ec1c5815", "projectName": "Alluxio.alluxio", "bugType": "Change Binary Operator", "problem": "     if (tempAddress.contains(Constants.PATH_SEPARATOR)) {\n       masterAddress = tempAddress.substring(0, tempAddress.indexOf(Constants.PATH_SEPARATOR));\n     }\n    Preconditions.checkArgument(masterAddress.split(\":\").length != 2, \"Illegal Tachyon Master Address: \" + tachyonPath);\n     String masterHost = masterAddress.split(\":\")[0];\n     int masterPort = Integer.parseInt(masterAddress.split(\":\")[1]);", "fixed": "     if (tempAddress.contains(Constants.PATH_SEPARATOR)) {\n       masterAddress = tempAddress.substring(0, tempAddress.indexOf(Constants.PATH_SEPARATOR));\n     }\n    Preconditions.checkArgument(masterAddress.split(\":\").length == 2, \"Illegal Tachyon Master Address: \" + tachyonPath);\n     String masterHost = masterAddress.split(\":\")[0];\n     int masterPort = Integer.parseInt(masterAddress.split(\":\")[1]);", "sourceBeforeFix": "masterAddress.split(\":\").length != 2", "sourceAfterFix": "masterAddress.split(\":\").length == 2"}
{"fixCommitSHA1": "9cbe9bcbaa33825a866bdc8a9bf92f270723d423", "projectName": "apache.hadoop", "bugType": "Same Function More Args", "problem": "       } catch (IOException e1) {\n         LOG.error(\"Cannot create writer for app \" + this.applicationId\n            + \". Skip log upload this time. \");\n         return;\n       }", "fixed": "       } catch (IOException e1) {\n         LOG.error(\"Cannot create writer for app \" + this.applicationId\n            + \". Skip log upload this time. \", e1);\n         return;\n       }", "sourceBeforeFix": "LOG.error(\"Cannot create writer for app \" + this.applicationId + \". Skip log upload this time. \")", "sourceAfterFix": "LOG.error(\"Cannot create writer for app \" + this.applicationId + \". Skip log upload this time. \",e1)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "3b9698ecac75326d0cd88929189eaed782b9b8b2", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "       + \"intermediate-data-encryption.enable\";\n   @Private\n  public static final Boolean DEFAULT_YARN_INTERMEDIATE_DATA_ENCRYPTION = false;\n   \n   public static final String RM_ADMIN_ADDRESS = ", "fixed": "       + \"intermediate-data-encryption.enable\";\n   @Private\n  public static final boolean DEFAULT_YARN_INTERMEDIATE_DATA_ENCRYPTION = false;\n   \n   public static final String RM_ADMIN_ADDRESS = ", "sourceBeforeFix": "9", "sourceAfterFix": "25"}
{"fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t    \t\t\t\tsendAllowed.release();\n \t    \t\t\t}\n \t\t\t\t\trecvMessage = recvQueue.take();\n\t\t\t\t\tlogger.trace(\"Receive queue TAKE: Length={}\", recvQueue.size());\n \t\t\t\t\tlogger.debug(\"Process Message = {}\", SerialMessage.bb2hex(recvMessage.getMessageBuffer()));\n \t\t    \t\thandleIncomingMessage(recvMessage);", "fixed": " \t    \t\t\t\tsendAllowed.release();\n \t    \t\t\t}\n \t\t\t\t\trecvMessage = recvQueue.take();\n\t\t\t\t\tlogger.debug(\"Receive queue TAKE: Length={}\", recvQueue.size());\n \t\t\t\t\tlogger.debug(\"Process Message = {}\", SerialMessage.bb2hex(recvMessage.getMessageBuffer()));\n \t\t    \t\thandleIncomingMessage(recvMessage);", "sourceBeforeFix": "logger.trace(\"Receive queue TAKE: Length={}\",recvQueue.size())", "sourceAfterFix": "logger.debug(\"Receive queue TAKE: Length={}\",recvQueue.size())"}
{"fixCommitSHA1": "0e056863e4b10421a51c9276f21ad6fdc4af9ff5", "projectName": "druid-io.druid", "bugType": "Change Binary Operator", "problem": "         private long checkQueryTimeout()\n         {\n           long timeLeft = timeoutAt - System.currentTimeMillis();\n          if (timeLeft >= 0) {\n             String msg = StringUtils.safeFormat(\"Query[%s] url[%s] timed out.\", query.getId(), url);\n             setupResponseReadFailure(msg, null);\n             throw new RE(msg);", "fixed": "         private long checkQueryTimeout()\n         {\n           long timeLeft = timeoutAt - System.currentTimeMillis();\n          if (timeLeft <= 0) {\n             String msg = StringUtils.safeFormat(\"Query[%s] url[%s] timed out.\", query.getId(), url);\n             setupResponseReadFailure(msg, null);\n             throw new RE(msg);", "sourceBeforeFix": "timeLeft >= 0", "sourceAfterFix": "timeLeft <= 0"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    private static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,value)"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n     final Map<String, Integer> cssNames;", "fixed": "   \n  public static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n     final Map<String, Integer> cssNames;", "sourceBeforeFix": "1024", "sourceAfterFix": "1028"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "efa5b54542e6ccd1357433f3ae340e94efdd9f6e", "projectName": "apache.hive", "bugType": "Same Function Swap Args", "problem": "         if (!listeners.isEmpty()) {\n           MetaStoreListenerNotifier.notifyEvent(listeners,\n                                                 EventType.DROP_TABLE,\n                                                new DropTableEvent(tbl, deleteData, success, this),\n                                                 envContext,\n                                                 transactionalListenerResponses, ms);\n         }", "fixed": "         if (!listeners.isEmpty()) {\n           MetaStoreListenerNotifier.notifyEvent(listeners,\n                                                 EventType.DROP_TABLE,\n                                                new DropTableEvent(tbl, success, deleteData, this),\n                                                 envContext,\n                                                 transactionalListenerResponses, ms);\n         }", "sourceBeforeFix": "new DropTableEvent(tbl,deleteData,true,this)", "sourceAfterFix": "new DropTableEvent(tbl,true,deleteData,this)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FopEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedFopEndpointBuilder advanced() {\n             return (AdvancedFopEndpointBuilder) this;\n         }", "fixed": "     \n    public interface FopEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedFopEndpointBuilder advanced() {\n             return (AdvancedFopEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cf2a9d3aefba1c7d6d4ad399e762edf7a6f6e111", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Identifier Used", "problem": "             connection.rollback();\n          }\n         setNetworkTimeout(connection, networkTimeout);\n          return true;\n       }", "fixed": "             connection.rollback();\n          }\n         setNetworkTimeout(connection, originalTimeout);\n          return true;\n       }", "sourceBeforeFix": "setNetworkTimeout(connection,networkTimeout)", "sourceAfterFix": "setNetworkTimeout(connection,originalTimeout)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "cadd7cc57026a1f9991d2d90270a7aacbd0a7aa2", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         }, executor);\n     }\n    private void sendDelete()\n     {\n         HttpResponseFuture<StatusResponse> resultFuture = httpClient.executeAsync(prepareDelete().setUri(location).build(), createStatusResponseHandler());\n         future = resultFuture;", "fixed": "         }, executor);\n     }\n    private synchronized void sendDelete()\n     {\n         HttpResponseFuture<StatusResponse> resultFuture = httpClient.executeAsync(prepareDelete().setUri(location).build(), createStatusResponseHandler());\n         future = resultFuture;", "sourceBeforeFix": "2", "sourceAfterFix": "34"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastAtomicnumberEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastAtomicnumberEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastAtomicnumberEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastAtomicnumberEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7c7309b5fb6276e4098921915a8e0c39a5cd3450", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);", "fixed": "     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n    RetryHandlingBlockMasterClient masterClientMock =\n        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);", "sourceBeforeFix": "BlockMasterClient.class", "sourceAfterFix": "RetryHandlingBlockMasterClient.class"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bb4b8b95e12f23f6951fdfdd903120902f0553c9", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     public List<Partition> getPartitions(TableHandle table, Optional<Map<ColumnHandle, Object>> bindings)\n     {\n         checkNotNull(table, \"table is null\");\n        return getConnectorSplitManager(table).getPartitions(table, bindings.get());\n     }\n     private List<Partition> prunePartitions(Session session, List<Partition> partitions, Expression predicate, Map<ColumnHandle, Symbol> columnToSymbol)", "fixed": "     public List<Partition> getPartitions(TableHandle table, Optional<Map<ColumnHandle, Object>> bindings)\n     {\n         checkNotNull(table, \"table is null\");\n        return getConnectorSplitManager(table).getPartitions(table, bindings.or(ImmutableMap.<ColumnHandle, Object>of()));\n     }\n     private List<Partition> prunePartitions(Session session, List<Partition> partitions, Expression predicate, Map<ColumnHandle, Symbol> columnToSymbol)", "sourceBeforeFix": "bindings.get()", "sourceAfterFix": "bindings.or(ImmutableMap.<ColumnHandle,Object>of())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DirectEndpointBuilder\n             extends\n                 DirectEndpointConsumerBuilder, DirectEndpointProducerBuilder {\n         default AdvancedDirectEndpointBuilder advanced() {", "fixed": "     \n    public interface DirectEndpointBuilder\n             extends\n                 DirectEndpointConsumerBuilder, DirectEndpointProducerBuilder {\n         default AdvancedDirectEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJcloudsEndpointBuilder\n             extends\n                 AdvancedJcloudsEndpointConsumerBuilder, AdvancedJcloudsEndpointProducerBuilder {\n         default JcloudsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJcloudsEndpointBuilder\n             extends\n                 AdvancedJcloudsEndpointConsumerBuilder, AdvancedJcloudsEndpointProducerBuilder {\n         default JcloudsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "42be553433775c5985f6c68f8178e51afb0a402e", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "     dir = TEST_UTIL.getDataTestDir(\"TestHRegion\").toString();\n     method = name.getMethodName();\n     tableName = TableName.valueOf(method);\n    CONF.set(CompactingMemStore.IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY, String.valueOf(0.02));\n   }\n   @After", "fixed": "     dir = TEST_UTIL.getDataTestDir(\"TestHRegion\").toString();\n     method = name.getMethodName();\n     tableName = TableName.valueOf(method);\n    CONF.set(CompactingMemStore.IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY, String.valueOf(0.09));\n   }\n   @After", "sourceBeforeFix": "String.valueOf(0.02)", "sourceAfterFix": "String.valueOf(0.09)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "5a97f9067c0764905cdd987f246689fa14f88335", "projectName": "apache.flink", "bugType": "Change Unary Operator\t", "problem": " \t\t}\n\t\treturn isTrivial();\n \t}", "fixed": " \t\t}\n\t\treturn !isTrivial();\n \t}", "sourceBeforeFix": "isTrivial()", "sourceAfterFix": "!isTrivial()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "aa90e04b5e6eb7f6d46dde16867196329568324e", "projectName": "Activiti.Activiti", "bugType": "Change Binary Operator", "problem": "         try {\n           if (StringUtils.isNotEmpty(fieldValue)) {\n             LocalDate dateValue = LocalDate.parse(fieldValue);\n            variables.put(field.getId(), dateValue);\n           }\n         } catch (Exception e) {\n           logger.error(\"Error parsing form date value for process instance \" + processInstanceId + \" with value \" + fieldValue, e);", "fixed": "         try {\n           if (StringUtils.isNotEmpty(fieldValue)) {\n             LocalDate dateValue = LocalDate.parse(fieldValue);\n            variables.put(field.getId(), dateValue.toString(\"yyyy-M-d\"));\n           }\n         } catch (Exception e) {\n           logger.error(\"Error parsing form date value for process instance \" + processInstanceId + \" with value \" + fieldValue, e);", "sourceBeforeFix": "submittedNode.get(\"values\") != null", "sourceAfterFix": "submittedNode.get(\"values\") == null"}
{"fixCommitSHA1": "ade2ef1e23fecc7211fb450ca852bc94fe565e0e", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "         if (persist && !next.isPersisted()) {\n           next.setPersisted(true);\n           persisted.add(next);\n          String ufsPath = mMountTable.resolve(getPath(next)).getPath();\n           UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n           ufs.mkdirs(ufsPath, false);\n         }", "fixed": "         if (persist && !next.isPersisted()) {\n           next.setPersisted(true);\n           persisted.add(next);\n          String ufsPath = mMountTable.resolve(getPath(next)).toString();\n           UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n           ufs.mkdirs(ufsPath, false);\n         }", "sourceBeforeFix": "mMountTable.resolve(getPath(lastInode)).getPath()", "sourceAfterFix": "mMountTable.resolve(getPath(lastInode)).toString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9c270e0c2b1db2b9b88176817eb26134fea2b35a", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         }\n         long delta = System.currentTimeMillis() - start;\n         assertTrue(\"Should not be that fast to run: \" + delta, delta > 4000);\n        assertTrue(\"Should not take that long to run: \" + delta, delta < 9000);\n     }\n     @Override", "fixed": "         }\n         long delta = System.currentTimeMillis() - start;\n         assertTrue(\"Should not be that fast to run: \" + delta, delta > 4000);\n        assertTrue(\"Should not take that long to run: \" + delta, delta < 11000);\n     }\n     @Override", "sourceBeforeFix": "delta < 9000", "sourceAfterFix": "delta < 11000"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "         _nameApply(mw, property, context, _end);\n         _get(mw, context, property);\n        mw.visitVarInsn(DSTORE, context.var(\"double\"));\n         _filters(mw, property, context, _end);\n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(DLOAD, context.var(\"double\"));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\n         _seperator(mw, context);", "fixed": "         _nameApply(mw, property, context, _end);\n         _get(mw, context, property);\n        mw.visitVarInsn(DSTORE, context.var(\"double\", 2));\n         _filters(mw, property, context, _end);\n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\n         _seperator(mw, context);", "sourceBeforeFix": "context.var(\"long\")", "sourceAfterFix": "context.var(\"long\",2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a076b497cd3ad3b559d00c145d3504441472a48b", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "     public int getDegree(Node node) {\n         view.checkUpdate();\n         AbstractNode absNode = checkNode(node);\n        int count = view.getClusteredLayerInDegree(absNode);\n         return count;\n     }", "fixed": "     public int getDegree(Node node) {\n         view.checkUpdate();\n         AbstractNode absNode = checkNode(node);\n        int count = view.getClusteredLayerDegree(absNode);\n         return count;\n     }", "sourceBeforeFix": "view.getClusteredLayerInDegree(absNode)", "sourceAfterFix": "view.getClusteredLayerDegree(absNode)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         }\n     }\n    private Properties initProperties() {\n         final Properties props = new Properties();\n         props.put(\"a\", \"A\");\n         props.put(\"b\", \"B\");", "fixed": "         }\n     }\n    private static Properties initProperties() {\n         final Properties props = new Properties();\n         props.put(\"a\", \"A\");\n         props.put(\"b\", \"B\");", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "bafb1f877934f826d5f74f9f33e824dd1aa30432", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         return getOutputFactory().createXMLEventWriter(result);\n     }\n    @Converter\n     public XMLStreamWriter createXMLStreamWriter(OutputStream outputStream) throws XMLStreamException {\n         return getOutputFactory().createXMLStreamWriter(outputStream);\n     }", "fixed": "         return getOutputFactory().createXMLEventWriter(result);\n     }\n    @Deprecated\n     public XMLStreamWriter createXMLStreamWriter(OutputStream outputStream) throws XMLStreamException {\n         return getOutputFactory().createXMLStreamWriter(outputStream);\n     }", "sourceBeforeFix": "@Converter", "sourceAfterFix": "@Deprecated"}
{"fixCommitSHA1": "4405698ee99fe26d0ac9317a2df96096f2731a7b", "projectName": "apache.hbase", "bugType": "Change Boolean Literal", "problem": "       Collection<Future<Void>> tasks = futures;\n       LOG.debug(\"cancelling \" + tasks.size() + \" tasks for snapshot \" + name);\n       for (Future<Void> f: tasks) {\n        f.cancel(true);\n       }", "fixed": "       Collection<Future<Void>> tasks = futures;\n       LOG.debug(\"cancelling \" + tasks.size() + \" tasks for snapshot \" + name);\n       for (Future<Void> f: tasks) {\n        f.cancel(false);\n       }", "sourceBeforeFix": "f.cancel(true)", "sourceAfterFix": "f.cancel(false)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwitterDirectMessageEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterDirectMessageEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface TwitterDirectMessageEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterDirectMessageEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "dcfe2673fd99ff60400ead9c83e338c358e2d1b3", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": " \t\tassertThat(ds.getTimeBetweenEvictionRunsMillis()).isEqualTo(5000);\n \t\tassertThat(ds.getMinEvictableIdleTimeMillis()).isEqualTo(60000);\n \t\tassertThat(ds.getMaxWait()).isEqualTo(30000);\n\t\tassertThat(ds.getValidationInterval()).isEqualTo(30000L);\n \t}\n \t@SuppressWarnings(\"unchecked\")", "fixed": " \t\tassertThat(ds.getTimeBetweenEvictionRunsMillis()).isEqualTo(5000);\n \t\tassertThat(ds.getMinEvictableIdleTimeMillis()).isEqualTo(60000);\n \t\tassertThat(ds.getMaxWait()).isEqualTo(30000);\n\t\tassertThat(ds.getValidationInterval()).isEqualTo(3000L);\n \t}\n \t@SuppressWarnings(\"unchecked\")", "sourceBeforeFix": "assertThat(ds.getValidationInterval()).isEqualTo(30000L)", "sourceAfterFix": "assertThat(ds.getValidationInterval()).isEqualTo(3000L)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "ade2ef1e23fecc7211fb450ca852bc94fe565e0e", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         if (persist && !next.isPersisted()) {\n           next.setPersisted(true);\n           persisted.add(next);\n          String ufsPath = mMountTable.resolve(getPath(next)).getPath();\n           UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n           ufs.mkdirs(ufsPath, false);\n         }", "fixed": "         if (persist && !next.isPersisted()) {\n           next.setPersisted(true);\n           persisted.add(next);\n          String ufsPath = mMountTable.resolve(getPath(next)).toString();\n           UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n           ufs.mkdirs(ufsPath, false);\n         }", "sourceBeforeFix": "mMountTable.resolve(getPath(next)).getPath()", "sourceAfterFix": "mMountTable.resolve(getPath(next)).toString()"}
{"fixCommitSHA1": "f1024ba0e7d5f1276a285a4218f26c70252719b5", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t *        the job configuration that has been attached to the original job graph\n \t * @param environment\n \t *        the environment of the task to be registered\n\t * @param initialCheckpointState\n\t *        the task's initial checkpoint state\n \t * @param activeOutputChannels\n \t *        the set of initially active output channels\n \t * @return the task to be started or <code>null</code> if a task with the same ID was already running", "fixed": " \t *        the job configuration that has been attached to the original job graph\n \t * @param environment\n \t *        the environment of the task to be registered\n \t * @param activeOutputChannels\n \t *        the set of initially active output channels\n \t * @return the task to be started or <code>null</code> if a task with the same ID was already running", "sourceBeforeFix": "LOG.error(result.getDescription())", "sourceAfterFix": "LOG.error(result.getDescription(),t)"}
{"fixCommitSHA1": "b0662ce83b466318ce8dcec13428846b1b190aaf", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             throw new IOException(\"Address is required!\");\n         }\n        ClientConnection clientConnection = connections.get(address);\n         if (clientConnection == null) {\n            final Object lock = getLock(address);\n             synchronized (lock) {\n                clientConnection = connections.get(address);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);", "fixed": "             throw new IOException(\"Address is required!\");\n         }\n        ClientConnection clientConnection = connections.get(target);\n         if (clientConnection == null) {\n            final Object lock = getLock(target);\n             synchronized (lock) {\n                clientConnection = connections.get(target);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);", "sourceBeforeFix": "connections.get(address)", "sourceAfterFix": "connections.get(target)"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generateHashRowMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes)\n     {\n         Parameter position = arg(\"position\", int.class);\n         Parameter blocks = arg(\"blocks\", Block[].class);", "fixed": "                 .retInt();\n     }\n    private static void generateHashRowMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes)\n     {\n         Parameter position = arg(\"position\", int.class);\n         Parameter blocks = arg(\"blocks\", Block[].class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fb2ec00cc72fa6edc0894e337b8176adcc2eb974", "projectName": "checkstyle.checkstyle", "bugType": "Change Operand ", "problem": "                     Enum.valueOf(optionClass, optionStr.trim().toUpperCase(Locale.ENGLISH));\n         }\n         catch (IllegalArgumentException iae) {\n            throw new ConversionException(\"unable to parse \" + abstractOption, iae);\n         }\n     }", "fixed": "                     Enum.valueOf(optionClass, optionStr.trim().toUpperCase(Locale.ENGLISH));\n         }\n         catch (IllegalArgumentException iae) {\n            throw new ConversionException(\"unable to parse \" + optionStr, iae);\n         }\n     }", "sourceBeforeFix": "\"unable to parse \" + abstractOption", "sourceAfterFix": "\"unable to parse \" + optionStr"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.valueOf(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "fixed": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "95f8b08af84a2287dbd93c9cc740b6732e9e43b1", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     }\n     \n    protected void fireAuditStarted() {\n         final AuditEvent evt = new AuditEvent(this);\n         for (final AuditListener listener : listeners) {\n             listener.auditStarted(evt);", "fixed": "     }\n     \n    void fireAuditStarted() {\n         final AuditEvent evt = new AuditEvent(this);\n         for (final AuditListener listener : listeners) {\n             listener.auditStarted(evt);", "sourceBeforeFix": "4", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedOlingo2EndpointBuilder\n             extends\n                 AdvancedOlingo2EndpointConsumerBuilder, AdvancedOlingo2EndpointProducerBuilder {\n         default Olingo2EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedOlingo2EndpointBuilder\n             extends\n                 AdvancedOlingo2EndpointConsumerBuilder, AdvancedOlingo2EndpointProducerBuilder {\n         default Olingo2EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "fixed": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private static void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
