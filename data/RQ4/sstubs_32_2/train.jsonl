{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytesBinary(tableNameOrRegionName), Bytes.toBytesBinary(splitPoint));\n   }\n   /**", "fixed": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytes(tableNameOrRegionName), Bytes.toBytes(splitPoint));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(regionname)", "sourceAfterFix": "Bytes.toBytes(regionname)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "fixed": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic abstract int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e6c1586717135f4d22f0a03177a1b7b994d5da95", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t\treturn Outcome.match(\"found database driver \" + driverClassName);\n \t\t\t}\n\t\t\treturn Outcome.match(\"missing database driver \" + driverClassName);\n \t\t}\n \t\tprivate String getDriverClassName(Environment environment, ClassLoader classLoader) {", "fixed": " \t\t\t\treturn Outcome.match(\"found database driver \" + driverClassName);\n \t\t\t}\n\t\t\treturn Outcome.noMatch(\"missing database driver \" + driverClassName);\n \t\t}\n \t\tprivate String getDriverClassName(Environment environment, ClassLoader classLoader) {", "sourceBeforeFix": "Outcome.match(\"missing database driver \" + driverClassName)", "sourceAfterFix": "Outcome.noMatch(\"missing database driver \" + driverClassName)"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "3847d03a4ac7e7f4e52bca451ddb5089a7402072", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         boolean needPostProjectionCoercion = false;\n         for (FunctionCall aggregate : analysis.getAggregates(node)) {\n             Expression rewritten = subPlan.rewrite(aggregate);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getTypeWithCoercions(aggregate));", "fixed": "         boolean needPostProjectionCoercion = false;\n         for (FunctionCall aggregate : analysis.getAggregates(node)) {\n             Expression rewritten = subPlan.rewrite(aggregate);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getType(aggregate));", "sourceBeforeFix": "analysis.getTypeWithCoercions(aggregate)", "sourceAfterFix": "analysis.getType(aggregate)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4f892fe43aed58fb447078fb3988c5263a71d60d", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "         {\n             return;\n         }\n        logError(rcurly, \"rcurly\", expandedTabsColumnNo(rcurly));\n     }\n     /**", "fixed": "         {\n             return;\n         }\n        logError(rcurly, \"rcurly\", expandedTabsColumnNo(rcurly), curlyLevel());\n     }\n     /**", "sourceBeforeFix": "logError(rcurly,\"rcurly\",expandedTabsColumnNo(rcurly))", "sourceAfterFix": "logError(rcurly,\"rcurly\",expandedTabsColumnNo(rcurly),curlyLevel())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "700b61dacfe5ed709d08f0fe196563dc55481398", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "     }\n     public boolean aliasExists(String alias) {\n        return c.admin().indices().existsAliases(new IndicesGetAliasesRequest(alias)).actionGet().exists();\n     }\n     public String aliasTarget(String alias) {", "fixed": "     }\n     public boolean aliasExists(String alias) {\n        return c.admin().indices().aliasesExist(new IndicesGetAliasesRequest(alias)).actionGet().exists();\n     }\n     public String aliasTarget(String alias) {", "sourceBeforeFix": "c.admin().indices().existsAliases(new IndicesGetAliasesRequest(alias))", "sourceAfterFix": "c.admin().indices().aliasesExist(new IndicesGetAliasesRequest(alias))"}
{"fixCommitSHA1": "a6c394118fad3819a98baf4142fb59f6db3735f0", "projectName": "apache.camel", "bugType": "Missing Throws Exception", "problem": " public class RestSwaggerArrayEnumTest {\n     @Test\n    public void shouldGenerateEnumValuesForArraysAndNonArrays() {\n         final RestSwaggerReader reader = new RestSwaggerReader();\n         final RestDefinition restDefinition = new RestDefinition();", "fixed": " public class RestSwaggerArrayEnumTest {\n     @Test\n    public void shouldGenerateEnumValuesForArraysAndNonArrays() throws Exception {\n         final RestSwaggerReader reader = new RestSwaggerReader();\n         final RestDefinition restDefinition = new RestDefinition();", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a558f6310502c9db5bdda7f63fd0c7357706cdd6", "projectName": "apache.hadoop", "bugType": "Change Numeric Literal", "problem": "static final long TIMEOUT = 40000L;\nstatic final double CAPACITY_ALLOWED_VARIANCE = 0.005;\nstatic final double BALANCE_ALLOWED_VARIANCE = 0.11;\n  static final int DEFAULT_BLOCK_SIZE = 10;\n   static {\n     Balancer.setBlockMoveWaitTime(1000L) ;", "fixed": "static final long TIMEOUT = 40000L;\nstatic final double CAPACITY_ALLOWED_VARIANCE = 0.005;\nstatic final double BALANCE_ALLOWED_VARIANCE = 0.11;\n  static final int DEFAULT_BLOCK_SIZE = 100;\n   static {\n     Balancer.setBlockMoveWaitTime(1000L) ;", "sourceBeforeFix": "DEFAULT_BLOCK_SIZE=10", "sourceAfterFix": "DEFAULT_BLOCK_SIZE=100"}
{"fixCommitSHA1": "14eade7f6e21e560a08de348504584cba5e94c94", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     public static Archive<?> deployment0() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(), \"web.xml\");\n         System.out.println(war.toString(true));\n         return war;\n     }", "fixed": "     public static Archive<?> deployment0() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.setWebXML(ClusteredWebTestCase.class.getPackage(), \"web.xml\");\n         System.out.println(war.toString(true));\n         return war;\n     }", "sourceBeforeFix": "war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),\"web.xml\")", "sourceAfterFix": "war.setWebXML(ClusteredWebTestCase.class.getPackage(),\"web.xml\")"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see NormalizableKey\n \t */\n\tpublic void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "fixed": " \t * \n* @see NormalizableKey\n \t */\n\tpublic abstract void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testBurstySampling() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "fixed": "     public void testBurstySampling() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "sourceBeforeFix": "mock.expectedMessageCount(10)", "sourceAfterFix": "mock.expectedMinimumMessageCount(10)"}
{"fixCommitSHA1": "3015afd91cf3ab469e8c343cb201a1dec3679aea", "projectName": "neo4j.neo4j", "bugType": "Same Function Less Args", "problem": "         InstanceId myId = new InstanceId( 1 );\n         InstanceId foreignId = new InstanceId( 3 );\n         HeartbeatState heartbeat= HeartbeatState.heartbeat;\n        ClusterConfiguration configuration = new ClusterConfiguration(\"whatever\", StringLogger.DEV_NULL,\n\"cluster:\nconfiguration.joined( myId, URI.create(\"cluster:\nconfiguration.joined( new InstanceId( 2 ), URI.create(\"cluster:", "fixed": "         InstanceId myId = new InstanceId( 1 );\n         InstanceId foreignId = new InstanceId( 3 );\n         HeartbeatState heartbeat= HeartbeatState.heartbeat;\nClusterConfiguration configuration = new ClusterConfiguration(\"whatever\", \"cluster:\nconfiguration.joined( myId, URI.create(\"cluster:\nconfiguration.joined( new InstanceId( 2 ), URI.create(\"cluster:", "sourceBeforeFix": "new ClusterConfiguration(\"whatever\",StringLogger.DEV_NULL,\"cluster://1\",\"cluster://2\")", "sourceAfterFix": "new ClusterConfiguration(\"whatever\",\"cluster://1\",\"cluster://2\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"fixCommitSHA1": "70d9dd211f2043c93385450d4114b30c91baf5b0", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "         assert node.isMaster();\n         assert partitionStateManager.isInitialized();\n        List<MigrationInfo> migrations = getCompletedMigrationsCopy();\n         if (logger.isFineEnabled()) {\n             logger.fine(\"Publishing completed migrations [\" + migrations.size() + \"]: \" + migrations);\n         }", "fixed": "         assert node.isMaster();\n         assert partitionStateManager.isInitialized();\n        final List<MigrationInfo> migrations = getCompletedMigrationsCopy();\n         if (logger.isFineEnabled()) {\n             logger.fine(\"Publishing completed migrations [\" + migrations.size() + \"]: \" + migrations);\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e644b26706f629425854e325bbb6efb8df6d9862", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     try {\n       parentUri =\n           new URI(parentUri.getScheme(), parentUri.getAuthority(),\n              parentUri.getPath() + SEPARATOR, null);\n     } catch (URISyntaxException e) {\n       throw new IllegalArgumentException(e);\n     }", "fixed": "     try {\n       parentUri =\n           new URI(parentUri.getScheme(), parentUri.getAuthority(),\n              parentUri.getPath() + SEPARATOR, null, null);\n     } catch (URISyntaxException e) {\n       throw new IllegalArgumentException(e);\n     }", "sourceBeforeFix": "new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null)", "sourceAfterFix": "new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null,null)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PubNubEndpointBuilder\n             extends\n                 PubNubEndpointConsumerBuilder, PubNubEndpointProducerBuilder {\n         default AdvancedPubNubEndpointBuilder advanced() {", "fixed": "     \n    public interface PubNubEndpointBuilder\n             extends\n                 PubNubEndpointConsumerBuilder, PubNubEndpointProducerBuilder {\n         default AdvancedPubNubEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": "  */\n class OnEnabledHealthIndicatorCondition extends SpringBootCondition {\n\tprivate static final String ANNOTATION_CLASS = ConditionalOnEnablednHealthIndicator.class\n \t\t\t.getName();\n \t@Override", "fixed": "  */\n class OnEnabledHealthIndicatorCondition extends SpringBootCondition {\n\tprivate static final String ANNOTATION_CLASS = ConditionalOnEnabledHealthIndicator.class\n \t\t\t.getName();\n \t@Override", "sourceBeforeFix": "ConditionalOnEnablednHealthIndicator.class", "sourceAfterFix": "ConditionalOnEnabledHealthIndicator.class"}
