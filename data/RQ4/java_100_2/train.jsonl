{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Failed to get files from \" + baseDirectory.getAbsolutePath())", "sourceAfterFix": "LOG.warn(\"Failed to get files from \" + baseDirectory.getAbsolutePath())"}
{"problem": "public void METHOD_1 ( final java.util.List < TYPE_1 > VAR_1 ) { final java.util.List < TYPE_2 > VAR_2 = new java.util.ArrayList < TYPE_2 > ( ) ; for ( final TYPE_1 VAR_3 : VAR_1 ) { final TYPE_2 VAR_4 = new TYPE_2 ( ( ( TYPE_3 ) ( VAR_3 ) ) ) ; VAR_2 . add ( VAR_4 ) ; } TYPE_4 . METHOD_2 ( ) ; TYPE_4 . METHOD_3 ( VAR_2 ) ; TYPE_5 . METHOD_4 ( ) ; TYPE_6 . METHOD_2 ( ) ; TYPE_6 . METHOD_3 ( VAR_2 ) ; TYPE_7 . METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( final java.util.List < TYPE_1 > VAR_1 ) { VAR_2 = new java.util.ArrayList < TYPE_2 > ( ) ; for ( final TYPE_1 VAR_3 : VAR_1 ) { final TYPE_2 VAR_4 = new TYPE_2 ( ( ( TYPE_3 ) ( VAR_3 ) ) ) ; VAR_2 . add ( VAR_4 ) ; } TYPE_4 . METHOD_2 ( ) ; TYPE_4 . METHOD_3 ( VAR_2 ) ; TYPE_5 . METHOD_4 ( ) ; TYPE_6 . METHOD_2 ( ) ; TYPE_6 . METHOD_3 ( VAR_2 ) ; TYPE_7 . METHOD_4 ( ) ; }\n"}
{"problem": "private void METHOD_1 ( int VAR_1 , TYPE_1 < TYPE_2 > b , TYPE_3 out ) { out . METHOD_2 ( b . METHOD_3 ( ) . getName ( ) ) ; out . METHOD_4 ( STRING_1 ) ; METHOD_5 ( ( VAR_1 + 1 ) , b . METHOD_6 ( 0 ) , out ) ; }\n", "fixed": "private void METHOD_1 ( int VAR_1 , TYPE_1 < TYPE_2 > b ) { out . METHOD_2 ( b . METHOD_3 ( ) . getName ( ) ) ; out . METHOD_4 ( STRING_1 ) ; METHOD_5 ( ( VAR_1 + 1 ) , b . METHOD_6 ( 0 ) ) ; }\n"}
{"problem": "private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 item ) throws TYPE_2 { boolean VAR_2 = false ; if ( ( VAR_1 != null ) && ( item != null ) ) { int VAR_3 = VAR_1 . METHOD_2 ( ) ; int VAR_4 = item . METHOD_2 ( ) ; if ( ( ! ( METHOD_3 ( VAR_3 , VAR_1 ) ) ) || ( ! ( METHOD_3 ( VAR_4 , item ) ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } if ( VAR_3 > VAR_4 ) return true ; } return false ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 item ) throws TYPE_2 { boolean VAR_2 = false ; if ( ( VAR_1 != null ) && ( item != null ) ) { int VAR_3 = VAR_1 . METHOD_2 ( ) ; int VAR_4 = item . METHOD_2 ( ) ; if ( ( ! ( METHOD_3 ( VAR_3 , VAR_1 ) ) ) || ( ! ( METHOD_3 ( VAR_4 , item ) ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } if ( VAR_3 < VAR_4 ) return true ; } return false ; }\n"}
{"fixCommitSHA1": "a558f6310502c9db5bdda7f63fd0c7357706cdd6", "projectName": "apache.hadoop", "bugType": "Change Numeric Literal", "problem": "   private static final Log LOG = LogFactory.getLog(\n   \"org.apache.hadoop.hdfs.TestBalancerWithNodeGroup\");\n  final private static long CAPACITY = 500L;\n   final private static String RACK0 = \"/rack0\";\n   final private static String RACK1 = \"/rack1\";\n   final private static String NODEGROUP0 = \"/nodegroup0\";", "fixed": "   private static final Log LOG = LogFactory.getLog(\n   \"org.apache.hadoop.hdfs.TestBalancerWithNodeGroup\");\n  final private static long CAPACITY = 6000L;\n   final private static String RACK0 = \"/rack0\";\n   final private static String RACK1 = \"/rack1\";\n   final private static String NODEGROUP0 = \"/nodegroup0\";", "sourceBeforeFix": "CAPACITY=500L", "sourceAfterFix": "CAPACITY=6000L"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 counter = new TYPE_1 ( INT_1 , INT_2 ) ; counter . METHOD_2 ( ) ; assertEquals ( INT_3 , counter . getValue ( ) ) ; TYPE_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_3 ( ) ; assertEquals ( INT_4 , counter . getValue ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 counter = new TYPE_1 ( INT_1 , INT_2 ) ; counter . METHOD_2 ( ) ; assertEquals ( INT_3 , counter . getValue ( ) ) ; counter . METHOD_3 ( ) ; counter . METHOD_3 ( ) ; assertEquals ( INT_4 , counter . getValue ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.Integer VAR_1 ) { TYPE_1 . METHOD_2 ( ( STRING_1 + VAR_1 ) ) ; if ( VAR_1 == 0 ) { return ; } if ( ( ! VAR_2 ) && ( ( VAR_1 % INT_1 ) == 0 ) ) { METHOD_3 ( ) ; } if ( ( ! VAR_3 ) && ( ( VAR_1 % INT_1 ) == 0 ) ) { METHOD_3 ( ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.Integer VAR_1 ) { TYPE_1 . METHOD_2 ( ( STRING_1 + VAR_1 ) ) ; if ( VAR_1 == 0 ) { return ; } if ( ( ! VAR_2 ) && ( ( VAR_1 % INT_1 ) == 0 ) ) { METHOD_3 ( ) ; } else if ( ( ! VAR_3 ) && ( ( VAR_1 % INT_1 ) == 0 ) ) { METHOD_3 ( ) ; } }\n"}
{"problem": "private void METHOD_1 ( ) { if ( METHOD_2 ( ) . equals ( METHOD_3 ( ) ) ) { METHOD_4 ( VAR_1 ) ; } else { TYPE_1 VAR_2 = METHOD_5 ( ) . METHOD_6 ( METHOD_3 ( ) , METHOD_2 ( ) ) ; if ( VAR_2 != null ) METHOD_4 ( VAR_2 . METHOD_7 ( date ) . METHOD_8 ( new TYPE_2 ( date , VAR_1 ) ) . getValue ( ) ) ; else METHOD_4 ( VAR_1 ) ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( METHOD_2 ( ) . equals ( METHOD_3 ( ) ) ) { METHOD_4 ( VAR_1 ) ; } else { TYPE_1 VAR_2 = METHOD_5 ( ) . METHOD_6 ( METHOD_2 ( ) , METHOD_3 ( ) ) ; if ( VAR_2 != null ) METHOD_4 ( VAR_2 . METHOD_7 ( date ) . METHOD_8 ( new TYPE_2 ( date , VAR_1 ) ) . getValue ( ) ) ; else METHOD_4 ( VAR_1 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 data = getIntent ( ) . METHOD_2 ( ) ; if ( data != null ) { TYPE_2 VAR_1 = data . METHOD_3 ( VAR_2 ) ; if ( ( data . METHOD_3 ( getString ( VAR_3 ) ) ) == null ) { METHOD_4 ( VAR_1 ) ; } else { int VAR_4 = data . getInt ( getString ( VAR_3 ) ) ; if ( VAR_4 == 0 ) { METHOD_4 ( VAR_1 ) ; } else { METHOD_5 ( VAR_1 , VAR_4 ) ; } } } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 data = getIntent ( ) . METHOD_2 ( ) ; if ( data != null ) { TYPE_2 VAR_1 = data . METHOD_3 ( VAR_2 ) ; if ( ( data . get ( getString ( VAR_3 ) ) ) == null ) { METHOD_4 ( VAR_1 ) ; } else { int VAR_4 = data . getInt ( getString ( VAR_3 ) ) ; if ( VAR_4 == 0 ) { METHOD_4 ( VAR_1 ) ; } else { METHOD_5 ( VAR_1 , VAR_4 ) ; } } } }\n"}
{"fixCommitSHA1": "16b799dae56b54f82a14dc0e0ad24977f06df6f6", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "   public void testBulkOutputWithTsvImporterTextMapper() throws Exception {\n     String table = \"test-\" + UUID.randomUUID();\n     String FAMILY = \"FAM\";\n    Path bulkOutputPath = new Path(util.getDataTestDir(table),\"hfiles\");\n     String[] args =\n         new String[] {", "fixed": "   public void testBulkOutputWithTsvImporterTextMapper() throws Exception {\n     String table = \"test-\" + UUID.randomUUID();\n     String FAMILY = \"FAM\";\n    Path bulkOutputPath = new Path(util.getDataTestDirOnTestFS(table),\"hfiles\");\n     String[] args =\n         new String[] {", "sourceBeforeFix": "util.getDataTestDir(table)", "sourceAfterFix": "util.getDataTestDirOnTestFS(table)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"problem": "public java.lang.String toString ( ) { if ( VAR_1 ) return ( ( ( VAR_2 ? STRING_1 : STRING_2 ) + ( VAR_3 ) ) + ( ( offset ) != 0 ? STRING_3 + ( offset ) : STRING_2 ) ) + ( VAR_2 ? STRING_4 : STRING_2 ) ; if ( VAR_4 ) return STRING_5 + ( i ) ; if ( VAR_5 ) return STRING_6 + ( VAR_6 ) ; return null ; }\n", "fixed": "public java.lang.String toString ( ) { if ( VAR_1 ) return ( ( ( VAR_2 ? STRING_1 : STRING_2 ) + ( VAR_3 ) ) + ( ( offset ) != 0 ? STRING_3 + ( offset ) : STRING_2 ) ) + ( VAR_2 ? STRING_4 : STRING_2 ) ; if ( VAR_4 ) return STRING_6 + ( i ) ; if ( VAR_5 ) return STRING_6 + ( VAR_6 ) ; return null ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 ; try { VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( VAR_3 ) ) ) ; } catch ( java.lang.Exception VAR_4 ) { return ; } if ( ( VAR_5 ) != null ) { VAR_6 = VAR_5 ; } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 ; try { VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( VAR_3 ) ) ) ; if ( ( VAR_5 ) != null ) { VAR_6 = VAR_5 ; } } catch ( java.lang.Exception VAR_4 ) { return ; } }\n"}
{"problem": "private void METHOD_1 ( long VAR_1 ) { TYPE_1 t = new TYPE_1 ( false ) ; VAR_2 . METHOD_2 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; t . METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( ) { METHOD_5 ( ) ; } } , VAR_3 ) ; }\n", "fixed": "private void METHOD_1 ( long VAR_1 ) { TYPE_1 t = new TYPE_1 ( false ) ; VAR_2 . METHOD_2 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; t . METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( ) { METHOD_5 ( ) ; } } , VAR_1 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( this ) ; VAR_3 = new TYPE_3 ( METHOD_4 ( ) ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( VAR_4 , STRING_1 ) ; METHOD_9 ( VAR_5 , STRING_2 ) ; METHOD_10 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( this ) ; VAR_3 = new TYPE_3 ( METHOD_4 ( ) ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_10 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( int i = 0 ; i < ( VAR_1 . length ( ) ) ; i ++ ) { try { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( i ) ; TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( ) ) ; METHOD_5 ( VAR_2 . getString ( STRING_1 ) ) ; TYPE_3 . end ( ) ; } catch ( TYPE_5 VAR_3 ) { TYPE_6 . error ( ( STRING_2 + i ) , VAR_3 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( int i = 0 ; i < ( VAR_1 . length ( ) ) ; i ++ ) { try { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( i ) ; METHOD_5 ( VAR_2 . getString ( STRING_1 ) ) ; } catch ( TYPE_5 VAR_3 ) { TYPE_6 . error ( ( STRING_2 + i ) , VAR_3 ) ; } } }\n"}
{"problem": "public static void main ( ) { final java.lang.String VAR_1 = java.lang.Thread . METHOD_1 ( ) . METHOD_2 ( ) [ 1 ] . METHOD_3 ( ) ; if ( ( VAR_1 . startsWith ( STRING_1 ) ) == false ) { throw new TYPE_1 ( STRING_2 ) ; } java.lang.System.out.println ( VAR_1 ) ; TYPE_2 . METHOD_4 ( ) ; }\n", "fixed": "public static void main ( ) { final java.lang.String VAR_1 = java.lang.Thread . METHOD_1 ( ) . METHOD_2 ( ) [ 1 ] . METHOD_3 ( ) ; if ( ( VAR_1 . startsWith ( STRING_1 ) ) == false ) { throw new TYPE_1 ( STRING_2 ) ; } TYPE_2 . METHOD_4 ( ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { try { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 [ i ] ) ; synchronized ( VAR_4 ) { VAR_4 . add ( VAR_3 ) ; } } catch ( java.io.IOException VAR_5 ) { TYPE_2 . METHOD_3 ( STRING_1 ) ; } } }\n", "fixed": "private int METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( ( VAR_1 ) == null ) { return - 1 ; } for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { try { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 [ i ] ) ; VAR_4 . add ( VAR_3 ) ; } catch ( java.io.IOException VAR_5 ) { TYPE_2 . METHOD_3 ( STRING_1 ) ; } } return 0 ; }\n"}
{"problem": "private java.util.List < java.lang.String > METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; TYPE_2 type = new TYPE_3 < java.util.ArrayList < java.lang.String > > ( ) { } . getType ( ) ; java.util.List < java.lang.String > VAR_3 = VAR_4 . METHOD_3 ( VAR_1 . toString ( ) , type ) ; TYPE_4 . METHOD_4 ( VAR_5 , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_3 ) ) ; return VAR_3 ; }\n", "fixed": "private java.util.List < java.lang.String > METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; if ( VAR_1 == null ) { return new java.util.ArrayList < java.lang.String > ( ) ; } TYPE_2 type = new TYPE_3 < java.util.ArrayList < java.lang.String > > ( ) { } . getType ( ) ; java.util.List < java.lang.String > VAR_3 = VAR_4 . METHOD_3 ( VAR_1 . toString ( ) , type ) ; TYPE_4 . METHOD_4 ( VAR_5 , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_3 ) ) ; return VAR_3 ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( ( VAR_3 . METHOD_2 ( VAR_1 ) ) || ( VAR_3 . METHOD_2 ( VAR_2 ) ) ) { return false ; } VAR_4 . METHOD_3 ( VAR_1 , VAR_2 ) ; VAR_4 . METHOD_3 ( VAR_2 , VAR_1 ) ; return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( ( VAR_3 . METHOD_2 ( VAR_1 ) ) || ( VAR_3 . METHOD_2 ( VAR_2 ) ) ) { return false ; } return ( VAR_4 . METHOD_3 ( VAR_1 , VAR_2 ) ) && ( VAR_4 . METHOD_3 ( VAR_2 , VAR_1 ) ) ; }\n"}
{"fixCommitSHA1": "a7ea864d23e4b47cef8056a446ea4e7344c62ee7", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "     @BeforeClass\n     public static void initPort() {\n        serverPort = AvailablePortFinder.getNextAvailable();\n         System.setProperty(\"server-port\", new Integer(serverPort).toString());\n     }", "fixed": "     @BeforeClass\n     public static void initPort() {\n        serverPort = AvailablePortFinder.getNextAvailable(3000);\n         System.setProperty(\"server-port\", new Integer(serverPort).toString());\n     }", "sourceBeforeFix": "AvailablePortFinder.getNextAvailable()", "sourceAfterFix": "AvailablePortFinder.getNextAvailable(3000)"}
{"problem": "public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) METHOD_2 ( VAR_1 , VAR_2 ) ; if ( ( VAR_3 ) != null ) { boolean VAR_4 = false ; if ( ( METHOD_3 ( ) ) == null ) { METHOD_4 ( VAR_3 ) ; VAR_4 = true ; } METHOD_4 ( VAR_3 ) ; if ( ( VAR_5 ) == null ) { METHOD_5 ( VAR_3 ) ; } } VAR_6 . start ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) METHOD_2 ( VAR_1 , VAR_2 ) ; if ( ( VAR_3 ) != null ) { METHOD_4 ( VAR_3 ) ; if ( ( VAR_5 ) == null ) { METHOD_5 ( VAR_3 ) ; } } VAR_6 . start ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( this . VAR_2 . METHOD_3 ( ) ) ; this . VAR_1 . METHOD_4 ( this . VAR_3 ) ; int VAR_4 = ( this . VAR_2 . METHOD_3 ( ) . size ( ) ) - ( this . VAR_5 ) ; this . VAR_5 = this . VAR_2 . METHOD_3 ( ) . size ( ) ; METHOD_5 ( ( ( VAR_4 > ( VAR_6 ) ? VAR_6 : VAR_4 ) - 1 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) ; this . VAR_1 . METHOD_4 ( this . VAR_3 ) ; int VAR_4 = ( this . VAR_2 . METHOD_3 ( ) . size ( ) ) - ( this . VAR_5 ) ; this . VAR_5 = this . VAR_2 . METHOD_3 ( ) . size ( ) ; METHOD_5 ( ( ( VAR_4 > ( VAR_6 ) ? VAR_6 : VAR_4 ) - 1 ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 event , TYPE_2 key , java.lang.String value ) { TYPE_3 VAR_1 = VAR_2 . METHOD_2 ( event , key ) ; if ( VAR_1 != null ) { VAR_2 . METHOD_3 ( VAR_1 , value ) ; } else { VAR_2 . METHOD_4 ( event , key , value ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 event , TYPE_2 key , java.lang.String value ) { TYPE_3 VAR_1 = VAR_2 . METHOD_2 ( event , key ) ; if ( VAR_1 != null ) { if ( value == null ) { VAR_2 . delete ( VAR_1 ) ; } else { VAR_2 . METHOD_3 ( VAR_1 , value ) ; } } else { if ( value != null ) { VAR_2 . METHOD_4 ( event , key , value ) ; } } }\n"}
{"problem": "private void METHOD_1 ( ) { if ( ( VAR_1 ) || ( ( VAR_2 ) == ( TYPE_1 ) ) ) { VAR_3 = VAR_4 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_5 . METHOD_5 ( VAR_6 ) ; } else if ( ( VAR_2 ) == ( VAR_7 ) ) { VAR_3 = VAR_4 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_5 . METHOD_5 ( VAR_8 ) ; } VAR_1 = true ; }\n", "fixed": "private void METHOD_1 ( ) { if ( ( VAR_1 ) || ( ( VAR_2 ) == ( TYPE_1 ) ) ) { VAR_3 = VAR_4 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_5 . METHOD_5 ( VAR_6 ) ; VAR_1 = true ; } else if ( ( VAR_2 ) == ( VAR_7 ) ) { VAR_3 = VAR_4 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_5 . METHOD_5 ( VAR_8 ) ; VAR_1 = true ; } }\n"}
{"fixCommitSHA1": "ff8365f5f88d35c25c9d025d03ee4e291a473d8f", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     public ModelNode execute(final ModelNode operation, final OperationMessageHandler handler, final OperationTransactionControl control, final OperationAttachments attachments) {\n         final ModelNode headers = operation.has(OPERATION_HEADERS) ? operation.get(OPERATION_HEADERS) : null;\n        final boolean rollbackOnFailure = headers == null || !headers.hasDefined(ROLLBACK_ON_RUNTIME_FAILURE) || operation.get(ROLLBACK_ON_RUNTIME_FAILURE).asBoolean();\n         final EnumSet<NewOperationContextImpl.ContextFlag> contextFlags = rollbackOnFailure ? EnumSet.of(NewOperationContextImpl.ContextFlag.ROLLBACK_ON_FAIL) : EnumSet.noneOf(NewOperationContextImpl.ContextFlag.class);\n         NewOperationContextImpl context = new NewOperationContextImpl(this, controllerType, contextFlags, handler, attachments, modelReference.get(), control, processState, bootingFlag.get());\n         ModelNode response = new ModelNode();", "fixed": "     public ModelNode execute(final ModelNode operation, final OperationMessageHandler handler, final OperationTransactionControl control, final OperationAttachments attachments) {\n         final ModelNode headers = operation.has(OPERATION_HEADERS) ? operation.get(OPERATION_HEADERS) : null;\n        final boolean rollbackOnFailure = headers == null || !headers.hasDefined(ROLLBACK_ON_RUNTIME_FAILURE) || headers.get(ROLLBACK_ON_RUNTIME_FAILURE).asBoolean();\n         final EnumSet<NewOperationContextImpl.ContextFlag> contextFlags = rollbackOnFailure ? EnumSet.of(NewOperationContextImpl.ContextFlag.ROLLBACK_ON_FAIL) : EnumSet.noneOf(NewOperationContextImpl.ContextFlag.class);\n         NewOperationContextImpl context = new NewOperationContextImpl(this, controllerType, contextFlags, handler, attachments, modelReference.get(), control, processState, bootingFlag.get());\n         ModelNode response = new ModelNode();", "sourceBeforeFix": "operation.get(ROLLBACK_ON_RUNTIME_FAILURE)", "sourceAfterFix": "headers.get(ROLLBACK_ON_RUNTIME_FAILURE)"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 ) > ( VAR_2 . METHOD_2 ( ) ) ) { if ( ( ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_3 ( ) . size ( ) ) < INT_1 ) { METHOD_4 ( VAR_2 , label ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_4 ) ; } else { METHOD_7 ( STRING_1 ) ; } } else { METHOD_7 ( STRING_2 ) ; java.lang.System.out.println ( ( ( STRING_3 + ( VAR_1 ) ) + STRING_4 ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 ) > ( VAR_2 . METHOD_2 ( ) ) ) { if ( ( ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_3 ( ) . size ( ) ) < INT_1 ) { METHOD_4 ( VAR_2 , label ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_4 ) ; } else { METHOD_7 ( STRING_1 ) ; } } else { METHOD_7 ( STRING_2 ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( ) throws TYPE_1 { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_2 ( ) ; ( index ) ++ ; boolean VAR_3 = ( index ) < ( VAR_4 . METHOD_3 ( ) ) ; if ( VAR_3 ) { VAR_4 . METHOD_4 ( ) ; } if ( ! VAR_3 ) { index = - 1 ; } return VAR_3 ; }\n", "fixed": "public boolean METHOD_1 ( ) throws TYPE_1 { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_2 ( ) ; ( index ) ++ ; boolean VAR_3 = ( ( index ) + 1 ) < ( VAR_4 . METHOD_3 ( ) ) ; if ( VAR_3 ) { VAR_4 . METHOD_4 ( ) ; } if ( ! VAR_3 ) { index = - 1 ; } return VAR_3 ; }\n"}
{"fixCommitSHA1": "5a6d98ac56f8dec608c79c242c81389149fc3def", "projectName": "xetorthio.jedis", "bugType": "Change Caller in Function Call", "problem": "     public List<Long> getIntegerMultiBulkReply() {\n         flush();\n         pipelinedCommands--;\n        return (List<Long>) protocol.read(inputStream);\n     }\n     public List<Object> getAll() {", "fixed": "     public List<Long> getIntegerMultiBulkReply() {\n         flush();\n         pipelinedCommands--;\n        return (List<Long>) Protocol.read(inputStream);\n     }\n     public List<Object> getAll() {", "sourceBeforeFix": "protocol.read(inputStream)", "sourceAfterFix": "Protocol.read(inputStream)"}
{"problem": "public void update ( ) throws TYPE_1 { VAR_1 . update ( ) ; this . METHOD_1 ( ) ; this . METHOD_2 ( ) ; if ( VAR_2 . METHOD_3 ( ) ) { if ( METHOD_4 ( ) ) { METHOD_5 ( ) ; } else { VAR_3 = true ; VAR_4 . METHOD_6 ( VAR_5 ) ; java.lang.System.out.println ( VAR_4 . toString ( ) ) ; } } }\n", "fixed": "public void update ( ) throws TYPE_1 { VAR_1 . update ( ) ; this . METHOD_1 ( ) ; this . METHOD_2 ( ) ; if ( VAR_2 . METHOD_3 ( ) ) { if ( METHOD_4 ( ) ) { METHOD_5 ( ) ; } else { VAR_3 = true ; VAR_4 . METHOD_6 ( VAR_5 ) ; } } }\n"}
{"problem": "public java.lang.Boolean METHOD_1 ( int x , int y ) { return ( ( ( x >= 0 ) && ( x < ( VAR_1 . length ) ) ) && ( ( y >= 0 ) && ( y < ( VAR_1 . length ) ) ) ) && ( ( VAR_1 [ x ] [ y ] ) == 0 ) ; }\n", "fixed": "public java.lang.Boolean METHOD_1 ( int x , int y ) { return ( ( ( x >= 0 ) && ( x < ( VAR_1 . length ) ) ) && ( ( y >= 0 ) && ( y < ( VAR_1 [ 0 ] . length ) ) ) ) && ( ( VAR_1 [ x ] [ y ] ) == 0 ) ; }\n"}
{"problem": "public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String name ) { if ( ! ( VAR_1 . METHOD_2 ( name ) ) ) { return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( null ) ; } TYPE_2 VAR_2 = VAR_3 . METHOD_5 ( name ) ; VAR_1 . METHOD_5 ( name ) ; return new TYPE_1 ( VAR_2 , VAR_4 ) ; }\n", "fixed": "public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String name ) { if ( ! ( VAR_1 . METHOD_2 ( name ) ) ) { return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( null ) ; } TYPE_2 VAR_2 = VAR_3 . METHOD_5 ( name ) ; if ( VAR_2 == null ) { return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( null ) ; } VAR_1 . METHOD_5 ( name ) ; return new TYPE_1 ( VAR_2 , VAR_4 ) ; }\n"}
{"problem": "private boolean METHOD_1 ( char c , char VAR_1 ) { return ( ( TYPE_1 . METHOD_2 ( c ) ) && ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) || ( ( TYPE_1 . METHOD_4 ( c ) ) && ( TYPE_1 . METHOD_4 ( VAR_1 ) ) ) ; }\n", "fixed": "private boolean METHOD_1 ( char c , char VAR_1 ) { return ( ( TYPE_1 . METHOD_2 ( c ) ) && ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) || ( ( ! ( TYPE_1 . METHOD_4 ( c ) ) ) && ( TYPE_1 . METHOD_4 ( VAR_1 ) ) ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { try { java.lang.String fileName = METHOD_2 ( ) ; java.io.File VAR_1 = new java.io.File ( METHOD_3 ( ) ) ; if ( ( ! ( VAR_1 . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) { VAR_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_3 ( ) , METHOD_8 ( ) ) ; } } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_9 ( ) ; } }\n", "fixed": "private void METHOD_1 ( ) { try { java.io.File VAR_1 = new java.io.File ( METHOD_3 ( ) ) ; if ( ( ! ( VAR_1 . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) { VAR_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_3 ( ) , METHOD_8 ( ) ) ; } } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_9 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 p : VAR_2 ) { if ( ! ( p . METHOD_2 ( ) . toLowerCase ( ) . contains ( VAR_1 . toLowerCase ( ) ) ) ) { for ( TYPE_2 VAR_3 : VAR_4 ) { if ( VAR_3 . METHOD_3 ( ) . equals ( p . METHOD_2 ( ) ) ) { VAR_3 . METHOD_4 ( false ) ; } } } } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( line ) != null ) { line . remove ( ) ; } for ( TYPE_1 p : VAR_2 ) { if ( ! ( p . METHOD_2 ( ) . toLowerCase ( ) . contains ( VAR_1 . toLowerCase ( ) ) ) ) { for ( TYPE_2 VAR_3 : VAR_4 ) { if ( VAR_3 . METHOD_3 ( ) . equals ( p . METHOD_2 ( ) ) ) { VAR_3 . METHOD_4 ( false ) ; } } } } }\n"}
{"fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ticker.advance(16000000);\n     stopwatch.start();\n    assertEquals(9, stopwatch.elapsedMillis());\n     ticker.advance(25000000);\n    assertEquals(34, stopwatch.elapsedMillis());\n     stopwatch.stop();\n     ticker.advance(36000000);\n    assertEquals(34, stopwatch.elapsedMillis());\n   }\n   @GwtIncompatible(\"String.format()\")", "fixed": "     ticker.advance(16000000);\n     stopwatch.start();\n    assertEquals(9, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(25000000);\n    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n     stopwatch.stop();\n     ticker.advance(36000000);\n    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n   }\n   @GwtIncompatible(\"String.format()\")", "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}
{"problem": "public void METHOD_1 ( ) { int VAR_1 = INT_1 ; assertEquals ( VAR_1 , this . VAR_2 . METHOD_2 ( ) ) ; long VAR_3 = INT_2 ; assertEquals ( this . VAR_2 . METHOD_3 ( ) , VAR_3 ) ; int VAR_4 = INT_3 ; assertEquals ( VAR_4 , this . VAR_2 . METHOD_4 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { int VAR_1 = INT_1 ; assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( ) ) ; long VAR_3 = INT_2 ; assertEquals ( VAR_2 . METHOD_3 ( ) , VAR_3 ) ; int VAR_4 = INT_3 ; assertEquals ( VAR_4 , VAR_2 . METHOD_4 ( ) ) ; }\n"}
{"fixCommitSHA1": "6a6e67b3003df3da728a2366f951b7efe857a6e7", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testRecipientListParallel() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceived(\"c\", \"b\", \"a\");\n         template.sendBodyAndHeader(\"direct:start\", \"Hello World\", \"foo\", \"direct:a,direct:b,direct:c\");", "fixed": "     public void testRecipientListParallel() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceivedInAnyOrder(\"c\", \"b\", \"a\");\n         template.sendBodyAndHeader(\"direct:start\", \"Hello World\", \"foo\", \"direct:a,direct:b,direct:c\");", "sourceBeforeFix": "mock.expectedBodiesReceived(\"c\",\"b\",\"a\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"c\",\"b\",\"a\")"}
{"fixCommitSHA1": "c46a39b13e1bfccdc09301b26f9cc4804d417c3b", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "   public void testMoveException() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n     mover.move(\n         sourceSegment,", "fixed": "   public void testMoveException() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n     mover.move(\n         sourceSegment,", "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 , TYPE_1 > VAR_1 ) { TYPE_1 VAR_2 = null ; for ( TYPE_3 element : this ) { TYPE_1 value = VAR_1 . select ( element ) ; if ( VAR_2 == null ) { VAR_2 = value ; } else if ( ( value != null ) && ( ( VAR_2 . compareTo ( value ) ) < 0 ) ) { VAR_2 = value ; } } return VAR_2 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 , TYPE_1 > VAR_1 ) { TYPE_1 VAR_2 = null ; for ( TYPE_3 element : this ) { TYPE_1 value = VAR_1 . select ( element ) ; if ( VAR_2 == null ) { VAR_2 = value ; } else if ( ( value != null ) && ( ( VAR_2 . compareTo ( value ) ) > 0 ) ) { VAR_2 = value ; } } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 info ) { if ( info . METHOD_2 ( STRING_1 , VAR_1 class ) ) { METHOD_3 ( TYPE_2 . METHOD_4 ( info . METHOD_5 ( STRING_1 , VAR_2 class ) . METHOD_6 ( ) ) ) ; } if ( info . METHOD_7 ( ) . METHOD_8 ( STRING_2 ) ) { METHOD_9 ( info . METHOD_5 ( STRING_2 , VAR_2 class ) . METHOD_10 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 info ) { if ( info . METHOD_2 ( STRING_1 , VAR_2 class ) ) { METHOD_3 ( TYPE_2 . METHOD_4 ( info . METHOD_5 ( STRING_1 , VAR_2 class ) . METHOD_6 ( ) ) ) ; } if ( info . METHOD_7 ( ) . METHOD_8 ( STRING_2 ) ) { METHOD_9 ( info . METHOD_5 ( STRING_2 , VAR_2 class ) . METHOD_10 ( ) ) ; } }\n"}
{"problem": "public android.view.View METHOD_1 ( int VAR_1 , boolean VAR_2 , android.view.View VAR_3 , TYPE_1 VAR_4 ) { if ( VAR_3 == null ) { VAR_3 = VAR_5 . METHOD_2 ( VAR_6 , VAR_4 , false ) ; TYPE_2 VAR_7 = ( ( TYPE_2 ) ( VAR_3 . METHOD_3 ( VAR_8 ) ) ) ; VAR_7 . setText ( METHOD_4 ( VAR_1 ) . toString ( ) ) ; } return VAR_3 ; }\n", "fixed": "public android.view.View METHOD_1 ( int VAR_1 , boolean VAR_2 , android.view.View VAR_3 , TYPE_1 VAR_4 ) { VAR_3 = null ; if ( VAR_3 == null ) { VAR_3 = VAR_5 . METHOD_2 ( VAR_6 , VAR_4 , false ) ; TYPE_2 VAR_7 = ( ( TYPE_2 ) ( VAR_3 . METHOD_3 ( VAR_8 ) ) ) ; VAR_7 . setText ( METHOD_4 ( VAR_1 ) . toString ( ) ) ; } return VAR_3 ; }\n"}
{"problem": "public boolean METHOD_1 ( long n ) { if ( n == INT_1 ) { return true ; } for ( int i = INT_2 ; i <= ( n / INT_1 ) ; i += INT_1 ) { if ( ( n % i ) == 0 ) { return false ; } } return true ; }\n", "fixed": "public boolean METHOD_1 ( long n ) { if ( n == 1 ) { return false ; } if ( n == INT_1 ) { return true ; } if ( ( n % INT_1 ) == 0 ) { return false ; } for ( int i = INT_2 ; i <= ( n / INT_1 ) ; i += INT_1 ) { if ( ( n % i ) == 0 ) { return false ; } } return true ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 file ) throws java.io.IOException , TYPE_3 { if ( ! ( file . METHOD_2 ( ) ) ) { return null ; } TYPE_1 VAR_1 = TYPE_4 . METHOD_3 ( file ) ; if ( METHOD_4 ( file ) ) { VAR_2 . METHOD_5 ( TYPE_4 . METHOD_6 ( VAR_1 ) , file ) ; } return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 file ) throws java.io.IOException , TYPE_3 { if ( ! ( file . METHOD_2 ( ) ) ) { return null ; } TYPE_1 VAR_1 = TYPE_4 . METHOD_3 ( file ) ; if ( ! ( METHOD_4 ( file ) ) ) { VAR_2 . METHOD_5 ( TYPE_4 . METHOD_6 ( VAR_1 ) , file ) ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = ( ( java.lang.String ) ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) ; TYPE_2 < TYPE_1 > VAR_4 = VAR_5 . get ( VAR_2 ) ; if ( VAR_4 == null ) { TYPE_2 < TYPE_1 > VAR_6 = new TYPE_2 < TYPE_1 > ( ) ; VAR_4 = VAR_5 . METHOD_3 ( VAR_2 , VAR_6 ) ; if ( VAR_4 == null ) VAR_4 = VAR_6 ; } VAR_4 . add ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = ( ( java.lang.String ) ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) ; if ( VAR_2 != null ) { TYPE_2 < TYPE_1 > VAR_4 = VAR_5 . get ( VAR_2 ) ; if ( VAR_4 == null ) { TYPE_2 < TYPE_1 > VAR_6 = new TYPE_2 < TYPE_1 > ( ) ; VAR_4 = VAR_5 . METHOD_3 ( VAR_2 , VAR_6 ) ; if ( VAR_4 == null ) VAR_4 = VAR_6 ; } VAR_4 . add ( VAR_1 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static void set ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 < TYPE_1 > VAR_3 = VAR_4 . get ( VAR_1 ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_2 < TYPE_1 > ( ) ; } VAR_3 . set ( VAR_2 ) ; }\n", "fixed": "public static void set ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 < TYPE_1 > VAR_3 = VAR_4 . get ( VAR_1 ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_2 < TYPE_1 > ( ) ; VAR_4 . put ( VAR_1 , VAR_3 ) ; } VAR_3 . set ( VAR_2 ) ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String path , TYPE_2 VAR_1 ) { TYPE_3 size = new TYPE_3 ( ) ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( size ) ; java.lang.System.out.println ( ( ( STRING_1 + ( size . x ) ) + ( size . y ) ) ) ; return TYPE_4 . METHOD_1 ( path , size . x , size . y ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String path , TYPE_2 VAR_1 ) { TYPE_3 size = new TYPE_3 ( ) ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( size ) ; return TYPE_4 . METHOD_1 ( path , size . x , size . y ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 VAR_4 = TYPE_4 . METHOD_2 ( this . VAR_5 . METHOD_3 ( ) , VAR_6 class ) ; VAR_4 . METHOD_4 ( this , VAR_2 , VAR_3 , VAR_7 , VAR_1 ) ; TYPE_5 VAR_8 = ( ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) instanceof TYPE_6 ) ? VAR_1 . METHOD_5 ( ) : VAR_1 . METHOD_7 ( ) ; VAR_8 . METHOD_8 ( 1 , VAR_1 ) ; VAR_9 . METHOD_9 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 VAR_4 = TYPE_4 . METHOD_2 ( this . VAR_5 . METHOD_3 ( ) , VAR_6 class ) ; if ( VAR_4 . METHOD_4 ( this , VAR_2 , VAR_3 , VAR_7 , VAR_1 ) ) { TYPE_5 VAR_8 = ( ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) instanceof TYPE_6 ) ? VAR_1 . METHOD_5 ( ) : VAR_1 . METHOD_7 ( ) ; VAR_8 . METHOD_8 ( 1 , VAR_1 ) ; VAR_9 . METHOD_9 ( ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 < TYPE_1 > VAR_3 = new TYPE_4 ( VAR_2 ) ; if ( ! ( VAR_3 . METHOD_3 ( ) ) ) { throw new TYPE_5 ( STRING_1 ) ; } return VAR_3 . get ( ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_2 ) ; if ( ! ( VAR_3 . METHOD_3 ( ) ) ) { throw new TYPE_5 ( STRING_1 ) ; } return VAR_3 . METHOD_1 ( ) ; }\n"}
{"problem": "private java.lang.String METHOD_1 ( java.lang.String key , java.lang.Object value ) { VAR_1 . info ( STRING_1 , this . VAR_2 . METHOD_2 ( ) ) ; int VAR_3 = ( this . VAR_2 . METHOD_2 ( ) ) ? 0 : VAR_4 ; TYPE_1 VAR_5 = new TYPE_1 ( key , value . toString ( ) , STRING_2 , STRING_3 , 0 , STRING_3 , VAR_3 , null , true , true ) ; VAR_1 . info ( STRING_4 , VAR_5 . toString ( ) ) ; return VAR_5 . toString ( ) ; }\n", "fixed": "private java.lang.String METHOD_1 ( java.lang.String key , java.lang.Object value ) { VAR_1 . info ( STRING_1 , this . VAR_2 . METHOD_2 ( ) ) ; int VAR_3 = ( this . VAR_2 . METHOD_2 ( ) ) ? 0 : VAR_4 ; TYPE_1 VAR_5 = new TYPE_1 ( key , value . toString ( ) , STRING_2 , STRING_3 , 1 , STRING_3 , VAR_3 , null , true , true ) ; VAR_1 . info ( STRING_4 , VAR_5 . toString ( ) ) ; return VAR_5 . toString ( ) ; }\n"}
{"problem": "public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > result = TYPE_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 , VAR_1 , VAR_2 ) ) ; if ( ( result == null ) || ( ! ( result . isEmpty ( ) ) ) ) return false ; else return true ; }\n", "fixed": "public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > result = TYPE_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 , VAR_1 , VAR_2 ) ) ; if ( ( result == null ) || ( result . isEmpty ( ) ) ) return false ; else return true ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { for ( int i = 0 ; i < ( ( VAR_1 . length ) - 1 ) ; i ++ ) { VAR_1 [ i ] . METHOD_2 ( VAR_1 [ ( i + 1 ) ] ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { for ( int i = 0 ; i < ( ( VAR_1 . length ) - 1 ) ; i ++ ) { VAR_1 [ i ] . METHOD_2 ( VAR_1 [ ( i + 1 ) ] ) ; } VAR_1 [ ( ( VAR_1 . length ) - 1 ) ] . METHOD_2 ( VAR_1 [ 0 ] ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { int VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_1 < TYPE_2 > VAR_3 = VAR_2 . METHOD_3 ( ) ; TYPE_2 VAR_4 ; if ( ( VAR_1 + 1 ) <= ( VAR_3 . size ( ) ) ) { VAR_1 ++ ; VAR_2 . METHOD_4 ( VAR_1 ) ; VAR_4 = VAR_3 . get ( VAR_1 ) ; } else { VAR_4 = VAR_3 . first ( ) ; } METHOD_5 ( VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( ) { int VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_1 < TYPE_2 > VAR_3 = VAR_2 . METHOD_3 ( ) ; TYPE_2 VAR_4 ; if ( ( VAR_1 + 1 ) <= ( ( VAR_3 . size ( ) ) - 1 ) ) { VAR_1 ++ ; VAR_2 . METHOD_4 ( VAR_1 ) ; VAR_4 = VAR_3 . get ( VAR_1 ) ; } else { VAR_4 = VAR_3 . first ( ) ; VAR_2 . METHOD_4 ( 0 ) ; } METHOD_5 ( VAR_4 ) ; }\n"}
{"problem": "public void update ( long VAR_1 ) { if ( VAR_2 . METHOD_1 ( ) ) { VAR_2 . update ( VAR_1 ) ; } TYPE_1 t = VAR_2 . getTime ( ) ; TYPE_1 VAR_3 = VAR_2 . METHOD_2 ( ) ; VAR_4 . setText ( t . METHOD_3 ( ) ) ; VAR_5 . setText ( t . METHOD_4 ( ) ) ; VAR_6 . setText ( VAR_3 . METHOD_3 ( ) ) ; VAR_7 . setText ( VAR_3 . METHOD_4 ( ) ) ; }\n", "fixed": "public void update ( long VAR_1 ) { if ( VAR_2 . METHOD_1 ( ) ) { VAR_2 . update ( VAR_1 ) ; TYPE_1 t = VAR_2 . getTime ( ) ; TYPE_1 VAR_3 = VAR_2 . METHOD_2 ( ) ; VAR_4 . setText ( t . METHOD_3 ( ) ) ; VAR_5 . setText ( t . METHOD_4 ( ) ) ; VAR_6 . setText ( VAR_3 . METHOD_3 ( ) ) ; VAR_7 . setText ( VAR_3 . METHOD_4 ( ) ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; } TYPE_1 VAR_3 = TYPE_1 . METHOD_4 ( new java.io.File ( ( ( TYPE_2 . METHOD_5 ( ) ) + STRING_1 ) ) ) ; android.content.Intent VAR_4 = new android.content.Intent ( VAR_5 ) ; VAR_4 . METHOD_6 ( VAR_6 , VAR_3 ) ; METHOD_7 ( VAR_4 , VAR_7 ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != null ) { count = 0 ; VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; } TYPE_1 VAR_3 = TYPE_1 . METHOD_4 ( new java.io.File ( ( ( TYPE_2 . METHOD_5 ( ) ) + STRING_1 ) ) ) ; android.content.Intent VAR_4 = new android.content.Intent ( VAR_5 ) ; VAR_4 . METHOD_6 ( VAR_6 , VAR_3 ) ; METHOD_7 ( VAR_4 , VAR_7 ) ; }\n"}
{"problem": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { VAR_4 = getActivity ( ) . METHOD_2 ( ) ; this . VAR_5 = 1 ; view = VAR_1 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( STRING_1 , STRING_2 , VAR_4 ) , VAR_2 , false ) ; METHOD_6 ( ) ; return view ; }\n", "fixed": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { VAR_4 = getActivity ( ) . METHOD_2 ( ) ; view = VAR_1 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( STRING_1 , STRING_2 , VAR_4 ) , VAR_2 , false ) ; METHOD_6 ( ) ; return view ; }\n"}
{"problem": "public void METHOD_1 ( long VAR_1 ) { VAR_2 = VAR_1 ; if ( ( this . VAR_3 ) == null ) { this . VAR_3 = new TYPE_1 ( VAR_4 , VAR_5 , ( ( STRING_1 + ( java.lang.Math.round ( ( ( VAR_6 ) * INT_1 ) ) ) ) + STRING_2 ) ) ; TYPE_2 . METHOD_2 ( ) . METHOD_3 ( new TYPE_3 ( ) { public void METHOD_4 ( ) { VAR_7 this . VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_7 this . VAR_8 . METHOD_6 ( ) ; } } ) ; } }\n", "fixed": "public void METHOD_1 ( long VAR_1 ) { VAR_2 = VAR_1 ; if ( ( this . VAR_3 ) == null ) { this . VAR_3 = new TYPE_1 ( VAR_4 , VAR_5 , ( ( STRING_1 + ( java.lang.Math.round ( ( ( VAR_6 ) * INT_1 ) ) ) ) + STRING_2 ) ) ; this . VAR_4 . METHOD_5 ( VAR_3 ) ; TYPE_2 . METHOD_2 ( ) . METHOD_3 ( new TYPE_3 ( ) { public void METHOD_4 ( ) { VAR_7 this . VAR_8 . METHOD_6 ( ) ; } } ) ; } }\n"}
{"project": "Lang", "bugId": 5, "problem": " public static Locale toLocale(final String str) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }", "fixed": " public static Locale toLocale(final String str) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n        }\n     }", "observations": "", "repairActions": ["assignAdd", "condBranIfElseAdd", "exThrowsAdd", "mcAdd", "objInstAdd", "retBranchAdd"], "repairPatterns": ["condBlockExcAdd", "condBlockRetAdd", "wrapsIfElse"]}
{"problem": "public < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 < TYPE_1 , java.lang.Double , TYPE_1 > VAR_1 , TYPE_3 < java.lang.Double > VAR_2 ) { TYPE_1 t = null ; int VAR_3 = VAR_4 . size ( ) ; for ( int i = 1 ; i < VAR_3 ; i ++ ) t = VAR_1 . METHOD_2 ( t , VAR_2 . METHOD_2 ( VAR_4 . get ( i ) ) ) ; return t ; }\n", "fixed": "public < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 < TYPE_1 , java.lang.Double , TYPE_1 > VAR_1 , TYPE_3 < java.lang.Double > VAR_2 ) { TYPE_1 t = null ; int VAR_3 = VAR_4 . size ( ) ; for ( int i = 0 ; i < VAR_3 ; i ++ ) t = VAR_1 . METHOD_2 ( t , VAR_2 . METHOD_2 ( VAR_4 . get ( i ) ) ) ; return t ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f855e388f47efe72118960c7849334d00faaf59c", "projectName": "chrisbanes.Android-PullToRefresh", "bugType": "Wrong Function Name", "problem": " \t@Override\n \tpublic void setReleaseLabel(CharSequence label) {\n \t\tfor (LoadingLayout layout : mLoadingLayouts) {\n\t\t\tlayout.setRefreshingLabel(label);\n \t\t}\n \t}", "fixed": " \t@Override\n \tpublic void setReleaseLabel(CharSequence label) {\n \t\tfor (LoadingLayout layout : mLoadingLayouts) {\n\t\t\tlayout.setReleaseLabel(label);\n \t\t}\n \t}", "sourceBeforeFix": "layout.setRefreshingLabel(label)", "sourceAfterFix": "layout.setReleaseLabel(label)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , VAR_4 . getText ( ) , VAR_5 . getText ( ) , VAR_6 . getText ( ) , VAR_7 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ) ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_3 , VAR_4 . getText ( ) , VAR_5 . getText ( ) , VAR_6 . getText ( ) , VAR_7 . METHOD_3 ( ) ) ) { VAR_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ) ) ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; java.lang.String VAR_2 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; METHOD_2 ( VAR_2 , VAR_1 ) ; this . VAR_3 = VAR_1 . METHOD_3 ( ) ; this . VAR_4 = this . VAR_5 ; this . VAR_6 = this . VAR_3 ; this . VAR_5 . METHOD_4 ( ) ; return this . VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; java.lang.String VAR_2 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; METHOD_2 ( VAR_2 , VAR_1 ) ; this . VAR_3 = VAR_1 . METHOD_3 ( ) ; this . VAR_4 = this . VAR_5 ; this . VAR_6 = this . VAR_3 ; return this . VAR_3 ; }\n"}
{"problem": "public double METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_1 ( ) ) ; TYPE_1 . METHOD_2 ( STRING_2 , VAR_2 . METHOD_1 ( ) ) ; return ( ( - ( ( VAR_1 . METHOD_1 ( ) ) + ( VAR_2 . METHOD_1 ( ) ) ) ) * FLOAT_1 ) / ( VAR_3 ) ; }\n", "fixed": "public double METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_1 ( ) ) ; TYPE_1 . METHOD_2 ( STRING_2 , VAR_2 . METHOD_1 ( ) ) ; return ( ( ( VAR_1 . METHOD_1 ( ) ) + ( VAR_2 . METHOD_1 ( ) ) ) * FLOAT_1 ) / ( VAR_3 ) ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_1 . isEmpty ( VAR_1 ) ) { VAR_2 = VAR_3 . METHOD_2 ( ) ; METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_4 ( ) ; } else { VAR_2 = VAR_3 . METHOD_5 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_4 ( ) ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_1 . isEmpty ( VAR_1 ) ) { VAR_2 = VAR_3 . METHOD_2 ( ) ; } else { VAR_2 = VAR_3 . METHOD_5 ( VAR_1 ) ; } METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_4 ( ) ; return true ; }\n"}
{"problem": "void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , java.lang.String VAR_5 , int i ) throws java.lang.Exception { TYPE_1 VAR_6 = new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , i ) ; VAR_7 . add ( VAR_6 ) ; METHOD_2 ( ) ; }\n", "fixed": "void METHOD_1 ( int y , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , java.lang.String VAR_5 , int i ) throws java.lang.Exception { TYPE_1 VAR_6 = new TYPE_1 ( y , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , i ) ; VAR_7 . add ( VAR_6 ) ; METHOD_2 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ) { TYPE_2 . METHOD_3 ( STRING_1 ) ; return ; } this . VAR_3 += METHOD_4 ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ) { TYPE_2 . METHOD_3 ( STRING_1 ) ; return ; } VAR_3 += METHOD_4 ( VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 , TYPE_4 , TYPE_5 { java.util.List < TYPE_1 > VAR_3 = this . METHOD_2 ( VAR_2 ) ; VAR_3 . remove ( VAR_1 ) ; try { VAR_2 . METHOD_3 ( this , VAR_3 . METHOD_4 ( new TYPE_1 [ VAR_3 . size ( ) ] ) ) ; } catch ( TYPE_4 | TYPE_3 | TYPE_5 VAR_4 ) { VAR_4 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 , TYPE_4 , TYPE_5 { java.util.List < TYPE_1 > VAR_3 = this . METHOD_2 ( VAR_2 ) ; VAR_3 . remove ( VAR_1 ) ; VAR_2 . METHOD_3 ( this , VAR_3 . METHOD_4 ( new TYPE_1 [ VAR_3 . size ( ) ] ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_2 . get ( VAR_2 ) ; TYPE_3 . assertTrue ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . contains ( STRING_1 ) ) ; TYPE_4 view = TYPE_5 . METHOD_4 ( VAR_1 , VAR_3 class , VAR_4 ) ; TYPE_3 . assertNotNull ( view ) ; TYPE_3 . assertNotNull ( view . METHOD_5 ( ) ) ; TYPE_3 . assertNotNull ( view . METHOD_5 ( ) . METHOD_6 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_2 . get ( VAR_2 ) ; TYPE_3 . assertTrue ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . contains ( STRING_1 ) ) ; TYPE_4 view = TYPE_5 . METHOD_4 ( VAR_1 , VAR_3 class ) ; TYPE_3 . assertNotNull ( view ) ; TYPE_3 . assertNotNull ( view . METHOD_5 ( ) ) ; TYPE_3 . assertNotNull ( view . METHOD_5 ( ) . METHOD_6 ( ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , java.lang.Long VAR_2 , java.lang.String name , java.lang.String label , java.lang.String VAR_3 ) throws TYPE_3 { if ( VAR_1 == null ) { throw new TYPE_3 ( STRING_1 ) ; } TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 , name , label , VAR_3 ) ; TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_4 ) . METHOD_5 ( ) ; return VAR_4 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , java.lang.Long VAR_2 , java.lang.String name , java.lang.String label , java.lang.String VAR_3 ) throws TYPE_3 { if ( VAR_1 == null ) { throw new TYPE_3 ( STRING_1 ) ; } if ( VAR_2 == ( - 1 ) ) VAR_2 = null ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 , name , label , VAR_3 ) ; TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_4 ) . METHOD_5 ( ) ; return VAR_4 ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String name , int VAR_1 , java.lang.String VAR_2 ) { try { TYPE_1 VAR_3 = c . METHOD_2 ( STRING_1 ) ; VAR_3 . METHOD_3 ( 1 , name ) ; VAR_3 . METHOD_4 ( INT_1 , VAR_1 ) ; VAR_3 . METHOD_3 ( INT_2 , VAR_2 ) ; VAR_3 . METHOD_5 ( ) ; return true ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_6 ( ) ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String name , int VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { try { TYPE_1 VAR_3 = c . METHOD_2 ( STRING_1 ) ; VAR_3 . METHOD_3 ( 1 , name ) ; VAR_3 . METHOD_4 ( INT_1 , VAR_1 ) ; VAR_3 . METHOD_3 ( INT_2 , VAR_2 ) ; VAR_3 . METHOD_5 ( ) ; return true ; } catch ( java.lang.Exception VAR_4 ) { throw VAR_4 ; } }\n"}
{"problem": "private void METHOD_1 ( ) { try { METHOD_2 ( getActivity ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) ; METHOD_5 ( getString ( VAR_2 ) ) ; METHOD_6 ( VAR_3 ) ; METHOD_7 ( true ) ; METHOD_8 ( METHOD_3 ( ) . getColor ( VAR_4 ) ) ; VAR_5 . METHOD_9 ( METHOD_3 ( ) . METHOD_4 ( VAR_6 ) ) ; } catch ( java.lang.Exception VAR_7 ) { } }\n", "fixed": "private void METHOD_1 ( ) { try { METHOD_2 ( getActivity ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) ; METHOD_6 ( VAR_3 ) ; METHOD_7 ( true ) ; METHOD_8 ( METHOD_3 ( ) . getColor ( VAR_4 ) ) ; VAR_5 . METHOD_9 ( METHOD_3 ( ) . METHOD_4 ( VAR_6 ) ) ; } catch ( java.lang.Exception VAR_7 ) { } }\n"}
{"problem": "public void METHOD_1 ( double VAR_1 , double VAR_2 ) { for ( int i = 0 ; i < VAR_1 ; i ++ ) { double VAR_3 = VAR_2 ; for ( int j = 0 ; j < VAR_2 ; j ++ ) { this . VAR_4 [ i ] [ j ] = 1 / VAR_3 ; } } }\n", "fixed": "public void METHOD_1 ( double VAR_1 , double VAR_2 ) { for ( int i = 0 ; i < VAR_1 ; i ++ ) { double VAR_3 = VAR_2 ; for ( int j = 0 ; j < ( VAR_2 + 1 ) ; j ++ ) { this . VAR_4 [ i ] [ j ] = 1 / VAR_3 ; } } }\n"}
{"problem": "public void METHOD_1 ( long VAR_1 , TYPE_1 [ ] VAR_2 , TYPE_1 [ ] VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_2 != null ) { count . METHOD_3 ( ) ; for ( TYPE_1 event : VAR_2 ) { TYPE_3 . assertTrue ( ( ( STRING_1 . equals ( event . getData ( 0 ) ) ) || ( STRING_2 . equals ( event . getData ( 0 ) ) ) ) ) ; } value += VAR_2 . length ; } VAR_4 = true ; }\n", "fixed": "public void METHOD_1 ( long VAR_1 , TYPE_1 [ ] VAR_2 , TYPE_1 [ ] VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; VAR_4 = true ; if ( VAR_2 != null ) { count . METHOD_3 ( ) ; for ( TYPE_1 event : VAR_2 ) { TYPE_3 . assertTrue ( ( ( STRING_1 . equals ( event . getData ( 0 ) ) ) || ( STRING_2 . equals ( event . getData ( 0 ) ) ) ) ) ; } value += VAR_2 . length ; } }\n"}
{"problem": "public static void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_1 && ( ( VAR_2 ) != null ) ) && ( VAR_2 . METHOD_2 ( ) ) ) { TYPE_1 . delete ( VAR_2 ) ; } try { VAR_3 . remove ( ) ; } catch ( java.lang.Throwable VAR_4 ) { TYPE_2 . METHOD_3 ( VAR_5 , STRING_1 , VAR_4 ) ; } }\n", "fixed": "public static void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_1 && ( ( VAR_2 ) != null ) ) && ( VAR_2 . METHOD_2 ( ) ) ) { } try { VAR_3 . remove ( ) ; } catch ( java.lang.Throwable VAR_4 ) { TYPE_2 . METHOD_3 ( VAR_5 , STRING_1 , VAR_4 ) ; } }\n"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n \t/**\n \t * Save the given global property to the database", "fixed": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t/**\n \t * Save the given global property to the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"problem": "public synchronized boolean METHOD_1 ( long VAR_1 ) throws java.lang.Exception { if ( VAR_2 ) { throw new java.lang.Exception ( STRING_1 ) ; } java.lang.Long VAR_3 = VAR_4 . get ( VAR_1 ) ; if ( VAR_3 != null ) { TYPE_1 VAR_5 = VAR_6 . get ( VAR_3 ) ; VAR_5 . METHOD_2 ( ) . METHOD_3 ( ) ; return true ; } return false ; }\n", "fixed": "public synchronized boolean METHOD_1 ( long VAR_1 ) throws java.lang.Exception { if ( VAR_2 ) { throw new java.lang.Exception ( STRING_1 ) ; } synchronized ( VAR_6 ) { java.lang.Long VAR_3 = VAR_4 . get ( VAR_1 ) ; if ( VAR_3 != null ) { TYPE_1 VAR_5 = VAR_6 . get ( VAR_3 ) ; VAR_5 . METHOD_2 ( ) . METHOD_3 ( ) ; return true ; } return false ; } }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) { int VAR_1 = INT_1 ; if ( ( args.length ) < 1 ) { VAR_1 = java.lang.Integer.parseInt ( args [ 0 ] ) ; } TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . METHOD_1 ( ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { int VAR_1 = INT_1 ; if ( ( args.length ) > 0 ) { VAR_1 = java.lang.Integer.parseInt ( args [ 0 ] ) ; } TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . METHOD_1 ( ) ; }\n"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Wrong Function Name", "problem": "                 for (CodegenParameter cp : operation.allParams) {\n                    String jsdocType = getJSDocTypeWithBraces(cp);\n                     cp.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n                 }\n                String jsdocType = getJSDocTypeWithBraces(operation);\n                 operation.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n             }\n         }", "fixed": "                 for (CodegenParameter cp : operation.allParams) {\n                    String jsdocType = getJSDocType(cp);\n                     cp.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n                 }\n                String jsdocType = getJSDocType(operation);\n                 operation.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n             }\n         }", "sourceBeforeFix": "getJSDocTypeWithBraces(operation)", "sourceAfterFix": "getJSDocType(operation)"}
{"fixCommitSHA1": "91c086b7af22b6cfaf2f66b2c872b752dc10a19c", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "             }\n             LOG.trace(\"List files {} found {} files\", file.getAbsoluteFilePath(), files.size());\n             for (FTPFile f : files) {\n                if (f.getName().equals(file.getFileName())) {\n                     newLastModified = f.getTimestamp().getTimeInMillis();\n                     newLength = f.getSize();\n                 }", "fixed": "             }\n             LOG.trace(\"List files {} found {} files\", file.getAbsoluteFilePath(), files.size());\n             for (FTPFile f : files) {\n                if (f.getName().equals(file.getFileNameOnly())) {\n                     newLastModified = f.getTimestamp().getTimeInMillis();\n                     newLength = f.getSize();\n                 }", "sourceBeforeFix": "file.getFileName()", "sourceAfterFix": "file.getFileNameOnly()"}
{"problem": "public boolean add ( TYPE_1 VAR_1 ) { if ( ( this . isEmpty ( ) ) && ( VAR_1 instanceof TYPE_2 ) ) { this . METHOD_1 ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ; this . METHOD_2 ( VAR_1 ) ; return true ; } TYPE_3 VAR_2 = this . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; if ( VAR_2 != null ) { this . add ( VAR_2 ) ; return true ; } return false ; }\n", "fixed": "public boolean add ( TYPE_1 VAR_1 ) { if ( ( ( this . METHOD_3 ( ) ) == null ) && ( VAR_1 instanceof TYPE_2 ) ) { this . METHOD_1 ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ; this . METHOD_2 ( VAR_1 ) ; return true ; } TYPE_3 VAR_2 = this . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; if ( VAR_2 != null ) { this . add ( VAR_2 ) ; return true ; } return false ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface QuickfixjEndpointBuilder\n             extends\n                 QuickfixjEndpointConsumerBuilder, QuickfixjEndpointProducerBuilder {\n         default AdvancedQuickfixjEndpointBuilder advanced() {", "fixed": "     \n    public interface QuickfixjEndpointBuilder\n             extends\n                 QuickfixjEndpointConsumerBuilder, QuickfixjEndpointProducerBuilder {\n         default AdvancedQuickfixjEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtmosEndpointBuilder\n             extends\n                 AtmosEndpointConsumerBuilder, AtmosEndpointProducerBuilder {\n         default AdvancedAtmosEndpointBuilder advanced() {", "fixed": "     \n    public interface AtmosEndpointBuilder\n             extends\n                 AtmosEndpointConsumerBuilder, AtmosEndpointProducerBuilder {\n         default AdvancedAtmosEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private void METHOD_1 ( TYPE_1 error ) { android.content.Intent intent = new android.content.Intent ( VAR_1 ) ; switch ( error ) { case VAR_2 : intent . METHOD_2 ( VAR_3 , TYPE_2 . METHOD_3 ( ) ) ; break ; case VAR_4 : intent . METHOD_2 ( VAR_3 , TYPE_3 . METHOD_3 ( ) ) ; break ; case VAR_5 : intent . METHOD_2 ( VAR_3 , TYPE_4 . METHOD_3 ( ) ) ; break ; } if ( VAR_6 . METHOD_4 ( ) ) METHOD_5 ( ) ; METHOD_6 ( ) . METHOD_7 ( intent ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 error ) { android.content.Intent intent = new android.content.Intent ( VAR_1 ) ; switch ( error ) { case VAR_2 : intent . METHOD_2 ( VAR_3 , TYPE_2 . METHOD_3 ( ) ) ; break ; case VAR_4 : intent . METHOD_2 ( VAR_3 , TYPE_3 . METHOD_3 ( ) ) ; break ; case VAR_5 : intent . METHOD_2 ( VAR_3 , TYPE_4 . METHOD_3 ( ) ) ; break ; } METHOD_6 ( ) . METHOD_7 ( intent ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"problem": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; TYPE_4 VAR_5 = ( ( TYPE_4 ) ( METHOD_3 ( ) . METHOD_4 ( VAR_6 ) ) ) ; VAR_7 = new TYPE_5 ( METHOD_3 ( ) , getActivity ( ) , getContext ( ) , VAR_5 , this ) ; return view ; }\n", "fixed": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 VAR_5 = ( ( TYPE_4 ) ( METHOD_3 ( ) . METHOD_4 ( VAR_6 ) ) ) ; VAR_7 = new TYPE_5 ( METHOD_3 ( ) , getActivity ( ) , getContext ( ) , VAR_5 , this ) ; return VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"problem": "private void init ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { VAR_4 = new TYPE_4 ( getActivity ( ) . METHOD_1 ( ) , VAR_5 . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_6 , VAR_3 ) ; VAR_7 . METHOD_3 ( VAR_4 ) ; getActivity ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; ( ( TYPE_5 ) ( getActivity ( ) ) ) . METHOD_6 ( VAR_8 ) ; ( ( TYPE_5 ) ( getActivity ( ) ) ) . METHOD_7 ( ) . METHOD_8 ( true ) ; }\n", "fixed": "private void init ( TYPE_1 VAR_1 ) { getActivity ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; ( ( TYPE_5 ) ( getActivity ( ) ) ) . METHOD_6 ( VAR_8 ) ; ( ( TYPE_5 ) ( getActivity ( ) ) ) . METHOD_7 ( ) . METHOD_8 ( true ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { java.lang.String name = VAR_1 . getText ( ) ; if ( VAR_2 . METHOD_2 ( name ) ) { VAR_2 . METHOD_1 ( name ) ; VAR_3 . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) ; VAR_5 . METHOD_5 ( new TYPE_1 ( VAR_5 ) ) ; } else { java.lang.System.out.println ( STRING_1 ) ; } }\n", "fixed": "private void METHOD_1 ( ) { java.lang.String name = VAR_1 . getText ( ) ; if ( VAR_2 . METHOD_2 ( name ) ) { VAR_2 . METHOD_1 ( name ) ; VAR_3 . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) ; VAR_5 . METHOD_5 ( new TYPE_1 ( VAR_5 ) ) ; } else { } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
