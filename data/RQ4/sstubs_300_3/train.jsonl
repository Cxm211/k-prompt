{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b47d226858ebcd6e4f6368a3c7132897456dfdb0", "projectName": "apache.camel", "bugType": "Change Binary Operator", "problem": "         return new BinaryPredicateSupport<E>(left, right) {\n             protected boolean matches(E exchange, Object leftValue, Object rightValue) {\n                return compare(leftValue, rightValue) < 0;\n             }\n             protected String getOperationText() {", "fixed": "         return new BinaryPredicateSupport<E>(left, right) {\n             protected boolean matches(E exchange, Object leftValue, Object rightValue) {\n                return compare(leftValue, rightValue) >= 0;\n             }\n             protected String getOperationText() {", "sourceBeforeFix": "compare(leftValue,rightValue) < 0", "sourceAfterFix": "compare(leftValue,rightValue) >= 0"}
{"fixCommitSHA1": "76063c69b78baee602935b2296eeac234030b5de", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "                     requestTimeout = p.getRequestTimeoutInMs();\n                 }\n                finishChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));\n                 abort(this.nettyResponseFuture, new TimeoutException(String.format(\"No response received after %s\", requestTimeout)));\n                 this.nettyResponseFuture = null;", "fixed": "                     requestTimeout = p.getRequestTimeoutInMs();\n                 }\n                markChannelNotReadable(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));\n                 abort(this.nettyResponseFuture, new TimeoutException(String.format(\"No response received after %s\", requestTimeout)));\n                 this.nettyResponseFuture = null;", "sourceBeforeFix": "finishChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class))", "sourceAfterFix": "markChannelNotReadable(channel.getPipeline().getContext(NettyAsyncHttpProvider.class))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "58ce4c40970fc29d00e5740bc6098eb475668e86", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "             if (!found) {\n                 boolean reqd = true;\n                if (mCheckUnusedThrows) {\n                     final ClassResolver cr =\n                         new ClassResolver(\n                             getClassLoader(),", "fixed": "             if (!found) {\n                 boolean reqd = true;\n                if (mAllowUndeclaredRTE) {\n                     final ClassResolver cr =\n                         new ClassResolver(\n                             getClassLoader(),", "sourceBeforeFix": "if (mCheckUnusedThrows) {   processImport(aAST); } ", "sourceAfterFix": "if (mAllowUndeclaredRTE) {   processImport(aAST); } "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b2a7d26514776c6404a755f65d5a9feaab3c4f6a", "projectName": "nhaarman.ListViewAnimations", "bugType": "Change Identifier Used", "problem": " \t\t\tcontextualUndoView.findViewById(mUndoActionId).setOnClickListener(new UndoListener(contextualUndoView));\n \t\t}\n\t\tView contentView = super.getView(position, contextualUndoView.getContentView(), parent);\n \t\tcontextualUndoView.updateContentView(contentView);\n \t\tlong itemId = getItemId(position);", "fixed": " \t\t\tcontextualUndoView.findViewById(mUndoActionId).setOnClickListener(new UndoListener(contextualUndoView));\n \t\t}\n\t\tView contentView = super.getView(position, contextualUndoView.getContentView(), contextualUndoView);\n \t\tcontextualUndoView.updateContentView(contentView);\n \t\tlong itemId = getItemId(position);", "sourceBeforeFix": "super.getView(position,contextualUndoView.getContentView(),parent)", "sourceAfterFix": "super.getView(position,contextualUndoView.getContentView(),contextualUndoView)"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.loadAll(true);", "fixed": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.loadAll(true);", "sourceBeforeFix": "hazelcastFactory.newHazelcastInstance()", "sourceAfterFix": "hazelcastFactory.newHazelcastInstance(newConfig())"}
{"fixCommitSHA1": "d5f8dbfc487cc66a50f7bfbbf03b4a0a8f9cdec3", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 .addAll(Arrays.asList(classes))\n                 .build();\n        return new RetryDriver(maxRetryAttempts, minSleepTime, maxSleepTime, scaleFactor, maxRetryTime, exceptions);\n     }\n     public RetryDriver stopOnIllegalExceptions()", "fixed": "                 .addAll(Arrays.asList(classes))\n                 .build();\n        return new RetryDriver(maxAttempts, minSleepTime, maxSleepTime, scaleFactor, maxRetryTime, exceptions);\n     }\n     public RetryDriver stopOnIllegalExceptions()", "sourceBeforeFix": "new RetryDriver(maxRetryAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptions)", "sourceAfterFix": "new RetryDriver(maxAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptions)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(639)", "sourceAfterFix": "new StringBuilder(638)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomixMultiMapEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AtomixMultiMapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomixMultiMapEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AtomixMultiMapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSshEndpointBuilder\n             extends\n                 AdvancedSshEndpointConsumerBuilder, AdvancedSshEndpointProducerBuilder {\n         default SshEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSshEndpointBuilder\n             extends\n                 AdvancedSshEndpointConsumerBuilder, AdvancedSshEndpointProducerBuilder {\n         default SshEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedIrcEndpointBuilder\n             extends\n                 AdvancedIrcEndpointConsumerBuilder, AdvancedIrcEndpointProducerBuilder {\n         default IrcEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedIrcEndpointBuilder\n             extends\n                 AdvancedIrcEndpointConsumerBuilder, AdvancedIrcEndpointProducerBuilder {\n         default IrcEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"fixCommitSHA1": "1591487a2f941e354cb9bb8419fc8a946defa216", "projectName": "eclipse.vert.x", "bugType": "Change Identifier Used", "problem": "       assertEquals(200, resp.statusCode());\n       resp.bodyHandler(buff -> {\n         assertEquals(\"Hello World\", buff.toString());\n        testComplete();\n       });\n     });\n     await();", "fixed": "       assertEquals(200, resp.statusCode());\n       resp.bodyHandler(buff -> {\n         assertEquals(\"Hello World\", buff.toString());\n        complete();\n       });\n     });\n     await();", "sourceBeforeFix": "testComplete()", "sourceAfterFix": "complete()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales() throws APIException;\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "fixed": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales();\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedXmppEndpointBuilder\n             extends\n                 AdvancedXmppEndpointConsumerBuilder, AdvancedXmppEndpointProducerBuilder {\n         default XmppEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedXmppEndpointBuilder\n             extends\n                 AdvancedXmppEndpointConsumerBuilder, AdvancedXmppEndpointProducerBuilder {\n         default XmppEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "b366b2fb1840d4df542a69a8021a2e5498f7eec2", "projectName": "google.guava", "bugType": "Same Function Swap Args", "problem": "     list.add(new MockRunnable(countDownLatch), exec);\n     list.add(new MockRunnable(countDownLatch), exec);\n     list.add(new MockRunnable(countDownLatch), exec);\n    assertEquals(countDownLatch.getCount(), 3L);\n     list.execute();", "fixed": "     list.add(new MockRunnable(countDownLatch), exec);\n     list.add(new MockRunnable(countDownLatch), exec);\n     list.add(new MockRunnable(countDownLatch), exec);\n    assertEquals(3L, countDownLatch.getCount());\n     list.execute();", "sourceBeforeFix": "assertEquals(countDownLatch.getCount(),3L)", "sourceAfterFix": "assertEquals(3L,countDownLatch.getCount())"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void createFile(boolean recursive, String path, boolean directory, int columns,\n       ByteBuffer metadata, long blockSizeByte, long creationTimeMs) {\n     if (INACTIVE) {\n       return;", "fixed": "     }\n   }\n  public synchronized void createFile(boolean recursive, String path, boolean directory, int columns,\n       ByteBuffer metadata, long blockSizeByte, long creationTimeMs) {\n     if (INACTIVE) {\n       return;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "35eb6a64e279fdd6f92b00764aec0e66e0a8d82f", "projectName": "swagger-api.swagger-core", "bugType": "Change Modifier", "problem": " public class SecurityParser {\n    static class SecuritySchemePair {\n         public String key;\n         public SecurityScheme securityScheme;\n     }", "fixed": " public class SecurityParser {\n    public static class SecuritySchemePair {\n         public String key;\n         public SecurityScheme securityScheme;\n     }", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     private final boolean closeError;\n     \n    private final AuditEvemtFormatter formatter;\n     /**\n      * Creates a new {@code DefaultLogger} instance.", "fixed": "     private final boolean closeError;\n     \n    private final AuditEventFormatter formatter;\n     /**\n      * Creates a new {@code DefaultLogger} instance.", "sourceBeforeFix": "/**   * Formatter for the log message.   */ private final AuditEvemtFormatter formatter; ", "sourceAfterFix": "/**   * Formatter for the log message.   */ private final AuditEventFormatter formatter; "}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "d194da897cf8b34641f4fe5634dcf5af3b2544ed", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "             } catch (final ExecutionException e) {\n                 cause = e.getCause();\n             }\n            assertTrue(cause instanceof SSLHandshakeException, \"Expected an SSLHandshakeException, got a \" + cause);\n             trust.set(true);", "fixed": "             } catch (final ExecutionException e) {\n                 cause = e.getCause();\n             }\n            assertNotNull(cause);\n             trust.set(true);", "sourceBeforeFix": "SSLHandshakeException.class", "sourceAfterFix": "Exception.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d1cb70710f70a129598e92a638d536b9207aa01f", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "  * Created by russellb337 on 7/9/15.\n  */\n public interface Response {\n    ResponseImpl schema(Property property);\n    ResponseImpl description(String description);\n    ResponseImpl example(String type, Object example);\n    ResponseImpl header(String name, Property property);\n    ResponseImpl headers(Map<String, Property> headers);\n     String getDescription();", "fixed": "  * Created by russellb337 on 7/9/15.\n  */\n public interface Response {\n    Response schema(Property property);\n    Response description(String description);\n    Response example(String type, Object example);\n    Response header(String name, Property property);\n    Response headers(Map<String, Property> headers);\n     String getDescription();", "sourceBeforeFix": "ResponseImpl example(String type,Object example); ", "sourceAfterFix": "Response example(String type,Object example); "}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void closeRegion(final String regionname, final String serverName)\n   throws IOException {\n    closeRegion(Bytes.toBytesBinary(regionname), serverName);\n   }\n   /**", "fixed": "    */\n   public void closeRegion(final String regionname, final String serverName)\n   throws IOException {\n    closeRegion(Bytes.toBytes(regionname), serverName);\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(regionname)", "sourceAfterFix": "Bytes.toBytes(regionname)"}
{"fixCommitSHA1": "af87fe0e2580cafb6b563688f119b3d40ae100f2", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    TestSuiteEnvironment.getServerAddress(), serverPort);\n         }\n         protected abstract Policy getPolicy();", "fixed": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    CONTAINER_0.equals(containerId) ? TestSuiteEnvironment.getServerAddress() : TestSuiteEnvironment.getServerAddressNode1(),\n                    serverPort);\n         }\n         protected abstract Policy getPolicy();", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ac418afcea37e4f1def3780fea94c2454ab5c866", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                         reloadRequired = reloadRequired || Logging.requiresReload(attribute.getFlags());\n                     }\n                     if (restartRequired) {\n                        context.restartRequired();\n                     } else if (reloadRequired) {\n                        context.reloadRequired();\n                     }\n                 }\n                 performRollback(context, configuration, name, originalModel);", "fixed": "                         reloadRequired = reloadRequired || Logging.requiresReload(attribute.getFlags());\n                     }\n                     if (restartRequired) {\n                        context.revertRestartRequired();\n                     } else if (reloadRequired) {\n                        context.revertReloadRequired();\n                     }\n                 }\n                 performRollback(context, configuration, name, originalModel);", "sourceBeforeFix": "context.restartRequired()", "sourceAfterFix": "context.revertRestartRequired()"}
{"fixCommitSHA1": "25923003ecdba4ed236618b917dadeb36e74addf", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                }\r\n                if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "fixed": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).byteAt(0);\n         }\n        return Byte.valueOf(value.toString());\n     }\n     @Override", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).byteAt(0);\n         }\n        return Byte.parseByte(value.toString());\n     }\n     @Override", "sourceBeforeFix": "Byte.valueOf(value.toString())", "sourceAfterFix": "Byte.parseByte(value.toString())"}
{"fixCommitSHA1": "95aa9c0ad64a2feccfc97ccb2c1194e9ac83872d", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "         configuration.getCreateDependencies().add(new DependencyConfigurator<StatelessSessionComponentCreateService>() {\n             @Override\n             public void configureDependency(ServiceBuilder<?> builder, StatelessSessionComponentCreateService service) {\n                builder.addDependency(RegistryInstallerService.SERVICE_NAME);\n                 builder.addDependency(DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"clustering\", \"group\", \"ejb\", \"default\"), Group.class, service.getGroupInjector());\n                 builder.addDependency(DependencyType.OPTIONAL, EJBRemoteConnectorService.SERVICE_NAME);\n             }", "fixed": "         configuration.getCreateDependencies().add(new DependencyConfigurator<StatelessSessionComponentCreateService>() {\n             @Override\n             public void configureDependency(ServiceBuilder<?> builder, StatelessSessionComponentCreateService service) {\n                builder.addDependency(DependencyType.OPTIONAL, RegistryInstallerService.SERVICE_NAME);\n                 builder.addDependency(DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"clustering\", \"group\", \"ejb\", \"default\"), Group.class, service.getGroupInjector());\n                 builder.addDependency(DependencyType.OPTIONAL, EJBRemoteConnectorService.SERVICE_NAME);\n             }", "sourceBeforeFix": "builder.addDependency(RegistryInstallerService.SERVICE_NAME)", "sourceAfterFix": "builder.addDependency(DependencyType.OPTIONAL,RegistryInstallerService.SERVICE_NAME)"}
{"fixCommitSHA1": "1c3c663ba7d55fcd33af1502ca426274d51d2ba1", "projectName": "apache.flink", "bugType": "Change Binary Operator", "problem": " \t\t}\n\t\tfor (int i = 0; i < maxIndex; i++) {\n \t\t\tfinal String fullKey = key + '.' + i;\n \t\t\tif (properties.containsKey(fullKey)) {", "fixed": " \t\t}\n\t\tfor (int i = 0; i <= maxIndex; i++) {\n \t\t\tfinal String fullKey = key + '.' + i;\n \t\t\tif (properties.containsKey(fullKey)) {", "sourceBeforeFix": "i < maxIndex", "sourceAfterFix": "i <= maxIndex"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {", "sourceBeforeFix": "context.var(\"long\")", "sourceAfterFix": "context.var(\"long\",2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4e1cc538aaa75a9d0e9514effa6e3f3beeab3985", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t\tfor (int i = 0, n = handles.length; i < n; i++) {\r\n \t\t\t\t\tString path = relativePaths[i];\r\n \t\t\t\t\tif (!path.endsWith(suffix)) continue;\r\n\t\t\t\t\thandles[i] = new AndroidFileHandle(assets, new File(file, path), type);\r\n \t\t\t\t\tcount++;\r\n \t\t\t\t}\r\n \t\t\t\tif (count < relativePaths.length) {\r", "fixed": " \t\t\t\tfor (int i = 0, n = handles.length; i < n; i++) {\r\n \t\t\t\t\tString path = relativePaths[i];\r\n \t\t\t\t\tif (!path.endsWith(suffix)) continue;\r\n\t\t\t\t\thandles[count] = new AndroidFileHandle(assets, new File(file, path), type);\r\n \t\t\t\t\tcount++;\r\n \t\t\t\t}\r\n \t\t\t\tif (count < relativePaths.length) {\r", "sourceBeforeFix": "handles[i]", "sourceAfterFix": "handles[count]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface QuickfixjEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedQuickfixjEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface QuickfixjEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedQuickfixjEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "198ab0e862cdf33e8dff37bf24676ffcb392ed82", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     for (String poolName : poolsToRedistribute) {\n       if (LOG.isDebugEnabled()) {\n        LOG.info(\"Processing changes for pool \" + poolName + \": \" + pools.get(poolName));\n       }\n       processPoolChangesOnMasterThread(poolName, hasRequeues, syncWork);\n     }", "fixed": "     for (String poolName : poolsToRedistribute) {\n       if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Processing changes for pool \" + poolName + \": \" + pools.get(poolName));\n       }\n       processPoolChangesOnMasterThread(poolName, hasRequeues, syncWork);\n     }", "sourceBeforeFix": "LOG.info(\"Processing changes for pool \" + poolName + \": \"+ pools.get(poolName))", "sourceAfterFix": "LOG.debug(\"Processing changes for pool \" + poolName + \": \"+ pools.get(poolName))"}
{"fixCommitSHA1": "0682e8dd41045e3375b61d3d76f6e6991e98c869", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "             }\n         }\n         if (simple.getFromReceivedDate() != null) {\n            String s = simple.getFromSentDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));", "fixed": "             }\n         }\n         if (simple.getFromReceivedDate() != null) {\n            String s = simple.getFromReceivedDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));", "sourceBeforeFix": "simple.getFromSentDate()", "sourceAfterFix": "simple.getFromReceivedDate()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     \n    public ListToTreeSelectionModelWrapper(JTreeTable jTreeTable) {\n         treeTable = jTreeTable;\n         getListSelectionModel().addListSelectionListener(createListSelectionListener());\n     }", "fixed": "     \n    ListToTreeSelectionModelWrapper(JTreeTable jTreeTable) {\n         treeTable = jTreeTable;\n         getListSelectionModel().addListSelectionListener(createListSelectionListener());\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1aaffaf8df78d17e71243df6d94d687893802bb5", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     result.setJob(fromThrift(lineageInfo.getJob()));\n     result.setCreationTimeMs(lineageInfo.getCreationTimeMs());\n     result.setParents(lineageInfo.getParents());\n    result.setChildren(lineageInfo.getParents());\n     return result;\n   }", "fixed": "     result.setJob(fromThrift(lineageInfo.getJob()));\n     result.setCreationTimeMs(lineageInfo.getCreationTimeMs());\n     result.setParents(lineageInfo.getParents());\n    result.setChildren(lineageInfo.getChildren());\n     return result;\n   }", "sourceBeforeFix": "fileInfo.getPath()", "sourceAfterFix": "fileInfo.getUfsPath()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6bd9731f77303b53b9a03b22be0c57438e096355", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "         HttpClient http = new HttpClient();\nUser user = new User(http.get(\"http:\n        assertFalse(user.isGeoEnabled());\n         assertFalse(user.isVerified());\n         assertEquals(id1, user.getName());\n         assertEquals(id1, user.getScreenName());", "fixed": "         HttpClient http = new HttpClient();\nUser user = new User(http.get(\"http:\n        assertTrue(user.isGeoEnabled());\n         assertFalse(user.isVerified());\n         assertEquals(id1, user.getName());\n         assertEquals(id1, user.getScreenName());", "sourceBeforeFix": "assertFalse(user.isGeoEnabled())", "sourceAfterFix": "assertTrue(user.isGeoEnabled())"}
{"fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n    assertEquals(4, stopwatch.elapsedMillis());\n   }\n   public void testElapsedMillis_multipleSegments() {", "fixed": "     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n    assertEquals(4, stopwatch.elapsed(MILLISECONDS));\n   }\n   public void testElapsedMillis_multipleSegments() {", "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}
{"fixCommitSHA1": "8a9e1bcbff1ff10cf122b23b3a1aa437f02a2086", "projectName": "gephi.gephi", "bugType": "Change Unary Operator\t", "problem": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "fixed": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && !sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "sourceBeforeFix": "sourceEdgeTextData.getText().isEmpty()", "sourceAfterFix": "!sourceEdgeTextData.getText().isEmpty()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"fixCommitSHA1": "48b99e43fca1306ba54dad61bdacd4259673552b", "projectName": "druid-io.druid", "bugType": "Change Caller in Function Call", "problem": "     synchronized (lock) {\n       if (segmentsToLoad.contains(holder)) {\n         if ((callback != null)) {\n          currentlyProcessing.addCallback(callback);\n         }\n         return;\n       }", "fixed": "     synchronized (lock) {\n       if (segmentsToLoad.contains(holder)) {\n         if ((callback != null)) {\n          holder.addCallback(callback);\n         }\n         return;\n       }", "sourceBeforeFix": "currentlyProcessing.addCallback(callback)", "sourceAfterFix": "holder.addCallback(callback)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "8659914038f88e67dc9bd80c4e0c57bb341e07c0", "projectName": "perwendel.spark", "bugType": "Change Modifier", "problem": "      *\n      * @param page the custom 500 internal server error page.\n      */\n    public void internalServerError(String page) {\n         CustomErrorPages.add(500, page);\n     }", "fixed": "      *\n      * @param page the custom 500 internal server error page.\n      */\n    public synchronized void internalServerError(String page) {\n         CustomErrorPages.add(500, page);\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(50);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "fixed": "                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "         parent.getRegionName(), rowContent, COL_SPLITB);\n     if (!hasReferencesA && !hasReferencesB) {\n      LOG.info(\"Deleting region \" + parent.getRegionName() +\n         \" because daughter splits no longer hold references\");\n       HRegion.deleteRegion(master.fs, master.rootdir, parent);", "fixed": "         parent.getRegionName(), rowContent, COL_SPLITB);\n     if (!hasReferencesA && !hasReferencesB) {\n      LOG.info(\"Deleting region \" + parent.getRegionNameAsString() +\n         \" because daughter splits no longer hold references\");\n       HRegion.deleteRegion(master.fs, master.rootdir, parent);", "sourceBeforeFix": "info.getRegionName()", "sourceAfterFix": "info.getRegionNameAsString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6d74c7fe901c4279f977a5d9b9f76f833e31cdb6", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     static final HazelcastProperty MAX_TOLERATED_MISS_COUNT\n             = new HazelcastProperty(\"hazelcast.invalidation.max.tolerated.miss.count\", 10);\n     static final HazelcastProperty RECONCILIATION_INTERVAL_SECONDS\n            = new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\", 1, SECONDS);\n     static final HazelcastProperty MIN_RECONCILIATION_INTERVAL_SECONDS\n            = new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\", 1, SECONDS);\n     static final long RESCHEDULE_FAILED_INITIALIZATION_AFTER_MILLIS = 500;", "fixed": "     static final HazelcastProperty MAX_TOLERATED_MISS_COUNT\n             = new HazelcastProperty(\"hazelcast.invalidation.max.tolerated.miss.count\", 10);\n     static final HazelcastProperty RECONCILIATION_INTERVAL_SECONDS\n            = new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\", 60, SECONDS);\n     static final HazelcastProperty MIN_RECONCILIATION_INTERVAL_SECONDS\n            = new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\", 30, SECONDS);\n     static final long RESCHEDULE_FAILED_INITIALIZATION_AFTER_MILLIS = 500;", "sourceBeforeFix": "new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\",1,SECONDS)", "sourceAfterFix": "new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\",30,SECONDS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(LLOAD, context.var(\"long\"));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n         _seperator(mw, context);", "fixed": "         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n         _seperator(mw, context);", "sourceBeforeFix": "context.var(\"long\")", "sourceAfterFix": "context.var(\"long\",2)"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "fixed": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 15808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n     /**", "fixed": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 10808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n     /**", "sourceBeforeFix": "id=15800", "sourceAfterFix": "id=10800"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "031f769fa3c610748b48bc105b4518c880161d0a", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t*/\n \tpublic Vector2 getLocalAxisA(){\n\t\tjniGetLocalAnchorA(addr, tmp);\n \t\tlocalAxisA.set(tmp[0], tmp[1]);\n \t\treturn localAxisA;\n \t}", "fixed": " \t*/\n \tpublic Vector2 getLocalAxisA(){\n\t\tjniGetLocalAxisA(addr, tmp);\n \t\tlocalAxisA.set(tmp[0], tmp[1]);\n \t\treturn localAxisA;\n \t}", "sourceBeforeFix": "jniGetLocalAnchorA(addr,tmp)", "sourceAfterFix": "jniGetLocalAxisA(addr,tmp)"}
{"fixCommitSHA1": "cf2a9d3aefba1c7d6d4ad399e762edf7a6f6e111", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Identifier Used", "problem": "             connection.rollback();\n          }\n         setNetworkTimeout(connection, networkTimeout);\n          return true;\n       }", "fixed": "             connection.rollback();\n          }\n         setNetworkTimeout(connection, originalTimeout);\n          return true;\n       }", "sourceBeforeFix": "setNetworkTimeout(connection,networkTimeout)", "sourceAfterFix": "setNetworkTimeout(connection,originalTimeout)"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                         flags.add(Flag.CANCELLED);\n                         response.get(OUTCOME).set(CANCELLED);\n                         response.get(FAILURE_DESCRIPTION).set(\"Operation cancelled\");\n                        response.set(ROLLED_BACK).set(true);\n                         return ResultAction.ROLLBACK;\n                     }\n                 }", "fixed": "                         flags.add(Flag.CANCELLED);\n                         response.get(OUTCOME).set(CANCELLED);\n                         response.get(FAILURE_DESCRIPTION).set(\"Operation cancelled\");\n                        response.get(ROLLED_BACK).set(true);\n                         return ResultAction.ROLLBACK;\n                     }\n                 }", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "1568a560348de41adffd9b4a181bcf64b4f01073", "projectName": "facebook.presto", "bugType": "Change Unary Operator\t", "problem": "         AggregationNode child = (AggregationNode) input;\n        if (isDistinct(child)) {\n             return Optional.empty();\n         }", "fixed": "         AggregationNode child = (AggregationNode) input;\n        if (!isDistinct(child)) {\n             return Optional.empty();\n         }", "sourceBeforeFix": "isDistinct(child)", "sourceAfterFix": "!isDistinct(child)"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.error(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "fixed": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.warn(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "sourceBeforeFix": "LOG.error(\"Failed to find \" + baseDirectory.getAbsolutePath())", "sourceAfterFix": "LOG.warn(\"Failed to find \" + baseDirectory.getAbsolutePath())"}
{"fixCommitSHA1": "46d3a4007fe1418d53baabc16dec39275079684b", "projectName": "Activiti.Activiti", "bugType": "Same Function More Args", "problem": "     @Override\n     protected List<ProcessEngineConfigurator> getConfigurators() {\n         ProcessEngineConfigurator configurator = new SecureServiceTaskConfigurator()\n                .setWhiteListedShellCommands(new HashSet<String>(Arrays.asList(\"ls\", \"pwd\")));\n         return Arrays.asList(configurator);\n     }", "fixed": "     @Override\n     protected List<ProcessEngineConfigurator> getConfigurators() {\n         ProcessEngineConfigurator configurator = new SecureServiceTaskConfigurator()\n                .setWhiteListedShellCommands(new HashSet<String>(Arrays.asList(\"cmd\",\"ls\", \"pwd\")));\n         return Arrays.asList(configurator);\n     }", "sourceBeforeFix": "Arrays.asList(\"ls\",\"pwd\")", "sourceAfterFix": "Arrays.asList(\"cmd\",\"ls\",\"pwd\")"}
{"fixCommitSHA1": "6b3ba9232570ab991e2bbd3e52f98133544ac9bd", "projectName": "alibaba.fastjson", "bugType": "Less Specific If", "problem": "             }\n         }\n        if (arguments == null) {\n             return null;\n         }", "fixed": "             }\n         }\n        if (arguments == null || class_gd == null) {\n             return null;\n         }", "sourceBeforeFix": "arguments == null", "sourceAfterFix": "arguments == null || class_gd == null"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return true;\n   }\n  private boolean isRegularExpressionFirstChar(char ch) {\n     return isRegularExpressionChar(ch) && ch != '*';\n   }\n  private boolean isRegularExpressionChar(char ch) {\n     switch (ch) {\n     case '/':\n       return false;", "fixed": "     return true;\n   }\n  private static boolean isRegularExpressionFirstChar(char ch) {\n     return isRegularExpressionChar(ch) && ch != '*';\n   }\n  private static boolean isRegularExpressionChar(char ch) {\n     switch (ch) {\n     case '/':\n       return false;", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     \n     private static final String ALLOW_ELEMENT_NAME = \"allow\";\n    \n    private final Deque<PkgControl> stack = new ArrayDeque<>();\n     static {\n         DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);", "fixed": "     \n     private static final String ALLOW_ELEMENT_NAME = \"allow\";\n    \n    private final Deque<ImportControl> stack = new ArrayDeque<>();\n     static {\n         DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);", "sourceBeforeFix": "{@link PkgControl}", "sourceAfterFix": "{@link ImportControl}"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     span.log(fields);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n             return message;\n         }", "fixed": "                     span.log(fields);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n             return message;\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "b8a86c4259cf3d058106ef9c0388a86fae42469f", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " import com.badlogic.gdx.tests.utils.GdxTest;\r\n public class TileTest extends GdxTest {\r\n\tstatic final int LAYERS = 10;\r\n \tstatic final int BLOCK_TILES = 25;\r\n \tstatic final int WIDTH = 15;\r\n \tstatic final int HEIGHT = 10;\r", "fixed": " import com.badlogic.gdx.tests.utils.GdxTest;\r\n public class TileTest extends GdxTest {\r\n\tstatic final int LAYERS = 5;\r\n \tstatic final int BLOCK_TILES = 25;\r\n \tstatic final int WIDTH = 15;\r\n \tstatic final int HEIGHT = 10;\r", "sourceBeforeFix": "LAYERS=10", "sourceAfterFix": "LAYERS=5"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "fixed": "     }\n     @Override\n    public synchronized void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "0b4934d140f64feb7a8a995ab4e66d990dbbf931", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t@GetMapping(\"/commit\")\n \t\t\tpublic Mono<Void> commit(ServerWebExchange exchange) {\n\t\t\t\treturn exchange.getResponse().writeWith(Mono.empty()).then(\n \t\t\t\t\t\tMono.error(new IllegalStateException(\"already committed!\")));\n \t\t\t}", "fixed": " \t\t\t@GetMapping(\"/commit\")\n \t\t\tpublic Mono<Void> commit(ServerWebExchange exchange) {\n\t\t\t\treturn exchange.getResponse().setComplete().then(\n \t\t\t\t\t\tMono.error(new IllegalStateException(\"already committed!\")));\n \t\t\t}", "sourceBeforeFix": "exchange.getResponse().writeWith(Mono.empty())", "sourceAfterFix": "exchange.getResponse().setComplete()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "     @Override\n     public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r) {\n         String clientId = r.uuid();\n        long now = System.nanoTime();\n         List<Object> result = new ArrayList<Object>();", "fixed": "     @Override\n     public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r) {\n         String clientId = r.uuid();\n        long now = System.currentTimeMillis();\n         List<Object> result = new ArrayList<Object>();", "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}
{"fixCommitSHA1": "1896987807f7186958ac057fb0f79034ddc7b947", "projectName": "hazelcast.hazelcast", "bugType": "Change Boolean Literal", "problem": "     }\n     public boolean returnsResponse() {\n        return true;\n     }\n     public Object getResponse() {", "fixed": "     }\n     public boolean returnsResponse() {\n        return false;\n     }\n     public Object getResponse() {", "sourceBeforeFix": "return true; ", "sourceAfterFix": "return false; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "202197ee128df154528c5c27077185f679f48cfb", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   private final String sortKey;\n  public CodeReplacement(int startPosition, int length, String newContent) {\n     this(startPosition, length, newContent, \"\");\n   }", "fixed": "   private final String sortKey;\n  CodeReplacement(int startPosition, int length, String newContent) {\n     this(startPosition, length, newContent, \"\");\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/abcd\").build();\n         try {\n            processor.open(w, request);\n             fail();\n         } catch (Exception ex) {\n             assertEquals(ex.getClass(), AtmosphereMappingException.class);", "fixed": "         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/abcd\").build();\n         try {\n            processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n             fail();\n         } catch (Exception ex) {\n             assertEquals(ex.getClass(), AtmosphereMappingException.class);", "sourceBeforeFix": "processor.open(w2,request)", "sourceAfterFix": "processor.open(w2,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}
{"fixCommitSHA1": "afc1ff8a41848817cb3b3be04bcb5c0a2df41293", "projectName": "alibaba.fastjson", "bugType": "Change Unary Operator\t", "problem": "             writeNull();\r\n         } else {\r\n             int scale = value.scale();\r\n            write(isEnabled(SerializerFeature.WriteBigDecimalAsPlain) && scale >= 100 && scale < 100\r\n                     ? value.toPlainString()\r\n                     : value.toString()\r\n             );\r", "fixed": "             writeNull();\r\n         } else {\r\n             int scale = value.scale();\r\n            write(isEnabled(SerializerFeature.WriteBigDecimalAsPlain) && scale >= -100 && scale < 100\r\n                     ? value.toPlainString()\r\n                     : value.toString()\r\n             );\r", "sourceBeforeFix": "100", "sourceAfterFix": "-100"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "651d6ce8d5e0d95dabb54d924e7a098c0770028b", "projectName": "NanoHttpd.nanohttpd", "bugType": "Change Numeric Literal", "problem": "                     } else if (len < 1024 * 1024) {\n                         msg.append(len / 1024).append(\".\").append(len % 1024 / 10 % 100).append(\" KB\");\n                     } else {\n                        msg.append(len / (1024 * 1024)).append(\".\").append(len % (1024 * 1024) / 10 % 100).append(\" MB\");\n                     }\n                     msg.append(\")</span></li>\");\n                 }", "fixed": "                     } else if (len < 1024 * 1024) {\n                         msg.append(len / 1024).append(\".\").append(len % 1024 / 10 % 100).append(\" KB\");\n                     } else {\n                        msg.append(len / (1024 * 1024)).append(\".\").append(len % (1024 * 1024) / 10000 % 100).append(\" MB\");\n                     }\n                     msg.append(\")</span></li>\");\n                 }", "sourceBeforeFix": "len % (1024 * 1024) / 10", "sourceAfterFix": "len % (1024 * 1024) / 10000"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = ModelApiResponse.class) })\n     ModelApiResponse uploadFile(@PathParam(\"petId\") @ApiParam(\"ID of pet to update\") Long petId,@FormParam(value = \"additionalMetadata\")  String additionalMetadata, @FormParam(value = \"file\") InputStream fileInputStream,\n   @FormParam(value = \"file\") Attachment fileDetail);\n }", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = ModelApiResponse.class) })\n     ModelApiResponse uploadFile(@PathParam(\"petId\") @ApiParam(\"ID of pet to update\") Long petId,@FormParam(value = \"additionalMetadata\")  String additionalMetadata, @FormParam(value = \"file\") InputStream fileInputStream,\n   @FormParam(value = \"file\") Attachment fileDetail) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "fixed": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic abstract boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesServicesEndpointBuilder\n             extends\n                 KubernetesServicesEndpointConsumerBuilder, KubernetesServicesEndpointProducerBuilder {\n         default AdvancedKubernetesServicesEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesServicesEndpointBuilder\n             extends\n                 KubernetesServicesEndpointConsumerBuilder, KubernetesServicesEndpointProducerBuilder {\n         default AdvancedKubernetesServicesEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL11.glGetFloat(pname,params)", "sourceAfterFix": "GL11.glGetFloatv(pname,params)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId() throws APIException;\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "fixed": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId();\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "0e371e64ca957e61a41309c7821cfff946274cbd", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t} else if (attr.equals(\"COLOR\")) {\r\n \t\t\t\tvertexAttributes.add(VertexAttribute.ColorUnpacked());\r\n \t\t\t} else if (attr.equals(\"COLORPACKED\")) {\r\n\t\t\t\tvertexAttributes.add(VertexAttribute.Color());\r\n \t\t\t} else if (attr.equals(\"TANGENT\")) {\r\n \t\t\t\tvertexAttributes.add(VertexAttribute.Tangent());\r\n \t\t\t} else if (attr.equals(\"BINORMAL\")) {\r", "fixed": " \t\t\t} else if (attr.equals(\"COLOR\")) {\r\n \t\t\t\tvertexAttributes.add(VertexAttribute.ColorUnpacked());\r\n \t\t\t} else if (attr.equals(\"COLORPACKED\")) {\r\n\t\t\t\tvertexAttributes.add(VertexAttribute.ColorPacked());\r\n \t\t\t} else if (attr.equals(\"TANGENT\")) {\r\n \t\t\t\tvertexAttributes.add(VertexAttribute.Tangent());\r\n \t\t\t} else if (attr.equals(\"BINORMAL\")) {\r", "sourceBeforeFix": "VertexAttribute.Color()", "sourceAfterFix": "VertexAttribute.ColorPacked()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9a9b02c330e9e452f37335d0e59c462175bb5df7", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"hello\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"hello\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"hello\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"hello\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(-1, rc);\n     assertTrue(outContent.toString().contains(\"key1 has not been created.\"));\n   }", "fixed": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(1, rc);\n     assertTrue(outContent.toString().contains(\"key1 has not been created.\"));\n   }", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedStreamEndpointBuilder\n             extends\n                 AdvancedStreamEndpointConsumerBuilder, AdvancedStreamEndpointProducerBuilder {\n         default StreamEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedStreamEndpointBuilder\n             extends\n                 AdvancedStreamEndpointConsumerBuilder, AdvancedStreamEndpointProducerBuilder {\n         default StreamEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "30024a16affda18949b08699a4d304852e1e1643", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\ttry {\r\n \t\t\t\t\t\tadd(valueEntry.name(), object, addType);\r\n \t\t\t\t\t} catch (Exception ex) {\r\n\t\t\t\t\t\tthrow new SerializationException(\"Error reading \" + type.getSimpleName() + \": \" + valueEntry.name(), ex);\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t}\r", "fixed": " \t\t\t\t\ttry {\r\n \t\t\t\t\t\tadd(valueEntry.name(), object, addType);\r\n \t\t\t\t\t} catch (Exception ex) {\r\n\t\t\t\t\t\tthrow new SerializationException(\"Error reading \" + type.getName() + \": \" + valueEntry.name(), ex);\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t}\r", "sourceBeforeFix": "type.getSimpleName()", "sourceAfterFix": "type.getName()"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void split(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    split(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void split(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    split(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HttpEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedHttpEndpointBuilder advanced() {\n             return (AdvancedHttpEndpointBuilder) this;\n         }", "fixed": "     \n    public interface HttpEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedHttpEndpointBuilder advanced() {\n             return (AdvancedHttpEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a88b6132e5bc4f7126303ffa4cda4c1e535f8022", "projectName": "apache.flink", "bugType": "Same Function Swap Args", "problem": " \t\t\t}\n \t\t}\n\t\tassertNotNull(savepointPath, \"Failed to trigger savepoint\");\n \t\tLOG.info(\"Uploading JAR \" + CUSTOM_KV_STATE_JAR_PATH + \" for savepoint disposal.\");", "fixed": " \t\t\t}\n \t\t}\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n \t\tLOG.info(\"Uploading JAR \" + CUSTOM_KV_STATE_JAR_PATH + \" for savepoint disposal.\");", "sourceBeforeFix": "assertNotNull(savepointPath,\"Failed to trigger savepoint\")", "sourceAfterFix": "assertNotNull(\"Failed to trigger savepoint\",savepointPath)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleBigQueryEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleBigQueryEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleBigQueryEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleBigQueryEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4fa38aeba48a4f6641e48b3f73e1bc0c55c18156", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\tif (!super.supports(type)) {\n \t\t\t\treturn false;\n \t\t\t}\n\t\t\tif (AnnotatedElementUtils.isAnnotated(type, Validated.class)) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\tif (type.getPackage().getName().startsWith(\"org.springframework.boot\")) {", "fixed": " \t\t\tif (!super.supports(type)) {\n \t\t\t\treturn false;\n \t\t\t}\n\t\t\tif (AnnotatedElementUtils.hasAnnotation(type, Validated.class)) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\tif (type.getPackage().getName().startsWith(\"org.springframework.boot\")) {", "sourceBeforeFix": "AnnotatedElementUtils.isAnnotated(type,Validated.class)", "sourceAfterFix": "AnnotatedElementUtils.hasAnnotation(type,Validated.class)"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedClientEndpointBuilder\n             extends\n                 AdvancedClientEndpointConsumerBuilder, AdvancedClientEndpointProducerBuilder {\n         default ClientEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedClientEndpointBuilder\n             extends\n                 AdvancedClientEndpointConsumerBuilder, AdvancedClientEndpointProducerBuilder {\n         default ClientEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see java.lang.Object\n \t */\n\tpublic int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "fixed": " \t * \n* @see java.lang.Object\n \t */\n\tpublic abstract int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "8abd59029e7c0bc0973b492fd84a386b26661bc7", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "                 .channel(NioSocketChannel.class);\n        if (getTimeout() < 3000) {\n             bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 3000);\n         } else {\n            bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, getTimeout());\n         }\n         bootstrap.handler(new ChannelInitializer() {", "fixed": "                 .channel(NioSocketChannel.class);\n        if (getConnectTimeout() < 3000) {\n             bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 3000);\n         } else {\n            bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, getConnectTimeout());\n         }\n         bootstrap.handler(new ChannelInitializer() {", "sourceBeforeFix": "getTimeout()", "sourceAfterFix": "getConnectTimeout()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "6618cef776cf1c9ce67ff8ee461412110ca5ada7", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t\ttaskManagerQueryServiceGatewaysFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.warn(\"Requesting TaskManager's path for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tList<String> taskManagersToRetain = queryServiceGateways\n \t\t\t\t\t\t\t\t.stream()", "fixed": " \t\t\t\ttaskManagerQueryServiceGatewaysFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.debug(\"Requesting TaskManager's path for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tList<String> taskManagersToRetain = queryServiceGateways\n \t\t\t\t\t\t\t\t.stream()", "sourceBeforeFix": "LOG.warn(\"Requesting paths for query services failed.\",throwable)", "sourceAfterFix": "LOG.debug(\"Requesting paths for query services failed.\",throwable)"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\ngetResponse(\"http:", "fixed": " \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\ngetResponse(\"http:", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "427eaad53e8d6d42324d43993906238af4884659", "projectName": "dropwizard.metrics", "bugType": "Change Identifier Used", "problem": "             try {\n                 final ObjectName objectName = createName(\"timers\", name);\n                 mBeanServer.unregisterMBean(objectName);\n                registered.add(objectName);\n             } catch (InstanceNotFoundException e) {\n                 LOGGER.debug(\"Unable to unregister timer\", e);\n             } catch (MBeanRegistrationException e) {", "fixed": "             try {\n                 final ObjectName objectName = createName(\"timers\", name);\n                 mBeanServer.unregisterMBean(objectName);\n                registered.remove(objectName);\n             } catch (InstanceNotFoundException e) {\n                 LOGGER.debug(\"Unable to unregister timer\", e);\n             } catch (MBeanRegistrationException e) {", "sourceBeforeFix": "registered.add(objectName)", "sourceAfterFix": "registered.remove(objectName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.valueOf(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "fixed": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "sourceBeforeFix": "Long.valueOf(timeout)", "sourceAfterFix": "Long.parseLong(timeout)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "544edb296479cbd05f35381b20a651e9d022e197", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         context.start();\n         for (int i = 0; i < 10; i++) {\n            getMockEndpoint(\"mock:\" + i).expectedMessageCount(1000);\n         }\n         ExecutorService executors = Executors.newFixedThreadPool(20);\n        for (int i = 0; i < 1000; i++) {\n             executors.execute(new Runnable() {\n                 public void run() {\n                     for (int i = 0; i < 10; i++) {", "fixed": "         context.start();\n         for (int i = 0; i < 10; i++) {\n            getMockEndpoint(\"mock:\" + i).expectedMessageCount(200);\n         }\n         ExecutorService executors = Executors.newFixedThreadPool(20);\n        for (int i = 0; i < 200; i++) {\n             executors.execute(new Runnable() {\n                 public void run() {\n                     for (int i = 0; i < 10; i++) {", "sourceBeforeFix": "getMockEndpoint(\"mock:\" + i).expectedMessageCount(1000)", "sourceAfterFix": "getMockEndpoint(\"mock:\" + i).expectedMessageCount(200)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b0662ce83b466318ce8dcec13428846b1b190aaf", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             throw new IOException(\"Address is required!\");\n         }\n        ClientConnection clientConnection = connections.get(address);\n         if (clientConnection == null) {\n            final Object lock = getLock(address);\n             synchronized (lock) {\n                clientConnection = connections.get(address);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);", "fixed": "             throw new IOException(\"Address is required!\");\n         }\n        ClientConnection clientConnection = connections.get(target);\n         if (clientConnection == null) {\n            final Object lock = getLock(target);\n             synchronized (lock) {\n                clientConnection = connections.get(target);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);", "sourceBeforeFix": "connections.get(address)", "sourceAfterFix": "connections.get(target)"}
{"fixCommitSHA1": "66697f6dd1574513ddcbfabd535e140088251982", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    protected static class TypeMapping {\n         private final Class<?> toType;\n         private final Class<?> fromType;", "fixed": "     \n    protected static final class TypeMapping {\n         private final Class<?> toType;\n         private final Class<?> fromType;", "sourceBeforeFix": "12", "sourceAfterFix": "28"}
{"fixCommitSHA1": "ec57f0c31f8c41db175aa7dcaab5089c22b2a8a8", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n \t\t}\n \t\t@Bean", "fixed": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.responder());\n \t\t}\n \t\t@Bean", "sourceBeforeFix": "rSocketMessageHandler.serverResponder()", "sourceAfterFix": "rSocketMessageHandler.responder()"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "         if (!inputFile.exists()) {\n             throw new FileNotFoundException(inputFile.getPath() + \" (No such file or directory)\");\n         }\n        final StringBuilder buf = new StringBuilder();\n         final FileInputStream stream = new FileInputStream(inputFile);\n         final Reader reader = new InputStreamReader(stream, decoder);\n         try {", "fixed": "         if (!inputFile.exists()) {\n             throw new FileNotFoundException(inputFile.getPath() + \" (No such file or directory)\");\n         }\n        final StringBuilder buf = new StringBuilder(1024);\n         final FileInputStream stream = new FileInputStream(inputFile);\n         final Reader reader = new InputStreamReader(stream, decoder);\n         try {", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}
{"fixCommitSHA1": "bfffe6afb376df07702965da9106062f5fa47e22", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 dataSizeSessionProperty(\n                         ORC_STREAM_BUFFER_SIZE,\n                         \"ORC: Size of buffer for streaming reads\",\n                        config.getOrcMaxBufferSize(),\n                         false),\n                 booleanSessionProperty(\n                         PARQUET_OPTIMIZED_READER_ENABLED,", "fixed": "                 dataSizeSessionProperty(\n                         ORC_STREAM_BUFFER_SIZE,\n                         \"ORC: Size of buffer for streaming reads\",\n                        config.getOrcStreamBufferSize(),\n                         false),\n                 booleanSessionProperty(\n                         PARQUET_OPTIMIZED_READER_ENABLED,", "sourceBeforeFix": "config.getOrcMaxBufferSize()", "sourceAfterFix": "config.getOrcStreamBufferSize()"}
{"fixCommitSHA1": "d3df587543605323d2a3432e896ea49a81bc8306", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tif (currentLocalTransform != renderable.localTransform)\n \t\t\tset(u_localTrans, (currentLocalTransform = renderable.localTransform) == null ? idtMatrix : renderable.localTransform);\n \t\tif (currentModelTransform != renderable.modelTransform)\n\t\t\tset(u_modelTrans, (currentWorldTransform = renderable.modelTransform) == null ? idtMatrix : renderable.modelTransform);\n \t\tif (currentLocalTransform == null && currentModelTransform == null)\n \t\t\tsetWorldTransform(idtMatrix, false);\n \t\telse if (currentLocalTransform == null)", "fixed": " \t\tif (currentLocalTransform != renderable.localTransform)\n \t\t\tset(u_localTrans, (currentLocalTransform = renderable.localTransform) == null ? idtMatrix : renderable.localTransform);\n \t\tif (currentModelTransform != renderable.modelTransform)\n\t\t\tset(u_modelTrans, (currentModelTransform = renderable.modelTransform) == null ? idtMatrix : renderable.modelTransform);\n \t\tif (currentLocalTransform == null && currentModelTransform == null)\n \t\t\tsetWorldTransform(idtMatrix, false);\n \t\telse if (currentLocalTransform == null)", "sourceBeforeFix": "currentWorldTransform=renderable.modelTransform", "sourceAfterFix": "currentModelTransform=renderable.modelTransform"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Mina2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMina2EndpointProducerBuilder advanced() {", "fixed": "     \n    public interface Mina2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMina2EndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface UndertowEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedUndertowEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface UndertowEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedUndertowEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.debug(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "fixed": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.trace(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "sourceBeforeFix": "logger.debug(\"Requsting URL {}\",url)", "sourceAfterFix": "logger.trace(\"Requsting URL {}\",url)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   private void externExports() {\n    logger.info(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n     ExternExportsPass pass = new ExternExportsPass(this);", "fixed": "   }\n   private void externExports() {\n    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n     ExternExportsPass pass = new ExternExportsPass(this);", "sourceBeforeFix": "logger.info(\"Recording function information\")", "sourceAfterFix": "logger.fine(\"Recording function information\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMvelEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MvelEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMvelEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MvelEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(-1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "fixed": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "60ee9460a931ceecf9fee8412d2b1955607c5838", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         }\n         ChannelOperationHandler handler = (ChannelOperationHandler) handler();\n        if (handler instanceof ChannelInboundHandler) {\n             flushOutboundBridge();\n         }", "fixed": "         }\n         ChannelOperationHandler handler = (ChannelOperationHandler) handler();\n        if (handler instanceof ChannelOutboundHandler) {\n             flushOutboundBridge();\n         }", "sourceBeforeFix": "handler instanceof ChannelInboundHandler", "sourceAfterFix": "handler instanceof ChannelOutboundHandler"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a068d0ce41a1e500671bdd0c5706378aeee3e840", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "             }\n           }, \"+switch-master\");\n        } catch (JedisConnectionException e) {\n           if (running.get()) {\n             log.log(Level.SEVERE, \"Lost connection to Sentinel at \" + host + \":\" + port", "fixed": "             }\n           }, \"+switch-master\");\n        } catch (JedisException e) {\n           if (running.get()) {\n             log.log(Level.SEVERE, \"Lost connection to Sentinel at \" + host + \":\" + port", "sourceBeforeFix": "JedisConnectionException e", "sourceAfterFix": "JedisException e"}
{"fixCommitSHA1": "dd0a8cd787be7a33774c9f659562d2f5c6254931", "projectName": "NanoHttpd.nanohttpd", "bugType": "Change Identifier Used", "problem": "     private String findIndexFileInDirectory(File directory) {\n         for (String fileName : SimpleWebServer.INDEX_FILE_NAMES) {\n             File indexFile = new File(directory, fileName);\n            if (indexFile.exists()) {\n                 return fileName;\n             }\n         }", "fixed": "     private String findIndexFileInDirectory(File directory) {\n         for (String fileName : SimpleWebServer.INDEX_FILE_NAMES) {\n             File indexFile = new File(directory, fileName);\n            if (indexFile.isFile()) {\n                 return fileName;\n             }\n         }", "sourceBeforeFix": "indexFile.exists()", "sourceAfterFix": "indexFile.isFile()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}
{"fixCommitSHA1": "f4c635d30b23be6ce51866704c178232e98015e7", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": " import static io.netty.util.internal.ObjectUtil.checkPositive;\n import static io.netty.util.internal.ThrowableUtil.unknownStackTrace;\nfinal class HpackDecoder {\n     private static final Http2Exception DECODE_ULE_128_DECOMPRESSION_EXCEPTION = unknownStackTrace(\n             connectionError(COMPRESSION_ERROR, \"HPACK - decompression failure\"), HpackDecoder.class,\n             \"decodeULE128(..)\");", "fixed": " import static io.netty.util.internal.ObjectUtil.checkPositive;\n import static io.netty.util.internal.ThrowableUtil.unknownStackTrace;\npublic final class HpackDecoder {\n     private static final Http2Exception DECODE_ULE_128_DECOMPRESSION_EXCEPTION = unknownStackTrace(\n             connectionError(COMPRESSION_ERROR, \"HPACK - decompression failure\"), HpackDecoder.class,\n             \"decodeULE128(..)\");", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedQuickfixjEndpointBuilder\n             extends\n                 AdvancedQuickfixjEndpointConsumerBuilder, AdvancedQuickfixjEndpointProducerBuilder {\n         default QuickfixjEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedQuickfixjEndpointBuilder\n             extends\n                 AdvancedQuickfixjEndpointConsumerBuilder, AdvancedQuickfixjEndpointProducerBuilder {\n         default QuickfixjEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n    GatherGettersAndSetterProperties.update(compiler, externs, root);\n   }\n   /**", "fixed": "     compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n   /**", "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)", "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"}
{"fixCommitSHA1": "5bbc7807c15d0918a7d228998f5ad333649945f3", "projectName": "thinkaurelius.titan", "bugType": "Change Numeric Literal", "problem": "      * Number of times the system attempts to acquire a unique id block before giving up and throwing an exception.\n      */\n     public static final String IDAUTHORITY_RETRY_COUNT_KEY = \"idauthority-retries\";\n    public static final int IDAUTHORITY_RETRY_COUNT_DEFAULT = 3;\n     /**\n      * Size of the block to be acquired. Larger block sizes require fewer block applications but also leave a larger\n      * fraction of the id pool occupied and potentially lost. For write heavy applications, larger block sizes should", "fixed": "      * Number of times the system attempts to acquire a unique id block before giving up and throwing an exception.\n      */\n     public static final String IDAUTHORITY_RETRY_COUNT_KEY = \"idauthority-retries\";\n    public static final int IDAUTHORITY_RETRY_COUNT_DEFAULT = 20;\n     /**\n      * Size of the block to be acquired. Larger block sizes require fewer block applications but also leave a larger\n      * fraction of the id pool occupied and potentially lost. For write heavy applications, larger block sizes should", "sourceBeforeFix": "IDAUTHORITY_RETRY_COUNT_DEFAULT=3", "sourceAfterFix": "IDAUTHORITY_RETRY_COUNT_DEFAULT=20"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "a421ca3133ddf727a147e87455a5511444d8d4bb", "projectName": "google.auto", "bugType": "Change Caller in Function Call", "problem": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplemetationMethodDescriptor> implemetationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "fixed": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplementationMethodDescriptor> implementationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "sourceBeforeFix": "implemetationMethodDescriptors.build()", "sourceAfterFix": "implementationMethodDescriptors.build()"}
{"fixCommitSHA1": "bab56d4e4c643aa2c447fb61a7532fcf41130864", "projectName": "libgdx.libgdx", "bugType": "More Specific If", "problem": " \t\t}\r\n \t\telse\r\n \t\t{\r\n\t\t\tif( minor < 5 )\r\n \t\t\t{\r\n \t\t\t\tgl10 = new JoglGL10( graphicPanel.getGL() );\r\n \t\t\t}\r", "fixed": " \t\t}\r\n \t\telse\r\n \t\t{\r\n\t\t\tif( major == 1 && minor < 5 )\r\n \t\t\t{\r\n \t\t\t\tgl10 = new JoglGL10( graphicPanel.getGL() );\r\n \t\t\t}\r", "sourceBeforeFix": "minor < 5", "sourceAfterFix": "major == 1 && minor < 5"}
{"fixCommitSHA1": "c5c423ee77274339c43b42e9c20948f8ad0534e9", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         pausingLoader.awaitPause();\n         hz3.getLifecycleService().terminate();\n        assertClusterSize(2, nodes[0]);\n         pausingLoader.resume();", "fixed": "         pausingLoader.awaitPause();\n         hz3.getLifecycleService().terminate();\n        assertClusterSizeEventually(2, nodes[0]);\n         pausingLoader.resume();", "sourceBeforeFix": "assertClusterSize(2,nodes[0])", "sourceAfterFix": "assertClusterSizeEventually(2,nodes[0])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 17:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 17:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "fixed": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "66c325e004dc7d1ffb6b97e8af093a8455756d53", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "fixed": " \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2082d923ff4d3015eefa06e2e383dbe9fa3de2c5", "projectName": "openmrs.openmrs-core", "bugType": "Change Boolean Literal", "problem": " \t@ModelAttribute(\"visitTypes\")\r\n \tpublic List<VisitType> getVisitTypes() throws Exception {\r\n\t\treturn Context.getVisitService().getAllVisitTypes(false);\r\n \t}\r\n \t@ModelAttribute(\"attributeTypes\")\r", "fixed": " \t@ModelAttribute(\"visitTypes\")\r\n \tpublic List<VisitType> getVisitTypes() throws Exception {\r\n\t\treturn Context.getVisitService().getAllVisitTypes(true);\r\n \t}\r\n \t@ModelAttribute(\"attributeTypes\")\r", "sourceBeforeFix": "Context.getVisitService().getAllVisitTypes(false)", "sourceAfterFix": "Context.getVisitService().getAllVisitTypes(true)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "a115820be9614ac00631d84db93a1002492f4c40", "projectName": "apache.camel", "bugType": "Same Function Swap Args", "problem": "         File file = new File(\"./target/cachedir\");\n         String[] files = file.list();\n        assertEquals(\"There should be no files\", files.length, 0);\n     }\n     @Test", "fixed": "         File file = new File(\"./target/cachedir\");\n         String[] files = file.list();\n        assertEquals(\"There should be no files\", 0, files.length);\n     }\n     @Test", "sourceBeforeFix": "assertEquals(\"There should be no files\",files.length,0)", "sourceAfterFix": "assertEquals(\"There should be no files\",0,files.length)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4a9d7457934350576e9e37a7f253066f4a5d3cce", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "   }\n   public static TwoDimensionalMap<String, String, SimpleMatrix> averageBinaryMatrices(List<TwoDimensionalMap<String, String, SimpleMatrix>> maps) {\n    TwoDimensionalMap<String, String, SimpleMatrix> averages = new TwoDimensionalMap<String, String, SimpleMatrix>();\n     for (Pair<String, String> binary : getBinaryMatrixNames(maps)) {\n       int count = 0;\n       SimpleMatrix matrix = null;", "fixed": "   }\n   public static TwoDimensionalMap<String, String, SimpleMatrix> averageBinaryMatrices(List<TwoDimensionalMap<String, String, SimpleMatrix>> maps) {\n    TwoDimensionalMap<String, String, SimpleMatrix> averages = TwoDimensionalMap.treeMap();\n     for (Pair<String, String> binary : getBinaryMatrixNames(maps)) {\n       int count = 0;\n       SimpleMatrix matrix = null;", "sourceBeforeFix": "Generics.newHashMap()", "sourceAfterFix": "Generics.newTreeMap()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HipchatEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHipchatEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HipchatEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHipchatEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "715113fb25e3eaa18df0fdaf2df54211bf691fbe", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": " public class MBeanInfoAssembler {\r\n  private static final Logger LOG = LoggerFactory.getLogger(DefaultManagementAgent.class);\r\n   protected final WeakHashMap<Class< ? >, MBeanAttributesAndOperations> cache = new WeakHashMap<Class< ? >, MBeanAttributesAndOperations>(10);\r", "fixed": " public class MBeanInfoAssembler {\r\n  private static final Logger LOG = LoggerFactory.getLogger(MBeanInfoAssembler.class);\r\n   protected final WeakHashMap<Class< ? >, MBeanAttributesAndOperations> cache = new WeakHashMap<Class< ? >, MBeanAttributesAndOperations>(10);\r", "sourceBeforeFix": "DefaultManagementAgent.class", "sourceAfterFix": "MBeanInfoAssembler.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BeanstalkEndpointBuilder\n             extends\n                 BeanstalkEndpointConsumerBuilder, BeanstalkEndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointBuilder advanced() {", "fixed": "     \n    public interface BeanstalkEndpointBuilder\n             extends\n                 BeanstalkEndpointConsumerBuilder, BeanstalkEndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cedf72640d917a1d2df5ca88fb6a41d624ffd1ab", "projectName": "alibaba.druid", "bugType": "Change Boolean Literal", "problem": "     }\r\n     public MSSQLServerExportParameterVisitor(final List<Object> parameters){\r\n        this(parameters,new StringBuilder(),false);\r\n     }\r\n     public MSSQLServerExportParameterVisitor(final Appendable appender) {\r", "fixed": "     }\r\n     public MSSQLServerExportParameterVisitor(final List<Object> parameters){\r\n        this(parameters,new StringBuilder(),true);\r\n     }\r\n     public MSSQLServerExportParameterVisitor(final Appendable appender) {\r", "sourceBeforeFix": "this(parameters,new StringBuilder(),false); ", "sourceAfterFix": "this(parameters,new StringBuilder(),true); "}
{"fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      *\n      * @return Type of exception\n      */\n    public Class<? extends Exception> exceptionClass() {\n         return this.exceptionClass;\n     }", "fixed": "      *\n      * @return Type of exception\n      */\n    public Class<? extends T> exceptionClass() {\n         return this.exceptionClass;\n     }", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "T exception"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean scrolled (int amount) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].scrolled(amount)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean scrolled (int amount) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).scrolled(amount)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface S3EndpointBuilder\n             extends\n                 S3EndpointConsumerBuilder, S3EndpointProducerBuilder {\n         default AdvancedS3EndpointBuilder advanced() {", "fixed": "     \n    public interface S3EndpointBuilder\n             extends\n                 S3EndpointConsumerBuilder, S3EndpointProducerBuilder {\n         default AdvancedS3EndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "    * \n    * @param schedulingInfo\n    */\n  protected void setSchedulingInfo(String schedulingInfo) {\n     super.setSchedulingInfo(schedulingInfo);\n   }", "fixed": "    * \n    * @param schedulingInfo\n    */\n  @InterfaceAudience.Private\n  public void setSchedulingInfo(String schedulingInfo) {\n     super.setSchedulingInfo(schedulingInfo);\n   }", "sourceBeforeFix": "4", "sourceAfterFix": "1"}
{"fixCommitSHA1": "de4c207aafb924e5a104e7f1b9e3b37c0f05bebb", "projectName": "yusuke.twitter4j", "bugType": "Same Function Swap Args", "problem": "         \n         User user = null;\n         try {\n            user = twitter1.checkUserListMembership(id1.screenName, id2.id, userList.getId());\n             fail(\"id2 shouldn't be a member of the userList yet. expecting a TwitterException\");\n         } catch (TwitterException te) {\n             assertEquals(404, te.getStatusCode());", "fixed": "         \n         User user = null;\n         try {\n            user = twitter1.checkUserListMembership(id1.screenName, userList.getId(), id2.id);\n             fail(\"id2 shouldn't be a member of the userList yet. expecting a TwitterException\");\n         } catch (TwitterException te) {\n             assertEquals(404, te.getStatusCode());", "sourceBeforeFix": "twitter1.checkUserListSubscription(id1.screenName,id2.id,userList.getId())", "sourceAfterFix": "twitter1.checkUserListSubscription(id1.screenName,userList.getId(),id2.id)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GooglePubsubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGooglePubsubEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GooglePubsubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGooglePubsubEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body);\n }", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "9d6f4a82fa1e6e132e712460c3170ca4db5bc9a3", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "             return ok(views.html.system.indices.failures.render(\n                     currentUser(),\n                     bc,\n                    clusterService.getIndexerFailures(0,0).total,\n                     page\n             ));\n         } catch (APIException e) {", "fixed": "             return ok(views.html.system.indices.failures.render(\n                     currentUser(),\n                     bc,\n                    clusterService.getIndexerFailures(1,0).total,\n                     page\n             ));\n         } catch (APIException e) {", "sourceBeforeFix": "clusterService.getIndexerFailures(0,0)", "sourceAfterFix": "clusterService.getIndexerFailures(1,0)"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bee7a939ade6ee0b42f00ea8727996986e31d6db", "projectName": "eclipse.vert.x", "bugType": "Change Binary Operator", "problem": "     @Override\n     public ByteBuf buffer(int initialCapacity, int maxCapacity) {\n      if (initialCapacity < capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();", "fixed": "     @Override\n     public ByteBuf buffer(int initialCapacity, int maxCapacity) {\n      if (initialCapacity <= capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();", "sourceBeforeFix": "initialCapacity < capacity", "sourceAfterFix": "initialCapacity <= capacity"}
{"fixCommitSHA1": "17de6689ab43b6d8fc8b60b87eb1155ba55b26f6", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": " \t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {\n\t\t\tlogger.error(\"Could not parse VCAP_APPLICATION\", ex);\n \t\t}\n \t\treturn properties;\n \t}", "fixed": " \t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {\n\t\t\tlogger.error(\"Could not parse VCAP_SERVICES\", ex);\n \t\t}\n \t\treturn properties;\n \t}", "sourceBeforeFix": "Integer.MIN_VALUE + 11", "sourceAfterFix": "Integer.MIN_VALUE + 9"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClientModel(@Valid Client body);\n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })", "fixed": "     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClientModel(@Valid Client body) throws Exception;\n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixQueueEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtomixQueueEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AtomixQueueEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtomixQueueEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c46a39b13e1bfccdc09301b26f9cc4804d417c3b", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "fixed": "   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Heartbeat_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         byte[] request = getRequestBytes(null, header);\n         Request obj = (Request) decode(request);\n         Assert.assertEquals(null, obj.getData());", "fixed": "     @Test\n     public void test_Decode_Return_Request_Heartbeat_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         byte[] request = getRequestBytes(null, header);\n         Request obj = (Request) decode(request);\n         Assert.assertEquals(null, obj.getData());", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean touchUp (int screenX, int screenY, int pointer, int button) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].touchUp(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean touchUp (int screenX, int screenY, int pointer, int button) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).touchUp(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "a7ea864d23e4b47cef8056a446ea4e7344c62ee7", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "     @BeforeClass\n     public static void initPort() {\n        serverPort = AvailablePortFinder.getNextAvailable();\n         System.setProperty(\"server-port\", new Integer(serverPort).toString());\n     }", "fixed": "     @BeforeClass\n     public static void initPort() {\n        serverPort = AvailablePortFinder.getNextAvailable(4000);\n         System.setProperty(\"server-port\", new Integer(serverPort).toString());\n     }", "sourceBeforeFix": "AvailablePortFinder.getNextAvailable()", "sourceAfterFix": "AvailablePortFinder.getNextAvailable(4000)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.valueOf(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "fixed": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "70f209a2202f1bf5a560c510615d598a4d4d4cc0", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "  */\n public final class NeverSuppress implements MatchSuppressor {\n     \n    static final MatchSuppressor INSTANCE = new NeverSuppress();\n     \n     private NeverSuppress() {", "fixed": "  */\n public final class NeverSuppress implements MatchSuppressor {\n     \n    public static final MatchSuppressor INSTANCE = new NeverSuppress();\n     \n     private NeverSuppress() {", "sourceBeforeFix": "24", "sourceAfterFix": "25"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EventEndpointBuilder\n             extends\n                 EventEndpointConsumerBuilder, EventEndpointProducerBuilder {\n         default AdvancedEventEndpointBuilder advanced() {", "fixed": "     \n    public interface EventEndpointBuilder\n             extends\n                 EventEndpointConsumerBuilder, EventEndpointProducerBuilder {\n         default AdvancedEventEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d2314c583d3463e3fa020e9d42aecf91b55c582c", "projectName": "apache.hadoop", "bugType": "Wrong Function Name", "problem": "   private static final String EMPTY_DIAGNOSTICS = \"\";\n   private static final String RM_WEBAPP_ADDR =\n      WebAppUtils.getResolvedRMWebAppURLWithoutScheme(new Configuration());\n   private boolean isSecurityEnabled;\n   private RMContext rmContext;", "fixed": "   private static final String EMPTY_DIAGNOSTICS = \"\";\n   private static final String RM_WEBAPP_ADDR =\n      WebAppUtils.getResolvedRMWebAppURLWithScheme(new Configuration());\n   private boolean isSecurityEnabled;\n   private RMContext rmContext;", "sourceBeforeFix": "WebAppUtils.getResolvedRMWebAppURLWithoutScheme(new Configuration())", "sourceAfterFix": "WebAppUtils.getResolvedRMWebAppURLWithScheme(new Configuration())"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}
{"fixCommitSHA1": "19dac46f389eff0af027d9d11176db6eec0cdbc3", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         MBeanServerPlugin delegate = null;\n         final boolean readOnly = false;\n         try {\n            delegate = findDelegate(name);\n             if (delegate.shouldAuthorize()) {\n                 authorizeSensitiveOperation(CREATE_MBEAN, readOnly, true);\n             }", "fixed": "         MBeanServerPlugin delegate = null;\n         final boolean readOnly = false;\n         try {\n            delegate = findDelegateForNewObject(name);\n             if (delegate.shouldAuthorize()) {\n                 authorizeSensitiveOperation(CREATE_MBEAN, readOnly, true);\n             }", "sourceBeforeFix": "findDelegate(name)", "sourceAfterFix": "findDelegateForNewObject(name)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "66c325e004dc7d1ffb6b97e8af093a8455756d53", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n\t\tContext.setLocale(Context.getLocale());\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r", "fixed": " \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "fixed": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "sourceBeforeFix": "GL.glBindTextureEXT(target,texture)", "sourceAfterFix": "GL.glBindTexture(target,texture)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n    void addPet(@Valid Pet body);\n     @DELETE\n     @Path(\"/{petId}\")", "fixed": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n    void addPet(@Valid Pet body) throws Exception;\n     @DELETE\n     @Path(\"/{petId}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "     logger.debug(\"got a query\");\n     if (!isProperlyConfigured) {\n      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n       return Collections.emptyList();\n     }\n     if (!isConnected()) {\n      logger.error(\"InfluxDB is not yet connected\");\n       return Collections.emptyList();\n     }", "fixed": "     logger.debug(\"got a query\");\n     if (!isProperlyConfigured) {\n      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return Collections.emptyList();\n     }\n     if (!isConnected()) {\n      logger.warn(\"InfluxDB is not yet connected\");\n       return Collections.emptyList();\n     }", "sourceBeforeFix": "logger.error(\"InfluxDB is not yet connected\")", "sourceAfterFix": "logger.warn(\"InfluxDB is not yet connected\")"}
{"fixCommitSHA1": "5ac0dcd1b04e38a3dbe11a94897cc0a34ef2d5ec", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Override\n\tpublic void log (String tag, String message, Exception exception) {\n \t\tif (logLevel >= LOG_INFO) {\n \t\t\tcheckLogLabel();\n \t\t\tlog.setText(log.getText() + \"\\n\" + tag + \": \" + message + \"\\n\" + exception.getMessage() + \"\\n\");", "fixed": " \t}\n \t@Override\n\tpublic void log (String tag, String message, Throwable exception) {\n \t\tif (logLevel >= LOG_INFO) {\n \t\t\tcheckLogLabel();\n \t\t\tlog.setText(log.getText() + \"\\n\" + tag + \": \" + message + \"\\n\" + exception.getMessage() + \"\\n\");", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "Throwable exception"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testVarArgs1() {", "fixed": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testVarArgs1() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "deabd5b0187c1825c686c7f6a593db918bd043dc", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "             AtmosphereRequest req = AtmosphereResourceImpl.class.cast(r).getRequest(false);\n             try {\n                 if (req.getAttribute(MAX_INACTIVE) == null) {\n                    logger.error(\"Invalid state {}\", r);\n                     r.removeFromAllBroadcasters();\n                     config.resourcesFactory().unRegisterUuidForFindCandidate(r);\n                     continue;", "fixed": "             AtmosphereRequest req = AtmosphereResourceImpl.class.cast(r).getRequest(false);\n             try {\n                 if (req.getAttribute(MAX_INACTIVE) == null) {\n                    logger.warn(\"Invalid state {}\", r);\n                     r.removeFromAllBroadcasters();\n                     config.resourcesFactory().unRegisterUuidForFindCandidate(r);\n                     continue;", "sourceBeforeFix": "logger.error(\"Invalid state {}\",r)", "sourceAfterFix": "logger.warn(\"Invalid state {}\",r)"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \tpublic long getLong (String key) {\r\n \t\tNSNumber value = (NSNumber)nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return 0L;\r\n\t\treturn value.longValue();\r\n \t}\r\n \t@Override\r", "fixed": " \tpublic long getLong (String key) {\r\n \t\tNSNumber value = (NSNumber)nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return 0L;\r\n\t\treturn value.longLongValue();\r\n \t}\r\n \t@Override\r", "sourceBeforeFix": "value.longValue()", "sourceAfterFix": "value.longLongValue()"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\telse\nmod.getActivator().shutdown();\n \t\t\t}\n\t\t\tcatch (Throwable t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.shutdown() method\", t);\n \t\t\t}", "fixed": " \t\t\t\telse\nmod.getActivator().shutdown();\n \t\t\t}\n\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.shutdown() method\", t);\n \t\t\t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "fixed": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic abstract boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "28474aa30adebc397ecdb993d62317e5659fce4a", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\treturn this.ssl;\n \t\t}\n\t\tpublic Long getAutoCommitInterval() {\n \t\t\treturn this.autoCommitInterval;\n \t\t}\n\t\tpublic void setAutoCommitInterval(Long autoCommitInterval) {\n \t\t\tthis.autoCommitInterval = autoCommitInterval;\n \t\t}", "fixed": " \t\t\treturn this.ssl;\n \t\t}\n\t\tpublic Integer getAutoCommitInterval() {\n \t\t\treturn this.autoCommitInterval;\n \t\t}\n\t\tpublic void setAutoCommitInterval(Integer autoCommitInterval) {\n \t\t\tthis.autoCommitInterval = autoCommitInterval;\n \t\t}", "sourceBeforeFix": "public Long getAutoCommitInterval(){   return this.autoCommitInterval; } ", "sourceAfterFix": "public Integer getAutoCommitInterval(){   return this.autoCommitInterval; } "}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RedisEndpointBuilder\n             extends\n                 RedisEndpointConsumerBuilder, RedisEndpointProducerBuilder {\n         default AdvancedRedisEndpointBuilder advanced() {", "fixed": "     \n    public interface RedisEndpointBuilder\n             extends\n                 RedisEndpointConsumerBuilder, RedisEndpointProducerBuilder {\n         default AdvancedRedisEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n         }\n         return record;\n     }", "fixed": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c39ce11b105be36238be1cc5b406dd0037c8284c", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   \n  protected class ResourceInternal<T> {\n     \n    private T mResource;\n     \n     private long mLastAccessTimeMs;", "fixed": "   \n  protected class ResourceInternal<R> {\n     \n    private R mResource;\n     \n     private long mLastAccessTimeMs;", "sourceBeforeFix": "T", "sourceAfterFix": "R"}
{"fixCommitSHA1": "2636d2c61be03ed18790b7a1e1a8d9e871063e20", "projectName": "wildfly.wildfly", "bugType": "More Specific If", "problem": "             return deployer.deploy(name, input);\n         } catch (Exception ex) {\n             Throwable rootCause = ex.getCause();\n            while (null != rootCause) {\n                 rootCause = rootCause.getCause();\n             }\n             throw new DeploymentException(\"Cannot deploy: \" + name, rootCause);", "fixed": "             return deployer.deploy(name, input);\n         } catch (Exception ex) {\n             Throwable rootCause = ex.getCause();\n            while (null != rootCause && rootCause.getCause() != null) {\n                 rootCause = rootCause.getCause();\n             }\n             throw new DeploymentException(\"Cannot deploy: \" + name, rootCause);", "sourceBeforeFix": "null != rootCause", "sourceAfterFix": "null != rootCause && rootCause.getCause() != null"}
{"fixCommitSHA1": "d270a8582b50321bc4b8a5921ff2439022a403d2", "projectName": "checkstyle.checkstyle", "bugType": "Less Specific If", "problem": "              token = token.getParent())\n         {\n             final int type = token.getType();\n            if (type == TokenTypes.CLASS_DEF) {\nbreak;\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\nbreak;", "fixed": "              token = token.getParent())\n         {\n             final int type = token.getType();\n            if (type == TokenTypes.CLASS_DEF\n                || type == TokenTypes.ENUM_DEF\n                || type == TokenTypes.ANNOTATION_DEF)\n            {\nbreak;\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\nbreak;", "sourceBeforeFix": "type == TokenTypes.CLASS_DEF", "sourceAfterFix": "type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.ANNOTATION_DEF"}
{"fixCommitSHA1": "f8946ee2b640061a35a4c16bf2588242f27053d7", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": " \t\t\t\t\t}\r\n \t\t\t\t} else if (command.compareTo(oldPercent) < 0) {\r\n \t\t\t\t\tint repeatCount = (oldPercent.intValue() - command.intValue()) / 10;\r\n\t\t\t\t\tfor(int i = 0; i <= repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendDecrease(bulb, rgbwSteps, bridgeId);\r", "fixed": " \t\t\t\t\t}\r\n \t\t\t\t} else if (command.compareTo(oldPercent) < 0) {\r\n \t\t\t\t\tint repeatCount = (oldPercent.intValue() - command.intValue()) / 10;\r\n\t\t\t\t\tfor(int i = 0; i < repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendDecrease(bulb, rgbwSteps, bridgeId);\r", "sourceBeforeFix": "i <= repeatCount", "sourceAfterFix": "i < repeatCount"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ServiceNowEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedServiceNowEndpointBuilder advanced() {", "fixed": "     \n    public interface ServiceNowEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedServiceNowEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "90aa627ec53873e359cba24a9af6d2163e2b7272", "projectName": "facebook.presto", "bugType": "Same Function More Args", "problem": "             return parseDate(trim(value).toStringUtf8());\n         }\n         catch (IllegalArgumentException e) {\n            throw new PrestoException(INVALID_CAST_ARGUMENT, e);\n         }\n     }", "fixed": "             return parseDate(trim(value).toStringUtf8());\n         }\n         catch (IllegalArgumentException e) {\n            throw new PrestoException(INVALID_CAST_ARGUMENT, \"Value cannot be cast to date: \" + value.toStringUtf8(), e);\n         }\n     }", "sourceBeforeFix": "new PrestoException(INVALID_CAST_ARGUMENT,e)", "sourceAfterFix": "new PrestoException(INVALID_CAST_ARGUMENT,\"Value cannot be cast to date: \" + value.toStringUtf8(),e)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(50);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "fixed": "                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "644b7c9e7c63b1967c205ee018f42c6a34c200be", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             }\n         }\n        return super.createDataFormat(camelContext);\n     }\n     @Override", "fixed": "             }\n         }\n        return super.doCreateDataFormat(camelContext);\n     }\n     @Override", "sourceBeforeFix": "super.createDataFormat(camelContext)", "sourceAfterFix": "super.doCreateDataFormat(camelContext)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(254);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(253);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithListInput(@Valid List<User> body);\n     @DELETE\n     @Path(\"/{username}\")", "fixed": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithListInput(@Valid List<User> body) throws Exception;\n     @DELETE\n     @Path(\"/{username}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "e05622578fa2cb335f4beee3496758aea43ddd29", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         assertSizeAndLoadCount(map);\n         hz3.getLifecycleService().terminate();\n        assertClusterSize(2, nodes[0]);\n         map.loadAll(true);\n         assertSizeEventually(MAP_STORE_ENTRY_COUNT, map);", "fixed": "         assertSizeAndLoadCount(map);\n         hz3.getLifecycleService().terminate();\n        assertClusterSizeEventually(2, nodes[0]);\n         map.loadAll(true);\n         assertSizeEventually(MAP_STORE_ENTRY_COUNT, map);", "sourceBeforeFix": "assertClusterSize(2,nodes[0])", "sourceAfterFix": "assertClusterSizeEventually(2,nodes[0])"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedWebsocketEndpointBuilder\n             extends\n                 AdvancedWebsocketEndpointConsumerBuilder, AdvancedWebsocketEndpointProducerBuilder {\n         default WebsocketEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedWebsocketEndpointBuilder\n             extends\n                 AdvancedWebsocketEndpointConsumerBuilder, AdvancedWebsocketEndpointProducerBuilder {\n         default WebsocketEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "5622a68e763431819499b28fd976dd8d240480de", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "     if (event instanceof ActivitiEntityEvent) {\n       Object entity = ((ActivitiEntityEvent) event).getEntity();\n      if (entity instanceof ProcessDefinition) {\n         result = (ProcessDefinitionEntity) entity;\n       }\n     }", "fixed": "     if (event instanceof ActivitiEntityEvent) {\n       Object entity = ((ActivitiEntityEvent) event).getEntity();\n      if (entity instanceof ProcessDefinitionEntity) {\n         result = (ProcessDefinitionEntity) entity;\n       }\n     }", "sourceBeforeFix": "entity instanceof ProcessDefinition", "sourceAfterFix": "entity instanceof ProcessDefinitionEntity"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface LanguageEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedLanguageEndpointBuilder advanced() {\n             return (AdvancedLanguageEndpointBuilder) this;\n         }", "fixed": "     \n    public interface LanguageEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedLanguageEndpointBuilder advanced() {\n             return (AdvancedLanguageEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "c3448fe289734ed7498eee4444af630f7abd6986", "projectName": "apache.hadoop", "bugType": "Change Boolean Literal", "problem": "   \n   protected static final String  USER_AS_DEFAULT_QUEUE = CONF_PREFIX + \"user-as-default-queue\";\n  protected static final boolean DEFAULT_USER_AS_DEFAULT_QUEUE = false;\n   protected static final String LOCALITY_THRESHOLD = CONF_PREFIX + \"locality.threshold\";\n   protected static final float  DEFAULT_LOCALITY_THRESHOLD = -1.0f;", "fixed": "   \n   protected static final String  USER_AS_DEFAULT_QUEUE = CONF_PREFIX + \"user-as-default-queue\";\n  protected static final boolean DEFAULT_USER_AS_DEFAULT_QUEUE = true;\n   protected static final String LOCALITY_THRESHOLD = CONF_PREFIX + \"locality.threshold\";\n   protected static final float  DEFAULT_LOCALITY_THRESHOLD = -1.0f;", "sourceBeforeFix": "DEFAULT_USER_AS_DEFAULT_QUEUE=false", "sourceAfterFix": "DEFAULT_USER_AS_DEFAULT_QUEUE=true"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic long getLong (String key) {\r\n \t\tNSNumber value = (NSNumber)nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return 0L;\r\n\t\treturn value.longValue();\r\n \t}\r\n \t@Override\r", "fixed": " \tpublic long getLong (String key) {\r\n \t\tNSNumber value = (NSNumber)nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return 0L;\r\n\t\treturn value.longLongValue();\r\n \t}\r\n \t@Override\r", "sourceBeforeFix": "NSString value=(NSString)nsDictionary.get(convertKey(key)); ", "sourceAfterFix": "Object value=nsDictionary.get(convertKey(key)); "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Failed to get files from \" + baseDirectory.getAbsolutePath())", "sourceAfterFix": "LOG.warn(\"Failed to get files from \" + baseDirectory.getAbsolutePath())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0656040933973f55afa8b6e8f53140b6f76b7446", "projectName": "apache.hive", "bugType": "Change Unary Operator\t", "problem": "        */\n       public static _Fields findByThriftId(int fieldId) {\n         switch(fieldId) {\ncase -1:\n             return RQST;\n           default:\n             return null;", "fixed": "        */\n       public static _Fields findByThriftId(int fieldId) {\n         switch(fieldId) {\ncase 1:\n             return RQST;\n           default:\n             return null;", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "64454faa3bbc2c1d709779762d9f93a15a1b8c15", "projectName": "apache.hive", "bugType": "Change Numeric Literal", "problem": "     Map<String, String> confOverlay = new HashMap<String, String>();\n     String hql = \"drop table if exists table_not_exists\";\n     Mockito.when(operationManager.newExecuteStatementOperation(same(session), eq(hql),\n        (Map<String, String>)Mockito.any(), eq(true), eq(0))).thenReturn(operation);\n     try {", "fixed": "     Map<String, String> confOverlay = new HashMap<String, String>();\n     String hql = \"drop table if exists table_not_exists\";\n     Mockito.when(operationManager.newExecuteStatementOperation(same(session), eq(hql),\n        (Map<String, String>)Mockito.any(), eq(true), eq(0L))).thenReturn(operation);\n     try {", "sourceBeforeFix": "eq(0)", "sourceAfterFix": "eq(0L)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
