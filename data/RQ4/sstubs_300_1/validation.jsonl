{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJcrEndpointBuilder\n             extends\n                 AdvancedJcrEndpointConsumerBuilder, AdvancedJcrEndpointProducerBuilder {\n         default JcrEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJcrEndpointBuilder\n             extends\n                 AdvancedJcrEndpointConsumerBuilder, AdvancedJcrEndpointProducerBuilder {\n         default JcrEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).toString();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "fixed": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "sourceBeforeFix": "(new Path(testBucket.getParent(),\".test.inprogress\")).toString()", "sourceAfterFix": "(new Path(testBucket.getParent(),\".test.inprogress\")).getPath()"}
{"fixCommitSHA1": "335f8c0d2af9c55c731dc7b44d18c5e3796f4bd6", "projectName": "hazelcast.hazelcast", "bugType": "More Specific If", "problem": "             return false;\n         }\n        if (this.referenceId == referenceId) {\n             return true;\n         }", "fixed": "             return false;\n         }\n        if (!this.transactional && this.referenceId == referenceId) {\n             return true;\n         }", "sourceBeforeFix": "this.referenceId == referenceId", "sourceAfterFix": "!transactional && this.referenceId == referenceId"}
{"fixCommitSHA1": "4374760010679cae216f1c512564626520e00238", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\tif (ClassReflection.isAssignableFrom(Enum.class, actualType)) {\n\t\t\t\tif (knownType == null || knownType != actualType) {\n \t\t\t\t\tif (actualType.getEnumConstants() == null) actualType = actualType.getSuperclass();", "fixed": " \t\t\tif (ClassReflection.isAssignableFrom(Enum.class, actualType)) {\n\t\t\t\tif (typeName != null && (knownType == null || knownType != actualType)) {\n \t\t\t\t\tif (actualType.getEnumConstants() == null) actualType = actualType.getSuperclass();", "sourceBeforeFix": "knownType != null", "sourceAfterFix": "typeName != null"}
{"fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }", "fixed": "                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }", "sourceBeforeFix": "invocation.logger.warning(\"'is-executing': \" + executing + \" -> \"+ invocation)", "sourceAfterFix": "invocation.logger.finest(\"'is-executing': \" + executing + \" -> \"+ invocation)"}
{"fixCommitSHA1": "0682e8dd41045e3375b61d3d76f6e6991e98c869", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "             }\n         }\n         if (simple.getFromReceivedDate() != null) {\n            String s = simple.getFromSentDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));", "fixed": "             }\n         }\n         if (simple.getFromReceivedDate() != null) {\n            String s = simple.getFromReceivedDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));", "sourceBeforeFix": "simple.getFromSentDate()", "sourceAfterFix": "simple.getToSentDate()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5ac2955ff4451c72db1e157dda76786f30511679", "projectName": "eclipse.vert.x", "bugType": "Change Numeric Literal", "problem": "     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n    int trafficClass = TestUtils.randomByte() + 127;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();", "fixed": "     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n    int trafficClass = TestUtils.randomByte() + 128;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();", "sourceBeforeFix": "TestUtils.randomByte() + 127", "sourceAfterFix": "TestUtils.randomByte() + 128"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "55f6d19f6a4d254db1b280305ec1e3c196725d8e", "projectName": "naver.pinpoint", "bugType": "Change Modifier", "problem": "         return false;\n     }\n    private class RunnableExecuteHandler implements WorkHandler<RunnableEvent> {\n         @Override\n         public void onEvent(RunnableEvent runnableEvent) throws Exception {", "fixed": "         return false;\n     }\n    private static class RunnableExecuteHandler implements WorkHandler<RunnableEvent> {\n         @Override\n         public void onEvent(RunnableEvent runnableEvent) throws Exception {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             return record;\n         }\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;", "fixed": "             return record;\n         }\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SjmsBatchEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedSjmsBatchEndpointBuilder advanced() {\n             return (AdvancedSjmsBatchEndpointBuilder) this;\n         }", "fixed": "     \n    public interface SjmsBatchEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedSjmsBatchEndpointBuilder advanced() {\n             return (AdvancedSjmsBatchEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ee2feaf9a6c87f753e3e4e6be46752d21494bda3", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     }\n     static long combineToLong(int x, int y) {\n        return ((long) x << 32) | ((long) y & 0xFFFFFFFL);\n     }\n     static int extractInt(long value, boolean lowerBits) {", "fixed": "     }\n     static long combineToLong(int x, int y) {\n        return ((long) x << 32) | ((long) y & 0xFFFFFFFFL);\n     }\n     static int extractInt(long value, boolean lowerBits) {", "sourceBeforeFix": "(long)y & 0xFFFFFFFL", "sourceAfterFix": "(long)y & 0xFFFFFFFFL"}
{"fixCommitSHA1": "2f5529c622dc1970622f3ba7786def30167f9c01", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void async_whenOperationTimeout() {\n        int callTimeout = 1000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);", "fixed": "     @Test\n     public void async_whenOperationTimeout() {\n        int callTimeout = 5000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);", "sourceBeforeFix": "callTimeout=1000", "sourceAfterFix": "callTimeout=5000"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales() throws APIException;\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "fixed": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales();\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "5a7c8dcb683515f0fe6b3de6c18e78c749f3729a", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "     private static final String MOVE_COST_KEY = \"hbase.master.balancer.stochastic.moveCost\";\n     private static final String MAX_MOVES_PERCENT_KEY =\n         \"hbase.master.balancer.stochastic.maxMovePercent\";\n    private static final float DEFAULT_MOVE_COST = 100;\n     private static final int DEFAULT_MAX_MOVES = 600;\n     private static final float DEFAULT_MAX_MOVE_PERCENT = 0.25f;", "fixed": "     private static final String MOVE_COST_KEY = \"hbase.master.balancer.stochastic.moveCost\";\n     private static final String MAX_MOVES_PERCENT_KEY =\n         \"hbase.master.balancer.stochastic.maxMovePercent\";\n    private static final float DEFAULT_MOVE_COST = 7;\n     private static final int DEFAULT_MAX_MOVES = 600;\n     private static final float DEFAULT_MAX_MOVE_PERCENT = 0.25f;", "sourceBeforeFix": "DEFAULT_MOVE_COST=100", "sourceAfterFix": "DEFAULT_MOVE_COST=7"}
{"fixCommitSHA1": "22735f4e1c7de3c10301d5c8d5ae37980fd5bd5e", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "                 {11, 6.5f},\n                 {12, 5.5f},\n                 {13, 3.5f},\n                {14, 3.0f},\n                 {15, 2.5f},\n                 {16, 2.0f},\n         });", "fixed": "                 {11, 6.5f},\n                 {12, 5.5f},\n                 {13, 3.5f},\n                {14, 3.5f},\n                 {15, 2.5f},\n                 {16, 2.0f},\n         });", "sourceBeforeFix": "{14,3.0f}", "sourceAfterFix": "{14,3.5f}"}
{"fixCommitSHA1": "c5b57e3099abcd8d8fd222c327ec52159422e6d9", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             selectedKeysField.set(selector, set);\n             publicSelectedKeysField.set(selector, set);\n            logger.info(\"Optimized Selector: \" + selector.getClass().getName());\n             return set;\n         } catch (Throwable t) {", "fixed": "             selectedKeysField.set(selector, set);\n             publicSelectedKeysField.set(selector, set);\n            logger.finest(\"Optimized Selector: \" + selector.getClass().getName());\n             return set;\n         } catch (Throwable t) {", "sourceBeforeFix": "logger.info(\"Optimized Selector: \" + selector.getClass().getName())", "sourceAfterFix": "logger.finest(\"Optimized Selector: \" + selector.getClass().getName())"}
{"fixCommitSHA1": "fee49a6279223da125be367228089d901dbaba28", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\tZIP_SERVER(0x24,\"ZIP_SERVER\",null),\n \t\tSWITCH_BINARY(0x25,\"SWITCH_BINARY\",ZWaveBinarySwitchCommandClass.class),\n \t\tSWITCH_MULTILEVEL(0x26,\"SWITCH_MULTILEVEL\",ZWaveMultiLevelSwitchCommandClass.class),\n\t\tSWITCH_ALL(0x27,\"SWITCH_ALL\",ZWaveSwithcAllCommandClass.class),\n \t\tSWITCH_TOGGLE_BINARY(0x28,\"SWITCH_TOGGLE_BINARY\",null),\n \t\tSWITCH_TOGGLE_MULTILEVEL(0x29,\"SWITCH_TOGGLE_MULTILEVEL\",null),\n \t\tCHIMNEY_FAN(0x2A,\"CHIMNEY_FAN\",null),", "fixed": " \t\tZIP_SERVER(0x24,\"ZIP_SERVER\",null),\n \t\tSWITCH_BINARY(0x25,\"SWITCH_BINARY\",ZWaveBinarySwitchCommandClass.class),\n \t\tSWITCH_MULTILEVEL(0x26,\"SWITCH_MULTILEVEL\",ZWaveMultiLevelSwitchCommandClass.class),\n\t\tSWITCH_ALL(0x27,\"SWITCH_ALL\",ZWaveSwitchAllCommandClass.class),\n \t\tSWITCH_TOGGLE_BINARY(0x28,\"SWITCH_TOGGLE_BINARY\",null),\n \t\tSWITCH_TOGGLE_MULTILEVEL(0x29,\"SWITCH_TOGGLE_MULTILEVEL\",null),\n \t\tCHIMNEY_FAN(0x2A,\"CHIMNEY_FAN\",null),", "sourceBeforeFix": "ZWaveSwithcAllCommandClass.class", "sourceAfterFix": "ZWaveSwitchAllCommandClass.class"}
{"fixCommitSHA1": "5bcda0dcda632007620256bcc654628a81ab50f0", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "     if (s == null || regex == null) {\n       return null;\n     }\n    if (!regex.equals(lastRegex)) {\n       lastRegex = regex;\n       p = Pattern.compile(regex);\n     }", "fixed": "     if (s == null || regex == null) {\n       return null;\n     }\n    if (!regex.equals(lastRegex) || p == null) {\n       lastRegex = regex;\n       p = Pattern.compile(regex);\n     }", "sourceBeforeFix": "!regex.equals(lastRegex)", "sourceAfterFix": "!regex.equals(lastRegex) || p == null"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "dd80647fbf218880e5f8d72441d080b6c92778fa", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t\ttry {\r\n \t\t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t\t} catch (Exception e) {\r\n\t\t\t\tthrow new GdxRuntimeException(\"Failed to read Vorbis.\");\r\n \t\t\t}\r\n \t\t\tif (bytes == 0 && i < 2) {\r\n \t\t\t\tthrow new GdxRuntimeException(\"End of file before finding all Vorbis headers.\");\r", "fixed": " \t\t\ttry {\r\n \t\t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t\t} catch (Exception e) {\r\n\t\t\t\tthrow new GdxRuntimeException(\"Failed to read Vorbis.\", e);\r\n \t\t\t}\r\n \t\t\tif (bytes == 0 && i < 2) {\r\n \t\t\t\tthrow new GdxRuntimeException(\"End of file before finding all Vorbis headers.\");\r", "sourceBeforeFix": "new GdxRuntimeException(\"Failed to read Vorbis.\")", "sourceAfterFix": "new GdxRuntimeException(\"Failed to read Vorbis.\",e)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "72754c27b271416d3c8ee7497fa7f88abff393f8", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t * @param properties the batch properties\n \t * @param dataSource the underlying data source\n \t */\n\tBasicBatchConfigurer(BatchProperties properties, DataSource dataSource) {\n \t\tthis(properties, dataSource, null);\n \t}", "fixed": " \t * @param properties the batch properties\n \t * @param dataSource the underlying data source\n \t */\n\tprotected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource) {\n \t\tthis(properties, dataSource, null);\n \t}", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixSetEndpointBuilder\n             extends\n                 AtomixSetEndpointConsumerBuilder, AtomixSetEndpointProducerBuilder {\n         default AdvancedAtomixSetEndpointBuilder advanced() {", "fixed": "     \n    public interface AtomixSetEndpointBuilder\n             extends\n                 AtomixSetEndpointConsumerBuilder, AtomixSetEndpointProducerBuilder {\n         default AdvancedAtomixSetEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "af6a4908c4dd38c0f935803ab6b8ed99387219f2", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "fixed": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "sourceBeforeFix": "logger.error(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())", "sourceAfterFix": "logger.debug(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2);\n }", "fixed": "     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "af87fe0e2580cafb6b563688f119b3d40ae100f2", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "fixed": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddressNode1(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "e2283c8ee0b667ad14d017573c1a4da98dedfcac", "projectName": "neo4j.neo4j", "bugType": "Change Modifier", "problem": "         }\n     }\n    public String filterVersionForUDC( String version )\n     {\n         if ( !version.contains( \"+\" ) )\n         {", "fixed": "         }\n     }\n    public static String filterVersionForUDC( String version )\n     {\n         if ( !version.contains( \"+\" ) )\n         {", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "296ba4ff8db020176e5b6abe058052a1314cd2ee", "projectName": "openhab.openhab", "bugType": "Same Function More Args", "problem": " \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "fixed": " \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp, serviceName);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "sourceBeforeFix": "historicState(item,timestamp)", "sourceAfterFix": "historicState(item,timestamp,serviceName)"}
{"fixCommitSHA1": "194a3d4413de06e4f57f2c2bdb001fcd1fd4385b", "projectName": "facebook.presto", "bugType": "Less Specific If", "problem": "     private String formatDataRate(long inputDataSize, Duration duration)\n     {\n         double rate = inputDataSize / duration.convertTo(TimeUnit.SECONDS);\n        if (Double.isNaN(rate)) {\n             return \"0Bps\";\n         }\n         DataSize dataSize = new DataSize(rate, Unit.BYTE).convertToMostSuccinctDataSize();", "fixed": "     private String formatDataRate(long inputDataSize, Duration duration)\n     {\n         double rate = inputDataSize / duration.convertTo(TimeUnit.SECONDS);\n        if (Double.isNaN(rate) || Double.isInfinite(rate)) {\n             return \"0Bps\";\n         }\n         DataSize dataSize = new DataSize(rate, Unit.BYTE).convertToMostSuccinctDataSize();", "sourceBeforeFix": "Double.isNaN(rate)", "sourceAfterFix": "Double.isNaN(rate) || Double.isInfinite(rate)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFlinkEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default FlinkEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFlinkEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default FlinkEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2462c82c0ea8766f40cf454c57557a5c63d2c09d", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "   private static final PartitionsSpec DEFAULT_PARTITIONS_SPEC = HashedPartitionsSpec.makeDefaultHashedPartitionsSpec();\n   private static final Map<DateTime, List<HadoopyShardSpec>> DEFAULT_SHARD_SPECS = ImmutableMap.of();\n   private static final IndexSpec DEFAULT_INDEX_SPEC = new IndexSpec();\n  private static final int DEFAULT_ROW_FLUSH_BOUNDARY = 80000;\n   private static final boolean DEFAULT_USE_COMBINER = false;\n   private static final Boolean DEFAULT_BUILD_V9_DIRECTLY = Boolean.FALSE;\n   private static final int DEFAULT_NUM_BACKGROUND_PERSIST_THREADS = 0;", "fixed": "   private static final PartitionsSpec DEFAULT_PARTITIONS_SPEC = HashedPartitionsSpec.makeDefaultHashedPartitionsSpec();\n   private static final Map<DateTime, List<HadoopyShardSpec>> DEFAULT_SHARD_SPECS = ImmutableMap.of();\n   private static final IndexSpec DEFAULT_INDEX_SPEC = new IndexSpec();\n  private static final int DEFAULT_ROW_FLUSH_BOUNDARY = 75000;\n   private static final boolean DEFAULT_USE_COMBINER = false;\n   private static final Boolean DEFAULT_BUILD_V9_DIRECTLY = Boolean.FALSE;\n   private static final int DEFAULT_NUM_BACKGROUND_PERSIST_THREADS = 0;", "sourceBeforeFix": "DEFAULT_ROW_FLUSH_BOUNDARY=80000", "sourceAfterFix": "DEFAULT_ROW_FLUSH_BOUNDARY=75000"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ClassEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedClassEndpointBuilder advanced() {\n             return (AdvancedClassEndpointBuilder) this;\n         }", "fixed": "     \n    public interface ClassEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedClassEndpointBuilder advanced() {\n             return (AdvancedClassEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL11.glGetFloat(pname,params)", "sourceAfterFix": "GL11.glGetFloatv(pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "fixed": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "8b22663471292a0094c56876160f3266b259e696", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             final String serverGroup = entry.getKey().getServerGroupName();\n             groupNames.add(serverGroup);\n             final String hostName = entry.getKey().getHostName();\n            final String serverName = entry.getKey().getHostName();\n             if (!groupToServerMap.containsKey(serverGroup)) {\n                 groupToServerMap.put(serverGroup, new TreeSet<HostServer>());\n             }", "fixed": "             final String serverGroup = entry.getKey().getServerGroupName();\n             groupNames.add(serverGroup);\n             final String hostName = entry.getKey().getHostName();\n            final String serverName = entry.getKey().getServerName();\n             if (!groupToServerMap.containsKey(serverGroup)) {\n                 groupToServerMap.put(serverGroup, new TreeSet<HostServer>());\n             }", "sourceBeforeFix": "entry.getKey().getHostName()", "sourceAfterFix": "entry.getKey().getServerName()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "fixed": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "sourceBeforeFix": "GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)", "sourceAfterFix": "GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "31011d3232ace5a459ea2ba37f5634f7d4940694", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \tpublic boolean hasDuplicateUsername(String username, String systemId, Integer userId) {\r\n \t\tif (username == null || username.length() == 0)\r\n \t\t\tusername = \"-\";\r\n\t\tif (systemId == null || username.length() == 0)\r\n \t\t\tsystemId = \"-\";\r\n \t\tif (userId == null)\r", "fixed": " \tpublic boolean hasDuplicateUsername(String username, String systemId, Integer userId) {\r\n \t\tif (username == null || username.length() == 0)\r\n \t\t\tusername = \"-\";\r\n\t\tif (systemId == null || systemId.length() == 0)\r\n \t\t\tsystemId = \"-\";\r\n \t\tif (userId == null)\r", "sourceBeforeFix": "username.length()", "sourceAfterFix": "systemId.length()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastSedaEndpointBuilder\n             extends\n                 AdvancedHazelcastSedaEndpointConsumerBuilder, AdvancedHazelcastSedaEndpointProducerBuilder {\n         default HazelcastSedaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastSedaEndpointBuilder\n             extends\n                 AdvancedHazelcastSedaEndpointConsumerBuilder, AdvancedHazelcastSedaEndpointProducerBuilder {\n         default HazelcastSedaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4fa38aeba48a4f6641e48b3f73e1bc0c55c18156", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t\tif (!super.supports(type)) {\n \t\t\t\treturn false;\n \t\t\t}\n\t\t\tif (AnnotatedElementUtils.isAnnotated(type, Validated.class)) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\tif (type.getPackage().getName().startsWith(\"org.springframework.boot\")) {", "fixed": " \t\t\tif (!super.supports(type)) {\n \t\t\t\treturn false;\n \t\t\t}\n\t\t\tif (AnnotatedElementUtils.hasAnnotation(type, Validated.class)) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\tif (type.getPackage().getName().startsWith(\"org.springframework.boot\")) {", "sourceBeforeFix": "AnnotatedElementUtils.isAnnotated(type,Validated.class)", "sourceAfterFix": "AnnotatedElementUtils.hasAnnotation(type,Validated.class)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "dfb43299a88507211e9acb9a9f21a8ba54f0205a", "projectName": "iluwatar.java-design-patterns", "bugType": "Change Identifier Used", "problem": "    * @param testedPrototype  The tested prototype instance\n* @param expectedToString The expected {@link Prototype\n    */\n  public PrototypeTest(final Prototype testedPrototype, final String expectedToString) {\n     this.expectedToString = expectedToString;\n     this.testedPrototype = testedPrototype;\n   }", "fixed": "    * @param testedPrototype  The tested prototype instance\n* @param expectedToString The expected {@link Prototype\n    */\n  public PrototypeTest(final P testedPrototype, final String expectedToString) {\n     this.expectedToString = expectedToString;\n     this.testedPrototype = testedPrototype;\n   }", "sourceBeforeFix": "final Prototype testedPrototype", "sourceAfterFix": "final P testedPrototype"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2bebfdb7769796ed8adb1815a3319135456de196", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         File out = new File(\"target/out/hello.txt\").getAbsoluteFile();\n         assertTrue(\"file should exists\", out.exists());\n        assertEquals(\"Hello World\", IOConverter.toString(out));\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "fixed": "         File out = new File(\"target/out/hello.txt\").getAbsoluteFile();\n         assertTrue(\"file should exists\", out.exists());\n        assertEquals(\"Hello World\", IOConverter.toString(out, null));\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(2000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n    void addPet(@Valid Pet body);\n     @DELETE\n     @Path(\"/{petId}\")", "fixed": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n    void addPet(@Valid Pet body) throws Exception;\n     @DELETE\n     @Path(\"/{petId}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "296ba4ff8db020176e5b6abe058052a1314cd2ee", "projectName": "openhab.openhab", "bugType": "Same Function More Args", "problem": " \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "fixed": " \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp, serviceName);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "sourceBeforeFix": "historicState(item,timestamp)", "sourceAfterFix": "historicState(item,timestamp,serviceName)"}
{"fixCommitSHA1": "8a4f25a6dcaae2b704bce5794e007131236cb0d7", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                 String text = simple.evaluate(exchange, String.class);\n                Constructor<?> constructor = type.getDeclaredConstructor(String.class);\n                 cause = (Exception) constructor.newInstance(text);\n                 exchange.setException(cause);\n             } else if (cause == null && type != null) {", "fixed": "                 String text = simple.evaluate(exchange, String.class);\n                Constructor<?> constructor = type.getConstructor(String.class);\n                 cause = (Exception) constructor.newInstance(text);\n                 exchange.setException(cause);\n             } else if (cause == null && type != null) {", "sourceBeforeFix": "type.getDeclaredConstructor(String.class)", "sourceAfterFix": "type.getConstructor(String.class)"}
{"fixCommitSHA1": "8969566d0926bdd2ef438e8c9ba6e8e196f7ba7d", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {\n       @Override\n       public Integer execute(Jedis connection) {\n        connection.subscribe(jedisPubSub, patterns);\n         return 0;\n       }\n     }.runWithAnyNode();", "fixed": "     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {\n       @Override\n       public Integer execute(Jedis connection) {\n        connection.psubscribe(jedisPubSub, patterns);\n         return 0;\n       }\n     }.runWithAnyNode();", "sourceBeforeFix": "connection.subscribe(jedisPubSub,patterns)", "sourceAfterFix": "connection.psubscribe(jedisPubSub,patterns)"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": "if (mod.getModuleActivator() != null)\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n\t\t\tcatch (Throwable t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}", "fixed": "if (mod.getModuleActivator() != null)\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page2 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 2, 2);\n         assertThat(page2.pagination().getCount()).isEqualTo(2);\n        assertThat(page2.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page2.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello4\", \"hello5\");", "fixed": "         final PaginatedList<TestDTO> page2 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 2, 2);\n         assertThat(page2.pagination().getCount()).isEqualTo(2);\n        assertThat(page2.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page2.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello4\", \"hello5\");", "sourceBeforeFix": "assertThat(page1.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "         }\n     );\n    log.info(\"Performing lookup: %s --> %s\", ips, retVal);\n     return retVal;\n   }", "fixed": "         }\n     );\n    log.debug(\"Performing lookup: %s --> %s\", ips, retVal);\n     return retVal;\n   }", "sourceBeforeFix": "log.info(\"Performing lookup: %s --> %s\",nodeIds,retVal)", "sourceAfterFix": "log.debug(\"Performing lookup: %s --> %s\",nodeIds,retVal)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Web3jEndpointBuilder\n             extends\n                 Web3jEndpointConsumerBuilder, Web3jEndpointProducerBuilder {\n         default AdvancedWeb3jEndpointBuilder advanced() {", "fixed": "     \n    public interface Web3jEndpointBuilder\n             extends\n                 Web3jEndpointConsumerBuilder, Web3jEndpointProducerBuilder {\n         default AdvancedWeb3jEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4bb06fbd0a73484f025b1c254c9b44ddee9b19af", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "                   SequenceFile.CompressionType compress) throws IOException {\n       super(conf, new Path(dirName), \n             comparator(comparator), \n            keyClass(NullWritable.class), \n             compressionType(compress));\n     }", "fixed": "                   SequenceFile.CompressionType compress) throws IOException {\n       super(conf, new Path(dirName), \n             comparator(comparator), \n            valueClass(NullWritable.class), \n             compressionType(compress));\n     }", "sourceBeforeFix": "keyClass(NullWritable.class)", "sourceAfterFix": "valueClass(NullWritable.class)"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)\n     {\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getSizeInBytes\", type(long.class));", "fixed": "                 .retInt();\n     }\n    private static void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)\n     {\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getSizeInBytes\", type(long.class));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "fixed": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "sourceBeforeFix": "id=15807", "sourceAfterFix": "id=10807"}
{"fixCommitSHA1": "e376b7be0a40adaba56bbefce50c3f0930a9475c", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "         }\n     }\n    public AttributeModel getModel() {\n         Workspace workspace = projectController.getCurrentWorkspace();\n         if (workspace != null) {\n             AttributeModel model = workspace.getLookup().lookup(AttributeModel.class);", "fixed": "         }\n     }\n    public synchronized AttributeModel getModel() {\n         Workspace workspace = projectController.getCurrentWorkspace();\n         if (workspace != null) {\n             AttributeModel model = workspace.getLookup().lookup(AttributeModel.class);", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d7b19bfc78039804e5460a01e6d5939d2f4ce5f7", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "   }\n   /**\n   * Free the file or Folder from tachyon in-memory specified by argv\n    *\n    * @param path The TachyonURI path as the input of the command\n    * @return 0 if command if successful, -1 if an error occurred.", "fixed": "   }\n   /**\n   * Free the given file or folder from tachyon in-memory (recursively freeing all children \n   * if a folder)\n    *\n    * @param path The TachyonURI path as the input of the command\n    * @return 0 if command if successful, -1 if an error occurred.", "sourceBeforeFix": "mTfs.mkdirs(path)", "sourceAfterFix": "mTfs.mkdirs(path,true)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedValidatorEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ValidatorEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedValidatorEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ValidatorEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retLong();\n     }\n    private void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "fixed": "                 .retLong();\n     }\n    private static void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "038c9b6d6103052795b6d6e1175cd964c7461bb2", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "         }\n         \n        protected int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "fixed": "         }\n         \n        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0b3f7b13bf8c9eac4a0b9835152fd15859258978", "projectName": "google.auto", "bugType": "Same Function More Args", "problem": "           + \" interface; try using @AutoAnnotation instead\", type);\n     }\n    ImmutableSet<ExecutableElement> methods = getLocalAndInheritedMethods(type, processingEnv.getElementUtils());\n    ImmutableSet<ExecutableElement> methodsToImplement = methodsToImplement(methods);\n     String fqExtClass = TypeSimplifier.classNameOf(type);\n     List<AutoValueExtension> appliedExtensions = new ArrayList<AutoValueExtension>();", "fixed": "           + \" interface; try using @AutoAnnotation instead\", type);\n     }\n    ImmutableSet<ExecutableElement> methods =\n        getLocalAndInheritedMethods(type, processingEnv.getElementUtils());\n    ImmutableSet<ExecutableElement> methodsToImplement = methodsToImplement(type, methods);\n     String fqExtClass = TypeSimplifier.classNameOf(type);\n     List<AutoValueExtension> appliedExtensions = new ArrayList<AutoValueExtension>();", "sourceBeforeFix": "methodsToImplement(methods)", "sourceAfterFix": "methodsToImplement(type,methods)"}
{"fixCommitSHA1": "ea891b1fd030f0e7442611ed4c3c81893124712b", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "         }\n         catch (InvocationTargetException ex) {\n             assertTrue(ex.getCause() instanceof IllegalArgumentException);\n            assertEquals(ex.getCause().getMessage(), \"ClassInfo's name should be non-null\");\n         }\n         Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class, int.class,", "fixed": "         }\n         catch (InvocationTargetException ex) {\n             assertTrue(ex.getCause() instanceof IllegalArgumentException);\n            assertEquals(\"ClassInfo's name should be non-null\", ex.getCause().getMessage());\n         }\n         Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class, int.class,", "sourceBeforeFix": "assertEquals(ex.getCause().getMessage(),\"ClassInfo's name should be non-null\")", "sourceAfterFix": "assertEquals(\"ClassInfo's name should be non-null\",ex.getCause().getMessage())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "         maker, computingFunction);\n   }\n  private MapMaker createMapMaker() {\n     MapMaker maker = new MapMaker();\n     maker.useCustomMap = true;\n     return maker;", "fixed": "         maker, computingFunction);\n   }\n  private static MapMaker createMapMaker() {\n     MapMaker maker = new MapMaker();\n     maker.useCustomMap = true;\n     return maker;", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "fixed": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "sourceBeforeFix": "id=15801", "sourceAfterFix": "id=10801"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "616550ff7616a0dabf8d5bab40c22c63f17d2bc4", "projectName": "gephi.gephi", "bugType": "More Specific If", "problem": "             }\n             public void unselect(Workspace workspace) {\n                if (model.getSelectedLayout() != null) {\n                     model.saveProperties(model.getSelectedLayout());\n                 }\n             }", "fixed": "             }\n             public void unselect(Workspace workspace) {\n                if (model != null && model.getSelectedLayout() != null) {\n                     model.saveProperties(model.getSelectedLayout());\n                 }\n             }", "sourceBeforeFix": "model.getSelectedLayout() != null", "sourceAfterFix": "model != null && model.getSelectedLayout() != null"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n     /**", "fixed": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n     /**", "sourceBeforeFix": "id=15808", "sourceAfterFix": "id=10808"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2a754d9dd04b032290767958b78482707b88d76f", "projectName": "dropwizard.metrics", "bugType": "Change Identifier Used", "problem": "         for (final Thread.State state : Thread.State.values()) {\n             gauges.put(name(state.toString().toLowerCase(), \"count\"),\n                       new Gauge<Object>() {\n                            @Override\n                           public Object getValue() {\n                                return getThreadCount(state);\n                            }\n                        });", "fixed": "         for (final Thread.State state : Thread.State.values()) {\n             gauges.put(name(state.toString().toLowerCase(), \"count\"),\n                       new Gauge<Integer>() {\n                            @Override\n                           public Integer getValue() {\n                                return getThreadCount(state);\n                            }\n                        });", "sourceBeforeFix": "Gauge<Object>", "sourceAfterFix": "Gauge<Integer>"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "fixed": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic abstract boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CouchbaseEndpointBuilder\n             extends\n                 CouchbaseEndpointConsumerBuilder, CouchbaseEndpointProducerBuilder {\n         default AdvancedCouchbaseEndpointBuilder advanced() {", "fixed": "     \n    public interface CouchbaseEndpointBuilder\n             extends\n                 CouchbaseEndpointConsumerBuilder, CouchbaseEndpointProducerBuilder {\n         default AdvancedCouchbaseEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
