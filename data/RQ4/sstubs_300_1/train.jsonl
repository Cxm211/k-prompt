{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "fixed": "     }\n     @Override\n    public synchronized void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 15808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n     /**", "fixed": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 10808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n     /**", "sourceBeforeFix": "id=15808", "sourceAfterFix": "id=10808"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "ec1d0e8f15f589678cfeae6ffc717691499266d6", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         MockEndpoint bar = getMockEndpoint(\"mock:bar\");\n         bar.expectedMinimumMessageCount(1);\n        bar.setResultWaitTime(1000);\n         template.sendBody(\"seda:foo\", \"A\");\n         template.sendBody(\"seda:foo\", \"B\");", "fixed": "         MockEndpoint bar = getMockEndpoint(\"mock:bar\");\n         bar.expectedMinimumMessageCount(1);\n        bar.setResultWaitTime(3500);\n         template.sendBody(\"seda:foo\", \"A\");\n         template.sendBody(\"seda:foo\", \"B\");", "sourceBeforeFix": "bar.setResultWaitTime(1000)", "sourceAfterFix": "bar.setResultWaitTime(3500)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "8b9791f8b4b1154d6a053de901a5efd2105409e5", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     private String keySerializerClass;\n     @UriParam(label = \"producer\", defaultValue = \"1\")\n    private Integer requestRequiredAcks = 1;\n     @UriParam(label = \"producer\", defaultValue = \"33554432\")\n     private Integer bufferMemorySize = 33554432;", "fixed": "     private String keySerializerClass;\n     @UriParam(label = \"producer\", defaultValue = \"1\")\n    private String requestRequiredAcks = \"1\";\n     @UriParam(label = \"producer\", defaultValue = \"33554432\")\n     private Integer bufferMemorySize = 33554432;", "sourceBeforeFix": "public Integer getRequestRequiredAcks(){   return requestRequiredAcks; } ", "sourceAfterFix": "public String getRequestRequiredAcks(){   return requestRequiredAcks; } "}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param cause the cause of the error.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15806, value = \"Caught exception closing input stream\")\n     void caughtExceptionClosingInputStream(@Cause Throwable cause);\n     /**", "fixed": "      * @param cause the cause of the error.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10806, value = \"Caught exception closing input stream\")\n     void caughtExceptionClosingInputStream(@Cause Throwable cause);\n     /**", "sourceBeforeFix": "id=15802", "sourceAfterFix": "id=10802"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastQueueEndpointBuilder\n             extends\n                 AdvancedHazelcastQueueEndpointConsumerBuilder, AdvancedHazelcastQueueEndpointProducerBuilder {\n         default HazelcastQueueEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastQueueEndpointBuilder\n             extends\n                 AdvancedHazelcastQueueEndpointConsumerBuilder, AdvancedHazelcastQueueEndpointProducerBuilder {\n         default HazelcastQueueEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dea7ef0e0aae5ba4aef9d104cd10af986be9fc53", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     private int port2;\n     private static class MultipartHeaderFilterStrategy extends DefaultHeaderFilterStrategy {\n        public MultipartHeaderFilterStrategy() {\n             initialize();\n         }", "fixed": "     private int port2;\n     private static class MultipartHeaderFilterStrategy extends DefaultHeaderFilterStrategy {\n        MultipartHeaderFilterStrategy() {\n             initialize();\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HipchatEndpointBuilder\n             extends\n                 HipchatEndpointConsumerBuilder, HipchatEndpointProducerBuilder {\n         default AdvancedHipchatEndpointBuilder advanced() {", "fixed": "     \n    public interface HipchatEndpointBuilder\n             extends\n                 HipchatEndpointConsumerBuilder, HipchatEndpointProducerBuilder {\n         default AdvancedHipchatEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e56cc97612a07cedd5c67ff3c3b1e22bee525dfb", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                           List<Object> out) throws Exception {\n         if (msg.content() instanceof Serializable) {\n             Serializable payload = (Serializable) msg.content();\n            ByteBuf buf = ctx.alloc().heapBuffer();\n             delegateObjectEncoder.encode(ctx, payload, buf);\n             AddressedEnvelope<Object, InetSocketAddress> addressedEnvelop = \n                new DefaultAddressedEnvelope<Object, InetSocketAddress>(buf.retain(), msg.recipient(), msg.sender());\n             out.add(addressedEnvelop);\n         }", "fixed": "                           List<Object> out) throws Exception {\n         if (msg.content() instanceof Serializable) {\n             Serializable payload = (Serializable) msg.content();\n            ByteBuf buf = ctx.alloc().buffer();\n             delegateObjectEncoder.encode(ctx, payload, buf);\n             AddressedEnvelope<Object, InetSocketAddress> addressedEnvelop = \n                new DefaultAddressedEnvelope<Object, InetSocketAddress>(buf, msg.recipient(), msg.sender());\n             out.add(addressedEnvelop);\n         }", "sourceBeforeFix": "ctx.alloc().heapBuffer()", "sourceAfterFix": "ctx.alloc().buffer()"}
{"fixCommitSHA1": "f877cc6742ba3c75739edd9debae662d834d191d", "projectName": "mybatis.mybatis-3", "bugType": "Change Identifier Used", "problem": "   Map<Integer, User<String>> getAMapOfUsers();\n   @Select(\"select id, name from users where id=1\")\n  Map<Integer, Object> getUserAsAMap();\n   @Select(\"select id, name from users\")\n  List<Map<Integer, Object>> getAListOfMaps();\n }", "fixed": "   Map<Integer, User<String>> getAMapOfUsers();\n   @Select(\"select id, name from users where id=1\")\n  Map<String, Object> getUserAsAMap();\n   @Select(\"select id, name from users\")\n  List<Map<String, Object>> getAListOfMaps();\n }", "sourceBeforeFix": "Map<Integer,Object>", "sourceAfterFix": "Map<String,Object>"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    private static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d725e4c654270636bc7de92cc6d74683b1de29fe", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         ImmutableMap.Builder<Symbol, Expression> newTranslations = ImmutableMap.builder();\n         for (Expression expression : expressions) {\n            Symbol symbol = symbolAllocator.newSymbol(expression, analysis.getType(expression));\n             projections.put(symbol, translations.rewrite(expression));\n             newTranslations.put(symbol, expression);", "fixed": "         ImmutableMap.Builder<Symbol, Expression> newTranslations = ImmutableMap.builder();\n         for (Expression expression : expressions) {\n            Symbol symbol = symbolAllocator.newSymbol(expression, analysis.getTypeWithCoercions(expression));\n             projections.put(symbol, translations.rewrite(expression));\n             newTranslations.put(symbol, expression);", "sourceBeforeFix": "analysis.getType(expression)", "sourceAfterFix": "analysis.getTypeWithCoercions(expression)"}
{"fixCommitSHA1": "96d28a7ac975cd67a0697d7010e89473bb0716e1", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         if (length >= DIRECT_FLUSH_SIZE) {\n             flushBufferToOutputStream();\n            writeDirectlyToOutputStream((byte[]) source.getBase(), sourceIndex + (int) (slice.getAddress() - ARRAY_BYTE_BASE_OFFSET), length);\n             bufferOffset += length;\n         }\n         else {", "fixed": "         if (length >= DIRECT_FLUSH_SIZE) {\n             flushBufferToOutputStream();\n            writeDirectlyToOutputStream((byte[]) source.getBase(), sourceIndex + (int) (source.getAddress() - ARRAY_BYTE_BASE_OFFSET), length);\n             bufferOffset += length;\n         }\n         else {", "sourceBeforeFix": "slice.getAddress()", "sourceAfterFix": "source.getAddress()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "8bfa50ba500a6ca952f97f11c8eaa2969947387e", "projectName": "brianfrankcooper.YCSB", "bugType": "Wrong Function Name", "problem": "\t\tlong st=System.currentTimeMillis();\n \t\tdb.read(table,keyname,fields,new HashMap<String,ByteIterator>());\n \t\tdb.update(table,keyname,values);\n\t\tlong en=System.currentTimeMillis();\n\t\tMeasurements.getMeasurements().measure(\"READ-MODIFY-WRITE\", (int)(en-st));\n \t}\n \tpublic void doTransactionScan(DB db)", "fixed": "\t\tlong st=System.nanoTime();\n \t\tdb.read(table,keyname,fields,new HashMap<String,ByteIterator>());\n \t\tdb.update(table,keyname,values);\n\t\tlong en=System.nanoTime();\n\t\tMeasurements.getMeasurements().measure(\"READ-MODIFY-WRITE\", (int)((en-st)/1000));\n \t}\n \tpublic void doTransactionScan(DB db)", "sourceBeforeFix": "System.currentTimeMillis()", "sourceAfterFix": "System.nanoTime()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(254);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(253);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}
{"fixCommitSHA1": "29a532c691292b57576df51654cf1b9c65bea0be", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     public QueueItem txnPeek(long offerId, String transactionId) {\n         QueueItem item = getItemQueue().peek();\n         if (item == null) {\n            if ( offerId == -1L ){\n                 return null;\n             }\n             TxQueueItem txItem = txMap.get(offerId);", "fixed": "     public QueueItem txnPeek(long offerId, String transactionId) {\n         QueueItem item = getItemQueue().peek();\n         if (item == null) {\n            if ( offerId == -1 ){\n                 return null;\n             }\n             TxQueueItem txItem = txMap.get(offerId);", "sourceBeforeFix": "-1L", "sourceAfterFix": "-1"}
{"fixCommitSHA1": "97b8bc59615d4da0c51a91fef22ab462a8d69766", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         final Object child = parseTree.getChild(tree, 1);\n         Assert.assertTrue(\"Invalid child type\", child instanceof DetailAST);\n         Assert.assertEquals(\"Invalid child token type\",\n                TokenTypes.BLOCK_COMMENT_BEGIN, ((AST) child).getType());\n     }\n     @Test", "fixed": "         final Object child = parseTree.getChild(tree, 1);\n         Assert.assertTrue(\"Invalid child type\", child instanceof DetailAST);\n         Assert.assertEquals(\"Invalid child token type\",\n                TokenTypes.BLOCK_COMMENT_BEGIN, ((DetailAST) child).getType());\n     }\n     @Test", "sourceBeforeFix": "(AST)child", "sourceAfterFix": "(DetailAST)child"}
{"fixCommitSHA1": "317b247a1fff90a1cc50d51f548d116221caf99a", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "     }\n     TachyonURI path = new TachyonURI(Utils.getPathWithoutScheme(cPath));\n     DeleteOptions options =\n        new DeleteOptions.Builder(ClientContext.getConf()).setRecursive(recursive).build();\n     try {\n       TachyonFile file = mTFS.open(path);\n       mTFS.delete(file, options);", "fixed": "     }\n     TachyonURI path = new TachyonURI(Utils.getPathWithoutScheme(cPath));\n     DeleteOptions options =\n        new DeleteOptions.Builder().setRecursive(recursive).build();\n     try {\n       TachyonFile file = mTFS.open(path);\n       mTFS.delete(file, options);", "sourceBeforeFix": "new DeleteOptions.Builder(ClientContext.getConf())", "sourceAfterFix": "new DeleteOptions.Builder()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d222fc981c938bd3543ee61f22422d20efcdcd94", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Farewell World\", Exchange.FILE_NAME, \"mysub/mysubsub/farewell.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/mysub/mysubsub/farewell.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Farewell World\", Exchange.FILE_NAME, \"mysub/mysubsub/farewell.txt\");\n        Thread.sleep(800);\n         File file = new File(getScpPath() + \"/mysub/mysubsub/farewell.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(800)"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Wrong Function Name", "problem": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.datatype : cp.baseType);\n     }\n     private String getJSDocTypeWithBraces(CodegenParameter cp) {\n         return \"{\" + getJSDocType(cp) + \"}\";\n     }\n     private String getJSDocType(CodegenParameter cp) {\n         String dataType = trimBrackets(cp.dataType);", "fixed": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.datatype : cp.baseType);\n     }\n    \n     private String getJSDocType(CodegenParameter cp) {\n         String dataType = trimBrackets(cp.dataType);", "sourceBeforeFix": "getJSDocTypeWithBraces(operation)", "sourceAfterFix": "getJSDocType(operation)"}
{"fixCommitSHA1": "dbc0ca8d1cb03f2da2c8fc0062e5d4b681fef11a", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "         final DummyOperation operation = new DummyOperation(0);\n         Data data = serializationService.toData(operation);\n        final Packet packet = new Packet(data, operation.getPartitionId(), serializationService.getPortableContext());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);", "fixed": "         final DummyOperation operation = new DummyOperation(0);\n         Data data = serializationService.toData(operation);\n        final Packet packet = new Packet(data, operation.getPartitionId());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);", "sourceBeforeFix": "new Packet(data,operation.getPartitionId(),serializationService.getPortableContext())", "sourceAfterFix": "new Packet(data,operation.getPartitionId())"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void split(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    split(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void split(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    split(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "         \t\t\"order by min(length(p)), user.name\";\n         gen.get().addSnippet( \"query-get-members\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-members\",", "fixed": "         \t\t\"order by min(length(p)), user.name\";\n         gen.get().addSnippet( \"query-get-members\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-members\",", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "                 for (CodegenParameter cp : operation.allParams) {\n                    String jsdocType = getJSDocTypeWithBraces(cp);\n                     cp.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n                 }\n                String jsdocType = getJSDocTypeWithBraces(operation);\n                 operation.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n             }\n         }", "fixed": "                 for (CodegenParameter cp : operation.allParams) {\n                    String jsdocType = getJSDocType(cp);\n                     cp.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n                 }\n                String jsdocType = getJSDocType(operation);\n                 operation.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n             }\n         }", "sourceBeforeFix": "getJSDocTypeWithBraces(cp)", "sourceAfterFix": "getJSDocType(cp)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "ec6f0cffe68e0736c04783b61f980f1271064dd9", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  public int hashCode() {\n     Function<N, Set<E>> nodeToOutEdges = new Function<N, Set<E>>() {\n       @Override\n       public Set<E> apply(N node) {", "fixed": "   }\n   @Override\n  public final int hashCode() {\n     Function<N, Set<E>> nodeToOutEdges = new Function<N, Set<E>>() {\n       @Override\n       public Set<E> apply(N node) {", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "2381bd9b4a10217c8678a4fb4c1d43a090e396b8", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         assertMockEndpointsSatisfied();\n         long delta = System.currentTimeMillis() - start;\n        assertTrue(\"Should not take that long: \" + delta, delta < 5000);\n     }\n     private void createTestData() {", "fixed": "         assertMockEndpointsSatisfied();\n         long delta = System.currentTimeMillis() - start;\n        assertTrue(\"Should not take that long: \" + delta, delta < 7000);\n     }\n     private void createTestData() {", "sourceBeforeFix": "delta < 5000", "sourceAfterFix": "delta < 7000"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TimerEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedTimerEndpointBuilder advanced() {\n             return (AdvancedTimerEndpointBuilder) this;\n         }", "fixed": "     \n    public interface TimerEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedTimerEndpointBuilder advanced() {\n             return (AdvancedTimerEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Advanced builder for endpoint for the Web3j Ethereum Blockchain\n      * component.\n      */\n    public static interface AdvancedWeb3jEndpointBuilder\n             extends\n                 AdvancedWeb3jEndpointConsumerBuilder, AdvancedWeb3jEndpointProducerBuilder {\n         default Web3jEndpointBuilder basic() {", "fixed": "      * Advanced builder for endpoint for the Web3j Ethereum Blockchain\n      * component.\n      */\n    public interface AdvancedWeb3jEndpointBuilder\n             extends\n                 AdvancedWeb3jEndpointConsumerBuilder, AdvancedWeb3jEndpointProducerBuilder {\n         default Web3jEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "a36966d96196f3d64daa2809b7bc6077eedc5a9d", "projectName": "swagger-api.swagger-codegen", "bugType": "Same Function More Args", "problem": "         \"Bool\",\n         \"Void\",\n         \"String\",\n        \"Character\")\n     );\n     defaultIncludes = new HashSet<String>(\n       Arrays.asList(", "fixed": "         \"Bool\",\n         \"Void\",\n         \"String\",\n        \"Character\",\n        \"AnyObject\")\n     );\n     defaultIncludes = new HashSet<String>(\n       Arrays.asList(", "sourceBeforeFix": "Arrays.asList(\"Int\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\")", "sourceAfterFix": "Arrays.asList(\"Int\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\",\"AnyObject\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e08f74620ba29298d59c97e7327cbe51fbd5b39e", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic boolean isVisualPressed () {\r\n \t\tif (pressed) return true;\r\n \t\tif (visualPressedTime <= 0) return false;\r\n\t\tif (visualPressedTime > TimeUtils.nanoTime() && Gdx.graphics.isContinuousRendering()) return true;\r\n \t\tvisualPressedTime = 0;\r\n \t\treturn false;\r\n \t}\r", "fixed": " \tpublic boolean isVisualPressed () {\r\n \t\tif (pressed) return true;\r\n \t\tif (visualPressedTime <= 0) return false;\r\n\t\tif (visualPressedTime > TimeUtils.millis() && Gdx.graphics.isContinuousRendering()) return true;\r\n \t\tvisualPressedTime = 0;\r\n \t\treturn false;\r\n \t}\r", "sourceBeforeFix": "TimeUtils.nanoTime()", "sourceAfterFix": "TimeUtils.millis()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e3c87cba0bbed00c739e01599e29a5621c9ef3b3", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n \t\t}\n \t\t@Bean", "fixed": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.responder());\n \t\t}\n \t\t@Bean", "sourceBeforeFix": "rSocketMessageHandler.serverResponder()", "sourceAfterFix": "rSocketMessageHandler.responder()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ad3c1adb1c911a348c35bec42a1ec102de7dfdde", "projectName": "Alluxio.alluxio", "bugType": "Change Boolean Literal", "problem": "   }\n   /**\n   * Convenience method for free with recursive set. This is the same as calling free(file, true).\n    *\n    * @param file the handler for the file to free recursively\n    * @throws FileDoesNotExistException if the file does not exist in Tachyon space", "fixed": "   }\n   /**\n   * Convenience method for free without recursive set. This is the same as calling free(file, false).\n    *\n    * @param file the handler for the file to free recursively\n    * @throws FileDoesNotExistException if the file does not exist in Tachyon space", "sourceBeforeFix": "setPin(file,false)", "sourceAfterFix": "setPin(file,true)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "}, tags={ \"fake_classname_tags 123\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClassname(@Valid Client body);\n }", "fixed": "}, tags={ \"fake_classname_tags 123\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClassname(@Valid Client body) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "66697f6dd1574513ddcbfabd535e140088251982", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    protected static class TypeMapping {\n         private final Class<?> toType;\n         private final Class<?> fromType;", "fixed": "     \n    protected static final class TypeMapping {\n         private final Class<?> toType;\n         private final Class<?> fromType;", "sourceBeforeFix": "12", "sourceAfterFix": "28"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "604d099376ed4466ba7f73521953e2eea734b93d", "projectName": "openhab.openhab", "bugType": "Change Unary Operator\t", "problem": "     private int bytesToInt(byte bytes[], int idx, int len) {\n         int val = 0;\n        for (int i = 0; i < len; ++len) {\n             val = val << 8;\n             val = val | bytes[idx + i];\n         }", "fixed": "     private int bytesToInt(byte bytes[], int idx, int len) {\n         int val = 0;\n        for (int i = 0; i < len; i++) {\n             val = val << 8;\n             val = val | bytes[idx + i];\n         }", "sourceBeforeFix": "Arrays.equals(oldVal,val)", "sourceAfterFix": "!Arrays.equals(oldVal,val)"}
{"fixCommitSHA1": "f652e2465b9f44d024cbb1a91f5793c147a50471", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         reader.join();\n         writer.join();\n        await().atMost(5, TimeUnit.SECONDS).until(new Callable<Boolean>() {\n             @Override\n             public Boolean call() throws Exception {\n                 return stream.isDone();", "fixed": "         reader.join();\n         writer.join();\n        await().atMost(20, TimeUnit.SECONDS).until(new Callable<Boolean>() {\n             @Override\n             public Boolean call() throws Exception {\n                 return stream.isDone();", "sourceBeforeFix": "await().atMost(5,TimeUnit.SECONDS)", "sourceAfterFix": "await().atMost(20,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EventAdminEndpointBuilder\n             extends\n                 EventAdminEndpointConsumerBuilder, EventAdminEndpointProducerBuilder {\n         default AdvancedEventAdminEndpointBuilder advanced() {", "fixed": "     \n    public interface EventAdminEndpointBuilder\n             extends\n                 EventAdminEndpointConsumerBuilder, EventAdminEndpointProducerBuilder {\n         default AdvancedEventAdminEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RestEndpointBuilder\n             extends\n                 RestEndpointConsumerBuilder, RestEndpointProducerBuilder {\n         default AdvancedRestEndpointBuilder advanced() {", "fixed": "     \n    public interface RestEndpointBuilder\n             extends\n                 RestEndpointConsumerBuilder, RestEndpointProducerBuilder {\n         default AdvancedRestEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "25c95d8dd9ec2d4e712aaeccedec306be41a3c8a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       try {\n         regionLocation = reverseDNS(regionAddress);\n       } catch (NamingException e) {\n        LOG.error(\"Cannot resolve the host name for \" + regionAddress + \" because of \" + e);\n         regionLocation = location.getHostname();\n       }", "fixed": "       try {\n         regionLocation = reverseDNS(regionAddress);\n       } catch (NamingException e) {\n        LOG.warn(\"Cannot resolve the host name for \" + regionAddress + \" because of \" + e);\n         regionLocation = location.getHostname();\n       }", "sourceBeforeFix": "LOG.error(\"Cannot resolve the host name for \" + regionAddress + \" because of \"+ e)", "sourceAfterFix": "LOG.warn(\"Cannot resolve the host name for \" + regionAddress + \" because of \"+ e)"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void display(GL2 gl, GLU glu) {\n         markTime++;\n         VizModel vizModel = VizController.getInstance().getVizModel();", "fixed": "     }\n     @Override\n    public synchronized void display(GL2 gl, GLU glu) {\n         markTime++;\n         VizModel vizModel = VizController.getInstance().getVizModel();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "f7f180830156c75d419b946268840d79d2a0b747", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "         }\n         Map<String, Object> params = new HashMap<String, Object>();\n        IntrospectionSupport.getProperties(configuration, params, null);\n         setProperties(clientConfig, params);\n     }\n }", "fixed": "         }\n         Map<String, Object> params = new HashMap<String, Object>();\n        IntrospectionSupport.getProperties(configuration, params, null, false);\n         setProperties(clientConfig, params);\n     }\n }", "sourceBeforeFix": "IntrospectionSupport.getProperties(configuration,params,null)", "sourceAfterFix": "IntrospectionSupport.getProperties(configuration,params,null,false)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     managedSpan.deactivate();\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "fixed": "                     managedSpan.deactivate();\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "5bb9d3bf8f6ca67da43de8cc4aa7ea0a5b382a29", "projectName": "Atmosphere.atmosphere", "bugType": "Less Specific If", "problem": "         Map<Class<? extends Annotation>, Set<Class<?>>> annotations = (Map<Class<? extends Annotation>, Set<Class<?>>>) sc.getAttribute(ANNOTATION_ATTRIBUTE);\n        if (annotations == null) {\n             delegate = new BytecodeBasedAnnotationProcessor();\n         } else {\n             delegate = new ServletContainerInitializerAnnotationProcessor(annotations, framework);", "fixed": "         Map<Class<? extends Annotation>, Set<Class<?>>> annotations = (Map<Class<? extends Annotation>, Set<Class<?>>>) sc.getAttribute(ANNOTATION_ATTRIBUTE);\n        if (annotations == null || annotations.isEmpty()) {\n             delegate = new BytecodeBasedAnnotationProcessor();\n         } else {\n             delegate = new ServletContainerInitializerAnnotationProcessor(annotations, framework);", "sourceBeforeFix": "annotations == null", "sourceAfterFix": "annotations == null || annotations.isEmpty()"}
{"fixCommitSHA1": "94e4b5926b4c263f4cf5e6ad545a4bb03077b9a5", "projectName": "Atmosphere.atmosphere", "bugType": "Change Unary Operator\t", "problem": "         long now = System.nanoTime();\n         CacheMessage cacheMessage = put(e, now, uuid);\n        if (uuid.equals(NULL)) {\n             AtmosphereResourceFactory.getDefault().find(uuid).getResponse().setHeader(X_CACHE_DATE, String.valueOf(now));\n         }\n         return cacheMessage;", "fixed": "         long now = System.nanoTime();\n         CacheMessage cacheMessage = put(e, now, uuid);\n        if (!uuid.equals(NULL)) {\n             AtmosphereResourceFactory.getDefault().find(uuid).getResponse().setHeader(X_CACHE_DATE, String.valueOf(now));\n         }\n         return cacheMessage;", "sourceBeforeFix": "uuid.equals(NULL)", "sourceAfterFix": "!uuid.equals(NULL)"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new DeleteCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName = \"--help\";", "fixed": "         command = new DeleteCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName = \"--help\";", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Heartbeat_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         byte[] request = getRequestBytes(null, header);\n         Request obj = (Request) decode(request);\n         Assert.assertEquals(null, obj.getData());", "fixed": "     @Test\n     public void test_Decode_Return_Request_Heartbeat_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         byte[] request = getRequestBytes(null, header);\n         Request obj = (Request) decode(request);\n         Assert.assertEquals(null, obj.getData());", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "ea595bcf6038931a7e00b89f77695fc02050ce41", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         @Override\n         public StringValueArrayProvider create(String str) {\n            return new UnsafeBasedStringCharProvider(UNSAFE, stringValueFieldOffset, str);\n         }\n         @Override\n         public boolean isAvailable() {\n            return UNSAFE != null && stringValueFieldOffset != -1;\n         }\n     }", "fixed": "         @Override\n         public StringValueArrayProvider create(String str) {\n            return new UnsafeBasedStringCharProvider(unsafe, stringValueFieldOffset, str);\n         }\n         @Override\n         public boolean isAvailable() {\n            return unsafe != null && stringValueFieldOffset != -1;\n         }\n     }", "sourceBeforeFix": "new UnsafeBasedStringCharProvider(UNSAFE,stringValueFieldOffset,str)", "sourceAfterFix": "new UnsafeBasedStringCharProvider(unsafe,stringValueFieldOffset,str)"}
{"fixCommitSHA1": "ece77fa477a6d322bb5b37c7e2367f4c4dfbf9f3", "projectName": "junit-team.junit", "bugType": "Wrong Function Name", "problem": " \t\t\tfLines.removeAllElements();\n      \t\tStringTokenizer st= new StringTokenizer(trace, \"\\n\\r\", false);\n \t    \twhile (st.hasMoreTokens()) \n \t\t\t\tfLines.add(st.nextToken());\n \t\t}\n \t}", "fixed": " \t\t\tfLines.removeAllElements();\n      \t\tStringTokenizer st= new StringTokenizer(trace, \"\\n\\r\", false);\n \t    \twhile (st.hasMoreTokens()) \n \t\t\t\tfLines.addElement(st.nextToken());\n \t\t}\n \t}", "sourceBeforeFix": "fLines.add(st.nextToken())", "sourceAfterFix": "fLines.addElement(st.nextToken())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSchedulerEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default SchedulerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSchedulerEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default SchedulerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "406d52b271b8669c5461c97e88a17480cfd8a674", "projectName": "xetorthio.jedis", "bugType": "Change Numeric Literal", "problem": "         long bttl = jedis.ttl(bfoo);\n        assertEquals(-1, bttl);\n         jedis.set(bfoo, bbar);\n         bttl = jedis.ttl(bfoo);", "fixed": "         long bttl = jedis.ttl(bfoo);\n        assertEquals(-2, bttl);\n         jedis.set(bfoo, bbar);\n         bttl = jedis.ttl(bfoo);", "sourceBeforeFix": "-1", "sourceAfterFix": "-2"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"fixCommitSHA1": "bbb28b514aadd4fc649dd0b7a47c6ece4d629fa7", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                                        if (body.endsWith(\"6\")) {\n                                             log.info(\"5th message received.  Rolling back.\");\n                                             exchange.getOut().setFault(true);\n                                             exchange.getOut().setBody(\"5th message received.  Rolling back.\");", "fixed": "                                        if (body.endsWith(\"6\") || body.endsWith(\"10\")) {\n                                             log.info(\"5th message received.  Rolling back.\");\n                                             exchange.getOut().setFault(true);\n                                             exchange.getOut().setBody(\"5th message received.  Rolling back.\");", "sourceBeforeFix": "getMockEndpoint(\"mock:test.after.1\").expectedMinimumMessageCount(10)", "sourceAfterFix": "getMockEndpoint(\"mock:test.after.1\").expectedMessageCount(10)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "fixed": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private static void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "4281cc1c5d3aa51b56db9d9e251c761c52a855e3", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t * before growing the backing table. */\n \tpublic IntFloatMap (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "fixed": " \t * before growing the backing table. */\n \tpublic IntFloatMap (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GitHubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGitHubEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GitHubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGitHubEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f0fa093ebc7f7d1b0b9beb254f6531bb77310853", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "             initEndpointMapper();\n             autoDetectContainer();\n            configureWebDotXmlAtmosphereHandler(sc);\n             asyncSupport.init(scFacade);\n             initAtmosphereHandler(scFacade);\n            configureAtmosphereInterceptor(sc);\n             analytics();\n             if (broadcasterCacheClassName == null) {", "fixed": "             initEndpointMapper();\n             autoDetectContainer();\n            configureWebDotXmlAtmosphereHandler(scFacade);\n             asyncSupport.init(scFacade);\n             initAtmosphereHandler(scFacade);\n            configureAtmosphereInterceptor(scFacade);\n             analytics();\n             if (broadcasterCacheClassName == null) {", "sourceBeforeFix": "configureWebDotXmlAtmosphereHandler(sc)", "sourceAfterFix": "configureWebDotXmlAtmosphereHandler(scFacade)"}
{"fixCommitSHA1": "02f1f95e522fd142dc0805c37e91d12880ab5996", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "             else {\n                 block.append(arguments.get(index));\n                 index++;\n                block.append(ByteCodeUtils.ifWasNullPopAndGoto(context, end, unboxedReturnType, Lists.reverse(stackTypes)));\n             }\n         }\n         block.append(invoke(context, binding));", "fixed": "             else {\n                 block.append(arguments.get(index));\n                 index++;\n                block.append(ifWasNullPopAndGoto(context, end, unboxedReturnType, Lists.reverse(stackTypes)));\n             }\n         }\n         block.append(invoke(context, binding));", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f678fbc96b5c2efeb7c4b93a4d5cfd62b053029b", "projectName": "alibaba.druid", "bugType": "Change Numeric Literal", "problem": "         Assert.assertEquals(2, visitor.getTables().size());\n         Assert.assertEquals(11, visitor.getColumns().size());\n        Assert.assertEquals(3, visitor.getConditions().size());\n         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name(\"MK.KPI_AREA_SORT_FACT_LATN_ID_MID\")));", "fixed": "         Assert.assertEquals(2, visitor.getTables().size());\n         Assert.assertEquals(11, visitor.getColumns().size());\n        Assert.assertEquals(4, visitor.getConditions().size());\n         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name(\"MK.KPI_AREA_SORT_FACT_LATN_ID_MID\")));", "sourceBeforeFix": "Assert.assertEquals(3,visitor.getConditions().size())", "sourceAfterFix": "Assert.assertEquals(4,visitor.getConditions().size())"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result3\");\n        mock.expectedBodiesReceived(\"Hello World 2\", \"Hello World 4\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result3\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\", \"Hello World 4\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World\")"}
{"fixCommitSHA1": "d7b19bfc78039804e5460a01e6d5939d2f4ce5f7", "projectName": "Alluxio.alluxio", "bugType": "Change Boolean Literal", "problem": "    */\n   public int unpin(TachyonURI path) throws IOException {\n     try {\n      mTfs.setPin(mTfs.open(path), false);\n       System.out.println(\"File '\" + path + \"' was successfully unpinned.\");\n       return 0;\n     } catch (Exception e) {", "fixed": "    */\n   public int unpin(TachyonURI path) throws IOException {\n     try {\n      mTfs.setPin(mTfs.open(path), true);\n       System.out.println(\"File '\" + path + \"' was successfully unpinned.\");\n       return 0;\n     } catch (Exception e) {", "sourceBeforeFix": "mTfs.setPin(mTfs.open(path),false)", "sourceAfterFix": "mTfs.setPin(mTfs.open(path),true)"}
{"fixCommitSHA1": "619ff2bc073d1b8859c8c8e1fa351b7858529670", "projectName": "Atmosphere.atmosphere", "bugType": "Change Operand ", "problem": "                     @Override\n                     public AsyncIOWriter write(String data) throws IOException {\n                        response.write(data + END);\n                         return this;\n                     }", "fixed": "                     @Override\n                     public AsyncIOWriter write(String data) throws IOException {\n                        response.write(data + end);\n                         return this;\n                     }", "sourceBeforeFix": "data + END", "sourceAfterFix": "data + end"}
{"fixCommitSHA1": "5f5cd45dfa66a816f86995a9540a536c55141ca4", "projectName": "openhab.openhab", "bugType": "Change Unary Operator\t", "problem": "         private int extractValue(Msg msg, int group) throws FieldException {\n             String lowByte = getStringParameter(\"low_byte\", \"\");\n            if (!lowByte.equals(\"\")) {\n                 logger.error(\"{} handler misconfigured, missing low_byte!\", nm());\n                 return 0;\n             }", "fixed": "         private int extractValue(Msg msg, int group) throws FieldException {\n             String lowByte = getStringParameter(\"low_byte\", \"\");\n            if (lowByte.equals(\"\")) {\n                 logger.error(\"{} handler misconfigured, missing low_byte!\", nm());\n                 return 0;\n             }", "sourceBeforeFix": "!lowByte.equals(\"\")", "sourceAfterFix": "lowByte.equals(\"\")"}
{"fixCommitSHA1": "88ab48a5a260605f05a102b94d70583c82afc632", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             }\n             JavaClass enumClass = enumClasses.get(enumClassName);\n             if (enumClass == null) {\n                enumClass = javaClass.addNestedType().setPublic().setStatic(true)\n                                 .setName(enumClassName).setEnum(true);\n                 enumClass.getJavaDoc().setText(\"Proxy enum for <code>\" + type + \"</code> enum.\");\n                 enumClasses.put(enumClassName, enumClass);", "fixed": "             }\n             JavaClass enumClass = enumClasses.get(enumClassName);\n             if (enumClass == null) {\n                enumClass = javaClass.addNestedType().setPackagePrivate().setStatic(true)\n                                 .setName(enumClassName).setEnum(true);\n                 enumClass.getJavaDoc().setText(\"Proxy enum for <code>\" + type + \"</code> enum.\");\n                 enumClasses.put(enumClassName, enumClass);", "sourceBeforeFix": "javaClass.addNestedType().setPublic()", "sourceAfterFix": "javaClass.addNestedType().setPackagePrivate()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedBeanstalkEndpointBuilder\n             extends\n                 AdvancedBeanstalkEndpointConsumerBuilder, AdvancedBeanstalkEndpointProducerBuilder {\n         default BeanstalkEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedBeanstalkEndpointBuilder\n             extends\n                 AdvancedBeanstalkEndpointConsumerBuilder, AdvancedBeanstalkEndpointProducerBuilder {\n         default BeanstalkEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAvroEndpointBuilder\n             extends\n                 AdvancedAvroEndpointConsumerBuilder, AdvancedAvroEndpointProducerBuilder {\n         default AvroEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAvroEndpointBuilder\n             extends\n                 AdvancedAvroEndpointConsumerBuilder, AdvancedAvroEndpointProducerBuilder {\n         default AvroEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3fcda6a67e8e859de3fc41ed93903832a30fc126", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "      *\n      * @return key of bind hostname\n      */\n    public String getBindHostKey() {\n       return mBindHostKey;\n     }", "fixed": "      *\n      * @return key of bind hostname\n      */\n    public PropertyKey getBindHostKey() {\n       return mBindHostKey;\n     }", "sourceBeforeFix": "private final String mPortKey; ", "sourceAfterFix": "private final PropertyKey mPortKey; "}
{"fixCommitSHA1": "6ec426667bbf19be4fca84eec48e03152e2cfffe", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Wrong Function Name", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void rename(int fileId, String dstPath) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void rename(int fileId, String dstPath) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNano(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "fixed": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AS2EndpointBuilder\n             extends\n                 AS2EndpointConsumerBuilder, AS2EndpointProducerBuilder {\n         default AdvancedAS2EndpointBuilder advanced() {", "fixed": "     \n    public interface AS2EndpointBuilder\n             extends\n                 AS2EndpointConsumerBuilder, AS2EndpointProducerBuilder {\n         default AdvancedAS2EndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     }\n   }\n  private void putModel(Map<Integer, Integer> model, Range<Integer> range, int value) {\n     for (int i = MIN_BOUND - 1; i <= MAX_BOUND + 1; i++) {\n       if (range.contains(i)) {\n         model.put(i, value);", "fixed": "     }\n   }\n  private static void putModel(Map<Integer, Integer> model, Range<Integer> range, int value) {\n     for (int i = MIN_BOUND - 1; i <= MAX_BOUND + 1; i++) {\n       if (range.contains(i)) {\n         model.put(i, value);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": "grammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}\ngrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}\ngrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}\n\t\tgrammarBuilder.append(\"  | ID          {$v = 3}\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");", "fixed": "grammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}\ngrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}\ngrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}\n\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");", "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d8bc2819023c4a23aecb28c3ecab448771e8a3a6", "projectName": "brettwooldridge.HikariCP", "bugType": "More Specific If", "problem": "             try\n             {\n                if (totalConnections.incrementAndGet() > configuration.getMaximumPoolSize())\n                 {\n                     totalConnections.decrementAndGet();\n                     break;", "fixed": "             try\n             {\n                if (retries == 0 && totalConnections.incrementAndGet() > configuration.getMaximumPoolSize())\n                 {\n                     totalConnections.decrementAndGet();\n                     break;", "sourceBeforeFix": "totalConnections.incrementAndGet() > configuration.getMaximumPoolSize()", "sourceAfterFix": "retries == 0 && totalConnections.incrementAndGet() > configuration.getMaximumPoolSize()"}
{"fixCommitSHA1": "eb71c8999ff29f7dc3fe8dcdba81084f7f6a5fac", "projectName": "NanoHttpd.nanohttpd", "bugType": "Same Function More Args", "problem": "                     while (mpline != null && mpline.trim().length() > 0) {\n                         int p = mpline.indexOf(':');\n                         if (p != -1) {\n                            item.put(mpline.substring(0, p).trim().toLowerCase(), mpline.substring(p + 1).trim());\n                         }\n                         mpline = in.readLine();\n                     }", "fixed": "                     while (mpline != null && mpline.trim().length() > 0) {\n                         int p = mpline.indexOf(':');\n                         if (p != -1) {\n                            item.put(mpline.substring(0, p).trim().toLowerCase(Locale.US), mpline.substring(p + 1).trim());\n                         }\n                         mpline = in.readLine();\n                     }", "sourceBeforeFix": "mpline.substring(0,p).trim().toLowerCase()", "sourceAfterFix": "mpline.substring(0,p).trim().toLowerCase(Locale.US)"}
{"fixCommitSHA1": "6d5ff33bdffa1e4a8b9e9c999604a9a84dc9426c", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": "  */\n class HornetQEmbeddedConfigurationFactory {\n\tprivate Log logger = LogFactory.getLog(HornetQAutoConfiguration.class);\n \tprivate final Embedded properties;", "fixed": "  */\n class HornetQEmbeddedConfigurationFactory {\n\tprivate Log logger = LogFactory.getLog(HornetQEmbeddedConfigurationFactory.class);\n \tprivate final Embedded properties;", "sourceBeforeFix": "HornetQAutoConfiguration.class", "sourceAfterFix": "HornetQEmbeddedConfigurationFactory.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n\t\tContext.setLocale(Context.getLocale());\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r", "fixed": " \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "8018d1af58330b6d21c858fa5ebfee6a66cd10b3", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "         }\n       } catch (IOException e) {\n         out.println(\"Cannot list keys for KeyProvider: \" + provider\n            + \": \" + e.getMessage());\n         throw e;\n       }\n     }", "fixed": "         }\n       } catch (IOException e) {\n         out.println(\"Cannot list keys for KeyProvider: \" + provider\n            + \": \" + e.toString());\n         throw e;\n       }\n     }", "sourceBeforeFix": "e.getMessage()", "sourceAfterFix": "e.toString()"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "e5d3850776174a63ddc2e0b5ead58409ca7c8706", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "   protected void initTable() throws IOException {\n     super.initTable();\n    byte[] tableName = getTablename().getBytes();\n     HBaseAdmin admin = new HBaseAdmin(conf);\n     HTableDescriptor tableDesc = admin.getTableDescriptor(tableName);\n     LOG.info(\"Disabling table \" + getTablename());", "fixed": "   protected void initTable() throws IOException {\n     super.initTable();\n    byte[] tableName = getTablename().getName();\n     HBaseAdmin admin = new HBaseAdmin(conf);\n     HTableDescriptor tableDesc = admin.getTableDescriptor(tableName);\n     LOG.info(\"Disabling table \" + getTablename());", "sourceBeforeFix": "getTablename().getBytes()", "sourceAfterFix": "getTablename().getName()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "0b52fefcc898f6f82c627bba9fcdd38a62583b22", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         try {\n             final InputStream stream = new FileInputStream(file);\n             stream.close();\n            throw new Exception(\"File \" + file.getPath() + \" should not exist\");\n         }\n         catch (FileNotFoundException ex) {\n             return ex.getLocalizedMessage();", "fixed": "         try {\n             final InputStream stream = new FileInputStream(file);\n             stream.close();\n            throw new IllegalStateException(\"File \" + file.getPath() + \" should not exist\");\n         }\n         catch (FileNotFoundException ex) {\n             return ex.getLocalizedMessage();", "sourceBeforeFix": "new Exception(\"File \" + file.getPath() + \" should not exist\")", "sourceAfterFix": "new IllegalStateException(\"File \" + file.getPath() + \" should not exist\")"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "dbd841562137595e365ccf2ad1524ecfdee958c9", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplemetationMethodDescriptor> implemetationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "fixed": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplementationMethodDescriptor> implementationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "sourceBeforeFix": "ImmutableSet.Builder<ImplemetationMethodDescriptor>", "sourceAfterFix": "ImmutableSet.Builder<ImplementationMethodDescriptor>"}
{"fixCommitSHA1": "eb04c74353ebdde873abe92417a43bbac6911ce0", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \tpublic void draw (Batch spriteBatch) {\r\n \t\tTextureRegion[] regions = font.getRegions();\r\n \t\tfor (int j = 0, n = vertexData.length; j < n; j++) {\r\nif (idx[j] >= 0) {\n \t\t\t\tfloat[] vertices = vertexData[j];\r\n \t\t\t\tspriteBatch.draw(regions[j].getTexture(), vertices, 0, idx[j]);\r\n \t\t\t}\r", "fixed": " \tpublic void draw (Batch spriteBatch) {\r\n \t\tTextureRegion[] regions = font.getRegions();\r\n \t\tfor (int j = 0, n = vertexData.length; j < n; j++) {\r\nif (idx[j] > 0) {\n \t\t\t\tfloat[] vertices = vertexData[j];\r\n \t\t\t\tspriteBatch.draw(regions[j].getTexture(), vertices, 0, idx[j]);\r\n \t\t\t}\r", "sourceBeforeFix": "idx[j] >= 0", "sourceAfterFix": "idx[j] > 0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "b0a5d4c266ed4117282decf06dc5053190423230", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": "      *\n      * Threading - synchronized(this). We must support adding listeners when there is no EventExecutor.\n      */\n    private Object listeners;\n     ", "fixed": "      *\n      * Threading - synchronized(this). We must support adding listeners when there is no EventExecutor.\n      */\n    private volatile Object listeners;\n     ", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "9cc9147adcd5143e5b1253b279f2e436adcbe7a3", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     \tfor (org.w3c.dom.Node child : new IterableNodeList(node.getChildNodes())) {\n     \t\tfinal String nodeName = cleanNodeName(child.getNodeName());\n     \t\tif(\"endpoints\".equals(nodeName)) {\n    \t\t\thandleSecurityPermissionEndpoints(principalNode, permConfig);\n     \t\t} else if(\"actions\".equals(nodeName)) {\n    \t\t\thandleSecurityPermissionActions(principalNode, permConfig);\n     \t\t}\n     \t}\n     }", "fixed": "     \tfor (org.w3c.dom.Node child : new IterableNodeList(node.getChildNodes())) {\n     \t\tfinal String nodeName = cleanNodeName(child.getNodeName());\n     \t\tif(\"endpoints\".equals(nodeName)) {\n    \t\t\thandleSecurityPermissionEndpoints(child, permConfig);\n     \t\t} else if(\"actions\".equals(nodeName)) {\n    \t\t\thandleSecurityPermissionActions(child, permConfig);\n     \t\t}\n     \t}\n     }", "sourceBeforeFix": "handleSecurityPermissionActions(principalNode,permConfig)", "sourceAfterFix": "handleSecurityPermissionActions(child,permConfig)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return The length of the data type, or <code>-1</code> for variable length data types.\n \t */\n\tpublic int getLength();", "fixed": " \t * \n \t * @return The length of the data type, or <code>-1</code> for variable length data types.\n \t */\n\tpublic abstract int getLength();", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4ef3a770a316068a6748f05a2c80969c3d6ffde1", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "         index.getDataInterval(),\n         VirtualColumns.EMPTY,\n         Granularities.ALL,\n        false\n     );\n     final List<Double> results = Sequences.toList(", "fixed": "         index.getDataInterval(),\n         VirtualColumns.EMPTY,\n         Granularities.ALL,\n        false,\n        null\n     );\n     final List<Double> results = Sequences.toList(", "sourceBeforeFix": "adapter.makeCursors(null,index.getDataInterval(),VirtualColumns.EMPTY,Granularities.ALL,false)", "sourceAfterFix": "adapter.makeCursors(null,index.getDataInterval(),VirtualColumns.EMPTY,Granularities.ALL,false,null)"}
{"fixCommitSHA1": "3066e39a4024e88b26e3346a93bd5b9b56dcefed", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "setLowHighExpected(lowResults, highResults, expectedResults, BLANC_F1, 46.00, 47.25, 46.68);\nsetLowHighExpected(lowResults, highResults, expectedResults, CONLL_SCORE, 53.75, 54.00, 54.01);\n     BenchmarkingHelper.benchmarkResults(results, lowResults, highResults, expectedResults);\n   }", "fixed": "setLowHighExpected(lowResults, highResults, expectedResults, BLANC_F1, 46.00, 47.25, 46.68);\nsetLowHighExpected(lowResults, highResults, expectedResults, CONLL_SCORE, 53.75, 54.10, 54.01);\n     BenchmarkingHelper.benchmarkResults(results, lowResults, highResults, expectedResults);\n   }", "sourceBeforeFix": "setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,54.01)", "sourceAfterFix": "setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.10,54.01)"}
{"fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n                 noOps,\n                DefaultAtmosphereRequest.newInstance(),\n                 response,\n                 config.framework().getAsyncSupport(),\n                 noOpsHandler);", "fixed": "         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n                 noOps,\n                AtmosphereRequest.newInstance(),\n                 response,\n                 config.framework().getAsyncSupport(),\n                 noOpsHandler);", "sourceBeforeFix": "DefaultAtmosphereRequest request", "sourceAfterFix": "AtmosphereRequest request"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body);\n }", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "01958335b94eb8813a090a53768e751e4f8f7366", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                     expectedType = SchemaField.Type.LONG;\n                 }\n                 else if (literal instanceof StringLiteral) {\n                    value = ((StringLiteral) literal).getSlice();\n                     expectedType = SchemaField.Type.STRING;\n                 }\n                 else {", "fixed": "                     expectedType = SchemaField.Type.LONG;\n                 }\n                 else if (literal instanceof StringLiteral) {\n                    value = ((StringLiteral) literal).getValue();\n                     expectedType = SchemaField.Type.STRING;\n                 }\n                 else {", "sourceBeforeFix": "((StringLiteral)literal).getSlice()", "sourceAfterFix": "((StringLiteral)literal).getValue()"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "fixed": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cbed2a13b8417c5f78f4f0ac1cea2f9b6e4f5526", "projectName": "apache.flink", "bugType": "Change Binary Operator", "problem": " \tprivate final Class<T> tupleType;\n \tpublic TupleTypeInfo(Class<T> tupleType, TypeInformation<?>... types) {\n\t\tif (types == null || types.length == 0 || types.length >= Tuple.MAX_ARITY) {\n \t\t\tthrow new IllegalArgumentException();\n \t\t}", "fixed": " \tprivate final Class<T> tupleType;\n \tpublic TupleTypeInfo(Class<T> tupleType, TypeInformation<?>... types) {\n\t\tif (types == null || types.length == 0 || types.length > Tuple.MAX_ARITY) {\n \t\t\tthrow new IllegalArgumentException();\n \t\t}", "sourceBeforeFix": "types.length >= Tuple.MAX_ARITY", "sourceAfterFix": "types.length > Tuple.MAX_ARITY"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "099bf2014a8cd43c270c5900ce9d34689287d0ef", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),", "fixed": "         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),", "sourceBeforeFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)", "sourceAfterFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHBaseEndpointBuilder\n             extends\n                 AdvancedHBaseEndpointConsumerBuilder, AdvancedHBaseEndpointProducerBuilder {\n         default HBaseEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHBaseEndpointBuilder\n             extends\n                 AdvancedHBaseEndpointConsumerBuilder, AdvancedHBaseEndpointProducerBuilder {\n         default HBaseEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bbb28b514aadd4fc649dd0b7a47c6ece4d629fa7", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                                        if (body.endsWith(\"6\")) {\n                                             log.info(\"5th message received.  Rolling back.\");\n                                             exchange.getOut().setFault(true);\n                                             exchange.getOut().setBody(\"5th message received.  Rolling back.\");", "fixed": "                                        if (body.endsWith(\"6\") || body.endsWith(\"10\")) {\n                                             log.info(\"5th message received.  Rolling back.\");\n                                             exchange.getOut().setFault(true);\n                                             exchange.getOut().setBody(\"5th message received.  Rolling back.\");", "sourceBeforeFix": "getMockEndpoint(\"mock:test.after.1\").expectedMinimumMessageCount(10)", "sourceAfterFix": "getMockEndpoint(\"mock:test.after.1\").expectedMessageCount(10)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "* @see\n* @see NormalizableKey\n \t */\n\tpublic void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "fixed": "* @see\n* @see NormalizableKey\n \t */\n\tpublic abstract void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EhcacheEndpointBuilder\n             extends\n                 EhcacheEndpointConsumerBuilder, EhcacheEndpointProducerBuilder {\n         default AdvancedEhcacheEndpointBuilder advanced() {", "fixed": "     \n    public interface EhcacheEndpointBuilder\n             extends\n                 EhcacheEndpointConsumerBuilder, EhcacheEndpointProducerBuilder {\n         default AdvancedEhcacheEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0456dbb2f67c9f98090954d9d70cb02ceb4622d3", "projectName": "stanfordnlp.CoreNLP", "bugType": "Wrong Function Name", "problem": "       return;\n     }\n     pw.print(\"(\");\n    String nodeString = onlyLabelValue ? nodeString() : nodeString();\n     pw.print(nodeString);\n     boolean parentIsNull = label() == null || label().value() == null;", "fixed": "       return;\n     }\n     pw.print(\"(\");\n    String nodeString = onlyLabelValue ? value() : nodeString();\n     pw.print(nodeString);\n     boolean parentIsNull = label() == null || label().value() == null;", "sourceBeforeFix": "nodeString()", "sourceAfterFix": "value()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "fixed": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();", "fixed": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();", "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f86baa60b64682aeaeafe54055df03f4d3f8c5d1", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "         meta.setContentMD5(new String(Base64.encode(mHash.digest())));\n       }\n       meta.setContentLength(mFile.length());\n      meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM);", "fixed": "         meta.setContentMD5(new String(Base64.encode(mHash.digest())));\n       }\n       meta.setContentLength(mFile.length());\n      meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM);", "sourceBeforeFix": "meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)", "sourceAfterFix": "meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)"}
{"fixCommitSHA1": "203b3e338e1941cfee5df5a431cd82e44d2c1a66", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     };\n   }\n  private static final Multiset<String> ELEMENTS_TO_FILTER_OUT = ImmutableMultiset.of(\n      \"foobar\", \"bazfoo\", \"foobar\", \"foobar\");\n   private static final Predicate<String> PREDICATE =\n       Predicates.not(Predicates.in(ELEMENTS_TO_FILTER_OUT));", "fixed": "     };\n   }\n  private static final ImmutableMultiset<String> ELEMENTS_TO_FILTER_OUT =\n      ImmutableMultiset.of(\"foobar\", \"bazfoo\", \"foobar\", \"foobar\");\n   private static final Predicate<String> PREDICATE =\n       Predicates.not(Predicates.in(ELEMENTS_TO_FILTER_OUT));", "sourceBeforeFix": "Multiset<String>", "sourceAfterFix": "ImmutableMultiset<String>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}
{"fixCommitSHA1": "0d55eaa6f802f96efce802c122bcbd878432f9bf", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "       String shortName = namespace.substring(namespace.lastIndexOf('.') + 1);\n       if (script.isModuleBody()) {\n        googRequireNode = IR.var(IR.name(shortName), googRequireNode);\n       } else {\n         googRequireNode = IR.exprResult(googRequireNode);\n       }", "fixed": "       String shortName = namespace.substring(namespace.lastIndexOf('.') + 1);\n       if (script.isModuleBody()) {\n        googRequireNode = IR.constNode(IR.name(shortName), googRequireNode);\n       } else {\n         googRequireNode = IR.exprResult(googRequireNode);\n       }", "sourceBeforeFix": "IR.var(IR.name(shortName),googRequireNode)", "sourceAfterFix": "IR.constNode(IR.name(shortName),googRequireNode)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dd20434290eb6ae6dff133d70073e35a3998d362", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n              + \" will not be in TachyonStorage\", ioe);\n           mShouldCacheCurrentBlock = false;\n         }\n       }", "fixed": "           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }", "sourceBeforeFix": "LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\",ioe)", "sourceAfterFix": "LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\")"}
{"fixCommitSHA1": "055f6dc3eb8705dbbfb04e44965a85cbfc0b10db", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tthrow new RuntimeException(\"RequestJob requires a response of type JobResponse. \" +\n \t\t\t\t\t\t\t\"Instead the response is of type \" + result.getClass());\n \t\t\t\t}else {\n\t\t\t\t\tfinal JobResponse jobResponse = (JobResponse) response;\n \t\t\t\t\tif(jobResponse instanceof JobFound){\n\t\t\t\t\t\tExecutionGraph archivedJob = ((JobFound)response).executionGraph();\n \t\t\t\t\t\twriteJsonForArchivedJob(resp.getWriter(), archivedJob);\n \t\t\t\t} else {\n \t\t\t\t\t\tLOG.warn(\"DoGet:job: Could not find job for job ID \" + jobId);", "fixed": " \t\t\t\t\tthrow new RuntimeException(\"RequestJob requires a response of type JobResponse. \" +\n \t\t\t\t\t\t\t\"Instead the response is of type \" + result.getClass());\n \t\t\t\t}else {\n\t\t\t\t\tfinal JobResponse jobResponse = (JobResponse) result;\n \t\t\t\t\tif(jobResponse instanceof JobFound){\n\t\t\t\t\t\tExecutionGraph archivedJob = ((JobFound)result).executionGraph();\n \t\t\t\t\t\twriteJsonForArchivedJob(resp.getWriter(), archivedJob);\n \t\t\t\t} else {\n \t\t\t\t\t\tLOG.warn(\"DoGet:job: Could not find job for job ID \" + jobId);", "sourceBeforeFix": "(JobFound)response", "sourceAfterFix": "(JobFound)result"}
{"fixCommitSHA1": "8018d1af58330b6d21c858fa5ebfee6a66cd10b3", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "           out.println(keyName + \" has been successfully deleted.\");\n           printProviderWritten();\n         } catch (IOException e) {\n          out.println(keyName + \" has not been deleted.\");\n           throw e;\n         }\n       }", "fixed": "           out.println(keyName + \" has been successfully deleted.\");\n           printProviderWritten();\n         } catch (IOException e) {\n          out.println(keyName + \" has not been deleted. \" + e.toString());\n           throw e;\n         }\n       }", "sourceBeforeFix": "e.getMessage()", "sourceAfterFix": "e.toString()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fBodyWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsSameNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsSameNull() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c107859092914bf1f6c684ee202f309eb60330e2", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": " \t\t\txml.append(\"<time-to-live-seconds>\").append(m.getTimeToLiveSeconds()).append(\"</time-to-live-seconds>\");\n \t\t\txml.append(\"<max-idle-seconds>\").append(m.getMaxIdleSeconds()).append(\"</max-idle-seconds>\");\n \t\t\txml.append(\"<cache-value>\").append(m.isCacheValue()).append(\"</cache-value>\");\n\t\t\txml.append(\"<read-backup-data>\").append(m.isCacheValue()).append(\"</read-backup-data>\");\n \t\t\txml.append(\"<merge-policy>\").append(m.getMergePolicy()).append(\"</merge-policy>\");\n \t\t\tif(m.getMapStoreConfig() != null) {", "fixed": " \t\t\txml.append(\"<time-to-live-seconds>\").append(m.getTimeToLiveSeconds()).append(\"</time-to-live-seconds>\");\n \t\t\txml.append(\"<max-idle-seconds>\").append(m.getMaxIdleSeconds()).append(\"</max-idle-seconds>\");\n \t\t\txml.append(\"<cache-value>\").append(m.isCacheValue()).append(\"</cache-value>\");\n\t\t\txml.append(\"<read-backup-data>\").append(m.isReadBackupData()).append(\"</read-backup-data>\");\n \t\t\txml.append(\"<merge-policy>\").append(m.getMergePolicy()).append(\"</merge-policy>\");\n \t\t\tif(m.getMapStoreConfig() != null) {", "sourceBeforeFix": "m.isCacheValue()", "sourceAfterFix": "m.isReadBackupData()"}
{"fixCommitSHA1": "6618cef776cf1c9ce67ff8ee461412110ca5ada7", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\t\t\tqueryServiceAddressesFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<String> queryServiceAddresses, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.warn(\"Requesting paths for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tfor (String queryServiceAddress : queryServiceAddresses) {\n \t\t\t\t\t\t\t\tretrieveAndQueryMetrics(queryServiceAddress);", "fixed": " \t\t\t\tqueryServiceAddressesFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<String> queryServiceAddresses, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.debug(\"Requesting paths for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tfor (String queryServiceAddress : queryServiceAddresses) {\n \t\t\t\t\t\t\t\tretrieveAndQueryMetrics(queryServiceAddress);", "sourceBeforeFix": "LOG.warn(\"Exception while fetching metrics.\",e)", "sourceAfterFix": "LOG.debug(\"Exception while fetching metrics.\",e)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "13ba17a0c8943487fec8ae9bda7ef1b5db143d4a", "projectName": "cucumber.cucumber-jvm", "bugType": "Same Function Less Args", "problem": "             mavenBundle(\"info.cukes\", \"pax-exam-calculator-service\"),\n             mavenBundle(\"info.cukes\", \"gherkin\"),\n            mavenBundle(\"info.cukes\", \"cucumber-jvm-deps\", \"1.0.4-SNAPSHOT\"),\n             mavenBundle(\"info.cukes\", \"cucumber-core\"),\n             mavenBundle(\"info.cukes\", \"cucumber-java\"),\n             mavenBundle(\"info.cukes\", \"cucumber-osgi\"),", "fixed": "             mavenBundle(\"info.cukes\", \"pax-exam-calculator-service\"),\n             mavenBundle(\"info.cukes\", \"gherkin\"),\n            mavenBundle(\"info.cukes\", \"cucumber-jvm-deps\"),\n             mavenBundle(\"info.cukes\", \"cucumber-core\"),\n             mavenBundle(\"info.cukes\", \"cucumber-java\"),\n             mavenBundle(\"info.cukes\", \"cucumber-osgi\"),", "sourceBeforeFix": "mavenBundle(\"info.cukes\",\"cucumber-jvm-deps\",\"1.0.4-SNAPSHOT\")", "sourceAfterFix": "mavenBundle(\"info.cukes\",\"cucumber-jvm-deps\")"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "fixed": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResultClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ActiveMQEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedActiveMQEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ActiveMQEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedActiveMQEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cde65024a20d660e586494ec6a443f8732fee068", "projectName": "apache.hadoop", "bugType": "Same Function Less Args", "problem": "   private RMNodeImpl getRunningNode() {\n     NodeId nodeId = BuilderUtils.newNodeId(\"localhost\", 0);\n     RMNodeImpl node = new RMNodeImpl(nodeId, rmContext,null, 0, 0,\n        null, null, null);\n     node.handle(new RMNodeEvent(node.getNodeID(), RMNodeEventType.STARTED));\n     Assert.assertEquals(NodeState.RUNNING, node.getState());\n     return node;", "fixed": "   private RMNodeImpl getRunningNode() {\n     NodeId nodeId = BuilderUtils.newNodeId(\"localhost\", 0);\n     RMNodeImpl node = new RMNodeImpl(nodeId, rmContext,null, 0, 0,\n        null, null);\n     node.handle(new RMNodeEvent(node.getNodeID(), RMNodeEventType.STARTED));\n     Assert.assertEquals(NodeState.RUNNING, node.getState());\n     return node;", "sourceBeforeFix": "new RMNodeStatusEvent(node.getNodeID(),status,new ArrayList<ContainerStatus>(),null,null,null)", "sourceAfterFix": "new RMNodeStatusEvent(node.getNodeID(),status,new ArrayList<ContainerStatus>(),null,null)"}
{"fixCommitSHA1": "8cb66861957089a03000c71b66f1e66e8e66d4c1", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n                createQueryResultSnippet( engine.execute( query  ).toString() ) ) );\n         fw.append( \"\\nNext up we will add filtering to set more parts \"\n                    + \"in motion:\\n\\nIn this next example, we take a list of users \"", "fixed": "                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n                createQueryResultSnippet( engine.execute( query  ).dumpToString() ) ) );\n         fw.append( \"\\nNext up we will add filtering to set more parts \"\n                    + \"in motion:\\n\\nIn this next example, we take a list of users \"", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d1b7f990f22e1792f514d0ed752bec461272e6b6", "projectName": "netty.netty", "bugType": "Change Boolean Literal", "problem": "             }\n             synchronized (OpenSslContext.class) {\n                 if (trustCertChainFile != null) {\n                    \n                    if (!SSLContext.setCertificateChainFile(ctx, trustCertChainFile.getPath(), true)) {\n                         long error = SSL.getLastErrorNumber();\n                         if (OpenSsl.isError(error)) {\n                             throw new SSLException(", "fixed": "             }\n             synchronized (OpenSslContext.class) {\n                 if (trustCertChainFile != null) {\n                    \n                    if (!SSLContext.setCertificateChainFile(ctx, trustCertChainFile.getPath(), false)) {\n                         long error = SSL.getLastErrorNumber();\n                         if (OpenSsl.isError(error)) {\n                             throw new SSLException(", "sourceBeforeFix": "SSLContext.setCertificateChainFile(ctx,trustCertChainFile.getPath(),true)", "sourceAfterFix": "SSLContext.setCertificateChainFile(ctx,trustCertChainFile.getPath(),false)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6618cef776cf1c9ce67ff8ee461412110ca5ada7", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\texecutor);\n \t\t\t}\n \t\t} catch (Exception e) {\n\t\t\tLOG.warn(\"Exception while fetching metrics.\", e);\n \t\t}\n \t}", "fixed": " \t\t\t\t\texecutor);\n \t\t\t}\n \t\t} catch (Exception e) {\n\t\t\tLOG.debug(\"Exception while fetching metrics.\", e);\n \t\t}\n \t}", "sourceBeforeFix": "LOG.warn(\"Exception while fetching metrics.\",e)", "sourceAfterFix": "LOG.debug(\"Exception while fetching metrics.\",e)"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " public class Label extends Widget {\r\n \tprivate LabelStyle style;\r\n \tprivate final TextBounds bounds = new TextBounds();\r\n\tprivate String text;\r\n \tprivate BitmapFontCache cache;\r\n \tprivate float prefWidth, prefHeight;\r\n \tprivate int labelAlign = Align.LEFT;\r", "fixed": " public class Label extends Widget {\r\n \tprivate LabelStyle style;\r\n \tprivate final TextBounds bounds = new TextBounds();\r\n\tprivate CharSequence text;\r\n \tprivate BitmapFontCache cache;\r\n \tprivate float prefWidth, prefHeight;\r\n \tprivate int labelAlign = Align.LEFT;\r", "sourceBeforeFix": "String text", "sourceAfterFix": "CharSequence text"}
{"fixCommitSHA1": "9b60eef0e2e02c5ebbb2d33db3e7dbb1809a1b03", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void handlerMappingsCreated() {\n \t\tthis.contextRunner.run((context) -> assertThat(context)\n\t\t\t\t.getBeans(HandlerMapping.class).hasSize(7));\n \t}\n \t@Test", "fixed": " \t@Test\n \tpublic void handlerMappingsCreated() {\n \t\tthis.contextRunner.run((context) -> assertThat(context)\n\t\t\t\t.getBeans(HandlerMapping.class).hasSize(5));\n \t}\n \t@Test", "sourceBeforeFix": "assertThat(context).getBeans(HandlerMapping.class).hasSize(7)", "sourceAfterFix": "assertThat(context).getBeans(HandlerMapping.class).hasSize(5)"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tAssert.assertEquals(1L, statuses.length);\n \t\tAssert.assertTrue(\n \t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).toString())\n \t\t);\n \t}", "fixed": " \t\tAssert.assertEquals(1L, statuses.length);\n \t\tAssert.assertTrue(\n \t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).getPath())\n \t\t);\n \t}", "sourceBeforeFix": "new Path(bucketPath,\"test-\" + i + '-'+ j).toString()", "sourceAfterFix": "new Path(bucketPath,\"test-\" + i + '-'+ j).getPath()"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSjms2EndpointBuilder\n             extends\n                 AdvancedSjms2EndpointConsumerBuilder, AdvancedSjms2EndpointProducerBuilder {\n         default Sjms2EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSjms2EndpointBuilder\n             extends\n                 AdvancedSjms2EndpointConsumerBuilder, AdvancedSjms2EndpointProducerBuilder {\n         default Sjms2EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesHPAEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesHPAEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KubernetesHPAEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesHPAEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "13e2b9ecce47206e0bdf8209ee0efebb12eb3401", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         URL url = Thread.currentThread().getContextClassLoader().getResource(name);\n         Assert.assertNotNull(url);\n        XMLStreamReader reader = XMLInputFactory.newFactory().createXMLStreamReader(new StreamSource(url.toString()));\n         mapper.parseDocument(operations, reader);\n         return operations;", "fixed": "         URL url = Thread.currentThread().getContextClassLoader().getResource(name);\n         Assert.assertNotNull(url);\n        XMLStreamReader reader = XMLInputFactory.newInstance().createXMLStreamReader(new StreamSource(url.toString()));\n         mapper.parseDocument(operations, reader);\n         return operations;", "sourceBeforeFix": "XMLInputFactory.newFactory()", "sourceAfterFix": "XMLInputFactory.newInstance()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "67f46e80db80ae93f285fb4883adb5883018f235", "projectName": "wildfly.wildfly", "bugType": "Change Binary Operator", "problem": "         if (serverEnvironment != null) {\n            if (serverEnvironment.getLaunchType() == ServerEnvironment.LaunchType.DOMAIN)\n                 root.registerOperationHandler(ServerReloadHandler.OPERATION_NAME, ServerReloadHandler.INSTANCE, ServerReloadHandler.INSTANCE, false);\n             if (serverEnvironment.getLaunchType() == ServerEnvironment.LaunchType.STANADALONE)\n                 root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME, ServerShutdownHandler.INSTANCE, ServerShutdownHandler.INSTANCE, false);", "fixed": "         if (serverEnvironment != null) {\n            if (serverEnvironment.getLaunchType() != ServerEnvironment.LaunchType.DOMAIN)\n                 root.registerOperationHandler(ServerReloadHandler.OPERATION_NAME, ServerReloadHandler.INSTANCE, ServerReloadHandler.INSTANCE, false);\n             if (serverEnvironment.getLaunchType() == ServerEnvironment.LaunchType.STANADALONE)\n                 root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME, ServerShutdownHandler.INSTANCE, ServerShutdownHandler.INSTANCE, false);", "sourceBeforeFix": "serverEnvironment.getLaunchType() == ServerEnvironment.LaunchType.DOMAIN", "sourceAfterFix": "serverEnvironment.getLaunchType() != ServerEnvironment.LaunchType.DOMAIN"}
{"fixCommitSHA1": "96a7c11c16fe2a6467cfcf2ed2366dc6cc56924c", "projectName": "Graylog2.graylog2-server", "bugType": "Change Operand ", "problem": "     protected ComputationResult compute() {\n         String filter = null;\n         if (streamId != null && !streamId.isEmpty()) {\n            filter = \"streams:\" + filter;\n         }\n         try {", "fixed": "     protected ComputationResult compute() {\n         String filter = null;\n         if (streamId != null && !streamId.isEmpty()) {\n            filter = \"streams:\" + streamId;\n         }\n         try {", "sourceBeforeFix": "\"streams:\" + filter", "sourceAfterFix": "\"streams:\" + streamId"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DataFormatEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDataFormatEndpointBuilder advanced() {", "fixed": "     \n    public interface DataFormatEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDataFormatEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "59970361c11b8177edbf56786e896ce4da82c6ba", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t}\n \t\tif (CopyableValue.class.isAssignableFrom(type)) {\n\t\t\treturn (TypeComparator<T>) new ValueComparator(sortOrderAscending, type);\n \t\t}\n \t\telse {\n\t\t\treturn (TypeComparator<T>) new CopyableValueComparator(sortOrderAscending, type);\n \t\t}\n \t}", "fixed": " \t\t}\n \t\tif (CopyableValue.class.isAssignableFrom(type)) {\n\t\t\treturn (TypeComparator<T>) new CopyableValueComparator(sortOrderAscending, type);\n \t\t}\n \t\telse {\n\t\t\treturn (TypeComparator<T>) new ValueComparator(sortOrderAscending, type);\n \t\t}\n \t}", "sourceBeforeFix": "new CopyableValueComparator(sortOrderAscending,type)", "sourceAfterFix": "new ValueComparator(sortOrderAscending,type)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username);\n     @GET\n     @Path(\"/login\")", "fixed": "         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username) throws Exception;\n     @GET\n     @Path(\"/login\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "3b1d91e0105be86ffa011c5ca9ebbba49e3fcd5d", "projectName": "antlr.antlr4", "bugType": "Wrong Function Name", "problem": "         tokens.consume();\n         tokens.LT(1);\n        String result = tokens.toString();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }", "fixed": "         tokens.consume();\n         tokens.LT(1);\n        String result = tokens.getText();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }", "sourceBeforeFix": "tokens.toString()", "sourceAfterFix": "tokens.getText()"}
{"fixCommitSHA1": "1d577b1b8bd3f51bcf8d9d89bb4598a28020af07", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         for (Channel c: channels) {\n             if (c != ctx.channel()) {\n                c.write(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n                         msg + '\\n');\n             } else {\n                c.write(\"[you] \" + msg + '\\n');\n             }\n         }", "fixed": "         for (Channel c: channels) {\n             if (c != ctx.channel()) {\n                c.writeAndFlush(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n                         msg + '\\n');\n             } else {\n                c.writeAndFlush(\"[you] \" + msg + '\\n');\n             }\n         }", "sourceBeforeFix": "c.write(\"[\" + ctx.channel().remoteAddress() + \"] \"+ msg+ '\\n')", "sourceAfterFix": "c.writeAndFlush(\"[\" + ctx.channel().remoteAddress() + \"] \"+ msg+ '\\n')"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HipchatEndpointBuilder\n             extends\n                 HipchatEndpointConsumerBuilder, HipchatEndpointProducerBuilder {\n         default AdvancedHipchatEndpointBuilder advanced() {", "fixed": "     \n    public interface HipchatEndpointBuilder\n             extends\n                 HipchatEndpointConsumerBuilder, HipchatEndpointProducerBuilder {\n         default AdvancedHipchatEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3acb4cfe293cec597a89678bf92cf1ecbe96ce00", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": "/** @return The area of this {@link Ellipse} as {@link MathUtils\n \tpublic float area () {\r\n\t\treturn MathUtils.PI * (this.width * this.height) / 2;\r\n \t}\r\n \t/** Approximates the circumference of this {@link Ellipse}. Oddly enough, the circumference of an ellipse is actually difficult\r", "fixed": "/** @return The area of this {@link Ellipse} as {@link MathUtils\n \tpublic float area () {\r\n\t\treturn MathUtils.PI * (this.width * this.height) / 4;\r\n \t}\r\n \t/** Approximates the circumference of this {@link Ellipse}. Oddly enough, the circumference of an ellipse is actually difficult\r", "sourceBeforeFix": "MathUtils.PI * (this.width * this.height) / 2", "sourceAfterFix": "MathUtils.PI * (this.width * this.height) / 4"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "         _nameApply(mw, property, context, _end);\n         _get(mw, context, property);\n        mw.visitVarInsn(DSTORE, context.var(\"double\"));\n         _filters(mw, property, context, _end);\n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(DLOAD, context.var(\"double\"));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\n         _seperator(mw, context);", "fixed": "         _nameApply(mw, property, context, _end);\n         _get(mw, context, property);\n        mw.visitVarInsn(DSTORE, context.var(\"double\", 2));\n         _filters(mw, property, context, _end);\n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\n         _seperator(mw, context);", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"fixCommitSHA1": "1be8d7fe7a40efb4c363679538e4c0cb31c6b43e", "projectName": "google.closure-compiler", "bugType": "Same Function More Args", "problem": "         consumer.parse(sourceMapContents);\n         parsedSourceMap = consumer;\n       } catch (IOException e) {\n        JSError error = JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED, sourceMapPath);\n         errorManager.report(error.getDefaultLevel(), error);\n       } catch (SourceMapParseException e) {\n        JSError error = JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED, sourceMapPath);\n         errorManager.report(error.getDefaultLevel(), error);\n       }\n     }", "fixed": "         consumer.parse(sourceMapContents);\n         parsedSourceMap = consumer;\n       } catch (IOException e) {\n        JSError error =\n            JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED, sourceMapPath, e.getMessage());\n         errorManager.report(error.getDefaultLevel(), error);\n       } catch (SourceMapParseException e) {\n        JSError error =\n            JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED, sourceMapPath, e.getMessage());\n         errorManager.report(error.getDefaultLevel(), error);\n       }\n     }", "sourceBeforeFix": "JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED,sourceMapPath)", "sourceAfterFix": "JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED,sourceMapPath,e.getMessage())"}
{"fixCommitSHA1": "2bc44fae7b27d9582212e1fdc7f830a1441b0cc4", "projectName": "wildfly.wildfly", "bugType": "Change Binary Operator", "problem": "         if (this.timeout == null) return false;\n         Date lastAccessedTime = this.entry.getLastAccessedTime();\n         long timeout = this.timeout.convert(TimeUnit.MILLISECONDS);\n        return (lastAccessedTime != null) && (timeout > 0) ? ((System.currentTimeMillis() - lastAccessedTime.getTime()) > timeout) : false;\n     }\n     @Override", "fixed": "         if (this.timeout == null) return false;\n         Date lastAccessedTime = this.entry.getLastAccessedTime();\n         long timeout = this.timeout.convert(TimeUnit.MILLISECONDS);\n        return (lastAccessedTime != null) && (timeout > 0) ? ((System.currentTimeMillis() - lastAccessedTime.getTime()) >= timeout) : false;\n     }\n     @Override", "sourceBeforeFix": "(System.currentTimeMillis() - lastAccessedTime.getTime()) > timeout", "sourceAfterFix": "(System.currentTimeMillis() - lastAccessedTime.getTime()) >= timeout"}
{"fixCommitSHA1": "c55e10c12aa851918dd727f12643d1a0d9ab839d", "projectName": "netty.netty", "bugType": "Change Binary Operator", "problem": "      * less than zero, or larger than {@code capacity()}\n      */\n     public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {\n        if (index < 0 || index > capacity()) {\n             throw new IndexOutOfBoundsException(\"Invalid index: \" + index\n                     + \" - Bytes needed: \" + index + \", maximum is \"\n                     + capacity());", "fixed": "      * less than zero, or larger than {@code capacity()}\n      */\n     public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {\n        if (index < 0 || index >= capacity()) {\n             throw new IndexOutOfBoundsException(\"Invalid index: \" + index\n                     + \" - Bytes needed: \" + index + \", maximum is \"\n                     + capacity());", "sourceBeforeFix": "index > capacity()", "sourceAfterFix": "index >= capacity()"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTextureEXT(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "fixed": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTexture(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "sourceBeforeFix": "GL.glBindTextureEXT(target,texture)", "sourceAfterFix": "GL.glBindTexture(target,texture)"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t\tif (!nsDictionary.writeToFileAtomically(file.getAbsolutePath(), false)) {\r\n \t\t\tGdx.app.debug(\"IOSPreferences\", \"Failed to write NSDictionary to file \" + file);\r\n \t\t}\r\n\t\tpool.dealloc();\r\n \t}\r\n }\r", "fixed": " \t\tif (!nsDictionary.writeToFileAtomically(file.getAbsolutePath(), false)) {\r\n \t\t\tGdx.app.debug(\"IOSPreferences\", \"Failed to write NSDictionary to file \" + file);\r\n \t\t}\r\n\t\tpool.drain();\r\n \t}\r\n }\r", "sourceBeforeFix": "pool.dealloc()", "sourceAfterFix": "pool.drain()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3a45f84e3ea25e96bd89d48b8e5ddb145e4a3815", "projectName": "apache.flink", "bugType": "Change Caller in Function Call", "problem": " \t\t\t}\n \t\t}\n\t\tAssert.assertTrue(\"Resultset size was \"+aggMap.size()+\". Expected was \"+keyCnt, outList.size() == keyCnt);\n \t\tfor (PactInteger integer : aggMap.values()) {\n \t\t\tAssert.assertTrue(\"Incorrect result\", integer.getValue() == expSum);", "fixed": " \t\t\t}\n \t\t}\n\t\tAssert.assertTrue(\"Resultset size was \"+aggMap.size()+\". Expected was \"+keyCnt, aggMap.size() == keyCnt);\n \t\tfor (PactInteger integer : aggMap.values()) {\n \t\t\tAssert.assertTrue(\"Incorrect result\", integer.getValue() == expSum);", "sourceBeforeFix": "outList.size()", "sourceAfterFix": "aggMap.size()"}
{"fixCommitSHA1": "94f9754acb5cc92a32bf36d2a789325fed384325", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": " import com.puppycrawl.tools.checkstyle.api.Check;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\npublic class CompareTreesWithComments extends Check {\n     static DetailAST expectedTree;\n     @Override", "fixed": " import com.puppycrawl.tools.checkstyle.api.Check;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\nclass CompareTreesWithComments extends Check {\n     static DetailAST expectedTree;\n     @Override", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "57634b6921a0d40e0cedb8150a7051c9cc466a5a", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\t\t}\r\n \t\t\telse {\r\n\t\t\t\tlog.debug(\"PID contains identifier with no assigning authority\");\r\n \t\t\t\tcontinue;\r\n \t\t\t}\r\n \t\t}\r", "fixed": " \t\t\t}\r\n \t\t\telse {\r\n\t\t\t\tlog.error(\"PID contains identifier with no assigning authority\");\r\n \t\t\t\tcontinue;\r\n \t\t\t}\r\n \t\t}\r", "sourceBeforeFix": "log.debug(\"PID contains identifier with no assigning authority\")", "sourceAfterFix": "log.error(\"PID contains identifier with no assigning authority\")"}
{"fixCommitSHA1": "d365b8d6749db89c4accb4419be17293cb07cbda", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "     }\n     public static String getHost() {\n        return DatabaseDescriptor.getListenAddress().getHostName();\n     }\n     public static int getNativeTransportPort() {", "fixed": "     }\n     public static String getHost() {\n        return DatabaseDescriptor.getListenAddress().getHostAddress();\n     }\n     public static int getNativeTransportPort() {", "sourceBeforeFix": "DatabaseDescriptor.getListenAddress().getHostName()", "sourceAfterFix": "DatabaseDescriptor.getListenAddress().getHostAddress()"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\tfield.setAccessible(true);\r\n \t\t\t\tfield.set(cacheManager, null);\r\n \t\t\t}\r\n\t\t\tcatch (Throwable ex) {\r\n \t\t\t\tlog.error(ex.getMessage(), ex);\r\n \t\t\t}\r\n \t\t}\r", "fixed": " \t\t\t\tfield.setAccessible(true);\r\n \t\t\t\tfield.set(cacheManager, null);\r\n \t\t\t}\r\n\t\t\tcatch (Exception ex) {\r\n \t\t\t\tlog.error(ex.getMessage(), ex);\r\n \t\t\t}\r\n \t\t}\r", "sourceBeforeFix": "Throwable ex", "sourceAfterFix": "Exception ex"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.debug(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "fixed": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "sourceBeforeFix": "logger.debug(\"rapidRefreshFutureEnd stopping\")", "sourceAfterFix": "logger.trace(\"rapidRefreshFutureEnd stopping\")"}
{"fixCommitSHA1": "cae7c4cee89d2a11e957ae153eb9d5e567a0170a", "projectName": "alibaba.dubbo", "bugType": "Same Function More Args", "problem": "                     ctField.getFieldInfo().addAttribute(attribute);\r\n                     ctClass.addField(ctField);\r\n                 }\r\n                parameterClass = ctClass.toClass();\r\n             }\r\n             Object parameterBean = parameterClass.newInstance();\r\n             for (int i = 0; i < args.length; i++) {\r", "fixed": "                     ctField.getFieldInfo().addAttribute(attribute);\r\n                     ctClass.addField(ctField);\r\n                 }\r\n                parameterClass = ctClass.toClass(clazz.getClassLoader(), null);\r\n             }\r\n             Object parameterBean = parameterClass.newInstance();\r\n             for (int i = 0; i < args.length; i++) {\r", "sourceBeforeFix": "ctClass.toClass()", "sourceAfterFix": "ctClass.toClass(clazz.getClassLoader(),null)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "9e6f96dbfc8bf1ae1ffbe0115f53f1de0fc86ffc", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);", "fixed": "             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJMXEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default JMXEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJMXEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default JMXEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2155f66a2a44fa9057bed99e91e8ccded7a006f4", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 entryListeners.put(name, new HashMap<Object, List<EntryListener<?, ?>>>());\n             }\n             if (!entryListeners.get(name).containsKey(key)) {\n                entryListeners.get(name).put(key, new ArrayList<EntryListener<?, ?>>());\n             }\n             entryListeners.get(name).get(key).add(entryListener);\n         }", "fixed": "                 entryListeners.put(name, new HashMap<Object, List<EntryListener<?, ?>>>());\n             }\n             if (!entryListeners.get(name).containsKey(key)) {\n                entryListeners.get(name).put(key, new CopyOnWriteArrayList<EntryListener<?, ?>>());\n             }\n             entryListeners.get(name).get(key).add(entryListener);\n         }", "sourceBeforeFix": "ArrayList<MessageListener<Object>>", "sourceAfterFix": "CopyOnWriteArrayList<MessageListener<Object>>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         processor.registerWebSocketHandler(\"/*\", new EchoHandler());\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request);\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         assertEquals(b.toString(), \"yoWebSocket\");", "fixed": "         processor.registerWebSocketHandler(\"/*\", new EchoHandler());\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         assertEquals(b.toString(), \"yoWebSocket\");", "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic boolean invertNormalizedKey();", "fixed": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic abstract boolean invertNormalizedKey();", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5e12bb4e2c2a79b5af4dd4ab5e3547066e866580", "projectName": "openmrs.openmrs-core", "bugType": "More Specific If", "problem": " \t\tif (reasonForExitConcept != null && patient.getPatientId() != null) {\r\n \t\t\tList<Obs> patientExitObs = Context.getObsService().getObservationsByPersonAndConcept(patient, reasonForExitConcept);\r\n\t\t\tif (patientExitObs != null) {\r\n \t\t\t\tlog.debug(\"Exit obs is size \" + patientExitObs.size());\r\n \t\t\t\tif (patientExitObs.size() == 1) {\r\n \t\t\t\t\tObs exitObs = patientExitObs.iterator().next();\r", "fixed": " \t\tif (reasonForExitConcept != null && patient.getPatientId() != null) {\r\n \t\t\tList<Obs> patientExitObs = Context.getObsService().getObservationsByPersonAndConcept(patient, reasonForExitConcept);\r\n\t\t\tif (patientExitObs != null && patientExitObs.size() > 0) {\r\n \t\t\t\tlog.debug(\"Exit obs is size \" + patientExitObs.size());\r\n \t\t\t\tif (patientExitObs.size() == 1) {\r\n \t\t\t\t\tObs exitObs = patientExitObs.iterator().next();\r", "sourceBeforeFix": "patientExitObs != null", "sourceAfterFix": "patientExitObs != null && patientExitObs.size() > 0"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "c4975cb807eb1816657aff3487ef070ef78ef7cc", "projectName": "stanfordnlp.CoreNLP", "bugType": "Same Function More Args", "problem": "             currSectionCoreMap.set(CoreAnnotations.AuthorAnnotation.class, foundAuthor);\n             if (foundAuthor != null) {\n              Pattern p = Pattern.compile(foundAuthor);\n               Matcher matcher = p.matcher(sectionStartTagToken.word());\n               if (matcher.find()) {\n                 int authorMentionStart = matcher.start() + sectionStartTagCharBegin;", "fixed": "             currSectionCoreMap.set(CoreAnnotations.AuthorAnnotation.class, foundAuthor);\n             if (foundAuthor != null) {\n              Pattern p = Pattern.compile(foundAuthor, Pattern.LITERAL);\n               Matcher matcher = p.matcher(sectionStartTagToken.word());\n               if (matcher.find()) {\n                 int authorMentionStart = matcher.start() + sectionStartTagCharBegin;", "sourceBeforeFix": "Pattern.compile(foundAuthor)", "sourceAfterFix": "Pattern.compile(foundAuthor,Pattern.LITERAL)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dad70872c09aa162f4567263f677a49b0455be76", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 .outputRowsCount(inputStatistics.getOutputRowCount() * xStats.getValuesFraction() * 0.5);\n        assertThat(computeSemiJoin(inputStatistics, inputStatistics, unknown, u))\n                 .symbolStats(unknown, stats -> stats\n                         .nullsFraction(0)\n                         .distinctValuesCountUnknown()", "fixed": "                 .outputRowsCount(inputStatistics.getOutputRowCount() * xStats.getValuesFraction() * 0.5);\n        assertThat(computeAntiJoin(inputStatistics, inputStatistics, unknown, u))\n                 .symbolStats(unknown, stats -> stats\n                         .nullsFraction(0)\n                         .distinctValuesCountUnknown()", "sourceBeforeFix": "computeSemiJoin(inputStatistics,inputStatistics,x,unknown)", "sourceAfterFix": "computeAntiJoin(inputStatistics,inputStatistics,x,unknown)"}
{"fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         }\n         else {\n            details.put(CONFIG_HASH_KEY, currentConfigHash);\n         }\n     }", "fixed": "         }\n         else {\n            details.setProperty(CONFIG_HASH_KEY, currentConfigHash);\n         }\n     }", "sourceBeforeFix": "details.put(CONFIG_HASH_KEY,currentConfigHash)", "sourceAfterFix": "details.setProperty(CONFIG_HASH_KEY,currentConfigHash)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5856078799d2bfc99513d30334f43da6df8f3885", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         HazelcastInstance h2 = Hazelcast.newHazelcastInstance(c2);\n         HazelcastClient client2 = HazelcastClient.newHazelcastClient(c2.getGroupConfig().getName(), c2.getGroupConfig().getPassword(), \"127.0.0.1:5702\");\n         client2.getTopic(\"def\").addMessageListener(new MessageListener<Object>() {\n            public void onMessage(Object message) {\n             }\n         });\n         LifecycleCountingListener l = new LifecycleCountingListener();", "fixed": "         HazelcastInstance h2 = Hazelcast.newHazelcastInstance(c2);\n         HazelcastClient client2 = HazelcastClient.newHazelcastClient(c2.getGroupConfig().getName(), c2.getGroupConfig().getPassword(), \"127.0.0.1:5702\");\n         client2.getTopic(\"def\").addMessageListener(new MessageListener<Object>() {\n            public void onMessage(Message message) {\n             }\n         });\n         LifecycleCountingListener l = new LifecycleCountingListener();", "sourceBeforeFix": "Object message", "sourceAfterFix": "Message message"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a12aa14d0430bac0d75ad4a9a2638434070fea14", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": " \npublic class LocalFileBlockWriterTest {\n   private static final long TEST_BLOCK_SIZE = 1024;\n   private LocalFileBlockWriter mWriter;", "fixed": " \npublic final class LocalFileBlockWriterTest {\n   private static final long TEST_BLOCK_SIZE = 1024;\n   private LocalFileBlockWriter mWriter;", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "ac418afcea37e4f1def3780fea94c2454ab5c866", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                         reloadRequired = reloadRequired || Logging.requiresReload(attribute.getFlags());\n                     }\n                     if (restartRequired) {\n                        context.restartRequired();\n                     } else if (reloadRequired) {\n                        context.reloadRequired();\n                     }\n                 }\n                 performRollback(context, configuration, name, originalModel);", "fixed": "                         reloadRequired = reloadRequired || Logging.requiresReload(attribute.getFlags());\n                     }\n                     if (restartRequired) {\n                        context.revertRestartRequired();\n                     } else if (reloadRequired) {\n                        context.revertReloadRequired();\n                     }\n                 }\n                 performRollback(context, configuration, name, originalModel);", "sourceBeforeFix": "context.reloadRequired()", "sourceAfterFix": "context.revertReloadRequired()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f4fc27fb0ef1d23230c1f1c55a1234fba1c0acf7", "projectName": "jfeinstein10.SlidingMenu", "bugType": "Change Identifier Used", "problem": " \t\tTypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.SlidingMenu);\n \t\tint mode = ta.getInt(R.styleable.SlidingMenu_mode, LEFT);\n\t\tsetMode(mode);\n \t\tint viewAbove = ta.getResourceId(R.styleable.SlidingMenu_viewAbove, -1);\n \t\tif (viewAbove != -1)\n \t\t\tsetContent(viewAbove);", "fixed": " \t\tTypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.SlidingMenu);\n \t\tint mode = ta.getInt(R.styleable.SlidingMenu_mode, LEFT);\n\t\tsetMode(RIGHT);\n \t\tint viewAbove = ta.getResourceId(R.styleable.SlidingMenu_viewAbove, -1);\n \t\tif (viewAbove != -1)\n \t\t\tsetContent(viewAbove);", "sourceBeforeFix": "setMode(mode)", "sourceAfterFix": "setMode(RIGHT)"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tprivate NSString convertKey (String key) {\r\n\t\treturn NSString.stringWithString(key);\r\n \t}\r\n \t@Override\r", "fixed": " \t}\r\n \tprivate NSString convertKey (String key) {\r\n\t\treturn NSString.alloc().initWithString(key);\r\n \t}\r\n \t@Override\r", "sourceBeforeFix": "NSNumber.numberWithLong(val)", "sourceAfterFix": "NSNumber.numberWithLongLong(val)"}
{"fixCommitSHA1": "3691be4c1f9974b445e682c6d290306700eab602", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String,AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.trace(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     atmosphereHandlerWrapper = e.getValue();\n                     logger.trace(\"Mapped {} to {}\", t, e.getValue());", "fixed": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String,AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.debug(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     atmosphereHandlerWrapper = e.getValue();\n                     logger.trace(\"Mapped {} to {}\", t, e.getValue());", "sourceBeforeFix": "logger.trace(\"Trying to map {} to {}\",t,path)", "sourceAfterFix": "logger.debug(\"Trying to map {} to {}\",t,path)"}
{"fixCommitSHA1": "14f5e2ed141de99df33f22f1d7222c0232332452", "projectName": "wildfly.wildfly", "bugType": "More Specific If", "problem": "                 }\n             }\n         }\n        if (securityDomain != null)\n             description.setSecurityDomain(securityDomain);\n        else if (globalSecurityDomain != null)\n             description.setSecurityDomain(globalSecurityDomain);\n     }", "fixed": "                 }\n             }\n         }\n        if (securityDomain != null && ! securityDomain.isEmpty())\n             description.setSecurityDomain(securityDomain);\n        else if (globalSecurityDomain != null && !globalSecurityDomain.isEmpty())\n             description.setSecurityDomain(globalSecurityDomain);\n     }", "sourceBeforeFix": "securityDomain != null", "sourceAfterFix": "securityDomain != null && !securityDomain.isEmpty()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
