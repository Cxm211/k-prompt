{"fixCommitSHA1": "d1c3ee04ff2e26f5058129d3d7bf360891223ff8", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": "* @see InputRequiredException\n \t *      the required question/datatypes\n \t */\n\tpublic static void startup(String url, String username, String password, Properties properties)\n \t        throws DatabaseUpdateException, InputRequiredException, ModuleMustStartException {\n \t\tif (properties == null) {\n \t\t\tproperties = new Properties();", "fixed": "* @see InputRequiredException\n \t *      the required question/datatypes\n \t */\n\tpublic synchronized static void startup(String url, String username, String password, Properties properties)\n \t        throws DatabaseUpdateException, InputRequiredException, ModuleMustStartException {\n \t\tif (properties == null) {\n \t\t\tproperties = new Properties();", "sourceBeforeFix": "9", "sourceAfterFix": "41"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a74d72d93563fd47ecb3846e594fa5476da6f555", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         latch.await();\n         es.shutdown();\n         assertTrue(es.awaitTermination(5, TimeUnit.SECONDS));\n        for (int i = 0; i < 50; i++) {\n             sleep(1000);\n             Runtime.getRuntime().gc();\n             long usedMemoryEnd = getUsedMemoryAsMB();", "fixed": "         latch.await();\n         es.shutdown();\n         assertTrue(es.awaitTermination(5, TimeUnit.SECONDS));\n        for (int i = 0; i < 100; i++) {\n             sleep(1000);\n             Runtime.getRuntime().gc();\n             long usedMemoryEnd = getUsedMemoryAsMB();", "sourceBeforeFix": "i < 50", "sourceAfterFix": "i < 100"}
{"fixCommitSHA1": "4eff91df99a5ab0f443a7beab2cf4b2f0e25d6ff", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "     private void invokeFlush0(ChannelPromise promise) {\n         Channel channel = channel();\n         if (!channel.isRegistered() && !channel.isActive()) {\n            promise.tryFailure(new ClosedChannelException());\n             return;\n         }", "fixed": "     private void invokeFlush0(ChannelPromise promise) {\n         Channel channel = channel();\n         if (!channel.isRegistered() && !channel.isActive()) {\n            promise.setFailure(new ClosedChannelException());\n             return;\n         }", "sourceBeforeFix": "promise.tryFailure(new ClosedChannelException())", "sourceAfterFix": "promise.setFailure(new ClosedChannelException())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CaffeineCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCaffeineCacheEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CaffeineCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCaffeineCacheEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "849b3ba2b1282a89d8cf60a10891ea11a9e16bb4", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Wrong Function Name", "problem": "         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n        assertEquals(resp.getHeader(\"target\"), target);\n         client.close();\n     }", "fixed": "         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n        assertEquals(resp.getHeader(\"target\"), \"/\");\n         client.close();\n     }", "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}
{"fixCommitSHA1": "bafb1f877934f826d5f74f9f33e824dd1aa30432", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         return getOutputFactory().createXMLStreamWriter(result);\n     }\n    @Converter\n     public XMLStreamReader createXMLStreamReader(InputStream in) throws XMLStreamException {\n         return getInputFactory().createXMLStreamReader(in);\n     }", "fixed": "         return getOutputFactory().createXMLStreamWriter(result);\n     }\n    @Deprecated\n     public XMLStreamReader createXMLStreamReader(InputStream in) throws XMLStreamException {\n         return getInputFactory().createXMLStreamReader(in);\n     }", "sourceBeforeFix": "@Converter", "sourceAfterFix": "@Deprecated"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "7bd0482c801680bfd01ee0c3294d811e207a0fb8", "projectName": "thinkaurelius.titan", "bugType": "Less Specific If", "problem": "                 throw new TemporaryStorageException(ee);\n             }\n} else {\n            if (cf.getCompressionType() == null) {\n                 try {\n                     adm.disableTable(tableName);", "fixed": "                 throw new TemporaryStorageException(ee);\n             }\n} else {\n            if (cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE) {\n                 try {\n                     adm.disableTable(tableName);", "sourceBeforeFix": "cf.getCompressionType() == null", "sourceAfterFix": "cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE"}
{"fixCommitSHA1": "f48ccdd515f54ace86cd78d92fcc81da2a6b86fb", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     public void testMaxMessagesPerPoll() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n         mock.expectedBodiesReceived(\"AAA\", \"BBB\");\n        mock.setResultWaitTime(3000);\n         mock.expectedPropertyReceived(Exchange.BATCH_SIZE, 2);\n         assertMockEndpointsSatisfied();", "fixed": "     public void testMaxMessagesPerPoll() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n         mock.expectedBodiesReceived(\"AAA\", \"BBB\");\n        mock.setResultWaitTime(4000);\n         mock.expectedPropertyReceived(Exchange.BATCH_SIZE, 2);\n         assertMockEndpointsSatisfied();", "sourceBeforeFix": "mock.setResultWaitTime(3000)", "sourceAfterFix": "mock.setResultWaitTime(4000)"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "sourceBeforeFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(2000L)", "sourceAfterFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(500L)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9a2745bf5d2bf3d0f666ccdd4dde46490fcf1583", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "             subsystem.get(DESCRIPTION).set(\"The JAXR subsystem\");\n             subsystem.get(HEAD_COMMENT_ALLOWED).set(true);\n             subsystem.get(TAIL_COMMENT_ALLOWED).set(true);\n            subsystem.get(NAMESPACE).set(Namespace.CURRENT.toString());\n             subsystem.get(ATTRIBUTES, ModelConstants.JNDI_NAME, ModelDescriptionConstants.DESCRIPTION).set(\"The datasource JNDI-NAME\");\n             subsystem.get(ATTRIBUTES, ModelConstants.JNDI_NAME, ModelDescriptionConstants.REQUIRED).set(true);", "fixed": "             subsystem.get(DESCRIPTION).set(\"The JAXR subsystem\");\n             subsystem.get(HEAD_COMMENT_ALLOWED).set(true);\n             subsystem.get(TAIL_COMMENT_ALLOWED).set(true);\n            subsystem.get(NAMESPACE).set(Namespace.CURRENT.getUriString());\n             subsystem.get(ATTRIBUTES, ModelConstants.JNDI_NAME, ModelDescriptionConstants.DESCRIPTION).set(\"The datasource JNDI-NAME\");\n             subsystem.get(ATTRIBUTES, ModelConstants.JNDI_NAME, ModelDescriptionConstants.REQUIRED).set(true);", "sourceBeforeFix": "Namespace.CURRENT.toString()", "sourceAfterFix": "Namespace.CURRENT.getUriString()"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "fixed": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DirectVmEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDirectVmEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DirectVmEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDirectVmEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.", "fixed": " \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a04df35fd9c932531fce2ebd85de52812a038b13", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       client.getOutputProtocol().getTransport().close();\n       throw new IOException(e);\n     } finally {\n      BlockStoreContext.releaseBlockWorkerThriftClient(mRpcAddress, client);\n     }\n   }", "fixed": "       client.getOutputProtocol().getTransport().close();\n       throw new IOException(e);\n     } finally {\n      BlockStoreContext.releaseBlockWorkerThriftClientHeartbeat(mRpcAddress, client);\n     }\n   }", "sourceBeforeFix": "BlockStoreContext.releaseBlockWorkerThriftClient(mRpcAddress,client)", "sourceAfterFix": "BlockStoreContext.releaseBlockWorkerThriftClientHeartbeat(mRpcAddress,client)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ed13d3007bbe9cb7df8641d2e287bf94c314fb86", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "             return false;\n         }\n        long newReservation = memoryReservation.getAndAdd(bytes);\n         if (newReservation > maxMemoryReservation) {\n             memoryReservation.getAndAdd(-bytes);\n             return false;", "fixed": "             return false;\n         }\n        long newReservation = memoryReservation.addAndGet(bytes);\n         if (newReservation > maxMemoryReservation) {\n             memoryReservation.getAndAdd(-bytes);\n             return false;", "sourceBeforeFix": "memoryReservation.getAndAdd(bytes)", "sourceAfterFix": "memoryReservation.addAndGet(bytes)"}
{"fixCommitSHA1": "64bc69ef4c547771f44f6b6b103cda7be2f0922b", "projectName": "dropwizard.metrics", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic SortedMap<String, Meter> getMeters(MetricFilter filter) {\n\t\treturn adaptMetrics(Meter.class, reg.getCounters(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Timer> getTimers() {", "fixed": " \t}\n \tpublic SortedMap<String, Meter> getMeters(MetricFilter filter) {\n\t\treturn adaptMetrics(Meter.class, reg.getMeters(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Timer> getTimers() {", "sourceBeforeFix": "reg.getCounters(transformFilter(filter))", "sourceAfterFix": "reg.getMeters(transformFilter(filter))"}
{"fixCommitSHA1": "4e6b29ac8fac0d15e6be7cf921e247e534898d16", "projectName": "chrisbanes.Android-PullToRefresh", "bugType": "Wrong Function Name", "problem": " final class OverscrollHelper {\n \tstatic void overScrollBy(PullToRefreshBase<?> view, int deltaY, int scrollY, boolean isTouchEvent) {\n\t\tfinal Mode mode = view.getCurrentMode();\n \t\tif (mode != Mode.DISABLED && !isTouchEvent) {\n \t\t\tfinal int newY = (deltaY + scrollY);", "fixed": " final class OverscrollHelper {\n \tstatic void overScrollBy(PullToRefreshBase<?> view, int deltaY, int scrollY, boolean isTouchEvent) {\n\t\tfinal Mode mode = view.getMode();\n \t\tif (mode != Mode.DISABLED && !isTouchEvent) {\n \t\t\tfinal int newY = (deltaY + scrollY);", "sourceBeforeFix": "view.getCurrentMode()", "sourceAfterFix": "view.getMode()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(2000L)\r\n                     .batchSize(5)\r", "fixed": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(500L)\r\n                     .batchSize(5)\r", "sourceBeforeFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(2000L)", "sourceAfterFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(500L)"}
{"fixCommitSHA1": "eba20b3dcc401fb4c873afc5948cc92fbcb00097", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\tint size = s.count();\n \t\tdouble[] ret = new double[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\tret[i] = ((Number) s.first()).intValue();\n \t\treturn ret;\n \t\t}\n }", "fixed": " \t\tint size = s.count();\n \t\tdouble[] ret = new double[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\tret[i] = ((Number) s.first()).doubleValue();\n \t\treturn ret;\n \t\t}\n }", "sourceBeforeFix": "((Number)s.first()).intValue()", "sourceAfterFix": "((Number)s.first()).doubleValue()"}
{"fixCommitSHA1": "499d9d3f89368592549f1ec3701f5a7616113a4c", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testTokenGetters_1() throws Exception {\n \t\tmkdir(parserpkgdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(674);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"@parser::header {\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");", "fixed": " \t@Test\n \tpublic void testTokenGetters_1() throws Exception {\n \t\tmkdir(parserpkgdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(734);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"@parser::header {\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");", "sourceBeforeFix": "new StringBuilder(674)", "sourceAfterFix": "new StringBuilder(734)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "ec6f0cffe68e0736c04783b61f980f1271064dd9", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  public boolean equals(@Nullable Object obj) {\n     if (obj == this) {\n       return true;\n     }", "fixed": "   }\n   @Override\n  public final boolean equals(@Nullable Object obj) {\n     if (obj == this) {\n       return true;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "7f05a320d91958af7f10f6a5a0adbcfcd2176c89", "projectName": "spring-projects.spring-security-oauth", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic OAuth2Request createOAuth2Request() {\n\t\treturn new OAuth2Request(getApprovalParameters(), getClientId(), getAuthorities(), isApproved(), getScope(), getResourceIds(), getRedirectUri(), getResponseTypes(), getExtensions());\n \t}\n \t/**", "fixed": " \t}\n \tpublic OAuth2Request createOAuth2Request() {\n\t\treturn new OAuth2Request(getRequestParameters(), getClientId(), getAuthorities(), isApproved(), getScope(), getResourceIds(), getRedirectUri(), getResponseTypes(), getExtensions());\n \t}\n \t/**", "sourceBeforeFix": "getApprovalParameters()", "sourceAfterFix": "getRequestParameters()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d725e4c654270636bc7de92cc6d74683b1de29fe", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         ImmutableMap.Builder<Symbol, Expression> newTranslations = ImmutableMap.builder();\n         for (Expression expression : expressions) {\n            Symbol symbol = symbolAllocator.newSymbol(expression, analysis.getType(expression));\n             projections.put(symbol, translations.rewrite(expression));\n             newTranslations.put(symbol, expression);", "fixed": "         ImmutableMap.Builder<Symbol, Expression> newTranslations = ImmutableMap.builder();\n         for (Expression expression : expressions) {\n            Symbol symbol = symbolAllocator.newSymbol(expression, analysis.getTypeWithCoercions(expression));\n             projections.put(symbol, translations.rewrite(expression));\n             newTranslations.put(symbol, expression);", "sourceBeforeFix": "analysis.getType(expression)", "sourceAfterFix": "analysis.getTypeWithCoercions(expression)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "359aa1a0740d2b47d6ebdc70377b9fbdfa42c5df", "projectName": "alibaba.canal", "bugType": "Same Function More Args", "problem": "             }\n             ColumnInfo info = columnInfo[i];\n            buffer.nextValue(info.type, info.meta);\n             if (buffer.isNull()) {", "fixed": "             }\n             ColumnInfo info = columnInfo[i];\n            buffer.nextValue(null , i ,info.type, info.meta);\n             if (buffer.isNull()) {", "sourceBeforeFix": "buffer.nextValue(info.type,info.meta)", "sourceAfterFix": "buffer.nextValue(null,i,info.type,info.meta)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "28a04af5f4b957b75ba7dbf6486999b75547673c", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\tfor (int i = 0; i < 2; i++) {\r\n\t\t\tfloat x = Gdx.input.getX() / (float)Gdx.graphics.getWidth();\r\n \t\t\tif (Gdx.input.isTouched(i) && (x >= startX && x <= endX)) {\r\n \t\t\t\treturn true;\r\n \t\t\t}\r", "fixed": " \t\tfor (int i = 0; i < 2; i++) {\r\n\t\t\tfloat x = Gdx.input.getX(i) / (float)Gdx.graphics.getWidth();\r\n \t\t\tif (Gdx.input.isTouched(i) && (x >= startX && x <= endX)) {\r\n \t\t\t\treturn true;\r\n \t\t\t}\r", "sourceBeforeFix": "isTouched(0.75f,1)", "sourceAfterFix": "isTouched(0.5f,1)"}
{"fixCommitSHA1": "e981384cc21ca3c1958acd4b494a6ddd147c0a60", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "             config.setProxyList(modelconf.get(CommonAttributes.PROXY_LIST).asString());\n         }\n         if (modelconf.hasDefined(CommonAttributes.PROXY_URL))\n            config.setProxyList(modelconf.get(CommonAttributes.PROXY_URL).asString());\n         if (modelconf.has(CommonAttributes.ADVERTISE_SECURITY_KEY))\n            config.setProxyList(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString());\n         if (modelconf.hasDefined(CommonAttributes.EXCLUDED_CONTEXTS)) {", "fixed": "             config.setProxyList(modelconf.get(CommonAttributes.PROXY_LIST).asString());\n         }\n         if (modelconf.hasDefined(CommonAttributes.PROXY_URL))\n            config.setProxyURL(modelconf.get(CommonAttributes.PROXY_URL).asString());\n         if (modelconf.has(CommonAttributes.ADVERTISE_SECURITY_KEY))\n            config.setAdvertiseSecurityKey(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString());\n         if (modelconf.hasDefined(CommonAttributes.EXCLUDED_CONTEXTS)) {", "sourceBeforeFix": "config.setProxyList(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString())", "sourceAfterFix": "config.setAdvertiseSecurityKey(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testVarArgs1() {", "fixed": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testVarArgs1() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentTo(node2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "6cdc9df75435ba869cf4a4d6a5f2d398439a16f1", "projectName": "alibaba.druid", "bugType": "Change Identifier Used", "problem": "                         try {\n                             notEmpty.signalAll();\n                         } finally {\n                            lock.lock();\n                         }\n                     }", "fixed": "                         try {\n                             notEmpty.signalAll();\n                         } finally {\n                            lock.unlock();\n                         }\n                     }", "sourceBeforeFix": "lock.lock()", "sourceAfterFix": "lock.unlock()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CoAPEndpointBuilder\n             extends\n                 CoAPEndpointConsumerBuilder, CoAPEndpointProducerBuilder {\n         default AdvancedCoAPEndpointBuilder advanced() {", "fixed": "     \n    public interface CoAPEndpointBuilder\n             extends\n                 CoAPEndpointConsumerBuilder, CoAPEndpointProducerBuilder {\n         default AdvancedCoAPEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "       logger\n           .error(\n              \"database connection error may be wrong password, username or dbname: {}\",\n               e.getMessage());\n     }\n   }", "fixed": "       logger\n           .error(\n              \"database error: {}\",\n               e.getMessage());\n     }\n   }", "sourceBeforeFix": "logger.error(\"InfluxDB is not yet connected\")", "sourceAfterFix": "logger.warn(\"InfluxDB is not yet connected\")"}
{"fixCommitSHA1": "c4975cb807eb1816657aff3487ef070ef78ef7cc", "projectName": "stanfordnlp.CoreNLP", "bugType": "Same Function More Args", "problem": "             currSectionCoreMap.set(CoreAnnotations.AuthorAnnotation.class, foundAuthor);\n             if (foundAuthor != null) {\n              Pattern p = Pattern.compile(foundAuthor);\n               Matcher matcher = p.matcher(sectionStartTagToken.word());\n               if (matcher.find()) {\n                 int authorMentionStart = matcher.start() + sectionStartTagCharBegin;", "fixed": "             currSectionCoreMap.set(CoreAnnotations.AuthorAnnotation.class, foundAuthor);\n             if (foundAuthor != null) {\n              Pattern p = Pattern.compile(foundAuthor, Pattern.LITERAL);\n               Matcher matcher = p.matcher(sectionStartTagToken.word());\n               if (matcher.find()) {\n                 int authorMentionStart = matcher.start() + sectionStartTagCharBegin;", "sourceBeforeFix": "Pattern.compile(foundAuthor)", "sourceAfterFix": "Pattern.compile(foundAuthor,Pattern.LITERAL)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJGroupsRaftEndpointBuilder\n             extends\n                 AdvancedJGroupsRaftEndpointConsumerBuilder, AdvancedJGroupsRaftEndpointProducerBuilder {\n         default JGroupsRaftEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJGroupsRaftEndpointBuilder\n             extends\n                 AdvancedJGroupsRaftEndpointConsumerBuilder, AdvancedJGroupsRaftEndpointProducerBuilder {\n         default JGroupsRaftEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\treturn style;\r\n \t}\r\n\tpublic void setText (String text) {\r\n \t\tif (text == null) throw new IllegalArgumentException(\"text cannot be null.\");\r\n \t\tif (text.equals(this.text)) return;\r\n \t\tthis.text = text;\r", "fixed": " \t\treturn style;\r\n \t}\r\n\tpublic void setText (CharSequence text) {\r\n \t\tif (text == null) throw new IllegalArgumentException(\"text cannot be null.\");\r\n \t\tif (text.equals(this.text)) return;\r\n \t\tthis.text = text;\r", "sourceBeforeFix": "String text", "sourceAfterFix": "CharSequence text"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResponseClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IgniteCacheEndpointBuilder\n             extends\n                 IgniteCacheEndpointConsumerBuilder, IgniteCacheEndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointBuilder advanced() {", "fixed": "     \n    public interface IgniteCacheEndpointBuilder\n             extends\n                 IgniteCacheEndpointConsumerBuilder, IgniteCacheEndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EtcdEndpointBuilder\n             extends\n                 EtcdEndpointConsumerBuilder, EtcdEndpointProducerBuilder {\n         default AdvancedEtcdEndpointBuilder advanced() {", "fixed": "     \n    public interface EtcdEndpointBuilder\n             extends\n                 EtcdEndpointConsumerBuilder, EtcdEndpointProducerBuilder {\n         default AdvancedEtcdEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNano(System.nanoTime() - start);\n             }\n         }\n     }", "fixed": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback);\n     @GET\n     @Consumes({ \"*/*\" })", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback) throws Exception;\n     @GET\n     @Consumes({ \"*/*\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "     return worker;\n   }\n  @JsonProperty\n   public Map<String, TaskStatus> getRunningTasks()\n   {\n     Map<String, TaskStatus> retVal = Maps.newHashMap();", "fixed": "     return worker;\n   }\n  @JsonProperty(\"runningTasks\")\n   public Map<String, TaskStatus> getRunningTasks()\n   {\n     Map<String, TaskStatus> retVal = Maps.newHashMap();", "sourceBeforeFix": "getCurrCapacity()", "sourceAfterFix": "getCurrCapacityUsed()"}
{"fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         String annotation)\n     {\n         if (ast == null) {\n            throw new NullPointerException(\"the ast is null\");\n         }\n         if (annotation == null) {\n            throw new NullPointerException(\"the annotation is null\");\n         }\n         if (StringUtils.isBlank(annotation)) {", "fixed": "         String annotation)\n     {\n         if (ast == null) {\n            throw new IllegalArgumentException(\"the ast is null\");\n         }\n         if (annotation == null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n         }\n         if (StringUtils.isBlank(annotation)) {", "sourceBeforeFix": "new NullPointerException(\"the ast is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the ast is null\")"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "         _nameApply(mw, property, context, _end);\n         _get(mw, context, property);\n        mw.visitVarInsn(DSTORE, context.var(\"double\"));\n         _filters(mw, property, context, _end);\n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(DLOAD, context.var(\"double\"));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\n         _seperator(mw, context);", "fixed": "         _nameApply(mw, property, context, _end);\n         _get(mw, context, property);\n        mw.visitVarInsn(DSTORE, context.var(\"double\", 2));\n         _filters(mw, property, context, _end);\n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\n         _seperator(mw, context);", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Builder for endpoint producers for the Web3j Ethereum Blockchain\n      * component.\n      */\n    public static interface Web3jEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWeb3jEndpointProducerBuilder advanced() {", "fixed": "      * Builder for endpoint producers for the Web3j Ethereum Blockchain\n      * component.\n      */\n    public interface Web3jEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWeb3jEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3c136fbd9f79b179f010322aff8ed2b829209db8", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "         se3.setLines(\"1,2-3\");\n         se3.setColumns(\"1,2-3\");\n         fc2.addFilter(se3);\n        assertEquals(fc, fc2);\n     }\n     @Test", "fixed": "         se3.setLines(\"1,2-3\");\n         se3.setColumns(\"1,2-3\");\n         fc2.addFilter(se3);\n        assertEquals(fc2, fc);\n     }\n     @Test", "sourceBeforeFix": "assertEquals(fc,fc2)", "sourceAfterFix": "assertEquals(fc2,fc)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResponseWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "b09304b10d474c17e6f5a04ffb45f119168a9cd4", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             if (format != null) {\n                 SimpleDateFormat simpleDateFormat = null;\n                 try {\n                    simpleDateFormat = new SimpleDateFormat(format);\n                 } catch (IllegalArgumentException ex) {\n                     if (format.equals(\"yyyy-MM-ddTHH:mm:ss.SSS\")) {\n                         format = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";", "fixed": "             if (format != null) {\n                 SimpleDateFormat simpleDateFormat = null;\n                 try {\n                    simpleDateFormat = new SimpleDateFormat(format,JSON.defaultLocale);\n                 } catch (IllegalArgumentException ex) {\n                     if (format.equals(\"yyyy-MM-ddTHH:mm:ss.SSS\")) {\n                         format = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";", "sourceBeforeFix": "new SimpleDateFormat(format)", "sourceAfterFix": "new SimpleDateFormat(format,JSON.defaultLocale)"}
{"fixCommitSHA1": "fa46c498affee1608fbf952d576c7cf9a554e314", "projectName": "antlr.antlr4", "bugType": "Change Boolean Literal", "problem": " \t}\n \tpublic boolean wantsBaseListener() {\n\t\treturn false;\n \t}\n \tpublic boolean wantsBaseVisitor() {\n\t\treturn false;\n \t}\n \tpublic boolean supportsOverloadedMethods() {", "fixed": " \t}\n \tpublic boolean wantsBaseListener() {\n\t\treturn true;\n \t}\n \tpublic boolean wantsBaseVisitor() {\n\t\treturn true;\n \t}\n \tpublic boolean supportsOverloadedMethods() {", "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "6ca7d1534779e93064f0dda88c7a0d999c068ecf", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "       mAdditionalWorkers = Lists.newArrayList();\n       List<? extends Worker> workers = Lists.newArrayList(mBlockWorker, mFileSystemWorker);\n       ServiceLoader<WorkerFactory> discoveredMasterFactories =\n          ServiceLoader.load(WorkerFactory.class);\n       for (WorkerFactory factory : discoveredMasterFactories) {\n         Worker worker = factory.create(workers);\n         if (worker != null) {", "fixed": "       mAdditionalWorkers = Lists.newArrayList();\n       List<? extends Worker> workers = Lists.newArrayList(mBlockWorker, mFileSystemWorker);\n       ServiceLoader<WorkerFactory> discoveredMasterFactories =\n          ServiceLoader.load(WorkerFactory.class, WorkerFactory.class.getClassLoader());\n       for (WorkerFactory factory : discoveredMasterFactories) {\n         Worker worker = factory.create(workers);\n         if (worker != null) {", "sourceBeforeFix": "ServiceLoader.load(WorkerFactory.class)", "sourceAfterFix": "ServiceLoader.load(WorkerFactory.class,WorkerFactory.class.getClassLoader())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b1aa0100b3f37551bcd8507d168449d8b03c5c57", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "             expand(view, absNode);\n         }\n        graphVersion.incNodeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "fixed": "             expand(view, absNode);\n         }\n        graphVersion.incNodeAndEdgeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "sourceBeforeFix": "graphVersion.incNodeVersion()", "sourceAfterFix": "graphVersion.incNodeAndEdgeVersion()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5fd6669348c19dc24ef1ba51c2ca0a64cbedef20", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "fixed": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}
{"fixCommitSHA1": "e68c0e674b22b9d49d402e0151aa15e8c645bd4b", "projectName": "google.guava", "bugType": "Change Modifier", "problem": " \n @GwtCompatible(serializable = true, emulated = true)\npublic class EnumCountHashMap<K extends Enum<K>> extends AbstractObjectCountMap<K> {\n   \n   public static <K extends Enum<K>> EnumCountHashMap<K> create(Class<K> type) {", "fixed": " \n @GwtCompatible(serializable = true, emulated = true)\nclass EnumCountHashMap<K extends Enum<K>> extends AbstractObjectCountMap<K> {\n   \n   public static <K extends Enum<K>> EnumCountHashMap<K> create(Class<K> type) {", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "d27dee43cab04016bd811fff8c7938488b424ea1", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                 cache = b.getBroadcasterConfig().getBroadcasterCache();\n                 List<Object> t = cache.retrieveFromCache(b.getID(), r);\n                t = b.getBroadcasterConfig().applyFilters(r, t);\n                 if (t.size() > 0) {\n                     logger.trace(\"Found Cached Messages For AtmosphereResource {} with Broadcaster {}\", r.uuid(), broadcasterID);\n                     cachedMessages.addAll(t);", "fixed": "                 cache = b.getBroadcasterConfig().getBroadcasterCache();\n                 List<Object> t = cache.retrieveFromCache(b.getID(), r);\n                cachedMessages = b.getBroadcasterConfig().applyFilters(r, t);\n                 if (t.size() > 0) {\n                     logger.trace(\"Found Cached Messages For AtmosphereResource {} with Broadcaster {}\", r.uuid(), broadcasterID);\n                     cachedMessages.addAll(t);", "sourceBeforeFix": "t=b.getBroadcasterConfig().applyFilters(r,t)", "sourceAfterFix": "cachedMessages=b.getBroadcasterConfig().applyFilters(r,t)"}
{"fixCommitSHA1": "5755cf96d1689e1eda7dd2d7e03f1eff3bf5a074", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      *\n      * @param exceptionClass Type of exception\n      */\n    public void exceptionClass(Class<? extends Exception> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }", "fixed": "      *\n      * @param exceptionClass Type of exception\n      */\n    public void exceptionClass(Class<? extends T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }", "sourceBeforeFix": "? extends Exception", "sourceAfterFix": "? extends T"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "cd7f13802b17a581105bb4d0aec2f8a72669108d", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "     List<Path> inputPaths;\n     try {\n      inputPaths = Utilities.getInputPaths(jobConf, mapWork, emptyScratchDir, ctx);\n     } catch (Exception e2) {\n       e2.printStackTrace();\n       return -1;", "fixed": "     List<Path> inputPaths;\n     try {\n      inputPaths = Utilities.getInputPaths(jobConf, mapWork, emptyScratchDir, ctx, false);\n     } catch (Exception e2) {\n       e2.printStackTrace();\n       return -1;", "sourceBeforeFix": "Utilities.getInputPaths(jobConf,mapWork,emptyScratchDir,ctx)", "sourceAfterFix": "Utilities.getInputPaths(jobConf,mapWork,emptyScratchDir,ctx,false)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NagiosEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedNagiosEndpointBuilder advanced() {\n             return (AdvancedNagiosEndpointBuilder) this;\n         }", "fixed": "     \n    public interface NagiosEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedNagiosEndpointBuilder advanced() {\n             return (AdvancedNagiosEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         constructor.ret();\n     }\n    private void generateGetChannelCountMethod(ClassDefinition classDefinition, List<FieldDefinition> channelFields)\n     {\n         classDefinition.declareMethod(\n                 a(PUBLIC),", "fixed": "         constructor.ret();\n     }\n    private static void generateGetChannelCountMethod(ClassDefinition classDefinition, List<FieldDefinition> channelFields)\n     {\n         classDefinition.declareMethod(\n                 a(PUBLIC),", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "44480175dafea420390a48d1a9e93dae0d1b4a3f", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     mName = bucketName;\n     mKeyCount = 0;\n     if (options.getMaxKeys() != null) {\n      mMaxKeys = Integer.valueOf(options.getMaxKeys());\n     }\n     mContents = new ArrayList<>();\n     mContinuationToken = options.getContinuationToken();", "fixed": "     mName = bucketName;\n     mKeyCount = 0;\n     if (options.getMaxKeys() != null) {\n      mMaxKeys = Integer.parseInt(options.getMaxKeys());\n     }\n     mContents = new ArrayList<>();\n     mContinuationToken = options.getContinuationToken();", "sourceBeforeFix": "Integer.valueOf(options.getMaxKeys())", "sourceAfterFix": "Integer.parseInt(options.getMaxKeys())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6eec501c4fc5fd70111ed6f1c784598473072d6a", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void testConsume() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(1);\n         assertMockEndpointsSatisfied();", "fixed": "     @Test\n     public void testConsume() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(3);\n         assertMockEndpointsSatisfied();", "sourceBeforeFix": "mock.expectedMessageCount(1)", "sourceAfterFix": "mock.expectedMessageCount(3)"}
{"fixCommitSHA1": "42b44935272ecf97acca3b7c9fe90b45fd8e01d2", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "          * you could append \"?olderThan=2912\u2033 to your request to get the 20\n          * messages prior to those you're seeing.\n          */\n        private Integer olderThan = -1;\n         /**\n          * Returns messages newer than the message ID specified as a numeric\n          * string. This should be used when polling for new messages. If you're", "fixed": "          * you could append \"?olderThan=2912\u2033 to your request to get the 20\n          * messages prior to those you're seeing.\n          */\n        private Long olderThan = -1L;\n         /**\n          * Returns messages newer than the message ID specified as a numeric\n          * string. This should be used when polling for new messages. If you're", "sourceBeforeFix": "public Integer getOlderThan(){   return olderThan; } ", "sourceAfterFix": "public Long getOlderThan(){   return olderThan; } "}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "0283c451f04f498fc7c7f359ef020d6da46d2a0f", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "     public JvmGcDetailedBo map(TJvmGcDetailed tJvmGcDetailed) {\n         JvmGcDetailedBo jvmGcDetailedBo = new JvmGcDetailedBo();\n         jvmGcDetailedBo.setGcNewCount(tJvmGcDetailed.getJvmGcNewCount());\n        jvmGcDetailedBo.setGcNewTime(tJvmGcDetailed.getJvmGcNewCount());\n         jvmGcDetailedBo.setCodeCacheUsed(tJvmGcDetailed.getJvmPoolCodeCacheUsed());\n         jvmGcDetailedBo.setNewGenUsed(tJvmGcDetailed.getJvmPoolNewGenUsed());\n         jvmGcDetailedBo.setOldGenUsed(tJvmGcDetailed.getJvmPoolOldGenUsed());", "fixed": "     public JvmGcDetailedBo map(TJvmGcDetailed tJvmGcDetailed) {\n         JvmGcDetailedBo jvmGcDetailedBo = new JvmGcDetailedBo();\n         jvmGcDetailedBo.setGcNewCount(tJvmGcDetailed.getJvmGcNewCount());\n        jvmGcDetailedBo.setGcNewTime(tJvmGcDetailed.getJvmGcNewTime());\n         jvmGcDetailedBo.setCodeCacheUsed(tJvmGcDetailed.getJvmPoolCodeCacheUsed());\n         jvmGcDetailedBo.setNewGenUsed(tJvmGcDetailed.getJvmPoolNewGenUsed());\n         jvmGcDetailedBo.setOldGenUsed(tJvmGcDetailed.getJvmPoolOldGenUsed());", "sourceBeforeFix": "tJvmGcDetailed.getJvmGcNewCount()", "sourceAfterFix": "tJvmGcDetailed.getJvmGcNewTime()"}
{"fixCommitSHA1": "39fe5a830bb4e05a85bef3e52115c708f9409abf", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     }\n     private static ModelControllerClient createClient2() throws UnknownHostException {\n        return ModelControllerClient.Factory.create(InetAddress.getByName(TestSuiteEnvironment.getServerAddress()),\n                 TestSuiteEnvironment.getServerPort() + 300,\n                 Authentication.getCallbackHandler());\n     }", "fixed": "     }\n     private static ModelControllerClient createClient2() throws UnknownHostException {\n        return ModelControllerClient.Factory.create(InetAddress.getByName(TestSuiteEnvironment.getServerAddressNode1()),\n                 TestSuiteEnvironment.getServerPort() + 300,\n                 Authentication.getCallbackHandler());\n     }", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void closeRegion(final String regionname, final String serverName)\n   throws IOException {\n    closeRegion(Bytes.toBytesBinary(regionname), serverName);\n   }\n   /**", "fixed": "    */\n   public void closeRegion(final String regionname, final String serverName)\n   throws IOException {\n    closeRegion(Bytes.toBytes(regionname), serverName);\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "63a368bf671e3356c5be441b8833bad844a4ff8e", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "           fileInfo.getPersistenceState());\n      CommonUtils.sleepMs(5);\n       HeartbeatScheduler.schedule(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC);\n      Assert.assertTrue(HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC, 5,\n           TimeUnit.SECONDS));\n       fileInfo = getFileSystemMasterClient().getFileInfo(fileId);", "fixed": "           fileInfo.getPersistenceState());\n      CommonUtils.sleepMs(200);\n       HeartbeatScheduler.schedule(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC);\n      Assert.assertTrue(HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC, 500,\n           TimeUnit.SECONDS));\n       fileInfo = getFileSystemMasterClient().getFileInfo(fileId);", "sourceBeforeFix": "CommonUtils.sleepMs(5)", "sourceAfterFix": "CommonUtils.sleepMs(200)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "270185aba54cef1d8ce59ec347b5623f2e502afe", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \telse\n \t\t{\n \t\tISeq s = RT.seq(sizeOrSeq);\n\t\tint size = s.count();\n \t\tlong[] ret = new long[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\tret[i] = ((Number) s.first()).longValue();", "fixed": " \telse\n \t\t{\n \t\tISeq s = RT.seq(sizeOrSeq);\n\t\tint size = RT.count(s);\n \t\tlong[] ret = new long[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\tret[i] = ((Number) s.first()).longValue();", "sourceBeforeFix": "s.count()", "sourceAfterFix": "RT.count(s)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "84340b3f05d39437b725f2f5510f44e862f98b19", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                     client.setInstanceUrl(session.getInstanceUrl());\n                     client.setAccessToken(exchange);\n                 } else {\n                    exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,\n                             \"OAuth \" + currentToken);\n                 }", "fixed": "                     client.setInstanceUrl(session.getInstanceUrl());\n                     client.setAccessToken(exchange);\n                 } else {\n                    exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,\n                             \"OAuth \" + currentToken);\n                 }", "sourceBeforeFix": "exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,\"OAuth \" + currentToken)", "sourceAfterFix": "exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,\"OAuth \" + currentToken)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fa5635c39e3000406103657977b98efa79bd4512", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()\n                 + \"trends/weekly.json\"));\n     }", "fixed": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()\n                 + \"trends/weekly.json\"));\n     }", "sourceBeforeFix": "conf.getSearchBaseURL()", "sourceAfterFix": "conf.getRestBaseURL()"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "fixed": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f4ef5cb8de13c00684bb38c6ac4360aee9e98a55", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\tfor (PlexBindingProvider provider : providers) {\n \t\t\tfor (String itemName : provider.getItemNames()) {\n \t\t\t\tPlexBindingConfig config = provider.getConfig(itemName);\n\t\t\t\tif (session.getMachineIdentifier().equals(config.getMachineIdentifier()))\n \t\t\t\t\tupdateConfigFromSession(config, session);\n \t\t\t}\n \t\t}", "fixed": " \t\tfor (PlexBindingProvider provider : providers) {\n \t\t\tfor (String itemName : provider.getItemNames()) {\n \t\t\t\tPlexBindingConfig config = provider.getConfig(itemName);\n\t\t\t\tif (session.getMachineIdentifier().startsWith(config.getMachineIdentifier()))\n \t\t\t\t\tupdateConfigFromSession(config, session);\n \t\t\t}\n \t\t}", "sourceBeforeFix": "session.getMachineIdentifier().equals(config.getMachineIdentifier())", "sourceAfterFix": "session.getMachineIdentifier().startsWith(config.getMachineIdentifier())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n    logger.info(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);", "fixed": "    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);", "sourceBeforeFix": "logger.info(\"Computing Control Flow Graph\")", "sourceAfterFix": "logger.fine(\"Computing Control Flow Graph\")"}
{"fixCommitSHA1": "65c15a0c969d964875b2b988ff5f63d419e6a832", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    private class ExchangeNotifier extends EventNotifierSupport {\n         public void notify(EventObject event) throws Exception {\n             if (event instanceof ExchangeCreatedEvent) {", "fixed": "     \n    private final class ExchangeNotifier extends EventNotifierSupport {\n         public void notify(EventObject event) throws Exception {\n             if (event instanceof ExchangeCreatedEvent) {", "sourceBeforeFix": "2", "sourceAfterFix": "18"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "97f40446edd5f66145bde79c4a7c0de6a88716e9", "projectName": "square.javapoet", "bugType": "Change Modifier", "problem": "     this(out, \"  \");\n   }\n  public CodeWriter(Appendable out, String indent) {\n     this(out, indent, Collections.<String, ClassName>emptyMap());\n   }\n  public CodeWriter(Appendable out, String indent, Map<String, ClassName> importedTypes) {\n     this.out = checkNotNull(out, \"out == null\");\n     this.indent = checkNotNull(indent, \"indent == null\");\n     this.importedTypes = checkNotNull(importedTypes, \"importedTypes == null\");", "fixed": "     this(out, \"  \");\n   }\n  CodeWriter(Appendable out, String indent) {\n     this(out, indent, Collections.<String, ClassName>emptyMap());\n   }\n  CodeWriter(Appendable out, String indent, Map<String, ClassName> importedTypes) {\n     this.out = checkNotNull(out, \"out == null\");\n     this.indent = checkNotNull(indent, \"indent == null\");\n     this.importedTypes = checkNotNull(importedTypes, \"importedTypes == null\");", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9704f6049c41315c3de3fa6be6faf01e62c67863", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     new HTable(conf, \".META.\");\n     int port = cluster.getMaster().getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"Master\");\n     port = cluster.getRegionThreads().get(0).getRegionServer().\n       getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"Region Server\");\n   }\n   private void assertHasExpectedContent(final URL u, final String expected)", "fixed": "     new HTable(conf, \".META.\");\n     int port = cluster.getMaster().getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"master\");\n     port = cluster.getRegionThreads().get(0).getRegionServer().\n       getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"regionserver\");\n   }\n   private void assertHasExpectedContent(final URL u, final String expected)", "sourceBeforeFix": "content.matches(expected)", "sourceAfterFix": "content.contains(expected)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a7ea864d23e4b47cef8056a446ea4e7344c62ee7", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "     @BeforeClass\n     public static void initPort() {\n        serverPort = AvailablePortFinder.getNextAvailable();\n         System.setProperty(\"server-port\", new Integer(serverPort).toString());\n     }", "fixed": "     @BeforeClass\n     public static void initPort() {\n        serverPort = AvailablePortFinder.getNextAvailable(3000);\n         System.setProperty(\"server-port\", new Integer(serverPort).toString());\n     }", "sourceBeforeFix": "AvailablePortFinder.getNextAvailable()", "sourceAfterFix": "AvailablePortFinder.getNextAvailable(3000)"}
{"fixCommitSHA1": "8659914038f88e67dc9bd80c4e0c57bb341e07c0", "projectName": "perwendel.spark", "bugType": "Change Modifier", "problem": "      *\n      * @param page the custom 500 internal server error page.\n      */\n    public void internalServerError(String page) {\n         CustomErrorPages.add(500, page);\n     }", "fixed": "      *\n      * @param page the custom 500 internal server error page.\n      */\n    public synchronized void internalServerError(String page) {\n         CustomErrorPages.add(500, page);\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,value)"}
{"fixCommitSHA1": "ddbff4fd8700b17229d0192353c109b3ef1c5858", "projectName": "apache.hbase", "bugType": "Less Specific If", "problem": "     if (avail) {\n       String arch = System.getProperty(\"os.arch\");\n      if (\"ppc64\".equals(arch) || \"ppc64le\".equals(arch)) {\n         unaligned = true;\n       } else {", "fixed": "     if (avail) {\n       String arch = System.getProperty(\"os.arch\");\n      if (\"ppc64\".equals(arch) || \"ppc64le\".equals(arch) || \"aarch64\".equals(arch)) {\n         unaligned = true;\n       } else {", "sourceBeforeFix": "\"ppc64\".equals(arch) || \"ppc64le\".equals(arch)", "sourceAfterFix": "\"ppc64\".equals(arch) || \"ppc64le\".equals(arch) || \"aarch64\".equals(arch)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "fixed": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "sourceBeforeFix": "logger.debug(\"Requsting URL {}\",url)", "sourceAfterFix": "logger.trace(\"Requsting URL {}\",url)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(littleEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "fixed": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "sourceBeforeFix": "hashFunction.newHasher().putBytes(littleEndian)", "sourceAfterFix": "hashFunction.newHasher().putBytes(bigEndian)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "fixed": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables();\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);", "fixed": " \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);", "sourceBeforeFix": "logger.debug(\"rapidRefreshFutureEnd stopping\")", "sourceAfterFix": "logger.trace(\"rapidRefreshFutureEnd stopping\")"}
{"fixCommitSHA1": "134e93f3fdbb528145fbdb0efd245b3128fec5ce", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t.reduce(RouterFunction::and).get();\n \t\t\tHandlerStrategies.Builder strategiesBuilder = HandlerStrategies.builder();\n \t\t\tif (this.messageReaders != null) {\n\t\t\t\tthis.messageReaders.forEach(strategiesBuilder::messageReader);\n \t\t\t}\n \t\t\tif (this.messageWriters != null) {\n\t\t\t\tthis.messageWriters.forEach(strategiesBuilder::messageWriter);\n \t\t\t}\n \t\t\tif (this.viewResolvers != null) {\n \t\t\t\tthis.viewResolvers.forEach(strategiesBuilder::viewResolver);", "fixed": " \t\t\t\t\t.reduce(RouterFunction::and).get();\n \t\t\tHandlerStrategies.Builder strategiesBuilder = HandlerStrategies.builder();\n \t\t\tif (this.messageReaders != null) {\n\t\t\t\tthis.messageReaders.forEach(strategiesBuilder::customMessageReader);\n \t\t\t}\n \t\t\tif (this.messageWriters != null) {\n\t\t\t\tthis.messageWriters.forEach(strategiesBuilder::customMessageWriter);\n \t\t\t}\n \t\t\tif (this.viewResolvers != null) {\n \t\t\t\tthis.viewResolvers.forEach(strategiesBuilder::viewResolver);", "sourceBeforeFix": "strategiesBuilder::messageWriter", "sourceAfterFix": "strategiesBuilder::customMessageWriter"}
{"fixCommitSHA1": "6496c6f426076a7332240cd7348ca144306a8c15", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "   }\n   /**\n   * Notifies the worker to checkpoint the file asynchronously.\n    *\n    * @param blockId The id of the block\n    * @return ByteBuffer of value, or null if not found", "fixed": "   }\n   /**\n   * Gets the value of a given {@code key}.\n    *\n    * @param blockId The id of the block\n    * @return ByteBuffer of value, or null if not found", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "e7919feab1a5f371806a2f6d267e84e9542e3f26", "projectName": "mybatis.mybatis-3", "bugType": "Change Caller in Function Call", "problem": "   private void add(final Class<?> primitiveType, final Class<?> wrapperType) {\n     primitiveToWrappers.put(primitiveType, wrapperType);\n    primitiveToWrappers.put(wrapperType, primitiveType);\n   }\n   public Class<?> getWrapper(final Class<?> primitiveType) {", "fixed": "   private void add(final Class<?> primitiveType, final Class<?> wrapperType) {\n     primitiveToWrappers.put(primitiveType, wrapperType);\n    wrappersToPrimitives.put(wrapperType, primitiveType);\n   }\n   public Class<?> getWrapper(final Class<?> primitiveType) {", "sourceBeforeFix": "primitiveToWrappers.put(wrapperType,primitiveType)", "sourceAfterFix": "wrappersToPrimitives.put(wrapperType,primitiveType)"}
{"fixCommitSHA1": "c46a39b13e1bfccdc09301b26f9cc4804d417c3b", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "   public void testMoveNoop() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "fixed": "   public void testMoveNoop() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "         assertNull(url.getUsername());\r\n         assertNull(url.getPassword());\r\n         assertNull(url.getHost());\r\n        assertEquals(12, url.getPort());\r\n         assertEquals(\"context/path\", url.getPath());\r\n         assertEquals(2, url.getParameters().size());\r\n         assertEquals(\"1.0.0\", url.getParameter(\"version\"));\r", "fixed": "         assertNull(url.getUsername());\r\n         assertNull(url.getPassword());\r\n         assertNull(url.getHost());\r\n        assertEquals(0, url.getPort());\r\n         assertEquals(\"context/path\", url.getPath());\r\n         assertEquals(2, url.getParameters().size());\r\n         assertEquals(\"1.0.0\", url.getParameter(\"version\"));\r", "sourceBeforeFix": "assertEquals(12,url.getPort())", "sourceAfterFix": "assertEquals(0,url.getPort())"}
{"fixCommitSHA1": "1f360832f203ae6f9f5f674059f1a195b18db39c", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": " \t\t\t\t\t\tString stateResponseSearch = \"var sockstates = \";\n \t\t\t\t\t\tint findState=loginResponseString.lastIndexOf(stateResponseSearch);\n\t\t\t\t\t\tif (findState !=0) {\n \t\t\t\t\t\t\tlogger.trace(\"searchstring sockstates found at position {}\", findState);\n \t\t\t\t\t\t\tString slicedResponse = loginResponseString.substring(findState+18, findState+25);", "fixed": " \t\t\t\t\t\tString stateResponseSearch = \"var sockstates = \";\n \t\t\t\t\t\tint findState=loginResponseString.lastIndexOf(stateResponseSearch);\n\t\t\t\t\t\tif (findState > 0) {\n \t\t\t\t\t\t\tlogger.trace(\"searchstring sockstates found at position {}\", findState);\n \t\t\t\t\t\t\tString slicedResponse = loginResponseString.substring(findState+18, findState+25);", "sourceBeforeFix": "findState != 0", "sourceAfterFix": "findState > 0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedServiceNowEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ServiceNowEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedServiceNowEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ServiceNowEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"diskspace\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"diskspace\")"}
{"fixCommitSHA1": "dd287e0057702c15b34db99de389a1c51023c2f3", "projectName": "Atmosphere.atmosphere", "bugType": "Change Unary Operator\t", "problem": "         injectCacheHeaders = nocache != null ? false : true;\n         String ac = config.getInitParameter(ApplicationConfig.DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);\n        enableAccessControl = ac != null ? Boolean.parseBoolean(ac) : true;\n         String wh = config.getInitParameter(FrameworkConfig.WRITE_HEADERS);\n         writeHeaders = wh != null ? Boolean.parseBoolean(wh) : true;", "fixed": "         injectCacheHeaders = nocache != null ? false : true;\n         String ac = config.getInitParameter(ApplicationConfig.DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);\n        enableAccessControl = ac != null ? !Boolean.parseBoolean(ac) : true;\n         String wh = config.getInitParameter(FrameworkConfig.WRITE_HEADERS);\n         writeHeaders = wh != null ? Boolean.parseBoolean(wh) : true;", "sourceBeforeFix": "Boolean.parseBoolean(ac)", "sourceAfterFix": "!Boolean.parseBoolean(ac)"}
{"fixCommitSHA1": "0a1836b22646342828e96b1d0e7dad9c8bfdabfe", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         bar.expectedMessageCount(0);\n         MockEndpoint start = getMockEndpoint(\"mock:start\");\nstart.expectedMessageCount(6);\n         template.sendBody(\"activemq:queue:foo\", \"Hello World\");", "fixed": "         bar.expectedMessageCount(0);\n         MockEndpoint start = getMockEndpoint(\"mock:start\");\nstart.expectedMessageCount(7);\n         template.sendBody(\"activemq:queue:foo\", \"Hello World\");", "sourceBeforeFix": "start.expectedMessageCount(6)", "sourceAfterFix": "start.expectedMessageCount(7)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDnsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DnsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDnsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DnsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "ebe38aec141cc8fcfd56b71bf167d6370808806a", "projectName": "Alluxio.alluxio", "bugType": "Change Caller in Function Call", "problem": "         AlluxioURI alluxioUriToLoad = alluxioUri.join(file);\n         LOG.debug(\"Loading metadata for Alluxio uri: \" + alluxioUriToLoad);\n        AlluxioURI alluxioPath = new AlluxioURI(alluxioUri.getPath());\n         if (!fs.exists(alluxioPath)) {\n           fs.loadMetadata(alluxioPath);\n         }", "fixed": "         AlluxioURI alluxioUriToLoad = alluxioUri.join(file);\n         LOG.debug(\"Loading metadata for Alluxio uri: \" + alluxioUriToLoad);\n        AlluxioURI alluxioPath = new AlluxioURI(alluxioUriToLoad.getPath());\n         if (!fs.exists(alluxioPath)) {\n           fs.loadMetadata(alluxioPath);\n         }", "sourceBeforeFix": "alluxioUri.getPath()", "sourceAfterFix": "alluxioUriToLoad.getPath()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwitterDirectMessageEndpointBuilder\n             extends\n                 TwitterDirectMessageEndpointConsumerBuilder, TwitterDirectMessageEndpointProducerBuilder {\n         default AdvancedTwitterDirectMessageEndpointBuilder advanced() {", "fixed": "     \n    public interface TwitterDirectMessageEndpointBuilder\n             extends\n                 TwitterDirectMessageEndpointConsumerBuilder, TwitterDirectMessageEndpointProducerBuilder {\n         default AdvancedTwitterDirectMessageEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "* @see\n* @see NormalizableKey\n \t */\n\tpublic void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "fixed": "* @see\n* @see NormalizableKey\n \t */\n\tpublic abstract void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "9d87dbad9f0c649c8244586cfea3ca25731da893", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     this.useBlockScope = scopeCreator.hasBlockScope();\n   }\n  private void throwUnexpectedException(Exception unexpectedException) {\n     String message = unexpectedException.getMessage();", "fixed": "     this.useBlockScope = scopeCreator.hasBlockScope();\n   }\n  private void throwUnexpectedException(Throwable unexpectedException) {\n     String message = unexpectedException.getMessage();", "sourceBeforeFix": "Exception unexpectedException", "sourceAfterFix": "Throwable unexpectedException"}
{"fixCommitSHA1": "e0c041b68103957cb758859ff0799bbb6c15d5db", "projectName": "jersey.jersey", "bugType": "Change Identifier Used", "problem": " \t\tappend(sb, \"algorithm\", digest_algorithm.toString(), false);\n \t\tappend(sb, \"qop\", digest_qop.toString(), false);\n\t\tString uri = requestContext.getUri().getPath();\n \t\tappend(sb, \"uri\", uri);\n \t\tString ha1;", "fixed": " \t\tappend(sb, \"algorithm\", digest_algorithm.toString(), false);\n \t\tappend(sb, \"qop\", digest_qop.toString(), false);\n\t\tString uri = requestContext.getUri().getRawPath();\n \t\tappend(sb, \"uri\", uri);\n \t\tString ha1;", "sourceBeforeFix": "requestContext.getUri().getPath()", "sourceAfterFix": "requestContext.getUri().getRawPath()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Builder for endpoint producers for the Web3j Ethereum Blockchain\n      * component.\n      */\n    public static interface Web3jEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWeb3jEndpointProducerBuilder advanced() {", "fixed": "      * Builder for endpoint producers for the Web3j Ethereum Blockchain\n      * component.\n      */\n    public interface Web3jEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWeb3jEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "80fa3080b958523cf754f0523150acbf09e4bb78", "projectName": "Atmosphere.atmosphere", "bugType": "Change Numeric Literal", "problem": "         if (config.isSupportSession()\n                 && req.getSession(false) != null\n                 && req.getSession().getMaxInactiveInterval() >= 0\n                && req.getSession().getMaxInactiveInterval() * 1000 < timeout) {\n             throw new IllegalStateException(\"Cannot suspend a \" +\n                     \"response longer than the session timeout. Increase the value of session-timeout in web.xml\");\n         }", "fixed": "         if (config.isSupportSession()\n                 && req.getSession(false) != null\n                 && req.getSession().getMaxInactiveInterval() >= 0\n                && req.getSession().getMaxInactiveInterval() * 1000L < timeout) {\n             throw new IllegalStateException(\"Cannot suspend a \" +\n                     \"response longer than the session timeout. Increase the value of session-timeout in web.xml\");\n         }", "sourceBeforeFix": "req.getSession().getMaxInactiveInterval() * 1000", "sourceAfterFix": "req.getSession().getMaxInactiveInterval() * 1000L"}
{"fixCommitSHA1": "b66741edf56e097d77248c2d1b59ea19843586ce", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "         request.setOperation(operation);\n         request.setKey(key);\n         request.setValue(value);\n        if (ttl > 0 && timeunit != null) {\n             request.setTimeout(timeunit.toMillis(ttl));\n         }\n         return request;", "fixed": "         request.setOperation(operation);\n         request.setKey(key);\n         request.setValue(value);\n        if (ttl >= 0 && timeunit != null) {\n             request.setTimeout(timeunit.toMillis(ttl));\n         }\n         return request;", "sourceBeforeFix": "ttl > 0", "sourceAfterFix": "ttl >= 0"}
{"fixCommitSHA1": "117c698c59a011648c50e261ff5b555e3ee236f8", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "             break;\n         }\n       } else {\n        log.error(\"Metric=[%s] has no StatsD type mapping\", statsDMetric);\n       }\n     }\n   }", "fixed": "             break;\n         }\n       } else {\n        log.debug(\"Metric=[%s] has no StatsD type mapping\", statsDMetric);\n       }\n     }\n   }", "sourceBeforeFix": "log.error(\"Metric=[%s] has no StatsD type mapping\",statsDMetric)", "sourceAfterFix": "log.debug(\"Metric=[%s] has no StatsD type mapping\",statsDMetric)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "         ret = getMS().updatePartitionColumnStatistics(colStats, partVals);\n         return ret;\n       } finally {\n        endFunction(\"write_partition_column_statistics: \", ret != false);\n       }\n     }", "fixed": "         ret = getMS().updatePartitionColumnStatistics(colStats, partVals);\n         return ret;\n       } finally {\n        endFunction(\"write_partition_column_statistics: \", ret != false, null);\n       }\n     }", "sourceBeforeFix": "endFunction(\"get_column_statistics_by_partition: \",statsObj != null)", "sourceAfterFix": "endFunction(\"get_column_statistics_by_partition: \",statsObj != null,null)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9a861785b36e0b1132737bd8fa1f7caac5a41c87", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "         Thread.sleep(5);\n         replicatedMap.put(key, \"value2\");\n         long lastUpdateTime2 = replicatedMap.getReplicatedMapStats().getLastUpdateTime();\n        assertTrue(lastUpdateTime2 > lastUpdateTime);\n     }\n     @Test", "fixed": "         Thread.sleep(5);\n         replicatedMap.put(key, \"value2\");\n         long lastUpdateTime2 = replicatedMap.getReplicatedMapStats().getLastUpdateTime();\n        assertTrue(lastUpdateTime2 >= lastUpdateTime);\n     }\n     @Test", "sourceBeforeFix": "stats.getLastAccessTime() > lastAccessTime", "sourceAfterFix": "stats.getLastAccessTime() >= lastAccessTime"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface VelocityEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedVelocityEndpointBuilder advanced() {\n             return (AdvancedVelocityEndpointBuilder) this;\n         }", "fixed": "     \n    public interface VelocityEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedVelocityEndpointBuilder advanced() {\n             return (AdvancedVelocityEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private void clearLockStore(String name) {\n         NodeEngine nodeEngine = service.getNodeEngine();\n        LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             DefaultObjectNamespace namespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n             lockService.clearLockStore(partitionId, namespace);", "fixed": "     private void clearLockStore(String name) {\n         NodeEngine nodeEngine = service.getNodeEngine();\n        LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             DefaultObjectNamespace namespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n             lockService.clearLockStore(partitionId, namespace);", "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}
{"fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                 }\n             }\n         }\n        return r;\n     }\n     private void notifyIdleListener() {", "fixed": "                 }\n             }\n         }\n        return this;\n     }\n     private void notifyIdleListener() {", "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "4c240da4e9e79317fe6f8f8d49a49aacfa0c7fd4", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "                       .put(\"created_date\", new DateTime().toString())\n                       .put(\"start\", segment.getInterval().getStart().toString())\n                       .put(\"end\", segment.getInterval().getEnd().toString())\n                      .put(\"partitioned\", (segment.getShardSpec() instanceof NoneShardSpec) ? 0 : 1)\n                       .put(\"version\", segment.getVersion())\n                       .put(\"used\", true)\n                      .put(\"payload\", mapper.writeValueAsString(segment))\n                       .build()\n               );", "fixed": "                       .put(\"created_date\", new DateTime().toString())\n                       .put(\"start\", segment.getInterval().getStart().toString())\n                       .put(\"end\", segment.getInterval().getEnd().toString())\n                      .put(\"partitioned\", (segment.getShardSpec() instanceof NoneShardSpec) ? false : true)\n                       .put(\"version\", segment.getVersion())\n                       .put(\"used\", true)\n                      .put(\"payload\", mapper.writeValueAsBytes(segment))\n                       .build()\n               );", "sourceBeforeFix": "mapper.writeValueAsString(segment)", "sourceAfterFix": "mapper.writeValueAsBytes(segment)"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n     final Map<String, Integer> cssNames;", "fixed": "   \n  public static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n     final Map<String, Integer> cssNames;", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e1626ef3aeecb1ccf7acf4056fb7bcf23243be25", "projectName": "apache.hive", "bugType": "Change Numeric Literal", "problem": "     SignableVertexSpec vertexProto = builder.build();\n    TaskSpec taskSpec = Converters.getTaskSpecfromProto(vertexProto, 0, 0, null);\n     assertEquals(\"dagName\", taskSpec.getDAGName());\n     assertEquals(\"vertexName\", taskSpec.getVertexName());", "fixed": "     SignableVertexSpec vertexProto = builder.build();\n    TaskSpec taskSpec = Converters.getTaskSpecfromProto(vertexProto, 0, 0, tezTaskAttemptId);\n     assertEquals(\"dagName\", taskSpec.getDAGName());\n     assertEquals(\"vertexName\", taskSpec.getVertexName());", "sourceBeforeFix": "timeout=5000", "sourceAfterFix": "timeout=10000"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader\")\n  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "   }\n   @GwtIncompatible(\"Reader\")\n  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "40e6bbe55f7141bd66a52261e108a1f3b575ca6f", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "fixed": "             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page1 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 1, 2);\n         assertThat(page1.pagination().getCount()).isEqualTo(2);\n        assertThat(page1.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page1.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello2\", \"hello3\");", "fixed": "         final PaginatedList<TestDTO> page1 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 1, 2);\n         assertThat(page1.pagination().getCount()).isEqualTo(2);\n        assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page1.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello2\", \"hello3\");", "sourceBeforeFix": "assertThat(page4.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page4.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NagiosEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedNagiosEndpointBuilder advanced() {\n             return (AdvancedNagiosEndpointBuilder) this;\n         }", "fixed": "     \n    public interface NagiosEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedNagiosEndpointBuilder advanced() {\n             return (AdvancedNagiosEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "9e6f96dbfc8bf1ae1ffbe0115f53f1de0fc86ffc", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "fixed": "                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "3a75e0ddf165fb153cc741b1a1f4b409443f33e4", "projectName": "Alluxio.alluxio", "bugType": "Less Specific If", "problem": "     request.setAttribute(\"invalidPathError\", \"\");\n     List<ClientFileInfo> filesInfo = null;\n     String currentPath = request.getParameter(\"path\");\n    if (currentPath.isEmpty()) {\n       currentPath = Constants.PATH_SEPARATOR;\n     }\n     request.setAttribute(\"currentPath\", currentPath);", "fixed": "     request.setAttribute(\"invalidPathError\", \"\");\n     List<ClientFileInfo> filesInfo = null;\n     String currentPath = request.getParameter(\"path\");\n    if (currentPath == null || currentPath.isEmpty()) {\n       currentPath = Constants.PATH_SEPARATOR;\n     }\n     request.setAttribute(\"currentPath\", currentPath);", "sourceBeforeFix": "currentPath.isEmpty()", "sourceAfterFix": "currentPath == null || currentPath.isEmpty()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Ignoring duplicate class \" + className)", "sourceAfterFix": "LOG.warn(\"Ignoring duplicate class \" + className)"}
{"fixCommitSHA1": "f9fa3ea530d5743d26a3879e79ab67676e2a476b", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @param file the FileHandle */\n \tpublic Model loadObj (FileHandle file) {\n\t\treturn loadObj(file, false);\n \t}\n/** @deprecated Use {@link ObjLoader", "fixed": " \t * \n \t * @param file the FileHandle */\n \tpublic Model loadObj (FileHandle file) {\n\t\treturn loadModel(file);\n \t}\n/** @deprecated Use {@link ObjLoader", "sourceBeforeFix": "loadObj(file,false)", "sourceAfterFix": "loadModel(file)"}
{"fixCommitSHA1": "d451d4efb8af2fee8100493268e92727f0bc0324", "projectName": "swagger-api.swagger-codegen", "bugType": "More Specific If", "problem": "                 }\n             }\n            if (allDefinitions != null) {\n                 for (RefModel _interface : composed.getInterfaces()) {\n                     final String interfaceRef = toModelName(_interface.getSimpleRef());\n                     final Model interfaceModel = allDefinitions.get(interfaceRef);", "fixed": "                 }\n             }\n            if (allDefinitions != null && composed.getInterfaces() != null) {\n                 for (RefModel _interface : composed.getInterfaces()) {\n                     final String interfaceRef = toModelName(_interface.getSimpleRef());\n                     final Model interfaceModel = allDefinitions.get(interfaceRef);", "sourceBeforeFix": "allDefinitions != null", "sourceAfterFix": "allDefinitions != null && composed.getInterfaces() != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result1\");\n        mock.expectedBodiesReceived(\"Hello World\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result1\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World 2\",\"Hello World 4\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\",\"Hello World 4\")"}
{"fixCommitSHA1": "3d785dfc55bb6fdec9c6fcd67b9a2359cc216181", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "         }\n     }\n    private class BlockingCallback implements AuthenticationCallback {\n         private final CountDownLatch countDownLatch = new CountDownLatch(1);\n         private Connection connection;", "fixed": "         }\n     }\n    private static class BlockingCallback implements AuthenticationCallback {\n         private final CountDownLatch countDownLatch = new CountDownLatch(1);\n         private Connection connection;", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "a0ecc248be51f8b5b518174457ac9c9875179c45", "projectName": "apache.hive", "bugType": "Change Modifier", "problem": " public class ASTNode extends CommonTree implements Node,Serializable {\n   private static final long serialVersionUID = 1L;\n  private ASTNodeOrigin origin;\n   public ASTNode() {\n   }", "fixed": " public class ASTNode extends CommonTree implements Node,Serializable {\n   private static final long serialVersionUID = 1L;\n  private transient ASTNodeOrigin origin;\n   public ASTNode() {\n   }", "sourceBeforeFix": "2", "sourceAfterFix": "130"}
{"fixCommitSHA1": "cd70b8db19db4a22136c8411fd0b72252b2f975a", "projectName": "AsyncHttpClient.async-http-client", "bugType": "More Specific If", "problem": "     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "fixed": "     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "sourceBeforeFix": "contentType != null", "sourceAfterFix": "contentType != null && charset == null"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "sourceBeforeFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(2000L)", "sourceAfterFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(500L)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d222fc981c938bd3543ee61f22422d20efcdcd94", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(800);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(800)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "             int equalsPos = encoding.indexOf('=');\n             if (equalsPos != -1) {\n                 try {\n                    q = Float.valueOf(encoding.substring(equalsPos + 1));\n                 } catch (NumberFormatException e) {\n                     q = 0.0f;", "fixed": "             int equalsPos = encoding.indexOf('=');\n             if (equalsPos != -1) {\n                 try {\n                    q = Float.parseFloat(encoding.substring(equalsPos + 1));\n                 } catch (NumberFormatException e) {\n                     q = 0.0f;", "sourceBeforeFix": "Float.valueOf(encoding.substring(equalsPos + 1))", "sourceAfterFix": "Float.parseFloat(encoding.substring(equalsPos + 1))"}
{"fixCommitSHA1": "619ff2bc073d1b8859c8c8e1fa351b7858529670", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                     @Override\n                     public AsyncIOWriter write(String data) throws IOException {\n                        response.write(data + END);\n                         return this;\n                     }", "fixed": "                     @Override\n                     public AsyncIOWriter write(String data) throws IOException {\n                        response.write(data + end);\n                         return this;\n                     }", "sourceBeforeFix": "END + \" End Message Interceptor\"", "sourceAfterFix": "end + \" End Message Interceptor\""}
{"fixCommitSHA1": "5ef690369074888234a9616483d26e4637a126a8", "projectName": "spring-projects.spring-boot", "bugType": "Same Function More Args", "problem": " /*\n * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "fixed": " /*\n * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "sourceBeforeFix": "factory.getProxy()", "sourceAfterFix": "factory.getProxy(getClass().getClassLoader())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "fixed": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "6618cef776cf1c9ce67ff8ee461412110ca5ada7", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t\ttaskManagerQueryServiceGatewaysFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.warn(\"Requesting TaskManager's path for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tList<String> taskManagersToRetain = queryServiceGateways\n \t\t\t\t\t\t\t\t.stream()", "fixed": " \t\t\t\ttaskManagerQueryServiceGatewaysFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.debug(\"Requesting TaskManager's path for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tList<String> taskManagersToRetain = queryServiceGateways\n \t\t\t\t\t\t\t\t.stream()", "sourceBeforeFix": "LOG.warn(\"Exception while fetching metrics.\",e)", "sourceAfterFix": "LOG.debug(\"Exception while fetching metrics.\",e)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SpringIntegrationEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringIntegrationEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SpringIntegrationEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringIntegrationEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Current assignment of \" +\n          Bytes.toString(info.getRegionName()) +\n           \" is not valid: serverInfo: \" + storedInfo + \", passed startCode: \" +\n           startCode + \", storedInfo.startCode: \" +\n           ((storedInfo != null)? storedInfo.getStartCode(): -1) +", "fixed": "       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Current assignment of \" +\n          info.getRegionNameAsString() +\n           \" is not valid: serverInfo: \" + storedInfo + \", passed startCode: \" +\n           startCode + \", storedInfo.startCode: \" +\n           ((storedInfo != null)? storedInfo.getStartCode(): -1) +", "sourceBeforeFix": "parent.getRegionName()", "sourceAfterFix": "parent.getRegionNameAsString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(639)", "sourceAfterFix": "new StringBuilder(638)"}
{"fixCommitSHA1": "3748afae244f81389553e149a023a0b3f81a90ab", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     try {\n       mFileSystemMaster\n           .createDirectory(new AlluxioURI(\"alluxio:/a\"), CreateDirectoryOptions.defaults());\n      Assert.fail();\n     } catch (FileAlreadyExistsException e) {\n     }", "fixed": "     try {\n       mFileSystemMaster\n           .createDirectory(new AlluxioURI(\"alluxio:/a\"), CreateDirectoryOptions.defaults());\n      Assert.fail(\"createDirectory was expected to fail with FileAlreadyExistsException\");\n     } catch (FileAlreadyExistsException e) {\n     }", "sourceBeforeFix": "Assert.fail()", "sourceAfterFix": "Assert.fail(\"createDirectory was expected to fail with FileAlreadyExistsException\")"}
{"fixCommitSHA1": "aafd3788df73bd0d21c9411014a7cbda0a5bbd17", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   };\n   \n  private final PassFactory removeAbstractMethods =\n      new PassFactory(\"removeAbstractMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new GoogleCodeRemoval(compiler);\n     }\n   };", "fixed": "   };\n   \n  private final PassFactory closureCodeRemoval =\n      new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new ClosureCodeRemoval(compiler);\n     }\n   };", "sourceBeforeFix": "new GoogleCodeRemoval(compiler)", "sourceAfterFix": "new ClosureCodeRemoval(compiler)"}
{"fixCommitSHA1": "2bbc1368b233f630f6acbf6d6c8d52ec5f1d1772", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             throw new IllegalStateException(\"AssetTree already configured\");\n         }\n        client = ((ChronicleEngineEnpoint)getEndpoint()).createRemoteAssetTree();\n     }\n     @Override", "fixed": "             throw new IllegalStateException(\"AssetTree already configured\");\n         }\n        client = ((ChronicleEngineEndpoint)getEndpoint()).createRemoteAssetTree();\n     }\n     @Override", "sourceBeforeFix": "(ChronicleEngineEnpoint)getEndpoint()", "sourceAfterFix": "(ChronicleEngineEndpoint)getEndpoint()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );", "fixed": "                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "cdcc5397439b2e7441180a4712d7163afa451a6d", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   private static TesterRequirements buildTesterRequirements(\n       Annotation testerAnnotation)\n       throws ConflictingRequirementsException {\n    Class<? extends Annotation> annotationClass = testerAnnotation.getClass();\n     final Feature<?>[] presentFeatures;\n     final Feature<?>[] absentFeatures;\n     try {", "fixed": "   private static TesterRequirements buildTesterRequirements(\n       Annotation testerAnnotation)\n       throws ConflictingRequirementsException {\n    Class<? extends Annotation> annotationClass = testerAnnotation.annotationType();\n     final Feature<?>[] presentFeatures;\n     final Feature<?>[] absentFeatures;\n     try {", "sourceBeforeFix": "testerAnnotation.getClass()", "sourceAfterFix": "testerAnnotation.annotationType()"}
{"fixCommitSHA1": "40e6bbe55f7141bd66a52261e108a1f3b575ca6f", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 obj = null;\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "fixed": "                 obj = null;\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "2b77ee60c2b8229ff24ac01937d16ec4dc36fe3d", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": "     List<ExecutionEntity> childExecutions = executionManager\n      .findChildExecutionsByParentExecutionId(processInstanceId);\n     for (ExecutionEntity executionEntity : childExecutions) {\n       validateAndSwitchVersionOfExecution(commandContext, executionEntity, newProcessDefinition);\n     }", "fixed": "     List<ExecutionEntity> childExecutions = executionManager\n      .findChildExecutionsByProcessInstanceId(processInstanceId);\n     for (ExecutionEntity executionEntity : childExecutions) {\n       validateAndSwitchVersionOfExecution(commandContext, executionEntity, newProcessDefinition);\n     }", "sourceBeforeFix": "executionManager.findChildExecutionsByParentExecutionId(processInstanceId)", "sourceAfterFix": "executionManager.findChildExecutionsByProcessInstanceId(processInstanceId)"}
{"fixCommitSHA1": "bc1adbde03308cb046dbc14e562a85b5e42d6ed1", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "         if (inputState != null)\n             inputState.setState(IOState.Type.TERMINATED);\n        return super.remove(input);\n     }\n     public boolean remove(IOState<MessageInput> inputState) {", "fixed": "         if (inputState != null)\n             inputState.setState(IOState.Type.TERMINATED);\n        return super.remove(inputState);\n     }\n     public boolean remove(IOState<MessageInput> inputState) {", "sourceBeforeFix": "super.remove(input)", "sourceAfterFix": "super.remove(inputState)"}
{"fixCommitSHA1": "362a274886616e092272ee480b2edcc3436bf281", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "     private final ClassLoader agentClassLoader = this.getClass().getClassLoader();\n     private final TransformerRegistry transformerRegistry;\n    private final DynamicTrnasformerRegistry dynamicTransformerRegistry;\n     private final DefaultProfilerPluginContext globalContext;    \n     private final Filter<String> debugTargetFilter;", "fixed": "     private final ClassLoader agentClassLoader = this.getClass().getClassLoader();\n     private final TransformerRegistry transformerRegistry;\n    private final DynamicTransformerRegistry dynamicTransformerRegistry;\n     private final DefaultProfilerPluginContext globalContext;    \n     private final Filter<String> debugTargetFilter;", "sourceBeforeFix": "private final DynamicTrnasformerRegistry dynamicTransformerRegistry; ", "sourceAfterFix": "private final DynamicTransformerRegistry dynamicTransformerRegistry; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see NormalizableKey\n \t */\n\tpublic void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "fixed": " \t * \n* @see NormalizableKey\n \t */\n\tpublic abstract void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "fixed": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "sourceBeforeFix": "logger.debug(\"MyQ binding received command '{}' for item '{}'\",command,itemName)", "sourceAfterFix": "logger.trace(\"MyQ binding received command '{}' for item '{}'\",command,itemName)"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "fixed": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSpringIntegrationEndpointBuilder\n             extends\n                 AdvancedSpringIntegrationEndpointConsumerBuilder, AdvancedSpringIntegrationEndpointProducerBuilder {\n         default SpringIntegrationEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSpringIntegrationEndpointBuilder\n             extends\n                 AdvancedSpringIntegrationEndpointConsumerBuilder, AdvancedSpringIntegrationEndpointProducerBuilder {\n         default SpringIntegrationEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n \t/**\n \t * Get a listing or important variables used in openmrs", "fixed": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t/**\n \t * Get a listing or important variables used in openmrs", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "031f769fa3c610748b48bc105b4518c880161d0a", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t*/\n \tpublic Vector2 getLocalAnchorB () {\n\t\tjniGetLocalAnchorA(addr, tmp);\n \t\tlocalAnchorB.set(tmp[0], tmp[1]);\n \t\treturn localAnchorB;\n \t}", "fixed": " \t*/\n \tpublic Vector2 getLocalAnchorB () {\n\t\tjniGetLocalAnchorB(addr, tmp);\n \t\tlocalAnchorB.set(tmp[0], tmp[1]);\n \t\treturn localAnchorB;\n \t}", "sourceBeforeFix": "jniGetLocalAnchorA(addr,tmp)", "sourceAfterFix": "jniGetLocalAxisA(addr,tmp)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3e04036dbec732f74124bc13e3f8fe146b7d5712", "projectName": "apache.hadoop", "bugType": "Same Function More Args", "problem": "     }\n    jobConf_ = new JobConf(config_);", "fixed": "     }\n    jobConf_ = new JobConf(config_, StreamJob.class);", "sourceBeforeFix": "new JobConf(config_)", "sourceAfterFix": "new JobConf(config_,StreamJob.class)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  State getIntermediateState() {\n     return state;\n   }", "fixed": "   }\n   @Override\n  protected State getIntermediateState() {\n     return state;\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "98e7fe490c342853f703b473cc6bf19fb175b7db", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "         }\n         public String getName() {\n            return NbBundle.getMessage(DegreeRangeBuilder.class, \"EgoBuilder.name\");\n         }\n         public FilterProperty[] getProperties() {", "fixed": "         }\n         public String getName() {\n            return NbBundle.getMessage(EgoBuilder.class, \"EgoBuilder.name\");\n         }\n         public FilterProperty[] getProperties() {", "sourceBeforeFix": "DegreeRangeBuilder.class", "sourceAfterFix": "EgoBuilder.class"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "bc42c31387e272b70f2418debbb1601519b44d0f", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": " public final class QuartzHelper {\n    public static final Logger LOG = LoggerFactory.getLogger(QuartzEndpoint.class);\n     private QuartzHelper() {\n     }\n     public static String getQuartzContextName(CamelContext camelContext) {", "fixed": " public final class QuartzHelper {\n    public static final Logger LOG = LoggerFactory.getLogger(QuartzHelper.class);\n     private QuartzHelper() {\n     }\n     public static String getQuartzContextName(CamelContext camelContext) {", "sourceBeforeFix": "QuartzEndpoint.class", "sourceAfterFix": "QuartzHelper.class"}
{"fixCommitSHA1": "03c25ca7060c0f072d22f27789e485eda732ea55", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         ZipOutputStream zos = new ZipOutputStream(stream);\n         zos.putNextEntry(new ZipEntry(filename));\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n         try {\n             IOHelper.copy(is, zos);", "fixed": "         ZipOutputStream zos = new ZipOutputStream(stream);\n         zos.putNextEntry(new ZipEntry(filename));\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n         try {\n             IOHelper.copy(is, zos);", "sourceBeforeFix": "exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,graph)", "sourceAfterFix": "exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,exchange,graph)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "46ebaab8bc4b4d75d29275c2fc78585025d28fb8", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": " public class FileConcurrentWriteAppendSameFileTest extends ContextTestSupport {\n    private final int size = 500;\n     @Override\n     protected void setUp() throws Exception {", "fixed": " public class FileConcurrentWriteAppendSameFileTest extends ContextTestSupport {\n    private final int size = 100;\n     @Override\n     protected void setUp() throws Exception {", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(1000)"}
{"fixCommitSHA1": "0a526774d5a012e0f1cb1adef2a5e3d982e39395", "projectName": "apache.hive", "bugType": "Same Function Swap Args", "problem": "         RelDataType relType = cluster.getTypeFactory().createSqlType(SqlTypeName.DECIMAL,\n            bd.scale(), unscaled.toString().length());\n         calciteLiteral = rexBuilder.makeExactLiteral(bd, relType);\n       }\n       break;", "fixed": "         RelDataType relType = cluster.getTypeFactory().createSqlType(SqlTypeName.DECIMAL,\n            unscaled.toString().length(), bd.scale());\n         calciteLiteral = rexBuilder.makeExactLiteral(bd, relType);\n       }\n       break;", "sourceBeforeFix": "cluster.getTypeFactory().createSqlType(SqlTypeName.DECIMAL,bd.scale(),unscaled.toString().length())", "sourceAfterFix": "cluster.getTypeFactory().createSqlType(SqlTypeName.DECIMAL,unscaled.toString().length(),bd.scale())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CometdEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCometdEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CometdEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCometdEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *\n          * @return the list selection model\n          */\n        ListSelectionModel getListSelectionModel() {\n             return listSelectionModel;\n         }", "fixed": "          *\n          * @return the list selection model\n          */\n        final ListSelectionModel getListSelectionModel() {\n             return listSelectionModel;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "ba058ec1f8fc8597d3d1135b4c93486f8b55662f", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "      * This should only be enabled for tests that uses custom type converters.\n      */\n     protected boolean isLoadTypeConverters() {\n        return false;\n     }\n     protected void stopCamelContext() throws Exception {", "fixed": "      * This should only be enabled for tests that uses custom type converters.\n      */\n     protected boolean isLoadTypeConverters() {\n        return true;\n     }\n     protected void stopCamelContext() throws Exception {", "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "fixed": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentTo(node2)"}
{"fixCommitSHA1": "459e772e2b72e5179d117e6f50e3837c95fa1112", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    */\n   private StorageDirView allocateBlock(long sessionId, long blockSize,\n       BlockStoreLocation location) {\n    Preconditions.checkNotNull(location);\n     StorageDirView candidateDirView = null;\n     if (location.equals(BlockStoreLocation.anyTier())) {", "fixed": "    */\n   private StorageDirView allocateBlock(long sessionId, long blockSize,\n       BlockStoreLocation location) {\n    Preconditions.checkNotNull(location, \"location\");\n     StorageDirView candidateDirView = null;\n     if (location.equals(BlockStoreLocation.anyTier())) {", "sourceBeforeFix": "Preconditions.checkNotNull(location)", "sourceAfterFix": "Preconditions.checkNotNull(location,\"location\")"}
{"fixCommitSHA1": "14eade7f6e21e560a08de348504584cba5e94c94", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     public static Archive<?> deployment1() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(), \"web.xml\");\n         war.addAsWebInfResource(EmptyAsset.INSTANCE, \"force-hashcode-change.txt\");\n         System.out.println(war.toString(true));\n         return war;", "fixed": "     public static Archive<?> deployment1() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.setWebXML(ClusteredWebTestCase.class.getPackage(), \"web.xml\");\n         war.addAsWebInfResource(EmptyAsset.INSTANCE, \"force-hashcode-change.txt\");\n         System.out.println(war.toString(true));\n         return war;", "sourceBeforeFix": "war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),\"web.xml\")", "sourceAfterFix": "war.setWebXML(ClusteredWebTestCase.class.getPackage(),\"web.xml\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleCalendarEndpointBuilder\n             extends\n                 AdvancedGoogleCalendarEndpointConsumerBuilder, AdvancedGoogleCalendarEndpointProducerBuilder {\n         default GoogleCalendarEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleCalendarEndpointBuilder\n             extends\n                 AdvancedGoogleCalendarEndpointConsumerBuilder, AdvancedGoogleCalendarEndpointProducerBuilder {\n         default GoogleCalendarEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node1)", "sourceAfterFix": "node1.isEquivalentTo(node1)"}
