{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "36f71405ee04602e76844b255e44f146bb476161", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\tthis.setConceptSets(new TreeSet<ConceptSet>(c.getConceptSets()));\r\n \t\tfor (ConceptSet cSet : this.getConceptSets()) {\r\n\t\t\tcSet.setConcept(this);\r\n \t\t}\r\n \t\tthis.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));\r", "fixed": " \t\tthis.setConceptSets(new TreeSet<ConceptSet>(c.getConceptSets()));\r\n \t\tfor (ConceptSet cSet : this.getConceptSets()) {\r\n\t\t\tcSet.setConceptSet(this);\r\n \t\t}\r\n \t\tthis.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));\r", "sourceBeforeFix": "cSet.setConcept(this)", "sourceAfterFix": "cSet.setConceptSet(this)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ReactiveStreamsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedReactiveStreamsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ReactiveStreamsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedReactiveStreamsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSedaEndpointBuilder\n             extends\n                 AdvancedSedaEndpointConsumerBuilder, AdvancedSedaEndpointProducerBuilder {\n         default SedaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSedaEndpointBuilder\n             extends\n                 AdvancedSedaEndpointConsumerBuilder, AdvancedSedaEndpointProducerBuilder {\n         default SedaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJingEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JingEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJingEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JingEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RestEndpointBuilder\n             extends\n                 RestEndpointConsumerBuilder, RestEndpointProducerBuilder {\n         default AdvancedRestEndpointBuilder advanced() {", "fixed": "     \n    public interface RestEndpointBuilder\n             extends\n                 RestEndpointConsumerBuilder, RestEndpointProducerBuilder {\n         default AdvancedRestEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleCalendarEndpointBuilder\n             extends\n                 GoogleCalendarEndpointConsumerBuilder, GoogleCalendarEndpointProducerBuilder {\n         default AdvancedGoogleCalendarEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleCalendarEndpointBuilder\n             extends\n                 GoogleCalendarEndpointConsumerBuilder, GoogleCalendarEndpointProducerBuilder {\n         default AdvancedGoogleCalendarEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "e16bf78360f5a93cbc6db48fa486f445e4b9a21a", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void testGetStateToBindingValueConverter() {\n         NumberItem item = new NumberItem(NUMBER_ITEM_NAME);\n        converterLookup.addCustomConverter(item, IntegerDecimalConverter.class);\n         StateConverterMap converter = converterLookup.getStateToBindingValueConverter(item, null);\n         assertEquals(IntegerDecimalConverter.class, converter.get(\"bla\").getClass());\n     }", "fixed": "     @Test\n     public void testGetStateToBindingValueConverter() {\n         NumberItem item = new NumberItem(NUMBER_ITEM_NAME);\n        converterLookup.addCustomConverter(NUMBER_ITEM_NAME, IntegerDecimalConverter.class);\n         StateConverterMap converter = converterLookup.getStateToBindingValueConverter(item, null);\n         assertEquals(IntegerDecimalConverter.class, converter.get(\"bla\").getClass());\n     }", "sourceBeforeFix": "converterLookup.addCustomConverter(item,IntegerDecimalConverter.class)", "sourceAfterFix": "converterLookup.addCustomConverter(NUMBER_ITEM_NAME,IntegerDecimalConverter.class)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "fixed": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "sourceBeforeFix": "GL.glBindTextureEXT(target,texture)", "sourceAfterFix": "GL.glBindTexture(target,texture)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b7e092e821021b7c0dbd91eacfe369181bfa28b8", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverAcceptor());\n \t\t}\n \t}", "fixed": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n \t\t}\n \t}", "sourceBeforeFix": "rSocketMessageHandler.serverAcceptor()", "sourceAfterFix": "rSocketMessageHandler.serverResponder()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SchedulerEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedSchedulerEndpointBuilder advanced() {\n             return (AdvancedSchedulerEndpointBuilder) this;\n         }", "fixed": "     \n    public interface SchedulerEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedSchedulerEndpointBuilder advanced() {\n             return (AdvancedSchedulerEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnablednHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "fixed": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();", "fixed": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();", "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   }\n   void recordFunctionInformation() {\n    logger.info(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(", "fixed": "   }\n   void recordFunctionInformation() {\n    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(", "sourceBeforeFix": "logger.info(\"Recording function information\")", "sourceAfterFix": "logger.fine(\"Recording function information\")"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "051f6ab285eb21d16afeb87ed5bd9cfacfc67e47", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "      */\n     public int getDeletedRelationships()\n     {\n        return inner.deletedNodes();\n     }\n     /**", "fixed": "      */\n     public int getDeletedRelationships()\n     {\n        return inner.deletedRelationships();\n     }\n     /**", "sourceBeforeFix": "inner.deletedNodes()", "sourceAfterFix": "inner.deletedRelationships()"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xdf, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1c5101ae289f2ea00a00536966a9614f4e33d7a4", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tbreak;\r\n \t\t\t\t}\r\n \t\t\t}\r\n\t\t\ttouchEventPool.free(touchEvents);\r\n \t\t\ttouchEvents.clear();\r\n \t\t}\r\n \t}\r", "fixed": " \t\t\t\t\tbreak;\r\n \t\t\t\t}\r\n \t\t\t}\r\n\t\t\ttouchEventPool.freeAll(touchEvents);\r\n \t\t\ttouchEvents.clear();\r\n \t\t}\r\n \t}\r", "sourceBeforeFix": "touchEventPool.free(touchEvents)", "sourceAfterFix": "touchEventPool.freeAll(touchEvents)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MiloServerEndpointBuilder\n             extends\n                 MiloServerEndpointConsumerBuilder, MiloServerEndpointProducerBuilder {\n         default AdvancedMiloServerEndpointBuilder advanced() {", "fixed": "     \n    public interface MiloServerEndpointBuilder\n             extends\n                 MiloServerEndpointConsumerBuilder, MiloServerEndpointProducerBuilder {\n         default AdvancedMiloServerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "5755cf96d1689e1eda7dd2d7e03f1eff3bf5a074", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      *\n      * @return Type of exception\n      */\n    public Class<? extends Exception> exceptionClass() {\n         return this.exceptionClass;\n     }", "fixed": "      *\n      * @return Type of exception\n      */\n    public Class<? extends T> exceptionClass() {\n         return this.exceptionClass;\n     }", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "T exception"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ac2d51d28fd28794371073b7009abd88f31cbedf", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                 + \"    </test:setState>\"\n                 + \"  </soapenv:Body>\"\n                 + \"</soapenv:Envelope>\";\nString result = HttpRequest.put(\"http:\n         System.out.println(result);\n     }", "fixed": "                 + \"    </test:setState>\"\n                 + \"  </soapenv:Body>\"\n                 + \"</soapenv:Envelope>\";\nString result = HttpRequest.post(\"http:\n         System.out.println(result);\n     }", "sourceBeforeFix": "HttpRequest.put(\"http://localhost:8080/ejbws-example/SingletonEndpoint\",message,10,SECONDS)", "sourceAfterFix": "HttpRequest.post(\"http://localhost:8080/ejbws-example/SingletonEndpoint\",message,10,SECONDS)"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.debug(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "fixed": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.trace(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "sourceBeforeFix": "logger.debug(\"attempting to login\")", "sourceAfterFix": "logger.trace(\"attempting to login\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedYammerEndpointBuilder\n             extends\n                 AdvancedYammerEndpointConsumerBuilder, AdvancedYammerEndpointProducerBuilder {\n         default YammerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedYammerEndpointBuilder\n             extends\n                 AdvancedYammerEndpointConsumerBuilder, AdvancedYammerEndpointProducerBuilder {\n         default YammerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c5ccaee5065a52110a4124505002d6afeb7c13ca", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         }\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n            StringBuilder sb = new StringBuilder(64);\n             while (sao.pos < sao.limit) {\n                 byte nextByte = sao.bytes[sao.pos++];\n                 if (nextByte == HttpConstants.CR) {", "fixed": "         }\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n            ByteBuf line = buffer(64);\n             while (sao.pos < sao.limit) {\n                 byte nextByte = sao.bytes[sao.pos++];\n                 if (nextByte == HttpConstants.CR) {", "sourceBeforeFix": "sb.toString()", "sourceAfterFix": "line.toString(charset)"}
{"fixCommitSHA1": "0757d24d91bfe9ea2256c19aa798a5fa10bb6692", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": " \t\tMap<String, Object> map = (Map<String, Object>) nestedProperties\n \t\t\t\t.get(\"properties\");\n \t\tassertNotNull(map);\n\t\tassertEquals(2, map.size());\n \t\tassertEquals(\"foo\", ((Map<String, Object>) map.get(\"map\")).get(\"name\"));\n \t}", "fixed": " \t\tMap<String, Object> map = (Map<String, Object>) nestedProperties\n \t\t\t\t.get(\"properties\");\n \t\tassertNotNull(map);\n\t\tassertEquals(1, map.size());\n \t\tassertEquals(\"foo\", ((Map<String, Object>) map.get(\"map\")).get(\"name\"));\n \t}", "sourceBeforeFix": "assertEquals(2,map.size())", "sourceAfterFix": "assertEquals(1,map.size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9e6f96dbfc8bf1ae1ffbe0115f53f1de0fc86ffc", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n         }\n         return record;\n     }", "fixed": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n                Thread.sleep(50);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r", "fixed": "             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n                Thread.sleep(100);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "addd22c9cfa473eecf99779227f1952d52ad7af5", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath, ufsPath);\n     try {\n       mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);", "fixed": "     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient)\n        .mount(alluxioPath, ufsPath, mountOptions);\n     try {\n       mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);", "sourceBeforeFix": "Mockito.verify(mFileSystemMasterClient).mount(alluxioPath,ufsPath)", "sourceAfterFix": "Mockito.verify(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                 }\n             }\n         }\n        return r;\n     }\n     private boolean isAtmosphereResourceValid(AtmosphereResource r) {", "fixed": "                 }\n             }\n         }\n        return this;\n     }\n     private boolean isAtmosphereResourceValid(AtmosphereResource r) {", "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KafkaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKafkaEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KafkaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKafkaEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedNettyEndpointBuilder\n             extends\n                 AdvancedNettyEndpointConsumerBuilder, AdvancedNettyEndpointProducerBuilder {\n         default NettyEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedNettyEndpointBuilder\n             extends\n                 AdvancedNettyEndpointConsumerBuilder, AdvancedNettyEndpointProducerBuilder {\n         default NettyEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2ac6f8c326490b85b9ad9e0a67d53ffb7fc2842", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     public final static String SUSPEND = NettyCometSupport.class.getName() + \".suspend\";\n     public final static String RESUME = NettyCometSupport.class.getName() + \".resume\";\n    private static final Logger logger = LoggerFactory.getLogger(BlockingIOCometSupport.class);\n     public NettyCometSupport(AtmosphereConfig config) {\n         super(config);", "fixed": "     public final static String SUSPEND = NettyCometSupport.class.getName() + \".suspend\";\n     public final static String RESUME = NettyCometSupport.class.getName() + \".resume\";\n    private static final Logger logger = LoggerFactory.getLogger(NettyCometSupport.class);\n     public NettyCometSupport(AtmosphereConfig config) {\n         super(config);", "sourceBeforeFix": "BlockingIOCometSupport.class", "sourceAfterFix": "NettyCometSupport.class"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "32d470c4e3edba4b399ae18bdcb9e09592e3cc14", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\tios.cFlags += \" -DFT2_BUILD_LIBRARY\";\r\n \t\tios.cppFlags += \" -DFT2_BUILD_LIBRARY\";\r\n\t\tnew NativeCodeGenerator().generate();\r\n \t\tnew AntScriptGenerator()\r\n \t\t\t.generate(new BuildConfig(\"gdx-freetype\"), win32home, win32, win64, lin32, lin64, mac, mac64, android, ios);\r", "fixed": " \t\tios.cFlags += \" -DFT2_BUILD_LIBRARY\";\r\n \t\tios.cppFlags += \" -DFT2_BUILD_LIBRARY\";\r\n\t\tnew NativeCodeGenerator().generate(\"src\", \"bin:../../gdx/bin\", \"jni\");\r\n \t\tnew AntScriptGenerator()\r\n \t\t\t.generate(new BuildConfig(\"gdx-freetype\"), win32home, win32, win64, lin32, lin64, mac, mac64, android, ios);\r", "sourceBeforeFix": "new NativeCodeGenerator().generate()", "sourceAfterFix": "new NativeCodeGenerator().generate(\"src\",\"bin:../../gdx/bin\",\"jni\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "544edb296479cbd05f35381b20a651e9d022e197", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         context.start();\n         for (int i = 0; i < 10; i++) {\n            getMockEndpoint(\"mock:\" + i).expectedMessageCount(1000);\n         }\n         ExecutorService executors = Executors.newFixedThreadPool(20);\n        for (int i = 0; i < 1000; i++) {\n             executors.execute(new Runnable() {\n                 public void run() {\n                     for (int i = 0; i < 10; i++) {", "fixed": "         context.start();\n         for (int i = 0; i < 10; i++) {\n            getMockEndpoint(\"mock:\" + i).expectedMessageCount(200);\n         }\n         ExecutorService executors = Executors.newFixedThreadPool(20);\n        for (int i = 0; i < 200; i++) {\n             executors.execute(new Runnable() {\n                 public void run() {\n                     for (int i = 0; i < 10; i++) {", "sourceBeforeFix": "getMockEndpoint(\"mock:\" + i).expectedMessageCount(1000)", "sourceAfterFix": "getMockEndpoint(\"mock:\" + i).expectedMessageCount(200)"}
{"fixCommitSHA1": "cc848a1c24959c2f6941234b77399fbd58ecd3ca", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "     @Override\n     public String apiFileFolder() {\n        return (outputFolder + File.separator + apiFolder).replaceAll(\"/\", File.separator);\n     }\n     public String modelFileFolder() {\n        return (outputFolder + File.separator + modelFolder).replaceAll(\"/\", File.separator);\n     }\n     @Override", "fixed": "     @Override\n     public String apiFileFolder() {\n        return (outputFolder + File.separator + apiFolder).replace(\"/\", File.separator);\n     }\n     public String modelFileFolder() {\n        return (outputFolder + File.separator + modelFolder).replace(\"/\", File.separator);\n     }\n     @Override", "sourceBeforeFix": "(outputFolder + File.separator + modelFolder).replaceAll(\"/\",File.separator)", "sourceAfterFix": "(outputFolder + File.separator + modelFolder).replace(\"/\",File.separator)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "5f1632dd4a5274c4180b4b35b778e198b1ddd8ff", "projectName": "perwendel.spark", "bugType": "Same Function More Args", "problem": "             try {\n                 DoneFilters.execute(context);\n             } catch (Exception generalException) {\n                GeneralError.modify(httpResponse, body, requestWrapper, responseWrapper, generalException);\n             }\n         }", "fixed": "             try {\n                 DoneFilters.execute(context);\n             } catch (Exception generalException) {\n                GeneralError.modify(\n                        httpRequest,\n                        httpResponse,\n                        body,\n                        requestWrapper,\n                        responseWrapper,\n                        generalException);\n             }\n         }", "sourceBeforeFix": "GeneralError.modify(httpResponse,body,requestWrapper,responseWrapper,generalException)", "sourceAfterFix": "GeneralError.modify(httpRequest,httpResponse,body,requestWrapper,responseWrapper,generalException)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "40a36841e2ed139a2a8714ccdafcaee49693f48f", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "         TypeInfo commonTypeInfo = FunctionRegistry.getCommonClassForUnionAll(lInfo.getType(),\n             rInfo.getType());\n         if (commonTypeInfo == null) {\n          throw new SemanticException(generateErrorMessage(tabref,\n               \"Schema of both sides of union should match: Column \" + field + \" is of type \"\n                   + lInfo.getType().getTypeName() + \" on first table and type \"\n                   + rInfo.getType().getTypeName() + \" on second table\"));", "fixed": "         TypeInfo commonTypeInfo = FunctionRegistry.getCommonClassForUnionAll(lInfo.getType(),\n             rInfo.getType());\n         if (commonTypeInfo == null) {\n          throw new OptiqSemanticException(generateErrorMessage(tabref,\n               \"Schema of both sides of union should match: Column \" + field + \" is of type \"\n                   + lInfo.getType().getTypeName() + \" on first table and type \"\n                   + rInfo.getType().getTypeName() + \" on second table\"));", "sourceBeforeFix": "new RuntimeException(\"Invalid Column Reference: \" + grpbyExpr.dump())", "sourceAfterFix": "new OptiqSemanticException(\"Invalid Column Reference: \" + grpbyExpr.dump())"}
{"fixCommitSHA1": "15a26dc6061cd3162d9bea82d0b1cf10beca07e2", "projectName": "Alluxio.alluxio", "bugType": "Missing Throws Exception", "problem": "   }\n   @Test\n  public void reportLostFileTest() {\n     long fileId = 1;\n     mThrown.expect(LineageDoesNotExistException.class);\n     mThrown.expectMessage(ExceptionMessage.LINEAGE_OUTPUT_FILE_NOT_EXIST.getMessage(fileId));\n    mLineageStore.requestFilePersistence(fileId);\n   }\n   @Test", "fixed": "   }\n   @Test\n  public void reportLostFileTest() throws LineageDoesNotExistException {\n     long fileId = 1;\n     mThrown.expect(LineageDoesNotExistException.class);\n     mThrown.expectMessage(ExceptionMessage.LINEAGE_OUTPUT_FILE_NOT_EXIST.getMessage(fileId));\n    mLineageStore.reportLostFile(fileId);\n   }\n   @Test", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class) })\n    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId);\n     @PUT\n     @Consumes({ \"application/json\", \"application/xml\" })", "fixed": "         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class) })\n    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId) throws Exception;\n     @PUT\n     @Consumes({ \"application/json\", \"application/xml\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b669bd30cef473ddf2c0c0318652a938d8d3428", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "         doAnnotation(annotation, backend, serverURL, message, 0);\n       } catch (Throwable t) {\n        log.warn(\"Could not annotate via server! Trying to annotate locally...\", t);\n         StanfordCoreNLP corenlp = new StanfordCoreNLP(properties);\n         corenlp.annotate(annotation);\n       } finally {", "fixed": "         doAnnotation(annotation, backend, serverURL, message, 0);\n       } catch (Throwable t) {\n        log.err(\"Could not annotate via server! Trying to annotate locally...\", t);\n         StanfordCoreNLP corenlp = new StanfordCoreNLP(properties);\n         corenlp.annotate(annotation);\n       } finally {", "sourceBeforeFix": "log.warn(\"Could not annotate via server! Trying to annotate locally...\",t)", "sourceAfterFix": "log.err(\"Could not annotate via server! Trying to annotate locally...\",t)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ac9fdf161f9e1464c3492fa6162895be00189540", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         try {\n             Object answer;\n            XMLStreamReader xmlReader;\n             if (needFiltering(exchange)) {\n                xmlReader = typeConverter.convertTo(XMLStreamReader.class, createNonXmlFilterReader(exchange, stream));\n             } else {\n                xmlReader = typeConverter.convertTo(XMLStreamReader.class, stream);\n             }\n             String partClassFromHeader = exchange.getIn().getHeader(JaxbConstants.JAXB_PART_CLASS, String.class);\n             if (partialClass != null || partClassFromHeader != null) {", "fixed": "         try {\n             Object answer;\n            final XMLStreamReader xmlReader;\n             if (needFiltering(exchange)) {\n                xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, createNonXmlFilterReader(exchange, stream));\n             } else {\n                xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, stream);\n             }\n             String partClassFromHeader = exchange.getIn().getHeader(JaxbConstants.JAXB_PART_CLASS, String.class);\n             if (partialClass != null || partClassFromHeader != null) {", "sourceBeforeFix": "typeConverter.convertTo(XMLStreamReader.class,stream)", "sourceAfterFix": "typeConverter.convertTo(XMLStreamReader.class,exchange,stream)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMina2EndpointBuilder\n             extends\n                 AdvancedMina2EndpointConsumerBuilder, AdvancedMina2EndpointProducerBuilder {\n         default Mina2EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMina2EndpointBuilder\n             extends\n                 AdvancedMina2EndpointConsumerBuilder, AdvancedMina2EndpointProducerBuilder {\n         default Mina2EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"diskspace\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"diskspace\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "93facb514e158589060eacc69e50cc7ff76082b2", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     }\n    private <K> Collection<Data> convertKeysToData(Set<K> keys) {\n         if (keys == null || keys.isEmpty()) {\n             return Collections.emptyList();\n         }", "fixed": "     }\n    private <K> List<Data> convertKeysToData(Set<K> keys) {\n         if (keys == null || keys.isEmpty()) {\n             return Collections.emptyList();\n         }", "sourceBeforeFix": "Collection<Data>", "sourceAfterFix": "List<Data>"}
{"fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Boolean Literal", "problem": "     }\n    @Cucumber.Options(monochrome = false)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n     }\n    @Cucumber.Options(monochrome = true)\n     static class BaseClassWithMonoChromeFalse {\n     }", "fixed": "     }\n    @Cucumber.Options(monochrome = true)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n     }\n    @Cucumber.Options(monochrome = false)\n     static class BaseClassWithMonoChromeFalse {\n     }", "sourceBeforeFix": "monochrome=true", "sourceAfterFix": "monochrome=false"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CaffeineLoadCacheEndpointBuilder\n             extends\n                 CaffeineLoadCacheEndpointConsumerBuilder, CaffeineLoadCacheEndpointProducerBuilder {\n         default AdvancedCaffeineLoadCacheEndpointBuilder advanced() {", "fixed": "     \n    public interface CaffeineLoadCacheEndpointBuilder\n             extends\n                 CaffeineLoadCacheEndpointConsumerBuilder, CaffeineLoadCacheEndpointProducerBuilder {\n         default AdvancedCaffeineLoadCacheEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bbfc2b18a1b5ed3968212db115410ee515dca460", "projectName": "jersey.jersey", "bugType": "Change Numeric Literal", "problem": "     @Override\n     protected void configureClient(ClientConfig clientConfig) {\n        clientConfig.property(ClientProperties.READ_TIMEOUT, 1000);\n     }\n     @Test", "fixed": "     @Override\n     protected void configureClient(ClientConfig clientConfig) {\n        clientConfig.property(ClientProperties.READ_TIMEOUT, 2000);\n     }\n     @Test", "sourceBeforeFix": "clientConfig.property(ClientProperties.READ_TIMEOUT,1000)", "sourceAfterFix": "clientConfig.property(ClientProperties.READ_TIMEOUT,2000)"}
{"fixCommitSHA1": "65c15a0c969d964875b2b988ff5f63d419e6a832", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    private class ExchangeNotifier extends EventNotifierSupport {\n         public void notify(EventObject event) throws Exception {\n             if (event instanceof ExchangeCreatedEvent) {", "fixed": "     \n    private final class ExchangeNotifier extends EventNotifierSupport {\n         public void notify(EventObject event) throws Exception {\n             if (event instanceof ExchangeCreatedEvent) {", "sourceBeforeFix": "2", "sourceAfterFix": "18"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d33a3d853e6465ec8985d1a1b36b7d64f066c130", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tif (bindingConfig.getAction() == BindingAction.RELOAD_VARIABLES) {\n \t\t\t\tstateHolder.reloadVariables();\n \t\t\t} else if (bindingConfig.getAction() == BindingAction.RELOAD_DATAPOINTS) {\n\t\t\t\tstateHolder.reloadVariables();\n \t\t\t} else {\n \t\t\t\tlogger.warn(\"Unknown action {}\", bindingConfig.getAction());\n \t\t\t}", "fixed": " \t\t\tif (bindingConfig.getAction() == BindingAction.RELOAD_VARIABLES) {\n \t\t\t\tstateHolder.reloadVariables();\n \t\t\t} else if (bindingConfig.getAction() == BindingAction.RELOAD_DATAPOINTS) {\n\t\t\t\tstateHolder.reloadDatapoints();\n \t\t\t} else {\n \t\t\t\tlogger.warn(\"Unknown action {}\", bindingConfig.getAction());\n \t\t\t}", "sourceBeforeFix": "stateHolder.reloadVariables()", "sourceAfterFix": "stateHolder.reloadDatapoints()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCouchbaseEndpointBuilder\n             extends\n                 AdvancedCouchbaseEndpointConsumerBuilder, AdvancedCouchbaseEndpointProducerBuilder {\n         default CouchbaseEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCouchbaseEndpointBuilder\n             extends\n                 AdvancedCouchbaseEndpointConsumerBuilder, AdvancedCouchbaseEndpointProducerBuilder {\n         default CouchbaseEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "2462c82c0ea8766f40cf454c57557a5c63d2c09d", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "     this.baseTaskDir = new File(defaultDir(baseTaskDir, \"persistent/task\"));\n     this.hadoopWorkingPath = hadoopWorkingPath == null ? \"/tmp/druid-indexing\" : hadoopWorkingPath;\n    this.defaultRowFlushBoundary = defaultRowFlushBoundary == null ? 500000 : defaultRowFlushBoundary;\n     this.defaultHadoopCoordinates = defaultHadoopCoordinates == null\n                                     ? DEFAULT_DEFAULT_HADOOP_COORDINATES\n                                     : defaultHadoopCoordinates;", "fixed": "     this.baseTaskDir = new File(defaultDir(baseTaskDir, \"persistent/task\"));\n     this.hadoopWorkingPath = hadoopWorkingPath == null ? \"/tmp/druid-indexing\" : hadoopWorkingPath;\n    this.defaultRowFlushBoundary = defaultRowFlushBoundary == null ? 75000 : defaultRowFlushBoundary;\n     this.defaultHadoopCoordinates = defaultHadoopCoordinates == null\n                                     ? DEFAULT_DEFAULT_HADOOP_COORDINATES\n                                     : defaultHadoopCoordinates;", "sourceBeforeFix": "defaultRowFlushBoundary == null ? 500000 : defaultRowFlushBoundary", "sourceAfterFix": "defaultRowFlushBoundary == null ? 75000 : defaultRowFlushBoundary"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "fixed": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     private static final String DELTA= \"void delta()\";\n     private static final String EPSILON= \"void epsilon()\";\n    private static class Dummy {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     private static final String DELTA= \"void delta()\";\n     private static final String EPSILON= \"void epsilon()\";\n    static class Dummy {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "818764ab9f6ca06949b523f32080719c520c926b", "projectName": "google.closure-compiler", "bugType": "Change Numeric Literal", "problem": " class UnionTypeBuilder implements Serializable {\n   private static final long serialVersionUID = 1L;\n  private static final int DEFAULT_MAX_UNION_SIZE = 20;\n   private final JSTypeRegistry registry;\n   private final List<JSType> alternates = Lists.newArrayList();", "fixed": " class UnionTypeBuilder implements Serializable {\n   private static final long serialVersionUID = 1L;\n  private static final int DEFAULT_MAX_UNION_SIZE = 30;\n   private final JSTypeRegistry registry;\n   private final List<JSType> alternates = Lists.newArrayList();", "sourceBeforeFix": "DEFAULT_MAX_UNION_SIZE=20", "sourceAfterFix": "DEFAULT_MAX_UNION_SIZE=30"}
{"fixCommitSHA1": "0a1836b22646342828e96b1d0e7dad9c8bfdabfe", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         bar.expectedMessageCount(0);\n         MockEndpoint start = getMockEndpoint(\"mock:start\");\nstart.expectedMessageCount(6);\n         template.sendBody(\"activemq:queue:foo\", \"Hello World\");", "fixed": "         bar.expectedMessageCount(0);\n         MockEndpoint start = getMockEndpoint(\"mock:start\");\nstart.expectedMessageCount(7);\n         template.sendBody(\"activemq:queue:foo\", \"Hello World\");", "sourceBeforeFix": "start.expectedMessageCount(6)", "sourceAfterFix": "start.expectedMessageCount(7)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MailEndpointBuilder\n             extends\n                 MailEndpointConsumerBuilder, MailEndpointProducerBuilder {\n         default AdvancedMailEndpointBuilder advanced() {", "fixed": "     \n    public interface MailEndpointBuilder\n             extends\n                 MailEndpointConsumerBuilder, MailEndpointProducerBuilder {\n         default AdvancedMailEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMockEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MockEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMockEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MockEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "fixed": "     }\n     @Override\n    public synchronized void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "b186ed3519d4627f3352aa65db3d8283d1e8beda", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         abstract void processCall(Packet packet, SemaphoreProxy semaphoreProxy, Integer value, boolean flag);\n         public void processCall(Node node, Packet packet) {\n            final SemaphoreProxy semaphoreProxy = (SemaphoreProxy) factory.getSemaphore(packet.name);\n             final Integer value = (Integer) toObject(packet.getValueData());\n             final boolean flag = (Boolean) toObject(packet.getKeyData());\n             processCall(packet, semaphoreProxy, value, flag);", "fixed": "         abstract void processCall(Packet packet, SemaphoreProxy semaphoreProxy, Integer value, boolean flag);\n         public void processCall(Node node, Packet packet) {\n            final SemaphoreProxy semaphoreProxy = (SemaphoreProxy) factory.getOrCreateProxyByName(packet.name);\n             final Integer value = (Integer) toObject(packet.getValueData());\n             final boolean flag = (Boolean) toObject(packet.getKeyData());\n             processCall(packet, semaphoreProxy, value, flag);", "sourceBeforeFix": "factory.getSemaphore(packet.name)", "sourceAfterFix": "factory.getOrCreateProxyByName(packet.name)"}
{"fixCommitSHA1": "76c1a65927e07c951bdadcb309b930babf620cbe", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "        Thread.sleep(1000);\n         transactionTemplate.execute(new TransactionCallback<Object>() {\n             public Object doInTransaction(TransactionStatus status) {", "fixed": "        Thread.sleep(2000);\n         transactionTemplate.execute(new TransactionCallback<Object>() {\n             public Object doInTransaction(TransactionStatus status) {", "sourceBeforeFix": "Thread.sleep(1000)", "sourceAfterFix": "Thread.sleep(2000)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "322fa14393f4ab34e22f0e3ad569afe12415ad1d", "projectName": "naver.pinpoint", "bugType": "Change Numeric Literal", "problem": "             return -1;\r\n         }\r\n         int newId = nextId();\r\n        if (newId > max) {\r\n             throw new IndexOutOfBoundsException(\"size=\" + index.length + \" id=\" + id);\r\n         }\r", "fixed": "             return -1;\r\n         }\r\n         int newId = nextId();\r\n        if (newId >= max) {\n             throw new IndexOutOfBoundsException(\"size=\" + index.length + \" id=\" + id);\r\n         }\r", "sourceBeforeFix": "DEFAULT_MAX=1024", "sourceAfterFix": "DEFAULT_MAX=4096"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastQueueEndpointBuilder\n             extends\n                 AdvancedHazelcastQueueEndpointConsumerBuilder, AdvancedHazelcastQueueEndpointProducerBuilder {\n         default HazelcastQueueEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastQueueEndpointBuilder\n             extends\n                 AdvancedHazelcastQueueEndpointConsumerBuilder, AdvancedHazelcastQueueEndpointProducerBuilder {\n         default HazelcastQueueEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a37ff1aed07d334d9a8808558c1498d274fbb6a6", "projectName": "gephi.gephi", "bugType": "Change Numeric Literal", "problem": "     private Color color = new Color(0.6f, 0.6f, 0.6f);\n    private float size = 1f;\n     public ActionsToolbar() {\n         initDesign();", "fixed": "     private Color color = new Color(0.6f, 0.6f, 0.6f);\n    private float size = 10.0f;\n     public ActionsToolbar() {\n         initDesign();", "sourceBeforeFix": "size=1f", "sourceAfterFix": "size=10.0f"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "         parent.getRegionName(), rowContent, COL_SPLITB);\n     if (!hasReferencesA && !hasReferencesB) {\n      LOG.info(\"Deleting region \" + parent.getRegionName() +\n         \" because daughter splits no longer hold references\");\n       HRegion.deleteRegion(master.fs, master.rootdir, parent);", "fixed": "         parent.getRegionName(), rowContent, COL_SPLITB);\n     if (!hasReferencesA && !hasReferencesB) {\n      LOG.info(\"Deleting region \" + parent.getRegionNameAsString() +\n         \" because daughter splits no longer hold references\");\n       HRegion.deleteRegion(master.fs, master.rootdir, parent);", "sourceBeforeFix": "info.getRegionName()", "sourceAfterFix": "info.getRegionNameAsString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "3c136fbd9f79b179f010322aff8ed2b829209db8", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n        assertEquals(fc, fc2);\n     }\n     @Test", "fixed": "         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n        assertEquals(fc2, fc);\n     }\n     @Test", "sourceBeforeFix": "assertEquals(fc,fc2)", "sourceAfterFix": "assertEquals(fc2,fc)"}
{"fixCommitSHA1": "5cdfcd29a2d89e658f5f37aad3deb6130eeb47af", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public WebSocket write(String s) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendString(s);\n         return this;\n     }\n     @Override\n     public WebSocket write(byte[] b, int offset, int length) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b, offset, length));\n         return this;\n     }", "fixed": "     @Override\n     public WebSocket write(String s) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendStringByFuture(s);\n         return this;\n     }\n     @Override\n     public WebSocket write(byte[] b, int offset, int length) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b, offset, length));\n         return this;\n     }", "sourceBeforeFix": "webSocketConnection.getRemote().sendString(s)", "sourceAfterFix": "webSocketConnection.getRemote().sendStringByFuture(s)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFtpsEndpointBuilder\n             extends\n                 AdvancedFtpsEndpointConsumerBuilder, AdvancedFtpsEndpointProducerBuilder {\n         default FtpsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFtpsEndpointBuilder\n             extends\n                 AdvancedFtpsEndpointConsumerBuilder, AdvancedFtpsEndpointProducerBuilder {\n         default FtpsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e60c32d2f4826f2d0e7ef41acad13f0d6bac4d35", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     log.trace(\"URL from classloader: \" + url);\n                 }\n                url = customerResourceLocator(url);\n                 String urlPath = url.getFile();\n                 urlPath = URLDecoder.decode(urlPath, \"UTF-8\");", "fixed": "                     log.trace(\"URL from classloader: \" + url);\n                 }\n                url = customResourceLocator(url);\n                 String urlPath = url.getFile();\n                 urlPath = URLDecoder.decode(urlPath, \"UTF-8\");", "sourceBeforeFix": "customerResourceLocator(url)", "sourceAfterFix": "customResourceLocator(url)"}
{"fixCommitSHA1": "c4fde52160773dca18bad002589957880b0aeeb3", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "              .addData(\"taskId\", task.getId())\n              .addData(\"dataSource\", task.getDataSource())\n              .emit();\n          log.warn(e, \"Graceful shutdown of task[%s] aborted with exception.\");\n           error = true;\n         }\n       } else {", "fixed": "              .addData(\"taskId\", task.getId())\n              .addData(\"dataSource\", task.getDataSource())\n              .emit();\n          log.warn(e, \"Graceful shutdown of task[%s] aborted with exception.\", task.getId());\n           error = true;\n         }\n       } else {", "sourceBeforeFix": "log.warn(e,\"Graceful shutdown of task[%s] aborted with exception.\")", "sourceAfterFix": "log.warn(e,\"Graceful shutdown of task[%s] aborted with exception.\",task.getId())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFacebookEndpointBuilder\n             extends\n                 AdvancedFacebookEndpointConsumerBuilder, AdvancedFacebookEndpointProducerBuilder {\n         default FacebookEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFacebookEndpointBuilder\n             extends\n                 AdvancedFacebookEndpointConsumerBuilder, AdvancedFacebookEndpointProducerBuilder {\n         default FacebookEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomixQueueEndpointBuilder\n             extends\n                 AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {\n         default AtomixQueueEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomixQueueEndpointBuilder\n             extends\n                 AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {\n         default AtomixQueueEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3d732616366b93a75351f4f43ecaa80d2d544abe", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "         if (!root.exists()) {\n           if (startOpt != StartupOption.FORMAT) {\n            LOG.info(\"Storage directory \" + rootPath + \" does not exist\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");", "fixed": "         if (!root.exists()) {\n           if (startOpt != StartupOption.FORMAT) {\n            LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");", "sourceBeforeFix": "LOG.info(rootPath + \"is not a directory\")", "sourceAfterFix": "LOG.warn(rootPath + \"is not a directory\")"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"redis\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"redis\")"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "sourceBeforeFix": "result.expectedMessageCount(2)", "sourceAfterFix": "result.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d79d8da2ff4ed76577133e5d0da796d9e2642e40", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "     private final Block values;\n     private final int[] offsets;\n    private long sizeInBytes;\n     private final long retainedSizeInBytes;\n     public ArrayBlock(int positionCount, boolean[] valueIsNull, int[] offsets, Block values)", "fixed": "     private final Block values;\n     private final int[] offsets;\n    private volatile long sizeInBytes;\n     private final long retainedSizeInBytes;\n     public ArrayBlock(int positionCount, boolean[] valueIsNull, int[] offsets, Block values)", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "ed13d3007bbe9cb7df8641d2e287bf94c314fb86", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "             return false;\n         }\n        long newReservation = memoryReservation.getAndAdd(bytes);\n         if (newReservation > maxMemoryReservation) {\n             memoryReservation.getAndAdd(-bytes);\n             return false;", "fixed": "             return false;\n         }\n        long newReservation = memoryReservation.addAndGet(bytes);\n         if (newReservation > maxMemoryReservation) {\n             memoryReservation.getAndAdd(-bytes);\n             return false;", "sourceBeforeFix": "memoryReservation.getAndAdd(bytes)", "sourceAfterFix": "memoryReservation.addAndGet(bytes)"}
{"fixCommitSHA1": "4e5679100979b451b8ced187c19fa53f92536e6f", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     sClientMetrics = new ClientMetrics();\n     if (sExecutorService != null) {\n      sExecutorService.shutdown();\n     }\n     sExecutorService = Executors.newFixedThreadPool(\n         sTachyonConf.getInt(Constants.USER_BLOCK_WORKER_CLIENT_THREADS),", "fixed": "     sClientMetrics = new ClientMetrics();\n     if (sExecutorService != null) {\n      sExecutorService.shutdownNow();\n     }\n     sExecutorService = Executors.newFixedThreadPool(\n         sTachyonConf.getInt(Constants.USER_BLOCK_WORKER_CLIENT_THREADS),", "sourceBeforeFix": "sExecutorService.shutdown()", "sourceAfterFix": "sExecutorService.shutdownNow()"}
{"fixCommitSHA1": "af87fe0e2580cafb6b563688f119b3d40ae100f2", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "fixed": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddressNode1(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xdf", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SshEndpointBuilder\n             extends\n                 SshEndpointConsumerBuilder, SshEndpointProducerBuilder {\n         default AdvancedSshEndpointBuilder advanced() {", "fixed": "     \n    public interface SshEndpointBuilder\n             extends\n                 SshEndpointConsumerBuilder, SshEndpointProducerBuilder {\n         default AdvancedSshEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password);\n     @GET\n     @Path(\"/logout\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password) throws Exception;\n     @GET\n     @Path(\"/logout\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "315a7ab26e5b9cbe1aba47ed1c574c0630be8248", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "                 }\n             }\n             if (requiredMessageListener == null) {\n                throw MESSAGES.unknownMessageListenerType(resourceAdapterName, messageListenerInterface.getName());\n             }\n             final Activation activation = requiredMessageListener.getActivation();", "fixed": "                 }\n             }\n             if (requiredMessageListener == null) {\n                throw MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(), resourceAdapterName);\n             }\n             final Activation activation = requiredMessageListener.getActivation();", "sourceBeforeFix": "MESSAGES.unknownMessageListenerType(resourceAdapterName,messageListenerInterface.getName())", "sourceAfterFix": "MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(),resourceAdapterName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {\n         long totalMessages = 50;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "fixed": "     public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {\n         long totalMessages = 50;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "5f78aa9c52a2f28419a5fa646ab28ee273e17e6a", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "         }\n     }\n    public void unblock(Address address) {\n         blockedAddresses.remove(address);\n         Connection connection = getConnection(address);\n         if (connection instanceof DroppingConnection) {", "fixed": "         }\n     }\n    public synchronized void unblock(Address address) {\n         blockedAddresses.remove(address);\n         Connection connection = getConnection(address);\n         if (connection instanceof DroppingConnection) {", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "fixed": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "da067cd627411116af86c4e5f4bb8d105eb75a40", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Identifier Used", "problem": "     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n     @Test\n    public void matches_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(8L)));\n        assertTrue(predicate.apply(pickleEvent));\n     }\n     @Test", "fixed": "     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n     @Test\n    public void does_not_match_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(4L)));\n        assertFalse(predicate.apply(pickleEvent));\n     }\n     @Test", "sourceBeforeFix": "assertTrue(predicate.apply(pickleEvent))", "sourceAfterFix": "assertFalse(predicate.apply(pickleEvent))"}
{"fixCommitSHA1": "cb84b2788aeed6aad2bc4b1acb98290e060861e2", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "fixed": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "sourceBeforeFix": "ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())", "sourceAfterFix": "ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2c3e641f9f9b847eb609a575107ad67a63edc09b", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n                    ClientConnection current = connections.putIfAbsent(address, clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;", "fixed": "                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n                    ClientConnection current = connections.putIfAbsent(clientConnection.getRemoteEndpoint(), clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;", "sourceBeforeFix": "getLock(address)", "sourceAfterFix": "getLock(target)"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * @param isStatic\n          *        if import is static.\n          */\n        public void setStaticImport(boolean isStatic) {\n             this.staticImport = isStatic;\n         }\n     }", "fixed": "          * @param isStatic\n          *        if import is static.\n          */\n        public final void setStaticImport(boolean isStatic) {\n             this.staticImport = isStatic;\n         }\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dd0a8cd787be7a33774c9f659562d2f5c6254931", "projectName": "NanoHttpd.nanohttpd", "bugType": "Wrong Function Name", "problem": "     private String findIndexFileInDirectory(File directory) {\n         for (String fileName : SimpleWebServer.INDEX_FILE_NAMES) {\n             File indexFile = new File(directory, fileName);\n            if (indexFile.exists()) {\n                 return fileName;\n             }\n         }", "fixed": "     private String findIndexFileInDirectory(File directory) {\n         for (String fileName : SimpleWebServer.INDEX_FILE_NAMES) {\n             File indexFile = new File(directory, fileName);\n            if (indexFile.isFile()) {\n                 return fileName;\n             }\n         }", "sourceBeforeFix": "indexFile.exists()", "sourceAfterFix": "indexFile.isFile()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertFalse(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "fixed": "         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "464e20480e8c188d6dcae7dbce2b9c5098d3584f", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Same Function Swap Args", "problem": "             future.get();\n             future.addListener(() -> counter.decrementAndGet(), Runnable::run);\n         }\n        assertEquals(0, counter.get());\n     }\n     @Test(groups = \"standalone\")", "fixed": "             future.get();\n             future.addListener(() -> counter.decrementAndGet(), Runnable::run);\n         }\n        assertEquals(counter.get(), 0);\n     }\n     @Test(groups = \"standalone\")", "sourceBeforeFix": "assertEquals(0,counter.get())", "sourceAfterFix": "assertEquals(counter.get(),0)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "f10bf59e6ecf33a0dc996b884e486e42e9241853", "projectName": "apache.hadoop", "bugType": "Change Numeric Literal", "problem": "     int cleanedSize = cleaned.size();\n     waitCount = 0;\n     while (cleanedSize < allocatedSize && waitCount++ < 200) {\n      Thread.sleep(100);\n       resp = nm.nodeHeartbeat(true);\n       cleaned = resp.getContainersToCleanup();\n       cleanedSize += cleaned.size();", "fixed": "     int cleanedSize = cleaned.size();\n     waitCount = 0;\n     while (cleanedSize < allocatedSize && waitCount++ < 200) {\n      Thread.sleep(300);\n       resp = nm.nodeHeartbeat(true);\n       cleaned = resp.getContainersToCleanup();\n       cleanedSize += cleaned.size();", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(300)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "fd3e0ff191f3e26b09f52f538748133b65f40740", "projectName": "apache.hbase", "bugType": "Change Operand ", "problem": "       if (expMsg.contains(\"No FileSystem for scheme\")) {\n         newMsg =\n             \"Unsupported filesystem scheme found in the backup target url. Error Message: \"\n                + newMsg;\n         LOG.error(newMsg);\n         throw new IOException(newMsg);\n       } else {", "fixed": "       if (expMsg.contains(\"No FileSystem for scheme\")) {\n         newMsg =\n             \"Unsupported filesystem scheme found in the backup target url. Error Message: \"\n                + expMsg;\n         LOG.error(newMsg);\n         throw new IOException(newMsg);\n       } else {", "sourceBeforeFix": "\"Unsupported filesystem scheme found in the backup target url. Error Message: \" + newMsg", "sourceAfterFix": "\"Unsupported filesystem scheme found in the backup target url. Error Message: \" + expMsg"}
{"fixCommitSHA1": "dbb575b5861a30bd4ab660603c671441abb3f2cf", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "             currSectionCoreMap.set(CoreAnnotations.AuthorAnnotation.class, foundAuthor);\n             Pattern p = Pattern.compile(foundAuthor);\n            Matcher matcher = p.matcher(sectionStartToken.word());\n             if (matcher.find()) {\n               int authorMentionStart = matcher.start() + sectionStartTagCharBegin;\n               int authorMentionEnd = matcher.end() + sectionStartTagCharBegin;", "fixed": "             currSectionCoreMap.set(CoreAnnotations.AuthorAnnotation.class, foundAuthor);\n             Pattern p = Pattern.compile(foundAuthor);\n            Matcher matcher = p.matcher(sectionStartTagToken.word());\n             if (matcher.find()) {\n               int authorMentionStart = matcher.start() + sectionStartTagCharBegin;\n               int authorMentionEnd = matcher.end() + sectionStartTagCharBegin;", "sourceBeforeFix": "sectionStartToken.word()", "sourceAfterFix": "sectionStartTagToken.word()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL11.glGetFloat(pname,params)", "sourceAfterFix": "GL11.glGetFloatv(pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JGroupsEndpointBuilder\n             extends\n                 JGroupsEndpointConsumerBuilder, JGroupsEndpointProducerBuilder {\n         default AdvancedJGroupsEndpointBuilder advanced() {", "fixed": "     \n    public interface JGroupsEndpointBuilder\n             extends\n                 JGroupsEndpointConsumerBuilder, JGroupsEndpointProducerBuilder {\n         default AdvancedJGroupsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "config.set(KeyProviderFactory.KEY_PROVIDER_PATH, \"user:\n     ks.setConf(config);\n     rc = ks.run(args1);\n    assertEquals(-1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "fixed": "config.set(KeyProviderFactory.KEY_PROVIDER_PATH, \"user:\n     ks.setConf(config);\n     rc = ks.run(args1);\n    assertEquals(1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<EdgeModel> getSelectedEdges() {\n         List<EdgeModel> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<EdgeModel> getSelectedEdges() {\n         List<EdgeModel> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "95cb60790924d1df7e4e2f091a368c22c02852e3", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * group.\n      * @author max\n      */\n    class ImportDetails\n     {\n         \n         private String importFullPath;", "fixed": "      * group.\n      * @author max\n      */\n    static class ImportDetails\n     {\n         \n         private String importFullPath;", "sourceBeforeFix": "0", "sourceAfterFix": "8"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;\");\n         } else if (propertyClass == float.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;\");\n         } else if (propertyClass == float.class) {", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"fixCommitSHA1": "1a89a3fedeff90da5fa2e62fa49b26bfd8ec7f24", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       return HConstants.NORMAL_QOS;\n     }\nif (methodName.equals(\"scan\")) {\n       ScanRequest request = (ScanRequest)param;\n       if (!request.hasScannerId()) {\n         return HConstants.NORMAL_QOS;", "fixed": "       return HConstants.NORMAL_QOS;\n     }\nif (methodName.equalsIgnoreCase(\"scan\")) {\n       ScanRequest request = (ScanRequest)param;\n       if (!request.hasScannerId()) {\n         return HConstants.NORMAL_QOS;", "sourceBeforeFix": "methodName.equals(\"scan\")", "sourceAfterFix": "methodName.equalsIgnoreCase(\"scan\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "509beae1e2d9a01e952f9eaf0c4a88037076fc63", "projectName": "apache.hbase", "bugType": "Missing Throws Exception", "problem": "   @Override\n  public void openRegion(HRegionInfo region) {\n     LOG.info(\"Received request to open region: \" +\n       region.getRegionNameAsString());\n     if (this.stopped) throw new RegionServerStoppedException();", "fixed": "   @Override\n  public void openRegion(HRegionInfo region)\n  throws RegionServerStoppedException {\n     LOG.info(\"Received request to open region: \" +\n       region.getRegionNameAsString());\n     if (this.stopped) throw new RegionServerStoppedException();", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     span.log(fields);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n             return message;\n         }", "fixed": "                     span.log(fields);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n             return message;\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtmosphereWebsocketEndpointBuilder\n             extends\n                 AtmosphereWebsocketEndpointConsumerBuilder, AtmosphereWebsocketEndpointProducerBuilder {\n         default AdvancedAtmosphereWebsocketEndpointBuilder advanced() {", "fixed": "     \n    public interface AtmosphereWebsocketEndpointBuilder\n             extends\n                 AtmosphereWebsocketEndpointConsumerBuilder, AtmosphereWebsocketEndpointProducerBuilder {\n         default AdvancedAtmosphereWebsocketEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}
{"fixCommitSHA1": "a4c66dc2824221d05e1fcfd54e4f1f4e2c125c40", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                 cancelledKeys = 0;\n                runAllTasks();\n                 selector = this.selector;\n                processSelectedKeys();\n                 selector = this.selector;\n                 if (isShutdown()) {", "fixed": "                 cancelledKeys = 0;\n                processSelectedKeys();\n                 selector = this.selector;\n                runAllTasks();\n                 selector = this.selector;\n                 if (isShutdown()) {", "sourceBeforeFix": "processSelectedKeys()", "sourceAfterFix": "runAllTasks()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "91aa3b2ca0c43b66747d7926e34fae38ef030efa", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "             } else if (\"directed\".equalsIgnoreCase(key)) {\n                 if (value instanceof Double) {\n                     EdgeDirection type = ((Double) value) == 1 ? EdgeDirection.DIRECTED : EdgeDirection.UNDIRECTED;\n                    edge.setType(type);\n                 } else {\n                     report.logIssue(new Issue(NbBundle.getMessage(ImporterGML.class, \"importerGML_error_directedparse\", edge.toString()), Issue.Level.WARNING));\n                 }", "fixed": "             } else if (\"directed\".equalsIgnoreCase(key)) {\n                 if (value instanceof Double) {\n                     EdgeDirection type = ((Double) value) == 1 ? EdgeDirection.DIRECTED : EdgeDirection.UNDIRECTED;\n                    edge.setDirection(type);\n                 } else {\n                     report.logIssue(new Issue(NbBundle.getMessage(ImporterGML.class, \"importerGML_error_directedparse\", edge.toString()), Issue.Level.WARNING));\n                 }", "sourceBeforeFix": "edge.setType(type)", "sourceAfterFix": "edge.setDirection(type)"}
{"fixCommitSHA1": "04ad420f594bedd8cd5c40160d67585f70686a9c", "projectName": "aws.aws-sdk-java", "bugType": "Change Identifier Used", "problem": "                 try {\n                     return unmarshaller.unmarshall(jsonContent.jsonNode);\n                 } catch (Exception e) {\n                    LOG.error(\"Unable to unmarshall exception content\", e);\n                     return null;\n                 }\n             }", "fixed": "                 try {\n                     return unmarshaller.unmarshall(jsonContent.jsonNode);\n                 } catch (Exception e) {\n                    LOG.info(\"Unable to unmarshall exception content\", e);\n                     return null;\n                 }\n             }", "sourceBeforeFix": "LOG.error(\"Unable to unmarshall exception content\",e)", "sourceAfterFix": "LOG.info(\"Unable to unmarshall exception content\",e)"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n\t\tthis.container = factory.getEmbdeddedServletContainer();\nassertThat(getResponse(\"http:\n \t}", "fixed": " \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n\t\tthis.container = factory.getEmbeddedServletContainer();\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "4f952dac30892ce9458bee0403d908ee642c4481", "projectName": "wildfly.wildfly", "bugType": "Change Boolean Literal", "problem": "                     .setXmlName(Attribute.MODE.getLocalName())\n                     .setAllowExpression(true)\n                     .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n                    .setValidator(new EnumValidator<TransactionMode>(TransactionMode.class, true, false))\n                     .setDefaultValue(new ModelNode().set(TransactionMode.NONE.name()))\n                     .build();\n     SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE =", "fixed": "                     .setXmlName(Attribute.MODE.getLocalName())\n                     .setAllowExpression(true)\n                     .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n                    .setValidator(new EnumValidator<TransactionMode>(TransactionMode.class, true, true))\n                     .setDefaultValue(new ModelNode().set(TransactionMode.NONE.name()))\n                     .build();\n     SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE =", "sourceBeforeFix": "new EnumValidator<TransactionMode>(TransactionMode.class,true,false)", "sourceAfterFix": "new EnumValidator<TransactionMode>(TransactionMode.class,true,true)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "c465bf58aa9b067eacab42b336530638f63ad420", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 return group.id();\n             }\n            String msg = group.getId() + \" already exists with a different size: \" + group.memberCount();\n             logger.severe(msg);\n             throw new IllegalStateException(msg);\n         }", "fixed": "                 return group.id();\n             }\n            String msg = group.id() + \" already exists with a different size: \" + group.memberCount();\n             logger.severe(msg);\n             throw new IllegalStateException(msg);\n         }", "sourceBeforeFix": "group.getId()", "sourceAfterFix": "group.id()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMicrometerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MicrometerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMicrometerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MicrometerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "     DomainControllerLogger HOST_CONTROLLER_LOGGER = Logger.getMessageLogger(DomainControllerLogger.class, \"org.jboss.as.host.controller\");\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15800, value = \"Ignoring 'include' child of 'socket-binding-group' %s\")\n     void warnIgnoringSocketBindingGroupInclude(Location location);\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15801, value = \"Ignoring 'include' child of 'profile' %s\")\n     void warnIgnoringProfileInclude(Location location);\n     /**", "fixed": "     DomainControllerLogger HOST_CONTROLLER_LOGGER = Logger.getMessageLogger(DomainControllerLogger.class, \"org.jboss.as.host.controller\");\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10800, value = \"Ignoring 'include' child of 'socket-binding-group' %s\")\n     void warnIgnoringSocketBindingGroupInclude(Location location);\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10801, value = \"Ignoring 'include' child of 'profile' %s\")\n     void warnIgnoringProfileInclude(Location location);\n     /**", "sourceBeforeFix": "id=15809", "sourceAfterFix": "id=10809"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CassandraEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCassandraEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CassandraEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCassandraEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5e7873ebd45790d9d72eb9d312de4611dc97f796", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "     assertEquals(0, historyService.createHistoricActivityInstanceQuery().processInstanceId(\"nonExistingProcessInstanceId\").list().size());\n     if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {\n      assertEquals(2, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());\n     } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {\n      assertEquals(1, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());\n     } else {\n       assertEquals(0, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());\n     }", "fixed": "     assertEquals(0, historyService.createHistoricActivityInstanceQuery().processInstanceId(\"nonExistingProcessInstanceId\").list().size());\n     if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {\n      assertEquals(3, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());\n     } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {\n      assertEquals(3, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());\n     } else {\n       assertEquals(0, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());\n     }", "sourceBeforeFix": "assertEquals(2,historyService.createHistoricActivityInstanceQuery().finished().list().size())", "sourceAfterFix": "assertEquals(3,historyService.createHistoricActivityInstanceQuery().finished().list().size())"}
{"fixCommitSHA1": "72754c27b271416d3c8ee7497fa7f88abff393f8", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t * @param dataSource the underlying data source\n \t * @param entityManagerFactory the entity manager factory (or {@code null})\n \t */\n\tBasicBatchConfigurer(BatchProperties properties, DataSource dataSource,\n \t\t\tEntityManagerFactory entityManagerFactory) {\n \t\tthis.properties = properties;\n \t\tthis.entityManagerFactory = entityManagerFactory;", "fixed": " \t * @param dataSource the underlying data source\n \t * @param entityManagerFactory the entity manager factory (or {@code null})\n \t */\n\tprotected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource,\n \t\t\tEntityManagerFactory entityManagerFactory) {\n \t\tthis.properties = properties;\n \t\tthis.entityManagerFactory = entityManagerFactory;", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJt400EndpointBuilder\n             extends\n                 AdvancedJt400EndpointConsumerBuilder, AdvancedJt400EndpointProducerBuilder {\n         default Jt400EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJt400EndpointBuilder\n             extends\n                 AdvancedJt400EndpointConsumerBuilder, AdvancedJt400EndpointProducerBuilder {\n         default Jt400EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "fixed": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "fb9b3fcb0ef1794b9a5646f3912cc8eeb4b120f1", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "     @Configuration\n     public static Option[] configure() {\n        return configure(COMPONENT);\n     }\n }\n\\ No newline at end of file", "fixed": "     @Configuration\n     public static Option[] configure() {\n        return configure(COMPONENT, \"cxf-jaxb\");\n     }\n }\n\\ No newline at end of file", "sourceBeforeFix": "configure(COMPONENT)", "sourceAfterFix": "configure(COMPONENT,\"cxf-jaxb\")"}
{"fixCommitSHA1": "e1626ef3aeecb1ccf7acf4056fb7bcf23243be25", "projectName": "apache.hive", "bugType": "Change Numeric Literal", "problem": " public class TestConverters {\n  @Test(timeout = 5000)\n   public void testTaskSpecToFragmentSpec() {\n     ByteBuffer procBb = ByteBuffer.allocate(4);\n     procBb.putInt(0, 200);", "fixed": " public class TestConverters {\n  @Test(timeout = 10000)\n   public void testTaskSpecToFragmentSpec() {\n     ByteBuffer procBb = ByteBuffer.allocate(4);\n     procBb.putInt(0, 200);", "sourceBeforeFix": "timeout=5000", "sourceAfterFix": "timeout=10000"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface OptaPlannerEndpointBuilder\n             extends\n                 OptaPlannerEndpointConsumerBuilder, OptaPlannerEndpointProducerBuilder {\n         default AdvancedOptaPlannerEndpointBuilder advanced() {", "fixed": "     \n    public interface OptaPlannerEndpointBuilder\n             extends\n                 OptaPlannerEndpointConsumerBuilder, OptaPlannerEndpointProducerBuilder {\n         default AdvancedOptaPlannerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KinesisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKinesisEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KinesisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKinesisEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     \n     private static final String ALLOW_ELEMENT_NAME = \"allow\";\n    \n    private final Deque<PkgControl> stack = new ArrayDeque<>();\n     static {\n         DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);", "fixed": "     \n     private static final String ALLOW_ELEMENT_NAME = \"allow\";\n    \n    private final Deque<ImportControl> stack = new ArrayDeque<>();\n     static {\n         DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);", "sourceBeforeFix": "new PkgControl(stack.peek(),name,regex)", "sourceAfterFix": "new ImportControl(stack.peek(),name,regex)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4baf500fc14016bfc22a339c68a4c05050d14a52", "projectName": "brianfrankcooper.YCSB", "bugType": "Change Caller in Function Call", "problem": "     public int read(String table, String key, Set<String> fields,\n             HashMap<String, ByteIterator> result) {\n         if (fields == null) {\n            StringByteIteartor.putAllAsByteIterators(result, jedis.hgetAll(key));\n         }\n         else {\n             String[] fieldArray = (String[])fields.toArray(new String[fields.size()]);", "fixed": "     public int read(String table, String key, Set<String> fields,\n             HashMap<String, ByteIterator> result) {\n         if (fields == null) {\n            StringByteIterator.putAllAsByteIterators(result, jedis.hgetAll(key));\n         }\n         else {\n             String[] fieldArray = (String[])fields.toArray(new String[fields.size()]);", "sourceBeforeFix": "StringByteIteartor.putAllAsByteIterators(result,jedis.hgetAll(key))", "sourceAfterFix": "StringByteIterator.putAllAsByteIterators(result,jedis.hgetAll(key))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 16:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 16:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args)", "sourceAfterFix": "doInvoke(args)"}
{"fixCommitSHA1": "22d5241b5f75631e9cfda82a6912a2555eecb165", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     @Override\n     protected void doStop() throws Exception {\n         if (channel != null) {\n            LOG.trace(\"Terminating channel to the remote gRPC server\");\n             channel.shutdown().shutdownNow();\n             channel = null;\n             grpcStub = null;", "fixed": "     @Override\n     protected void doStop() throws Exception {\n         if (channel != null) {\n            LOG.debug(\"Terminating channel to the remote gRPC server\");\n             channel.shutdown().shutdownNow();\n             channel = null;\n             grpcStub = null;", "sourceBeforeFix": "LOG.info(\"Getting synchronous method stub from channel\")", "sourceAfterFix": "LOG.debug(\"Getting synchronous method stub from channel\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "d41aad3b391de7aeb6b43e16692b974e5a35148e", "projectName": "JakeWharton.ActionBarSherlock", "bugType": "Change Identifier Used", "problem": "             final Object[] params = new Object[] { item };\r\n             try {\r\n                 if (mMethod.getReturnType() == Boolean.TYPE) {\r\n                    return (Boolean)mMethod.invoke(MenuInflater.this, params);\r\n                 }\r\n                 return false;\r\n             } catch (Exception e) {\r", "fixed": "             final Object[] params = new Object[] { item };\r\n             try {\r\n                 if (mMethod.getReturnType() == Boolean.TYPE) {\r\n                    return (Boolean)mMethod.invoke(mContext, params);\r\n                 }\r\n                 return false;\r\n             } catch (Exception e) {\r", "sourceBeforeFix": "mMethod.invoke(MenuInflater.this,params)", "sourceAfterFix": "mMethod.invoke(mContext,params)"}
{"fixCommitSHA1": "e007ca9e7d3692b65de28d1018d2d7f8228ed112", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         }\n         public void shutdown() {\n            channel.close();\n             bossGroup.shutdownGracefully();\n             workerGroup.shutdownGracefully();\n         }", "fixed": "         }\n         public void shutdown() {\n            channel.disconnect();\n             bossGroup.shutdownGracefully();\n             workerGroup.shutdownGracefully();\n         }", "sourceBeforeFix": "channel.close()", "sourceAfterFix": "channel.disconnect()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8b0fec4451e8147bbe5bdbf29d235744c9aca01a", "projectName": "gephi.gephi", "bugType": "Change Binary Operator", "problem": "             nodeE.appendChild(positionXE);\n             Element positionYE = createNodePositionY(document, n);\n             nodeE.appendChild(positionYE);\n            if (minZ != 0f && maxZ != 0f) {\n                 Element positionZE = createNodePositionZ(document, n);\n                 nodeE.appendChild(positionZE);\n             }", "fixed": "             nodeE.appendChild(positionXE);\n             Element positionYE = createNodePositionY(document, n);\n             nodeE.appendChild(positionYE);\n            if (minZ != 0f || maxZ != 0f) {\n                 Element positionZE = createNodePositionZ(document, n);\n                 nodeE.appendChild(positionZE);\n             }", "sourceBeforeFix": "minZ != 0f && maxZ != 0f", "sourceAfterFix": "minZ != 0f || maxZ != 0f"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ade2ef1e23fecc7211fb450ca852bc94fe565e0e", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       currentInodeDirectory.addChild(dir);\n       currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());\n       if (options.isPersisted()) {\n        String ufsPath = mMountTable.resolve(getPath(dir)).getPath();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }", "fixed": "       currentInodeDirectory.addChild(dir);\n       currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());\n       if (options.isPersisted()) {\n        String ufsPath = mMountTable.resolve(getPath(dir)).toString();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }", "sourceBeforeFix": "mMountTable.resolve(getPath(next)).getPath()", "sourceAfterFix": "mMountTable.resolve(getPath(next)).toString()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username);\n     @GET\n     @Path(\"/{username}\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username) throws Exception;\n     @GET\n     @Path(\"/{username}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "22d5241b5f75631e9cfda82a6912a2555eecb165", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         }\n         if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.info(\"Building gRPC server on \" + configuration.getHost() + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));\n         } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.info(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forPort(configuration.getPort());\n         } else {\n             throw new IllegalArgumentException(\"No server start properties (host, port) specified\");", "fixed": "         }\n         if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.debug(\"Building gRPC server on \" + configuration.getHost() + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));\n         } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.debug(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forPort(configuration.getPort());\n         } else {\n             throw new IllegalArgumentException(\"No server start properties (host, port) specified\");", "sourceBeforeFix": "LOG.info(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort())", "sourceAfterFix": "LOG.debug(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N oppositeNode(Object edge) {\n     return checkNotNull(incidentEdgeMap.get(edge));\n   }\n   @Override\n  public N removeInEdge(Object edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "fixed": "   }\n   @Override\n  public N adjacentNode(E edge) {\n     return checkNotNull(incidentEdgeMap.get(edge));\n   }\n   @Override\n  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"diskspace\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"diskspace\")"}
{"fixCommitSHA1": "1f680192fefd2fde7f5e10fb1a34792a50e3246c", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Operand ", "problem": "      */\n     \n     public boolean hasResponseStatus() {\n        return (bodyParts != null ? true : false);\n     }\n     /**", "fixed": "      */\n     \n     public boolean hasResponseStatus() {\n        return (status != null ? true : false);\n     }\n     /**", "sourceBeforeFix": "bodyParts != null", "sourceAfterFix": "status != null"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "2a88a3de65a60011e86c05a4eb31182521fc4544", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "             logger.debug(\"Asynchronous invocation. asyncContext={}\", asyncContext);\n         }\n        final Trace trace = asyncContext.continueAsyncTraceObject();\n         if (trace == null) {\n             return;\n         }", "fixed": "             logger.debug(\"Asynchronous invocation. asyncContext={}\", asyncContext);\n         }\n        final Trace trace = asyncContext.currentAsyncTraceObject();\n         if (trace == null) {\n             return;\n         }", "sourceBeforeFix": "asyncContext.continueAsyncTraceObject()", "sourceAfterFix": "asyncContext.currentAsyncTraceObject()"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "fixed": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "sourceBeforeFix": "logger.debug(\"Invalid Account Credentials\")", "sourceAfterFix": "logger.trace(\"Invalid Account Credentials\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "09998d1155cda1399a7624c7ed79b4611d974c4b", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n\t@UnrelatedOne\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \t}", "fixed": " \t}\n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n\t@UnrelatedTwo\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \t}", "sourceBeforeFix": "ImportAutoConfigurationWithItemsOne.class", "sourceAfterFix": "ImportAutoConfigurationWithItemsTwo.class"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Advanced builder for endpoint for the Kubernetes Persistent Volume Claim\n      * component.\n      */\n    public static interface AdvancedKubernetesPersistentVolumesClaimsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KubernetesPersistentVolumesClaimsEndpointBuilder basic() {", "fixed": "      * Advanced builder for endpoint for the Kubernetes Persistent Volume Claim\n      * component.\n      */\n    public interface AdvancedKubernetesPersistentVolumesClaimsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KubernetesPersistentVolumesClaimsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "fae9ab4140b56123177d498845b738b3bb53808d", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": " \t\tthis.context.refresh();\n \t\tassertNotNull(this.context.getBean(AuthenticationManagerBuilder.class));\n\t\tassertEquals(9, this.context.getBean(FilterChainProxy.class).getFilterChains()\n \t\t\t\t.size());\n \t}", "fixed": " \t\tthis.context.refresh();\n \t\tassertNotNull(this.context.getBean(AuthenticationManagerBuilder.class));\n\t\tassertEquals(8, this.context.getBean(FilterChainProxy.class).getFilterChains()\n \t\t\t\t.size());\n \t}", "sourceBeforeFix": "assertEquals(9,this.context.getBean(FilterChainProxy.class).getFilterChains().size())", "sourceAfterFix": "assertEquals(8,this.context.getBean(FilterChainProxy.class).getFilterChains().size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @param candidate The candidate to check.\n \t * @return True, if the candidate is equal to the reference, false otherwise.\n \t */\n\tpublic boolean equalToReference(T2 candidate);\n\tpublic int compareToReference(T2 candidate);\n }", "fixed": " \t * @param candidate The candidate to check.\n \t * @return True, if the candidate is equal to the reference, false otherwise.\n \t */\n\tpublic abstract boolean equalToReference(T2 candidate);\n\tpublic abstract int compareToReference(T2 candidate);\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "             logger.debug(\"Active clients {}\", activeClients());\n         }\n        long now = System.nanoTime();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {", "fixed": "             logger.debug(\"Active clients {}\", activeClients());\n         }\n        long now = System.currentTimeMillis();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {", "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "31a360700bc11b55dc64e89c7b6f8b660b50bddb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     }\n     protected List<ResultMessageSummary> resultMessageListtoValueList(List<ResultMessage> resultMessages) {\n        final List<ResultMessageSummary> result = Lists.newArrayListWithExpectedSize(resultMessages.size());\n         for (ResultMessage resultMessage : resultMessages) {\n             result.add(ResultMessageSummary.create(resultMessage.highlightRanges, resultMessage.getMessage(), resultMessage.getIndex()));", "fixed": "     }\n     protected List<ResultMessageSummary> resultMessageListtoValueList(List<ResultMessage> resultMessages) {\n        final List<ResultMessageSummary> result = Lists.newArrayListWithCapacity(resultMessages.size());\n         for (ResultMessage resultMessage : resultMessages) {\n             result.add(ResultMessageSummary.create(resultMessage.highlightRanges, resultMessage.getMessage(), resultMessage.getIndex()));", "sourceBeforeFix": "Lists.newArrayListWithExpectedSize(resultMessages.size())", "sourceAfterFix": "Lists.newArrayListWithCapacity(resultMessages.size())"}
{"fixCommitSHA1": "a536b4a6a33b85f40af44fca53b33d8c0d8656a1", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": "if (itemMap.getSoapValueParser() == null) {\n             NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());\n            if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n                 value = nlDataOutNodes.item(0).getTextContent();\n             } else {", "fixed": "if (itemMap.getSoapValueParser() == null) {\n             NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());\n            if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                 value = nlDataOutNodes.item(0).getTextContent();\n             } else {", "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0", "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean mouseMoved (int screenX, int screenY) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].mouseMoved(screenX, screenY)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean mouseMoved (int screenX, int screenY) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).mouseMoved(screenX, screenY)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "144599323abb2666d2226773d46a2cc26faa83ec", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "     @Override\n     public AsyncSupport complete(AtmosphereResourceImpl r) {\n         try {\n            HttpEvent event = (HttpEvent) r.getRequest().getAttribute(HTTP_EVENT);\n             if (event != null) {\n                 event.close();", "fixed": "     @Override\n     public AsyncSupport complete(AtmosphereResourceImpl r) {\n         try {\n            HttpEvent event = (HttpEvent) r.getRequest(false).getAttribute(HTTP_EVENT);\n             if (event != null) {\n                 event.close();", "sourceBeforeFix": "r.getRequest()", "sourceAfterFix": "r.getRequest(false)"}
{"fixCommitSHA1": "3841ff0cd87dd048dff43379df81153ed9bcf265", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 5000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "fixed": "     @Test\n     public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 10000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}
{"fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Identifier Used", "problem": "         RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);\n         RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();\n        assertFalse(runtimeOptions.isMonochrome());\n     }", "fixed": "         RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);\n         RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();\n        assertTrue(runtimeOptions.isMonochrome());\n     }", "sourceBeforeFix": "assertFalse(runtimeOptions.isMonochrome())", "sourceAfterFix": "assertTrue(runtimeOptions.isMonochrome())"}
{"fixCommitSHA1": "b641b46db4f01fdbbce2fe6d544cca4b4b27b3b5", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Same Function Swap Args", "problem": "         String ha2 = getMd5(method + \":\" + uri.getPath());\n         String expectedResponse = getMd5(ha1 + \":\" + nonce + \":\" + nc + \":\" + cnonce + \":\" + qop + \":\" + ha2);\n        assertEquals(expectedResponse, orig.getResponse());\n     }\n     private String getMd5(String what) {", "fixed": "         String ha2 = getMd5(method + \":\" + uri.getPath());\n         String expectedResponse = getMd5(ha1 + \":\" + nonce + \":\" + nc + \":\" + cnonce + \":\" + qop + \":\" + ha2);\n        assertEquals(orig.getResponse(), expectedResponse);\n     }\n     private String getMd5(String what) {", "sourceBeforeFix": "assertEquals(expectedResponse,orig.getResponse())", "sourceAfterFix": "assertEquals(orig.getResponse(),expectedResponse)"}
{"fixCommitSHA1": "d7bdd87355d4c5b9d3145210eb25e7695decb9f9", "projectName": "alibaba.fastjson", "bugType": "Change Operand ", "problem": "         boolean isDoubleA = isDouble(clazzA);\n         boolean isDoubleB = isDouble(clazzB);\n        if ((isDoubleA && isDoubleB) || (isDoubleA && isIntA) || (isDoubleB && isIntA)) {\n             return a.doubleValue() == b.doubleValue();\n         }", "fixed": "         boolean isDoubleA = isDouble(clazzA);\n         boolean isDoubleB = isDouble(clazzB);\n        if ((isDoubleA && isDoubleB) || (isDoubleA && isIntB) || (isDoubleB && isIntA)) {\n             return a.doubleValue() == b.doubleValue();\n         }", "sourceBeforeFix": "isDoubleA && isIntA", "sourceAfterFix": "isDoubleA && isIntB"}
{"fixCommitSHA1": "7e040c094576463ec6324d012cbad8768ce3d767", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "     final long callId;\n     final long callStartNanos;\n    public PrintingEventListener(long callId, long callStartNanos) {\n       this.callId = callId;\n       this.callStartNanos = callStartNanos;\n     }", "fixed": "     final long callId;\n     final long callStartNanos;\n    PrintingEventListener(long callId, long callStartNanos) {\n       this.callId = callId;\n       this.callStartNanos = callStartNanos;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsSameNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsSameNull() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "aeab4504cd1d7f098475d56f689d07c5df1a4309", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (writeBatchSize > 1) {\n             failMap = doStoreUsingBatchSize(delayedEntries);\n         } else {\n            failMap = processInternal((List) delayedEntries);\n         }\n         return failMap;\n     }", "fixed": "         if (writeBatchSize > 1) {\n             failMap = doStoreUsingBatchSize(delayedEntries);\n         } else {\n            failMap = processInternal(delayedEntries);\n         }\n         return failMap;\n     }", "sourceBeforeFix": "Collection<DelayedEntry>", "sourceAfterFix": "List<DelayedEntry>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "179170224d6f8b547a7b6ba2c2fe3d1b17bde65b", "projectName": "druid-io.druid", "bugType": "Change Unary Operator\t", "problem": "               log.makeAlert(e, \"Failed to persist merged index[%s]\", schema.getDataSource())\n                  .addData(\"interval\", interval)\n                  .emit();\n              if (!shuttingDown) {\n                 abandonSegment(truncatedTime, sink);", "fixed": "               log.makeAlert(e, \"Failed to persist merged index[%s]\", schema.getDataSource())\n                  .addData(\"interval\", interval)\n                  .emit();\n              if (shuttingDown) {\n                 abandonSegment(truncatedTime, sink);", "sourceBeforeFix": "!shuttingDown", "sourceAfterFix": "shuttingDown"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @throws IOException Thrown if any of the two views raises an exception.\n \t */\n\tpublic void copy(DataInputView source, DataOutputView target) throws IOException;\n }", "fixed": " \t * \n \t * @throws IOException Thrown if any of the two views raises an exception.\n \t */\n\tpublic abstract void copy(DataInputView source, DataOutputView target) throws IOException;\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffsetEXT(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "fixed": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffset(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "sourceBeforeFix": "GL.glPolygonOffsetEXT(factor,units)", "sourceAfterFix": "GL.glPolygonOffset(factor,units)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "338d4a036b25526d2e5bf53c5e49f56ccbbf356f", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\tif (!drawing) throw new IllegalStateException(\"SpriteCache.begin must be called before draw.\");\r\n \t\tCache cache = caches.get(cacheID);\r\n\t\toffset = offset * 12 + cache.offset;\r\n \t\tlength *= 6;\r\n \t\tTexture[] textures = cache.textures;\r\n \t\tint[] counts = cache.counts;\r", "fixed": " \t\tif (!drawing) throw new IllegalStateException(\"SpriteCache.begin must be called before draw.\");\r\n \t\tCache cache = caches.get(cacheID);\r\n\t\toffset = offset * 6 + cache.offset;\r\n \t\tlength *= 6;\r\n \t\tTexture[] textures = cache.textures;\r\n \t\tint[] counts = cache.counts;\r", "sourceBeforeFix": "mesh.getNumVertices() / 2", "sourceAfterFix": "mesh.getNumVertices() / 4"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9c4101722a079fedba88c9a35d9d838e94396e15", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     mThriftServer = createThriftServer();\n     mWorkerNetAddress =\n         new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()\n            .getCanonicalHostName(), thriftServerPort, mDataServer.getPort());\n     int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);", "fixed": "     mThriftServer = createThriftServer();\n     mWorkerNetAddress =\n         new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()\n            .getHostAddress(), thriftServerPort, mDataServer.getPort());\n     int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);", "sourceBeforeFix": "BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName()", "sourceAfterFix": "BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "             \"--attr\", \"foo=bar\",\n             \"--attr\", \"foo=glarch\"};\n     rc = ks.run(args4);\n    assertEquals(-1, rc);\n     \n     deleteKey(ks, \"keyattr1\");", "fixed": "             \"--attr\", \"foo=bar\",\n             \"--attr\", \"foo=glarch\"};\n     rc = ks.run(args4);\n    assertEquals(1, rc);\n     \n     deleteKey(ks, \"keyattr1\");", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"rabbit\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"rabbit\")"}
{"fixCommitSHA1": "998d200618f6c6699f8bacd059ffda7c54f4d39e", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "     public static Rule<ExchangeNode> checkRulesAreFiredBeforeAddExchangesRule()\n     {\n        return checkPlanDoNotMatch(exchange(), \"Expected rules to be fired before 'AddExchanges' optimizer\");\n     }\n    public static <T extends PlanNode> Rule<T> checkPlanDoNotMatch(Pattern<T> pattern, String message)\n     {\n         return new CheckNoPlanNodeMatchesRule<>(pattern, message);\n     }", "fixed": "     public static Rule<ExchangeNode> checkRulesAreFiredBeforeAddExchangesRule()\n     {\n        return checkNoPlanNodeMatches(exchange(), \"Expected rules to be fired before 'AddExchanges' optimizer\");\n     }\n    private static <T extends PlanNode> Rule<T> checkNoPlanNodeMatches(Pattern<T> pattern, String message)\n     {\n         return new CheckNoPlanNodeMatchesRule<>(pattern, message);\n     }", "sourceBeforeFix": "checkPlanDoNotMatch(exchange(),\"Expected rules to be fired before 'AddExchanges' optimizer\")", "sourceAfterFix": "checkNoPlanNodeMatches(exchange(),\"Expected rules to be fired before 'AddExchanges' optimizer\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @return true if all the nodes up to the last annotation node are end of scope nodes\n      *         false otherwise\n      */\n    private boolean isEndOfScope(final DetailAST lastAnnotationNode, final DetailAST node) {\n         DetailAST checkNode = node;\n         boolean endOfScope = true;\n         while (endOfScope && !checkNode.equals(lastAnnotationNode)) {", "fixed": "      * @return true if all the nodes up to the last annotation node are end of scope nodes\n      *         false otherwise\n      */\n    private static boolean isEndOfScope(final DetailAST lastAnnotationNode, final DetailAST node) {\n         DetailAST checkNode = node;\n         boolean endOfScope = true;\n         while (endOfScope && !checkNode.equals(lastAnnotationNode)) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n                mapConfig.setTimeToLiveSeconds(Integer.valueOf(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {", "fixed": "             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n                mapConfig.setTimeToLiveSeconds(Integer.parseInt(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {", "sourceBeforeFix": "Integer.valueOf(sessionTTL)", "sourceAfterFix": "Integer.parseInt(sessionTTL)"}
{"fixCommitSHA1": "7b511d8200aae05bef86085f9b101d37b9fce4ef", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         if (maskPayload) {\n             int random = (int) (Math.random() * Integer.MAX_VALUE);\n             mask = ByteBuffer.allocate(4).putInt(random).array();\n            header.writeBytes(mask);\n             int counter = 0;\n             for (int i = data.readerIndex(); i < data.writerIndex(); i ++) {", "fixed": "         if (maskPayload) {\n             int random = (int) (Math.random() * Integer.MAX_VALUE);\n             mask = ByteBuffer.allocate(4).putInt(random).array();\n            out.writeBytes(mask);\n             int counter = 0;\n             for (int i = data.readerIndex(); i < data.writerIndex(); i ++) {", "sourceBeforeFix": "header.writeBytes(mask)", "sourceAfterFix": "out.writeBytes(mask)"}
{"fixCommitSHA1": "9e76b5319ef9790d8bce27eacbc2aff4ba312cac", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         try {\n             InetAddress address = resolver.resolve(\"10.0.0.1\").syncUninterruptibly().getNow();\n            assertEquals(\"10.0.0.1\", address.getHostName());\n         } finally {\n             resolver.close();\n         }", "fixed": "         try {\n             InetAddress address = resolver.resolve(\"10.0.0.1\").syncUninterruptibly().getNow();\n            assertEquals(\"10.0.0.1\", address.getHostAddress());\n         } finally {\n             resolver.close();\n         }", "sourceBeforeFix": "address.getHostName()", "sourceAfterFix": "address.getHostAddress()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dd80647fbf218880e5f8d72441d080b6c92778fa", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\ttry {\r\n \t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t} catch (Exception e) {\r\n\t\t\tthrow new GdxRuntimeException(\"Failure reading Vorbis.\");\r\n \t\t}\r\n \t\tsyncState.wrote(bytes);\r", "fixed": " \t\ttry {\r\n \t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t} catch (Exception e) {\r\n\t\t\tthrow new GdxRuntimeException(\"Failure reading Vorbis.\", e);\r\n \t\t}\r\n \t\tsyncState.wrote(bytes);\r", "sourceBeforeFix": "new GdxRuntimeException(\"Failed to read Vorbis.\")", "sourceAfterFix": "new GdxRuntimeException(\"Failed to read Vorbis.\",e)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             return new ErrorCommand(ERROR_CLIENT);\n         }\n         if (st.hasMoreTokens()) {\n            flag = Integer.valueOf(st.nextToken());\n         } else {\n             return new ErrorCommand(ERROR_CLIENT);\n         }", "fixed": "             return new ErrorCommand(ERROR_CLIENT);\n         }\n         if (st.hasMoreTokens()) {\n            flag = Integer.parseInt(st.nextToken());\n         } else {\n             return new ErrorCommand(ERROR_CLIENT);\n         }", "sourceBeforeFix": "Integer.valueOf(st.nextToken())", "sourceAfterFix": "Integer.parseInt(st.nextToken())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleCalendarStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default GoogleCalendarStreamEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleCalendarStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default GoogleCalendarStreamEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "46941b16a30e493238924701f938cbf3318eb355", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "fixed": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "68cd97ff6b0a506c2a2688c966c2a55870d6f466", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final HttpConnectionFactory http11 = buildHttpConnectionFactory(httpConfig);\n         final HTTP2ServerConnectionFactory http2c = new HTTP2CServerConnectionFactory(httpConfig);\n         http2c.setMaxConcurrentStreams(maxConcurrentStreams);\n        http2c.setInitialStreamSendWindow(initialStreamSendWindow);", "fixed": "         final HttpConnectionFactory http11 = buildHttpConnectionFactory(httpConfig);\n         final HTTP2ServerConnectionFactory http2c = new HTTP2CServerConnectionFactory(httpConfig);\n         http2c.setMaxConcurrentStreams(maxConcurrentStreams);\n        http2c.setInitialStreamRecvWindow(initialStreamSendWindow);", "sourceBeforeFix": "http2c.setInitialStreamSendWindow(initialStreamSendWindow)", "sourceAfterFix": "http2c.setInitialStreamRecvWindow(initialStreamSendWindow)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "b8108a370b039dbeccffad8c9b634f6ac85ed4a5", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "  */\n public class TFAgentStatBatchMapper {\n     private final Logger logger = LoggerFactory.getLogger(this.getClass());\n    public final TFAgentStatMappter tFAgentStatMappter = new TFAgentStatMappter();\n     public TFAgentStatBatch map(AgentStatBo agentStatBo) {\n         try {\n            List<TFAgentStat> tFAgentstatList = tFAgentStatMappter.map(agentStatBo);\n             long startTimestamp = getStartTimestamp(agentStatBo);\n             TFAgentStatBatch tFAgentStatBatch = new TFAgentStatBatch(agentStatBo.getAgentId(), startTimestamp, tFAgentstatList);\n             return tFAgentStatBatch;", "fixed": "  */\n public class TFAgentStatBatchMapper {\n     private final Logger logger = LoggerFactory.getLogger(this.getClass());\n    public final TFAgentStatMapper tFAgentStatMapper = new TFAgentStatMapper();\n     public TFAgentStatBatch map(AgentStatBo agentStatBo) {\n         try {\n            List<TFAgentStat> tFAgentstatList = tFAgentStatMapper.map(agentStatBo);\n             long startTimestamp = getStartTimestamp(agentStatBo);\n             TFAgentStatBatch tFAgentStatBatch = new TFAgentStatBatch(agentStatBo.getAgentId(), startTimestamp, tFAgentstatList);\n             return tFAgentStatBatch;", "sourceBeforeFix": "public final TFAgentStatMappter tFAgentStatMappter=new TFAgentStatMappter(); ", "sourceAfterFix": "public final TFAgentStatMapper tFAgentStatMapper=new TFAgentStatMapper(); "}
{"fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n    public abstract void handle(Exception exception, Request request, Response response);\n }", "fixed": "      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n    public abstract void handle(T exception, Request request, Response response);\n }", "sourceBeforeFix": "? extends Exception", "sourceAfterFix": "? extends T"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "22d5241b5f75631e9cfda82a6912a2555eecb165", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     @Override\n     protected void doStop() throws Exception {\n         if (channel != null) {\n            LOG.trace(\"Terminating channel to the remote gRPC server\");\n             channel.shutdown().shutdownNow();\n             channel = null;\n             grpcStub = null;", "fixed": "     @Override\n     protected void doStop() throws Exception {\n         if (channel != null) {\n            LOG.debug(\"Terminating channel to the remote gRPC server\");\n             channel.shutdown().shutdownNow();\n             channel = null;\n             grpcStub = null;", "sourceBeforeFix": "LOG.info(\"Getting asynchronous method stub from channel\")", "sourceAfterFix": "LOG.debug(\"Getting asynchronous method stub from channel\")"}
{"fixCommitSHA1": "a7f54a539a4c8f92f4895934480061a2ccbcd499", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsElement(attribute.getDefinition(), model, false, writer);\n     }\n }", "fixed": "     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsElement(attribute.getDefinition(), model, false, writer);\n     }\n }", "sourceBeforeFix": "attribute.getDefinition().getAttributeMarshaller()", "sourceAfterFix": "attribute.getDefinition().getMarshaller()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2230a91829f39b72973e6fecf275d9c664911ca0", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n\t\t\tthrow new CompilerException((String) SOURCE.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}", "fixed": " \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n\t\t\tthrow new CompilerException((String) SOURCE_PATH.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}", "sourceBeforeFix": "SOURCE.deref()", "sourceAfterFix": "SOURCE_PATH.deref()"}
{"fixCommitSHA1": "da81d5ef25e71ae77bb98e0184aed2cb125fc1a6", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": "     moveByMinutes(9 * 60 * 24);\n    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000, 200);", "fixed": "     moveByMinutes(9 * 60 * 24);\n    executeJobExecutorForTime(10000, 200);", "sourceBeforeFix": "waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000,200)", "sourceAfterFix": "executeJobExecutorForTime(10000,200)"}
{"fixCommitSHA1": "73a03b5e232d8f7049a03361e0454cb2eecb90c7", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     }\n    @Test(timeout = 30000)\n     public void testMutex() throws InterruptedException {\n         final int threadCount = 2;\n         final HazelcastInstance[] instances = createHazelcastInstanceFactory(threadCount).newInstances();", "fixed": "     }\n    @Test(timeout = 120000)\n     public void testMutex() throws InterruptedException {\n         final int threadCount = 2;\n         final HazelcastInstance[] instances = createHazelcastInstanceFactory(threadCount).newInstances();", "sourceBeforeFix": "timeout=30000", "sourceAfterFix": "timeout=120000"}
{"fixCommitSHA1": "2ea202704a509c0bea14438beb65443f33517ebc", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "                         String command = shellMsg.getCommand();\n                         if (command == null) {\n                            throw new UnsupportedOperationException(\"Command not found in bolt message: \" + shellMsg);\n                         }\n                         if(command.equals(\"ack\")) {\n                             handleAck(shellMsg.getId());", "fixed": "                         String command = shellMsg.getCommand();\n                         if (command == null) {\n                            throw new IllegalArgumentException(\"Command not found in bolt message: \" + shellMsg);\n                         }\n                         if(command.equals(\"ack\")) {\n                             handleAck(shellMsg.getId());", "sourceBeforeFix": "new UnsupportedOperationException(\"Command not found in bolt message: \" + shellMsg)", "sourceAfterFix": "new IllegalArgumentException(\"Command not found in bolt message: \" + shellMsg)"}
{"fixCommitSHA1": "419fb4a4dee3cd001631daa06fe6b8c30095b468", "projectName": "apache.hadoop", "bugType": "Wrong Function Name", "problem": "                                                   ) throws IOException {\n     try {\n      ugi.reloginFromKeytab();\n       return ugi.doAs(new PrivilegedExceptionAction<Token<?>>() {\n         @Override\n         public Token<?> run() throws IOException {", "fixed": "                                                   ) throws IOException {\n     try {\n      ugi.checkTGTAndReloginFromKeytab();\n       return ugi.doAs(new PrivilegedExceptionAction<Token<?>>() {\n         @Override\n         public Token<?> run() throws IOException {", "sourceBeforeFix": "UserGroupInformation.getLoginUser().reloginFromKeytab()", "sourceAfterFix": "UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab()"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "fixed": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "f7236ba0d5a866d31b194e22c2a0fccc6f238f9d", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "                 String[] paramNames = null;\n                 if (kotlin && constructors.length > 0) {\n                     paramNames = TypeUtils.getKoltinConstructorParameters(clazz);\n                    creatorConstructor = TypeUtils.getKoltinConstructor(constructors);\n                     TypeUtils.setAccessible(creatorConstructor);\n                 } else {", "fixed": "                 String[] paramNames = null;\n                 if (kotlin && constructors.length > 0) {\n                     paramNames = TypeUtils.getKoltinConstructorParameters(clazz);\n                    creatorConstructor = TypeUtils.getKoltinConstructor(constructors, paramNames);\n                     TypeUtils.setAccessible(creatorConstructor);\n                 } else {", "sourceBeforeFix": "TypeUtils.getKoltinConstructor(constructors)", "sourceAfterFix": "TypeUtils.getKoltinConstructor(constructors,paramNames)"}
{"fixCommitSHA1": "d72bcb65c0721bbb360072caf1303e4b58236fe0", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "         CamelContext context = super.createCamelContext();\n         context.addComponent(\"properties\", new PropertiesComponent(\"ref:prop\"));\n        KafkaComponent kafka = new KafkaComponent();\n         kafka.setBrokers(\"localhost:\" + getKafkaPort());\n         context.addComponent(\"kafka\", kafka);", "fixed": "         CamelContext context = super.createCamelContext();\n         context.addComponent(\"properties\", new PropertiesComponent(\"ref:prop\"));\n        KafkaComponent kafka = new KafkaComponent(context);\n         kafka.setBrokers(\"localhost:\" + getKafkaPort());\n         context.addComponent(\"kafka\", kafka);", "sourceBeforeFix": "new KafkaComponent()", "sourceAfterFix": "new KafkaComponent(context)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesNodesEndpointBuilder\n             extends\n                 KubernetesNodesEndpointConsumerBuilder, KubernetesNodesEndpointProducerBuilder {\n         default AdvancedKubernetesNodesEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesNodesEndpointBuilder\n             extends\n                 KubernetesNodesEndpointConsumerBuilder, KubernetesNodesEndpointProducerBuilder {\n         default AdvancedKubernetesNodesEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "823bfb98fed1336c299c463e74bb8c9b63a956c7", "projectName": "naver.pinpoint", "bugType": "Change Numeric Literal", "problem": "     public static StreamPingPacket readBuffer(short packetType, ChannelBuffer buffer) {\r\n         assert packetType == PACKET_TYPE;\r\n        if (buffer.readableBytes() < 4) {\r\n             buffer.resetReaderIndex();\r\n             return null;\r\n         }\r", "fixed": "     public static StreamPingPacket readBuffer(short packetType, ChannelBuffer buffer) {\r\n         assert packetType == PACKET_TYPE;\r\n        if (buffer.readableBytes() < 8) {\r\n             buffer.resetReaderIndex();\r\n             return null;\r\n         }\r", "sourceBeforeFix": "buffer.readableBytes() < 4", "sourceAfterFix": "buffer.readableBytes() < 8"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "7bdcee5e3dfc368e8ba9c5752aa07d049ca5b5ae", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tExclusion(String groupId, String artifactId) {\n \t\t\tAssert.notNull(groupId, \"GroupId must not be null\");\n\t\t\tAssert.notNull(groupId, \"ArtifactId must not be null\");\n \t\t\tthis.groupId = groupId;\n \t\t\tthis.artifactId = artifactId;\n \t\t}", "fixed": " \t\tExclusion(String groupId, String artifactId) {\n \t\t\tAssert.notNull(groupId, \"GroupId must not be null\");\n\t\t\tAssert.notNull(artifactId, \"ArtifactId must not be null\");\n \t\t\tthis.groupId = groupId;\n \t\t\tthis.artifactId = artifactId;\n \t\t}", "sourceBeforeFix": "Assert.notNull(groupId,\"ArtifactId must not be null\")", "sourceAfterFix": "Assert.notNull(artifactId,\"ArtifactId must not be null\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "4c66566e398558597a5058384d85a020b2418dab", "projectName": "eclipse.vert.x", "bugType": "Same Function Less Args", "problem": "   @Test\n   public void testListenOnWildcardPort() throws Exception {\n    startTest(getMethodName(), false);\n   }\n   @Test", "fixed": "   @Test\n   public void testListenOnWildcardPort() throws Exception {\n    startTest(getMethodName());\n   }\n   @Test", "sourceBeforeFix": "startTest(getMethodName(),false)", "sourceAfterFix": "startTest(getMethodName())"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "         )\n     );\n    queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "fixed": "         )\n     );\n    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "sourceBeforeFix": "queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "6c4cfa7a18d589462f14a2165932d17e46c8f510", "projectName": "alibaba.druid", "bugType": "Change Modifier", "problem": "     private final static Log   LOG         = LogFactory.getLog(DruidPooledConnection.class);\r\n     protected Connection       conn;\r\n    protected DruidConnectionHolder holder;\r\n     protected TransactionInfo  transactionInfo;\r\n     private final boolean      dupCloseLogEnable;\r\n     private boolean            traceEnable = false;\r", "fixed": "     private final static Log   LOG         = LogFactory.getLog(DruidPooledConnection.class);\r\n     protected Connection       conn;\r\n    protected volatile DruidConnectionHolder holder;\r\n     protected TransactionInfo  transactionInfo;\r\n     private final boolean      dupCloseLogEnable;\r\n     private boolean            traceEnable = false;\r", "sourceBeforeFix": "4", "sourceAfterFix": "68"}
{"fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     public static DetailAST annotatingWhat(DetailAST ast)\n     {\n         if (ast == null) {\n            throw new NullPointerException(\"the ast is null\");\n         }\n         if (ast.getType() != TokenTypes.ANNOTATION) {", "fixed": "     public static DetailAST annotatingWhat(DetailAST ast)\n     {\n         if (ast == null) {\n            throw new IllegalArgumentException(\"the ast is null\");\n         }\n         if (ast.getType() != TokenTypes.ANNOTATION) {", "sourceBeforeFix": "new NullPointerException(\"the ast is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the ast is null\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b4dd066af8d780844f20f35c892476f6b35ff1b2", "projectName": "hazelcast.hazelcast", "bugType": "More Specific If", "problem": "         }\n         for (Future<Pairs> future : lsFutures) {\n             Pairs pairs = future.get();\n            if (pairs != null) {\n                 for (KeyValue keyValue : pairs.getKeyValues()) {\n                     results.addKeyValue(keyValue);\n                 }", "fixed": "         }\n         for (Future<Pairs> future : lsFutures) {\n             Pairs pairs = future.get();\n            if (pairs != null && pairs.getKeyValues()!=null) {\n                 for (KeyValue keyValue : pairs.getKeyValues()) {\n                     results.addKeyValue(keyValue);\n                 }", "sourceBeforeFix": "pairs != null", "sourceAfterFix": "pairs != null && pairs.getKeyValues() != null"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "sourceBeforeFix": "result.expectedMessageCount(3)", "sourceAfterFix": "result.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "ac418afcea37e4f1def3780fea94c2454ab5c866", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                         reloadRequired = reloadRequired || Logging.requiresReload(attribute.getFlags());\n                     }\n                     if (restartRequired) {\n                        context.restartRequired();\n                     } else if (reloadRequired) {\n                        context.reloadRequired();\n                     }\n                 }\n                 performRollback(context, configuration, name, originalModel);", "fixed": "                         reloadRequired = reloadRequired || Logging.requiresReload(attribute.getFlags());\n                     }\n                     if (restartRequired) {\n                        context.revertRestartRequired();\n                     } else if (reloadRequired) {\n                        context.revertReloadRequired();\n                     }\n                 }\n                 performRollback(context, configuration, name, originalModel);", "sourceBeforeFix": "context.reloadRequired()", "sourceAfterFix": "context.revertReloadRequired()"}
{"fixCommitSHA1": "8c31000efa3e7745855734a2babc18fc0ab20bed", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n\t@UnrelatedOne\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \t}", "fixed": " \t}\n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n\t@UnrelatedTwo\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \t}", "sourceBeforeFix": "ImportAutoConfigurationWithItemsOne.class", "sourceAfterFix": "ImportAutoConfigurationWithItemsTwo.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "1ee280f9971b12ca1a2089f59e41a1d94f885637", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "             placeholderToken.setBeginPosition(beginPosition);\n             placeholderToken.setEndPosition(beginPosition + placeholderToken.word().length());\n             placeholderToken.set(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetBeginAnnotation.class,\n                    containedToken.get(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetBeginAnnotation.class));\n             placeholderToken.set(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetEndAnnotation.class,\n                    containedToken.get(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetEndAnnotation.class));\n             placeholderToken.setIsMWT(true);\n             return placeholderToken;\n         }", "fixed": "             placeholderToken.setBeginPosition(beginPosition);\n             placeholderToken.setEndPosition(beginPosition + placeholderToken.word().length());\n             placeholderToken.set(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetBeginAnnotation.class,\n                    containedToken.beginPosition());\n             placeholderToken.set(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetEndAnnotation.class,\n                    containedToken.endPosition());\n             placeholderToken.setIsMWT(true);\n             return placeholderToken;\n         }", "sourceBeforeFix": "containedToken.get(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetBeginAnnotation.class)", "sourceAfterFix": "containedToken.beginPosition()"}
{"fixCommitSHA1": "8b0fec4451e8147bbe5bdbf29d235744c9aca01a", "projectName": "gephi.gephi", "bugType": "Change Binary Operator", "problem": "             nodeE.appendChild(positionXE);\n             Element positionYE = createNodePositionY(document, n);\n             nodeE.appendChild(positionYE);\n            if (minZ != 0f && maxZ != 0f) {\n                 Element positionZE = createNodePositionZ(document, n);\n                 nodeE.appendChild(positionZE);\n             }", "fixed": "             nodeE.appendChild(positionXE);\n             Element positionYE = createNodePositionY(document, n);\n             nodeE.appendChild(positionYE);\n            if (minZ != 0f || maxZ != 0f) {\n                 Element positionZE = createNodePositionZ(document, n);\n                 nodeE.appendChild(positionZE);\n             }", "sourceBeforeFix": "minZ != 0f && maxZ != 0f", "sourceAfterFix": "minZ != 0f || maxZ != 0f"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RestEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRestEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface RestEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRestEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "26b56d3addb34b409bf10b819a1e70ea2ad46b71", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "             }\n             for (; i < srcEndIdx; i ++) {\n                T m = src[srcIdx];\n                 if (m == null) {\n                     throw new NullPointerException(\"src[\" + srcIdx + ']');\n                 }", "fixed": "             }\n             for (; i < srcEndIdx; i ++) {\n                T m = src[i];\n                 if (m == null) {\n                     throw new NullPointerException(\"src[\" + srcIdx + ']');\n                 }", "sourceBeforeFix": "src[srcIdx]", "sourceAfterFix": "src[i]"}
{"fixCommitSHA1": "5b4979166050e553fd967e5094509de7975651ec", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "             chunks.get(chunk.getId()).put(chunk.getSequenceNumber(), chunk);\n         } else {\n            Map<Integer, GELFMessageChunk> c = Maps.newHashMap();\n             c.put(chunk.getSequenceNumber(), chunk);\n             chunks.put(chunk.getId(), c);\n         }", "fixed": "             chunks.get(chunk.getId()).put(chunk.getSequenceNumber(), chunk);\n         } else {\n            Map<Integer, GELFMessageChunk> c = Maps.newTreeMap();\n             c.put(chunk.getSequenceNumber(), chunk);\n             chunks.put(chunk.getId(), c);\n         }", "sourceBeforeFix": "Maps.newHashMap()", "sourceAfterFix": "Maps.newTreeMap()"}
{"fixCommitSHA1": "3f3bab10b9ca68eb31a7ef5a31e49145b51006fd", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tserializedValue = new SerializedValue<>(null);\n \t\t\t\t} else {\n \t\t\t\t\tbyte[] serializedData = new byte[length];\n\t\t\t\t\tdis.read(serializedData, 0, length);\n \t\t\t\t\tserializedValue = SerializedValue.fromBytes(serializedData);\n \t\t\t\t}", "fixed": " \t\t\t\t\tserializedValue = new SerializedValue<>(null);\n \t\t\t\t} else {\n \t\t\t\t\tbyte[] serializedData = new byte[length];\n\t\t\t\t\tdis.readFully(serializedData, 0, length);\n \t\t\t\t\tserializedValue = SerializedValue.fromBytes(serializedData);\n \t\t\t\t}", "sourceBeforeFix": "dis.read(serializedData,0,length)", "sourceAfterFix": "dis.readFully(serializedData,0,length)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\t\tModuleFactory.stopModule(mod, true, true);\r\n \t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (Throwable t3) {\r\n \t\t\t\t\t\t\t\tlog.trace(\"Unable to shutdown module:\" + mod, t3);\r", "fixed": " \t\t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\t\tModuleFactory.stopModule(mod, true, true);\r\n \t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (Exception t3) {\r\n \t\t\t\t\t\t\t\tlog.trace(\"Unable to shutdown module:\" + mod, t3);\r", "sourceBeforeFix": "Throwable t2", "sourceAfterFix": "Exception t2"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   \n   ControlFlowGraph<Node> computeCFG() {\n    logger.info(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);", "fixed": "   \n   ControlFlowGraph<Node> computeCFG() {\n    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);", "sourceBeforeFix": "logger.info(\"Creating extern file for exports\")", "sourceAfterFix": "logger.fine(\"Creating extern file for exports\")"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   class OkHttpRequest implements Runnable {\n     private final Call call;\n    public OkHttpRequest(Call call) {\n       this.call = call;\n     }", "fixed": "   class OkHttpRequest implements Runnable {\n     private final Call call;\n    OkHttpRequest(Call call) {\n       this.call = call;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "97814491bc0e383e136612dea07af841c0121681", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "fixed": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d76ba8118cca9f2f1c4f0e89e2dd15a9db02f7e8", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\t\tcase MotionEvent.ACTION_DOWN:\r\n \t\t\tcase MotionEvent.ACTION_POINTER_DOWN:\r\nrealPointerIndex = input.getFreePointerIndex();\n\t\t\t\tif (realPointerIndex > AndroidInput.NUM_TOUCHES) break;\r\n \t\t\t\tinput.realId[realPointerIndex] = pointerId;\r\n \t\t\t\tx = (int)event.getX(pointerIndex);\r\n \t\t\t\ty = (int)event.getY(pointerIndex);\r", "fixed": " \t\t\tcase MotionEvent.ACTION_DOWN:\r\n \t\t\tcase MotionEvent.ACTION_POINTER_DOWN:\r\nrealPointerIndex = input.getFreePointerIndex();\n\t\t\t\tif (realPointerIndex >= AndroidInput.NUM_TOUCHES) break;\r\n \t\t\t\tinput.realId[realPointerIndex] = pointerId;\r\n \t\t\t\tx = (int)event.getX(pointerIndex);\r\n \t\t\t\ty = (int)event.getY(pointerIndex);\r", "sourceBeforeFix": "realPointerIndex > AndroidInput.NUM_TOUCHES", "sourceAfterFix": "realPointerIndex >= AndroidInput.NUM_TOUCHES"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"allUsers.json\").withInputs(union);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink output = new Sink(\"allUsers.json\").withInputs(union);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WebsocketEndpointBuilder\n             extends\n                 WebsocketEndpointConsumerBuilder, WebsocketEndpointProducerBuilder {\n         default AdvancedWebsocketEndpointBuilder advanced() {", "fixed": "     \n    public interface WebsocketEndpointBuilder\n             extends\n                 WebsocketEndpointConsumerBuilder, WebsocketEndpointProducerBuilder {\n         default AdvancedWebsocketEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "7369734ba2477dc5f208c9bcdbf438d42e92ac25", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tsetTransform(false);\n \t}\n\tpublic Container (Actor actor) {\n \t\tthis();\n \t\tsetActor(actor);\n \t}", "fixed": " \t\tsetTransform(false);\n \t}\n\tpublic Container (T actor) {\n \t\tthis();\n \t\tsetActor(actor);\n \t}", "sourceBeforeFix": "private Actor actor; ", "sourceAfterFix": "private T actor; "}
{"fixCommitSHA1": "6bd7b27abf18fdfb301a7c95e1d2e7888f884c48", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "    * balancing purpose at a datanode\n    */\n   public static final int MAX_NUM_CONCURRENT_MOVES = 5;\n  public static final int MAX_NO_PENDING_BLOCK_INTERATIONS = 5;\n   private static final String USAGE = \"Usage: java \"\n       + Balancer.class.getSimpleName()", "fixed": "    * balancing purpose at a datanode\n    */\n   public static final int MAX_NUM_CONCURRENT_MOVES = 5;\n  private static final int MAX_NO_PENDING_BLOCK_ITERATIONS = 5;\n   private static final String USAGE = \"Usage: java \"\n       + Balancer.class.getSimpleName()", "sourceBeforeFix": "noPendingBlockIteration >= MAX_NO_PENDING_BLOCK_INTERATIONS", "sourceAfterFix": "noPendingBlockIteration >= MAX_NO_PENDING_BLOCK_ITERATIONS"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.valueOf(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "fixed": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PropertiesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPropertiesEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface PropertiesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPropertiesEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testVarArgs1() {", "fixed": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testVarArgs1() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "6bb73b52e050c6fcb98478e632c7ed54df8c451e", "projectName": "spring-projects.spring-security-oauth", "bugType": "More Specific If", "problem": " \t\tform.add(\"code\", context.getAuthorizationCode());\n \t\tString redirectUri = resource.getPreEstablishedRedirectUri();\n\t\tif (redirectUri == null) {\n\t\t\tredirectUri = String.valueOf(context==null ? null : context.getPreservedState());\n \t\t} else {\n \t\t\tform.add(\"state\", String.valueOf(context.getPreservedState()));", "fixed": " \t\tform.add(\"code\", context.getAuthorizationCode());\n \t\tString redirectUri = resource.getPreEstablishedRedirectUri();\n\t\tif (context!=null && redirectUri == null) {\n\t\t\tredirectUri = String.valueOf(context.getPreservedState());\n \t\t} else {\n \t\t\tform.add(\"state\", String.valueOf(context.getPreservedState()));", "sourceBeforeFix": "redirectUri == null", "sourceAfterFix": "context != null && redirectUri == null"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "fixed": "     }\n     @Override\n    public synchronized void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4af3d1f01144d5a959934641e66abfcb94644b0a", "projectName": "hazelcast.hazelcast", "bugType": "Delete Throws Exception", "problem": "     HazelcastInstance server1;\n     @Before\n    public void setUp() throws Exception {\n         NearCacheConfig nearCacheConfig = newNearCacheConfig();\n         nearCacheConfig.setInvalidateOnChange(true);", "fixed": "     HazelcastInstance server1;\n     @Before\n    public void setUp() {\n         NearCacheConfig nearCacheConfig = newNearCacheConfig();\n         nearCacheConfig.setInvalidateOnChange(true);", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return result;\n   }\n  private String rule(String rule) {\n     return \"com.google.javascript.jscomp.ConformanceRules$\" + rule;\n   }\n  private String value(String value) {\n     return \"  value: '\" + value + \"'\\n\";\n   }", "fixed": "     return result;\n   }\n  private static String rule(String rule) {\n     return \"com.google.javascript.jscomp.ConformanceRules$\" + rule;\n   }\n  private static String value(String value) {\n     return \"  value: '\" + value + \"'\\n\";\n   }", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesReplicationControllersEndpointBuilder\n             extends\n                 KubernetesReplicationControllersEndpointConsumerBuilder, KubernetesReplicationControllersEndpointProducerBuilder {\n         default AdvancedKubernetesReplicationControllersEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesReplicationControllersEndpointBuilder\n             extends\n                 KubernetesReplicationControllersEndpointConsumerBuilder, KubernetesReplicationControllersEndpointProducerBuilder {\n         default AdvancedKubernetesReplicationControllersEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Wrong Function Name", "problem": "             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n     private String getJSDocTypeWithBraces(CodegenModel cm, CodegenProperty cp) {\n         return \"{\" + getJSDocType(cm, cp) + \"}\";\n     }\n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {", "fixed": "             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n    \n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {", "sourceBeforeFix": "getJSDocTypeWithBraces(cp)", "sourceAfterFix": "getJSDocType(cp)"}
{"fixCommitSHA1": "73627df082ff499af4ca1c482f79e304905007eb", "projectName": "alibaba.canal", "bugType": "Same Function More Args", "problem": "                         if (i > 0) {\n                             buf.append(\", \");\n                         }\n                        element(i).toJsonString(buf);\n                     }\n                     buf.append(\"]\");\n                     break;", "fixed": "                         if (i > 0) {\n                             buf.append(\", \");\n                         }\n                        element(i, charsetName).toJsonString(buf, charsetName);\n                     }\n                     buf.append(\"]\");\n                     break;", "sourceBeforeFix": "buffer.rewind().forward((int)n).getFixString((int)str_len)", "sourceAfterFix": "buffer.rewind().forward((int)n).getFixString((int)str_len,charsetName)"}
{"fixCommitSHA1": "aebe2ca06a3fb220c7211b174c85250f36afae25", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForNone\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForNone\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "40e6bbe55f7141bd66a52261e108a1f3b575ca6f", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;", "fixed": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeInEdge(Object edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "fixed": "   }\n   @Override\n  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {\n         long totalMessages = 50;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "fixed": "     public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {\n         long totalMessages = 50;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                }\r\n                if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "fixed": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "b877b45840b3166f0c9213337595fbc506075197", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": " @RestController\n public class PetController {\n    private static String[] PETS = new String[]{\"Snoopy\", \"Fido\", \"Tony the Tiger\"};\n     @RequestMapping(value = \"/petById/{id}\", produces = \"application/json\")\n     public String petById(@PathVariable(\"id\") Integer id) {", "fixed": " @RestController\n public class PetController {\n    private static final String[] PETS = new String[]{\"Snoopy\", \"Fido\", \"Tony the Tiger\"};\n     @RequestMapping(value = \"/petById/{id}\", produces = \"application/json\")\n     public String petById(@PathVariable(\"id\") Integer id) {", "sourceBeforeFix": "10", "sourceAfterFix": "26"}
{"fixCommitSHA1": "e530010502964b1815d5dbf9733a248f5e1bc4e1", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n        instance2.getLifecycleService().terminate();\n         mapStore.awaitStores();\n     }", "fixed": "         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n        instance2.getLifecycleService().shutdown();\n         mapStore.awaitStores();\n     }", "sourceBeforeFix": "instance2.getLifecycleService().terminate()", "sourceAfterFix": "instance2.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AMQPEndpointBuilder\n             extends\n                 AMQPEndpointConsumerBuilder, AMQPEndpointProducerBuilder {\n         default AdvancedAMQPEndpointBuilder advanced() {", "fixed": "     \n    public interface AMQPEndpointBuilder\n             extends\n                 AMQPEndpointConsumerBuilder, AMQPEndpointProducerBuilder {\n         default AdvancedAMQPEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d9510ff4ae62d30d49f80749d8ab1f0d3c16d9a4", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         out.writeInt(migrationData.size());\n         for (Map.Entry<String, Data> entry : migrationData.entrySet()) {\n             out.writeUTF(entry.getKey());\n            out.writeObject(entry.getValue());\n         }\n     }", "fixed": "         out.writeInt(migrationData.size());\n         for (Map.Entry<String, Data> entry : migrationData.entrySet()) {\n             out.writeUTF(entry.getKey());\n            out.writeData(entry.getValue());\n         }\n     }", "sourceBeforeFix": "out.writeObject(entry.getValue())", "sourceAfterFix": "out.writeData(entry.getValue())"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);", "fixed": " \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n        } else if (that.getDomain() == null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());", "fixed": "         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n        } else if (that.getDomain() == null && getDomain() != null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());", "sourceBeforeFix": "c.getPath() == null", "sourceAfterFix": "c.getPath() == null && getPath() != null"}
{"fixCommitSHA1": "419fb4a4dee3cd001631daa06fe6b8c30095b468", "projectName": "apache.hadoop", "bugType": "Wrong Function Name", "problem": "     public long renew(Token<?> token, \n                       Configuration conf) throws IOException {\n      UserGroupInformation.getLoginUser().reloginFromKeytab();\n       InetSocketAddress serviceAddr = SecurityUtil.getTokenServiceAddr(token);\n       return ", "fixed": "     public long renew(Token<?> token, \n                       Configuration conf) throws IOException {\n      UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab();\n       InetSocketAddress serviceAddr = SecurityUtil.getTokenServiceAddr(token);\n       return ", "sourceBeforeFix": "UserGroupInformation.getLoginUser().reloginFromKeytab()", "sourceAfterFix": "UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "fixed": "     }\n     @Override\n    public synchronized void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "b847c8f134aa71f74efe3098fff6d4c095d63c3c", "projectName": "spring-projects.spring-security-oauth", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t}, key);\n \t\t}\n \t\tcatch (EmptyResultDataAccessException e) {\n\t\t\tif (LOG.isInfoEnabled()) {\n \t\t\t\tLOG.debug(\"Failed to find access token for authentication \" + authentication);\n \t\t\t}\n \t\t}", "fixed": " \t\t\t\t\t}, key);\n \t\t}\n \t\tcatch (EmptyResultDataAccessException e) {\n\t\t\tif (LOG.isDebugEnabled()) {\n \t\t\t\tLOG.debug(\"Failed to find access token for authentication \" + authentication);\n \t\t\t}\n \t\t}", "sourceBeforeFix": "LOG.isInfoEnabled()", "sourceAfterFix": "LOG.isDebugEnabled()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedLinkedInEndpointBuilder\n             extends\n                 AdvancedLinkedInEndpointConsumerBuilder, AdvancedLinkedInEndpointProducerBuilder {\n         default LinkedInEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedLinkedInEndpointBuilder\n             extends\n                 AdvancedLinkedInEndpointConsumerBuilder, AdvancedLinkedInEndpointProducerBuilder {\n         default LinkedInEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "d3f568f0a22670cace0407eef7a5f36ea36294fd", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       getNewBlockId();\n       length -= blockSize;\n     }\n    setComplete(length);\n   }\n   @Override", "fixed": "       getNewBlockId();\n       length -= blockSize;\n     }\n    setComplete(mLength);\n   }\n   @Override", "sourceBeforeFix": "setComplete(length)", "sourceAfterFix": "setComplete(mLength)"}
{"fixCommitSHA1": "2897c425577be5d5b3ed10ce5f01e0fcb8ba1975", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "     InodeDirectory inode2 = createInodeDirectory();\n     Assert.assertEquals(AbstractInodeTest.TEST_USER_NAME, inode2.getUserName());\n     Assert.assertEquals(AbstractInodeTest.TEST_GROUP_NAME, inode2.getGroupName());\n    Assert.assertEquals((short) 0755, inode2.getPermission());\n   }\n   /**", "fixed": "     InodeDirectory inode2 = createInodeDirectory();\n     Assert.assertEquals(AbstractInodeTest.TEST_USER_NAME, inode2.getUserName());\n     Assert.assertEquals(AbstractInodeTest.TEST_GROUP_NAME, inode2.getGroupName());\n    Assert.assertEquals((short) 0777, inode2.getPermission());\n   }\n   /**", "sourceBeforeFix": "(short)0755", "sourceAfterFix": "(short)0777"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4af3d1f01144d5a959934641e66abfcb94644b0a", "projectName": "hazelcast.hazelcast", "bugType": "Delete Throws Exception", "problem": "     HazelcastInstance server1;\n     @Before\n    public void setUp() throws Exception {\n         NearCacheConfig nearCacheConfig = newNearCacheConfig();\n         nearCacheConfig.setInvalidateOnChange(true);", "fixed": "     HazelcastInstance server1;\n     @Before\n    public void setUp() {\n         NearCacheConfig nearCacheConfig = newNearCacheConfig();\n         nearCacheConfig.setInvalidateOnChange(true);", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SwiftEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedSwiftEndpointBuilder advanced() {\n             return (AdvancedSwiftEndpointBuilder) this;\n         }", "fixed": "     \n    public interface SwiftEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedSwiftEndpointBuilder advanced() {\n             return (AdvancedSwiftEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9760ff5294fd81c3272989b6007b6496a08e0ca7", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "     } else if (url.startsWith(\"jdbc:sqlserver\")) {\n       databaseFormatter = new DatabaseFormatterMsSqlServer();\n     } else if (url.startsWith(\"jdbc:db2\")) {\n      databaseFormatter = new DatabaseFormatterOracle();\n     } else if (url.startsWith(\"jdbc:postgresql\")) {\n      databaseFormatter = new DatabaseFormatterOracle();\n     } \n   }", "fixed": "     } else if (url.startsWith(\"jdbc:sqlserver\")) {\n       databaseFormatter = new DatabaseFormatterMsSqlServer();\n     } else if (url.startsWith(\"jdbc:db2\")) {\n      databaseFormatter = new DatabaseFormatterDb2();\n     } else if (url.startsWith(\"jdbc:postgresql\")) {\n      databaseFormatter = new DatabaseFormatterPostgres();\n     } \n   }", "sourceBeforeFix": "new DatabaseFormatterOracle()", "sourceAfterFix": "new DatabaseFormatterDb2()"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Current assignment of \" +\n          Bytes.toString(info.getRegionName()) +\n           \" is not valid: serverInfo: \" + storedInfo + \", passed startCode: \" +\n           startCode + \", storedInfo.startCode: \" +\n           ((storedInfo != null)? storedInfo.getStartCode(): -1) +", "fixed": "       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Current assignment of \" +\n          info.getRegionNameAsString() +\n           \" is not valid: serverInfo: \" + storedInfo + \", passed startCode: \" +\n           startCode + \", storedInfo.startCode: \" +\n           ((storedInfo != null)? storedInfo.getStartCode(): -1) +", "sourceBeforeFix": "info.getRegionName()", "sourceAfterFix": "info.getRegionNameAsString()"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "fixed": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")", "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "           sum += mBuf.get(pId % 16);\n           if (DEBUG_MODE) {\n            buf.DATA.flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();", "fixed": "           sum += mBuf.get(pId % 16);\n           if (DEBUG_MODE) {\n            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c25f3ed04a7dcad130303a10f6d235e7ee7b36fd", "projectName": "libgdx.libgdx", "bugType": "Change Unary Operator\t", "problem": " \t\tif (handle.delete()) fail();\r\n \t\tif (handle.list().length != 0) fail();\r\n \t\tif (handle.child(\"meow\").exists()) fail();\r\n\t\tif (handle.parent().exists()) fail();\r\n \t\ttry {\r\n \t\t\thandle.read().close();\r\n \t\t\tfail();\r", "fixed": " \t\tif (handle.delete()) fail();\r\n \t\tif (handle.list().length != 0) fail();\r\n \t\tif (handle.child(\"meow\").exists()) fail();\r\n\t\tif (!handle.parent().exists()) fail();\r\n \t\ttry {\r\n \t\t\thandle.read().close();\r\n \t\t\tfail();\r", "sourceBeforeFix": "handle.parent().exists()", "sourceAfterFix": "!handle.parent().exists()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2b49c3601734e6e5c17e1c797b29015c4ddeee4a", "projectName": "eclipse.vert.x", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  public synchronized void close() {\n     synchronized (this) {\n       checkClosed();\n       closed = true;", "fixed": "   }\n   @Override\n  public void close() {\n     synchronized (this) {\n       checkClosed();\n       closed = true;", "sourceBeforeFix": "33", "sourceAfterFix": "1"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tinvalidateHierarchy();\r\n \t}\r\n\tpublic String getText () {\r\n \t\treturn text;\r\n \t}\r", "fixed": " \t\tinvalidateHierarchy();\r\n \t}\r\n\tpublic CharSequence getText () {\r\n \t\treturn text;\r\n \t}\r", "sourceBeforeFix": "String text", "sourceAfterFix": "CharSequence text"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "27fb87cfcea241c2d7961baf68e84ce97f2dee7a", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "       }\n       statsData.setDoubleStats(doubleStats);\n       statsObj.setStatsData(statsData);\n    } else if (columnType.equalsIgnoreCase(\"string\")) {\n       StringColumnStatsData stringStats = new StringColumnStatsData();\n       stringStats.setMaxColLenIsSet(false);\n       stringStats.setAvgColLenIsSet(false);", "fixed": "       }\n       statsData.setDoubleStats(doubleStats);\n       statsObj.setStatsData(statsData);\n    } else if (columnType.equalsIgnoreCase(\"string\") || columnType.toLowerCase().startsWith(\"char\")\n|| columnType.toLowerCase().startsWith(\"varchar\")) {\n       StringColumnStatsData stringStats = new StringColumnStatsData();\n       stringStats.setMaxColLenIsSet(false);\n       stringStats.setAvgColLenIsSet(false);", "sourceBeforeFix": "columnType.equalsIgnoreCase(\"double\")", "sourceAfterFix": "columnType.equalsIgnoreCase(\"double\") || columnType.equalsIgnoreCase(\"float\")"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {", "fixed": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "9a9b02c330e9e452f37335d0e59c462175bb5df7", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForRoles\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRoles\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForRole\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRole\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   final Hpack.Reader hpackReader;\n   \n  public Http2Reader(BufferedSource source, boolean client) {\n     this.source = source;\n     this.client = client;\n     this.continuation = new ContinuationSource(this.source);", "fixed": "   final Hpack.Reader hpackReader;\n   \n  Http2Reader(BufferedSource source, boolean client) {\n     this.source = source;\n     this.client = client;\n     this.continuation = new ContinuationSource(this.source);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFlatpackEndpointBuilder\n             extends\n                 AdvancedFlatpackEndpointConsumerBuilder, AdvancedFlatpackEndpointProducerBuilder {\n         default FlatpackEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFlatpackEndpointBuilder\n             extends\n                 AdvancedFlatpackEndpointConsumerBuilder, AdvancedFlatpackEndpointProducerBuilder {\n         default FlatpackEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bd1c245cbffa4781672c63d144277bb4e244d7f6", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\tProperties producerProps = new Properties();\n\t\tproducerProps.setProperty(\"max.request.size\", Integer.toString(1024 * 1024 * 14));\n \t\tproducerProps.setProperty(\"retries\", \"3\");\n \t\tproducerProps.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, brokerConnectionStrings);", "fixed": " \t\tProperties producerProps = new Properties();\n\t\tproducerProps.setProperty(\"max.request.size\", Integer.toString(1024 * 1024 * 15));\n \t\tproducerProps.setProperty(\"retries\", \"3\");\n \t\tproducerProps.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, brokerConnectionStrings);", "sourceBeforeFix": "1024 * 1024 * 14", "sourceAfterFix": "1024 * 1024 * 15"}
{"fixCommitSHA1": "bbb27cf272ba5d2dc74f8f21d1d3a92486e27ee1", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": "  */\n class HornetQEmbeddedConfigurationFactory {\n\tprivate Log logger = LogFactory.getLog(HornetQAutoConfiguration.class);\n \tprivate final Embedded properties;", "fixed": "  */\n class HornetQEmbeddedConfigurationFactory {\n\tprivate Log logger = LogFactory.getLog(HornetQEmbeddedConfigurationFactory.class);\n \tprivate final Embedded properties;", "sourceBeforeFix": "HornetQAutoConfiguration.class", "sourceAfterFix": "HornetQEmbeddedConfigurationFactory.class"}
{"fixCommitSHA1": "98c988a5bd57ee4324cc80cf87be5993a00a537b", "projectName": "apache.camel", "bugType": "Change Caller in Function Call", "problem": "         }\n         Map<String, Object> responseModels = IntrospectionSupport.extractProperties(parameters, \"responseModel.\");\n        for (Map.Entry<String, Object> entry : requestModels.entrySet()) {\n             configuration.addResponseModel(\n                 entry.getKey(),\n                 EndpointHelper.resolveParameter(context, (String)entry.getValue(), Class.class));", "fixed": "         }\n         Map<String, Object> responseModels = IntrospectionSupport.extractProperties(parameters, \"responseModel.\");\n        for (Map.Entry<String, Object> entry : responseModels.entrySet()) {\n             configuration.addResponseModel(\n                 entry.getKey(),\n                 EndpointHelper.resolveParameter(context, (String)entry.getValue(), Class.class));", "sourceBeforeFix": "requestModels.entrySet()", "sourceAfterFix": "responseModels.entrySet()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HipchatEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHipchatEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HipchatEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHipchatEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    private static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         String annotation)\n     {\n         if (ast == null) {\n            throw new NullPointerException(\"the ast is null\");\n         }\n         if (annotation == null) {\n            throw new NullPointerException(\"the annotation is null\");\n         }\n         if (StringUtils.isBlank(annotation)) {", "fixed": "         String annotation)\n     {\n         if (ast == null) {\n            throw new IllegalArgumentException(\"the ast is null\");\n         }\n         if (annotation == null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n         }\n         if (StringUtils.isBlank(annotation)) {", "sourceBeforeFix": "new NullPointerException(\"the ast is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the ast is null\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8d14f34eae4cd9efdd00e7db91785935779087b0", "projectName": "hazelcast.hazelcast", "bugType": "Change Caller in Function Call", "problem": "                 }\n             }\n         }\n        if (keys.isEmpty()) {\n             return result;\n         }\n         MapGetAllRequest request = new MapGetAllRequest(name, keySet);", "fixed": "                 }\n             }\n         }\n        if (keySet.isEmpty()) {\n             return result;\n         }\n         MapGetAllRequest request = new MapGetAllRequest(name, keySet);", "sourceBeforeFix": "keys.isEmpty()", "sourceAfterFix": "keySet.isEmpty()"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   \n   ControlFlowGraph<Node> computeCFG() {\n    logger.info(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);", "fixed": "   \n   ControlFlowGraph<Node> computeCFG() {\n    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);", "sourceBeforeFix": "logger.info(\"Strip code\")", "sourceAfterFix": "logger.fine(\"Strip code\")"}
