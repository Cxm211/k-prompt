{"project": "Math", "bugId": 12, "problem": "  * @since 2.0\n  */\n public abstract class BitsStreamGenerator\n    implements RandomGenerator {\n     \n     \n     private double nextGaussian;", "fixed": "  * @since 2.0\n  */\n public abstract class BitsStreamGenerator\n    implements RandomGenerator,\n               Serializable {\n     \n    private static final long serialVersionUID = 20130104L;\n     \n     private double nextGaussian;", "observations": "imports and implements java.io.Serializable.", "repairActions": ["assignAdd", "tyImpInterf", "varAdd"], "repairPatterns": ["notClassified"]}
{"project": "Lang", "bugId": 34, "problem": "      * @return Set the registry of objects being traversed\n      */\n     static Map<Object, Object> getRegistry() {\n        return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n     }\n     /**", "fixed": "      * @return Set the registry of objects being traversed\n      */\n     static Map<Object, Object> getRegistry() {\n        return REGISTRY.get();\n     }\n     /**", "observations": "", "repairActions": ["condBranRem", "mcRem", "retExpChange"], "repairPatterns": ["expLogicExpand", "missNullCheckN", "unwrapIfElse"]}
{"project": "Closure", "bugId": 31, "problem": " Node parseInputs() {\n       if (options.dependencyOptions.needsManagement() &&\n          !options.skipAllPasses &&\n           options.closurePass) {\n         for (CompilerInput input : inputs) {", "fixed": " Node parseInputs() {\n       if (options.dependencyOptions.needsManagement() &&\n           options.closurePass) {\n         for (CompilerInput input : inputs) {", "observations": "", "repairActions": ["condExpRed"], "repairPatterns": ["expLogicReduce", "singleLine"]}
{"project": "Lang", "bugId": 23, "problem": "  */\n public class ExtendedMessageFormat extends MessageFormat {\n     private static final long serialVersionUID = -2362048321261811743L;\n     private static final String DUMMY_PATTERN = \"\";\n     private static final String ESCAPED_QUOTE = \"''\";", "fixed": "  */\n public class ExtendedMessageFormat extends MessageFormat {\n     private static final long serialVersionUID = -2362048321261811743L;\n    private static final int HASH_SEED = 31;\n     private static final String DUMMY_PATTERN = \"\";\n     private static final String ESCAPED_QUOTE = \"''\";", "observations": "Implements equals and hascode to work with hash structures of Collections", "repairActions": ["assignAdd", "condBranIfAdd", "mcAdd", "mdAdd", "mdOverride", "varAdd"], "repairPatterns": ["condBlockRetAdd", "fixAPI", "wrongComp"]}
{"project": "Closure", "bugId": 41, "problem": " FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent,\n     }\n     if (templateTypeName != null && !foundTemplateType) {\n       reportError(TEMPLATE_TYPE_EXPECTED, fnName);", "fixed": " FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent,\n     }\n    if (!isVarArgs) {\n      while (oldParameterType != null && !isVarArgs) {\n        builder.newParameterFromNode(oldParameterType);\n        oldParameterType = oldParameterType.getNext();\n      }\n    }\n     if (templateTypeName != null && !foundTemplateType) {\n       reportError(TEMPLATE_TYPE_EXPECTED, fnName);", "observations": "", "repairActions": ["assignAdd", "condBranIfAdd", "loopAdd", "mcAdd"], "repairPatterns": ["condBlockOthersAdd", "missComp", "missNullCheckN"]}
