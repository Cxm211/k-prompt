{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cdd0fd89f2781fae8b868c7f11b73179d8847cf3", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "         socketSelector.close();\n       } catch (IOException ex) {\n        LOG.warn(\"Unable to close socket selector\", ex);\n       }\n       throw e;\n     } catch (RuntimeException e) {", "fixed": "         socketSelector.close();\n       } catch (IOException ex) {\n        LOG.warn(\"Unable to close socket selector\");\n       }\n       throw e;\n     } catch (RuntimeException e) {", "sourceBeforeFix": "LOG.warn(\"Unable to close socket selector\",ex)", "sourceAfterFix": "LOG.warn(\"Unable to close socket selector\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "06f15a11212c6c77482e92b901a006212231d808", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         timeZone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(timeZoneId));\n     }\n    protected void setup(String host, int port, String databaseName, String timeZone)\n     {\n         setup(host, port, databaseName, timeZone, \"hive-test\", 100, 50);\n     }\n    protected void setup(String host, int port, String databaseName, String timeZoneId, String connectorName, int maxOutstandingSplits, int maxThreads)\n     {\n         setupHive(connectorName, databaseName, timeZoneId);", "fixed": "         timeZone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(timeZoneId));\n     }\n    protected final void setup(String host, int port, String databaseName, String timeZone)\n     {\n         setup(host, port, databaseName, timeZone, \"hive-test\", 100, 50);\n     }\n    protected final void setup(String host, int port, String databaseName, String timeZoneId, String connectorName, int maxOutstandingSplits, int maxThreads)\n     {\n         setupHive(connectorName, databaseName, timeZoneId);", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"fixCommitSHA1": "4a6e698536006e6ea9b0680756d9390b96ba278b", "projectName": "gephi.gephi", "bugType": "Less Specific If", "problem": "         if (streamTokenizer.ttype == ']' || streamTokenizer.ttype == StreamTokenizer.TT_EOF) {\n             return;\n        } else if (streamTokenizer.ttype == StreamTokenizer.TT_WORD) {\n             if (streamTokenizer.sval.equalsIgnoreCase(\"label\")) {\n                 streamTokenizer.nextToken();\n                 if (streamTokenizer.ttype == '=') {", "fixed": "         if (streamTokenizer.ttype == ']' || streamTokenizer.ttype == StreamTokenizer.TT_EOF) {\n             return;\n        } else if (streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '\"') {\n             if (streamTokenizer.sval.equalsIgnoreCase(\"label\")) {\n                 streamTokenizer.nextToken();\n                 if (streamTokenizer.ttype == '=') {", "sourceBeforeFix": "streamTokenizer.ttype == StreamTokenizer.TT_WORD", "sourceAfterFix": "streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '\"'"}
{"fixCommitSHA1": "26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n        } else if (that.getDomain() == null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());", "fixed": "         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n        } else if (that.getDomain() == null && getDomain() != null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());", "sourceBeforeFix": "c.getDomain() == null", "sourceAfterFix": "c.getDomain() == null && getDomain() != null"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         super(name, service.getNodeEngine());\n         this.partitionId = partitionId;\n         this.lockNamespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n         this.lockStore = lockService == null ? null : lockService.createLockStore(partitionId, lockNamespace);\n         this.creationTime = currentTimeMillis();\n     }", "fixed": "         super(name, service.getNodeEngine());\n         this.partitionId = partitionId;\n         this.lockNamespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         this.lockStore = lockService == null ? null : lockService.createLockStore(partitionId, lockNamespace);\n         this.creationTime = currentTimeMillis();\n     }", "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "ef7957f008f98491c3c525a224fec9107dca9179", "projectName": "apache.flink", "bugType": "More Specific If", "problem": " \t@Override\n \tpublic InstanceID registerTaskManager(InstanceConnectionInfo instanceConnectionInfo, HardwareDescription hardwareDescription, int numberOfSlots) {\n\t\tif (this.instanceManager != null) {\n \t\t\treturn this.instanceManager.registerTaskManager(instanceConnectionInfo, hardwareDescription, numberOfSlots);\n \t\t} else {\n \t\t\treturn null;", "fixed": " \t@Override\n \tpublic InstanceID registerTaskManager(InstanceConnectionInfo instanceConnectionInfo, HardwareDescription hardwareDescription, int numberOfSlots) {\n\t\tif (this.instanceManager != null && this.scheduler != null) {\n \t\t\treturn this.instanceManager.registerTaskManager(instanceConnectionInfo, hardwareDescription, numberOfSlots);\n \t\t} else {\n \t\t\treturn null;", "sourceBeforeFix": "this.instanceManager != null", "sourceAfterFix": "this.instanceManager != null && this.scheduler != null"}
{"fixCommitSHA1": "70fd3ee0bcb1f42ecbdacb5164990becbc43d99a", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "     @Override\n     public AsyncIOWriter write(AtmosphereResponse response, String data) throws IOException {\n        return write(response, data.getBytes());\n     }\n     @Override", "fixed": "     @Override\n     public AsyncIOWriter write(AtmosphereResponse response, String data) throws IOException {\n        return write(response, data.getBytes(response.getCharacterEncoding()));\n     }\n     @Override", "sourceBeforeFix": "data.getBytes()", "sourceAfterFix": "data.getBytes(response.getCharacterEncoding())"}
{"fixCommitSHA1": "d33c0ebf8f8f52fb6fb82d615cec50a10627d267", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n\t\t\tthis.port = port.toString();\n \t\t}\n\t\tpublic String getPort() {\n \t\t\treturn this.port;\n \t\t}", "fixed": " \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n\t\t\tthis.port = port;\n \t\t}\n\t\tpublic Integer getPort() {\n \t\t\treturn this.port;\n \t\t}", "sourceBeforeFix": "/**   * SSH port.  */ private String port=\"2000\"; ", "sourceAfterFix": "/**   * SSH port.  */ private Integer port=2000; "}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "a4662237bc467310f0dc1c28aa621f84571225b1", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "   @Deployment(resources = \"org/activiti/engine/test/api/event/JobEventsTest.testJobCanceledEventOnBoundaryEvent.bpmn20.xml\")\n   public void testJobCanceledEventByManagementService() throws Exception {\n    processEngineConfiguration.getClock().setCurrentTime(new Date(0));\n     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"testTimerCancelledEvent\");\n     listener.clearEventsReceived();", "fixed": "   @Deployment(resources = \"org/activiti/engine/test/api/event/JobEventsTest.testJobCanceledEventOnBoundaryEvent.bpmn20.xml\")\n   public void testJobCanceledEventByManagementService() throws Exception {\n    processEngineConfiguration.getClock().setCurrentTime(new Date(1));\n     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"testTimerCancelledEvent\");\n     listener.clearEventsReceived();", "sourceBeforeFix": "new Date(0)", "sourceAfterFix": "new Date(1)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "30f6eccf25ce33da6bd20f4ec8ea99dc5c3f3260", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "      * Creates indexes according to the index definitions stored inside this\n      * indexes.\n      */\n    public void createIndexesFromRecordedDefinitions() {\n         for (Map.Entry<String, Boolean> definition : definitions.entrySet()) {\n            addOrGetIndex(definition.getKey(), definition.getValue());\n         }\n         definitions.clear();\n     }", "fixed": "      * Creates indexes according to the index definitions stored inside this\n      * indexes.\n      */\n    public void createIndexesFromRecordedDefinitions(StoreAdapter partitionStoreAdapter) {\n         for (Map.Entry<String, Boolean> definition : definitions.entrySet()) {\n            addOrGetIndex(definition.getKey(), definition.getValue(), partitionStoreAdapter);\n         }\n         definitions.clear();\n     }", "sourceBeforeFix": "addOrGetIndex(definition.getKey(),definition.getValue())", "sourceAfterFix": "addOrGetIndex(definition.getKey(),definition.getValue(),partitionStoreAdapter)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * @param lineNumber\n          *        import line number.\n          */\n        public void setLineNumber(int lineNumber) {\n             this.lineNumber = lineNumber;\n         }", "fixed": "          * @param lineNumber\n          *        import line number.\n          */\n        public final void setLineNumber(int lineNumber) {\n             this.lineNumber = lineNumber;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       return false;\n     }\n     if (!info.isOffline()) {\n      LOG.warn(\"Region is split but not offline: \" + info.getRegionName());\n     }\n     return true;\n   }", "fixed": "       return false;\n     }\n     if (!info.isOffline()) {\n      LOG.warn(\"Region is split but not offline: \" +\n        info.getRegionNameAsString());\n     }\n     return true;\n   }", "sourceBeforeFix": "parent.getRegionName()", "sourceAfterFix": "parent.getRegionNameAsString()"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n     final Map<String, Integer> cssNames;", "fixed": "   \n  public static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n     final Map<String, Integer> cssNames;", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fa5635c39e3000406103657977b98efa79bd4512", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "fixed": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "sourceBeforeFix": "conf.getSearchBaseURL()", "sourceAfterFix": "conf.getRestBaseURL()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f9374238b2870cad6c090589ec18933983e1c902", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "     \n    public class Tag implements Comparable<Tag>\n     {\n         \n         private final String text;", "fixed": "     \n    public static class Tag implements Comparable<Tag>\n     {\n         \n         private final String text;", "sourceBeforeFix": "new Tag(text,line)", "sourceAfterFix": "new Tag(text,line,this)"}
{"fixCommitSHA1": "cade2271924f42b35da72efa4ad6b2eebc9875cd", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Modifier", "problem": "    *\n    * @param dictPath the path to the dictionary file\n    */\n  private HashMap<String, String> setupDictionary(String dictPath) {\n     HashMap<String, String> dictionary = new HashMap<>();\n     BufferedReader br = null;\n     try {", "fixed": "    *\n    * @param dictPath the path to the dictionary file\n    */\n  private static HashMap<String, String> setupDictionary(String dictPath) {\n     HashMap<String, String> dictionary = new HashMap<>();\n     BufferedReader br = null;\n     try {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "23efcad891c91fc131ed4729c734ff6b122197df", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnExecution() throws Exception {\n\t\tString processDefinitionId = deployOneTaskProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal CyclicBarrier startBarrier = new CyclicBarrier(2);", "fixed": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnExecution() throws Exception {\n\t\tString processDefinitionId = deployOneTaskTestProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal CyclicBarrier startBarrier = new CyclicBarrier(2);", "sourceBeforeFix": "deployOneTaskProcess()", "sourceAfterFix": "deployOneTaskTestProcess()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the\n \t *                     input view, which may have an underlying I/O channel from which it reads.\n \t */\n\tpublic void deserialize(T target, DataInputView source) throws IOException;\n \t/**\n \t * Copies exactly one record from the source input view to the target output view. Whether this operation", "fixed": " \t * @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the\n \t *                     input view, which may have an underlying I/O channel from which it reads.\n \t */\n\tpublic abstract void deserialize(T target, DataInputView source) throws IOException;\n \t/**\n \t * Copies exactly one record from the source input view to the target output view. Whether this operation", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "8f235043a979aa4a0795b1c36c34a1ea3d03a3ae", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "             }\n         }\n        if (StringUtils.isEmpty(formKey)) {\n             finalFormKey = formKey;\n         }", "fixed": "             }\n         }\n        if (StringUtils.isEmpty(finalFormKey)) {\n             finalFormKey = formKey;\n         }", "sourceBeforeFix": "StringUtils.isEmpty(formKey)", "sourceAfterFix": "StringUtils.isEmpty(finalFormKey)"}
{"fixCommitSHA1": "6d760c0089645e220355f70b258dbfadb86a055e", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                 cache = b.getBroadcasterConfig().getBroadcasterCache();\n                 List<Object> t = cache.retrieveFromCache(b.getID(), r);\n                cachedMessages = b.getBroadcasterConfig().applyFilters(r, t);\n                 if (t.size() > 0) {\n                     logger.trace(\"Found Cached Messages For AtmosphereResource {} with Broadcaster {}\", r.uuid(), broadcasterID);\n                     cachedMessages.addAll(t);", "fixed": "                 cache = b.getBroadcasterConfig().getBroadcasterCache();\n                 List<Object> t = cache.retrieveFromCache(b.getID(), r);\n                t = b.getBroadcasterConfig().applyFilters(r, t);\n                 if (t.size() > 0) {\n                     logger.trace(\"Found Cached Messages For AtmosphereResource {} with Broadcaster {}\", r.uuid(), broadcasterID);\n                     cachedMessages.addAll(t);", "sourceBeforeFix": "cachedMessages=b.getBroadcasterConfig().applyFilters(r,t)", "sourceAfterFix": "t=b.getBroadcasterConfig().applyFilters(r,t)"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n     private String getJSDocTypeWithBraces(CodegenOperation co) {\n         String jsDocType = getJSDocType(co);\n         return jsDocType == null ? null : \"{\" + jsDocType + \"}\";\n     }\n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);", "fixed": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n    \n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);", "sourceBeforeFix": "getJSDocTypeWithBraces(cm,var)", "sourceAfterFix": "getJSDocType(cm,var)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e644b26706f629425854e325bbb6efb8df6d9862", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     try {\n       parentUri =\n           new URI(parentUri.getScheme(), parentUri.getAuthority(),\n              parentUri.getPath() + SEPARATOR, null);\n     } catch (URISyntaxException e) {\n       throw new IllegalArgumentException(e);\n     }", "fixed": "     try {\n       parentUri =\n           new URI(parentUri.getScheme(), parentUri.getAuthority(),\n              parentUri.getPath() + SEPARATOR, null, null);\n     } catch (URISyntaxException e) {\n       throw new IllegalArgumentException(e);\n     }", "sourceBeforeFix": "new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null)", "sourceAfterFix": "new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null,null)"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "7c3ad0194c2aa495bf464f68e0da6622733b4430", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": " public final class TtlBucket implements Comparable<TtlBucket> {\n   \n   private static long sTtlIntervalMs =\n      Configuration.getInt(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS);\n   /**\n    * Each bucket has a time to live interval, this value is the start of the interval, interval\n* value is the same as the configuration of {@link PropertyKey", "fixed": " public final class TtlBucket implements Comparable<TtlBucket> {\n   \n   private static long sTtlIntervalMs =\n      Configuration.getMs(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS);\n   /**\n    * Each bucket has a time to live interval, this value is the start of the interval, interval\n* value is the same as the configuration of {@link PropertyKey", "sourceBeforeFix": "Configuration.getInt(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d4394e3727c822cd62e1e916335493df61ee409d", "projectName": "alibaba.fastjson", "bugType": "More Specific If", "problem": "         mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeFieldName\", \"(Ljava/lang/String;Z)V\");\n         Label classIfEnd_ = new Label(), classIfElse_ = new Label();\n        if (!ParserConfig.isPrimitive(fieldClass)) {\n             mw.visitVarInsn(ALOAD, context.var(\"object\"));\n             mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Object\", \"getClass\", \"()Ljava/lang/Class;\");\n             mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(fieldClass)));", "fixed": "         mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeFieldName\", \"(Ljava/lang/String;Z)V\");\n         Label classIfEnd_ = new Label(), classIfElse_ = new Label();\n        if (Modifier.isPublic(fieldClass.getModifiers()) && !ParserConfig.isPrimitive(fieldClass)) {\n             mw.visitVarInsn(ALOAD, context.var(\"object\"));\n             mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Object\", \"getClass\", \"()Ljava/lang/Class;\");\n             mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(fieldClass)));", "sourceBeforeFix": "elementClass != null", "sourceAfterFix": "elementClass != null && Modifier.isPublic(elementClass.getModifiers())"}
{"fixCommitSHA1": "8c69c5f4aece3330100e4ad9d4d98887db691141", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     @Test\n     public void testGrabbingListOfEntries() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(1);\n         mock.assertIsSatisfied();\n         Exchange exchange = mock.getExchanges().get(0);", "fixed": "     @Test\n     public void testGrabbingListOfEntries() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(1);\n         mock.assertIsSatisfied();\n         Exchange exchange = mock.getExchanges().get(0);", "sourceBeforeFix": "mock.expectedMessageCount(1)", "sourceAfterFix": "mock.expectedMinimumMessageCount(1)"}
{"fixCommitSHA1": "fd2bf7d972c703a603f7ec043b96649347f7e184", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "         httpClientBinder(binder).bindHttpClient(\"memoryManager\", ForMemoryManager.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(2, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                 });", "fixed": "         httpClientBinder(binder).bindHttpClient(\"memoryManager\", ForMemoryManager.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(30, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                 });", "sourceBeforeFix": "new Duration(2,SECONDS)", "sourceAfterFix": "new Duration(30,SECONDS)"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "250487e835b390d164789fcb58ba946e3c77ef22", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     \n     public Object lookupLink(String name) throws NamingException {\n        return lookup(parseName(name));\n     }\n     ", "fixed": "     \n     public Object lookupLink(String name) throws NamingException {\n        return lookupLink(parseName(name));\n     }\n     ", "sourceBeforeFix": "lookup(parseName(name))", "sourceAfterFix": "lookupLink(parseName(name))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HdfsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHdfsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HdfsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHdfsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2ea202704a509c0bea14438beb65443f33517ebc", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "                 ShellMsg shellMsg = _process.readShellMsg();\n                 String command = shellMsg.getCommand();\n                 if (command == null) {\n                    throw new UnsupportedOperationException(\"Command not found in spout message: \" + shellMsg);\n                 }\n                 if (command.equals(\"sync\")) {\n                     return;", "fixed": "                 ShellMsg shellMsg = _process.readShellMsg();\n                 String command = shellMsg.getCommand();\n                 if (command == null) {\n                    throw new IllegalArgumentException(\"Command not found in spout message: \" + shellMsg);\n                 }\n                 if (command.equals(\"sync\")) {\n                     return;", "sourceBeforeFix": "new UnsupportedOperationException(\"Command not found in spout message: \" + shellMsg)", "sourceAfterFix": "new IllegalArgumentException(\"Command not found in spout message: \" + shellMsg)"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Wrong Function Name", "problem": "             for (CodegenProperty var : cm.vars) {\n                String jsDocType = getJSDocTypeWithBraces(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n                 if (Boolean.TRUE.equals(var.required)) {", "fixed": "             for (CodegenProperty var : cm.vars) {\n                String jsDocType = getJSDocType(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n                 if (Boolean.TRUE.equals(var.required)) {", "sourceBeforeFix": "getJSDocTypeWithBraces(cp)", "sourceAfterFix": "getJSDocType(cp)"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   private void externExports() {\n    logger.info(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n     ExternExportsPass pass = new ExternExportsPass(this);", "fixed": "   }\n   private void externExports() {\n    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n     ExternExportsPass pass = new ExternExportsPass(this);", "sourceBeforeFix": "logger.info(\"Normalizing\")", "sourceAfterFix": "logger.fine(\"Normalizing\")"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\tfield.setAccessible(true);\r\n \t\t\t\tfield.set(cacheManager, null);\r\n \t\t\t}\r\n\t\t\tcatch (Throwable ex) {\r\n \t\t\t\tlog.error(ex.getMessage(), ex);\r\n \t\t\t}\r\n \t\t}\r", "fixed": " \t\t\t\tfield.setAccessible(true);\r\n \t\t\t\tfield.set(cacheManager, null);\r\n \t\t\t}\r\n\t\t\tcatch (Exception ex) {\r\n \t\t\t\tlog.error(ex.getMessage(), ex);\r\n \t\t\t}\r\n \t\t}\r", "sourceBeforeFix": "Throwable ex", "sourceAfterFix": "Exception ex"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2fbef41e3fcea14dcfc1bdaa0e6e103e246c3f90", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "     public void testGetAuthenticatedUser() throws Exception {\n         assertEquals(id1, twitterAPI1.getAuthenticatedUser().getScreenName());\n         assertEquals(id1, new Twitter(id3, pass3).getAuthenticatedUser().getName());\n        assertEquals(id3,new Twitter(id3, pass3).verifyCredentials().getName());\n     }", "fixed": "     public void testGetAuthenticatedUser() throws Exception {\n         assertEquals(id1, twitterAPI1.getAuthenticatedUser().getScreenName());\n         assertEquals(id1, new Twitter(id3, pass3).getAuthenticatedUser().getName());\n        assertEquals(id1,new Twitter(id3, pass3).verifyCredentials().getName());\n     }", "sourceBeforeFix": "assertEquals(id3,new Twitter(id3,pass3).verifyCredentials().getName())", "sourceAfterFix": "assertEquals(id1,new Twitter(id3,pass3).verifyCredentials().getName())"}
{"fixCommitSHA1": "3b4ff661c53e36133d3d287908592029d97d66f1", "projectName": "jersey.jersey", "bugType": "Change Numeric Literal", "problem": "     @Override\n     protected void configureClient(ClientConfig clientConfig) {\n        clientConfig.property(ClientProperties.READ_TIMEOUT, 1000);\n     }\n     @Test", "fixed": "     @Override\n     protected void configureClient(ClientConfig clientConfig) {\n        clientConfig.property(ClientProperties.READ_TIMEOUT, 2000);\n     }\n     @Test", "sourceBeforeFix": "clientConfig.property(ClientProperties.READ_TIMEOUT,1000)", "sourceAfterFix": "clientConfig.property(ClientProperties.READ_TIMEOUT,2000)"}
{"fixCommitSHA1": "cacf2a379205edcff9a11fa124a13578fe6713e3", "projectName": "jersey.jersey", "bugType": "Same Function More Args", "problem": "             try {\n                 commitStream();\n             } catch (IOException e) {\n                LOGGER.log(Level.SEVERE, LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM());\n             }\n         }\n     }", "fixed": "             try {\n                 commitStream();\n             } catch (IOException e) {\n                LOGGER.log(Level.SEVERE, LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM(), e);\n             }\n         }\n     }", "sourceBeforeFix": "LOGGER.log(Level.SEVERE,LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM())", "sourceAfterFix": "LOGGER.log(Level.SEVERE,LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM(),e)"}
{"fixCommitSHA1": "34a77d610669e59e9d5ab77c47908f907806e05f", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY, testUser, testUser, files[3].getPermission(),", "fixed": "         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY, testUser, testUser, files[3].getPermission(),", "sourceBeforeFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)", "sourceAfterFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGrpcEndpointBuilder\n             extends\n                 AdvancedGrpcEndpointConsumerBuilder, AdvancedGrpcEndpointProducerBuilder {\n         default GrpcEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGrpcEndpointBuilder\n             extends\n                 AdvancedGrpcEndpointConsumerBuilder, AdvancedGrpcEndpointProducerBuilder {\n         default GrpcEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "8877ee97143e1eed99029be50bc62cc25c86d7e5", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "           }\n         },\n         factory,\n        Arrays.asList(new TimeBoundaryTieredBrokerSelectorStrategy(), new PriorityTieredBrokerSelectorStrategy(0, 1))\n     );\n     EasyMock.expect(factory.createSelector(EasyMock.<String>anyObject())).andReturn(selector).atLeastOnce();\n     EasyMock.replay(factory);", "fixed": "           }\n         },\n         factory,\n        Arrays.asList(new TimeBoundaryTieredBrokerSelectorStrategy(), new PriorityTieredBrokerSelectorStrategy(1, 1))\n     );\n     EasyMock.expect(factory.createSelector(EasyMock.<String>anyObject())).andReturn(selector).atLeastOnce();\n     EasyMock.replay(factory);", "sourceBeforeFix": "new PriorityTieredBrokerSelectorStrategy(0,1)", "sourceAfterFix": "new PriorityTieredBrokerSelectorStrategy(1,1)"}
{"fixCommitSHA1": "586c8eda959300c12504bda3c404b117dace13bd", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t   if (Gdx.app.getType() == ApplicationType.iOS) {\r\n \t\t     IntBuffer intbuf = ByteBuffer.allocateDirect(16 * Integer.SIZE / 8).order(ByteOrder.nativeOrder()).asIntBuffer();\r\n \t\t     gl.glGetIntegerv(GL20.GL_FRAMEBUFFER_BINDING, intbuf);\r\n\t\t     defaultFramebufferHandle = intbuf.get();\r\n \t\t   }\r\n \t\t   else {\r\n \t\t     defaultFramebufferHandle = 0;\r", "fixed": " \t\t   if (Gdx.app.getType() == ApplicationType.iOS) {\r\n \t\t     IntBuffer intbuf = ByteBuffer.allocateDirect(16 * Integer.SIZE / 8).order(ByteOrder.nativeOrder()).asIntBuffer();\r\n \t\t     gl.glGetIntegerv(GL20.GL_FRAMEBUFFER_BINDING, intbuf);\r\n\t\t     defaultFramebufferHandle = intbuf.get(0);\r\n \t\t   }\r\n \t\t   else {\r\n \t\t     defaultFramebufferHandle = 0;\r", "sourceBeforeFix": "intbuf.get()", "sourceAfterFix": "intbuf.get(0)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMQTTEndpointBuilder\n             extends\n                 AdvancedMQTTEndpointConsumerBuilder, AdvancedMQTTEndpointProducerBuilder {\n         default MQTTEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMQTTEndpointBuilder\n             extends\n                 AdvancedMQTTEndpointConsumerBuilder, AdvancedMQTTEndpointProducerBuilder {\n         default MQTTEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "aa82999d9d18f5c818216aac842929c02ab86be9", "projectName": "hazelcast.hazelcast", "bugType": "Less Specific If", "problem": "                     }\n                 }\n             }\n            if (serverSocket == null) {\n                 throw new HazelcastException(\"ServerSocket bind has failed. Hazelcast cannot start! \" +\n                         \"config-port: \" + networkConfig.getPort() + \", latest-port: \" + port, error);\n             }", "fixed": "                     }\n                 }\n             }\n            if (serverSocket == null || !serverSocket.isBound()) {\n                 throw new HazelcastException(\"ServerSocket bind has failed. Hazelcast cannot start! \" +\n                         \"config-port: \" + networkConfig.getPort() + \", latest-port: \" + port, error);\n             }", "sourceBeforeFix": "serverSocket == null", "sourceAfterFix": "serverSocket == null || !serverSocket.isBound()"}
{"fixCommitSHA1": "f6b33ebf179c7d5c0ddf16449374dcfb2c55d7df", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         checkDir(new File(\"src/test/resources/com/puppycrawl/tools/checkstyle\"));\n     }\n    private void checkDir(File dir) throws Exception {\n         File[] files = dir.listFiles(new FileFilter() {\n                 @Override\n                 public boolean accept(File file) {", "fixed": "         checkDir(new File(\"src/test/resources/com/puppycrawl/tools/checkstyle\"));\n     }\n    private static void checkDir(File dir) throws Exception {\n         File[] files = dir.listFiles(new FileFilter() {\n                 @Override\n                 public boolean accept(File file) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 19:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 19:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "4de7095031109d5fddc611d5e8158c43562e57f6", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "     String status = jedis.set(bfoo, binaryValue);\n     assertTrue(Keyword.OK.name().equalsIgnoreCase(status));\n    String statusSuccess = jedis.set(bfoo, binaryValue, setParams().nx().ex(expireSeconds));\n     assertTrue(Keyword.OK.name().equalsIgnoreCase(statusSuccess));\n     byte[] value = jedis.get(bfoo);", "fixed": "     String status = jedis.set(bfoo, binaryValue);\n     assertTrue(Keyword.OK.name().equalsIgnoreCase(status));\n    String statusSuccess = jedis.set(bfoo, binaryValue, setParams().xx().ex(expireSeconds));\n     assertTrue(Keyword.OK.name().equalsIgnoreCase(statusSuccess));\n     byte[] value = jedis.get(bfoo);", "sourceBeforeFix": "setParams().nx()", "sourceAfterFix": "setParams().xx()"}
{"fixCommitSHA1": "48b99e43fca1306ba54dad61bdacd4259673552b", "projectName": "druid-io.druid", "bugType": "Change Caller in Function Call", "problem": "     synchronized (lock) {\n       if (segmentsToDrop.contains(holder)) {\n         if (callback != null) {\n          currentlyProcessing.addCallback(callback);\n         }\n         return;\n       }", "fixed": "     synchronized (lock) {\n       if (segmentsToDrop.contains(holder)) {\n         if (callback != null) {\n          holder.addCallback(callback);\n         }\n         return;\n       }", "sourceBeforeFix": "currentlyProcessing.addCallback(callback)", "sourceAfterFix": "holder.addCallback(callback)"}
{"fixCommitSHA1": "780a95c41d5d9ddafe1a237628183020746825a8", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * before growing the backing table. */\r\n \tpublic ObjectIntMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "fixed": " \t * before growing the backing table. */\r\n \tpublic ObjectIntMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FtpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFtpEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface FtpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFtpEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "79f0eb86f6a56f04c139af05ae1e74f04af856cc", "projectName": "neo4j.neo4j", "bugType": "Change Modifier", "problem": "         private String untilNonAlfa( int start )\n         {\n             int end = start;\n            while ( Character.isLetter( pattern.charAt( end ) ) )\n             {\n                 end++;\n             }", "fixed": "         private String untilNonAlfa( int start )\n         {\n             int end = start;\n            while ( end < pattern.length() && Character.isLetter( pattern.charAt( end ) ) )\n             {\n                 end++;\n             }", "sourceBeforeFix": "2", "sourceAfterFix": "18"}
{"fixCommitSHA1": "83f58a38a06e424cc74c9d4035bf552df731fe65", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "     @Override\n     public boolean isSingleton() {\n        return false;\n     }\n }", "fixed": "     @Override\n     public boolean isSingleton() {\n        return true;\n     }\n }", "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MyBatisEndpointBuilder\n             extends\n                 MyBatisEndpointConsumerBuilder, MyBatisEndpointProducerBuilder {\n         default AdvancedMyBatisEndpointBuilder advanced() {", "fixed": "     \n    public interface MyBatisEndpointBuilder\n             extends\n                 MyBatisEndpointConsumerBuilder, MyBatisEndpointProducerBuilder {\n         default AdvancedMyBatisEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2495de4bdb4f644f5d5e254678ffd63d6a609876", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": " import java.util.logging.Logger;\n public class JcaBase {\n    protected static Logger logger = Logger.getLogger(JcaBase.class.getName());\n     public void log(final Object caller, final Object msg) {\n         logger.log(Level.FINEST, caller + \" : \" + msg);", "fixed": " import java.util.logging.Logger;\n public class JcaBase {\n    protected static final Logger logger = Logger.getLogger(JcaBase.class.getName());\n     public void log(final Object caller, final Object msg) {\n         logger.log(Level.FINEST, caller + \" : \" + msg);", "sourceBeforeFix": "12", "sourceAfterFix": "28"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": "     logger.debug(\"got a query\");\n     if (!isProperlyConfigured) {\n      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n       return Collections.emptyList();\n     }\n     if (!isConnected()) {\n      logger.error(\"InfluxDB is not yet connected\");\n       return Collections.emptyList();\n     }", "fixed": "     logger.debug(\"got a query\");\n     if (!isProperlyConfigured) {\n      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return Collections.emptyList();\n     }\n     if (!isConnected()) {\n      logger.warn(\"InfluxDB is not yet connected\");\n       return Collections.emptyList();\n     }", "sourceBeforeFix": "logger.error(\"Configuration for influxdb not yet loaded or broken.\")", "sourceAfterFix": "logger.warn(\"Configuration for influxdb not yet loaded or broken.\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleSheetsStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedGoogleSheetsStreamEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleSheetsStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedGoogleSheetsStreamEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   }\n   void recordFunctionInformation() {\n    logger.info(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(", "fixed": "   }\n   void recordFunctionInformation() {\n    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(", "sourceBeforeFix": "logger.info(\"Computing Control Flow Graph\")", "sourceAfterFix": "logger.fine(\"Computing Control Flow Graph\")"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (Throwable t) {\n \t\t\t\t\t\t\t\tif (log.isDebugEnabled()) {\n \t\t\t\t\t\t\t\t\tlog.debug(\"Could not set field \" + field.getName() + \" to null in class \"\n \t\t\t\t\t\t\t\t\t        + clazz.getName(), t);", "fixed": " \t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (Exception t) {\n \t\t\t\t\t\t\t\tif (log.isDebugEnabled()) {\n \t\t\t\t\t\t\t\t\tlog.debug(\"Could not set field \" + field.getName() + \" to null in class \"\n \t\t\t\t\t\t\t\t\t        + clazz.getName(), t);", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "86e029a92431fddb2c33ea7c1ef486503df3c649", "projectName": "Bukkit.Bukkit", "bugType": "Same Function More Args", "problem": "         byte[] result = new byte[temp.getWidth() * temp.getHeight()];\n         for (int i = 0; i < pixels.length; i++) {\n            result[i] = matchColor(new Color(pixels[i]));\n         }\n         return result;\n     }", "fixed": "         byte[] result = new byte[temp.getWidth() * temp.getHeight()];\n         for (int i = 0; i < pixels.length; i++) {\n            result[i] = matchColor(new Color(pixels[i], true));\n         }\n         return result;\n     }", "sourceBeforeFix": "new Color(pixels[i])", "sourceAfterFix": "new Color(pixels[i],true)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e90c2eeedb70da6a3ca0d27a048b4752a5dc16e1", "projectName": "google.closure-compiler", "bugType": "Same Function Swap Args", "problem": "         .insertBefore(error.node, \"!\")\n         .setDescription(\"Make type non-nullable\")\n         .build();\n    return ImmutableList.of(qmark, bang);\n   }\n   private static SuggestedFix removeNode(JSError error) {", "fixed": "         .insertBefore(error.node, \"!\")\n         .setDescription(\"Make type non-nullable\")\n         .build();\n    return ImmutableList.of(bang, qmark);\n   }\n   private static SuggestedFix removeNode(JSError error) {", "sourceBeforeFix": "ImmutableList.of(qmark,bang)", "sourceAfterFix": "ImmutableList.of(bang,qmark)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytesBinary(tableNameOrRegionName), Bytes.toBytesBinary(splitPoint));\n   }\n   /**", "fixed": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytes(tableNameOrRegionName), Bytes.toBytes(splitPoint));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n        return Float.valueOf(value.toString());\n     }\n     @Override", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n        return Float.parseFloat(value.toString());\n     }\n     @Override", "sourceBeforeFix": "Double.valueOf(value.toString())", "sourceAfterFix": "Double.parseDouble(value.toString())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username);\n     @GET\n     @Path(\"/login\")", "fixed": "         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username) throws Exception;\n     @GET\n     @Path(\"/login\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "f9374238b2870cad6c090589ec18933983e1c902", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      */\n     private void addTag(String text, int line, int column, boolean on)\n     {\n        final Tag tag = new Tag(line, column, text, on);\n         tags.add(tag);\n     }\n }", "fixed": "      */\n     private void addTag(String text, int line, int column, boolean on)\n     {\n        final Tag tag = new Tag(line, column, text, on, this);\n         tags.add(tag);\n     }\n }", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "0f28095f9f79b49d45905e61709ff4fab6fedd54", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \tpublic Appendable append(CharSequence csq, int start, int end) {\n \t\tfinal int otherLen = end - start;\n \t\tgrow(this.len + otherLen);\n\t\tfor (int pos = start; pos < len; pos++)\n \t\t\tthis.value[this.len + pos] = csq.charAt(pos);\n \t\tthis.len += otherLen;\n \t\treturn this;", "fixed": " \tpublic Appendable append(CharSequence csq, int start, int end) {\n \t\tfinal int otherLen = end - start;\n \t\tgrow(this.len + otherLen);\n\t\tfor (int pos = start; pos < end; pos++)\n \t\t\tthis.value[this.len + pos] = csq.charAt(pos);\n \t\tthis.len += otherLen;\n \t\treturn this;", "sourceBeforeFix": "pos < len", "sourceAfterFix": "pos < end"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.valueOf(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "fixed": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "sourceBeforeFix": "Long.valueOf(timeout)", "sourceAfterFix": "Long.parseLong(timeout)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastRingbufferEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default HazelcastRingbufferEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastRingbufferEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default HazelcastRingbufferEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5d40c31aa7c36597ce311bca7da61a0e2773e7d2", "projectName": "openhab.openhab", "bugType": "Change Unary Operator\t", "problem": " \t\t\t\t\tlogger.debug(\"NODE {}: DEAD node.\", node.getNodeId());\n\t\t\t\t\tif(isNodeHealing(node.getNodeId())) {\n \t\t\t\t\t\tlogger.debug(\"NODE {}: DEAD node - requesting network heal.\", node.getNodeId());\n \t\t\t\t\t\thealNode(node.getNodeId());", "fixed": " \t\t\t\t\tlogger.debug(\"NODE {}: DEAD node.\", node.getNodeId());\n\t\t\t\t\tif(!isNodeHealing(node.getNodeId())) {\n \t\t\t\t\t\tlogger.debug(\"NODE {}: DEAD node - requesting network heal.\", node.getNodeId());\n \t\t\t\t\t\thealNode(node.getNodeId());", "sourceBeforeFix": "isNodeHealing(node.getNodeId())", "sourceAfterFix": "!isNodeHealing(node.getNodeId())"}
{"fixCommitSHA1": "7907f476688eb48f9b46434e90ef0bb02c1ea5d5", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     void joinReset() {\r\n         joinInProgress = false;\r\n         setJoins.clear();\r\n        timeToStartJoin = System.currentTimeMillis() + WAIT_SECONDS_BEFORE_JOIN + 1000;\r\n     }\r\n     public class AsyncRemotelyObjectCallable extends TargetAwareOp {\r", "fixed": "     void joinReset() {\r\n         joinInProgress = false;\r\n         setJoins.clear();\r\n        timeToStartJoin = System.currentTimeMillis() + WAIT_MILLIS_BEFORE_JOIN;\r\n     }\r\n     public class AsyncRemotelyObjectCallable extends TargetAwareOp {\r", "sourceBeforeFix": "System.currentTimeMillis() + WAIT_SECONDS_BEFORE_JOIN + 1000", "sourceAfterFix": "System.currentTimeMillis() + WAIT_MILLIS_BEFORE_JOIN"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t\tif (!nsDictionary.writeToFileAtomically(file.getAbsolutePath(), false)) {\r\n \t\t\tGdx.app.debug(\"IOSPreferences\", \"Failed to write NSDictionary to file \" + file);\r\n \t\t}\r\n\t\tpool.dealloc();\r\n \t}\r\n }\r", "fixed": " \t\tif (!nsDictionary.writeToFileAtomically(file.getAbsolutePath(), false)) {\r\n \t\t\tGdx.app.debug(\"IOSPreferences\", \"Failed to write NSDictionary to file \" + file);\r\n \t\t}\r\n\t\tpool.drain();\r\n \t}\r\n }\r", "sourceBeforeFix": "NSNumber.numberWithLong(val)", "sourceAfterFix": "NSNumber.numberWithLongLong(val)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n \t/**\n \t * @param aClass class of object getting length for", "fixed": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t/**\n \t * @param aClass class of object getting length for", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d80d48fcf4b812f5b4d5df3f4cd65e310dbc35a1", "projectName": "openmrs.openmrs-core", "bugType": "Same Function More Args", "problem": " \t\t\t\t}\r\n\t\t\t\tthrow new CustomChangeException(\"Failed to insert one or more concept map types\");\r\n \t\t\t}\r\n \t\t}\r\n \t\tcatch (DatabaseException e) {\r", "fixed": " \t\t\t\t}\r\n\t\t\t\tthrow new CustomChangeException(\"Failed to insert one or more concept map types\", be);\r\n \t\t\t}\r\n \t\t}\r\n \t\tcatch (DatabaseException e) {\r", "sourceBeforeFix": "new CustomChangeException(\"Failed to insert one or more concept map types\")", "sourceAfterFix": "new CustomChangeException(\"Failed to insert one or more concept map types\",be)"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void compact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    compact(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void compact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    compact(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(regionname)", "sourceAfterFix": "Bytes.toBytes(regionname)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "3a5772dab5ce8f3b2879a19009357d425e84400e", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "  * @author tibor17\n  * @since 4.12\n  */\npublic abstract class Stopwatch implements TestRule {\n     private final Clock clock;\n     private volatile long startNanos;\n     private volatile long endNanos;", "fixed": "  * @author tibor17\n  * @since 4.12\n  */\npublic class Stopwatch implements TestRule {\n     private final Clock clock;\n     private volatile long startNanos;\n     private volatile long endNanos;", "sourceBeforeFix": "1025", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "fixed": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "98ae1cc238ec8c541d02203fe1b5dd668ca777f5", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     String dumpTracedMessagesAsXml(String nodeId);\n     @ManagedAttribute(description = \"Number of total debugged messages\")\n    public long getDebugCounter();\n     @ManagedOperation(description = \"Resets the debug counter\")\n    public void resetDebugCounter();\n }", "fixed": "     String dumpTracedMessagesAsXml(String nodeId);\n     @ManagedAttribute(description = \"Number of total debugged messages\")\n    long getDebugCounter();\n     @ManagedOperation(description = \"Resets the debug counter\")\n    void resetDebugCounter();\n }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "c97c55c5fe3bd7a54b9f36cf68f17b5cf19ecaf3", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "             if (channel.isOpen()) {\n                 channel.setReadable(true);\n             } else {\n                connectionsPool.remove(url);\n             }\n         }\n         return channel;", "fixed": "             if (channel.isOpen()) {\n                 channel.setReadable(true);\n             } else {\n                connectionsPool.remove(url.getBaseUrl());\n             }\n         }\n         return channel;", "sourceBeforeFix": "Entry<Url,Channel>", "sourceAfterFix": "Entry<String,Channel>"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "deabd5b0187c1825c686c7f6a593db918bd043dc", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "             AtmosphereRequest req = AtmosphereResourceImpl.class.cast(r).getRequest(false);\n             try {\n                 if (req.getAttribute(MAX_INACTIVE) == null) {\n                    logger.error(\"Invalid state {}\", r);\n                     r.removeFromAllBroadcasters();\n                     config.resourcesFactory().unRegisterUuidForFindCandidate(r);\n                     continue;", "fixed": "             AtmosphereRequest req = AtmosphereResourceImpl.class.cast(r).getRequest(false);\n             try {\n                 if (req.getAttribute(MAX_INACTIVE) == null) {\n                    logger.warn(\"Invalid state {}\", r);\n                     r.removeFromAllBroadcasters();\n                     config.resourcesFactory().unRegisterUuidForFindCandidate(r);\n                     continue;", "sourceBeforeFix": "logger.error(\"Invalid state {}\",r)", "sourceAfterFix": "logger.warn(\"Invalid state {}\",r)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1b6db95bb43cfe3f3ac92f55f96cd35fff73317a", "projectName": "alibaba.druid", "bugType": "Wrong Function Name", "problem": "             }\r\n         };\r\n        Assert.assertEquals(0, raw.getParameters().size());\r\n         stmt.registerOutParameter(1, Types.INTEGER);\r\n        Assert.assertEquals(1, raw.getParameters().size());\r\n         stmt.registerOutParameter(2, Types.DECIMAL, 10);\r\n        Assert.assertEquals(2, raw.getParameters().size());\r\n     }\r\n     public void test_basic() throws Exception {\r", "fixed": "             }\r\n         };\r\n        Assert.assertEquals(0, raw.getOutParameters().size());\r\n         stmt.registerOutParameter(1, Types.INTEGER);\r\n        Assert.assertEquals(1, raw.getOutParameters().size());\r\n         stmt.registerOutParameter(2, Types.DECIMAL, 10);\r\n        Assert.assertEquals(2, raw.getOutParameters().size());\r\n     }\r\n     public void test_basic() throws Exception {\r", "sourceBeforeFix": "raw.getParameters()", "sourceAfterFix": "raw.getOutParameters()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "378e87f1e3bf8b2451ca511668954b707680b843", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     }\n     \n    String getMessage()\n     {\n         final ResourceBundle bundle =", "fixed": "     }\n     \n    public String getMessage()\n     {\n         final ResourceBundle bundle =", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NsqEndpointBuilder\n             extends\n                 NsqEndpointConsumerBuilder, NsqEndpointProducerBuilder {\n         default AdvancedNsqEndpointBuilder advanced() {", "fixed": "     \n    public interface NsqEndpointBuilder\n             extends\n                 NsqEndpointConsumerBuilder, NsqEndpointProducerBuilder {\n         default AdvancedNsqEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "a21d3decb7678a1dd89332073ac81a97fb261581", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     }\n     public String generateId() {\n        return idGenerator.generateId();\n     }\n     /**", "fixed": "     }\n     public String generateId() {\n        return idGenerator.generateUuid();\n     }\n     /**", "sourceBeforeFix": "idGenerator.generateId()", "sourceAfterFix": "idGenerator.generateUuid()"}
{"fixCommitSHA1": "62daee8bf2d60c90827d2adc864662c9db6c4713", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "             if (m.path().contains(\"{\")) {\n                 framework.interceptors().add(new MeteorServiceInterceptor());\n             }\n            framework.addAtmosphereHandler(mapping, r, framework.getBroadcasterFactory().lookup(m.broadcaster(), true), l);\n             framework.setBroadcasterCacheClassName(m.broadcasterCache().getName());\n         } catch (Throwable e) {\n             logger.warn(\"\", e);", "fixed": "             if (m.path().contains(\"{\")) {\n                 framework.interceptors().add(new MeteorServiceInterceptor());\n             }\n            framework.addAtmosphereHandler(mapping, r, framework.getBroadcasterFactory().lookup(m.broadcaster(), m.path(), true), l);\n             framework.setBroadcasterCacheClassName(m.broadcasterCache().getName());\n         } catch (Throwable e) {\n             logger.warn(\"\", e);", "sourceBeforeFix": "framework.getBroadcasterFactory().lookup(m.broadcaster(),true)", "sourceAfterFix": "framework.getBroadcasterFactory().lookup(m.broadcaster(),m.path(),true)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface StringTemplateEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedStringTemplateEndpointBuilder advanced() {", "fixed": "     \n    public interface StringTemplateEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedStringTemplateEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cb6f6e26c12839e59243f25bfb142ec5e5b71135", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                                 return oldExchange;\n                             }\n                         })\n                        .parallelProcessing().timeout(2000)\n                     .to(\"mock:result\");\n                from(\"direct:a\").delay(3000).setBody(constant(\"A\"));\n                 from(\"direct:b\").setBody(constant(\"B\"));", "fixed": "                                 return oldExchange;\n                             }\n                         })\n                        .parallelProcessing().timeout(1000)\n                     .to(\"mock:result\");\n                from(\"direct:a\").delay(5000).setBody(constant(\"A\"));\n                 from(\"direct:b\").setBody(constant(\"B\"));", "sourceBeforeFix": "from(\"direct:a\").delay(3000)", "sourceAfterFix": "from(\"direct:a\").delay(5000)"}
{"fixCommitSHA1": "03fc9fb82c11eefd0508dab08dc8ebd1511dadd8", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "                 + filename).getCanonicalPath();\n     }\n    protected void verifyAst(String expectedTextPrintFileName, String actualJavaFileName)\n             throws Exception {\n         verifyAst(expectedTextPrintFileName, actualJavaFileName, false);\n     }", "fixed": "                 + filename).getCanonicalPath();\n     }\n    protected static void verifyAst(String expectedTextPrintFileName, String actualJavaFileName)\n             throws Exception {\n         verifyAst(expectedTextPrintFileName, actualJavaFileName, false);\n     }", "sourceBeforeFix": "4", "sourceAfterFix": "12"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": "if (mod.getModuleActivator() != null)\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n\t\t\tcatch (Throwable t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}", "fixed": "if (mod.getModuleActivator() != null)\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FacebookEndpointBuilder\n             extends\n                 FacebookEndpointConsumerBuilder, FacebookEndpointProducerBuilder {\n         default AdvancedFacebookEndpointBuilder advanced() {", "fixed": "     \n    public interface FacebookEndpointBuilder\n             extends\n                 FacebookEndpointConsumerBuilder, FacebookEndpointProducerBuilder {\n         default AdvancedFacebookEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AvroEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAvroEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AvroEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAvroEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "         void delta() {}\n         void epsilon() {}\n     }\n    private static class Super {\n         void testOne() {}\n     }\n    private static class Sub extends Super {\n         void testTwo() {}\n     }", "fixed": "         void delta() {}\n         void epsilon() {}\n     }\n    static class Super {\n         void testOne() {}\n     }\n    static class Sub extends Super {\n         void testTwo() {}\n     }", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "1ef123bf60e8f4ba348f2e6399175dee62f016b2", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param ast the variable ast.\n      * @return true, if the variable should be removed.\n      */\n    private boolean shouldRemoveVariable(ScopeData scopeData, DetailAST ast) {\n         boolean shouldRemove = true;\n         for (DetailAST variable : scopeData.uninitializedVariables) {\n             if (variable.getText().equals(ast.getText())) {", "fixed": "      * @param ast the variable ast.\n      * @return true, if the variable should be removed.\n      */\n    private static boolean shouldRemoveVariable(ScopeData scopeData, DetailAST ast) {\n         boolean shouldRemove = true;\n         for (DetailAST variable : scopeData.uninitializedVariables) {\n             if (variable.getText().equals(ast.getText())) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MustacheEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedMustacheEndpointBuilder advanced() {\n             return (AdvancedMustacheEndpointBuilder) this;\n         }", "fixed": "     \n    public interface MustacheEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedMustacheEndpointBuilder advanced() {\n             return (AdvancedMustacheEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c4d1a9b3fde355c8cdfb6fcdc1d30c1fa38625d4", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         final IMap<Integer, Long> map = h.getMap(MAP_NAME);\n         map.put(0, 10L);\n        assertEquals(148, map.getLocalMapStats().getHeapCost());\n     }\n     @Test", "fixed": "         final IMap<Integer, Long> map = h.getMap(MAP_NAME);\n         map.put(0, 10L);\n        assertEquals(156, map.getLocalMapStats().getHeapCost());\n     }\n     @Test", "sourceBeforeFix": "assertEquals(148,map.getLocalMapStats().getHeapCost())", "sourceAfterFix": "assertEquals(156,map.getLocalMapStats().getHeapCost())"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n          mBuf.array()[0] = (byte) (k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();", "fixed": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "6eaf3674e604c25ec1ffc72e97ae2933209ad971", "projectName": "Alluxio.alluxio", "bugType": "Change Unary Operator\t", "problem": "     if (mCurrentBlockInStream instanceof RemoteBlockInStream\n        && BlockStoreContext.INSTANCE.hasLocalWorker()) {\n       return;\n     }", "fixed": "     if (mCurrentBlockInStream instanceof RemoteBlockInStream\n        && !BlockStoreContext.INSTANCE.hasLocalWorker()) {\n       return;\n     }", "sourceBeforeFix": "BlockStoreContext.INSTANCE.hasLocalWorker()", "sourceAfterFix": "!BlockStoreContext.INSTANCE.hasLocalWorker()"}
{"fixCommitSHA1": "26f1133593498a87216f0dd4954ff7c07313b740", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "    * Expects the JS to generate one bad-read warning.\n    */\n   private void assertRedeclare(String js) {\n    testWarning(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n   /**", "fixed": "    * Expects the JS to generate one bad-read warning.\n    */\n   private void assertRedeclare(String js) {\n    testError(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n   /**", "sourceBeforeFix": "testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)", "sourceAfterFix": "testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "         octree.initArchitecture();\n     }\n    public void updateSelection(GL2 gl, GLU glu) {\n         if (vizConfig.isSelectionEnable() && currentSelectionArea != null && currentSelectionArea.isEnabled()) {\n             float[] mp = Arrays.copyOf(graphIO.getMousePosition(), 2);\n             float[] cent = currentSelectionArea.getSelectionAreaCenter();", "fixed": "         octree.initArchitecture();\n     }\n    public synchronized void updateSelection(GL2 gl, GLU glu) {\n         if (vizConfig.isSelectionEnable() && currentSelectionArea != null && currentSelectionArea.isEnabled()) {\n             float[] mp = Arrays.copyOf(graphIO.getMousePosition(), 2);\n             float[] cent = currentSelectionArea.getSelectionAreaCenter();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ChunkEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedChunkEndpointBuilder advanced() {\n             return (AdvancedChunkEndpointBuilder) this;\n         }", "fixed": "     \n    public interface ChunkEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedChunkEndpointBuilder advanced() {\n             return (AdvancedChunkEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b1a156d3f2c86c78f64da0def78727b0952018da", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": "  * A {@link TimeoutException} raised by {@link ReadTimeoutHandler} when no data\n  * was read within a certain period of time.\n  */\npublic class ReadTimeoutException extends TimeoutException {\n     private static final long serialVersionUID = 169287984113283421L;", "fixed": "  * A {@link TimeoutException} raised by {@link ReadTimeoutHandler} when no data\n  * was read within a certain period of time.\n  */\npublic final class ReadTimeoutException extends TimeoutException {\n     private static final long serialVersionUID = 169287984113283421L;", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d5c862121cf783f4e79ee5b6300c0aa2ee8cdfdd", "projectName": "naver.pinpoint", "bugType": "Change Numeric Literal", "problem": "     public void stateTest() {\r\n         RecordedStreamObserver recordedStreamObserver = new RecordedStreamObserver();\r\n        PinpointGrpcServer pinpointGrpcServer = new PinpointGrpcServer(Mockito.mock(InetSocketAddress.class), agentInfo, new RequestManager(testTimer, 300), recordedStreamObserver);\r\n         assertCurrentState(SocketStateCode.NONE, pinpointGrpcServer);\r\n         Future<ResponseMessage> future = pinpointGrpcServer.request(request);\r\n         requestOnInvalidState(future, recordedStreamObserver);\r", "fixed": "     public void stateTest() {\r\n         RecordedStreamObserver recordedStreamObserver = new RecordedStreamObserver();\r\n        PinpointGrpcServer pinpointGrpcServer = new PinpointGrpcServer(Mockito.mock(InetSocketAddress.class), agentInfo, new RequestManager(testTimer, 3000), recordedStreamObserver);\r\n         assertCurrentState(SocketStateCode.NONE, pinpointGrpcServer);\r\n         Future<ResponseMessage> future = pinpointGrpcServer.request(request);\r\n         requestOnInvalidState(future, recordedStreamObserver);\r", "sourceBeforeFix": "new RequestManager(testTimer,300)", "sourceAfterFix": "new RequestManager(testTimer,3000)"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Error_Length() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Error_Length() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "addd22c9cfa473eecf99779227f1952d52ad7af5", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath, ufsPath);\n     try {\n       mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);", "fixed": "     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient)\n        .mount(alluxioPath, ufsPath, mountOptions);\n     try {\n       mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);", "sourceBeforeFix": "Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath,ufsPath)", "sourceAfterFix": "Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)"}
{"fixCommitSHA1": "f80e4773640190cbb2acfc7f7a88383dbc205c73", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": " \npublic class NIOConverterOptimised {\n     private NIOConverterOptimised() {\n     }", "fixed": " \npublic final class NIOConverterOptimised {\n     private NIOConverterOptimised() {\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "65c15a0c969d964875b2b988ff5f63d419e6a832", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    private class CompoundEventPredicate implements EventPredicate {\n         private List<EventPredicate> predicates = new ArrayList<EventPredicate>();", "fixed": "     \n    private final class CompoundEventPredicate implements EventPredicate {\n         private List<EventPredicate> predicates = new ArrayList<EventPredicate>();", "sourceBeforeFix": "2", "sourceAfterFix": "18"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFileEndpointBuilder\n             extends\n                 AdvancedFileEndpointConsumerBuilder, AdvancedFileEndpointProducerBuilder {\n         default FileEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFileEndpointBuilder\n             extends\n                 AdvancedFileEndpointConsumerBuilder, AdvancedFileEndpointProducerBuilder {\n         default FileEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Boolean Literal", "problem": "         RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);\n         RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();\n        assertFalse(runtimeOptions.isMonochrome());\n     }", "fixed": "         RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);\n         RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();\n        assertTrue(runtimeOptions.isMonochrome());\n     }", "sourceBeforeFix": "monochrome=false", "sourceAfterFix": "monochrome=true"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "4597da262b00311e03c657db986f712387def622", "projectName": "swagger-api.swagger-core", "bugType": "Wrong Function Name", "problem": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertTrue(model.getUniqueItems());\n     }\n     @Test", "fixed": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertFalse(model.getUniqueItems());\n     }\n     @Test", "sourceBeforeFix": "assertTrue(model.getUniqueItems())", "sourceAfterFix": "assertFalse(model.getUniqueItems())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoraEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoraEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GoraEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoraEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MiloServerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMiloServerEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface MiloServerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMiloServerEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n \t/**\n \t * Save the given list of global properties to the database.", "fixed": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t/**\n \t * Save the given list of global properties to the database.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "847359fd36c28fa360090459d1243a9603e47786", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "     @Override\n     protected boolean mySetupMutualAuthServerIsValidClientException(Throwable cause) {\n        return super.mySetupMutualAuthServerIsValidException(cause) || cause instanceof SSLException;\n     }\n }", "fixed": "     @Override\n     protected boolean mySetupMutualAuthServerIsValidClientException(Throwable cause) {\n        return super.mySetupMutualAuthServerIsValidClientException(cause) || cause instanceof SSLException;\n     }\n }", "sourceBeforeFix": "super.mySetupMutualAuthServerIsValidException(cause)", "sourceAfterFix": "super.mySetupMutualAuthServerIsValidClientException(cause)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CaffeineCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCaffeineCacheEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CaffeineCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCaffeineCacheEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9a3977843e9f24104a184fc8a3d2fd4c82c2f1e3", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         checkIsDAG(this.rules);\n     }\n    private void checkIsDAG(List<QueryQueueRule> rules)\n     {\n        DirectedPseudograph<String, DefaultEdge> graph = new DirectedPseudograph<String, DefaultEdge>(DefaultEdge.class);\n         for (QueryQueueRule rule : rules) {\n             String lastQueueName = null;\n             for (QueryQueueDefinition queue : rule.getQueues()) {", "fixed": "         checkIsDAG(this.rules);\n     }\n    private static void checkIsDAG(List<QueryQueueRule> rules)\n     {\n        DirectedPseudograph<String, DefaultEdge> graph = new DirectedPseudograph<>(DefaultEdge.class);\n         for (QueryQueueRule rule : rules) {\n             String lastQueueName = null;\n             for (QueryQueueDefinition queue : rule.getQueues()) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "93ec35952feb5bdcd58a7ac6ad0f07307ed0d367", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                 prop.getField().getJavaDoc().setFullText(option.getDescription());\n             }\n             if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getType())) {\n                     prop.getField().setStringInitializer(option.getDefaultValue());\n                 } else if (\"long\".equals(option.getJavaType()) || \"java.lang.Long\".equals(option.getJavaType())) {", "fixed": "                 prop.getField().getJavaDoc().setFullText(option.getDescription());\n             }\n             if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getJavaType())) {\n                     prop.getField().setStringInitializer(option.getDefaultValue());\n                 } else if (\"long\".equals(option.getJavaType()) || \"java.lang.Long\".equals(option.getJavaType())) {", "sourceBeforeFix": "option.getType()", "sourceAfterFix": "option.getJavaType()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "69bf835b58721b263b5ecaca7de2c327e3c29d7f", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": " public class ReplicatedMapService implements ManagedService, RemoteService,\n         PostJoinAwareService, SplitBrainHandlerService,\n        EventPublishingService<ReplicationMessage, ReplicatedMessageListener>{\n     public static final String SERVICE_NAME = \"hz:impl:replicatedMapService\";\n     public static final String EVENT_TOPIC_NAME = SERVICE_NAME + \".replication\";", "fixed": " public class ReplicatedMapService implements ManagedService, RemoteService,\n         PostJoinAwareService, SplitBrainHandlerService,\n        EventPublishingService<IdentifiedDataSerializable, ReplicatedMessageListener>{\n     public static final String SERVICE_NAME = \"hz:impl:replicatedMapService\";\n     public static final String EVENT_TOPIC_NAME = SERVICE_NAME + \".replication\";", "sourceBeforeFix": "EventPublishingService<ReplicationMessage,ReplicatedMessageListener>", "sourceAfterFix": "EventPublishingService<IdentifiedDataSerializable,ReplicatedMessageListener>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKubernetesServicesEndpointBuilder\n             extends\n                 AdvancedKubernetesServicesEndpointConsumerBuilder, AdvancedKubernetesServicesEndpointProducerBuilder {\n         default KubernetesServicesEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKubernetesServicesEndpointBuilder\n             extends\n                 AdvancedKubernetesServicesEndpointConsumerBuilder, AdvancedKubernetesServicesEndpointProducerBuilder {\n         default KubernetesServicesEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "fixed": "             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "8018d1af58330b6d21c858fa5ebfee6a66cd10b3", "projectName": "apache.hadoop", "bugType": "Wrong Function Name", "problem": "         }\n       } catch (IOException e) {\n         out.println(\"Cannot list keys for KeyProvider: \" + provider\n            + \": \" + e.getMessage());\n         throw e;\n       }\n     }", "fixed": "         }\n       } catch (IOException e) {\n         out.println(\"Cannot list keys for KeyProvider: \" + provider\n            + \": \" + e.toString());\n         throw e;\n       }\n     }", "sourceBeforeFix": "e.getMessage()", "sourceAfterFix": "e.toString()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "668cb3afd0ddec789ef7f3f81940f31e976d042b", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "     public static void setConfigurationBuilder() throws CheckstyleException {\n         final List<Configuration> configs = getCheckConfigs(\"ParameterName\");\n        Assert.assertEquals(configs.size(), 1);\n         config = configs.get(0);\n         format = config.getAttribute(\"format\");", "fixed": "     public static void setConfigurationBuilder() throws CheckstyleException {\n         final List<Configuration> configs = getCheckConfigs(\"ParameterName\");\n        Assert.assertEquals(1, configs.size());\n         config = configs.get(0);\n         format = config.getAttribute(\"format\");", "sourceBeforeFix": "Assert.assertEquals(configs.size(),1)", "sourceAfterFix": "Assert.assertEquals(1,configs.size())"}
{"fixCommitSHA1": "0aa7873db1048c41b279e4f216e4cf2ee35d0802", "projectName": "mcxiaoke.android-volley", "bugType": "Change Identifier Used", "problem": "      * Returns the cache key for this request.  By default, this is the URL.\n      */\n     public String getCacheKey() {\n        return getUrl();\n     }\n     /**", "fixed": "      * Returns the cache key for this request.  By default, this is the URL.\n      */\n     public String getCacheKey() {\n        return getOriginUrl();\n     }\n     /**", "sourceBeforeFix": "getUrl()", "sourceAfterFix": "getOriginUrl()"}
{"fixCommitSHA1": "697a5ff366eccf069fa933a25323839a8aa4abd2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         mock.assertIsSatisfied();\n        Thread.sleep(100);\n        String content = IOConverter.toString(new File(\"./target/done/paris.txt\"));\n         assertEquals(\"The file should have been renamed\", \"Hello Paris\", content);\n     }", "fixed": "         mock.assertIsSatisfied();\n        Thread.sleep(500);\n        String content = IOConverter.toString(new File(\"./target/done/paris.txt\").getAbsoluteFile());\n         assertEquals(\"The file should have been renamed\", \"Hello Paris\", content);\n     }", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "         )\n     );\n    queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "fixed": "         )\n     );\n    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "sourceBeforeFix": "waitLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "waitLatch.await(1000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "69c1fc12079616a75ac51f90aed6dbfbefd586a2", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t{\n \t\tif (fieldNum < 0 || fieldNum >= this.numFields) {\n\t\t\tthrow new IndexOutOfBoundsException();\n \t\t}", "fixed": " \t{\n \t\tif (fieldNum < 0 || fieldNum >= this.numFields) {\n\t\t\tthrow new IndexOutOfBoundsException(fieldNum+\" for range [0..\"+(this.numFields-1)+\"]\");\n \t\t}", "sourceBeforeFix": "new IndexOutOfBoundsException()", "sourceAfterFix": "new IndexOutOfBoundsException(fieldNum + \" for range [0..\" + (this.numFields - 1)+ \"]\")"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "      * base64-encoded and appear each on their own line. A length of -1 is used to encode a null\n      * array. The last line is optional. If present, it contains the TLS version.\n      */\n    public Entry(Source in) throws IOException {\n       try {\n         BufferedSource source = Okio.buffer(in);\n         url = source.readUtf8LineStrict();", "fixed": "      * base64-encoded and appear each on their own line. A length of -1 is used to encode a null\n      * array. The last line is optional. If present, it contains the TLS version.\n      */\n    Entry(Source in) throws IOException {\n       try {\n         BufferedSource source = Okio.buffer(in);\n         url = source.readUtf8LineStrict();", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "effa9cd38f507623f150ca2dc4d19867b9614162", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void testMBeanHasLeaseTime_whenLockedWithLeaseTime_mustHaveRemainingLeaseBeforeItExpires() throws Exception {\n        lock.lock(1000, TimeUnit.MILLISECONDS);\n         long startTime = Clock.currentTimeMillis();\n         long remainingLeaseTime = getLongAttribute(\"remainingLeaseTime\");\n         long timePassed = Clock.currentTimeMillis() - startTime;\n         boolean hasLeaseRemaining = remainingLeaseTime > 0;\n        assertTrue(hasLeaseRemaining || timePassed >= 1000);\n     }\n     @Test", "fixed": "     @Test\n     public void testMBeanHasLeaseTime_whenLockedWithLeaseTime_mustHaveRemainingLeaseBeforeItExpires() throws Exception {\n        lock.lock(10000, TimeUnit.MILLISECONDS);\n         long startTime = Clock.currentTimeMillis();\n         long remainingLeaseTime = getLongAttribute(\"remainingLeaseTime\");\n         long timePassed = Clock.currentTimeMillis() - startTime;\n         boolean hasLeaseRemaining = remainingLeaseTime > 0;\n        assertTrue(hasLeaseRemaining || timePassed >= 10000);\n     }\n     @Test", "sourceBeforeFix": "lock.lock(1000,TimeUnit.MILLISECONDS)", "sourceAfterFix": "lock.lock(10000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "9e383f401a22ab6c7085d7cb2e949ad11f020e8b", "projectName": "apache.camel", "bugType": "Change Unary Operator\t", "problem": "                                                           DataFormat.class);\n         boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class));\n        if (cxfMessage.getAttachments() != null && !(DataFormat.POJO.equals(dataFormat) && !isXop)) {\n             for (Attachment attachment : cxfMessage.getAttachments()) {\n                 camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler());", "fixed": "                                                           DataFormat.class);\n         boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class));\n        if (cxfMessage.getAttachments() != null && !(DataFormat.POJO.equals(dataFormat) && isXop)) {\n             for (Attachment attachment : cxfMessage.getAttachments()) {\n                 camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler());", "sourceBeforeFix": "!isXop", "sourceAfterFix": "isXop"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"diskspace\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"diskspace\")"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         \n        int getTotal() {\n             return total;\n         }\n     }", "fixed": "         \n        private int getTotal() {\n             return total;\n         }\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "5bbaa3482d2bad347cd5f3199f457050ab60a8ce", "projectName": "apache.camel", "bugType": "Change Operand ", "problem": "             getContext().addInterceptStrategy(delayer);\n         }\n         InflightRepository inflightRepository = getBeanForType(InflightRepository.class);\n        if (delayer != null) {\n             LOG.info(\"Using custom InflightRepository: \" + inflightRepository);\n             getContext().setInflightRepository(inflightRepository);\n         }", "fixed": "             getContext().addInterceptStrategy(delayer);\n         }\n         InflightRepository inflightRepository = getBeanForType(InflightRepository.class);\n        if (inflightRepository != null) {\n             LOG.info(\"Using custom InflightRepository: \" + inflightRepository);\n             getContext().setInflightRepository(inflightRepository);\n         }", "sourceBeforeFix": "delayer != null", "sourceAfterFix": "inflightRepository != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ec295568e2e59583c7ee243a7f705669a2263ccc", "projectName": "Alluxio.alluxio", "bugType": "Change Unary Operator\t", "problem": "     for (FileStatus status : files) {\n       UfsStatus retStatus;\n      if (status.isDir()) {\n         retStatus = new UfsFileStatus(status.getPath().getName(), status.getLen(),\n             status.getModificationTime(), status.getOwner(), status.getGroup(),\n             status.getPermission().toShort());", "fixed": "     for (FileStatus status : files) {\n       UfsStatus retStatus;\n      if (!status.isDir()) {\n         retStatus = new UfsFileStatus(status.getPath().getName(), status.getLen(),\n             status.getModificationTime(), status.getOwner(), status.getGroup(),\n             status.getPermission().toShort());", "sourceBeforeFix": "status.isDir()", "sourceAfterFix": "!status.isDir()"}
{"fixCommitSHA1": "c812fec424fdf43025d67cc00a2235a31cd744ec", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     public static final int SET_CONTAINER = 41;\n     public static final int LIST_CONTAINER = 42;\n     public static final int COLLECTION_TRANSACTION_LOG_RECORD = 43;\n    public static final int QUEUE_TRANSACTION_LOG_RECORD = 43;\n     @Override\n     public int getFactoryId() {", "fixed": "     public static final int SET_CONTAINER = 41;\n     public static final int LIST_CONTAINER = 42;\n     public static final int COLLECTION_TRANSACTION_LOG_RECORD = 43;\n    public static final int QUEUE_TRANSACTION_LOG_RECORD = 44;\n     @Override\n     public int getFactoryId() {", "sourceBeforeFix": "QUEUE_TRANSACTION_LOG_RECORD=43", "sourceAfterFix": "QUEUE_TRANSACTION_LOG_RECORD=44"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastMultimapEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HazelcastMultimapEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "39c42c2dc347f1d8b10311c09e436fd4ade63c4c", "projectName": "libgdx.libgdx", "bugType": "Change Caller in Function Call", "problem": " \t\t\tconnection.setDoOutput(doingOutPut);\r\n \t\t\tconnection.setDoInput(true);\r\n \t\t\tconnection.setRequestMethod(method);\r\n\t\t\tconnection.setFollowRedirects(httpRequest.getFollowRedirects());\r\n \t\t\tlock.lock();\r\n \t\t\tconnections.put(httpRequest, connection);\r", "fixed": " \t\t\tconnection.setDoOutput(doingOutPut);\r\n \t\t\tconnection.setDoInput(true);\r\n \t\t\tconnection.setRequestMethod(method);\r\n\t\t\tHttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\r\n \t\t\tlock.lock();\r\n \t\t\tconnections.put(httpRequest, connection);\r", "sourceBeforeFix": "connection.setFollowRedirects(httpRequest.getFollowRedirects())", "sourceAfterFix": "HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "10c93df27435ffbc037cde5e6063c9dbc6c0eb3f", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         return uriBuilder()\n                 .scheme(scheme)\n                .host(address.getHostText()).port(address.getPort())\n                 .build();\n     }", "fixed": "         return uriBuilder()\n                 .scheme(scheme)\n                .host(address.getHost()).port(address.getPort())\n                 .build();\n     }", "sourceBeforeFix": "address.getHostText()", "sourceAfterFix": "address.getHost()"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "5755cf96d1689e1eda7dd2d7e03f1eff3bf5a074", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      *\n      * @return Type of exception\n      */\n    public Class<? extends Exception> exceptionClass() {\n         return this.exceptionClass;\n     }", "fixed": "      *\n      * @return Type of exception\n      */\n    public Class<? extends T> exceptionClass() {\n         return this.exceptionClass;\n     }", "sourceBeforeFix": "? extends Exception", "sourceAfterFix": "? extends T"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JGroupsRaftEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJGroupsRaftEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface JGroupsRaftEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJGroupsRaftEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeOutEdge(Object edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> adjacentNodes = getReference(adjacentNodesReference);\n     if (adjacentNodes != null) {", "fixed": "   }\n   @Override\n  public N removeOutEdge(E edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> adjacentNodes = getReference(adjacentNodesReference);\n     if (adjacentNodes != null) {", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DozerEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedDozerEndpointBuilder advanced() {\n             return (AdvancedDozerEndpointBuilder) this;\n         }", "fixed": "     \n    public interface DozerEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedDozerEndpointBuilder advanced() {\n             return (AdvancedDozerEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3d8aaf3c3fcce6133c197d9ca3c1c3f72c260beb", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": "     if (processDefinition != null && processDefinition.isGraphicalNotationDefined()) {\n       try {\n        BpmnModel bpmnModel = repositoryService.getBpmnModel(processInstance.getId());\n         InputStream definitionImageStream = ProcessDiagramGenerator.generateDiagram(bpmnModel, \"png\", \n                 runtimeService.getActiveActivityIds(processInstance.getId()));", "fixed": "     if (processDefinition != null && processDefinition.isGraphicalNotationDefined()) {\n       try {\n        BpmnModel bpmnModel = repositoryService.getBpmnModel(processInstance.getProcessDefinitionId());\n         InputStream definitionImageStream = ProcessDiagramGenerator.generateDiagram(bpmnModel, \"png\", \n                 runtimeService.getActiveActivityIds(processInstance.getId()));", "sourceBeforeFix": "processInstance.getId()", "sourceAfterFix": "processInstance.getProcessDefinitionId()"}
{"fixCommitSHA1": "dbc0ca8d1cb03f2da2c8fc0062e5d4b681fef11a", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "         final DummyOperation operation = new DummyOperation(0);\n         Data data = serializationService.toData(operation);\n        final Packet packet = new Packet(data, operation.getPartitionId(), serializationService.getPortableContext());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);", "fixed": "         final DummyOperation operation = new DummyOperation(0);\n         Data data = serializationService.toData(operation);\n        final Packet packet = new Packet(data, operation.getPartitionId());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);", "sourceBeforeFix": "new Packet(data,operation.getPartitionId(),serializationService.getPortableContext())", "sourceAfterFix": "new Packet(data,operation.getPartitionId())"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "       try {\n         statsObj = getMS().getTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"get_column_statistics_by_table: \", statsObj != null);\n       }\n       return statsObj;\n     }", "fixed": "       try {\n         statsObj = getMS().getTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"get_column_statistics_by_table: \", statsObj != null, null);\n       }\n       return statsObj;\n     }", "sourceBeforeFix": "endFunction(\"delete_column_statistics_by_partition: \",ret != false)", "sourceAfterFix": "endFunction(\"delete_column_statistics_by_partition: \",ret != false,null)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8480b29e196d01a0b772edceea1dc31ab14e4988", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t}\r\n \t\t\tif (value instanceof Map) {\r\n\t\t\t\tif (knownType == null) knownType = ReflectionCache.getType(OrderedMap.class);\r\n \t\t\t\twriteObjectStart(actualType.getClassOfType(), knownType.getClassOfType());\r\n \t\t\t\tfor (Map.Entry entry : ((Map<?, ?>)value).entrySet()) {\r\n \t\t\t\t\twriter.name(convertToString(entry.getKey()));\r", "fixed": " \t\t\t}\r\n \t\t\tif (value instanceof Map) {\r\n\t\t\t\tif (knownType == null) knownType = ReflectionCache.getType(HashMap.class);\r\n \t\t\t\twriteObjectStart(actualType.getClassOfType(), knownType.getClassOfType());\r\n \t\t\t\tfor (Map.Entry entry : ((Map<?, ?>)value).entrySet()) {\r\n \t\t\t\t\twriter.name(convertToString(entry.getKey()));\r", "sourceBeforeFix": "OrderedMap.class", "sourceAfterFix": "HashMap.class"}
{"fixCommitSHA1": "0ffdc3246d1bd202e6cef4b486ffb4e9257b0311", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "      * @param task the task to add.\n      * @throws NullPointerException if task is null\n      */\n    public final void addTaskAndWakeup(Runnable task) {\n         taskQueue.add(task);\n         if (!selectNow) {\n             selector.wakeup();", "fixed": "      * @param task the task to add.\n      * @throws NullPointerException if task is null\n      */\n    public void addTaskAndWakeup(Runnable task) {\n         taskQueue.add(task);\n         if (!selectNow) {\n             selector.wakeup();", "sourceBeforeFix": "target.addTask(task)", "sourceAfterFix": "target.addTaskAndWakeup(task)"}
{"fixCommitSHA1": "688ef85a12d6cd61f3d7c77a637650255d70f227", "projectName": "Alluxio.alluxio", "bugType": "Change Unary Operator\t", "problem": "      * @return the builder\n      */\n     public Builder addProperty(PropertyKey key, String value) {\n      Preconditions.checkState(key.equals(PropertyKey.ZOOKEEPER_ENABLED),\n\"Enable Zookeeper via\n       mProperties.put(key, value);\n       return this;", "fixed": "      * @return the builder\n      */\n     public Builder addProperty(PropertyKey key, String value) {\n      Preconditions.checkState(!key.equals(PropertyKey.ZOOKEEPER_ENABLED),\n\"Enable Zookeeper via\n       mProperties.put(key, value);\n       return this;", "sourceBeforeFix": "key.equals(PropertyKey.ZOOKEEPER_ENABLED)", "sourceAfterFix": "!key.equals(PropertyKey.ZOOKEEPER_ENABLED)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f23520327e887028d3334206f89a7566261d0c83", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         if (isParallelProcessing()) {\n             executorService.submit(() -> ReactiveHelper.schedule(runnable));\n         } else {\n            ReactiveHelper.scheduleLast(runnable, \"Multicast next step\");\n         }\n     }", "fixed": "         if (isParallelProcessing()) {\n             executorService.submit(() -> ReactiveHelper.schedule(runnable));\n         } else {\n            ReactiveHelper.schedule(runnable, \"Multicast next step\");\n         }\n     }", "sourceBeforeFix": "ReactiveHelper.scheduleLast(runnable,\"Multicast next step\")", "sourceAfterFix": "ReactiveHelper.schedule(runnable,\"Multicast next step\")"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "45bf0d8715c375f45b21131e5b5bd9e125ebe9c3", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "    */\n   private void singleByteReadInternal(UnderStoreBlockInStream inStream, int startIndex)\n       throws IOException {\n    long remaining = mBlockStream.remaining();\n     for (int i = startIndex; i < startIndex + BLOCK_LENGTH; i++) {\n       Assert.assertEquals(i, inStream.read());\n       remaining--;", "fixed": "    */\n   private void singleByteReadInternal(UnderStoreBlockInStream inStream, int startIndex)\n       throws IOException {\n    long remaining = inStream.remaining();\n     for (int i = startIndex; i < startIndex + BLOCK_LENGTH; i++) {\n       Assert.assertEquals(i, inStream.read());\n       remaining--;", "sourceBeforeFix": "mBlockStream.remaining()", "sourceAfterFix": "inStream.remaining()"}
{"fixCommitSHA1": "40ae31b260a4fe2205b21cc5c446ae9428faac06", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     private void writeDomainController(final XMLExtendedStreamWriter writer, final ModelNode modelNode) throws XMLStreamException {\n         writer.writeStartElement(Element.DOMAIN_CONTROLLER.getLocalName());\n        if (modelNode.has(LOCAL)) {\n             writer.writeEmptyElement(Element.LOCAL.getLocalName());\n         }\n        if (modelNode.has(REMOTE)) {\n             writer.writeStartElement(Element.REMOTE.getLocalName());\n             final ModelNode remote = modelNode.get(REMOTE);\n             if (remote.has(HOST)) {", "fixed": "     private void writeDomainController(final XMLExtendedStreamWriter writer, final ModelNode modelNode) throws XMLStreamException {\n         writer.writeStartElement(Element.DOMAIN_CONTROLLER.getLocalName());\n        if (modelNode.hasDefined(LOCAL)) {\n             writer.writeEmptyElement(Element.LOCAL.getLocalName());\n         }\n        else if (modelNode.hasDefined(REMOTE)) {\n             writer.writeStartElement(Element.REMOTE.getLocalName());\n             final ModelNode remote = modelNode.get(REMOTE);\n             if (remote.has(HOST)) {", "sourceBeforeFix": "modelNode.has(LOCAL)", "sourceAfterFix": "modelNode.hasDefined(LOCAL)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "0e8e5ba702fbbea71f8cffc063e2d873cbebe83e", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForNone\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForNone\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8dad775af94f89faba78ef282c475cf9da02147a", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "             PropertiesAuthenticationResourceDefinition.PATH.marshallAsAttribute(properties, writer);\n             PropertiesAuthenticationResourceDefinition.RELATIVE_TO.marshallAsAttribute(properties, writer);\n             PropertiesAuthenticationResourceDefinition.PLAIN_TEXT.marshallAsAttribute(properties, writer);\n        } else if (authentication.hasDefined(USERS)) {\n             ModelNode userDomain = authentication.get(USERS);\n             ModelNode users = userDomain.hasDefined(USER) ? userDomain.require(USER) : new ModelNode().setEmptyObject();\n             writer.writeStartElement(Element.USERS.getLocalName());", "fixed": "             PropertiesAuthenticationResourceDefinition.PATH.marshallAsAttribute(properties, writer);\n             PropertiesAuthenticationResourceDefinition.RELATIVE_TO.marshallAsAttribute(properties, writer);\n             PropertiesAuthenticationResourceDefinition.PLAIN_TEXT.marshallAsAttribute(properties, writer);\n        } else if (authentication.has(USERS)) {\n             ModelNode userDomain = authentication.get(USERS);\n             ModelNode users = userDomain.hasDefined(USER) ? userDomain.require(USER) : new ModelNode().setEmptyObject();\n             writer.writeStartElement(Element.USERS.getLocalName());", "sourceBeforeFix": "authentication.hasDefined(USERS)", "sourceAfterFix": "authentication.has(USERS)"}
{"fixCommitSHA1": "f5a277900f4bc700a17d349aa9f30af3ddca94fe", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "                         WebSocketEventListener.class.cast(l).onMessage(event);\n                         break;\n                     case HANDSHAKE:\n                        WebSocketEventListener.class.cast(l).onMessage(event);\n                         break;\n                     case CLOSE:\n                        WebSocketEventListener.class.cast(l).onMessage(event);\n                         break;\n                 }\n             }", "fixed": "                         WebSocketEventListener.class.cast(l).onMessage(event);\n                         break;\n                     case HANDSHAKE:\n                        WebSocketEventListener.class.cast(l).onHandshake(event);\n                         break;\n                     case CLOSE:\n                        WebSocketEventListener.class.cast(l).onClose(event);\n                         break;\n                 }\n             }", "sourceBeforeFix": "WebSocketEventListener.class.cast(l).onMessage(event)", "sourceAfterFix": "WebSocketEventListener.class.cast(l).onHandshake(event)"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "eba7e984d0999606f90689ca3b89ee644b1e92a4", "projectName": "Graylog2.graylog2-server", "bugType": "Change Caller in Function Call", "problem": "         stats.order(TermsStatsFacet.ComparatorType.fromString(order.toString().toLowerCase()));\n         stats.size(size);\n        terms.facetFilter(standardFilters(range, filter));\n         srb.addFacet(stats);", "fixed": "         stats.order(TermsStatsFacet.ComparatorType.fromString(order.toString().toLowerCase()));\n         stats.size(size);\n        stats.facetFilter(standardFilters(range, filter));\n         srb.addFacet(stats);", "sourceBeforeFix": "terms.facetFilter(standardFilters(range,filter))", "sourceAfterFix": "stats.facetFilter(standardFilters(range,filter))"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "e2c948782b942d79911cec09c8862de0948b31e4", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "     private void invokeFlush0(ChannelPromise promise) {\n         Channel channel = channel();\n         if (!channel.isRegistered() && !channel.isActive()) {\n            promise.setFailure(new ClosedChannelException());\n             return;\n         }", "fixed": "     private void invokeFlush0(ChannelPromise promise) {\n         Channel channel = channel();\n         if (!channel.isRegistered() && !channel.isActive()) {\n            promise.tryFailure(new ClosedChannelException());\n             return;\n         }", "sourceBeforeFix": "promise.setFailure(new ClosedChannelException())", "sourceAfterFix": "promise.tryFailure(new ClosedChannelException())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 Optional.empty());\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypes()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", \"b\")", "fixed": "                 Optional.empty());\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", \"b\")", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tthis.container.stop();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nGetMethod get2 = new GetMethod(\"http:\n \t\tassertThat(client.executeMethod(get2), equalTo(200));", "fixed": " \t\tthis.container.stop();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nGetMethod get2 = new GetMethod(\"http:\n \t\tassertThat(client.executeMethod(get2), equalTo(200));", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "3eee191e453a4f3373fce7fe96a6dadd4669da8d", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                 cache = b.getBroadcasterConfig().getBroadcasterCache();\n                 List<Object> t = cache.retrieveFromCache(b.getID(), r);\n                cachedMessages = b.getBroadcasterConfig().applyFilters(r, cachedMessages);\n                 if (t.size() > 0) {\n                     logger.trace(\"Found Cached Messages For AtmosphereResource {} with Broadcaster {}\", r.uuid(), broadcasterID);\n                     cachedMessages.addAll(t);", "fixed": "                 cache = b.getBroadcasterConfig().getBroadcasterCache();\n                 List<Object> t = cache.retrieveFromCache(b.getID(), r);\n                cachedMessages = b.getBroadcasterConfig().applyFilters(r, t);\n                 if (t.size() > 0) {\n                     logger.trace(\"Found Cached Messages For AtmosphereResource {} with Broadcaster {}\", r.uuid(), broadcasterID);\n                     cachedMessages.addAll(t);", "sourceBeforeFix": "b.getBroadcasterConfig().applyFilters(r,cachedMessages)", "sourceAfterFix": "b.getBroadcasterConfig().applyFilters(r,t)"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generateHashRowMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes)\n     {\n         Parameter position = arg(\"position\", int.class);\n         Parameter blocks = arg(\"blocks\", Block[].class);", "fixed": "                 .retInt();\n     }\n    private static void generateHashRowMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes)\n     {\n         Parameter position = arg(\"position\", int.class);\n         Parameter blocks = arg(\"blocks\", Block[].class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "51c2b049c21582fcf9db82244063e67196cabad5", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tpublic CodecCustomizer jacksonCodecCustomizer(ObjectMapper objectMapper) {\n \t\t\treturn (configurer) -> {\n \t\t\t\tCodecConfigurer.DefaultCodecs defaults = configurer.defaultCodecs();\n\t\t\t\tdefaults.jackson2Decoder(\n \t\t\t\t\t\tnew Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));\n\t\t\t\tdefaults.jackson2Encoder(\n \t\t\t\t\t\tnew Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));\n \t\t\t};\n \t\t}", "fixed": " \t\tpublic CodecCustomizer jacksonCodecCustomizer(ObjectMapper objectMapper) {\n \t\t\treturn (configurer) -> {\n \t\t\t\tCodecConfigurer.DefaultCodecs defaults = configurer.defaultCodecs();\n\t\t\t\tdefaults.jackson2JsonDecoder(\n \t\t\t\t\t\tnew Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));\n\t\t\t\tdefaults.jackson2JsonEncoder(\n \t\t\t\t\t\tnew Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));\n \t\t\t};\n \t\t}", "sourceBeforeFix": "defaults.jackson2Encoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))", "sourceAfterFix": "defaults.jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))"}
{"fixCommitSHA1": "4597da262b00311e03c657db986f712387def622", "projectName": "swagger-api.swagger-core", "bugType": "Wrong Function Name", "problem": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertFalse(model.getUniqueItems());\n     }\n }\n\\ No newline at end of file", "fixed": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertTrue(model.getUniqueItems());\n     }\n }\n\\ No newline at end of file", "sourceBeforeFix": "assertFalse(model.getUniqueItems())", "sourceAfterFix": "assertTrue(model.getUniqueItems())"}
{"fixCommitSHA1": "8a70dd07e91ab83c74346934b1597d60dbe84dfb", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": " \t\t\t}\n \t\t\treturn createDirtyCheckingProxy(name, scopedObject);\n \t\t} catch (Throwable th) {\n\t\t\tlogger.warn(\"couldn't return value from process scope! {}\",ExceptionUtils.getFullStackTrace(th));\n \t\t} finally {\n \t\t\tif (executionEntity != null) {\nlogger.debug(\"set variable '{}' on executionEntity", "fixed": " \t\t\t}\n \t\t\treturn createDirtyCheckingProxy(name, scopedObject);\n \t\t} catch (Throwable th) {\n\t\t\tlogger.warn(\"couldn't return value from process scope! {}\", ExceptionUtils.getStackTrace(th));\n \t\t} finally {\n \t\t\tif (executionEntity != null) {\nlogger.debug(\"set variable '{}' on executionEntity", "sourceBeforeFix": "ExceptionUtils.getFullStackTrace(th)", "sourceAfterFix": "ExceptionUtils.getStackTrace(th)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ec6f0cffe68e0736c04783b61f980f1271064dd9", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  public boolean equals(@Nullable Object obj) {\n     if (obj == this) {\n       return true;\n     }", "fixed": "   }\n   @Override\n  public final boolean equals(@Nullable Object obj) {\n     if (obj == this) {\n       return true;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "fixed": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables();\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      *\n      * @param exceptionClass Type of exception\n      */\n    public void exceptionClass(Class<? extends Exception> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }", "fixed": "      *\n      * @param exceptionClass Type of exception\n      */\n    public void exceptionClass(Class<? extends T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }", "sourceBeforeFix": "? extends Exception", "sourceAfterFix": "? extends T"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "fixed": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dd20434290eb6ae6dff133d70073e35a3998d362", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n              + \" will not be in TachyonStorage\", ioe);\n           mShouldCacheCurrentBlock = false;\n         }\n       }", "fixed": "           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }", "sourceBeforeFix": "LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\",ioe)", "sourceAfterFix": "LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\")"}
{"fixCommitSHA1": "28474aa30adebc397ecdb993d62317e5659fce4a", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\treturn this.ssl;\n \t\t}\n\t\tpublic Long getAutoCommitInterval() {\n \t\t\treturn this.autoCommitInterval;\n \t\t}\n\t\tpublic void setAutoCommitInterval(Long autoCommitInterval) {\n \t\t\tthis.autoCommitInterval = autoCommitInterval;\n \t\t}", "fixed": " \t\t\treturn this.ssl;\n \t\t}\n\t\tpublic Integer getAutoCommitInterval() {\n \t\t\treturn this.autoCommitInterval;\n \t\t}\n\t\tpublic void setAutoCommitInterval(Integer autoCommitInterval) {\n \t\t\tthis.autoCommitInterval = autoCommitInterval;\n \t\t}", "sourceBeforeFix": "public Long getAutoCommitInterval(){   return this.autoCommitInterval; } ", "sourceAfterFix": "public Integer getAutoCommitInterval(){   return this.autoCommitInterval; } "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HdfsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHdfsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HdfsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHdfsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n                mapConfig.setTimeToLiveSeconds(Integer.valueOf(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {", "fixed": "             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n                mapConfig.setTimeToLiveSeconds(Integer.parseInt(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {", "sourceBeforeFix": "Integer.valueOf(sessionTTL)", "sourceAfterFix": "Integer.parseInt(sessionTTL)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "68cd97ff6b0a506c2a2688c966c2a55870d6f466", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final HttpConnectionFactory http11 = buildHttpConnectionFactory(httpConfig);\n         final HTTP2ServerConnectionFactory http2c = new HTTP2CServerConnectionFactory(httpConfig);\n         http2c.setMaxConcurrentStreams(maxConcurrentStreams);\n        http2c.setInitialStreamSendWindow(initialStreamSendWindow);", "fixed": "         final HttpConnectionFactory http11 = buildHttpConnectionFactory(httpConfig);\n         final HTTP2ServerConnectionFactory http2c = new HTTP2CServerConnectionFactory(httpConfig);\n         http2c.setMaxConcurrentStreams(maxConcurrentStreams);\n        http2c.setInitialStreamRecvWindow(initialStreamSendWindow);", "sourceBeforeFix": "http2c.setInitialStreamSendWindow(initialStreamSendWindow)", "sourceAfterFix": "http2c.setInitialStreamRecvWindow(initialStreamSendWindow)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "0d560643c720ea2ee7bc89d6fb04a0668aa3d91c", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t@Override\r\n \tpublic float getDensity () {\r\n\t\treturn 96.0 / 160;\r\n \t}\r\n \t@Override\r", "fixed": " \t@Override\r\n \tpublic float getDensity () {\r\n\t\treturn 96.0f / 160;\r\n \t}\r\n \t@Override\r", "sourceBeforeFix": "96.0 / 160", "sourceAfterFix": "96.0f / 160"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result4\");\n        mock.expectedBodiesReceived(\"Hello World 3\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result4\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World 3\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     final FunctionNames functionNames;\n     final String idGeneratorMap;\n    State(Map<String, Integer> cssNames, Set<String> exportedNames,\n           CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n           VariableMap variableMap, VariableMap propertyMap,\n           VariableMap anonymousFunctionNameMap,", "fixed": "     final FunctionNames functionNames;\n     final String idGeneratorMap;\n    public State(Map<String, Integer> cssNames, Set<String> exportedNames,\n           CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n           VariableMap variableMap, VariableMap propertyMap,\n           VariableMap anonymousFunctionNameMap,", "sourceBeforeFix": "1024", "sourceAfterFix": "1028"}
{"fixCommitSHA1": "3ae343b768bae5973a5634c8e287ae1173e30248", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "             assert amt > 0;\n             prioritizableForTree += amt;\n             if (parent != null && parent != oldParent) {\n                parent.incrementPrioritizableForTree(amt, oldParent);\n             }\n         }", "fixed": "             assert amt > 0;\n             prioritizableForTree += amt;\n             if (parent != null && parent != oldParent) {\n                parent.incrementPrioritizableForTree0(amt, oldParent);\n             }\n         }", "sourceBeforeFix": "parent.decrementPrioritizableForTree(amt)", "sourceAfterFix": "parent.decrementPrioritizableForTree0(amt)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "4446595a8d326298e7d3ceda6472c84ababfc2ff", "projectName": "eclipse.vert.x", "bugType": "Change Identifier Used", "problem": "             if (resultHandler != null) {\n               resultHandler.handle(Future.failedFuture(ar2.cause()));\n             } else {\n              log.error(ar.cause());\n             }\n           }\n         });", "fixed": "             if (resultHandler != null) {\n               resultHandler.handle(Future.failedFuture(ar2.cause()));\n             } else {\n              log.error(ar2.cause());\n             }\n           }\n         });", "sourceBeforeFix": "ar.cause()", "sourceAfterFix": "asyncResult.cause()"}
{"fixCommitSHA1": "cd7ba294b22a9b392030fe5c6ee06247fc7868c1", "projectName": "alibaba.dubbo", "bugType": "Less Specific If", "problem": "      */\r\n     public static Properties loadProperties(String fileName, boolean allowMultiFile, boolean optional) {\r\n         Properties properties = new Properties();\r\n        if (fileName.startsWith(\"/\")) {\r\n             try {\r\n                 FileInputStream input = new FileInputStream(fileName);\r\n                 try {\r", "fixed": "      */\r\n     public static Properties loadProperties(String fileName, boolean allowMultiFile, boolean optional) {\r\n         Properties properties = new Properties();\r\n        if (fileName.startsWith(\"/\") || fileName.matches(\"^[A-z]:\\\\\\\\\\\\S+$\")) {\r\n             try {\r\n                 FileInputStream input = new FileInputStream(fileName);\r\n                 try {\r", "sourceBeforeFix": "fileName.startsWith(\"/\")", "sourceAfterFix": "fileName.startsWith(\"/\") || fileName.matches(\"^[A-z]:\\\\\\\\\\\\S+$\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PaxLoggingEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedPaxLoggingEndpointBuilder advanced() {", "fixed": "     \n    public interface PaxLoggingEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedPaxLoggingEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4281cc1c5d3aa51b56db9d9e251c761c52a855e3", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t * before growing the backing table. */\r\n \tpublic IntMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "fixed": " \t * before growing the backing table. */\r\n \tpublic IntMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3a43345ad0a599659d462cfc14dba9d8c0553bbf", "projectName": "Graylog2.graylog2-server", "bugType": "Change Operand ", "problem": "             LOG.info(\"Migrated \\\"{}\\\" setting: {}\", \"elasticsearch_max_number_of_indices\", closingConfig);\n         }\n        if (deletionRetentionStrategy == null) {\n             final DeletionRetentionStrategyConfig deletionConfig = DeletionRetentionStrategyConfig.create(elasticsearchConfiguration.getMaxNumberOfIndices());\n             clusterConfigService.write(deletionConfig);\n             LOG.info(\"Migrated \\\"{}\\\" setting: {}\", \"elasticsearch_max_number_of_indices\", deletionConfig);", "fixed": "             LOG.info(\"Migrated \\\"{}\\\" setting: {}\", \"elasticsearch_max_number_of_indices\", closingConfig);\n         }\n        if (deletionRetentionStrategyConfig == null) {\n             final DeletionRetentionStrategyConfig deletionConfig = DeletionRetentionStrategyConfig.create(elasticsearchConfiguration.getMaxNumberOfIndices());\n             clusterConfigService.write(deletionConfig);\n             LOG.info(\"Migrated \\\"{}\\\" setting: {}\", \"elasticsearch_max_number_of_indices\", deletionConfig);", "sourceBeforeFix": "deletionRetentionStrategy == null", "sourceAfterFix": "deletionRetentionStrategyConfig == null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "fixed": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFtpEndpointBuilder\n             extends\n                 AdvancedFtpEndpointConsumerBuilder, AdvancedFtpEndpointProducerBuilder {\n         default FtpEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFtpEndpointBuilder\n             extends\n                 AdvancedFtpEndpointConsumerBuilder, AdvancedFtpEndpointProducerBuilder {\n         default FtpEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "fixed": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId);\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "09998d1155cda1399a7624c7ed79b4611d974c4b", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n\t@UnrelatedOne\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \t}", "fixed": " \t}\n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n\t@UnrelatedTwo\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \t}", "sourceBeforeFix": "@UnrelatedOne", "sourceAfterFix": "@UnrelatedTwo"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "fixed": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *  Does class have non-private ctors.\n          *  @return true if class has non-private ctors\n          */\n        boolean isWithNonPrivateCtor() {\n             return withNonPrivateCtor;\n         }", "fixed": "          *  Does class have non-private ctors.\n          *  @return true if class has non-private ctors\n          */\n        private boolean isWithNonPrivateCtor() {\n             return withNonPrivateCtor;\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 15:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 15:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "a0cb51880d250a4db339312a0d1c62e42ffafdf0", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         SimpleRegistry registry = new SimpleRegistry();\n        registry.put(\"blogService\", new BlogService());\n         context = new DefaultCamelContext(registry);", "fixed": "         SimpleRegistry registry = new SimpleRegistry();\n        registry.bind(\"blogService\", new BlogService());\n         context = new DefaultCamelContext(registry);", "sourceBeforeFix": "registry.put(\"blogService\",new BlogService())", "sourceAfterFix": "registry.bind(\"blogService\",new BlogService())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   final Method setProtocolMethod;\n   final Method getProtocolMethod;\n  public Jdk9Platform(Method setProtocolMethod, Method getProtocolMethod) {\n     this.setProtocolMethod = setProtocolMethod;\n     this.getProtocolMethod = getProtocolMethod;\n   }", "fixed": "   final Method setProtocolMethod;\n   final Method getProtocolMethod;\n  Jdk9Platform(Method setProtocolMethod, Method getProtocolMethod) {\n     this.setProtocolMethod = setProtocolMethod;\n     this.getProtocolMethod = getProtocolMethod;\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "4a14fe194b8163a6b7b0c97c436e2d173c7929c0", "projectName": "openmrs.openmrs-core", "bugType": "Change Numeric Literal", "problem": " \t\tschedulerService.scheduleTask(t1);\r\nThread.sleep(50);\n \t\tschedulerService.scheduleTask(t2);\r\nThread.sleep(600);\n \t\tassertEquals(Arrays.asList(\"TASK-1\", \"TASK-2\", \"TASK-2\", \"TASK-1\"), outputForConcurrentTasks);\r\n \t}\r", "fixed": " \t\tschedulerService.scheduleTask(t1);\r\nThread.sleep(50);\n \t\tschedulerService.scheduleTask(t2);\r\nThread.sleep(2500);\n \t\tassertEquals(Arrays.asList(\"TASK-1\", \"TASK-2\", \"TASK-2\", \"TASK-1\"), outputForConcurrentTasks);\r\n \t}\r", "sourceBeforeFix": "Thread.sleep(600)", "sourceAfterFix": "Thread.sleep(2500)"}
{"fixCommitSHA1": "0bd6dc9caaba2f2fe512f670fa3d04aef9db8eed", "projectName": "Atmosphere.atmosphere", "bugType": "Change Boolean Literal", "problem": "     public static Object invokeMethod(Method method, Object objectToInvoke, Object decodedObject) {\n         Object objectToEncode = null;\n        boolean hasMatch = true;\n         try {\n             objectToEncode = method.invoke(objectToInvoke, new Object[]{decodedObject});\n             hasMatch = true;", "fixed": "     public static Object invokeMethod(Method method, Object objectToInvoke, Object decodedObject) {\n         Object objectToEncode = null;\n        boolean hasMatch = false;\n         try {\n             objectToEncode = method.invoke(objectToInvoke, new Object[]{decodedObject});\n             hasMatch = true;", "sourceBeforeFix": "hasMatch=true", "sourceAfterFix": "hasMatch=false"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   }\n   public void normalize() {\n    logger.info(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();", "fixed": "   }\n   public void normalize() {\n    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();", "sourceBeforeFix": "logger.info(\"Normalizing\")", "sourceAfterFix": "logger.fine(\"Normalizing\")"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.valueOf(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "fixed": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "d18d75cdfc36f74fed0c8df772835f38d9604b13", "projectName": "libgdx.libgdx", "bugType": "Change Boolean Literal", "problem": " \t\r\n \tpublic Animation getAnimation (final String id) {\r\n\t\treturn getAnimation(id, true);\r\n \t}\r\n \t/** @param id The ID of the animation to fetch.\r", "fixed": " \t\r\n \tpublic Animation getAnimation (final String id) {\r\n\t\treturn getAnimation(id, false);\r\n \t}\r\n \t/** @param id The ID of the animation to fetch.\r", "sourceBeforeFix": "getAnimation(id,true)", "sourceAfterFix": "getAnimation(id,false)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAhcEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AhcEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAhcEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AhcEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytesBinary(tableNameOrRegionName), Bytes.toBytesBinary(splitPoint));\n   }\n   /**", "fixed": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytes(tableNameOrRegionName), Bytes.toBytes(splitPoint));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see\n \t */\n\tpublic boolean equalToReference(T candidate);\n \t/**\n \t * This method compares the element that has been set as reference in this type accessor, to the", "fixed": " \t * \n* @see\n \t */\n\tpublic abstract boolean equalToReference(T candidate);\n \t/**\n \t * This method compares the element that has been set as reference in this type accessor, to the", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "4a19c2c078ddf5484e0cb8c1ac075451f158fa40", "projectName": "Atmosphere.atmosphere", "bugType": "Change Unary Operator\t", "problem": "                     switch (p2) {\n                         case BEFORE_DEFAULT:\n                         case FIRST_BEFORE_DEFAULT:\n                            orderResult = -1;\n                             break;\n                     }\n                     break;", "fixed": "                     switch (p2) {\n                         case BEFORE_DEFAULT:\n                         case FIRST_BEFORE_DEFAULT:\n                            orderResult = 1;\n                             break;\n                     }\n                     break;", "sourceBeforeFix": "1", "sourceAfterFix": "-1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n \t/**\n \t * Get a listing or important variables used in openmrs", "fixed": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t/**\n \t * Get a listing or important variables used in openmrs", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "41467c8004b716fb78002c3139ea771b70ed165d", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tprivate void renderCached () {\r\n\t\tcache5.setColor(red);\r\n \t\tcache5.draw(spriteBatch);\r\n \t\tcache1.draw(spriteBatch);\r", "fixed": " \t}\r\n \tprivate void renderCached () {\r\n\t\tcache5.setColors(red);\r\n \t\tcache5.draw(spriteBatch);\r\n \t\tcache1.draw(spriteBatch);\r", "sourceBeforeFix": "cache5.setColor(red)", "sourceAfterFix": "cache5.setColors(red)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WebsocketEndpointBuilder\n             extends\n                 WebsocketEndpointConsumerBuilder, WebsocketEndpointProducerBuilder {\n         default AdvancedWebsocketEndpointBuilder advanced() {", "fixed": "     \n    public interface WebsocketEndpointBuilder\n             extends\n                 WebsocketEndpointConsumerBuilder, WebsocketEndpointProducerBuilder {\n         default AdvancedWebsocketEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsSameNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsSameNull() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "1037541f3c6d60ce2994c1130481f1af6a5df4b7", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "     public void testCacheGet() throws Exception {\n         final Cache<Object, Object> cache = getTestCache();\n         final Integer key = 1;\n        final Integer val = 1;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n         mock.expectedMinimumMessageCount(1);\n         mock.expectedBodiesReceived(val);\n        mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT, false);\n         mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED, true);\nfluentTemplate().withHeader(CaffeineConstants.ACTION, CaffeineConstants.ACTION_GET).withHeader(CaffeineConstants.KEY, key).withBody(val).to(\"direct:", "fixed": "     public void testCacheGet() throws Exception {\n         final Cache<Object, Object> cache = getTestCache();\n         final Integer key = 1;\n        final Integer val = 2;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n         mock.expectedMinimumMessageCount(1);\n         mock.expectedBodiesReceived(val);\n        mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT, true);\n         mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED, true);\nfluentTemplate().withHeader(CaffeineConstants.ACTION, CaffeineConstants.ACTION_GET).withHeader(CaffeineConstants.KEY, key).withBody(val).to(\"direct:", "sourceBeforeFix": "mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,false)", "sourceAfterFix": "mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,true)"}
{"fixCommitSHA1": "5ac0dcd1b04e38a3dbe11a94897cc0a34ef2d5ec", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic void log (String tag, String message);\r\n \t\r\n\tpublic void log (String tag, String message, Exception exception);\r\n \t\r\n \tpublic void error (String tag, String message);\r", "fixed": " \tpublic void log (String tag, String message);\r\n \t\r\n\tpublic void log (String tag, String message, Throwable exception);\r\n \t\r\n \tpublic void error (String tag, String message);\r", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "Throwable exception"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeOutEdge(Object edge) {\n     N previousNode = incidentEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }", "fixed": "   }\n   @Override\n  public N removeOutEdge(E edge) {\n     N previousNode = incidentEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see java.lang.Object\n \t */\n\tpublic int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "fixed": " \t * \n* @see java.lang.Object\n \t */\n\tpublic abstract int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "4a7e4baf334f0a22230e99046b4f63321ae9ccc4", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       DiagnosticType.disabled(\"JSC_JSDOC_MISSING_TYPE_WARNING\", \"{0}\");\n   static final DiagnosticType TOO_MANY_TEMPLATE_PARAMS =\n      DiagnosticType.error(\"JSC_TOO_MANY_TEMPLATE_PARAMS\", \"{0}\");", "fixed": "       DiagnosticType.disabled(\"JSC_JSDOC_MISSING_TYPE_WARNING\", \"{0}\");\n   static final DiagnosticType TOO_MANY_TEMPLATE_PARAMS =\n      DiagnosticType.disabled(\"JSC_TOO_MANY_TEMPLATE_PARAMS\", \"{0}\");", "sourceBeforeFix": "DiagnosticType.error(\"JSC_TOO_MANY_TEMPLATE_PARAMS\",\"{0}\")", "sourceAfterFix": "DiagnosticType.disabled(\"JSC_TOO_MANY_TEMPLATE_PARAMS\",\"{0}\")"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.debug(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "fixed": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "sourceBeforeFix": "logger.debug(\"attempting to login\")", "sourceAfterFix": "logger.trace(\"attempting to login\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HBaseEndpointBuilder\n             extends\n                 HBaseEndpointConsumerBuilder, HBaseEndpointProducerBuilder {\n         default AdvancedHBaseEndpointBuilder advanced() {", "fixed": "     \n    public interface HBaseEndpointBuilder\n             extends\n                 HBaseEndpointConsumerBuilder, HBaseEndpointProducerBuilder {\n         default AdvancedHBaseEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ce8d80dd2543eaa821e861969cfb53b9b3a666de", "projectName": "alibaba.fastjson", "bugType": "Less Specific If", "problem": "                }\n                superClass = superClass.getSuperclass();\n               if (superClass == Object.class) {\n                    break;\n                }\n             }", "fixed": "                }\n                superClass = superClass.getSuperclass();\n               if (superClass == Object.class || superClass == null) {\n                    break;\n                }\n             }", "sourceBeforeFix": "superClass == Object.class", "sourceAfterFix": "superClass == Object.class || superClass == null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.datatype : cp.baseType);\n     }\n     private String getJSDocTypeWithBraces(CodegenParameter cp) {\n         return \"{\" + getJSDocType(cp) + \"}\";\n     }\n     private String getJSDocType(CodegenParameter cp) {\n         String dataType = trimBrackets(cp.dataType);", "fixed": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.datatype : cp.baseType);\n     }\n    \n     private String getJSDocType(CodegenParameter cp) {\n         String dataType = trimBrackets(cp.dataType);", "sourceBeforeFix": "getJSDocTypeWithBraces(cm,var)", "sourceAfterFix": "getJSDocType(cm,var)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTextureEXT(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "fixed": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTexture(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "sourceBeforeFix": "GL.glDrawArraysEXT(mode,first,count)", "sourceAfterFix": "GL.glDrawArrays(mode,first,count)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "70fd3ee0bcb1f42ecbdacb5164990becbc43d99a", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         if (serializer != null) {\n             serializer.write(os, o);\n         } else {\n            response.getOutputStream().write(o.toString().getBytes());\n         }\n         return this;\n     }", "fixed": "         if (serializer != null) {\n             serializer.write(os, o);\n         } else {\n            response.getOutputStream().write(o.toString().getBytes(response.getCharacterEncoding()));\n         }\n         return this;\n     }", "sourceBeforeFix": "o.toString().getBytes()", "sourceAfterFix": "o.toString().getBytes(response.getCharacterEncoding())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "574eba95526a7b9e458edd582caace229323164e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             for (Method ifceMethod : ifce.getMethods()) {\n                 try {\n                     final Method beanMethod = sessionBeanClass.getMethod(ifceMethod.getName(), ifceMethod.getParameterTypes());\n                    if ((beanMethod.getModifiers() & Modifier.FINAL) == Modifier.FINAL) {\n                         throw EjbLogger.ROOT_LOGGER.businessViewMethodDeclaredFinal(beanMethod.getName(), sessionBeanClass.getName());\n                     }\n                 } catch (NoSuchMethodException e) {", "fixed": "             for (Method ifceMethod : ifce.getMethods()) {\n                 try {\n                     final Method beanMethod = sessionBeanClass.getMethod(ifceMethod.getName(), ifceMethod.getParameterTypes());\n                    if (Modifier.isFinal(beanMethod.getModifiers())) {\n                         throw EjbLogger.ROOT_LOGGER.businessViewMethodDeclaredFinal(beanMethod.getName(), sessionBeanClass.getName());\n                     }\n                 } catch (NoSuchMethodException e) {", "sourceBeforeFix": "verifyViewMethodsNotDeclaredFinal(sessionBeanClass,remoteBusinessInterfaces)", "sourceAfterFix": "verifyViewMethodsNotDeclaredFinal(sessionBeanClass,localBusinessInterfaces)"}
{"fixCommitSHA1": "4cd1f08314076c86ecb4d1e8699cdcbbaba6b567", "projectName": "gephi.gephi", "bugType": "Less Specific If", "problem": "             AttributeType attributeType = AttributeType.STRING;\n            if (type.equalsIgnoreCase(\"boolean\")) {\n                 attributeType = dynamic ? AttributeType.DYNAMIC_BOOLEAN : AttributeType.BOOLEAN;\n            } else if (type.equalsIgnoreCase(\"integer\")) {\n                 attributeType = dynamic ? AttributeType.DYNAMIC_INT : AttributeType.INT;\n             } else if (type.equalsIgnoreCase(\"long\")) {\n                 attributeType = dynamic ? AttributeType.DYNAMIC_LONG : AttributeType.LONG;", "fixed": "             AttributeType attributeType = AttributeType.STRING;\n            if (type.equalsIgnoreCase(\"boolean\") || type.equalsIgnoreCase(\"bool\")) {\n                 attributeType = dynamic ? AttributeType.DYNAMIC_BOOLEAN : AttributeType.BOOLEAN;\n            } else if (type.equalsIgnoreCase(\"integer\") || type.equalsIgnoreCase(\"int\")) {\n                 attributeType = dynamic ? AttributeType.DYNAMIC_INT : AttributeType.INT;\n             } else if (type.equalsIgnoreCase(\"long\")) {\n                 attributeType = dynamic ? AttributeType.DYNAMIC_LONG : AttributeType.LONG;", "sourceBeforeFix": "type.equalsIgnoreCase(\"boolean\")", "sourceAfterFix": "type.equalsIgnoreCase(\"boolean\") || type.equalsIgnoreCase(\"bool\")"}
{"fixCommitSHA1": "c256ca546b3d6169bbfd8df1153c151cc67cfe62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         mock.reset();\n        mock.expectedMessageCount(1);\n         context().startRoute(\"trigger\");", "fixed": "         mock.reset();\n        mock.expectedMinimumMessageCount(1);\n         context().startRoute(\"trigger\");", "sourceBeforeFix": "mock.expectedMessageCount(1)", "sourceAfterFix": "mock.expectedMinimumMessageCount(1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d4a1a1cdac176e1f13c04cbbee22b690c8c7b5fe", "projectName": "wildfly.wildfly", "bugType": "Change Caller in Function Call", "problem": "         }\n         final ManagedServer server = createManagedServer(serverName, domainModel, authKey);\n         if(servers.putIfAbsent(serverName, server) != null) {\n            ROOT_LOGGER.existingServerWithState(serverName, existing.getState());\n             return;\n         }\n         if(running) {", "fixed": "         }\n         final ManagedServer server = createManagedServer(serverName, domainModel, authKey);\n         if(servers.putIfAbsent(serverName, server) != null) {\n            ROOT_LOGGER.existingServerWithState(serverName, server.getState());\n             return;\n         }\n         if(running) {", "sourceBeforeFix": "existing.getState()", "sourceAfterFix": "server.getState()"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n \t/**\n \t * Save the given list of global properties to the database.", "fixed": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t/**\n \t * Save the given list of global properties to the database.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JSR356WebSocketEndpointBuilder\n             extends\n                 JSR356WebSocketEndpointConsumerBuilder, JSR356WebSocketEndpointProducerBuilder {\n         default AdvancedJSR356WebSocketEndpointBuilder advanced() {", "fixed": "     \n    public interface JSR356WebSocketEndpointBuilder\n             extends\n                 JSR356WebSocketEndpointConsumerBuilder, JSR356WebSocketEndpointProducerBuilder {\n         default AdvancedJSR356WebSocketEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e81be4536f5156b105fff4b7328fc3e4e7a24931", "projectName": "junit-team.junit", "bugType": "Same Function Less Args", "problem": "         }\n         Test test = null;\n         try {\ntest = (Test) suiteMethod.invoke(null, (Object[]) new Class[0]);\n             if (test == null) {\n                 return test;\n             }", "fixed": "         }\n         Test test = null;\n         try {\ntest = (Test) suiteMethod.invoke(null);\n             if (test == null) {\n                 return test;\n             }", "sourceBeforeFix": "testClass.getMethod(SUITE_METHODNAME,new Class[0])", "sourceAfterFix": "testClass.getMethod(SUITE_METHODNAME)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Jt400EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJt400EndpointProducerBuilder advanced() {", "fixed": "     \n    public interface Jt400EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJt400EndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    private static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "e5dcfd2f736de77c11d097e4f12209706f475186", "projectName": "Bukkit.Bukkit", "bugType": "Change Numeric Literal", "problem": "     SUGAR(353),\n     CAKE(354, 1),\n     BED(355),\n    DIODE(100),\n     GOLD_RECORD(2256, 1),\n     GREEN_RECORD(2257, 1);", "fixed": "     SUGAR(353),\n     CAKE(354, 1),\n     BED(355),\n    DIODE(356),\n     GOLD_RECORD(2256, 1),\n     GREEN_RECORD(2257, 1);", "sourceBeforeFix": "DIODE(100)", "sourceAfterFix": "DIODE(356)"}
{"fixCommitSHA1": "a5f1f8199f76349cbcb39ba969e51dadc65f2c63", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     String englishPOSTestPath = \"/u/nlp/data/pos-tagger/english/test-wsj-22-24\";\n     List<String> sentences = readInPOSData(englishPOSTestPath);\n     double ENGLISH_BIDIRECTIONAL_TOKEN_ACCURACY = .972;\n    double ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY = .564;\n     runPOSTest(sentences, \"_\", englishBiDirectionalPipeline,\n         ENGLISH_BIDIRECTIONAL_TOKEN_ACCURACY, ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY,\n         \"English BiDirectional\", false);", "fixed": "     String englishPOSTestPath = \"/u/nlp/data/pos-tagger/english/test-wsj-22-24\";\n     List<String> sentences = readInPOSData(englishPOSTestPath);\n     double ENGLISH_BIDIRECTIONAL_TOKEN_ACCURACY = .972;\n    double ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY = .563;\n     runPOSTest(sentences, \"_\", englishBiDirectionalPipeline,\n         ENGLISH_BIDIRECTIONAL_TOKEN_ACCURACY, ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY,\n         \"English BiDirectional\", false);", "sourceBeforeFix": "ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY=.564", "sourceAfterFix": "ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY=.563"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "b1aa0100b3f37551bcd8507d168449d8b03c5c57", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "             retract(view, ((AbstractNode) node));\n         }\n        graphVersion.incNodeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "fixed": "             retract(view, ((AbstractNode) node));\n         }\n        graphVersion.incNodeAndEdgeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "sourceBeforeFix": "graphVersion.incNodeVersion()", "sourceAfterFix": "graphVersion.incNodeAndEdgeVersion()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "     return secret;\n   }\n  String getPercentEncodedKey() {\n     return percentEncodedKey;\n   }", "fixed": "     return secret;\n   }\n  public String getPercentEncodedKey() {\n     return percentEncodedKey;\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedXQueryEndpointBuilder\n             extends\n                 AdvancedXQueryEndpointConsumerBuilder, AdvancedXQueryEndpointProducerBuilder {\n         default XQueryEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedXQueryEndpointBuilder\n             extends\n                 AdvancedXQueryEndpointConsumerBuilder, AdvancedXQueryEndpointProducerBuilder {\n         default XQueryEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d6fd0d3832907ff36789b89450df09320081fc66", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "     final long callId;\n     final long callStartNanos;\n    public PrintingEventListener(long callId, long callStartNanos) {\n       this.callId = callId;\n       this.callStartNanos = callStartNanos;\n     }", "fixed": "     final long callId;\n     final long callStartNanos;\n    PrintingEventListener(long callId, long callStartNanos) {\n       this.callId = callId;\n       this.callStartNanos = callStartNanos;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8eaaa7fdcddab9de44049a062f413533d2447f26", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Numeric Literal", "problem": "             quietlySleep(sleepBackoff);\n            sleepBackoff = Math.min(connectionTimeout / 2, (long) (sleepBackoff * 1.3));\n          }\n          return Boolean.FALSE;", "fixed": "             quietlySleep(sleepBackoff);\n            sleepBackoff = Math.min(connectionTimeout / 4, (long) (sleepBackoff * 1.3));\n          }\n          return Boolean.FALSE;", "sourceBeforeFix": "connectionTimeout / 2", "sourceAfterFix": "connectionTimeout / 4"}
{"fixCommitSHA1": "175f9f119e75281a4548a35a9b915cbefe270c30", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "     Assert.assertEquals(Constants.SECOND_MS, intValue);\n     intValue = sDefaultConfiguration.getInt(Constants.WORKER_WORKER_BLOCK_THREADS_MIN);\n    Assert.assertEquals(1, intValue);\n     intValue = sDefaultConfiguration.getInt(Constants.WORKER_SESSION_TIMEOUT_MS);\n     Assert.assertEquals(10 * Constants.SECOND_MS, intValue);", "fixed": "     Assert.assertEquals(Constants.SECOND_MS, intValue);\n     intValue = sDefaultConfiguration.getInt(Constants.WORKER_WORKER_BLOCK_THREADS_MIN);\n    Assert.assertEquals(256, intValue);\n     intValue = sDefaultConfiguration.getInt(Constants.WORKER_SESSION_TIMEOUT_MS);\n     Assert.assertEquals(10 * Constants.SECOND_MS, intValue);", "sourceBeforeFix": "Assert.assertEquals(1,intValue)", "sourceAfterFix": "Assert.assertEquals(256,intValue)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ed1852a789daeef03ab260ef4f962bca9160d13e", "projectName": "iluwatar.java-design-patterns", "bugType": "Change Identifier Used", "problem": "   \n  private final Prototype testedPrototype;\n   /**\n* The expected {@link Prototype", "fixed": "   \n  private final P testedPrototype;\n   /**\n* The expected {@link Prototype", "sourceBeforeFix": "/**   * The tested prototype instance  */ private final Prototype testedPrototype; ", "sourceAfterFix": "/**   * The tested prototype instance  */ private final P testedPrototype; "}
{"fixCommitSHA1": "8ab6632d7aacd4bb08204db98792616a53b40cca", "projectName": "dropwizard.metrics", "bugType": "Change Identifier Used", "problem": "     public static Map<String, GarbageCollector> garbageCollectors() {\n         final Map<String, GarbageCollector> gcs = new HashMap<String, GarbageCollector>();\n         for (GarbageCollectorMXBean bean : getGarbageCollectorMXBeans()) {\n            gcs.put(bean.getName(), new GarbageCollector(bean.getCollectionCount(), bean.getCollectionCount()));\n         }\n         return gcs;\n     }", "fixed": "     public static Map<String, GarbageCollector> garbageCollectors() {\n         final Map<String, GarbageCollector> gcs = new HashMap<String, GarbageCollector>();\n         for (GarbageCollectorMXBean bean : getGarbageCollectorMXBeans()) {\n            gcs.put(bean.getName(), new GarbageCollector(bean.getCollectionCount(), bean.getCollectionTime()));\n         }\n         return gcs;\n     }", "sourceBeforeFix": "bean.getCollectionCount()", "sourceAfterFix": "bean.getCollectionTime()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJdbcEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JdbcEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJdbcEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JdbcEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Before\n     @Override\n     public void setUp() throws Exception {\n        nagios = new NagiosNscaStub(25667, \"password\");\n         nagios.start();\n         super.setUp();", "fixed": "     @Before\n     @Override\n     public void setUp() throws Exception {\n        nagios = new NagiosNscaStub(25669, \"password\");\n         nagios.start();\n         super.setUp();", "sourceBeforeFix": "new NagiosNscaStub(25667,\"password\")", "sourceAfterFix": "new NagiosNscaStub(25669,\"password\")"}
{"fixCommitSHA1": "8bbd614034d1949d4f0f787d56c510848eaaa787", "projectName": "apache.hive", "bugType": "Change Numeric Literal", "problem": "     HIVE_SERVER2_ASYNC_EXEC_THREADS(\"hive.server2.async.exec.threads\", 100),\n    HIVE_SERVER2_ASYNC_EXEC_SHUTDOWN_TIMEOUT(\"hive.server2.async.exec.shutdown.timeout\", 10L),\n     HIVE_SERVER2_ASYNC_EXEC_WAIT_QUEUE_SIZE(\"hive.server2.async.exec.wait.queue.size\", 100),", "fixed": "     HIVE_SERVER2_ASYNC_EXEC_THREADS(\"hive.server2.async.exec.threads\", 100),\n    HIVE_SERVER2_ASYNC_EXEC_SHUTDOWN_TIMEOUT(\"hive.server2.async.exec.shutdown.timeout\", 10),\n     HIVE_SERVER2_ASYNC_EXEC_WAIT_QUEUE_SIZE(\"hive.server2.async.exec.wait.queue.size\", 100),", "sourceBeforeFix": "HIVE_SERVER2_ASYNC_EXEC_SHUTDOWN_TIMEOUT(\"hive.server2.async.exec.shutdown.timeout\",10L)", "sourceAfterFix": "HIVE_SERVER2_ASYNC_EXEC_SHUTDOWN_TIMEOUT(\"hive.server2.async.exec.shutdown.timeout\",10)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNano(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "fixed": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "eb71c8999ff29f7dc3fe8dcdba81084f7f6a5fac", "projectName": "NanoHttpd.nanohttpd", "bugType": "Same Function More Args", "problem": "                     while (mpline != null && mpline.trim().length() > 0) {\n                         int p = mpline.indexOf(':');\n                         if (p != -1) {\n                            item.put(mpline.substring(0, p).trim().toLowerCase(), mpline.substring(p + 1).trim());\n                         }\n                         mpline = in.readLine();\n                     }", "fixed": "                     while (mpline != null && mpline.trim().length() > 0) {\n                         int p = mpline.indexOf(':');\n                         if (p != -1) {\n                            item.put(mpline.substring(0, p).trim().toLowerCase(Locale.US), mpline.substring(p + 1).trim());\n                         }\n                         mpline = in.readLine();\n                     }", "sourceBeforeFix": "line.substring(0,p).trim().toLowerCase()", "sourceAfterFix": "line.substring(0,p).trim().toLowerCase(Locale.US)"}
{"fixCommitSHA1": "4a1fe28154e697fe94e5d611cf0586032bc95d63", "projectName": "facebook.presto", "bugType": "Change Binary Operator", "problem": "         else if (SEQUENCE_FILE_MAGIC.equals(magic)) {\n             byte sequenceFileVersion = input.readByte();\n            if (sequenceFileVersion == SEQUENCE_FILE_VERSION) {\n                 throw corrupt(\"File %s is a SequenceFile not an RCFile\", dataSource);\n             }", "fixed": "         else if (SEQUENCE_FILE_MAGIC.equals(magic)) {\n             byte sequenceFileVersion = input.readByte();\n            if (sequenceFileVersion != SEQUENCE_FILE_VERSION) {\n                 throw corrupt(\"File %s is a SequenceFile not an RCFile\", dataSource);\n             }", "sourceBeforeFix": "sequenceFileVersion == SEQUENCE_FILE_VERSION", "sourceAfterFix": "sequenceFileVersion != SEQUENCE_FILE_VERSION"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SftpEndpointBuilder\n             extends\n                 SftpEndpointConsumerBuilder, SftpEndpointProducerBuilder {\n         default AdvancedSftpEndpointBuilder advanced() {", "fixed": "     \n    public interface SftpEndpointBuilder\n             extends\n                 SftpEndpointConsumerBuilder, SftpEndpointProducerBuilder {\n         default AdvancedSftpEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.valueOf(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "fixed": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\trpcEndpoint.shutDown();\n\t\tCompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\ttry {\n \t\t\tterminationFuture.get();", "fixed": " \t\trpcEndpoint.shutDown();\n\t\tCompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\ttry {\n \t\t\tterminationFuture.get();", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "bcb6eeec1d978d6d572ebec875d34dc64aeb5121", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.intValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "fixed": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.longValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "sourceBeforeFix": "n.intValue()", "sourceAfterFix": "n.longValue()"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\ttry {\r\n \t\t\tthis.destroy();\r\n \t\t}\r\n\t\tcatch (Throwable ex) {\r\n \t\t\tlog.error(ex);\r\n \t\t}\r\n \t}\r", "fixed": " \t\ttry {\r\n \t\t\tthis.destroy();\r\n \t\t}\r\n\t\tcatch (Exception ex) {\r\n \t\t\tlog.error(ex);\r\n \t\t}\r\n \t}\r", "sourceBeforeFix": "Throwable ex", "sourceAfterFix": "Exception ex"}
{"fixCommitSHA1": "d0c64987a9cb694631a3e5bc77b669f49f93a30e", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();", "fixed": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();", "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0", "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n \t/**\n \t * Get a listing or important variables used in openmrs", "fixed": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t/**\n \t * Get a listing or important variables used in openmrs", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "69f4d46a6b7d8134c5f0b0c238658d00be40c2b3", "projectName": "Atmosphere.atmosphere", "bugType": "Change Modifier", "problem": "     private static final boolean DEBUG = false;\n    private final Logger logger = LoggerFactory.getLogger(AnnotationDetector.class);\n     private static final int CP_UTF8 = 1;", "fixed": "     private static final boolean DEBUG = false;\n    private final static Logger logger = LoggerFactory.getLogger(AnnotationDetector.class);\n     private static final int CP_UTF8 = 1;", "sourceBeforeFix": "18", "sourceAfterFix": "26"}
{"fixCommitSHA1": "407fa8afd0cc9c7cb69859528f3cbb2e6b0f4c8e", "projectName": "apache.camel", "bugType": "Change Binary Operator", "problem": "             if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {\n                 Model oldModel = swagger.getDefinitions().get(entry.getKey());\n                 if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {\n                    oldExt = oldModel.getVendorExtensions().get(\"x-className\") == null;\n                 }\n             }", "fixed": "             if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {\n                 Model oldModel = swagger.getDefinitions().get(entry.getKey());\n                 if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {\n                    oldExt = oldModel.getVendorExtensions().get(\"x-className\") != null;\n                 }\n             }", "sourceBeforeFix": "oldModel.getVendorExtensions().get(\"x-className\") == null", "sourceAfterFix": "oldModel.getVendorExtensions().get(\"x-className\") != null"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnablednHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "fixed": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "f7b2c3d92be930928a5e181fc81a851cee39166d", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t\tbreak;\r\n \t\t\t\t\tcase UITouchPhase.Moved:\r\n \t\t\t\t\tcase UITouchPhase.Stationary:\r\n\t\t\t\t\t\tinputProcessor.touchDown(event.x, event.y, event.pointer, Buttons.LEFT);\r\n \t\t\t\t\t\tbreak;\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r", "fixed": " \t\t\t\t\t\tbreak;\r\n \t\t\t\t\tcase UITouchPhase.Moved:\r\n \t\t\t\t\tcase UITouchPhase.Stationary:\r\n\t\t\t\t\t\tinputProcessor.touchDragged(event.x, event.y, event.pointer);\r\n \t\t\t\t\t\tbreak;\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r", "sourceBeforeFix": "inputProcessor.touchDown(event.x,event.y,event.pointer,Buttons.LEFT)", "sourceAfterFix": "inputProcessor.touchDragged(event.x,event.y,event.pointer)"}
{"fixCommitSHA1": "f60a9cfe8b1b27d5ea25095bdfc690001da9f4d6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         return Objects.equals(filePattern, suppressElement.filePattern)\n                 && Objects.equals(checkPattern, suppressElement.checkPattern)\n                 && Objects.equals(moduleId, suppressElement.moduleId)\n                && Objects.equals(linesCSV, suppressElement.linesCSV)\n                && Objects.equals(columnsCSV, suppressElement.columnsCSV);\n     }\n }", "fixed": "         return Objects.equals(filePattern, suppressElement.filePattern)\n                 && Objects.equals(checkPattern, suppressElement.checkPattern)\n                 && Objects.equals(moduleId, suppressElement.moduleId)\n                && Objects.equals(linesCsv, suppressElement.linesCsv)\n                && Objects.equals(columnsCsv, suppressElement.columnsCsv);\n     }\n }", "sourceBeforeFix": "new CSVFilter(lines)", "sourceAfterFix": "new CsvFilter(lines)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "fixed": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "c2d5b41fb48cc2b913a2a04d2b68aa4369acac6a", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Set parse tree.\n      * @param parseTree DetailAST parse tree.\n      */\n    final void setParseTree(DetailAST parseTree) {\n         ((AST) root).setFirstChild(parseTree);\n     }", "fixed": "      * Set parse tree.\n      * @param parseTree DetailAST parse tree.\n      */\n    protected final void setParseTree(DetailAST parseTree) {\n         ((AST) root).setFirstChild(parseTree);\n     }", "sourceBeforeFix": "16", "sourceAfterFix": "20"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "5cf710f1b72db6a8413d42668b0e878243217165", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "                         l.onSuspend(request, response);\n                         break;\n                     case RESUME:\n                        l.onSuspend(request, response);\n                         break;\n                     case DESTROYED:\n                         l.onDestroyed(request, response);", "fixed": "                         l.onSuspend(request, response);\n                         break;\n                     case RESUME:\n                        l.onResume(request, response);\n                         break;\n                     case DESTROYED:\n                         l.onDestroyed(request, response);", "sourceBeforeFix": "l.onSuspend(request,response)", "sourceAfterFix": "l.onResume(request,response)"}
{"fixCommitSHA1": "8a9e1bcbff1ff10cf122b23b3a1aa437f02a2086", "projectName": "gephi.gephi", "bugType": "Change Unary Operator\t", "problem": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "fixed": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && !sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "sourceBeforeFix": "sourceEdgeTextData.getText().isEmpty()", "sourceAfterFix": "!sourceEdgeTextData.getText().isEmpty()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "db5a771e90739dd0e121f45aff09f383a225113b", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Binary Operator", "problem": "       }\n     }\n     boolean overwriteOriginalNer = false;\n    if (prevNerEndIndex != (start-1) || nextNerStartIndex != end) {\n     } else if (startNer == null) {", "fixed": "       }\n     }\n     boolean overwriteOriginalNer = false;\n    if (prevNerEndIndex != (start-1) && nextNerStartIndex != end) {\n     } else if (startNer == null) {", "sourceBeforeFix": "prevNerEndIndex != (start - 1) || nextNerStartIndex != end", "sourceAfterFix": "prevNerEndIndex != (start - 1) && nextNerStartIndex != end"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedXChangeEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default XChangeEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedXChangeEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default XChangeEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8b0fec4451e8147bbe5bdbf29d235744c9aca01a", "projectName": "gephi.gephi", "bugType": "Change Binary Operator", "problem": "             positionKey2E.setAttribute(\"attr.type\", \"float\");\n             positionKey2E.setAttribute(\"for\", \"node\");\n             root.appendChild(positionKey2E);\n            if (minZ != 0f && maxZ != 0f) {\n                 Element positionKey3E = document.createElement(\"key\");\n                 positionKey3E.setAttribute(\"id\", \"z\");\n                 positionKey3E.setAttribute(\"attr.name\", \"z\");", "fixed": "             positionKey2E.setAttribute(\"attr.type\", \"float\");\n             positionKey2E.setAttribute(\"for\", \"node\");\n             root.appendChild(positionKey2E);\n            if (minZ != 0f || maxZ != 0f) {\n                 Element positionKey3E = document.createElement(\"key\");\n                 positionKey3E.setAttribute(\"id\", \"z\");\n                 positionKey3E.setAttribute(\"attr.name\", \"z\");", "sourceBeforeFix": "minZ != 0f && maxZ != 0f", "sourceAfterFix": "minZ != 0f || maxZ != 0f"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3deba86fbc98387501b2076b82c35ac78a56de21", "projectName": "square.javapoet", "bugType": "Change Identifier Used", "problem": "     javaWriter.emitPackage(\"com.squareup\");\n     javaWriter.beginType(\"com.squareup.Foo\", \"class\", 0);\n     javaWriter.beginMethod(\"int\", \"foo\", 0, \"java.lang.String\", \"s\");\n    javaWriter.emitSingleLineCOmment(\"foo\");\n     javaWriter.emitStatement(\"int j = s.length() + %s\", 13);\n     javaWriter.endMethod();\n     javaWriter.endType();", "fixed": "     javaWriter.emitPackage(\"com.squareup\");\n     javaWriter.beginType(\"com.squareup.Foo\", \"class\", 0);\n     javaWriter.beginMethod(\"int\", \"foo\", 0, \"java.lang.String\", \"s\");\n    javaWriter.emitSingleLineComment(\"foo\");\n     javaWriter.emitStatement(\"int j = s.length() + %s\", 13);\n     javaWriter.endMethod();\n     javaWriter.endType();", "sourceBeforeFix": "javaWriter.emitSingleLineCOmment(\"foo\")", "sourceAfterFix": "javaWriter.emitSingleLineComment(\"foo\")"}
{"fixCommitSHA1": "3b47b9b23bf3f10d124f26f37dff3245fe09ec56", "projectName": "wildfly.wildfly", "bugType": "Change Caller in Function Call", "problem": "             if (!queueLength.isDefined() || queueLength.asInt() == Integer.MAX_VALUE) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(coreThreads.asString());\n                 }\n             }", "fixed": "             if (!queueLength.isDefined() || queueLength.asInt() == Integer.MAX_VALUE) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(queueLength.asString());\n                 }\n             }", "sourceBeforeFix": "coreThreads.asString()", "sourceAfterFix": "queueLength.asString()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "fixed": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glGenTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "fixed": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "sourceBeforeFix": "id=15806", "sourceAfterFix": "id=10806"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8616612734924c0a8a9781aed94669c866b12981", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         try {\n             final String echo = localEcho.echo(message);\n             Assert.fail(\"Remote invocation on a local view \" + LocalEcho.class.getName() + \" was expected to fail\");\n        } catch (EJBException nsee) {\n             logger.trace(\"Got the expected exception on invoking on a local view, remotely\", nsee);\n         }", "fixed": "         try {\n             final String echo = localEcho.echo(message);\n             Assert.fail(\"Remote invocation on a local view \" + LocalEcho.class.getName() + \" was expected to fail\");\n        } catch (IllegalStateException nsee) {\n             logger.trace(\"Got the expected exception on invoking on a local view, remotely\", nsee);\n         }", "sourceBeforeFix": "EJBException nsee", "sourceAfterFix": "IllegalStateException nsee"}
{"fixCommitSHA1": "c32df371abcbee7ebbb77e6bf6a429d3f3f4134b", "projectName": "netty.netty", "bugType": "Change Caller in Function Call", "problem": "             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + bytesToCopy) + \", maximum is \" + data.limit());\n         }\n         dst.put(tmpBuf);\n     }", "fixed": "             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + bytesToCopy) + \", maximum is \" + buffer.limit());\n         }\n         dst.put(tmpBuf);\n     }", "sourceBeforeFix": "data.limit()", "sourceAfterFix": "buffer.limit()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "346387c717048391485fb28f877531aab1095de1", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "                 + \" files\", Project.MSG_INFO);\n         log(\"Using configuration \" + configLocation, Project.MSG_VERBOSE);\n        int numErrs;\n         try {\n             final long processingStartTime = System.currentTimeMillis();", "fixed": "                 + \" files\", Project.MSG_INFO);\n         log(\"Using configuration \" + configLocation, Project.MSG_VERBOSE);\n        final int numErrs;\n         try {\n             final long processingStartTime = System.currentTimeMillis();", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.valueOf(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "fixed": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return b.toString();\n   }\n  private String formatPosition(String sourceName, int lineNumber) {\n     StringBuilder b = new StringBuilder();\n     if (sourceName != null) {\n       b.append(sourceName);", "fixed": "     return b.toString();\n   }\n  private static String formatPosition(String sourceName, int lineNumber) {\n     StringBuilder b = new StringBuilder();\n     if (sourceName != null) {\n       b.append(sourceName);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "fixed": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "sourceBeforeFix": "logger.debug(\"MyQ binding received command '{}' for item '{}'\",command,itemName)", "sourceAfterFix": "logger.trace(\"MyQ binding received command '{}' for item '{}'\",command,itemName)"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeInEdge(Object edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "fixed": "   }\n   @Override\n  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "1b48948453abfca68f40756572ca9ee744242d5c", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "   }\n  private static final double EnglishUdLas = 84.9873;\n   /**\n    * Test that the NN dependency parser performance doesn't change.", "fixed": "   }\n  private static final double EnglishUdLas = 88.72648417258083;\n   /**\n    * Test that the NN dependency parser performance doesn't change.", "sourceBeforeFix": "EnglishUdLas=84.9873", "sourceAfterFix": "EnglishUdLas=88.72648417258083"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "0ff511d978c273a8eae317ecf9f4f1b98e2efb07", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t}\n \t\t\treturn context;\n \t\t}\n\t\tcatch (Exception ex) {\n \t\t\ttry {\n \t\t\t\tfor (SpringApplicationRunListener runListener : runListeners) {\n \t\t\t\t\tfinishWithException(runListener, context, ex);", "fixed": " \t\t\t}\n \t\t\treturn context;\n \t\t}\n\t\tcatch (Throwable ex) {\n \t\t\ttry {\n \t\t\t\tfor (SpringApplicationRunListener runListener : runListeners) {\n \t\t\t\t\tfinishWithException(runListener, context, ex);", "sourceBeforeFix": "Exception ex", "sourceAfterFix": "Throwable ex"}
{"fixCommitSHA1": "a421ca3133ddf727a147e87455a5511444d8d4bb", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "             if (interfaceMethod.getModifiers().contains(Modifier.ABSTRACT)) {\n               ExecutableType methodType = Elements2.getExecutableElementAsMemberOf(\n                   types, interfaceMethod, implementingType);\n              implemetationMethodDescriptors.add(new ImplemetationMethodDescriptor.Builder()\n                   .name(interfaceMethod.getSimpleName().toString())\n                   .returnType(getAnnotatedType(element).getQualifiedName().toString())\n                   .publicMethod()", "fixed": "             if (interfaceMethod.getModifiers().contains(Modifier.ABSTRACT)) {\n               ExecutableType methodType = Elements2.getExecutableElementAsMemberOf(\n                   types, interfaceMethod, implementingType);\n              implementationMethodDescriptors.add(new ImplementationMethodDescriptor.Builder()\n                   .name(interfaceMethod.getSimpleName().toString())\n                   .returnType(getAnnotatedType(element).getQualifiedName().toString())\n                   .publicMethod()", "sourceBeforeFix": "implemetationMethodDescriptors.build()", "sourceAfterFix": "implementationMethodDescriptors.build()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fc80cf0f323b8f45dd7e80f5a4cc814ae6d691a7", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "   public void testMoveNoop() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "fixed": "   public void testMoveNoop() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}
{"fixCommitSHA1": "c5f6760c6804b5f0dfbec1ddd2953b3c58db58ce", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         void fail(Throwable cause) {\n             ReferenceCountUtil.release(msg);\n             if (promise != null) {\n                promise.setFailure(cause);\n             }\n         }", "fixed": "         void fail(Throwable cause) {\n             ReferenceCountUtil.release(msg);\n             if (promise != null) {\n                promise.tryFailure(cause);\n             }\n         }", "sourceBeforeFix": "promise.setFailure(cause)", "sourceAfterFix": "promise.tryFailure(cause)"}
{"fixCommitSHA1": "cee1ed39f39cb5fd403db3986d2412d6cab7da0c", "projectName": "scribejava.scribejava", "bugType": "Change Identifier Used", "problem": "     public static void main(String... args) throws IOException {\n         final String clientId = \"your client id\";\n        final string clientSecret = \"your client secret\";\n         final String secretState = \"secret\" + new Random().nextInt(999_999);\n         final OAuth20Service service = new ServiceBuilder()\n                 .apiKey(clientId)", "fixed": "     public static void main(String... args) throws IOException {\n         final String clientId = \"your client id\";\n        final String clientSecret = \"your client secret\";\n         final String secretState = \"secret\" + new Random().nextInt(999_999);\n         final OAuth20Service service = new ServiceBuilder()\n                 .apiKey(clientId)", "sourceBeforeFix": "final string clientSecret=\"your client secret\"; ", "sourceAfterFix": "final String clientSecret=\"your client secret\"; "}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface UndertowEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedUndertowEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface UndertowEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedUndertowEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(timeout)", "sourceAfterFix": "Long.parseLong(timeout)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n \t/**\n \t * Get a listing or important variables used in openmrs", "fixed": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t/**\n \t * Get a listing or important variables used in openmrs", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "d222fc981c938bd3543ee61f22422d20efcdcd94", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(800);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(800)"}
{"fixCommitSHA1": "f79a34aa3ab947603330680019cab43a23a29b17", "projectName": "antlr.antlr4", "bugType": "Same Function More Args", "problem": " \t\t@Override\n \t\tpublic boolean ignore(String targetName) {\n\t\t\treturn !Arrays.asList(\"Java\", \"CSharp\", \"Python2\", \"Python3\", \"Node\").contains(targetName);\n \t\t}\n \t}", "fixed": " \t\t@Override\n \t\tpublic boolean ignore(String targetName) {\n\t\t\treturn !Arrays.asList(\"Java\", \"CSharp\", \"Python2\", \"Python3\", \"Node\", \"Cpp\").contains(targetName);\n \t\t}\n \t}", "sourceBeforeFix": "Arrays.asList(\"Java\",\"CSharp\")", "sourceAfterFix": "Arrays.asList(\"Java\",\"CSharp\",\"Cpp\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "fixed": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "sourceBeforeFix": "GL.glDrawArraysEXT(mode,first,count)", "sourceAfterFix": "GL.glDrawArrays(mode,first,count)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "fixed": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dfb43299a88507211e9acb9a9f21a8ba54f0205a", "projectName": "iluwatar.java-design-patterns", "bugType": "Change Identifier Used", "problem": "   \n  private final Prototype testedPrototype;\n   /**\n* The expected {@link Prototype", "fixed": "   \n  private final P testedPrototype;\n   /**\n* The expected {@link Prototype", "sourceBeforeFix": "/**   * The tested prototype instance  */ private final Prototype testedPrototype; ", "sourceAfterFix": "/**   * The tested prototype instance  */ private final P testedPrototype; "}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body);\n }", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "addd22c9cfa473eecf99779227f1952d52ad7af5", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n    Mockito.doNothing().when(mFileSystemMasterClient).mount(alluxioPath, ufsPath);\n     mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n    Mockito.verify(mFileSystemMasterClient).mount(alluxioPath, ufsPath);\n   }\n   /**", "fixed": "     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n    Mockito.doNothing().when(mFileSystemMasterClient).mount(alluxioPath, ufsPath, mountOptions);\n     mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n    Mockito.verify(mFileSystemMasterClient).mount(alluxioPath, ufsPath, mountOptions);\n   }\n   /**", "sourceBeforeFix": "Mockito.doNothing().when(mFileSystemMasterClient).mount(alluxioPath,ufsPath)", "sourceAfterFix": "Mockito.doNothing().when(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)"}
{"fixCommitSHA1": "74e1243c7e59690434b9815b05b123585223c091", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "       \"new-bad\", \"new-bar\"\n   );\n  private static final long POLL_PERIOD = 100L;\n   @JsonTypeName(\"mock\")\n   private static class MockDataFetcher implements DataFetcher", "fixed": "       \"new-bad\", \"new-bar\"\n   );\n  private static final long POLL_PERIOD = 1000L;\n   @JsonTypeName(\"mock\")\n   private static class MockDataFetcher implements DataFetcher", "sourceBeforeFix": "POLL_PERIOD=100L", "sourceAfterFix": "POLL_PERIOD=1000L"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedRssEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default RssEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedRssEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default RssEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
