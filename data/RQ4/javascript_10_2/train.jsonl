{"id": "/data/all/data/Multivit4min/TS3-NodeJS-Library", "bugType": "prefer-rest-params", "problem": "\r\n  _handleError() {\r\n    this.emit(\"error\", ...arguments)\r\n  }\r", "fixed": "\r\n  _handleError(...args) {\r\n    this.emit(\"error\", ...args)\r\n  }\r", "message": "Use the rest parameters instead of 'arguments'."}
{"id": "/data/all/data/paladinarcher/padawan", "bugType": "no-invalid-this", "problem": "            _.each(answer.Categories, function (cat) {\n                this.Personality.addByCategory(cat, answer.Value);\n            });", "fixed": "            _.each(answer.Categories, function (cat) {\n                contextThis.Personality.addByCategory(cat, answer.Value);\n            });", "message": "Unexpected 'this'."}
{"id": "/data/all/data/braintree/braintree-web-drop-in", "bugType": "no-invalid-this", "problem": "      return this.tds.teardown().then(function () {\n        expect(this.tds._cleanupModal).to.be.calledOnce;\n      }.bind(this));\n    });", "fixed": "      return this.tds.teardown().then(function () {\n        expect(this.threeDSecureInstance.teardown).to.be.calledOnce;\n      }.bind(this));\n    });", "message": "Unexpected 'this'."}
{"id": "/data/all/data/kobotoolbox/enketo-express", "bugType": "guard-for-in", "problem": "    for ( var path in defaults ) {\n        \n        model = model || new FormModel( modelStr, {\n            full: false", "fixed": "    for ( var path in defaults ) {\n        if ( defaults.hasOwnProperty( path ) ) {\n            \n            model = model || new FormModel( modelStr, {", "message": "The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype."}
{"id": "/data/all/data/denali-js/core", "bugType": "prefer-rest-params", "problem": "export default DenaliObject.extend({\n  init() {\n    this._super(...arguments);\n    assert(this.environment, 'You must supply an environment to an Addon instance');", "fixed": "module.exports = DenaliObject.extend({\n  init(...args) {\n    this._super(...args);\n    assert(this.environment, 'You must supply an environment to an Addon instance');", "message": "Use the rest parameters instead of 'arguments'."}
{"id": "/data/all/data/UXAspects/UXAspects", "bugType": "no-invalid-this", "problem": "        template: require('./dropdown-wrapper.directive.html'),\n        controller: ['$templateCache', function ($templateCache) {\n            var vm = this;", "fixed": "        template: require('./dropdown-wrapper.directive.html'),\n        controller: function () {\n            var vm = this;", "message": "Unexpected 'this'."}
{"id": "/data/all/data/apache/couchdb-fauxton", "bugType": "no-extra-bind", "problem": "      promise.reject(res.responseJSON);\n    }.bind(this));", "fixed": "      promise.reject(res.responseJSON);\n    });", "message": "The function binding is unnecessary."}
{"id": "/data/all/data/dnnsoftware/Dnn.Platform", "bugType": "no-unused-vars", "problem": "    onCancel(event) {\n        const {props, state} = this;\n        util.utilities.confirm(resx.get(\"SettingsRestoreWarning\"), resx.get(\"Yes\"), resx.get(\"No\"), () => {", "fixed": "    onCancel() {\n        const {props} = this;\n        util.utilities.confirm(resx.get(\"SettingsRestoreWarning\"), resx.get(\"Yes\"), resx.get(\"No\"), () => {", "message": "Unused variable."}
{"id": "/data/all/data/ionic-team/ionic", "bugType": "no-unsafe-negation", "problem": "  register(platform) {\n    if (!platform instanceof Platform) platform = new Platform(platform)\n    this.registry[platform.name] = platform\n  }", "fixed": "  register(platform) {\n    registry[platform.name] = platform;\n  }", "message": "Unexpected negating the left operand of 'instanceof' operator."}
{"id": "/data/all/data/shower/core", "bugType": "no-undef", "problem": "\t\tslides = document.querySelectorAll('div.slide'),\n\t\tslideList = [], hashList = {},\n\t\tprogress = document.querySelector('div.progress div'),", "fixed": "\t\tslides = document.querySelectorAll('div.slide'),\n\t\tprogress = document.querySelector('div.progress div'),", "message": "Undefined variable."}
