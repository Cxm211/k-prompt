{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   @Override\n   public void process(Node externs, Node root) {\n    logger.info(\"Moving functions + variable into deeper modules\");\n     if (graph != null && graph.getModuleCount() > 1) {", "fixed": "   @Override\n   public void process(Node externs, Node root) {\n    logger.fine(\"Moving functions + variable into deeper modules\");\n     if (graph != null && graph.getModuleCount() > 1) {", "sourceBeforeFix": "logger.info(\"Moving functions + variable into deeper modules\")", "sourceAfterFix": "logger.fine(\"Moving functions + variable into deeper modules\")"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 , TYPE_5 { java.lang.String VAR_3 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_1 VAR_4 = VAR_1 . METHOD_4 ( VAR_5 , STRING_1 ) ; METHOD_5 ( VAR_4 , VAR_2 . METHOD_6 ( VAR_3 ) ) ; VAR_4 . METHOD_7 ( VAR_6 ) ; return VAR_4 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 , TYPE_5 { java.lang.String VAR_3 = VAR_1 . METHOD_3 ( ) . toString ( ) ; TYPE_1 VAR_4 = VAR_1 . METHOD_4 ( VAR_5 , STRING_1 ) ; METHOD_5 ( VAR_4 , VAR_2 . METHOD_6 ( VAR_3 ) ) ; VAR_4 . METHOD_7 ( VAR_6 ) ; return VAR_4 ; }\n"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoraEndpointBuilder\n             extends\n                 AdvancedGoraEndpointConsumerBuilder, AdvancedGoraEndpointProducerBuilder {\n         default GoraEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoraEndpointBuilder\n             extends\n                 AdvancedGoraEndpointConsumerBuilder, AdvancedGoraEndpointProducerBuilder {\n         default GoraEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( METHOD_3 ( java.util.Arrays.asList ( TYPE_2 . METHOD_4 ( STRING_1 , this . VAR_3 ) , TYPE_2 . METHOD_5 ( STRING_2 , new java.util.Date ( ) ) ) ) ) ; return ( VAR_4 . METHOD_6 ( ) ) > 0 ; }\n", "fixed": "public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( java.util.Arrays.asList ( TYPE_2 . METHOD_4 ( STRING_1 , this . VAR_3 ) , TYPE_2 . METHOD_5 ( STRING_2 , new java.util.Date ( ) ) ) ) ) ; return ( VAR_1 . METHOD_6 ( ) ) > 0 ; }\n"}
{"fixCommitSHA1": "dd20434290eb6ae6dff133d70073e35a3998d362", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "       try {\n         mCurrentCacheStream.write(data);\n       } catch (IOException ioe) {\n        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\", ioe);\n         mShouldCacheCurrentBlock = false;\n       }\n     }", "fixed": "       try {\n         mCurrentCacheStream.write(data);\n       } catch (IOException ioe) {\n        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\");\n         mShouldCacheCurrentBlock = false;\n       }\n     }", "sourceBeforeFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\",ioe)", "sourceAfterFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\")"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { VAR_3 = VAR_4 ; } else { VAR_3 = VAR_5 ; } VAR_6 = VAR_3 ; VAR_7 = VAR_3 ; TYPE_2 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { VAR_3 = VAR_4 ; } else { VAR_3 = VAR_5 ; } VAR_6 = VAR_3 ; TYPE_2 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 , java.util.ArrayList < TYPE_2 > VAR_2 ) { for ( TYPE_2 VAR_3 : VAR_2 ) { for ( TYPE_3 VAR_4 : TYPE_3 . values ( ) ) { for ( TYPE_1 VAR_5 : VAR_1 ) { VAR_6 = 0 ; } METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , VAR_7 ) ; METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ; } } }\n", "fixed": "public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 , java.util.ArrayList < TYPE_2 > VAR_2 ) { for ( TYPE_2 VAR_3 : VAR_2 ) { for ( TYPE_3 VAR_4 : TYPE_3 . values ( ) ) { METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , VAR_7 ) ; METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ; } } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { VAR_3 . error ( ( ( VAR_1 + STRING_1 ) + ( VAR_4 ) ) ) ; return null ; } TYPE_1 VAR_5 = new TYPE_1 ( VAR_1 , this ) ; VAR_2 . put ( VAR_1 , VAR_5 ) ; return VAR_5 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_5 ; synchronized ( VAR_2 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { VAR_3 . error ( ( ( VAR_1 + STRING_1 ) + ( VAR_4 ) ) ) ; return null ; } VAR_5 = new TYPE_1 ( VAR_1 , this ) ; VAR_2 . put ( VAR_1 , VAR_5 ) ; } return VAR_5 ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { if ( ( VAR_1 == null ) || ( VAR_1 . equals ( STRING_1 ) ) ) return ; if ( VAR_1 . contains ( STRING_2 ) ) VAR_1 = VAR_1 . split ( STRING_2 ) [ 0 ] ; new TYPE_1 ( VAR_1 , VAR_2 ) . start ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { if ( ( VAR_1 == null ) || ( VAR_1 . equals ( STRING_1 ) ) ) return ; if ( VAR_1 . contains ( STRING_2 ) ) VAR_1 = VAR_1 . split ( STRING_2 ) [ 0 ] ; new TYPE_1 ( VAR_1 . toLowerCase ( ) , VAR_2 ) . start ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 size = this . METHOD_2 ( ) ; java.lang.System.out.println ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( size . height ) ) ) ; if ( ( VAR_2 ) != ( size . height ) ) { int VAR_3 = TYPE_3 . min ( VAR_2 , size . height ) ; METHOD_3 ( VAR_3 , VAR_3 ) ; METHOD_4 ( new TYPE_2 ( VAR_3 , VAR_3 ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 size = this . METHOD_2 ( ) ; if ( ( VAR_2 ) != ( size . height ) ) { int VAR_3 = TYPE_3 . min ( VAR_2 , size . height ) ; METHOD_3 ( VAR_3 , VAR_3 ) ; METHOD_4 ( new TYPE_2 ( VAR_3 , VAR_3 ) ) ; } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 < TYPE_2 > . TYPE_3 VAR_1 , TYPE_2 data ) { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_3 ( data ) ; } else if ( ( VAR_3 ) == null ) { VAR_3 = new TYPE_3 ( data ) ; } else { if ( ( VAR_2 . METHOD_2 ( ) ) < ( VAR_3 . METHOD_2 ( ) ) ) { METHOD_1 ( VAR_2 , data ) ; } else { METHOD_1 ( VAR_3 , data ) ; } } }\n", "fixed": "private void METHOD_1 ( TYPE_1 < TYPE_2 > . TYPE_3 VAR_1 , TYPE_2 data ) { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_3 ( data ) ; } else if ( ( VAR_3 ) == null ) { VAR_3 = new TYPE_3 ( data ) ; } else { if ( ( VAR_2 . METHOD_2 ( ) ) <= ( VAR_3 . METHOD_2 ( ) ) ) { METHOD_1 ( VAR_2 , data ) ; } else { METHOD_1 ( VAR_3 , data ) ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = METHOD_2 ( VAR_3 , VAR_4 ) ; VAR_5 = new TYPE_2 ( this ) ; VAR_6 = new TYPE_3 ( this ) ; if ( TYPE_4 . METHOD_3 ( this ) ) { METHOD_4 ( ) . METHOD_5 ( VAR_7 , null , VAR_8 ) ; } VAR_9 = new TYPE_5 ( VAR_10 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = METHOD_2 ( VAR_3 , VAR_4 ) ; VAR_5 = new TYPE_2 ( this ) ; VAR_6 = new TYPE_3 ( this ) ; METHOD_4 ( ) . METHOD_5 ( VAR_7 , null , VAR_8 ) ; VAR_9 = new TYPE_5 ( VAR_10 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { try { VAR_2 . METHOD_2 ( ( ( ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) + ( VAR_1 . METHOD_4 ( ) ) ) + STRING_3 ) ) ; } catch ( TYPE_3 VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { try { VAR_2 . METHOD_2 ( ( ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) + ( VAR_1 . METHOD_4 ( ) ) ) ) ; } catch ( TYPE_3 VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } }\n"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.error(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "fixed": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "sourceBeforeFix": "LOG.error(\"Failed to get files from \" + baseDirectory.getAbsolutePath())", "sourceAfterFix": "LOG.warn(\"Failed to get files from \" + baseDirectory.getAbsolutePath())"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { while ( ! ( this . VAR_2 . isEmpty ( ) ) ) { for ( TYPE_1 < TYPE_2 > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( ) ; } } } finally { VAR_1 . METHOD_4 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { while ( ! ( VAR_2 . isEmpty ( ) ) ) { for ( TYPE_1 < TYPE_2 > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( ) ; } } } finally { VAR_1 . METHOD_4 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { int VAR_1 = METHOD_2 ( this . VAR_2 . METHOD_3 ( ) , VAR_3 ) ; int VAR_4 = this . VAR_5 ; java.lang.System.out.println ( ( STRING_1 + ( VAR_5 ) ) ) ; VAR_2 . METHOD_1 ( VAR_3 , VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( ) { int VAR_1 = METHOD_2 ( this . VAR_2 . METHOD_3 ( ) , VAR_3 ) ; int VAR_4 = this . VAR_5 ; java.lang.System.out.println ( ( STRING_1 + ( this . VAR_5 ) ) ) ; VAR_2 . METHOD_1 ( VAR_3 , VAR_4 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { this . context = this . VAR_2 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( STRING_2 ) ) ; this . context . METHOD_4 ( VAR_3 ) ; TYPE_3 . METHOD_5 ( context , STRING_3 , new TYPE_4 ( VAR_1 ) ) ; this . context . METHOD_6 ( STRING_4 , STRING_3 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { this . context = this . VAR_2 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( STRING_2 ) ) ; TYPE_3 . METHOD_5 ( context , STRING_3 , new TYPE_4 ( VAR_1 ) ) ; this . context . METHOD_6 ( STRING_4 , STRING_3 ) ; }\n"}
{"fixCommitSHA1": "370ead7395fc9194a3dc2d05afc4b3409f6b27da", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     this.outerQueryLimit = -1;\n   }\n  public void setAggregationExprsForClause(String clause, HashMap<String, ASTNode> aggregationTrees) {\n     this.destToAggregationExprs.put(clause, aggregationTrees);\n   }", "fixed": "     this.outerQueryLimit = -1;\n   }\n  public void setAggregationExprsForClause(String clause, LinkedHashMap<String, ASTNode> aggregationTrees) {\n     this.destToAggregationExprs.put(clause, aggregationTrees);\n   }", "sourceBeforeFix": "HashMap<String,ASTNode>", "sourceAfterFix": "LinkedHashMap<String,ASTNode>"}
{"problem": "public TYPE_1 METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = super . METHOD_1 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . text = METHOD_2 ( VAR_1 . text ) ; VAR_3 = VAR_4 ; VAR_2 . name = VAR_1 . name ; TYPE_2 VAR_5 = new TYPE_2 ( VAR_6 ) ; VAR_5 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = super . METHOD_1 ( ) ; if ( ! ( VAR_1 == null ) ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . text = METHOD_2 ( VAR_1 . text ) ; VAR_3 = VAR_4 ; VAR_2 . name = VAR_1 . name ; TYPE_2 VAR_5 = new TYPE_2 ( VAR_6 ) ; VAR_5 . METHOD_3 ( VAR_1 ) ; } return VAR_1 ; }\n"}
{"problem": "private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } VAR_2 = true ; VAR_3 = VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) . METHOD_9 ( new TYPE_3 ( ) { public void METHOD_10 ( ) { VAR_3 = null ; } } ) . METHOD_11 ( ) ; VAR_1 = VAR_3 . METHOD_12 ( VAR_6 ) ; }\n", "fixed": "private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } VAR_2 = true ; VAR_3 = VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) . METHOD_11 ( ) ; VAR_1 = VAR_3 . METHOD_12 ( VAR_6 ) ; }\n"}
{"problem": "private static void METHOD_1 ( java.lang.String name , int state ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_3 VAR_4 = VAR_1 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( name , state ) ; VAR_4 . METHOD_6 ( ) ; }\n", "fixed": "private static void METHOD_1 ( java.lang.String name , int state ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_3 VAR_4 = VAR_1 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( name , state ) ; VAR_4 . commit ( ) ; }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_3 ( ) . METHOD_7 ( ) ) ) ; } return VAR_1 ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_3 ( ) ) ) ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private static void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( i == ( VAR_2 ) ) continue ; TYPE_1 VAR_3 = VAR_1 . get ( i ) ; int VAR_4 = ( VAR_5 . size ( ) ) - 1 ; TYPE_2 VAR_6 = new TYPE_2 ( VAR_7 , VAR_2 , VAR_4 , VAR_5 . get ( VAR_4 ) . VAR_8 , VAR_9 , VAR_10 . toString ( ) ) ; VAR_11 . METHOD_2 ( VAR_6 ) ; } }\n", "fixed": "private static void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( i == ( VAR_2 ) ) continue ; TYPE_1 VAR_3 = VAR_1 . get ( i ) ; int VAR_4 = ( VAR_5 . size ( ) ) - 1 ; TYPE_2 VAR_6 = new TYPE_2 ( VAR_7 , VAR_2 , VAR_4 , VAR_5 . get ( VAR_4 ) . VAR_8 , VAR_9 , VAR_10 ) ; VAR_11 . METHOD_2 ( VAR_6 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { if ( event . METHOD_2 ( ) ) return ; event . METHOD_3 ( true ) ; TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( event . METHOD_5 ( ) ) . METHOD_6 ( VAR_1 class ) . VAR_2 , event . METHOD_5 ( ) , event . METHOD_7 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { if ( event . METHOD_2 ( ) ) return ; TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( event . METHOD_5 ( ) ) . METHOD_6 ( VAR_1 class ) . VAR_2 , event . METHOD_5 ( ) , event . METHOD_7 ( ) ) ; event . METHOD_3 ( true ) ; }\n"}
{"problem": "private boolean METHOD_1 ( TYPE_1 VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return ( VAR_3 . METHOD_2 ( ) ) != ( ( size ) - 1 ) ; case VAR_4 : return ( VAR_3 . METHOD_2 ( ) ) != 0 ; case VAR_5 : return ( VAR_3 . METHOD_3 ( ) ) != 0 ; case VAR_6 : return ( VAR_3 . METHOD_3 ( ) ) != ( ( size ) - 1 ) ; default : throw new TYPE_2 ( ) ; } }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return ( VAR_3 . METHOD_2 ( ) ) < ( ( size ) - 1 ) ; case VAR_4 : return ( VAR_3 . METHOD_2 ( ) ) > 0 ; case VAR_5 : return ( VAR_3 . METHOD_3 ( ) ) > 0 ; case VAR_6 : return ( VAR_3 . METHOD_3 ( ) ) < ( ( size ) - 1 ) ; default : throw new TYPE_2 ( ) ; } }\n"}
{"problem": "public static boolean isEmpty ( java.lang.String [ ] args ) { if ( ( args == null ) || ( ( args.length ) == 0 ) ) { return false ; } for ( java.lang.String str : args ) { if ( TYPE_1 . isEmpty ( str ) ) { return true ; } } return false ; }\n", "fixed": "public static boolean isEmpty ( java.lang.String [ ] args ) { if ( ( args == null ) || ( ( args.length ) == 0 ) ) { return true ; } for ( java.lang.String str : args ) { if ( TYPE_1 . isEmpty ( str ) ) { return true ; } } return false ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 , STRING_1 ) ; int count = 0 ; while ( VAR_3 . METHOD_2 ( ) ) { if ( VAR_3 . get ( STRING_2 ) . equals ( VAR_2 ) ) { return VAR_3 . METHOD_3 ( ) ; } } java.lang.System.out.println ( count ) ; return STRING_3 ; }\n", "fixed": "public java.lang.String [ ] METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 , STRING_1 ) ; int count = 0 ; while ( VAR_3 . METHOD_2 ( ) ) { if ( VAR_3 . get ( STRING_2 ) . equals ( VAR_2 ) ) { return VAR_3 . METHOD_3 ( ) ; } } java.lang.System.out.println ( count ) ; return null ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = ( ( TYPE_2 ) ( getActivity ( ) ) ) ; VAR_3 = new TYPE_3 ( getActivity ( ) . METHOD_2 ( ) , false , VAR_4 , VAR_5 , VAR_2 ) ; VAR_6 = new TYPE_3 ( getActivity ( ) . METHOD_2 ( ) , true , VAR_4 , VAR_5 , VAR_2 ) ; VAR_7 . METHOD_3 ( VAR_3 ) ; VAR_8 . METHOD_3 ( VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = ( ( TYPE_2 ) ( getActivity ( ) ) ) ; VAR_3 = new TYPE_3 ( getActivity ( ) . METHOD_2 ( ) , false , this . VAR_4 , this . VAR_5 , VAR_2 ) ; VAR_6 = new TYPE_3 ( getActivity ( ) . METHOD_2 ( ) , true , this . VAR_4 , this . VAR_5 , VAR_2 ) ; VAR_7 . METHOD_3 ( VAR_3 ) ; VAR_8 . METHOD_3 ( VAR_6 ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glGetShader(shader,pname,params)", "sourceAfterFix": "GL20.glGetShaderiv(shader,pname,params)"}
{"problem": "public TYPE_1 [ ] METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return super . METHOD_1 ( ) ; } java.util.List < TYPE_1 > VAR_2 = java.util.Arrays.asList ( super . METHOD_1 ( ) ) ; VAR_2 . METHOD_2 ( java.util.Arrays.asList ( VAR_1 . METHOD_1 ( ) ) ) ; return VAR_2 . METHOD_3 ( new TYPE_1 [ ] { } ) ; }\n", "fixed": "public TYPE_1 [ ] METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return super . METHOD_1 ( ) ; } java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( java.util.Arrays.asList ( super . METHOD_1 ( ) ) ) ; VAR_2 . METHOD_2 ( java.util.Arrays.asList ( VAR_1 . METHOD_1 ( ) ) ) ; return VAR_2 . METHOD_3 ( new TYPE_1 [ ] { } ) ; }\n"}
{"problem": "static boolean METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String VAR_3 ) { if ( VAR_1 > 0 ) { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 , VAR_2 , TYPE_2 . METHOD_2 ( VAR_3 ) ) ; if ( TYPE_3 . METHOD_1 ( VAR_4 ) ) { return true ; } } java.lang.System.out.println ( STRING_1 ) ; return false ; }\n", "fixed": "static boolean METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String VAR_3 ) { if ( VAR_1 > 0 ) { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 , VAR_2 , TYPE_2 . METHOD_2 ( VAR_3 ) ) ; if ( TYPE_3 . METHOD_1 ( VAR_4 ) ) { return true ; } } return false ; }\n"}
{"fixCommitSHA1": "251bb1a73961f785ad12dbb3ae92830eca70b8cd", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "     protected final ByteBuf newDirectBuffer(Object holder, ByteBuf buf) {\n         final int readableBytes = buf.readableBytes();\n         if (readableBytes == 0) {\n            ReferenceCountUtil.safeRelease(holder);\n             return Unpooled.EMPTY_BUFFER;\n         }", "fixed": "     protected final ByteBuf newDirectBuffer(Object holder, ByteBuf buf) {\n         final int readableBytes = buf.readableBytes();\n         if (readableBytes == 0) {\n            ReferenceCountUtil.release(holder);\n             return Unpooled.EMPTY_BUFFER;\n         }", "sourceBeforeFix": "ReferenceCountUtil.safeRelease(holder)", "sourceAfterFix": "ReferenceCountUtil.release(holder)"}
{"problem": "public void METHOD_1 ( final int VAR_1 , final int VAR_2 ) { if ( VAR_1 >= 0 ) { METHOD_1 ( ( ( long ) ( VAR_1 ) ) , ( ( long ) ( VAR_2 ) ) ) ; } METHOD_1 ( ( VAR_1 & INT_1 ) , ( VAR_2 & INT_1 ) ) ; }\n", "fixed": "public void METHOD_1 ( final int VAR_1 , final int VAR_2 ) { if ( VAR_1 >= 0 ) { METHOD_1 ( ( ( long ) ( VAR_1 ) ) , ( ( long ) ( VAR_2 ) ) ) ; } else { METHOD_1 ( ( VAR_1 & INT_1 ) , ( VAR_2 & INT_1 ) ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "b72b1ca4847db6559ca16fc9c7cab22e7e6242f2", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "   private void startAlluxioFramework(Map<String, String> extraEnv) {\n     String startScript = PathUtils.concatPath(Configuration.get(PropertyKey.HOME),\n         \"integration\", \"bin\", \"alluxio-mesos.sh\");\n    ProcessBuilder pb = new ProcessBuilder(startScript, mMesosAddress, \"-w\");\n     Map<String, String> env = pb.environment();\n     env.putAll(extraEnv);\n     try {", "fixed": "   private void startAlluxioFramework(Map<String, String> extraEnv) {\n     String startScript = PathUtils.concatPath(Configuration.get(PropertyKey.HOME),\n         \"integration\", \"bin\", \"alluxio-mesos.sh\");\n    ProcessBuilder pb = new ProcessBuilder(startScript, mMesosAddress);\n     Map<String, String> env = pb.environment();\n     env.putAll(extraEnv);\n     try {", "sourceBeforeFix": "new ProcessBuilder(startScript,mMesosAddress,\"-w\")", "sourceAfterFix": "new ProcessBuilder(startScript,mMesosAddress)"}
{"problem": "public static java.util.ArrayList < TYPE_1 > METHOD_1 ( int index , TYPE_2 VAR_1 ) { switch ( index ) { case 0 : return TYPE_3 . METHOD_2 ( VAR_1 ) ; case 1 : return TYPE_3 . METHOD_3 ( VAR_1 ) ; case INT_1 : return TYPE_3 . METHOD_4 ( VAR_1 ) ; case INT_2 : return TYPE_3 . METHOD_5 ( VAR_1 ) ; case INT_3 : return TYPE_3 . METHOD_6 ( VAR_1 ) ; default : throw new TYPE_4 ( ) ; } }\n", "fixed": "public static java.util.ArrayList < TYPE_1 > METHOD_1 ( int index , TYPE_2 VAR_1 ) { switch ( index ) { case 0 : return TYPE_3 . METHOD_2 ( VAR_1 ) ; case 1 : return TYPE_3 . METHOD_3 ( VAR_1 ) ; case INT_1 : return TYPE_3 . METHOD_4 ( VAR_1 ) ; case INT_2 : return TYPE_3 . METHOD_5 ( VAR_1 ) ; case INT_3 : return TYPE_3 . METHOD_6 ( VAR_1 ) ; default : return TYPE_3 . METHOD_6 ( VAR_1 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ( ( TYPE_2 ) ( this ) ) , ( ( TYPE_3 ) ( this ) ) ) ; VAR_1 = this ; VAR_2 . info ( STRING_1 ) ; this . getConfig ( ) . METHOD_4 ( ) . METHOD_5 ( true ) ; this . METHOD_6 ( ) ; VAR_3 = new java.util.HashMap < TYPE_4 , java.lang.Long > ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ( ( TYPE_2 ) ( this ) ) , ( ( TYPE_3 ) ( this ) ) ) ; VAR_1 = this ; this . getConfig ( ) . METHOD_4 ( ) . METHOD_5 ( true ) ; this . METHOD_6 ( ) ; VAR_3 = new java.util.HashMap < TYPE_4 , java.lang.Long > ( ) ; }\n"}
{"problem": "public static < TYPE_1 > TYPE_1 query ( TYPE_2 < TYPE_1 > query ) { TYPE_3 VAR_1 = VAR_2 . METHOD_1 ( ) ; final TYPE_4 VAR_3 = VAR_1 . METHOD_2 ( ) ; TYPE_1 t = null ; try { t = query . query ( VAR_1 ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; } finally { VAR_1 . METHOD_5 ( ) ; } return t ; }\n", "fixed": "public static < TYPE_1 > TYPE_1 query ( TYPE_2 < TYPE_1 > query ) { TYPE_3 VAR_1 = VAR_2 . METHOD_1 ( ) ; final TYPE_4 VAR_3 = VAR_1 . METHOD_2 ( ) ; TYPE_1 t = null ; try { t = query . query ( VAR_1 ) ; VAR_3 . commit ( ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; } finally { VAR_1 . METHOD_5 ( ) ; } return t ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"problem": "public void METHOD_1 ( ) { boolean VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; if ( ! VAR_1 ) { VAR_3 . setText ( STRING_1 ) ; VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ; return ; } VAR_4 . METHOD_8 ( VAR_5 , new TYPE_2 ( ) , new TYPE_3 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { boolean VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; if ( ! VAR_1 ) { VAR_3 . setText ( STRING_1 ) ; VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ; return ; } VAR_4 . METHOD_8 ( VAR_5 , new TYPE_2 ( ) , null ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String ... VAR_2 ) throws TYPE_1 { if ( VAR_1 == null ) { throw new TYPE_1 ( STRING_1 ) ; } TYPE_2 VAR_3 ; switch ( VAR_1 ) { case STRING_2 : VAR_3 = new TYPE_3 ( ) ; break ; case STRING_3 : VAR_3 = new TYPE_4 ( ) ; break ; case STRING_4 : VAR_3 = new TYPE_5 ( ) ; break ; default : VAR_3 = null ; } if ( VAR_3 != null ) { VAR_3 . execute ( VAR_2 ) ; } }\n", "fixed": "private static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String ... VAR_2 ) throws TYPE_1 { if ( VAR_1 == null ) { throw new TYPE_1 ( STRING_1 ) ; } TYPE_2 VAR_3 ; switch ( VAR_1 ) { case STRING_2 : VAR_3 = new TYPE_3 ( ) ; break ; case STRING_3 : VAR_3 = new TYPE_4 ( ) ; break ; default : VAR_3 = null ; } if ( VAR_3 != null ) { VAR_3 . execute ( VAR_2 ) ; } }\n"}
{"problem": "protected boolean METHOD_1 ( ) throws TYPE_1 { if ( ( ( ! ( METHOD_2 ( ) ) ) || ( VAR_1 . METHOD_3 ( ) ) ) || ( VAR_1 . METHOD_4 ( ) ) ) { return false ; } return ( VAR_2 ) == ( this ) ? true : VAR_2 . METHOD_1 ( ) ; }\n", "fixed": "protected boolean METHOD_1 ( ) throws TYPE_1 { if ( ( ( ( ( VAR_1 ) == null ) || ( ! ( METHOD_2 ( ) ) ) ) || ( VAR_1 . METHOD_3 ( ) ) ) || ( VAR_1 . METHOD_4 ( ) ) ) { return false ; } return ( VAR_2 ) == ( this ) ? true : VAR_2 . METHOD_1 ( ) ; }\n"}
{"problem": "public int compareTo ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return 1 ; int VAR_2 = java.lang.Double . METHOD_1 ( METHOD_2 ( ) , VAR_1 . METHOD_2 ( ) ) ; if ( VAR_2 != 0 ) return VAR_2 ; VAR_2 = java.lang.Double . METHOD_1 ( VAR_3 , VAR_4 ) ; if ( VAR_2 != 0 ) return VAR_2 ; VAR_2 = java.lang.Double . METHOD_1 ( VAR_5 , VAR_6 ) ; return java.lang.Double . METHOD_1 ( VAR_7 , VAR_8 ) ; }\n", "fixed": "public int compareTo ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return 1 ; int VAR_2 = java.lang.Double . METHOD_1 ( METHOD_2 ( ) , VAR_1 . METHOD_2 ( ) ) ; if ( VAR_2 != 0 ) return VAR_2 ; VAR_2 = java.lang.Double . METHOD_1 ( VAR_3 , VAR_4 ) ; if ( VAR_2 != 0 ) return VAR_2 ; VAR_2 = java.lang.Double . METHOD_1 ( VAR_5 , VAR_6 ) ; if ( VAR_2 != 0 ) return VAR_2 ; return java.lang.Double . METHOD_1 ( VAR_7 , VAR_8 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( true ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( STRING_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( VAR_4 < TYPE_4 > METHOD_5 ( VAR_1 , VAR_2 ) ) ; return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( STRING_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( VAR_4 < TYPE_4 > METHOD_5 ( VAR_1 , VAR_2 ) ) ; return VAR_3 ; }\n"}
{"problem": "private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { java.lang.Object obj = VAR_2 . get ( VAR_1 ) ; if ( obj == null ) throw new java.lang.Exception ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( this . VAR_3 ) ) ) ; return obj . toString ( ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { java.lang.Object obj = VAR_2 . get ( VAR_1 ) ; if ( obj == null ) throw new java.lang.Exception ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( this . VAR_3 ) ) ) ; return obj . toString ( ) ; }\n"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "         }\n       }\n     }\n    logger.info(\"Renamed \" + instancesRenamed + \" instances of \"\n                 + propsRenamed + \" properties.\");\n    logger.info(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n                 + \"properties, \" + propsSkipped + \" instances of properties \"\n                 + \"that were skipped for specific types and \" + singleTypeProps\n                 + \" properties that were referenced from only one type.\");", "fixed": "         }\n       }\n     }\n    logger.fine(\"Renamed \" + instancesRenamed + \" instances of \"\n                 + propsRenamed + \" properties.\");\n    logger.fine(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n                 + \"properties, \" + propsSkipped + \" instances of properties \"\n                 + \"that were skipped for specific types and \" + singleTypeProps\n                 + \" properties that were referenced from only one type.\");", "sourceBeforeFix": "logger.info(\"Renamed \" + instancesRenamed + \" instances of \"+ propsRenamed+ \" properties.\")", "sourceAfterFix": "logger.fine(\"Renamed \" + instancesRenamed + \" instances of \"+ propsRenamed+ \" properties.\")"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.Object VAR_1 ) { if ( VAR_1 instanceof java.lang.String ) { return new TYPE_2 ( VAR_1 ) ; } else if ( VAR_1 instanceof java.util.Map ) { return new TYPE_3 ( ( ( java.util.Map < java.lang.String , java.lang.Object > ) ( VAR_1 ) ) ) ; } else { throw new TYPE_4 ( ) ; } }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.Object VAR_1 ) { if ( VAR_1 instanceof java.lang.String ) { return new TYPE_2 ( VAR_1 ) ; } else if ( VAR_1 instanceof java.util.Map ) { return new TYPE_3 ( ( ( java.util.Map < java.lang.String , java.lang.Object > ) ( VAR_1 ) ) ) ; } else if ( VAR_1 instanceof TYPE_1 ) { return ( ( TYPE_1 ) ( VAR_1 ) ) ; } else { throw new TYPE_4 ( ) ; } }\n"}
{"problem": "private void METHOD_1 ( java.lang.String title , java.lang.String text , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , VAR_4 ) ; VAR_2 . setText ( title ) ; TYPE_2 VAR_5 = new TYPE_2 ( VAR_3 , text ) ; if ( ( VAR_1 . length ( ) ) > 0 ) VAR_5 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_6 . add ( VAR_5 ) ; METHOD_4 ( ) ; }\n", "fixed": "private void METHOD_1 ( java.lang.String title , java.lang.String text , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , VAR_4 ) ; VAR_2 . setText ( title ) ; TYPE_2 VAR_5 = new TYPE_2 ( VAR_3 , text ) ; if ( ( VAR_1 . length ( ) ) > 0 ) VAR_5 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_6 . add ( VAR_5 ) ; }\n"}
{"fixCommitSHA1": "5f959c557973923b797770cac7e01032e89d63c9", "projectName": "spring-projects.spring-boot", "bugType": "Same Function More Args", "problem": " \t\t\tthrows Exception {\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(getSsl(ClientAuth.NEED, \"password\", \"src/test/resources/test.jks\"));\n \t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tthis.container.start();\n \t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());", "fixed": " \t\t\tthrows Exception {\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(getSsl(ClientAuth.NEED, \"password\", \"src/test/resources/test.jks\",\n\t\t\t\t\"src/test/resources/test.jks\"));\n \t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tthis.container.start();\n \t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());", "sourceBeforeFix": "getSsl(ClientAuth.NEED,\"password\",\"src/test/resources/test.jks\")", "sourceAfterFix": "getSsl(ClientAuth.NEED,\"password\",\"src/test/resources/test.jks\",\"src/test/resources/test.jks\")"}
{"problem": "private static void METHOD_1 ( ) throws TYPE_1 { short x = ( ( short ) ( ( java.lang.Math.random ( ) ) * INT_1 ) ) ; java.lang.System.out.println ( ( ( STRING_1 + x ) + STRING_2 ) ) ; int VAR_1 = TYPE_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( x , VAR_1 ) ; }\n", "fixed": "private static void METHOD_1 ( ) throws TYPE_1 { short x = ( ( short ) ( ( java.lang.Math.random ( ) ) * INT_1 ) ) ; java.lang.System.out.println ( ( ( STRING_1 + x ) + STRING_2 ) ) ; float VAR_1 = TYPE_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( x , VAR_1 ) ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , java.util.List < TYPE_3 > VAR_2 ) { for ( TYPE_3 VAR_3 : VAR_2 ) { java.util.List < TYPE_1 > VAR_4 = METHOD_1 ( VAR_1 , VAR_3 ) ; if ( VAR_4 != null ) { return VAR_4 ; } } return TYPE_4 . METHOD_2 ( ) ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , java.util.List < TYPE_3 > VAR_2 ) { for ( TYPE_3 VAR_3 : VAR_2 ) { java.util.List < TYPE_1 > VAR_4 = METHOD_1 ( VAR_1 , VAR_3 ) ; if ( ( VAR_4 != null ) && ( ! ( VAR_4 . isEmpty ( ) ) ) ) { return VAR_4 ; } } return TYPE_4 . METHOD_2 ( ) ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.Exception VAR_1 , java.lang.String VAR_2 , TYPE_1 < TYPE_2 > target , boolean VAR_3 ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( VAR_1 . METHOD_2 ( ) . contains ( STRING_1 ) ) ) { TYPE_3 . METHOD_3 ( VAR_4 , ( ( STRING_2 + VAR_5 ) + ( VAR_1 . METHOD_2 ( ) ) ) ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.Exception VAR_1 , java.lang.String VAR_2 , TYPE_1 < TYPE_2 > target , boolean VAR_3 ) { if ( ( ( VAR_1 != null ) && ( ( VAR_1 . METHOD_2 ( ) ) != null ) ) && ( VAR_1 . METHOD_2 ( ) . contains ( STRING_1 ) ) ) { TYPE_3 . METHOD_3 ( VAR_4 , ( ( STRING_2 + VAR_5 ) + ( VAR_1 . METHOD_2 ( ) ) ) ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; } return false ; }\n"}
{"problem": "protected final java.io.InputStream METHOD_1 ( char [ ] path ) throws java.io.IOException { if ( METHOD_2 ( path ) ) { try { return METHOD_3 ( ) . METHOD_4 ( path ) ; } catch ( TYPE_1 VAR_1 ) { } } if ( ( VAR_2 ) == null ) { VAR_3 . METHOD_5 ( path ) ; } else { VAR_2 . execute ( path , ( ) - > { VAR_3 . METHOD_5 ( path ) ; return null ; } ) ; } return METHOD_3 ( ) . METHOD_4 ( path ) ; }\n", "fixed": "protected final java.io.InputStream METHOD_1 ( char [ ] path ) throws java.io.IOException { if ( METHOD_2 ( path ) ) { try { return METHOD_3 ( ) . METHOD_4 ( path ) ; } catch ( TYPE_1 VAR_1 ) { } } METHOD_5 ( path ) ; return METHOD_3 ( ) . METHOD_4 ( path ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesNamespacesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesNamespacesEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KubernetesNamespacesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesNamespacesEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_2 != null ) { return ; } TYPE_3 . i ( \"name\" , VAR_3 ) ; android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_2 ( VAR_4 , VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( VAR_5 , intent ) ; METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_2 != null ) { return ; } android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_2 ( VAR_4 , VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( VAR_5 , intent ) ; METHOD_5 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_3 . METHOD_1 ( VAR_1 ) ; VAR_4 . METHOD_1 ( VAR_1 ) ; VAR_5 . METHOD_1 ( VAR_1 ) ; VAR_6 . METHOD_1 ( VAR_1 ) ; VAR_7 . METHOD_1 ( VAR_1 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_3 . METHOD_1 ( VAR_1 ) ; VAR_4 . METHOD_1 ( VAR_1 ) ; VAR_6 . METHOD_1 ( VAR_1 ) ; VAR_7 . METHOD_1 ( VAR_1 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( int x = 0 ; x < ( VAR_2 . count ) ; x ++ ) { TYPE_1 VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 = VAR_3 . add ( ( ( VAR_4 . METHOD_3 ( ) ) - FLOAT_1 ) , 0 , ( ( VAR_4 . METHOD_3 ( ) ) - FLOAT_1 ) ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_3 , TYPE_2 . METHOD_6 ( VAR_5 ) , INT_1 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( int x = 0 ; x < ( VAR_2 . count ) ; x ++ ) { TYPE_1 VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 = VAR_3 . add ( ( ( VAR_4 . METHOD_3 ( ) ) - FLOAT_1 ) , ( ( VAR_4 . METHOD_3 ( ) ) - FLOAT_1 ) , ( ( VAR_4 . METHOD_3 ( ) ) - FLOAT_1 ) ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_3 , VAR_5 , INT_1 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { while ( open ) { try { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ( VAR_1 + \"\\n\" ) ) ; } catch ( java.lang.Exception VAR_4 ) { TYPE_1 . METHOD_4 ( VAR_4 ) ; } } try { VAR_5 . METHOD_5 ( ) ; } catch ( java.lang.Exception VAR_6 ) { TYPE_1 . METHOD_4 ( VAR_6 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { while ( open ) { try { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ( VAR_1 + \"\\n\" ) ) ; } catch ( java.lang.Exception VAR_4 ) { TYPE_1 . METHOD_4 ( VAR_4 ) ; open = false ; } } try { VAR_5 . METHOD_5 ( ) ; } catch ( java.lang.Exception VAR_6 ) { TYPE_1 . METHOD_4 ( VAR_6 ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.Class < ? > VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; for ( TYPE_2 VAR_3 : VAR_1 . METHOD_2 ( ) ) { try { if ( VAR_3 . METHOD_3 ( VAR_4 class ) ) { TYPE_3 p = new TYPE_3 ( VAR_3 ) ; p . METHOD_4 ( true ) ; java.lang.System.out.println ( p . getName ( ) ) ; VAR_2 . METHOD_5 ( p ) ; } } catch ( java.lang.Exception VAR_5 ) { throw new TYPE_4 ( STRING_1 , VAR_5 ) ; } } return VAR_2 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.Class < ? > VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; for ( TYPE_2 VAR_3 : VAR_1 . METHOD_2 ( ) ) { try { if ( VAR_3 . METHOD_3 ( VAR_4 class ) ) { TYPE_3 p = new TYPE_3 ( VAR_3 ) ; p . METHOD_4 ( true ) ; VAR_2 . METHOD_5 ( p ) ; } } catch ( java.lang.Exception VAR_5 ) { throw new TYPE_4 ( STRING_1 , VAR_5 ) ; } } return VAR_2 ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_4 = VAR_1 . METHOD_3 ( ) ; java.lang.String VAR_5 = TYPE_2 . METHOD_4 ( ( VAR_2 + VAR_4 ) ) ; return ( ! ( TYPE_3 . isEmpty ( VAR_2 ) ) ) && ( VAR_3 . equals ( VAR_5 ) ) ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_4 = VAR_1 . METHOD_3 ( ) ; java.lang.String VAR_5 = TYPE_2 . METHOD_4 ( ( VAR_2 + VAR_4 ) ) ; return ( ! ( TYPE_3 . isEmpty ( VAR_2 ) ) ) && ( VAR_3 . equals ( VAR_5 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 < TYPE_2 > VAR_3 = TYPE_1 . METHOD_3 ( VAR_4 class ) ; TYPE_3 . METHOD_4 ( VAR_5 ) . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ; TYPE_3 . METHOD_4 ( VAR_2 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( STRING_1 ) , TYPE_4 . METHOD_9 ( VAR_4 class ) ) ; TYPE_5 . assertEquals ( VAR_6 , VAR_3 . getValue ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( VAR_5 ) . METHOD_5 ( VAR_6 ) ; TYPE_3 . METHOD_4 ( VAR_2 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( STRING_1 ) , TYPE_4 . METHOD_9 ( VAR_4 class ) ) ; }\n"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n          intBuf = buf.DATA.asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {", "fixed": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "fixed": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(timeout)", "sourceAfterFix": "Long.parseLong(timeout)"}
{"problem": "public static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 . METHOD_2 ( java.util.Arrays.asList ( java.util.Arrays.asList ( STRING_1 , STRING_2 , STRING_3 ) , java.util.Arrays.asList ( STRING_4 , STRING_5 , STRING_6 , STRING_7 ) , java.util.Arrays.asList ( STRING_1 , STRING_2 , STRING_8 ) ) ) ; }\n", "fixed": "public static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 . METHOD_2 ( java.util.Arrays.asList ( java.util.Arrays.asList ( STRING_1 , STRING_2 , STRING_3 ) , java.util.Arrays.asList ( STRING_4 , STRING_5 , VAR_2 , VAR_1 ) , java.util.Arrays.asList ( STRING_1 , STRING_2 , STRING_8 ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { switch ( k ) { case VAR_1 : VAR_2 . setText ( ( VAR_3 + STRING_1 ) ) ; break ; case VAR_4 : VAR_5 . METHOD_2 ( ( VAR_3 + STRING_1 ) ) ; break ; case VAR_6 : VAR_7 . METHOD_3 ( ( ( boolean ) ( VAR_3 ) ) ) ; break ; } }\n", "fixed": "public void METHOD_1 ( ) { switch ( k ) { case VAR_1 : VAR_2 . setText ( ( VAR_3 + STRING_1 ) ) ; break ; case VAR_4 : VAR_5 . METHOD_2 ( VAR_3 ) ; break ; case VAR_6 : VAR_7 . METHOD_3 ( ( ( boolean ) ( VAR_3 ) ) ) ; break ; } }\n"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Caller in Function Call", "problem": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "fixed": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,externsRoot)", "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,externsRoot)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case 0 : if ( ! ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else { METHOD_4 ( ) ; } case 1 : VAR_1 . METHOD_5 ( ) ; VAR_3 . METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case 0 : if ( ! ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else { METHOD_4 ( ) ; } case 1 : VAR_1 . METHOD_5 ( ) ; VAR_3 . show ( ) ; } }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 < TYPE_3 > VAR_2 = METHOD_2 ( ) ; if ( ! ( VAR_2 . METHOD_3 ( ) ) ) { METHOD_4 ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ) ; } new TYPE_4 ( VAR_3 ) . execute ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 < TYPE_3 > VAR_2 = METHOD_2 ( ) ; if ( ! ( VAR_2 . METHOD_3 ( ) ) ) { METHOD_4 ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return A deep copy of this comparator instance.\n \t */\n\tpublic TypeComparator<T> duplicate();\n }", "fixed": " \t * \n \t * @return A deep copy of this comparator instance.\n \t */\n\tpublic abstract TypeComparator<T> duplicate();\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "protected < TYPE_1 > void METHOD_1 ( TYPE_2 < ? > VAR_1 , TYPE_3 < TYPE_1 > VAR_2 ) { TYPE_4 VAR_3 = METHOD_2 ( VAR_1 ) ; try { java.lang.Object result = METHOD_1 ( VAR_1 , VAR_3 ) ; VAR_2 . METHOD_3 ( ( ( TYPE_1 ) ( result ) ) ) ; } catch ( java.lang.Throwable VAR_4 ) { VAR_2 . METHOD_4 ( VAR_4 ) ; } }\n", "fixed": "protected < TYPE_1 > void METHOD_1 ( TYPE_2 < ? > VAR_1 , TYPE_3 < TYPE_1 > VAR_2 ) { try { TYPE_4 VAR_3 = METHOD_2 ( VAR_1 ) ; java.lang.Object result = METHOD_1 ( VAR_1 , VAR_3 ) ; VAR_2 . METHOD_3 ( ( ( TYPE_1 ) ( result ) ) ) ; } catch ( java.lang.Throwable VAR_4 ) { VAR_2 . METHOD_4 ( VAR_4 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( METHOD_2 ( ) ) != null ) { METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . VAR_2 = VAR_3 ; METHOD_5 ( VAR_4 , TYPE_2 . METHOD_6 ( VAR_5 ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( ( METHOD_2 ( ) ) != null ) && ( ( METHOD_2 ( ) . METHOD_3 ( ) ) != null ) ) { METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . VAR_2 = VAR_3 ; METHOD_5 ( VAR_4 , TYPE_2 . METHOD_6 ( VAR_5 ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.util.Vector < TYPE_1 > VAR_1 ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { VAR_1 . get ( i ) . METHOD_2 ( ( ( STRING_1 + i ) + STRING_2 ) ) ; } try ( java.io.IOException VAR_2 = VAR_3 ) { java.lang.System.out.println ( STRING_3 ) ; } }\n", "fixed": "public void METHOD_1 ( java.util.Vector < TYPE_1 > VAR_1 ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { try { VAR_1 . get ( i ) . METHOD_2 ( ( ( STRING_1 + i ) + STRING_2 ) ) ; } catch ( java.lang.Exception VAR_2 ) { java.lang.System.out.println ( STRING_3 ) ; } } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , ( STRING_2 + ( VAR_2 ) ) ) ; if ( VAR_2 ) { TYPE_3 . METHOD_3 ( VAR_3 ) ; TYPE_3 . METHOD_4 ( VAR_3 ) ; TYPE_3 . METHOD_5 ( VAR_3 ) ; TYPE_4 . METHOD_6 ( VAR_3 , VAR_4 , VAR_5 ) ; TYPE_4 . METHOD_7 ( VAR_3 , VAR_6 , VAR_7 , VAR_8 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { TYPE_3 . METHOD_3 ( VAR_3 ) ; TYPE_3 . METHOD_4 ( VAR_3 ) ; TYPE_3 . METHOD_5 ( VAR_3 ) ; TYPE_4 . METHOD_6 ( VAR_3 , VAR_4 , VAR_5 ) ; TYPE_4 . METHOD_7 ( VAR_3 , VAR_6 , VAR_7 , VAR_8 ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) { java.lang.String result = STRING_1 ; for ( java.lang.Integer key : VAR_1 . METHOD_2 ( ) ) result += ( ( ( STRING_2 + key ) + STRING_3 ) + ( VAR_1 . get ( key ) ) ) + STRING_4 ; return result ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { java.lang.String result = STRING_1 ; synchronized ( VAR_1 ) { for ( java.lang.Integer key : VAR_1 . METHOD_2 ( ) ) result += ( ( ( STRING_2 + key ) + STRING_3 ) + ( VAR_1 . get ( key ) ) ) + STRING_4 ; } return result ; }\n"}
{"fixCommitSHA1": "2663f70f687240ee3d4c4c9d54a769ebff12c9ce", "projectName": "openmrs.openmrs-core", "bugType": "More Specific If", "problem": " \t\tif (reasonForExitConcept != null && patient.getPatientId() != null) {\r\n \t\t\tList<Obs> patientExitObs = Context.getObsService().getObservationsByPersonAndConcept(patient, reasonForExitConcept);\r\n\t\t\tif (patientExitObs != null) {\r\n \t\t\t\tlog.debug(\"Exit obs is size \" + patientExitObs.size());\r\n \t\t\t\tif (patientExitObs.size() == 1) {\r\n \t\t\t\t\tObs exitObs = patientExitObs.iterator().next();\r", "fixed": " \t\tif (reasonForExitConcept != null && patient.getPatientId() != null) {\r\n \t\t\tList<Obs> patientExitObs = Context.getObsService().getObservationsByPersonAndConcept(patient, reasonForExitConcept);\r\n\t\t\tif (patientExitObs != null && patientExitObs.size() > 0) {\r\n \t\t\t\tlog.debug(\"Exit obs is size \" + patientExitObs.size());\r\n \t\t\t\tif (patientExitObs.size() == 1) {\r\n \t\t\t\t\tObs exitObs = patientExitObs.iterator().next();\r", "sourceBeforeFix": "patientExitObs != null", "sourceAfterFix": "patientExitObs != null && patientExitObs.size() > 0"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) == null ) return new TYPE_1 ( VAR_1 , this ) ; if ( ( VAR_2 . equals ( VAR_1 ) ) && ( ( answer ) == null ) ) return this ; return new TYPE_1 ( VAR_1 , this ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( ( ( VAR_2 ) != null ) && ( VAR_2 . equals ( VAR_1 ) ) ) && ( ( answer ) == null ) ) return this ; return new TYPE_1 ( VAR_1 , this ) ; }\n"}
{"problem": "protected void init ( java.lang.String [ ] VAR_1 ) { if ( ( ( ( ( VAR_1 [ 0 ] ) == null ) || ( VAR_1 [ 0 ] . isEmpty ( ) ) ) || ( ( VAR_1 [ 1 ] ) == null ) ) || ( VAR_1 [ 1 ] . isEmpty ( ) ) ) { throw new TYPE_1 ( VAR_2 ) ; } this . VAR_3 = new java.lang.Float ( VAR_1 [ 0 ] ) ; this . name = VAR_1 [ 1 ] ; }\n", "fixed": "protected void init ( java.lang.String [ ] VAR_1 ) { if ( ( ( ( ( VAR_1 [ 0 ] ) == null ) || ( VAR_1 [ 0 ] . isEmpty ( ) ) ) || ( ( VAR_1 [ 1 ] ) == null ) ) || ( VAR_1 [ 1 ] . isEmpty ( ) ) ) { throw new TYPE_1 ( VAR_2 ) ; } this . VAR_3 = new java.lang.Float ( VAR_1 [ 0 ] ) ; this . name = VAR_1 [ 1 ] . trim ( ) ; }\n"}
{"problem": "protected void init ( java.lang.Class < TYPE_1 > VAR_1 , TYPE_2 < TYPE_1 > VAR_2 , TYPE_3 < TYPE_1 > VAR_3 ) { METHOD_1 ( ) ; super . init ( VAR_1 , VAR_2 , VAR_3 ) ; VAR_2 . METHOD_2 ( false ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; }\n", "fixed": "protected void init ( java.lang.Class < TYPE_1 > VAR_1 , TYPE_2 < TYPE_1 > VAR_2 , TYPE_3 < TYPE_1 > VAR_3 ) { METHOD_1 ( ) ; super . init ( VAR_1 , VAR_2 , VAR_3 ) ; VAR_2 . METHOD_2 ( false ) ; if ( ( VAR_5 ) != null ) { VAR_4 . METHOD_3 ( VAR_5 ) ; } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { int index = this . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( index >= 0 ) { VAR_2 . get ( index ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) ; } else { VAR_2 . add ( VAR_1 ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_4 ( ) . isEmpty ( ) ) return ; int index = this . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( index >= 0 ) { VAR_2 . get ( index ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) ; } else { VAR_2 . add ( VAR_1 ) ; } }\n"}
{"fixCommitSHA1": "3079a06d9695ca88467c96c40c5608afef87fa5d", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 exchange.getPartitioningScheme().getPartitioning(),\n                 outputBuilder.build(),\n                 exchange.getPartitioningScheme().getHashColumn(),\n                exchange.getPartitioningScheme().isReplicateNulls(),\n                 exchange.getPartitioningScheme().getBucketToPartition());\n         PlanNode result = new ExchangeNode(", "fixed": "                 exchange.getPartitioningScheme().getPartitioning(),\n                 outputBuilder.build(),\n                 exchange.getPartitioningScheme().getHashColumn(),\n                exchange.getPartitioningScheme().isReplicateNullsAndAny(),\n                 exchange.getPartitioningScheme().getBucketToPartition());\n         PlanNode result = new ExchangeNode(", "sourceBeforeFix": "exchange.getPartitioningScheme().isReplicateNulls()", "sourceAfterFix": "exchange.getPartitioningScheme().isReplicateNullsAndAny()"}
{"problem": "public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { boolean VAR_3 = VAR_1 . METHOD_2 ( VAR_4 ) ; boolean VAR_5 = VAR_2 . METHOD_2 ( VAR_4 ) ; if ( VAR_3 ^ VAR_5 ) { return VAR_3 ? - 1 : 1 ; } else { return new TYPE_2 ( ) . METHOD_1 ( VAR_1 , VAR_2 ) ; } }\n", "fixed": "public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { boolean VAR_3 = VAR_1 . METHOD_2 ( VAR_4 ) ; boolean VAR_5 = VAR_2 . METHOD_2 ( VAR_4 ) ; if ( VAR_3 ^ VAR_5 ) { return VAR_3 ? 1 : - 1 ; } else { return new TYPE_2 ( ) . METHOD_1 ( VAR_1 , VAR_2 ) ; } }\n"}
{"problem": "public void METHOD_1 ( boolean VAR_1 ) { if ( ( ! ( VAR_2 ) ) && VAR_1 ) { this . state = VAR_3 ; VAR_2 = true ; if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_2 ( 0 ) ; METHOD_3 ( VAR_5 , VAR_6 , VAR_4 ) ; VAR_4 . METHOD_4 ( ) ; } } else { METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( boolean VAR_1 ) { if ( ( ! ( VAR_2 ) ) && VAR_1 ) { this . state = VAR_3 ; VAR_2 = true ; if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_2 ( 0 ) ; METHOD_3 ( VAR_5 , VAR_6 , VAR_4 ) ; VAR_4 . METHOD_4 ( ) ; } } else if ( ( VAR_2 ) && ( ! VAR_1 ) ) { METHOD_5 ( ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 ) ; for ( int VAR_4 = 0 ; VAR_4 < ( VAR_2 . METHOD_2 ( ) ) ; VAR_4 ++ ) { for ( int VAR_5 = 0 ; VAR_5 < ( VAR_2 . METHOD_3 ( ) ) ; VAR_5 ++ ) { TYPE_2 VAR_6 = VAR_3 . METHOD_4 ( VAR_4 , VAR_5 ) ; VAR_3 . METHOD_5 ( VAR_4 , VAR_5 , VAR_6 . METHOD_6 ( VAR_1 ) ) ; } } return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 ) ; for ( int VAR_4 = 0 ; VAR_4 < ( VAR_2 . METHOD_2 ( ) ) ; VAR_4 ++ ) { for ( int VAR_5 = 0 ; VAR_5 < ( VAR_2 . METHOD_3 ( ) ) ; VAR_5 ++ ) { TYPE_2 VAR_6 = VAR_3 . METHOD_4 ( VAR_4 , VAR_5 ) ; VAR_3 . METHOD_5 ( VAR_4 , VAR_5 , VAR_6 . METHOD_6 ( VAR_1 ) ) ; } } return VAR_3 ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedConsulEndpointBuilder\n             extends\n                 AdvancedConsulEndpointConsumerBuilder, AdvancedConsulEndpointProducerBuilder {\n         default ConsulEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedConsulEndpointBuilder\n             extends\n                 AdvancedConsulEndpointConsumerBuilder, AdvancedConsulEndpointProducerBuilder {\n         default ConsulEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_3 . METHOD_2 ( ) ; int min = VAR_3 . METHOD_3 ( ) ; METHOD_4 ( min , VAR_2 ) ; VAR_4 = new TYPE_2 ( VAR_5 . METHOD_5 ( new TYPE_3 ( min , VAR_2 ) ) ) ; return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_3 . METHOD_2 ( ) ; int min = VAR_3 . METHOD_3 ( ) ; METHOD_4 ( min , VAR_2 ) ; VAR_4 = new TYPE_2 ( VAR_5 . METHOD_5 ( new TYPE_3 ( min , ( VAR_2 - min ) ) ) ) ; return true ; }\n"}
{"problem": "private void METHOD_1 ( ) throws java.io.IOException { if ( ( ( VAR_1 ) > INT_1 ) || ( ( VAR_2 ) == ( VAR_3 ) ) ) { out.write ( VAR_3 ) ; out.write ( VAR_3 ) ; out.write ( VAR_1 ) ; out.write ( VAR_2 ) ; } else { while ( ( ( VAR_1 ) -- ) > 0 ) { out.write ( VAR_2 ) ; } } }\n", "fixed": "private void METHOD_1 ( ) throws java.io.IOException { if ( ( ( VAR_1 ) > INT_1 ) || ( ( VAR_2 ) == ( VAR_3 ) ) ) { out.write ( VAR_3 ) ; out.write ( VAR_3 ) ; out.write ( VAR_1 ) ; out.write ( VAR_2 ) ; } else { while ( ( ( VAR_1 ) -- ) > 0 ) { out.write ( VAR_2 ) ; } } VAR_1 = 0 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_3 ( ( ( STRING_1 + ( VAR_1 . getName ( ) ) ) + STRING_2 ) ) ; return ; } VAR_3 . add ( VAR_1 ) ; METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_3 ( ( ( STRING_1 + ( VAR_1 . getId ( ) ) ) + STRING_2 ) ) ; return ; } VAR_3 . add ( VAR_1 ) ; METHOD_4 ( ) ; }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( java.lang.String ... message ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , java.lang.Integer.parseInt ( VAR_3 ) ) ; VAR_1 . METHOD_2 ( message [ 0 ] ) ; VAR_1 . METHOD_3 ( ) ; java.lang.System.out.println ( STRING_1 ) ; } catch ( java.lang.Exception VAR_4 ) { java.lang.System.out.println ( VAR_4 ) ; TYPE_2 . METHOD_4 ( METHOD_5 ( ) ) . METHOD_6 ( VAR_5 , STRING_2 , VAR_4 ) ; } return null ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( java.lang.String ... message ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , java.lang.Integer.parseInt ( VAR_3 ) ) ; VAR_1 . METHOD_2 ( message [ 0 ] ) ; VAR_1 . METHOD_3 ( ) ; } catch ( java.lang.Exception VAR_4 ) { TYPE_2 . METHOD_4 ( METHOD_5 ( ) ) . METHOD_6 ( VAR_5 , STRING_2 , VAR_4 ) ; } return null ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) + STRING_1 ; VAR_3 = new TYPE_3 ( this , name ) ; METHOD_4 ( VAR_3 ) ; METHOD_5 ( ) . METHOD_6 ( this ) ; VAR_4 = new TYPE_4 < TYPE_5 , java.lang.String > ( new TYPE_6 ( ) ) ; VAR_4 . start ( ) ; VAR_5 = new TYPE_6 ( ) ; VAR_6 = new TYPE_7 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) + STRING_1 ; VAR_3 = new TYPE_3 ( this , name ) ; METHOD_4 ( VAR_3 ) ; METHOD_5 ( ) . METHOD_6 ( this ) ; VAR_4 = new TYPE_4 < TYPE_5 , java.lang.String > ( new TYPE_6 ( ) ) ; VAR_4 . start ( ) ; VAR_5 = new TYPE_6 ( ) ; VAR_6 = new TYPE_7 < java.lang.String > ( ) ; }\n"}
{"problem": "public void delete ( TYPE_1 key , TYPE_2 VAR_1 ) { if ( ! ( VAR_2 ) ) { VAR_3 . METHOD_1 ( STRING_1 , name ) ; try { VAR_4 . delete ( key ) ; VAR_4 = null ; } catch ( java.lang.Exception VAR_5 ) { VAR_3 . error ( ( STRING_2 + ( name ) ) , VAR_5 ) ; } } else { VAR_3 . METHOD_1 ( STRING_3 , name ) ; } }\n", "fixed": "public void delete ( TYPE_1 key , TYPE_2 VAR_1 ) { if ( ! ( VAR_2 ) ) { VAR_3 . METHOD_1 ( STRING_1 , name ) ; try { VAR_4 . delete ( key ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_3 . error ( ( STRING_2 + ( name ) ) , VAR_5 ) ; } } else { VAR_3 . METHOD_1 ( STRING_3 , name ) ; } }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 += STRING_1 ; if ( ( VAR_3 . METHOD_2 ( ) ) && ( ! ( VAR_4 . METHOD_2 ( ) ) ) ) { VAR_5 [ VAR_6 ] = 1 ; ( VAR_6 ) ++ ; } METHOD_3 ( false ) ; VAR_7 . setText ( TYPE_1 . METHOD_4 ( VAR_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 += STRING_1 ; if ( ( ( VAR_3 . METHOD_2 ( ) ) == true ) && ( ( VAR_4 . METHOD_2 ( ) ) == false ) ) { VAR_5 [ VAR_6 ] = 1 ; ( VAR_6 ) ++ ; } METHOD_3 ( false ) ; VAR_7 . setText ( TYPE_1 . METHOD_4 ( VAR_2 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 = false ; VAR_2 = false ; for ( java.lang.String VAR_3 : VAR_4 . values ( ) ) { if ( ( VAR_3 . startsWith ( STRING_1 ) ) && ( METHOD_2 ( VAR_3 ) ) ) { VAR_1 = true ; VAR_2 = true ; break ; } } if ( ( VAR_5 . equals ( STRING_2 ) ) || ( ! ( VAR_6 ) ) ) { VAR_2 = true ; } }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = false ; VAR_2 = true ; for ( java.lang.String VAR_3 : VAR_4 . values ( ) ) { if ( ( VAR_3 . startsWith ( STRING_1 ) ) && ( METHOD_2 ( VAR_3 ) ) ) { VAR_1 = true ; VAR_2 = false ; break ; } } if ( ( VAR_5 . equals ( STRING_2 ) ) || ( ! ( VAR_6 ) ) ) { VAR_2 = false ; } }\n"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    */\n   public List<DependencyInfo> parseFileReader(String filePath, Reader reader) {\n     depInfos = Lists.newArrayList();\n    logger.info(\"Parsing Dep: \" + filePath);\n     doParse(filePath, reader);\n     return depInfos;\n   }", "fixed": "    */\n   public List<DependencyInfo> parseFileReader(String filePath, Reader reader) {\n     depInfos = Lists.newArrayList();\n    logger.fine(\"Parsing Dep: \" + filePath);\n     doParse(filePath, reader);\n     return depInfos;\n   }", "sourceBeforeFix": "logger.info(\"Parsing Dep: \" + filePath)", "sourceAfterFix": "logger.fine(\"Parsing Dep: \" + filePath)"}
{"fixCommitSHA1": "3b0e5ccc430c5ae4187e6139535c32cc17bb2a2b", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "             String splitsSummary = String.format(\"Splits: %,4d total, %,4d pending, %,4d running, %,4d done\",\n                     globalExecutionStats.getSplits(),\n                     max(0, globalExecutionStats.getSplits() - globalExecutionStats.getStartedSplits()),\n                    max(0, globalExecutionStats.getSplits() - globalExecutionStats.getCompletedSplits()),\n                     globalExecutionStats.getCompletedSplits());\n             reprintLine(splitsSummary);", "fixed": "             String splitsSummary = String.format(\"Splits: %,4d total, %,4d pending, %,4d running, %,4d done\",\n                     globalExecutionStats.getSplits(),\n                     max(0, globalExecutionStats.getSplits() - globalExecutionStats.getStartedSplits()),\n                    max(0, globalExecutionStats.getStartedSplits() - globalExecutionStats.getCompletedSplits()),\n                     globalExecutionStats.getCompletedSplits());\n             reprintLine(splitsSummary);", "sourceBeforeFix": "globalExecutionStats.getSplits()", "sourceAfterFix": "globalExecutionStats.getStartedSplits()"}
{"problem": "public boolean METHOD_1 ( ) { boolean VAR_1 = true ; for ( int y = 0 ; y < ( VAR_2 ) ; y ++ ) { if ( ( VAR_3 . METHOD_2 ( ( ( VAR_4 ) - 1 ) , y ) ) == ( VAR_5 ) ) { VAR_1 = false ; } } return VAR_1 ; }\n", "fixed": "public boolean METHOD_1 ( ) { boolean VAR_1 = true ; for ( int y = 0 ; y < ( VAR_2 ) ; y ++ ) { if ( ( VAR_3 . METHOD_2 ( 0 , y ) ) == ( VAR_5 ) ) { VAR_1 = false ; } } return VAR_1 ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( TYPE_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 . METHOD_5 ( ) ) ) { return METHOD_6 ( VAR_2 ) ; } return null ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 ; VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( TYPE_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 . METHOD_5 ( ) ) ) { return METHOD_6 ( VAR_2 ) ; } return null ; }\n"}
{"problem": "public int METHOD_1 ( ) { int result = super . METHOD_1 ( ) ; result = ( INT_1 * result ) + ( VAR_1 . METHOD_1 ( ) ) ; result = ( INT_1 * result ) + ( VAR_2 . METHOD_1 ( ) ) ; result = ( INT_1 * result ) + ( name . METHOD_1 ( ) ) ; return result ; }\n", "fixed": "public int METHOD_1 ( ) { int result = super . METHOD_1 ( ) ; result = ( INT_1 * result ) + ( ( VAR_1 ) != null ? VAR_1 . METHOD_1 ( ) : 0 ) ; result = ( INT_1 * result ) + ( ( VAR_2 ) != null ? VAR_2 . METHOD_1 ( ) : 0 ) ; result = ( INT_1 * result ) + ( ( name ) != null ? name . METHOD_1 ( ) : 0 ) ; return result ; }\n"}
{"problem": "protected void METHOD_1 ( java.lang.String result ) { TYPE_1 . METHOD_2 ( context , result , VAR_1 ) . show ( ) ; METHOD_3 ( new android.content.Intent ( STRING_1 ) ) ; android.content.Intent intent = new android.content.Intent ( METHOD_4 ( ) , VAR_2 class ) ; intent . METHOD_5 ( VAR_3 , result ) ; METHOD_6 ( intent ) ; }\n", "fixed": "protected void METHOD_1 ( java.lang.String result ) { TYPE_1 . METHOD_2 ( context , result , VAR_1 ) . show ( ) ; android.content.Intent intent = new android.content.Intent ( METHOD_4 ( ) , VAR_2 class ) ; intent . METHOD_5 ( VAR_3 , result ) ; METHOD_6 ( intent ) ; }\n"}
{"problem": "public static java.util.ArrayList < java.io.File > METHOD_1 ( java.util.ArrayList < java.io.File > VAR_1 , int start , int end ) { java.util.ArrayList < java.io.File > output = new java.util.ArrayList < java.io.File > ( ( ( end + 1 ) - start ) ) ; for ( int i = start ; i <= end ; i ++ ) output . add ( VAR_1 . get ( i ) ) ; return output ; }\n", "fixed": "public static java.util.ArrayList < java.io.File > METHOD_1 ( java.util.ArrayList < java.io.File > VAR_1 , int start , int end ) { if ( VAR_1 . isEmpty ( ) ) { return null ; } java.util.ArrayList < java.io.File > output = new java.util.ArrayList < java.io.File > ( ( ( end + 1 ) - start ) ) ; for ( int i = start ; i <= end ; i ++ ) output . add ( VAR_1 . get ( i ) ) ; return output ; }\n"}
{"problem": "private static int METHOD_1 ( java.util.List < java.lang.Integer > VAR_1 , double t ) { int index = TYPE_1 . METHOD_2 ( t ) ; try { int count = VAR_1 . get ( index ) ; return count ; } catch ( java.lang.Exception VAR_2 ) { return - 1 ; } }\n", "fixed": "private static double METHOD_1 ( java.util.List < java.lang.Double > VAR_1 , double t ) { int index = TYPE_1 . METHOD_2 ( t ) ; try { double count = VAR_1 . get ( index ) ; return count ; } catch ( java.lang.Exception VAR_2 ) { return - 1.0 ; } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 params ) { VAR_1 [ 0 ] = params . METHOD_2 ( \"0\" , \"0\" ) ; VAR_1 [ 1 ] = params . METHOD_2 ( \"0\" , STRING_1 ) ; VAR_1 [ INT_1 ] = params . METHOD_2 ( STRING_1 , \"0\" ) ; VAR_1 [ INT_2 ] = params . METHOD_2 ( STRING_1 , STRING_1 ) ; }\n", "fixed": "private void METHOD_1 ( ) { VAR_1 [ 0 ] = parameters . METHOD_2 ( \"0\" , \"0\" ) ; VAR_1 [ 1 ] = parameters . METHOD_2 ( \"0\" , STRING_1 ) ; VAR_1 [ INT_1 ] = parameters . METHOD_2 ( STRING_1 , \"0\" ) ; VAR_1 [ INT_2 ] = parameters . METHOD_2 ( STRING_1 , STRING_1 ) ; }\n"}
{"fixCommitSHA1": "e5e1f1535e3cc33523f486ceee3630eaa8b42b93", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\tcase stringValue:\r\n \t\t\treturn stringValue.equalsIgnoreCase(\"true\");\r\n \t\tcase doubleValue:\r\n\t\t\treturn doubleValue == 0;\r\n \t\tcase longValue:\r\n\t\t\treturn longValue == 0;\r\n \t\tcase booleanValue:\r\n \t\t\treturn longValue != 0;\r\n \t\t}\r", "fixed": " \t\tcase stringValue:\r\n \t\t\treturn stringValue.equalsIgnoreCase(\"true\");\r\n \t\tcase doubleValue:\r\n\t\t\treturn doubleValue != 0;\r\n \t\tcase longValue:\r\n\t\t\treturn longValue != 0;\r\n \t\tcase booleanValue:\r\n \t\t\treturn longValue != 0;\r\n \t\t}\r", "sourceBeforeFix": "doubleValue == 0", "sourceAfterFix": "doubleValue != 0"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( ) ; java.lang.String path = METHOD_3 ( ) ; VAR_1 = new TYPE_1 ( new TYPE_2 ( path ) ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( ) ; java.lang.String path = METHOD_3 ( ) ; if ( path . isEmpty ( ) ) { return ; } VAR_1 = new TYPE_1 ( new TYPE_2 ( path ) ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }\n"}
{"problem": "private double [ ] METHOD_1 ( double [ ] VAR_1 ) { double [ ] result = new double [ VAR_1 . length ] ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { result [ i ] = ( VAR_1 [ i ] ) + ( METHOD_2 ( ) ) ; } return result ; }\n", "fixed": "private double [ ] METHOD_1 ( double [ ] VAR_1 ) { double [ ] result = new double [ VAR_1 . length ] ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { result [ i ] = ( VAR_1 [ i ] ) * ( METHOD_2 ( ) ) ; } return result ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 , java.lang.String VAR_2 , int VAR_3 ) { java.lang.String VAR_4 = METHOD_2 ( new TYPE_1 ( VAR_2 , INT_1 ) , VAR_3 ) ; if ( VAR_1 . METHOD_3 ( VAR_4 ) ) { return VAR_1 . get ( VAR_4 ) ; } for ( int i = VAR_3 ; i >= 0 ; i -- ) { VAR_4 = METHOD_2 ( VAR_2 , i ) ; } return STRING_1 ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 , java.lang.String VAR_2 , int VAR_3 ) { java.lang.String VAR_4 = METHOD_2 ( new TYPE_1 ( VAR_2 , INT_1 ) , VAR_3 ) ; if ( VAR_1 . METHOD_3 ( VAR_4 ) ) { return VAR_1 . get ( VAR_4 ) ; } for ( int i = VAR_3 ; i >= 0 ; i -- ) { VAR_4 = METHOD_2 ( new TYPE_1 ( VAR_2 , INT_1 ) , i ) ; } return STRING_1 ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { int length = VAR_1 . METHOD_2 ( ) ; METHOD_3 ( length ) ; TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) , VAR_2 , VAR_3 , length ) ; VAR_3 = ( VAR_3 ) + length ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { int length = VAR_1 . METHOD_2 ( ) ; METHOD_3 ( length ) ; TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) , VAR_2 , VAR_3 , length ) ; VAR_3 = ( VAR_3 ) + length ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 { java.lang.String VAR_3 = VAR_2 . getString ( STRING_1 ) ; boolean VAR_4 = VAR_2 . getBoolean ( STRING_2 ) ; if ( TYPE_5 . METHOD_2 ( VAR_3 ) ) { throw new TYPE_4 ( STRING_3 , STRING_1 ) ; } if ( VAR_3 . equals ( TYPE_6 . METHOD_3 ( ) ) ) { return METHOD_4 ( TYPE_7 . METHOD_5 ( ) , STRING_1 ) ; } return new TYPE_1 ( VAR_3 , VAR_4 ) ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 { java.lang.String VAR_3 = VAR_2 . getString ( STRING_1 ) ; boolean VAR_4 = VAR_2 . getBoolean ( STRING_2 ) ; if ( TYPE_5 . METHOD_2 ( VAR_3 ) ) { throw new TYPE_4 ( STRING_3 , STRING_1 ) ; } if ( VAR_3 . equals ( TYPE_6 . METHOD_3 ( ) ) ) { throw new TYPE_4 ( TYPE_7 . METHOD_5 ( ) , STRING_1 ) ; } return new TYPE_1 ( VAR_3 , VAR_4 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( ! ( METHOD_3 ( VAR_2 , response , false ) ) ) return ; TYPE_4 VAR_4 = TYPE_5 . METHOD_4 ( ) . METHOD_5 ( ) ; response . METHOD_6 ( VAR_5 ) ; response . METHOD_7 ( STRING_1 ) ; response . METHOD_8 ( ) . METHOD_9 ( VAR_4 . toString ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( ! ( METHOD_3 ( VAR_2 , response , true ) ) ) return ; TYPE_4 VAR_4 = TYPE_5 . METHOD_4 ( ) . METHOD_5 ( ) ; response . METHOD_6 ( VAR_5 ) ; response . METHOD_7 ( STRING_1 ) ; response . METHOD_8 ( ) . METHOD_9 ( VAR_4 . toString ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) { if ( ( VAR_3 ) >= ( ( VAR_4 ) - 1 ) ) { try { if ( this . VAR_5 [ 0 ] . METHOD_2 ( ) . equals ( STRING_1 ) ) { VAR_6 . METHOD_3 ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) , STRING_2 ) ; } } catch ( java.lang.Exception VAR_7 ) { } } super . METHOD_1 ( VAR_1 , VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) { if ( ( VAR_3 ) >= ( ( VAR_4 ) - 1 ) ) { if ( this . VAR_5 [ 0 ] . METHOD_2 ( ) . equals ( STRING_1 ) ) { VAR_6 . METHOD_3 ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) , STRING_2 ) ; } } super . METHOD_1 ( VAR_1 , VAR_2 ) ; }\n"}
{"problem": "public boolean METHOD_1 ( boolean VAR_1 ) { if ( state . METHOD_2 ( VAR_2 , VAR_3 ) ) { return true ; } else if ( VAR_1 ) { while ( ( VAR_4 ) == null ) { } VAR_4 . METHOD_3 ( ) ; return true ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( boolean VAR_1 ) { if ( ( state . get ( ) ) == ( VAR_3 ) ) return true ; if ( state . METHOD_2 ( VAR_2 , VAR_3 ) ) { return true ; } else if ( VAR_1 ) { while ( ( VAR_4 ) == null ) ; try { VAR_4 . METHOD_3 ( ) ; } finally { state . set ( VAR_3 ) ; } return true ; } return false ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 = VAR_2 . getText ( ) ; if ( ( TYPE_2 ) != null ) { int VAR_3 = 0 ; for ( TYPE_3 p : VAR_4 ) { if ( ( TYPE_2 ) == ( p . getId ( ) ) ) { VAR_5 . setText ( STRING_1 ) ; VAR_3 ++ ; } } if ( VAR_3 == 0 ) { VAR_5 . setText ( STRING_2 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 = VAR_2 . getText ( ) ; if ( ( TYPE_2 ) != null ) { int VAR_3 = 0 ; for ( TYPE_3 p : VAR_4 ) { if ( TYPE_2 . equals ( p . getId ( ) ) ) { VAR_5 . setText ( STRING_1 ) ; VAR_3 ++ ; } } if ( VAR_3 == 0 ) { VAR_5 . setText ( STRING_2 ) ; } } }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 ; TYPE_2 VAR_4 = null ; try { VAR_3 = VAR_5 . METHOD_2 ( ) ; VAR_4 = VAR_3 . METHOD_3 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) + STRING_3 ) ) ; while ( VAR_4 . METHOD_4 ( ) ) { return true ; } } catch ( TYPE_3 VAR_6 ) { VAR_6 . METHOD_5 ( ) ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 ; TYPE_2 VAR_4 = null ; try { VAR_3 = VAR_5 . METHOD_2 ( ) ; VAR_4 = VAR_3 . METHOD_3 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) + STRING_3 ) ) ; while ( VAR_4 . METHOD_4 ( ) ) { return true ; } } catch ( TYPE_3 VAR_6 ) { VAR_6 . METHOD_5 ( ) ; return false ; } return false ; }\n"}
{"problem": "protected java.util.Calendar METHOD_1 ( final java.util.Date date , final int VAR_1 , final int VAR_2 , final int VAR_3 , final int VAR_4 , final int VAR_5 , final int VAR_6 , final int VAR_7 ) { final java.util.Calendar VAR_8 = METHOD_1 ( date , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; TYPE_1 . assertEquals ( VAR_7 , VAR_8 . get ( VAR_9 ) ) ; return VAR_8 ; }\n", "fixed": "protected java.util.Calendar METHOD_1 ( final java.util.Date date , final int VAR_1 , final int VAR_2 , final int VAR_3 , final int VAR_4 , final int VAR_5 , final int VAR_6 , final int VAR_7 ) { final java.util.Calendar VAR_8 = METHOD_1 ( date , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; assertEquals ( VAR_7 , VAR_8 . get ( VAR_9 ) ) ; return VAR_8 ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.lang.Integer VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 ) ; int VAR_4 = java.lang.Math.abs ( ( VAR_2 % INT_1 ) ) ; TYPE_3 VAR_5 = TYPE_3 . METHOD_4 ( VAR_4 ) . METHOD_5 ( TYPE_3 . METHOD_4 ( INT_1 ) ) ; for ( TYPE_4 VAR_6 : VAR_7 . METHOD_6 ( ) ) { if ( VAR_6 . METHOD_7 ( VAR_5 ) ) { return VAR_7 . get ( VAR_6 ) ; } } return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.lang.Integer VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 ) ; int VAR_4 = ( java.lang.Math.abs ( ( VAR_2 % INT_1 ) ) ) + 1 ; TYPE_3 VAR_5 = TYPE_3 . METHOD_4 ( VAR_4 ) . METHOD_5 ( TYPE_3 . METHOD_4 ( INT_1 ) ) ; for ( TYPE_4 VAR_6 : VAR_7 . METHOD_6 ( ) ) { if ( VAR_6 . METHOD_7 ( VAR_5 ) ) { return VAR_7 . get ( VAR_6 ) ; } } return null ; }\n"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public boolean equals ( java.lang.Object VAR_1 ) { boolean equals = false ; if ( VAR_1 instanceof TYPE_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; if ( ( ( this . getName ( ) . equals ( VAR_2 . getName ( ) ) ) & ( this . METHOD_1 ( ) . equals ( VAR_2 . METHOD_1 ( ) ) ) ) & ( TYPE_2 . equals ( this . METHOD_2 ( ) , VAR_2 . METHOD_2 ( ) ) ) ) { equals = true ; } } return equals ; }\n", "fixed": "public boolean equals ( java.lang.Object VAR_1 ) { boolean equals = false ; if ( VAR_1 instanceof TYPE_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; if ( ( ( this . getName ( ) . equals ( VAR_2 . getName ( ) ) ) && ( this . METHOD_1 ( ) . equals ( VAR_2 . METHOD_1 ( ) ) ) ) && ( TYPE_2 . equals ( this . METHOD_2 ( ) , VAR_2 . METHOD_2 ( ) ) ) ) { equals = true ; } } return equals ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "double METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return VAR_2 . getValue ( ) . METHOD_3 ( ) ; } else if ( VAR_3 . METHOD_2 ( ) ) { double result = 1.0 ; try { result = VAR_4 . METHOD_4 ( ) . METHOD_3 ( ) ; } catch ( TYPE_1 VAR_5 ) { VAR_6 . error ( STRING_1 ) ; } return result ; } else if ( VAR_7 . METHOD_2 ( ) ) { return VAR_8 . getValue ( ) . METHOD_3 ( ) ; } return 1.0 ; }\n", "fixed": "double METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return VAR_2 . getValue ( ) . METHOD_3 ( ) ; } else if ( VAR_3 . METHOD_2 ( ) ) { double result = 1.0 ; try { result = VAR_4 . METHOD_4 ( ) . METHOD_3 ( ) ; } catch ( TYPE_1 VAR_5 ) { return 1.0 ; } return result ; } else if ( VAR_7 . METHOD_2 ( ) ) { return VAR_8 . getValue ( ) . METHOD_3 ( ) ; } return 1.0 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( null != ( VAR_2 ) ) { int VAR_3 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_4 = new TYPE_3 ( ) ; for ( int i = 0 ; i < VAR_3 ; i ++ ) { TYPE_2 . METHOD_3 ( i , VAR_4 ) ; if ( ( VAR_5 ) != ( VAR_6 ) ) { METHOD_4 ( ) ; VAR_2 = TYPE_2 . open ( i ) ; METHOD_5 ( VAR_1 ) ; VAR_6 = VAR_5 ; break ; } } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( null != ( VAR_2 ) ) { int VAR_3 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_4 = new TYPE_3 ( ) ; for ( int i = 0 ; i < VAR_3 ; i ++ ) { TYPE_2 . METHOD_3 ( i , VAR_4 ) ; if ( ( VAR_5 ) != ( VAR_6 ) ) { METHOD_4 ( ) ; VAR_2 = TYPE_2 . open ( i ) ; VAR_6 = VAR_5 ; METHOD_5 ( VAR_1 ) ; break ; } } } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { try { final TYPE_1 VAR_3 = VAR_4 . first ( VAR_2 ) ; boolean result = VAR_5 . METHOD_1 ( VAR_3 , VAR_1 ) ; if ( result ) { TYPE_2 . info ( STRING_1 , VAR_3 . name , VAR_3 . id , VAR_6 ) ; METHOD_2 ( ) ; } else { TYPE_2 . info ( STRING_2 ) ; } } catch ( java.lang.Exception VAR_7 ) { java.lang.System.out.println ( STRING_3 ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { METHOD_2 ( ) ; try { final TYPE_1 VAR_3 = VAR_4 . first ( VAR_2 ) ; boolean result = VAR_5 . METHOD_1 ( VAR_3 , VAR_1 ) ; if ( result ) { TYPE_2 . info ( STRING_1 , VAR_3 . name , VAR_3 . id , VAR_6 ) ; METHOD_2 ( ) ; } else { TYPE_2 . info ( STRING_2 ) ; } } catch ( java.lang.Exception VAR_7 ) { java.lang.System.out.println ( STRING_3 ) ; } }\n"}
{"problem": "public void METHOD_1 ( boolean VAR_1 ) { while ( ( ! ( VAR_2 ) ) && ( ! ( VAR_3 ) ) ) { try { java.lang.Thread . METHOD_2 ( INT_1 ) ; } catch ( java.lang.Exception VAR_4 ) { } } VAR_3 = VAR_1 ; VAR_2 = ! ( VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_3 ) == VAR_1 ) return ; while ( ( ! ( VAR_2 ) ) && ( ! ( VAR_3 ) ) ) { try { java.lang.Thread . METHOD_2 ( INT_1 ) ; } catch ( java.lang.Exception VAR_4 ) { } } VAR_3 = VAR_1 ; VAR_2 = ! ( VAR_3 ) ; }\n"}
{"problem": "private boolean METHOD_1 ( ) { boolean VAR_1 = true ; if ( ( VAR_2 . METHOD_2 ( ) ) == null ) { VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_1 = false ; } if ( ( VAR_5 . getText ( ) . length ( ) ) == 0 ) { VAR_6 . METHOD_3 ( VAR_4 ) ; VAR_1 = false ; } if ( VAR_1 && ( VAR_7 ) ) { if ( VAR_8 ) VAR_9 . METHOD_4 ( VAR_2 ) ; else VAR_9 . METHOD_5 ( VAR_2 ) ; } return VAR_1 ; }\n", "fixed": "private boolean METHOD_1 ( ) { boolean VAR_1 = true ; if ( ( VAR_2 . METHOD_2 ( ) ) == null ) { VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_1 = false ; } if ( ( VAR_5 . getText ( ) . length ( ) ) == 0 ) { VAR_6 . METHOD_3 ( VAR_4 ) ; VAR_1 = false ; } if ( VAR_1 ) { if ( ( VAR_8 ) && ( VAR_7 ) ) VAR_9 . METHOD_4 ( VAR_2 ) ; else VAR_9 . METHOD_5 ( VAR_2 ) ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "8cb66861957089a03000c71b66f1e66e8e66d4c1", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n                createQueryResultSnippet( engine.execute( query  ).toString() ) ) );\n         fw.append( \"\\nNext up we will add filtering to set more parts \"\n                    + \"in motion:\\n\\nIn this next example, we take a list of users \"", "fixed": "                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n                createQueryResultSnippet( engine.execute( query  ).dumpToString() ) ) );\n         fw.append( \"\\nNext up we will add filtering to set more parts \"\n                    + \"in motion:\\n\\nIn this next example, we take a list of users \"", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { VAR_3 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ; final TYPE_4 VAR_4 = TYPE_5 . METHOD_4 ( VAR_2 ) ; if ( VAR_4 != null ) { return METHOD_5 ( VAR_4 ) ; } final java.util.List < TYPE_4 > VAR_5 = VAR_6 . METHOD_1 ( VAR_1 ) ; if ( VAR_5 != null ) { return METHOD_5 ( VAR_5 ) ; } return TYPE_1 . METHOD_6 ( new TYPE_6 ( STRING_2 ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { VAR_3 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ; final TYPE_4 VAR_4 = TYPE_5 . METHOD_4 ( VAR_2 ) ; if ( VAR_4 != null ) { return METHOD_5 ( VAR_4 ) ; } final java.util.List < TYPE_4 > VAR_5 = VAR_6 . METHOD_1 ( VAR_1 ) ; if ( ! ( VAR_5 . isEmpty ( ) ) ) { return METHOD_5 ( VAR_5 ) ; } return TYPE_1 . METHOD_6 ( new TYPE_6 ( STRING_2 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { try { TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( VAR_2 ) ; ( ( TYPE_3 ) ( VAR_3 ) ) . METHOD_3 ( ) ; VAR_4 . METHOD_1 ( VAR_1 . getId ( ) , VAR_3 . METHOD_4 ( ) ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_6 . error ( STRING_1 , VAR_5 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { try { TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( VAR_2 ) ; ( ( TYPE_3 ) ( VAR_3 ) ) . METHOD_3 ( ) ; VAR_4 . METHOD_1 ( VAR_1 . getId ( ) , VAR_2 ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_6 . error ( STRING_1 , VAR_5 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; TYPE_2 VAR_2 = VAR_3 . query ( VAR_4 , VAR_5 , null , null , null , null , ( ( VAR_6 ) + STRING_1 ) ) ; VAR_2 . METHOD_2 ( ) ; while ( ! ( VAR_2 . METHOD_3 ( ) ) ) { TYPE_1 VAR_7 = METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_7 ) ; VAR_2 . METHOD_5 ( ) ; } VAR_2 . METHOD_6 ( ) ; return VAR_1 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; TYPE_2 VAR_2 = VAR_3 . query ( VAR_4 , VAR_5 , null , null , null , null , VAR_6 ) ; VAR_2 . METHOD_2 ( ) ; while ( ! ( VAR_2 . METHOD_3 ( ) ) ) { TYPE_1 VAR_7 = METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_7 ) ; VAR_2 . METHOD_5 ( ) ; } VAR_2 . METHOD_6 ( ) ; return VAR_1 ; }\n"}
{"problem": "public long METHOD_1 ( ) { TYPE_1 VAR_1 ; long VAR_2 = TYPE_2 . METHOD_2 ( ) ; long VAR_3 = 0 ; for ( java.lang.Object VAR_4 : this . VAR_5 ) { VAR_1 = ( ( TYPE_1 ) ( VAR_4 ) ) ; if ( ( VAR_1 . endTime ) > ( VAR_2 - ( ( this . VAR_6 ) * ( this . VAR_7 ) ) ) ) { VAR_3 += VAR_8 . get ( ) ; } } return VAR_3 ; }\n", "fixed": "public long METHOD_1 ( ) { TYPE_1 VAR_1 ; long VAR_2 = TYPE_2 . METHOD_2 ( ) ; long VAR_3 = 0 ; synchronized ( this . VAR_5 ) { for ( java.lang.Object VAR_4 : this . VAR_5 ) { VAR_1 = ( ( TYPE_1 ) ( VAR_4 ) ) ; if ( ( VAR_1 . endTime ) > ( VAR_2 - ( ( this . VAR_6 ) * ( this . VAR_7 ) ) ) ) { VAR_3 += VAR_8 . get ( ) ; } } } return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 class ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; TYPE_3 VAR_5 = TYPE_3 . METHOD_4 ( VAR_6 , VAR_3 , VAR_7 . METHOD_5 ( ) ) ; VAR_8 . update ( VAR_5 , VAR_1 ) ; METHOD_6 ( VAR_9 , METHOD_7 ( ) ) . add ( VAR_10 < TYPE_2 > METHOD_8 ( ) ) ; METHOD_6 ( VAR_11 ) . METHOD_9 ( VAR_4 , VAR_12 , null ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; TYPE_3 VAR_5 = TYPE_3 . METHOD_4 ( VAR_6 , VAR_3 , VAR_7 . METHOD_5 ( ) ) ; VAR_8 . update ( VAR_5 , VAR_1 ) ; METHOD_6 ( VAR_9 , METHOD_7 ( ) ) . add ( VAR_10 < TYPE_2 > METHOD_8 ( ) ) ; METHOD_6 ( VAR_11 ) . METHOD_9 ( VAR_4 , VAR_12 , null ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . add ( VAR_2 , new TYPE_1 ( VAR_3 , INT_1 ) ) ; VAR_1 . add ( VAR_2 , new TYPE_1 ( VAR_4 , INT_2 ) ) ; TYPE_1 [ ] VAR_5 = new TYPE_1 [ ] { new TYPE_1 ( VAR_3 , INT_1 ) , new TYPE_1 ( VAR_4 , INT_2 ) } ; assertEquals ( new java.util.HashSet ( java.util.Arrays.asList ( VAR_5 ) ) , VAR_1 . METHOD_2 ( VAR_2 ) ) ; assertEquals ( INT_1 , 1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . add ( VAR_2 , new TYPE_1 ( VAR_3 , INT_1 ) ) ; VAR_1 . add ( VAR_2 , new TYPE_1 ( VAR_4 , INT_2 ) ) ; TYPE_1 [ ] VAR_5 = new TYPE_1 [ ] { new TYPE_1 ( VAR_3 , INT_1 ) , new TYPE_1 ( VAR_4 , INT_2 ) } ; assertEquals ( new java.util.HashSet ( java.util.Arrays.asList ( VAR_5 ) ) , VAR_1 . METHOD_2 ( VAR_2 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 b ) throws java.io.IOException { out . METHOD_2 ( ) ; for ( int i = 0 ; i < ( b . size ( ) ) ; i ++ ) { if ( b . get ( i ) ) { out . METHOD_3 ( i ) ; out . METHOD_2 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 b ) throws java.io.IOException { out . METHOD_2 ( ) ; for ( int i = 0 ; i < ( b . size ( ) ) ; i ++ ) { if ( b . get ( i ) ) { out . METHOD_3 ( i ) ; } } out . METHOD_2 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( ) { if ( false ) { final TYPE_1 [ ] buffer = VAR_1 ; final long index = VAR_2 ; final long VAR_3 = VAR_4 ; final long offset = TYPE_2 . METHOD_2 ( index , VAR_3 ) ; java.lang.Object VAR_5 = TYPE_2 . METHOD_3 ( buffer , offset ) ; if ( VAR_5 == ( VAR_6 ) ) { return METHOD_4 ( METHOD_5 ( buffer , VAR_3 ) , index ) ; } return ( ( TYPE_1 ) ( VAR_5 ) ) ; } return METHOD_6 ( ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { final TYPE_1 [ ] buffer = VAR_1 ; final long index = VAR_2 ; final long VAR_3 = VAR_4 ; final long offset = TYPE_2 . METHOD_2 ( index , VAR_3 ) ; java.lang.Object VAR_5 = TYPE_2 . METHOD_3 ( buffer , offset ) ; if ( VAR_5 == ( VAR_6 ) ) { return METHOD_4 ( METHOD_5 ( buffer , VAR_3 ) , index ) ; } return ( ( TYPE_1 ) ( VAR_5 ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( java.util.Calendar VAR_1 ) { VAR_1 . add ( VAR_2 , 1 ) ; VAR_1 . set ( VAR_3 , 0 ) ; VAR_1 . set ( VAR_4 , 0 ) ; VAR_1 . set ( VAR_5 , 0 ) ; VAR_1 . set ( VAR_6 , 0 ) ; }\n", "fixed": "public void METHOD_1 ( java.util.Calendar VAR_1 ) { VAR_1 . set ( VAR_2 , 1 ) ; VAR_1 . set ( VAR_3 , 0 ) ; VAR_1 . set ( VAR_4 , 0 ) ; VAR_1 . set ( VAR_5 , 0 ) ; VAR_1 . set ( VAR_6 , 0 ) ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"problem": "public static void main ( java.lang.String [ ] args ) { boolean VAR_1 = false ; if ( ( args.length ) > 1 ) { VAR_1 = java.lang.Boolean . METHOD_1 ( args [ 1 ] ) ; } TYPE_1 main = new TYPE_1 ( VAR_1 ) ; main . METHOD_2 ( ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { boolean VAR_1 = false ; if ( ( args.length ) == 1 ) { VAR_1 = java.lang.Boolean . METHOD_1 ( args [ 0 ] ) ; } TYPE_1 main = new TYPE_1 ( VAR_1 ) ; main . METHOD_2 ( ) ; }\n"}
{"fixCommitSHA1": "5f78aa9c52a2f28419a5fa646ab28ee273e17e6a", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public Connection getOrConnect(Address address) {\n         Connection connection = getConnection(address);\n         if (connection != null && connection.isAlive()) {\n             return connection;", "fixed": "     }\n     @Override\n    public synchronized Connection getOrConnect(Address address) {\n         Connection connection = getConnection(address);\n         if (connection != null && connection.isAlive()) {\n             return connection;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"problem": "public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; TYPE_1 VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_3 ( STRING_1 , VAR_2 ) ; VAR_5 . METHOD_3 ( STRING_2 , VAR_3 ) ; VAR_5 . METHOD_4 ( STRING_3 ) ; return VAR_5 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; TYPE_1 VAR_5 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_5 . METHOD_3 ( STRING_1 , VAR_2 ) ; VAR_5 . METHOD_3 ( STRING_2 , VAR_3 ) ; VAR_5 . METHOD_4 ( STRING_3 ) ; return VAR_5 ; }\n"}
{"problem": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { if ( ( null == ( VAR_4 ) ) || ( VAR_5 ) ) { VAR_4 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; } VAR_6 = TYPE_4 . METHOD_3 ( this , VAR_4 ) ; return VAR_4 ; }\n", "fixed": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { if ( ( null == ( VAR_4 ) ) || ( ! ( VAR_5 ) ) ) { VAR_4 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; } VAR_6 = TYPE_4 . METHOD_3 ( this , VAR_4 ) ; return VAR_4 ; }\n"}
{"problem": "private void METHOD_1 ( ) { VAR_1 = VAR_1 . replace ( STRING_1 , STRING_2 ) ; VAR_2 = java.lang.Double . METHOD_2 ( VAR_1 ) ; VAR_1 = VAR_1 . replace ( STRING_2 , STRING_1 ) ; VAR_3 = ( ( ( VAR_4 . format ( VAR_2 ) ) + STRING_3 ) + ( VAR_5 ) ) . replace ( CHAR_1 , CHAR_2 ) ; VAR_6 . setText ( VAR_3 ) ; VAR_1 = STRING_4 ; VAR_7 . setText ( VAR_1 ) ; }\n", "fixed": "private void METHOD_1 ( ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { VAR_1 = VAR_1 . replace ( STRING_1 , STRING_2 ) ; VAR_2 = java.lang.Double . METHOD_2 ( VAR_1 ) ; VAR_1 = VAR_1 . replace ( STRING_2 , STRING_1 ) ; VAR_3 = ( ( ( VAR_4 . format ( VAR_2 ) ) + STRING_3 ) + ( VAR_5 ) ) . replace ( CHAR_1 , CHAR_2 ) ; VAR_6 . setText ( VAR_3 ) ; VAR_1 = STRING_4 ; VAR_7 . setText ( \"0\" ) ; } }\n"}
{"problem": "public static java.util.List < java.lang.String > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.ArrayList < java.lang.String > ( ) ; VAR_1 . add ( VAR_2 ) ; VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; } return VAR_1 ; }\n", "fixed": "public static java.util.List < java.lang.String > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { java.util.ArrayList < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; list . add ( VAR_2 ) ; list . METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; VAR_1 = list ; } return VAR_1 ; }\n"}
{"problem": "private int METHOD_1 ( ) { int VAR_1 = VAR_2 ; int VAR_3 = - 1 ; for ( int i = 0 ; i < ( VAR_4 . length ) ; i ++ ) { if ( ! ( VAR_5 [ i ] ) ) { if ( VAR_1 > ( VAR_4 [ i ] ) ) { VAR_3 = i ; VAR_1 = VAR_4 [ i ] ; } } } return VAR_3 ; }\n", "fixed": "private int METHOD_1 ( ) { int VAR_1 = VAR_2 ; int VAR_3 = - 1 ; for ( int i = 0 ; i < ( VAR_4 . length ) ; i ++ ) { if ( ! ( VAR_5 [ i ] ) ) { if ( VAR_1 >= ( VAR_4 [ i ] ) ) { VAR_3 = i ; VAR_1 = VAR_4 [ i ] ; } } } return VAR_3 ; }\n"}
{"problem": "private int [ ] METHOD_1 ( ) { if ( ( this . VAR_1 ) == null ) { VAR_1 = new int [ this . METHOD_2 ( ) ] ; for ( java.util.LinkedList < java.lang.Integer > VAR_2 : VAR_3 ) { for ( int VAR_4 : VAR_2 ) { ( this . VAR_1 [ VAR_4 ] ) ++ ; } } } return VAR_1 ; }\n", "fixed": "public int [ ] METHOD_1 ( ) { if ( ( this . VAR_1 ) == null ) { VAR_1 = new int [ this . METHOD_2 ( ) ] ; for ( java.util.LinkedList < java.lang.Integer > VAR_2 : VAR_3 ) { for ( int VAR_4 : VAR_2 ) { ( this . VAR_1 [ VAR_4 ] ) ++ ; } } } return VAR_1 ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; int VAR_3 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; if ( ! ( VAR_2 . METHOD_5 ( VAR_3 ) ) ) { TYPE_3 VAR_4 = VAR_2 . METHOD_6 ( VAR_3 ) ; VAR_5 . METHOD_7 ( VAR_4 ) ; VAR_5 . show ( VAR_1 . METHOD_8 ( ) , VAR_1 . METHOD_9 ( ) , VAR_1 . METHOD_10 ( ) ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; int VAR_3 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; if ( ( VAR_3 > ( - 1 ) ) && ( ! ( VAR_2 . METHOD_5 ( VAR_3 ) ) ) ) { TYPE_3 VAR_4 = VAR_2 . METHOD_6 ( VAR_3 ) ; VAR_5 . METHOD_7 ( VAR_4 ) ; VAR_5 . show ( VAR_1 . METHOD_8 ( ) , VAR_1 . METHOD_9 ( ) , VAR_1 . METHOD_10 ( ) ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { if ( VAR_1 != null ) { final TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) . METHOD_7 ( TYPE_4 . METHOD_8 ( VAR_1 ) ) . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) ; return VAR_2 . build ( ) ; } return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( ) ; if ( VAR_1 != null ) VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) . METHOD_7 ( TYPE_4 . METHOD_8 ( VAR_1 ) ) . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) ; return VAR_2 . build ( ) ; }\n"}
{"fixCommitSHA1": "7b1dba9a494ca50e2fde047544a675df6c702e54", "projectName": "apache.camel", "bugType": "More Specific If", "problem": "             return false;\n         }\n        if (expression.indexOf(\"${\") >= 0) {\n             return true;\n         }", "fixed": "             return false;\n         }\n        if (\"simple\".equalsIgnoreCase(language) && expression.indexOf(\"${\") >= 0) {\n             return true;\n         }", "sourceBeforeFix": "expression.indexOf(\"${\") >= 0", "sourceAfterFix": "\"simple\".equalsIgnoreCase(language) && expression.indexOf(\"${\") >= 0"}
{"problem": "public void METHOD_1 ( ) { try { VAR_1 . delete ( VAR_2 ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_3 . METHOD_5 ( STRING_1 ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_6 ( ) ; VAR_5 . METHOD_7 ( ) ; METHOD_3 ( ) ; VAR_3 . error ( STRING_2 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { VAR_1 . delete ( VAR_2 ) ; METHOD_4 ( ) ; VAR_3 . METHOD_5 ( STRING_1 ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_6 ( ) ; VAR_5 . METHOD_7 ( ) ; METHOD_3 ( ) ; VAR_3 . error ( STRING_2 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( this ) ; VAR_1 . open ( ) ; TYPE_2 . METHOD_2 ( this ) . METHOD_3 ( VAR_2 , new TYPE_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; VAR_4 = new java.util.HashSet < > ( ) ; VAR_5 = new TYPE_4 ( this ) ; METHOD_5 ( METHOD_6 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( this ) ; VAR_1 . open ( ) ; TYPE_2 . METHOD_2 ( this ) . METHOD_3 ( VAR_2 , new TYPE_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; VAR_4 = new java.util.HashSet < > ( ) ; VAR_5 = new TYPE_4 ( this ) ; METHOD_5 ( METHOD_6 ( ) , true ) ; }\n"}
{"problem": "private boolean METHOD_1 ( java.lang.String fieldName ) { if ( STRING_1 . equals ( fieldName ) ) { METHOD_2 ( STRING_2 , STRING_3 ) ; return true ; } else if ( ( ( STRING_4 . equals ( fieldName ) ) || ( STRING_5 . equals ( fieldName ) ) ) || ( STRING_6 . equals ( fieldName ) ) ) { METHOD_2 ( fieldName , STRING_7 ) ; return true ; } else if ( STRING_8 . equals ( fieldName ) ) { METHOD_2 ( STRING_9 , STRING_10 ) ; return true ; } return false ; }\n", "fixed": "private boolean METHOD_1 ( java.lang.String fieldName ) { if ( STRING_1 . equals ( fieldName ) ) { METHOD_2 ( STRING_2 , STRING_3 ) ; return true ; } if ( ( ( STRING_4 . equals ( fieldName ) ) || ( STRING_5 . equals ( fieldName ) ) ) || ( STRING_6 . equals ( fieldName ) ) ) { METHOD_2 ( fieldName , STRING_7 ) ; return true ; } if ( STRING_8 . equals ( fieldName ) ) { METHOD_2 ( STRING_9 , STRING_10 ) ; return true ; } return false ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 , TYPE_3 > ( ) ; VAR_2 = new TYPE_4 < TYPE_2 , TYPE_3 > ( ) ; VAR_3 = new TYPE_5 < TYPE_2 , TYPE_3 > ( VAR_4 , VAR_5 ) ; VAR_6 = new TYPE_6 < TYPE_2 , TYPE_3 > ( ) ; VAR_7 = new TYPE_7 < TYPE_2 , TYPE_3 > ( VAR_8 ) ; VAR_9 = new TYPE_8 ( VAR_4 , VAR_5 ) ; add ( VAR_10 ) ; METHOD_2 ( VAR_11 ) ; }\n", "fixed": "protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 , TYPE_3 > ( ) ; VAR_3 = new TYPE_5 < TYPE_2 , TYPE_3 > ( VAR_4 , VAR_5 ) ; VAR_7 = new TYPE_7 < TYPE_2 , TYPE_3 > ( VAR_8 ) ; VAR_9 = new TYPE_8 ( VAR_4 , VAR_5 ) ; add ( VAR_10 ) ; METHOD_2 ( VAR_11 ) ; }\n"}
{"problem": "private boolean METHOD_1 ( java.lang.String VAR_1 , int position ) { char VAR_2 = VAR_1 . METHOD_2 ( position ) ; if ( VAR_2 == CHAR_1 ) { return true ; } else if ( VAR_2 == CHAR_2 ) { if ( position < ( ( VAR_1 . length ( ) ) - 1 ) ) { if ( ( VAR_1 . METHOD_2 ( ( position + 1 ) ) ) == CHAR_2 ) { return true ; } } } return false ; }\n", "fixed": "private boolean METHOD_1 ( ) { char VAR_2 = VAR_1 . METHOD_2 ( position ) ; if ( VAR_2 == CHAR_1 ) { return true ; } else if ( VAR_2 == CHAR_2 ) { if ( ( position ) < ( ( VAR_1 . length ( ) ) - 1 ) ) { if ( ( VAR_1 . METHOD_2 ( ( ( position ) + 1 ) ) ) == CHAR_2 ) { return true ; } } } return false ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 , METHOD_3 ( ) ) ; VAR_1 . METHOD_2 ( VAR_3 , METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( VAR_4 , METHOD_6 ( ) ) ; VAR_1 . METHOD_5 ( VAR_5 , METHOD_7 ( ) ) ; VAR_1 . METHOD_5 ( VAR_6 , METHOD_8 ( ) ) ; VAR_1 . METHOD_5 ( VAR_7 , METHOD_9 ( ) ) ; }\n", "fixed": "void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 , METHOD_3 ( ) ) ; VAR_1 . METHOD_2 ( VAR_3 , METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( VAR_4 , METHOD_6 ( ) ) ; VAR_1 . METHOD_5 ( VAR_5 , METHOD_7 ( ) ) ; VAR_1 . METHOD_5 ( VAR_6 , METHOD_8 ( ) ) ; }\n"}
{"fixCommitSHA1": "ceb0d5e68bc6cbf8015be6d5dd785991fbc81455", "projectName": "apache.hbase", "bugType": "Same Function More Args", "problem": "     Thread.yield();\n    response = client.get(path);\n     assertEquals(response.getCode(), 404);", "fixed": "     Thread.yield();\n    response = client.get(path, MIMETYPE_PROTOBUF);\n     assertEquals(response.getCode(), 404);", "sourceBeforeFix": "client.get(path)", "sourceAfterFix": "client.get(path,MIMETYPE_PROTOBUF)"}
{"problem": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { for ( TYPE_2 < ? > VAR_2 : VAR_3 . METHOD_2 ( ) ) { if ( ( VAR_2 . getValue ( ) ) == VAR_1 ) { VAR_3 . METHOD_2 ( ) . remove ( VAR_2 ) ; break ; } } }\n", "fixed": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; for ( TYPE_2 < ? > VAR_2 : VAR_3 . METHOD_2 ( ) ) { if ( ( VAR_2 . getValue ( ) ) == VAR_1 ) { VAR_3 . METHOD_2 ( ) . remove ( VAR_2 ) ; break ; } } }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_2 ( ) . execute ( ( ( VAR_3 ) + STRING_1 ) , VAR_4 , STRING_2 ) ; java.lang.System.out.println ( ( STRING_3 + VAR_4 ) ) ; VAR_2 . get ( ) ; VAR_5 . METHOD_2 ( VAR_6 ) ; VAR_5 . METHOD_2 ( VAR_7 ) ; } catch ( java.lang.Exception VAR_8 ) { java.lang.System.out.println ( VAR_8 . toString ( ) ) ; VAR_8 . METHOD_3 ( ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_2 ( ) . execute ( ( ( VAR_3 ) + STRING_1 ) , VAR_4 , STRING_2 , name ) ; java.lang.System.out.println ( ( STRING_3 + VAR_4 ) ) ; VAR_2 . get ( ) ; VAR_5 . METHOD_2 ( VAR_6 ) ; VAR_5 . METHOD_2 ( VAR_7 ) ; } catch ( java.lang.Exception VAR_8 ) { java.lang.System.out.println ( VAR_8 . toString ( ) ) ; VAR_8 . METHOD_3 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( android.view.View view ) { if ( VAR_1 . METHOD_2 ( ) ) { ( VAR_2 [ 0 ] ) ++ ; } android.content.Intent intent = new android.content.Intent ( METHOD_3 ( ) , VAR_3 class ) ; intent . METHOD_4 ( STRING_1 , VAR_2 [ 0 ] ) ; METHOD_5 ( intent ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { java.lang.Integer VAR_2 = 0 ; if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 ++ ; } android.content.Intent intent = new android.content.Intent ( METHOD_3 ( ) , VAR_3 class ) ; intent . METHOD_4 ( STRING_1 , VAR_2 ) ; METHOD_5 ( intent ) ; }\n"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void createFile(boolean recursive, String path, boolean directory, int columns,\n       ByteBuffer metadata, long blockSizeByte, long creationTimeMs) {\n     if (INACTIVE) {\n       return;", "fixed": "     }\n   }\n  public synchronized void createFile(boolean recursive, String path, boolean directory, int columns,\n       ByteBuffer metadata, long blockSizeByte, long creationTimeMs) {\n     if (INACTIVE) {\n       return;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"problem": "public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { for ( TYPE_2 VAR_4 : VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { if ( VAR_4 . METHOD_4 ( ) . equals ( VAR_2 ) ) { if ( ( VAR_3 == null ) || ( VAR_4 . METHOD_5 ( ) . equals ( VAR_3 ) ) ) { return true ; } } } return false ; }\n", "fixed": "public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { for ( TYPE_2 VAR_4 : VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { if ( ( ( VAR_4 . METHOD_4 ( ) . equals ( VAR_2 ) ) && ( VAR_3 == null ) ) || ( VAR_4 . METHOD_5 ( ) . equals ( VAR_3 ) ) ) { return true ; } } return false ; }\n"}
{"problem": "private static java.lang.String METHOD_1 ( ) { java.util.Random VAR_1 = new java.util.Random ( TYPE_1 . METHOD_2 ( ) ) ; int VAR_2 ; VAR_2 = VAR_1 . METHOD_3 ( VAR_3 ) ; switch ( VAR_2 ) { case 1 : VAR_4 = STRING_1 ; break ; case INT_1 : VAR_4 = STRING_2 ; break ; case INT_2 : VAR_4 = STRING_3 ; break ; case INT_3 : VAR_4 = STRING_4 ; break ; case INT_4 : VAR_4 = STRING_5 ; } return VAR_4 ; }\n", "fixed": "private static java.lang.String METHOD_1 ( ) { java.util.Random VAR_1 = new java.util.Random ( TYPE_1 . METHOD_2 ( ) ) ; int VAR_2 ; VAR_2 = VAR_1 . METHOD_3 ( VAR_3 ) ; switch ( VAR_2 ) { case 0 : VAR_4 = STRING_1 ; break ; case 1 : VAR_4 = STRING_2 ; break ; case INT_1 : VAR_4 = STRING_3 ; break ; case INT_2 : VAR_4 = STRING_4 ; break ; case INT_3 : VAR_4 = STRING_5 ; } return VAR_4 ; }\n"}
{"problem": "private byte [ ] METHOD_1 ( ) { byte [ ] VAR_1 = new byte [ 1 ] ; try { java.io.FileInputStream VAR_2 = new java.io.FileInputStream ( this . VAR_3 ) ; VAR_1 = new byte [ VAR_2 . METHOD_2 ( ) ] ; VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; } catch ( TYPE_1 VAR_4 ) { java.lang.System.out.println ( STRING_1 ) ; } catch ( java.io.IOException VAR_4 ) { java.lang.System.out.println ( STRING_2 ) ; } return VAR_1 ; }\n", "fixed": "private byte [ ] METHOD_1 ( ) { byte [ ] VAR_1 = new byte [ 1 ] ; try { java.io.FileInputStream VAR_2 = new java.io.FileInputStream ( this . VAR_3 ) ; VAR_1 = new byte [ VAR_2 . METHOD_2 ( ) ] ; VAR_2 . METHOD_3 ( VAR_1 ) ; } catch ( TYPE_1 VAR_4 ) { java.lang.System.out.println ( STRING_1 ) ; } catch ( java.io.IOException VAR_4 ) { java.lang.System.out.println ( STRING_2 ) ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "53694f29adf8c68992e1b966c86380219f438c14", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(100);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(200)"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( null ) ; VAR_2 . METHOD_2 ( null ) ; VAR_3 . METHOD_2 ( null ) ; VAR_4 = null ; VAR_5 = null ; VAR_6 = null ; VAR_7 = null ; VAR_8 = null ; if ( ( VAR_9 ) != null ) { VAR_10 = null ; VAR_11 = null ; VAR_1 = null ; VAR_2 = null ; VAR_3 = null ; VAR_12 = null ; TYPE_1 . METHOD_3 ( ) ; TYPE_2 . METHOD_3 ( ) ; TYPE_3 . METHOD_3 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { VAR_4 = null ; VAR_5 = null ; VAR_6 = null ; VAR_7 = null ; VAR_8 = null ; if ( ( VAR_9 ) != null ) { VAR_1 . METHOD_2 ( null ) ; VAR_2 . METHOD_2 ( null ) ; VAR_3 . METHOD_2 ( null ) ; VAR_10 = null ; VAR_11 = null ; VAR_1 = null ; VAR_2 = null ; VAR_3 = null ; VAR_12 = null ; TYPE_1 . METHOD_3 ( ) ; TYPE_2 . METHOD_3 ( ) ; TYPE_3 . METHOD_3 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { final java.lang.Integer VAR_1 = INT_1 ; java.lang.Object VAR_2 = new java.lang.Object ( ) { private java.lang.Integer VAR_3 = VAR_1 ; } ; TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_5 = TYPE_3 . METHOD_3 ( VAR_4 ) ; try { VAR_5 . METHOD_4 ( VAR_6 class ) ; } catch ( TYPE_4 VAR_7 ) { TYPE_5 . METHOD_5 ( VAR_7 . METHOD_6 ( ) , STRING_1 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { final java.lang.Integer VAR_1 = INT_1 ; java.lang.Object VAR_2 = new java.lang.Object ( ) { private java.lang.Integer VAR_3 = VAR_1 ; } ; TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_5 = TYPE_3 . METHOD_3 ( VAR_4 ) ; try { VAR_5 . METHOD_4 ( VAR_6 class ) ; fail ( ) ; } catch ( TYPE_4 VAR_7 ) { TYPE_5 . METHOD_5 ( VAR_7 . METHOD_6 ( ) , STRING_1 ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . info ( STRING_1 ) ; TYPE_3 VAR_4 = VAR_5 . METHOD_2 ( VAR_2 . getName ( ) ) ; TYPE_4 VAR_6 = VAR_4 . METHOD_3 ( ) ; TYPE_1 VAR_7 = new TYPE_1 ( ) ; VAR_7 . METHOD_4 ( VAR_6 ) ; VAR_7 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; VAR_8 . METHOD_7 ( VAR_7 ) ; return STRING_2 ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . info ( STRING_1 ) ; TYPE_3 VAR_4 = VAR_5 . METHOD_2 ( VAR_2 . getName ( ) ) ; TYPE_4 VAR_6 = VAR_4 . METHOD_3 ( ) ; TYPE_1 VAR_7 = new TYPE_1 ( ) ; VAR_7 . METHOD_4 ( VAR_6 ) ; VAR_7 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; return STRING_2 ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) { if ( ( ( this . get ( i ) ) - ( VAR_1 . get ( i ) ) ) < 0 ) VAR_2 . add ( 0.0 ) ; else VAR_2 . add ( ( ( this . get ( i ) ) - ( VAR_1 . get ( i ) ) ) ) ; } return VAR_2 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; for ( int i = 0 ; i < ( this . size ( ) ) ; i ++ ) { VAR_2 . add ( ( ( this . get ( i ) ) - ( VAR_1 . get ( i ) ) ) ) ; } return VAR_2 ; }\n"}
{"problem": "public static java.io.File METHOD_1 ( java.lang.String VAR_1 , java.lang.String name ) throws java.io.IOException { if ( new java.io.File ( VAR_1 ) . METHOD_2 ( ) ) { java.io.File VAR_2 = new java.io.File ( ( ( VAR_1 + STRING_1 ) + name ) ) ; if ( VAR_2 . METHOD_3 ( ) ) { return VAR_2 ; } } java.io.File VAR_3 = new java.io.File ( ( STRING_2 + name ) ) ; if ( VAR_3 . METHOD_3 ( ) ) { return VAR_3 ; } throw new java.io.IOException ( ( STRING_3 + name ) ) ; }\n", "fixed": "private static java.io.File METHOD_1 ( java.lang.String VAR_1 , java.lang.String name ) throws java.io.IOException { if ( new java.io.File ( VAR_1 ) . METHOD_2 ( ) ) { java.io.File VAR_2 = new java.io.File ( ( ( VAR_1 + STRING_1 ) + name ) ) ; if ( VAR_2 . METHOD_3 ( ) ) { return VAR_2 ; } } java.io.File VAR_3 = new java.io.File ( ( STRING_2 + name ) ) ; if ( VAR_3 . METHOD_3 ( ) ) { return VAR_3 ; } throw new java.io.IOException ( ( STRING_3 + name ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = TYPE_2 . METHOD_2 ( ( ( VAR_3 . METHOD_3 ( ) . x ) - INT_1 ) , 1 ) ; VAR_4 = TYPE_2 . METHOD_2 ( ( VAR_2 / ( VAR_5 ) ) , 1 ) ; METHOD_4 ( false , false ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = TYPE_2 . METHOD_2 ( ( ( VAR_3 . METHOD_3 ( ) . x ) - INT_1 ) , 1 ) ; VAR_4 = TYPE_2 . METHOD_2 ( ( VAR_2 / ( VAR_5 ) ) , 1 ) ; METHOD_4 ( false , false , true ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { METHOD_3 ( ) ; METHOD_4 ( STRING_1 ) ; } else { if ( ! ( METHOD_5 ( ) . METHOD_6 ( ) ) ) { METHOD_7 ( ) ; } else { METHOD_8 ( STRING_1 ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { METHOD_3 ( ) ; METHOD_4 ( STRING_1 ) ; } else { if ( ! ( METHOD_5 ( ) . METHOD_6 ( ) ) ) { METHOD_4 ( STRING_1 ) ; } else { METHOD_8 ( STRING_1 ) ; } } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_1 { switch ( VAR_3 ) { case STRING_1 : VAR_4 . METHOD_2 ( content ) ; break ; case STRING_2 : VAR_4 . METHOD_3 ( content ) ; break ; case STRING_3 : TYPE_2 VAR_5 = new TYPE_3 ( ) ; VAR_5 . METHOD_4 ( content ) ; VAR_6 . add ( VAR_5 ) ; break ; case STRING_4 : VAR_4 . METHOD_5 ( VAR_6 ) ; break ; default : } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_1 { switch ( VAR_3 ) { case STRING_1 : VAR_4 . METHOD_2 ( content ) ; break ; case STRING_2 : VAR_4 . METHOD_3 ( content ) ; break ; case STRING_3 : TYPE_2 VAR_5 = new TYPE_3 ( content ) ; VAR_6 . add ( VAR_5 ) ; break ; case STRING_4 : VAR_4 . METHOD_5 ( VAR_6 ) ; break ; default : break ; } }\n"}
{"fixCommitSHA1": "24d4f1a7133defb3bf9a8726cfb864004a5876ca", "projectName": "google.closure-compiler", "bugType": "Same Function More Args", "problem": "     try {\n       Files.write(\"\", new File(reportPath), UTF_8);\n     } catch (IOException e) {\n      compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath));\n     }\n   }", "fixed": "     try {\n       Files.write(\"\", new File(reportPath), UTF_8);\n     } catch (IOException e) {\n      compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath, e.getMessage()));\n     }\n   }", "sourceBeforeFix": "JSError.make(REPORT_PATH_IO_ERROR,reportPath)", "sourceAfterFix": "JSError.make(REPORT_PATH_IO_ERROR,reportPath,e.getMessage())"}
{"fixCommitSHA1": "2230a91829f39b72973e6fecf275d9c664911ca0", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n\t\tthrow new CompilerException(sourceName, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{", "fixed": " \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n\t\tthrow new CompilerException(sourcePath, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{", "sourceBeforeFix": "new CompilerException(sourceName,e.line,e.getCause())", "sourceAfterFix": "new CompilerException(sourcePath,e.line,e.getCause())"}
{"problem": "public static void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) || ( TYPE_1 . METHOD_3 ( ) ) ) { VAR_1 = false ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_1 ( ) ; if ( ( VAR_3 ) != null ) { try { VAR_4 = true ; VAR_3 . METHOD_5 ( ) ; } catch ( TYPE_2 VAR_5 ) { VAR_5 . METHOD_6 ( ) ; } VAR_3 = null ; } VAR_2 . METHOD_7 ( ) ; } }\n", "fixed": "public static void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) || ( TYPE_1 . METHOD_3 ( ) ) ) { VAR_1 = false ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_1 ( ) ; if ( ( VAR_3 ) != null ) { VAR_4 = true ; VAR_3 = null ; } VAR_2 . METHOD_7 ( ) ; } }\n"}
{"problem": "public void init ( ) { VAR_1 = TYPE_1 . METHOD_1 ( STRING_1 , null ) ; delete ( ) ; try { VAR_1 . METHOD_2 ( STRING_2 ) ; } catch ( java.lang.Exception VAR_2 ) { } try { VAR_1 . METHOD_2 ( STRING_3 ) ; } catch ( java.lang.Exception VAR_2 ) { } try { VAR_1 . METHOD_2 ( STRING_4 ) ; } catch ( java.lang.Exception VAR_2 ) { } }\n", "fixed": "public void init ( ) { VAR_1 = TYPE_1 . METHOD_1 ( STRING_1 , null ) ; try { VAR_1 . METHOD_2 ( STRING_2 ) ; } catch ( java.lang.Exception VAR_2 ) { } try { VAR_1 . METHOD_2 ( STRING_3 ) ; } catch ( java.lang.Exception VAR_2 ) { } try { VAR_1 . METHOD_2 ( STRING_4 ) ; } catch ( java.lang.Exception VAR_2 ) { } }\n"}
{"problem": "public void start ( ) throws java.io.IOException { java.io.BufferedReader VAR_1 = null ; TYPE_1 writer = null ; try { VAR_1 = new java.io.BufferedReader ( new TYPE_2 ( VAR_2 . METHOD_1 ( ) ) ) ; writer = new TYPE_1 ( new TYPE_3 ( VAR_2 . METHOD_2 ( ) ) ) ; METHOD_3 ( VAR_1 , writer ) ; } finally { if ( writer != null ) writer . METHOD_4 ( ) ; if ( VAR_1 != null ) VAR_1 . METHOD_4 ( ) ; } }\n", "fixed": "public void start ( ) throws java.io.IOException { java.io.BufferedReader VAR_1 = null ; TYPE_1 writer = null ; try { VAR_1 = new java.io.BufferedReader ( new TYPE_2 ( VAR_2 . METHOD_1 ( ) ) ) ; writer = new TYPE_1 ( new TYPE_3 ( VAR_2 . METHOD_2 ( ) ) ) ; METHOD_3 ( VAR_1 , writer ) ; } finally { if ( writer != null ) writer . METHOD_4 ( ) ; if ( VAR_1 != null ) VAR_1 . METHOD_4 ( ) ; VAR_2 . METHOD_4 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != ( - 1 ) ) { double value = java.lang.Double . METHOD_2 ( TYPE_1 . METHOD_3 ( java.lang.String . METHOD_2 ( VAR_3 . getText ( ) ) ) ) ; VAR_2 = - 1 ; VAR_4 = true ; VAR_5 . setText ( STRING_1 ) ; VAR_3 . setText ( java.lang.Double . toString ( value ) ) ; VAR_3 . METHOD_4 ( VAR_3 . getText ( ) . length ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != ( - 1 ) ) { double value = java.lang.Double . METHOD_2 ( METHOD_3 ( java.lang.String . METHOD_2 ( VAR_3 . getText ( ) ) ) ) ; VAR_2 = - 1 ; VAR_4 = true ; VAR_5 . setText ( STRING_1 ) ; VAR_3 . setText ( java.lang.Double . toString ( value ) ) ; VAR_3 . METHOD_4 ( VAR_3 . getText ( ) . length ( ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( ( VAR_1 ) > 0 ) && ( ( METHOD_2 ( ) ) >= INT_1 ) ) { METHOD_3 ( ) ; } if ( ( ( VAR_1 ) < 0 ) && ( ( METHOD_2 ( ) ) <= INT_2 ) ) { METHOD_3 ( ) ; } METHOD_4 ( ( ( METHOD_2 ( ) ) + ( VAR_1 ) ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ( ( VAR_1 ) > 0 ) && ( ( METHOD_2 ( ) ) >= INT_1 ) ) { METHOD_3 ( true ) ; } if ( ( ( VAR_1 ) < 0 ) && ( ( METHOD_2 ( ) ) <= INT_2 ) ) { METHOD_3 ( true ) ; } METHOD_4 ( ( ( METHOD_2 ( ) ) + ( VAR_1 ) ) ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "2e39615c5c4b283d821aa3dba607a5d6d3fd856b", "projectName": "naver.pinpoint", "bugType": "Change Modifier", "problem": "         return false;\n     }\n    private class RunnableExecuteHandler implements WorkHandler<RunnableEvent> {\n         @Override\n         public void onEvent(RunnableEvent runnableEvent) throws Exception {", "fixed": "         return false;\n     }\n    private static class RunnableExecuteHandler implements WorkHandler<RunnableEvent> {\n         @Override\n         public void onEvent(RunnableEvent runnableEvent) throws Exception {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View VAR_2 , int VAR_3 , long VAR_4 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_5 class ) ; TYPE_2 VAR_6 = new TYPE_2 ( ) ; VAR_6 . METHOD_2 ( STRING_1 , java.lang.String . METHOD_3 ( VAR_7 . get ( position ) . METHOD_4 ( ) ) ) ; intent . METHOD_5 ( VAR_6 ) ; METHOD_6 ( intent ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View VAR_2 , int VAR_3 , long VAR_4 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_5 class ) ; TYPE_2 VAR_6 = new TYPE_2 ( ) ; VAR_6 . METHOD_2 ( STRING_1 , java.lang.String . METHOD_3 ( VAR_7 . get ( VAR_3 ) . METHOD_4 ( ) ) ) ; intent . METHOD_5 ( VAR_6 ) ; METHOD_6 ( intent ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 item ) { VAR_1 . METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_2 . METHOD_3 ( ) ) ; i ++ ) { if ( VAR_2 . METHOD_4 ( i ) . equals ( item ) ) { VAR_1 . METHOD_5 ( i ) . METHOD_6 ( true ) ; } else { VAR_1 . METHOD_5 ( i ) . METHOD_6 ( false ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 item ) { VAR_1 . METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_2 . METHOD_3 ( ) ) ; i ++ ) { if ( ( VAR_1 . METHOD_5 ( i ) ) != null ) { if ( VAR_2 . METHOD_4 ( i ) . equals ( item ) ) { VAR_1 . METHOD_5 ( i ) . METHOD_6 ( true ) ; } else { VAR_1 . METHOD_5 ( i ) . METHOD_6 ( false ) ; } } } }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; VAR_1 . put ( STRING_1 , STRING_2 ) ; view . METHOD_2 ( VAR_1 , VAR_2 , response ) ; assertEquals ( STRING_2 , VAR_2 . METHOD_3 ( STRING_1 ) ) ; METHOD_4 ( VAR_3 ) . METHOD_2 ( METHOD_5 ( VAR_4 ) , METHOD_6 ( VAR_5 class ) ) ; }\n", "fixed": "public void METHOD_2 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; VAR_1 . put ( STRING_1 , STRING_2 ) ; view . METHOD_2 ( VAR_1 , VAR_2 , response ) ; assertEquals ( STRING_2 , VAR_2 . METHOD_3 ( STRING_1 ) ) ; METHOD_4 ( VAR_3 ) . METHOD_2 ( METHOD_5 ( VAR_4 ) , METHOD_6 ( VAR_5 class ) ) ; }\n"}
{"problem": "private static boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_3 VAR_2 : VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) { if ( VAR_2 instanceof TYPE_4 ) { return true ; } } return false ; }\n", "fixed": "public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_3 VAR_2 : VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) { if ( VAR_2 instanceof TYPE_4 ) { return true ; } } return false ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.util.LinkedList < TYPE_3 > list = VAR_1 . METHOD_2 ( ) ; if ( ( list . size ( ) ) == 0 ) return null ; TYPE_1 VAR_2 = new TYPE_1 ( list . get ( 0 ) ) ; TYPE_1 VAR_3 = VAR_2 ; for ( int i = 1 ; i < ( list . size ( ) ) ; i ++ ) VAR_3 = new TYPE_1 ( list . get ( i ) , VAR_3 , null ) ; return VAR_2 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.util.LinkedList < TYPE_3 > list = VAR_1 . METHOD_2 ( ) ; if ( ( list . size ( ) ) == 0 ) return null ; TYPE_1 VAR_2 = new TYPE_1 ( list . get ( 0 ) ) ; TYPE_1 VAR_3 = VAR_2 ; for ( int i = 1 ; i < ( list . size ( ) ) ; i ++ ) VAR_3 = new TYPE_1 ( list . get ( i ) , VAR_3 , null ) ; return VAR_2 ; }\n"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see NormalizableKey\n \t */\n\tpublic void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "fixed": " \t * \n* @see NormalizableKey\n \t */\n\tpublic abstract void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ) { if ( ( VAR_1 . METHOD_4 ( METHOD_3 ( ) . getName ( ) ) ) == null ) { METHOD_5 ( true ) ; } else { VAR_2 . setText ( TYPE_2 . METHOD_6 ( VAR_1 . METHOD_4 ( METHOD_3 ( ) . getName ( ) ) ) ) ; } } else { throw new TYPE_3 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ) { this . VAR_1 = VAR_1 ; if ( ( VAR_1 . METHOD_4 ( METHOD_3 ( ) . getName ( ) ) ) == null ) { METHOD_5 ( true ) ; } else { VAR_2 . setText ( TYPE_2 . METHOD_6 ( VAR_1 . METHOD_4 ( METHOD_3 ( ) . getName ( ) ) ) ) ; } } else { throw new TYPE_3 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { android.content.Intent i = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; i . METHOD_3 ( STRING_1 , VAR_3 . METHOD_4 ( position ) ) ; i . METHOD_3 ( STRING_2 , VAR_4 ) ; i . METHOD_3 ( STRING_3 , false ) ; METHOD_5 ( i ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { android.content.Intent i = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; i . METHOD_3 ( STRING_1 , VAR_3 . METHOD_4 ( position ) ) ; i . METHOD_3 ( STRING_2 , VAR_4 ) ; i . METHOD_3 ( STRING_3 , \"false\" ) ; METHOD_5 ( i ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwitterTimelineEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterTimelineEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface TwitterTimelineEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterTimelineEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_1 . METHOD_2 ( VAR_3 , VAR_2 . METHOD_3 ( ) , ( ( ( ( ( VAR_4 ) - ( VAR_5 ) ) / INT_1 ) - ( VAR_4 ) ) + ( VAR_2 . METHOD_4 ( ) ) ) , VAR_6 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , int x , int y ) { VAR_1 . METHOD_2 ( VAR_3 , x , ( ( ( ( ( VAR_4 ) - ( VAR_5 ) ) / INT_1 ) - ( VAR_4 ) ) + y ) , VAR_6 ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { if ( ( ( boolean ) ( VAR_2 ) ) ) VAR_3 . METHOD_2 ( ( ( java.lang.CharSequence ) ( METHOD_3 ( ) . getString ( VAR_4 ) ) ) ) ; else VAR_3 . METHOD_2 ( ( ( java.lang.CharSequence ) ( METHOD_3 ( ) . getString ( VAR_5 ) ) ) ) ; TYPE_2 VAR_6 = VAR_7 . METHOD_4 ( ) ; VAR_6 . METHOD_5 ( STRING_1 , ( ( boolean ) ( VAR_2 ) ) ) ; VAR_6 . METHOD_6 ( ) ; return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { if ( ( ( boolean ) ( VAR_2 ) ) ) VAR_3 . METHOD_2 ( METHOD_3 ( ) . getString ( VAR_4 ) ) ; else VAR_3 . METHOD_2 ( METHOD_3 ( ) . getString ( VAR_5 ) ) ; TYPE_2 VAR_6 = VAR_7 . METHOD_4 ( ) ; VAR_6 . METHOD_5 ( STRING_1 , ( ( boolean ) ( VAR_2 ) ) ) ; VAR_6 . METHOD_6 ( ) ; return true ; }\n"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         appendToBody.ret();\n     }\n    private void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "fixed": "         appendToBody.ret();\n     }\n    private static void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( TYPE_1 . METHOD_2 ( 0L ) , TYPE_2 . METHOD_3 ( 0L ) ) ; long VAR_1 = 0 ; for ( int VAR_2 = 0 ; VAR_2 < INT_1 ; VAR_2 ++ ) { VAR_1 |= 1L < < ( VAR_2 - 1 ) ; int VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_3 , TYPE_2 . METHOD_3 ( VAR_1 ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; } }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( TYPE_1 . METHOD_2 ( 0L ) , TYPE_2 . METHOD_3 ( 0L ) ) ; long VAR_1 = 0 ; for ( int VAR_2 = 0 ; VAR_2 < INT_1 ; VAR_2 ++ ) { VAR_1 |= 1L < < VAR_2 ; int VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_3 , TYPE_2 . METHOD_3 ( VAR_1 ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.util.List < TYPE_3 > VAR_3 = null ; TYPE_1 VAR_4 = ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_2 ( ) ; if ( null != VAR_4 ) { VAR_3 = VAR_4 . METHOD_3 ( ) ; } TYPE_4 . METHOD_4 ( VAR_2 , VAR_5 , ( VAR_3 == null ? new java.util.ArrayList < TYPE_3 > ( ) : VAR_3 ) ) ; }\n", "fixed": "private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.util.List < TYPE_3 > VAR_3 = null ; TYPE_1 VAR_4 = VAR_1 . METHOD_2 ( ) ; if ( null != VAR_4 ) { VAR_3 = VAR_4 . METHOD_3 ( ) ; } TYPE_4 . METHOD_4 ( VAR_2 , VAR_5 , ( VAR_3 == null ? new java.util.ArrayList < TYPE_3 > ( ) : VAR_3 ) ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"project": "Time", "bugId": 2, "problem": " public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\n             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n             if (i > 0) {\n                 int compare = lastUnitField.compareTo(loopUnitField);\n                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {\n                     throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                             types[i - 1].getName() + \" < \" + loopType.getName());\n                 } else if (compare == 0) {", "fixed": " public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\n             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n             if (i > 0) {\n                 int compare = lastUnitField.compareTo(loopUnitField);\n                if (compare < 0) {\n                     throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                             types[i - 1].getName() + \" < \" + loopType.getName());\n                 } else if (compare == 0) {", "observations": "", "repairActions": ["condBranIfAdd", "condExpRed", "mcAdd", "mcRem", "retBranchAdd"], "repairPatterns": ["condBlockOthersAdd", "condBlockRetAdd", "expLogicReduce", "missNullCheckP"]}
{"problem": "public boolean METHOD_1 ( ) throws java.io.IOException { METHOD_2 ( ) ; if ( ( VAR_1 ) > ( VAR_2 ) ) { return false ; } METHOD_3 ( ) ; METHOD_4 ( VAR_1 , false ) ; VAR_3 = VAR_1 ; ( VAR_1 ) ++ ; return true ; }\n", "fixed": "public boolean METHOD_1 ( ) throws java.io.IOException { METHOD_3 ( ) ; METHOD_2 ( ) ; if ( ( VAR_1 ) > ( VAR_2 ) ) { return false ; } METHOD_4 ( VAR_1 , false ) ; VAR_3 = VAR_1 ; ( VAR_1 ) ++ ; return true ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; int [ ] VAR_2 = new int [ ] { VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 } ; int VAR_11 = ( ( TYPE_3 ) ( VAR_12 ) ) . VAR_13 ; return VAR_12 . METHOD_3 ( VAR_2 [ ( VAR_11 / INT_1 ) ] ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int VAR_1 ) { int [ ] VAR_2 = new int [ ] { VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 } ; int VAR_11 = ( ( TYPE_3 ) ( VAR_12 ) ) . VAR_13 ; return VAR_12 . METHOD_3 ( VAR_2 [ ( VAR_11 / INT_1 ) ] ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.io.IOException { java.util.List < java.lang.String > errors = new java.util.ArrayList < > ( ) ; VAR_1 . METHOD_1 ( VAR_2 , VAR_3 , errors ) ; if ( ! ( errors . isEmpty ( ) ) ) { METHOD_2 ( STRING_1 , errors ) ; } }\n", "fixed": "public void METHOD_1 ( ) throws java.io.IOException { java.util.List < java.lang.String > errors = new java.util.ArrayList < > ( ) ; VAR_1 . METHOD_1 ( VAR_2 , VAR_3 , errors , errors ) ; if ( ! ( errors . isEmpty ( ) ) ) { METHOD_2 ( STRING_1 , errors ) ; } }\n"}
{"fixCommitSHA1": "0aa7873db1048c41b279e4f216e4cf2ee35d0802", "projectName": "mcxiaoke.android-volley", "bugType": "Change Identifier Used", "problem": "      * Returns the cache key for this request.  By default, this is the URL.\n      */\n     public String getCacheKey() {\n        return getUrl();\n     }\n     /**", "fixed": "      * Returns the cache key for this request.  By default, this is the URL.\n      */\n     public String getCacheKey() {\n        return getOriginUrl();\n     }\n     /**", "sourceBeforeFix": "getUrl()", "sourceAfterFix": "getOriginUrl()"}
{"problem": "public void METHOD_1 ( ) { if ( ( ( new java.util.Date ( ) . getTime ( ) ) - ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . getTime ( ) ) ) > ( VAR_1 ) ) { VAR_2 . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( ) { VAR_2 . show ( ) ; } public void METHOD_6 ( ) { super . METHOD_6 ( ) ; } } ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( TYPE_1 . size ( ) ) > 0 ) { if ( ( ( new java.util.Date ( ) . getTime ( ) ) - ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . getTime ( ) ) ) > ( VAR_1 ) ) { VAR_2 . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( ) { VAR_2 . show ( ) ; } public void METHOD_6 ( ) { super . METHOD_6 ( ) ; } } ) ; } } }\n"}
{"problem": "private static TYPE_1 METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > params , java.lang.String url , TYPE_2 VAR_1 , TYPE_3 method ) throws TYPE_4 , TYPE_5 , TYPE_6 , TYPE_7 { TYPE_1 VAR_2 = METHOD_2 ( method , url , params , VAR_3 class , VAR_1 ) ; TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; return VAR_2 ; }\n", "fixed": "private static TYPE_1 METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > params , java.lang.String url , TYPE_2 VAR_1 , TYPE_3 method ) throws TYPE_4 , TYPE_5 , TYPE_6 , TYPE_7 { TYPE_1 VAR_2 = METHOD_2 ( method , url , params , VAR_3 class , VAR_1 ) ; if ( ( ( VAR_2 . METHOD_5 ( ) ) != null ) && ( ! ( VAR_2 . METHOD_5 ( ) . isEmpty ( ) ) ) ) { TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_3 ( ) ; TYPE_4 VAR_2 = VAR_1 . METHOD_2 ( VAR_3 , new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 } ) ; TYPE_5 . assertTrue ( VAR_2 . METHOD_3 ( STRING_5 ) ) ; TYPE_5 . METHOD_4 ( VAR_2 . METHOD_5 ( STRING_5 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_3 ( ) ; TYPE_4 VAR_2 = VAR_1 . METHOD_2 ( VAR_3 , new java.lang.String [ ] { STRING_2 , STRING_3 , STRING_4 } ) ; TYPE_5 . assertTrue ( VAR_2 . METHOD_3 ( STRING_5 ) ) ; TYPE_5 . METHOD_4 ( VAR_2 . METHOD_5 ( STRING_5 ) ) ; }\n"}
{"fixCommitSHA1": "d7b19bfc78039804e5460a01e6d5939d2f4ce5f7", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    */\n   public int rmr(TachyonURI path) {\n     try {\n      mTfs.delete(mTfs.open(path));\n       System.out.println(path + \" has been removed\");\n       return 0;\n     } catch (IOException ioe) {", "fixed": "    */\n   public int rmr(TachyonURI path) {\n     try {\n      mTfs.delete(mTfs.open(path), true);\n       System.out.println(path + \" has been removed\");\n       return 0;\n     } catch (IOException ioe) {", "sourceBeforeFix": "mTfs.mkdirs(path)", "sourceAfterFix": "mTfs.mkdirs(path,true)"}
{"problem": "public static void METHOD_1 ( ) { TYPE_1 < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; TYPE_2 response = VAR_3 . METHOD_3 ( STRING_2 ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) . METHOD_6 ( ) ; TYPE_3 . assertEquals ( TYPE_4 . METHOD_7 ( ) , response . METHOD_8 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; TYPE_2 response = VAR_3 . METHOD_3 ( STRING_2 ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) . METHOD_6 ( ) ; TYPE_3 . assertEquals ( TYPE_4 . METHOD_7 ( ) , response . METHOD_8 ( ) ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( this . VAR_2 ) == VAR_1 ) { return ( ( VAR_3 ) == null ) || ( ( VAR_3 . getTime ( ) ) >= ( VAR_4 . getTime ( ) ) ) ; } else { return ( ( VAR_5 ) == null ) || ( ( VAR_5 . getTime ( ) ) >= ( VAR_4 . getTime ( ) ) ) ; } }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( this . VAR_2 . id ) == ( VAR_1 . id ) ) { return ( ( VAR_3 ) == null ) || ( ( VAR_3 . getTime ( ) ) >= ( VAR_4 . getTime ( ) ) ) ; } else { return ( ( VAR_5 ) == null ) || ( ( VAR_5 . getTime ( ) ) >= ( VAR_4 . getTime ( ) ) ) ; } }\n"}
{"problem": "public static boolean METHOD_1 ( int x ) { if ( x < 0 ) return false ; if ( ( 0 <= x ) && ( x <= INT_1 ) ) return true ; if ( ( x % INT_2 ) == 0 ) return false ; int VAR_1 = 0 ; while ( x > VAR_1 ) { VAR_1 = ( INT_2 * VAR_1 ) + ( x % INT_2 ) ; x = x / INT_2 ; } return ( x == VAR_1 ) || ( x == ( VAR_1 / INT_2 ) ) ; }\n", "fixed": "public static boolean METHOD_1 ( int x ) { if ( x < 0 ) return false ; if ( ( 0 <= x ) && ( x < INT_2 ) ) return true ; if ( ( x % INT_2 ) == 0 ) return false ; int VAR_1 = 0 ; while ( x > VAR_1 ) { VAR_1 = ( INT_2 * VAR_1 ) + ( x % INT_2 ) ; x = x / INT_2 ; } return ( x == VAR_1 ) || ( x == ( VAR_1 / INT_2 ) ) ; }\n"}
{"problem": "public static void METHOD_1 ( final TYPE_1 < TYPE_2 [ ] > VAR_1 ) { if ( TYPE_3 . METHOD_2 ( VAR_1 ) ) return ; TYPE_1 < TYPE_2 [ ] > VAR_2 = new TYPE_4 ( VAR_1 , new TYPE_5 ( ) { public void METHOD_3 ( TYPE_1 VAR_1 , java.lang.String VAR_3 ) { TYPE_6 . METHOD_4 ( VAR_3 , VAR_1 ) ; } public java.lang.Class METHOD_5 ( ) { return VAR_4 class ; } } ) ; VAR_2 . METHOD_6 ( TYPE_6 . METHOD_7 ( ) ) ; TYPE_6 . METHOD_8 ( VAR_1 ) ; }\n", "fixed": "public static void METHOD_1 ( final TYPE_1 < TYPE_2 [ ] > VAR_1 ) { if ( TYPE_3 . METHOD_2 ( VAR_1 ) ) return ; TYPE_1 < TYPE_2 [ ] > VAR_2 = new TYPE_4 ( VAR_1 , new TYPE_5 ( ) { public void METHOD_3 ( TYPE_1 VAR_1 , java.lang.String VAR_3 ) { TYPE_6 . METHOD_4 ( VAR_3 , VAR_1 ) ; } public java.lang.Class METHOD_5 ( ) { return VAR_4 class ; } } ) ; VAR_1 . METHOD_6 ( TYPE_6 . METHOD_7 ( ) ) ; TYPE_6 . METHOD_8 ( VAR_2 ) ; }\n"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * Creates new instance.\n          * @param checking should we check in current context or not.\n          */\n        public Context(boolean checking) {\n             this.checking = checking;\n             count = 0;\n         }", "fixed": "          * Creates new instance.\n          * @param checking should we check in current context or not.\n          */\n        Context(boolean checking) {\n             this.checking = checking;\n             count = 0;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"problem": "private java.lang.Long METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Long VAR_2 = null ; if ( ! ( TYPE_2 . isEmpty ( VAR_1 . METHOD_2 ( ) ) ) ) { TYPE_3 VAR_3 = VAR_1 . METHOD_3 ( ) ; TYPE_3 VAR_4 = METHOD_4 ( VAR_1 . METHOD_2 ( ) ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; METHOD_6 ( VAR_4 ) ; VAR_2 = VAR_4 . getId ( ) ; } else { VAR_5 . info ( STRING_1 , VAR_1 . METHOD_7 ( ) ) ; } return VAR_2 ; }\n", "fixed": "private java.lang.Long METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Long VAR_2 = null ; if ( ! ( TYPE_2 . isEmpty ( VAR_1 . METHOD_2 ( ) ) ) ) { TYPE_3 VAR_3 = VAR_1 . METHOD_3 ( ) ; TYPE_3 VAR_4 = METHOD_4 ( VAR_1 . METHOD_2 ( ) ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_5 ( VAR_3 ) ; METHOD_6 ( VAR_4 ) ; VAR_2 = VAR_4 . getId ( ) ; } } else { VAR_5 . info ( STRING_1 , VAR_1 . METHOD_7 ( ) ) ; } return VAR_2 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tAssert.assertTrue(paths.iterator().next().startsWith(\n\t\t\t\t(new Path(testBucket.getParent(), \".test-2.inprogress\").toString())));\n \t}\n \t@Test", "fixed": " \t\tAssert.assertTrue(paths.iterator().next().startsWith(\n\t\t\t\t(new Path(testBucket.getParent(), \".test-2.inprogress\").getPath())));\n \t}\n \t@Test", "sourceBeforeFix": "new Path(bucketPath,\"test-\" + i + '-'+ j).toString()", "sourceAfterFix": "new Path(bucketPath,\"test-\" + i + '-'+ j).getPath()"}
{"problem": "public java.lang.Void execute ( ) { TYPE_1 VAR_1 = METHOD_1 ( ) ; if ( ! ( TYPE_2 . equals ( VAR_1 . METHOD_2 ( ) ) ) ) { if ( ( METHOD_3 ( ) ) && ( METHOD_4 ( ) ) ) { METHOD_5 ( VAR_2 , VAR_1 ) ; } else if ( METHOD_3 ( ) ) { METHOD_5 ( VAR_3 , VAR_1 ) ; } else if ( METHOD_4 ( ) ) { METHOD_5 ( VAR_4 , VAR_1 ) ; } } return null ; }\n", "fixed": "public java.lang.Void execute ( ) { TYPE_1 VAR_1 = METHOD_1 ( ) ; if ( ! ( TYPE_2 . equals ( VAR_1 ) ) ) { if ( ( METHOD_3 ( ) ) && ( METHOD_4 ( ) ) ) { METHOD_5 ( VAR_2 , VAR_1 ) ; } else if ( METHOD_3 ( ) ) { METHOD_5 ( VAR_3 , VAR_1 ) ; } else if ( METHOD_4 ( ) ) { METHOD_5 ( VAR_4 , VAR_1 ) ; } } return null ; }\n"}
{"problem": "public void METHOD_1 ( ) { int VAR_1 = 0 ; for ( TYPE_1 VAR_2 : VAR_3 ) { if ( ( VAR_2 . getType ( ) ) == ( VAR_4 ) ) { ( ( TYPE_2 ) ( VAR_2 ) ) . setValue ( VAR_1 ) ; } else { VAR_1 += VAR_2 . length ( ) ; } } }\n", "fixed": "public int METHOD_1 ( ) { int VAR_1 = 0 ; for ( TYPE_1 VAR_2 : VAR_3 ) { if ( ( VAR_2 . getType ( ) ) == ( VAR_4 ) ) { ( ( TYPE_2 ) ( VAR_2 ) ) . setValue ( VAR_1 ) ; } else { VAR_1 += VAR_2 . length ( ) ; } } return VAR_1 ; }\n"}
{"problem": "public TYPE_1 add ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = get ( VAR_1 ) ; if ( VAR_2 == null ) { TYPE_2 VAR_3 = VAR_4 . build ( ) ; TYPE_3 VAR_5 = new TYPE_4 ( VAR_3 ) ; VAR_2 = VAR_5 . METHOD_1 ( VAR_1 , true ) ; VAR_6 . put ( VAR_1 , VAR_2 ) ; } return VAR_2 ; }\n", "fixed": "public TYPE_1 add ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_6 . get ( VAR_1 ) ; if ( VAR_2 == null ) { TYPE_2 VAR_3 = VAR_4 . build ( ) ; TYPE_3 VAR_5 = new TYPE_4 ( VAR_3 ) ; VAR_2 = VAR_5 . METHOD_1 ( VAR_1 , true ) ; VAR_6 . put ( VAR_1 , VAR_2 ) ; } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_4 = VAR_1 . getInt ( VAR_5 , ( - 1 ) ) ; VAR_6 = VAR_1 . getInt ( VAR_7 , ( - 1 ) ) ; METHOD_3 ( VAR_5 , VAR_4 ) ; METHOD_3 ( VAR_7 , VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_4 = VAR_1 . getInt ( VAR_5 , ( - 1 ) ) ; VAR_6 = VAR_1 . getInt ( VAR_7 , ( - 1 ) ) ; METHOD_3 ( VAR_5 , VAR_4 , false ) ; METHOD_3 ( VAR_7 , VAR_6 , false ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.Object ... VAR_1 ) { java.util.Map < java.lang.String , java.util.List < java.lang.String > > VAR_2 = ( ( java.util.Map < java.lang.String , java.util.List < java.lang.String > > ) ( VAR_1 [ 0 ] ) ) ; VAR_2 . put ( STRING_1 , java.util.Arrays.asList ( VAR_3 ) ) ; VAR_2 . put ( STRING_2 , url ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.Object ... VAR_1 ) { java.util.Map < java.lang.String , java.util.List < java.lang.String > > VAR_2 = ( ( java.util.Map < java.lang.String , java.util.List < java.lang.String > > ) ( VAR_1 [ 0 ] ) ) ; VAR_2 . put ( STRING_1 , java.util.Arrays.asList ( VAR_3 ) ) ; VAR_2 . put ( STRING_2 , java.util.Arrays.asList ( url ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String msg , TYPE_2 VAR_2 ) { VAR_3 . METHOD_2 ( STRING_1 ) ; try { METHOD_3 ( ) . METHOD_4 ( msg , VAR_1 ) ; } catch ( java.lang.Exception VAR_4 ) { try { METHOD_5 ( VAR_4 , VAR_1 ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_3 . error ( STRING_2 , msg , VAR_1 , VAR_2 ) ; VAR_3 . error ( STRING_3 , VAR_1 , VAR_5 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String msg , TYPE_2 VAR_2 ) { VAR_3 . METHOD_2 ( STRING_1 ) ; try { METHOD_3 ( ) . METHOD_4 ( msg , VAR_1 ) ; } catch ( java.lang.Exception VAR_4 ) { try { METHOD_5 ( VAR_4 , VAR_1 ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_3 . error ( STRING_2 , msg , VAR_1 ) ; VAR_3 . error ( STRING_3 , VAR_1 , VAR_5 ) ; } } }\n"}
{"problem": "public void METHOD_1 ( ) { while ( true ) { while ( ! ( VAR_1 ) ) { while ( VAR_2 ) { java.lang.System.out.println ( VAR_3 ) ; METHOD_2 ( METHOD_3 ( ) ) ; VAR_4 . METHOD_4 ( ) ; } } java.lang.Thread . METHOD_5 ( ) . METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { while ( true ) { while ( ! ( VAR_1 ) ) { java.lang.System.out.println ( VAR_3 ) ; while ( VAR_2 ) { METHOD_2 ( METHOD_3 ( ) ) ; VAR_4 . METHOD_4 ( ) ; } } java.lang.Thread . METHOD_5 ( ) . METHOD_6 ( ) ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedQuickfixjEndpointBuilder\n             extends\n                 AdvancedQuickfixjEndpointConsumerBuilder, AdvancedQuickfixjEndpointProducerBuilder {\n         default QuickfixjEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedQuickfixjEndpointBuilder\n             extends\n                 AdvancedQuickfixjEndpointConsumerBuilder, AdvancedQuickfixjEndpointProducerBuilder {\n         default QuickfixjEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDataSetEndpointBuilder\n             extends\n                 AdvancedDataSetEndpointConsumerBuilder, AdvancedDataSetEndpointProducerBuilder {\n         default DataSetEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDataSetEndpointBuilder\n             extends\n                 AdvancedDataSetEndpointConsumerBuilder, AdvancedDataSetEndpointProducerBuilder {\n         default DataSetEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "fixed": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic abstract void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static void main ( java.lang.String [ ] args ) { java.lang.Thread VAR_1 = new java.lang.Thread ( ) { public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; } } ; java.lang.Thread VAR_2 = new java.lang.Thread ( ) { public void METHOD_1 ( ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; } } ; VAR_1 . start ( ) ; VAR_2 . start ( ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { while ( true ) { java.lang.Thread VAR_1 = new java.lang.Thread ( ) { public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; } } ; java.lang.Thread VAR_2 = new java.lang.Thread ( ) { public void METHOD_1 ( ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; } } ; VAR_1 . start ( ) ; VAR_2 . start ( ) ; } }\n"}
{"problem": "public int execute ( ) { TYPE_1 x = VAR_1 . METHOD_1 ( ) ; if ( ( x . type ) == ( VAR_2 ) ) { int a = java.lang.Integer . METHOD_2 ( x . value ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 , java.lang.String . METHOD_3 ( ( - a ) ) ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; } else { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.exit ( 1 ) ; } return 0 ; }\n", "fixed": "public int execute ( ) { TYPE_1 x = VAR_1 . METHOD_1 ( ) ; if ( ( x . type ) == ( VAR_2 ) ) { int a = java.lang.Integer.parseInt ( x . value ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 , java.lang.String . METHOD_3 ( ( - a ) ) ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; } else { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.exit ( 1 ) ; } return 0 ; }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) { if ( ( args.length ) != INT_1 ) { java.lang.System.out.println ( STRING_1 ) ; return ; } VAR_1 = args [ 0 ] ; java.lang.System.out.println ( STRING_2 ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_1 ( ) ; java.lang.System.out.println ( STRING_3 ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { if ( ( args.length ) != 1 ) { java.lang.System.out.println ( STRING_1 ) ; return ; } VAR_1 = args [ 0 ] ; java.lang.System.out.println ( STRING_2 ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_1 ( ) ; java.lang.System.out.println ( STRING_3 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return VAR_3 ; case VAR_4 : return VAR_5 ; case VAR_6 : return VAR_7 ; case VAR_8 : return VAR_9 ; case VAR_10 : return VAR_11 ; case VAR_12 : return VAR_13 ; case VAR_14 : return VAR_15 ; case VAR_16 : return VAR_17 ; case VAR_18 : return VAR_19 ; case VAR_20 : return VAR_21 ; case VAR_22 : return VAR_23 ; case VAR_24 : return VAR_25 ; default : } }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return VAR_3 ; case VAR_4 : return VAR_5 ; case VAR_6 : return VAR_7 ; case VAR_8 : return VAR_9 ; case VAR_10 : return VAR_11 ; case VAR_12 : return VAR_13 ; case VAR_14 : return VAR_15 ; case VAR_16 : return VAR_17 ; case VAR_18 : return VAR_19 ; case VAR_20 : return VAR_21 ; case VAR_22 : return VAR_23 ; case VAR_24 : return VAR_25 ; default : return VAR_23 ; } }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = VAR_3 . getBoolean ( STRING_1 , false ) ; if ( VAR_2 ) { METHOD_2 ( ) . METHOD_3 ( VAR_4 , VAR_1 ) ; } else { METHOD_2 ( ) . METHOD_3 ( VAR_5 , VAR_1 ) ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_3 . getBoolean ( STRING_1 , false ) ) { METHOD_2 ( ) . METHOD_3 ( VAR_4 , VAR_1 ) ; } else { METHOD_2 ( ) . METHOD_3 ( VAR_5 , VAR_1 ) ; } return true ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 n ) { out . METHOD_2 ( n ) ; out . METHOD_2 ( ( ( ( ( n + STRING_1 ) + ( VAR_1 ) ) + STRING_1 ) + n ) ) ; out . METHOD_2 ( ( ( ( VAR_1 ) + STRING_1 ) + n ) ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 n ) { out . METHOD_2 ( n ) ; if ( ( VAR_1 ) == null ) return ; out . METHOD_2 ( ( ( ( ( n + STRING_1 ) + ( VAR_1 ) ) + STRING_1 ) + n ) ) ; out . METHOD_2 ( ( ( ( VAR_1 ) + STRING_1 ) + n ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_3 , VAR_4 , VAR_5 ) ; } METHOD_4 ( VAR_6 ) ; if ( VAR_7 ) { METHOD_2 ( VAR_3 ) ; if ( VAR_1 ) { METHOD_3 ( VAR_3 , VAR_8 , VAR_5 ) ; } METHOD_5 ( VAR_3 , VAR_9 ) ; } else { METHOD_5 ( VAR_3 , VAR_9 ) ; METHOD_2 ( VAR_3 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_3 , VAR_8 , VAR_5 ) ; } METHOD_4 ( VAR_6 ) ; if ( VAR_7 ) { METHOD_2 ( VAR_3 ) ; if ( VAR_1 ) { METHOD_3 ( VAR_3 , VAR_8 , VAR_5 ) ; } METHOD_5 ( VAR_3 , VAR_9 ) ; } else { METHOD_5 ( VAR_3 , VAR_9 ) ; METHOD_2 ( VAR_3 ) ; } }\n"}
{"problem": "public static java.lang.String METHOD_1 ( TYPE_1 file , int VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = TYPE_2 . METHOD_2 ( file , VAR_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { int index = ( new java.util.Random ( ) . METHOD_3 ( VAR_2 . size ( ) ) ) + 1 ; return VAR_2 . get ( index ) ; } else { return STRING_1 ; } }\n", "fixed": "public static java.lang.String METHOD_1 ( TYPE_1 file , int VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = TYPE_2 . METHOD_2 ( file , VAR_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { int index = new java.util.Random ( ) . METHOD_3 ( VAR_2 . size ( ) ) ; return VAR_2 . get ( index ) ; } else { return STRING_1 ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { ( ( TYPE_2 ) ( VAR_3 . METHOD_2 ( ) ) ) . METHOD_3 ( position , VAR_2 ) ; if ( ! ( VAR_4 . METHOD_4 ( ) ) ) { VAR_4 . METHOD_5 ( VAR_5 ) ; VAR_4 . METHOD_6 ( VAR_6 ) ; VAR_4 . METHOD_7 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { ( ( TYPE_2 ) ( VAR_3 . METHOD_2 ( ) ) ) . METHOD_3 ( position , VAR_2 ) ; if ( ! ( VAR_4 . METHOD_4 ( ) ) ) { VAR_4 . METHOD_5 ( VAR_5 ) ; VAR_4 . METHOD_6 ( VAR_6 ) ; } }\n"}
{"problem": "protected void METHOD_1 ( long time , boolean VAR_1 , byte VAR_2 , int VAR_3 , boolean VAR_4 ) { if ( METHOD_2 ( time , VAR_1 , VAR_3 ) ) { return ; } if ( VAR_4 ) { int VAR_5 = VAR_3 ; VAR_3 = METHOD_3 ( VAR_3 , VAR_2 ) ; if ( VAR_3 != VAR_5 ) VAR_2 &= ~ ( VAR_6 ) ; } if ( VAR_2 != 0 ) METHOD_4 ( time , VAR_1 , VAR_2 ) ; METHOD_5 ( time , VAR_1 , VAR_3 ) ; }\n", "fixed": "protected void METHOD_1 ( long time , boolean VAR_1 , byte VAR_2 , int VAR_3 , boolean VAR_4 ) { if ( METHOD_2 ( time , VAR_1 , VAR_3 ) ) { return ; } if ( VAR_4 ) { int VAR_5 = VAR_3 ; VAR_3 = METHOD_3 ( VAR_3 , VAR_1 , VAR_2 ) ; if ( VAR_3 != VAR_5 ) VAR_2 &= ~ ( VAR_6 ) ; } if ( VAR_2 != 0 ) METHOD_4 ( time , VAR_1 , VAR_2 ) ; METHOD_5 ( time , VAR_1 , VAR_3 ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 . info ( ( STRING_1 + ( METHOD_2 ( ) ) ) ) ; TYPE_2 VAR_1 = METHOD_3 ( ) ; if ( VAR_1 == null ) { VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ; } else { VAR_2 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ; } VAR_3 . setValue ( STRING_2 ) ; VAR_4 . setValue ( STRING_2 ) ; VAR_5 . setValue ( STRING_2 ) ; VAR_6 . setValue ( STRING_2 ) ; TYPE_5 . METHOD_6 ( VAR_7 ) ; }\n", "fixed": "private void METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_3 ( ) ; if ( VAR_1 == null ) { VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ; } else { VAR_2 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ; } VAR_3 . setValue ( STRING_2 ) ; VAR_4 . setValue ( STRING_2 ) ; VAR_5 . setValue ( STRING_2 ) ; VAR_6 . setValue ( STRING_2 ) ; TYPE_5 . METHOD_6 ( VAR_7 ) ; }\n"}
{"problem": "public synchronized void METHOD_1 ( final TYPE_1 VAR_1 , final long VAR_2 ) throws java.lang.Exception { VAR_3 . METHOD_2 ( ) ; if ( METHOD_3 ( VAR_1 , VAR_2 ) ) { if ( ! ( VAR_4 . METHOD_4 ( VAR_1 , false ) ) ) { METHOD_5 ( VAR_1 ) ; } METHOD_6 ( ) ; } }\n", "fixed": "public synchronized void METHOD_1 ( final TYPE_1 VAR_1 , final long VAR_2 ) throws java.lang.Exception { if ( METHOD_3 ( VAR_1 , VAR_2 ) ) { if ( ! ( VAR_4 . METHOD_4 ( VAR_1 , false ) ) ) { METHOD_5 ( VAR_1 ) ; } METHOD_6 ( ) ; } else { VAR_3 . METHOD_2 ( ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"problem": "void METHOD_1 ( ) { this . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) , METHOD_6 ( ) ) ; TYPE_1 . METHOD_7 ( new TYPE_2 ( VAR_2 ) ) ; TYPE_1 . METHOD_7 ( new TYPE_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_8 ( ) . METHOD_9 ( ) ) ) ; this . METHOD_2 ( ) . METHOD_10 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) , METHOD_11 ( ) ) ; getView ( ) . METHOD_12 ( STRING_1 ) ; }\n", "fixed": "void METHOD_1 ( ) { this . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) , METHOD_6 ( ) ) ; TYPE_1 . METHOD_7 ( new TYPE_2 ( VAR_2 ) ) ; TYPE_1 . METHOD_7 ( new TYPE_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_8 ( ) . METHOD_9 ( ) ) ) ; getView ( ) . METHOD_12 ( STRING_1 ) ; }\n"}
{"fixCommitSHA1": "c39ce11b105be36238be1cc5b406dd0037c8284c", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "      *\n      * @param resource the resource\n      */\n    public ResourceInternal(T resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }", "fixed": "      *\n      * @param resource the resource\n      */\n    public ResourceInternal(R resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }", "sourceBeforeFix": "T", "sourceAfterFix": "R"}
{"problem": "public void METHOD_1 ( ) { java.util.List < TYPE_1 > errors = TYPE_2 . METHOD_2 ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) ) ; TYPE_3 . assertThat ( errors ) . METHOD_3 ( INT_1 ) ; TYPE_3 . assertThat ( errors ) . METHOD_4 ( VAR_1 class ) ; }\n", "fixed": "public void METHOD_1 ( ) { java.util.List < TYPE_1 > errors = TYPE_2 . METHOD_2 ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) ) ; TYPE_3 . assertThat ( errors ) . METHOD_3 ( 1 ) ; TYPE_3 . assertThat ( errors ) . METHOD_4 ( VAR_1 class ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 [ 0 ] = ( java.lang.Math.random ( ) ) - FLOAT_1 ; this . VAR_2 [ 1 ] = ( java.lang.Math.random ( ) ) - FLOAT_1 ; this . VAR_2 [ INT_1 ] = ( java.lang.Math.random ( ) ) - FLOAT_1 ; this . VAR_2 = TYPE_2 . METHOD_2 ( this . VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( ) { java.lang.System.out.println ( ( ( java.lang.Math.random ( ) ) - FLOAT_1 ) ) ; this . VAR_2 [ 0 ] = ( java.lang.Math.random ( ) ) - FLOAT_1 ; this . VAR_2 [ 1 ] = ( java.lang.Math.random ( ) ) - FLOAT_1 ; this . VAR_2 [ INT_1 ] = ( java.lang.Math.random ( ) ) - FLOAT_1 ; this . VAR_2 = TYPE_2 . METHOD_2 ( this . VAR_2 ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = new TYPE_2 ( this ) ; VAR_3 . METHOD_3 ( true ) ; VAR_4 = ( ( TYPE_3 ) ( METHOD_4 ( VAR_5 ) ) ) ; VAR_6 = ( ( TYPE_4 ) ( METHOD_4 ( VAR_7 ) ) ) ; VAR_8 = new TYPE_5 ( this , null , null , 1 ) ; METHOD_5 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_4 = ( ( TYPE_3 ) ( METHOD_4 ( VAR_5 ) ) ) ; VAR_6 = ( ( TYPE_4 ) ( METHOD_4 ( VAR_7 ) ) ) ; VAR_8 = new TYPE_5 ( this , null , null , 1 ) ; METHOD_5 ( ) ; VAR_3 = new TYPE_2 ( this ) ; VAR_3 . METHOD_3 ( true ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleDriveEndpointBuilder\n             extends\n                 AdvancedGoogleDriveEndpointConsumerBuilder, AdvancedGoogleDriveEndpointProducerBuilder {\n         default GoogleDriveEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleDriveEndpointBuilder\n             extends\n                 AdvancedGoogleDriveEndpointConsumerBuilder, AdvancedGoogleDriveEndpointProducerBuilder {\n         default GoogleDriveEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( STRING_1 , \"0\" ) ; VAR_1 . METHOD_3 ( STRING_2 , VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_3 , STRING_4 ) ; try { VAR_3 = VAR_1 . build ( ) ; VAR_4 = new TYPE_2 ( VAR_3 ) ; } catch ( java.io.IOException | TYPE_3 VAR_5 ) { } }\n", "fixed": "private void METHOD_1 ( ) { try { TYPE_1 VAR_1 = METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( STRING_1 , \"0\" ) ; VAR_1 . METHOD_3 ( STRING_2 , VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_3 , STRING_4 ) ; VAR_3 = VAR_1 . build ( ) ; VAR_4 = new TYPE_2 ( VAR_3 ) ; } catch ( java.io.IOException | TYPE_3 VAR_5 ) { } }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"problem": "public static java.lang.String METHOD_1 ( java.lang.String string , TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { string = string . replaceAll ( TYPE_2 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( VAR_2 ) . getName ( ) ) ; string = string . replaceAll ( TYPE_3 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( VAR_2 ) . getColor ( ) . toString ( ) ) ; return TYPE_4 . METHOD_4 ( CHAR_1 , string ) ; }\n", "fixed": "public static java.lang.String METHOD_1 ( java.lang.String string , TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { string = string . replace ( TYPE_2 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( VAR_2 ) . getName ( ) ) ; string = string . replace ( TYPE_3 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( VAR_2 ) . getColor ( ) . toString ( ) ) ; return TYPE_4 . METHOD_4 ( CHAR_1 , string ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { execute ( STRING_1 ) ; METHOD_2 ( ) ; java.io.File VAR_1 = VAR_2 . METHOD_3 ( ) ; try ( java.io.BufferedWriter writer = new java.io.BufferedWriter ( new java.io.FileWriter ( VAR_1 ) ) ) { writer.write ( STRING_2 ) ; } catch ( java.io.IOException VAR_3 ) { throw VAR_3 ; } VAR_4 . METHOD_4 ( VAR_5 class ) ; VAR_4 . METHOD_5 ( STRING_3 ) ; execute ( STRING_4 , new java.lang.Object [ ] { VAR_1 . METHOD_6 ( ) } ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { execute ( STRING_1 ) ; METHOD_2 ( ) ; java.io.File VAR_1 = VAR_2 . METHOD_3 ( ) ; try ( java.io.BufferedWriter writer = new java.io.BufferedWriter ( new java.io.FileWriter ( VAR_1 ) ) ) { writer.write ( STRING_2 ) ; } VAR_4 . METHOD_4 ( VAR_5 class ) ; VAR_4 . METHOD_5 ( STRING_3 ) ; execute ( STRING_4 , new java.lang.Object [ ] { VAR_1 . METHOD_6 ( ) } ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) || ( ! ( METHOD_2 ( ) ) ) ) return ; VAR_1 = false ; try { METHOD_3 ( ) ; if ( VAR_2 . isEmpty ( ) ) { VAR_3 . METHOD_4 ( ) ; } } catch ( java.io.IOException VAR_4 ) { METHOD_5 ( VAR_4 , true ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) || ( ! ( METHOD_2 ( ) ) ) ) return ; VAR_1 = false ; try { METHOD_3 ( ) ; } catch ( java.io.IOException VAR_4 ) { METHOD_5 ( VAR_4 , true ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = this ; TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; int VAR_3 = VAR_2 . METHOD_3 ( ) ; int VAR_4 = ( VAR_5 ) + 1 ; java.lang.String VAR_6 = VAR_2 . METHOD_4 ( ( VAR_3 - VAR_4 ) , VAR_4 ) ; VAR_2 . METHOD_5 ( ( VAR_3 - VAR_4 ) , VAR_4 , STRING_1 ) ; VAR_1 . METHOD_6 ( ) ; VAR_7 . append ( VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = this ; TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; int VAR_3 = VAR_2 . METHOD_3 ( ) ; int VAR_4 = ( VAR_5 ) + 1 ; VAR_2 . METHOD_5 ( ( VAR_3 - VAR_4 ) , VAR_4 , STRING_1 ) ; VAR_1 . METHOD_6 ( ) ; }\n"}
{"problem": "public TYPE_1 put ( TYPE_2 key , TYPE_1 value ) { TYPE_1 VAR_1 ; if ( METHOD_1 ( key ) ) { if ( ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_2 ( key ) ) ) { VAR_1 = VAR_2 . put ( key , value ) ; } else { VAR_1 = VAR_3 . put ( key , value ) ; } return VAR_1 ; } else { throw new TYPE_3 ( ( ( STRING_1 + key ) + STRING_2 ) ) ; } }\n", "fixed": "public TYPE_1 put ( TYPE_2 key , TYPE_1 value ) { TYPE_1 VAR_1 ; if ( ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_1 ( key ) ) ) { VAR_1 = VAR_2 . put ( key , value ) ; } else if ( METHOD_1 ( key ) ) { VAR_1 = VAR_3 . put ( key , value ) ; } else { throw new TYPE_3 ( ( ( STRING_1 + key ) + STRING_2 ) ) ; } return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( context , VAR_2 class ) ; intent . METHOD_2 ( STRING_1 , TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . get ( title ) . get ( 1 ) . METHOD_5 ( ) ) ; intent . METHOD_2 ( \"id\" , STRING_2 ) ; intent . METHOD_2 ( STRING_3 , STRING_4 ) ; ( ( TYPE_2 ) ( context ) ) . METHOD_6 ( intent ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( context , VAR_2 class ) ; intent . METHOD_2 ( STRING_1 , TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . get ( title ) . get ( 1 ) . METHOD_5 ( ) ) ; intent . METHOD_2 ( \"id\" , STRING_2 ) ; intent . METHOD_2 ( STRING_3 , date ) ; ( ( TYPE_2 ) ( context ) ) . METHOD_6 ( intent ) ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"problem": "public void METHOD_1 ( final TYPE_1 response ) { if ( ( ( response . METHOD_2 ( ) ) == null ) || ( response . METHOD_2 ( ) . isEmpty ( ) ) ) { view . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } else { view . METHOD_3 ( response . METHOD_2 ( ) . toString ( ) ) ; view . METHOD_5 ( response . METHOD_6 ( ) ) ; view . METHOD_7 ( response . METHOD_6 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( final TYPE_1 response ) { if ( ( ( response == null ) || ( ( response . METHOD_2 ( ) ) == null ) ) || ( response . METHOD_2 ( ) . isEmpty ( ) ) ) { view . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } else { view . METHOD_3 ( response . METHOD_2 ( ) . toString ( ) ) ; view . METHOD_5 ( response . METHOD_6 ( ) ) ; view . METHOD_7 ( response . METHOD_6 ( ) ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { if ( ! ( METHOD_2 ( item , VAR_1 ) ) ) return false ; TYPE_3 VAR_2 = METHOD_3 ( item ) ; for ( int i = 0 ; i < ( VAR_3 . length ) ; i ++ ) { VAR_1 . remove ( VAR_3 [ i ] . name , 1 ) ; } VAR_1 . add ( VAR_2 . output , 1 ) ; return true ; }\n", "fixed": "public static boolean METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { if ( ! ( TYPE_3 . METHOD_2 ( item , VAR_1 ) ) ) return false ; TYPE_3 VAR_2 = TYPE_3 . METHOD_3 ( item ) ; for ( int i = 0 ; i < ( VAR_3 . length ) ; i ++ ) { VAR_1 . remove ( VAR_3 [ i ] . name , 1 ) ; } VAR_1 . add ( VAR_2 . output , 1 ) ; return true ; }\n"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_1 . METHOD_2 ( new java.io.File ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( METHOD_3 ( ) ) ) + STRING_3 ) ) , METHOD_4 ( ) ) ; } catch ( java.io.IOException VAR_2 ) { VAR_3 . METHOD_5 ( STRING_4 , METHOD_6 ( ) , METHOD_3 ( ) ) ; } }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_1 . METHOD_2 ( new java.io.File ( ( STRING_1 + VAR_1 ) , ( ( METHOD_3 ( ) ) + STRING_3 ) ) , METHOD_4 ( ) ) ; } catch ( java.io.IOException VAR_2 ) { VAR_3 . METHOD_5 ( STRING_4 , METHOD_6 ( ) , METHOD_3 ( ) ) ; } }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"problem": "public static void METHOD_1 ( TYPE_1 key , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( STRING_1 , key . getType ( ) . VAR_3 . METHOD_3 ( ) ) ; VAR_2 . METHOD_2 ( STRING_2 , key . getName ( ) ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; TYPE_4 VAR_4 = TYPE_4 . METHOD_5 ( ) ; VAR_1 . METHOD_6 ( VAR_4 . getId ( key ) ) ; }\n", "fixed": "public static void METHOD_1 ( TYPE_1 key , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( STRING_1 , key . getType ( ) . VAR_3 . METHOD_3 ( ) ) ; VAR_2 . METHOD_2 ( STRING_2 , key . getName ( ) ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; TYPE_4 VAR_4 = TYPE_4 . METHOD_5 ( ) ; if ( VAR_4 != null ) { VAR_1 . METHOD_6 ( VAR_4 . getId ( key ) ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String type ) { java.lang.String VAR_2 ; try { java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_4 = VAR_5 . METHOD_3 ( VAR_3 ) . getId ( ) ; java.util.List < java.util.Map < java.lang.String , java.lang.String > > out = VAR_6 . METHOD_4 ( type , VAR_4 ) ; VAR_2 = new TYPE_2 ( ) . METHOD_5 ( out ) ; } catch ( java.lang.Exception VAR_7 ) { VAR_2 = TYPE_3 . METHOD_6 ( VAR_7 ) ; } return VAR_2 ; }\n", "fixed": "public java.util.List < java.util.Map < java.lang.String , java.lang.String > > METHOD_1 ( TYPE_1 VAR_1 , java.lang.String type ) throws java.lang.Exception { java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_4 = VAR_5 . METHOD_3 ( VAR_3 ) . getId ( ) ; return VAR_6 . METHOD_4 ( type , VAR_4 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( int VAR_1 ) { int VAR_2 = VAR_3 . METHOD_2 ( ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { VAR_3 . METHOD_3 ( i ) . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_1 , INT_1 , INT_1 , INT_1 ) ) ; } VAR_4 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_1 , INT_1 , INT_1 , INT_1 ) ) ; }\n", "fixed": "private void METHOD_1 ( int VAR_1 ) { int VAR_2 = VAR_3 . METHOD_2 ( ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { VAR_3 . METHOD_3 ( i ) . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_1 , 0 , 0 , 0 ) ) ; } VAR_4 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_1 , 0 , 0 , 0 ) ) ; }\n"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeOutEdge(Object edge) {\n     N previousNode = outEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }", "fixed": "   }\n   @Override\n  public N removeOutEdge(E edge) {\n     N previousNode = outEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; field . add ( VAR_1 ) ; TYPE_3 . assertTrue ( field . METHOD_3 ( ) . contains ( VAR_1 ) ) ; TYPE_3 . METHOD_4 ( VAR_1 , field . METHOD_5 ( ) . METHOD_6 ( ) ) ; TYPE_3 . assertEquals ( INT_1 , field . METHOD_5 ( ) . size ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; field . add ( VAR_1 ) ; TYPE_3 . assertTrue ( field . METHOD_3 ( ) . contains ( VAR_1 ) ) ; TYPE_3 . assertTrue ( field . METHOD_5 ( ) . contains ( VAR_1 ) ) ; TYPE_3 . assertEquals ( INT_1 , field . METHOD_5 ( ) . size ( ) ) ; }\n"}
{"problem": "java.util.List < java.lang.String > METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = null ; if ( ( VAR_2 . node ) != null ) VAR_3 . METHOD_1 ( ) ; else { VAR_1 = new java.util.ArrayList ( ) ; VAR_1 . add ( TYPE_1 . METHOD_2 ( ) . VAR_4 ) ; } return VAR_1 ; }\n", "fixed": "java.util.List < java.lang.String > METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = null ; if ( ( VAR_2 . node ) != null ) VAR_1 = VAR_3 . METHOD_1 ( ) ; else { VAR_1 = new java.util.ArrayList ( ) ; VAR_1 . add ( TYPE_1 . METHOD_2 ( ) . VAR_4 ) ; } return VAR_1 ; }\n"}
{"problem": "protected void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { synchronized ( VAR_3 ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; TYPE_2 type = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_2 , type ) ; if ( type == ( VAR_4 ) ) { VAR_5 . put ( VAR_1 , VAR_2 ) ; METHOD_4 ( VAR_2 ) ; } else if ( type == ( VAR_6 ) ) { VAR_7 . put ( VAR_1 , VAR_2 ) ; } else { VAR_8 . put ( VAR_1 , VAR_2 ) ; } } }\n", "fixed": "protected void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { synchronized ( VAR_3 ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; TYPE_2 type = METHOD_2 ( VAR_2 ) ; if ( type == ( VAR_4 ) ) { VAR_5 . put ( VAR_1 , VAR_2 ) ; METHOD_4 ( VAR_2 ) ; } else if ( type == ( VAR_6 ) ) { VAR_7 . put ( VAR_1 , VAR_2 ) ; } else { VAR_8 . put ( VAR_1 , VAR_2 ) ; } METHOD_3 ( VAR_2 , type ) ; } }\n"}
{"problem": "public void METHOD_1 ( int position ) { java.lang.String title = STRING_1 ; switch ( position ) { case 0 : VAR_1 = true ; VAR_2 = false ; title = getString ( VAR_3 ) ; break ; case 1 : VAR_1 = false ; VAR_2 = true ; title = getString ( VAR_4 ) ; break ; } ( ( TYPE_1 ) ( getActivity ( ) ) ) . METHOD_2 ( ) . METHOD_3 ( title ) ; }\n", "fixed": "public void METHOD_1 ( int position ) { java.lang.String title = STRING_1 ; switch ( position ) { case 0 : title = getString ( VAR_3 ) ; break ; case 1 : title = getString ( VAR_4 ) ; break ; } ( ( TYPE_1 ) ( getActivity ( ) ) ) . METHOD_2 ( ) . METHOD_3 ( title ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_2 . METHOD_2 ( 1 ) ; int VAR_3 = VAR_1 . METHOD_3 ( ) . size ( ) ; VAR_1 . add ( VAR_2 ) ; VAR_1 . remove ( 1 ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) . size ( ) ) ; TYPE_3 . METHOD_4 ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_2 . METHOD_2 ( 1 ) ; int VAR_3 = VAR_1 . METHOD_3 ( ) . size ( ) ; VAR_1 . add ( VAR_2 ) ; int id = VAR_1 . METHOD_3 ( ) . get ( 0 ) . getId ( ) ; VAR_2 . METHOD_2 ( id ) ; VAR_1 . remove ( id ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) . size ( ) ) ; }\n"}
{"problem": "public int METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = new java.util.HashSet < java.lang.String > ( ) ; int count = 0 ; for ( java.lang.String VAR_3 : VAR_1 ) { if ( VAR_3 . equals ( STRING_1 ) ) continue ; else { if ( ! ( VAR_2 . contains ( VAR_3 ) ) ) { VAR_2 . add ( VAR_3 ) ; count ++ ; } } } return count ; }\n", "fixed": "public int METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = new java.util.HashSet < java.lang.String > ( ) ; int count = 0 ; for ( java.lang.String VAR_3 : VAR_1 ) { if ( ! ( VAR_2 . contains ( VAR_3 ) ) ) { VAR_2 . add ( VAR_3 ) ; count ++ ; } } return count ; }\n"}
{"problem": "public int METHOD_1 ( int position , java.lang.Integer ... VAR_1 ) { java.util.List < java.lang.Integer > VAR_2 = java.util.Arrays.asList ( VAR_1 ) ; int count = 0 ; for ( int i = 0 ; i < position ; i ++ ) { if ( ( ( VAR_3 ) && ( VAR_2 . contains ( VAR_4 . get ( i ) . METHOD_2 ( ) ) ) ) || ( VAR_2 . contains ( METHOD_3 ( i ) ) ) ) count ++ ; } return count ; }\n", "fixed": "public int METHOD_1 ( int position , java.lang.Integer ... VAR_1 ) { java.util.List < java.lang.Integer > VAR_2 = java.util.Arrays.asList ( VAR_1 ) ; int count = 0 ; for ( int i = 0 ; i < position ; i ++ ) { if ( VAR_2 . contains ( METHOD_3 ( i ) ) ) count ++ ; } return count ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String filePath , int VAR_3 ) { TYPE_2 VAR_4 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_2 , filePath , VAR_3 ) ; VAR_4 . METHOD_5 ( new TYPE_4 ( VAR_4 ) ) ; VAR_5 . METHOD_6 ( VAR_4 ) ; TYPE_3 . METHOD_2 ( ) . METHOD_7 ( VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String filePath , int VAR_3 ) { TYPE_2 VAR_4 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_2 , filePath , VAR_3 ) ; VAR_4 . METHOD_5 ( new TYPE_4 ( VAR_4 ) ) ; VAR_5 . METHOD_6 ( VAR_4 , true ) ; TYPE_3 . METHOD_2 ( ) . METHOD_7 ( VAR_4 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( b ) != null ) { VAR_2 = ( ( TYPE_2 ) ( VAR_3 . METHOD_2 ( VAR_4 ) ) ) ; java.lang.String VAR_5 = b . getString ( STRING_1 ) ; METHOD_3 ( VAR_6 ) ; VAR_2 . setText ( VAR_5 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( b ) != null ) { VAR_2 = ( ( TYPE_2 ) ( VAR_3 . METHOD_2 ( VAR_4 ) ) ) ; java.lang.String VAR_5 = b . getString ( STRING_1 ) ; VAR_2 . setText ( VAR_5 ) ; } }\n"}
{"problem": "public static boolean METHOD_1 ( java.lang.String VAR_1 ) { boolean VAR_2 = true ; try { java.lang.Double . METHOD_2 ( VAR_1 . trim ( ) ) ; java.lang.System.out.println ( STRING_1 ) ; } catch ( TYPE_1 VAR_3 ) { java.lang.System.out.println ( STRING_2 ) ; VAR_2 = false ; } catch ( java.lang.NullPointerException VAR_3 ) { VAR_2 = false ; } return VAR_2 ; }\n", "fixed": "public static boolean METHOD_1 ( java.lang.String VAR_1 ) { boolean VAR_2 = true ; try { java.lang.Double . METHOD_2 ( VAR_1 . trim ( ) ) ; } catch ( TYPE_1 VAR_3 ) { java.lang.System.out.println ( STRING_2 ) ; VAR_2 = false ; } catch ( java.lang.NullPointerException VAR_3 ) { VAR_2 = false ; } return VAR_2 ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_5 . METHOD_2 ( VAR_1 ) ; VAR_6 . METHOD_2 ( VAR_1 ) ; VAR_7 . METHOD_2 ( VAR_1 ) ; VAR_8 . METHOD_2 ( VAR_1 ) ; VAR_9 . METHOD_2 ( VAR_1 ) ; VAR_10 . METHOD_2 ( VAR_1 ) ; VAR_11 . METHOD_2 ( VAR_1 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_5 . METHOD_2 ( VAR_1 ) ; VAR_6 . METHOD_2 ( VAR_1 ) ; VAR_7 . METHOD_2 ( VAR_1 ) ; VAR_8 . METHOD_2 ( VAR_1 ) ; VAR_9 . METHOD_2 ( VAR_1 ) ; VAR_10 . METHOD_2 ( VAR_1 ) ; VAR_11 . METHOD_2 ( VAR_1 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Advanced builder for endpoint for the Azure Storage Queue Service\n      * component.\n      */\n    public static interface AdvancedQueueServiceEndpointBuilder\n             extends\n                 AdvancedQueueServiceEndpointConsumerBuilder, AdvancedQueueServiceEndpointProducerBuilder {\n         default QueueServiceEndpointBuilder basic() {", "fixed": "      * Advanced builder for endpoint for the Azure Storage Queue Service\n      * component.\n      */\n    public interface AdvancedQueueServiceEndpointBuilder\n             extends\n                 AdvancedQueueServiceEndpointConsumerBuilder, AdvancedQueueServiceEndpointProducerBuilder {\n         default QueueServiceEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private void METHOD_1 ( int VAR_1 ) { switch ( VAR_1 ) { case - 1 : VAR_2 . METHOD_2 ( true ) ; VAR_2 . METHOD_3 ( false ) ; break ; case 0 : VAR_2 . METHOD_2 ( true ) ; VAR_2 . METHOD_3 ( true ) ; break ; case 1 : VAR_2 . METHOD_2 ( false ) ; VAR_2 . METHOD_3 ( false ) ; break ; } METHOD_4 ( VAR_3 , java.lang.String . METHOD_5 ( VAR_1 ) , METHOD_6 ( VAR_1 ) ) ; }\n", "fixed": "private void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( ( VAR_1 == ( - 1 ) ) ) ; VAR_2 . METHOD_3 ( ( VAR_1 == 0 ) ) ; METHOD_4 ( VAR_3 , java.lang.String . METHOD_5 ( VAR_1 ) , METHOD_6 ( VAR_1 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { java.lang.System.out.println ( STRING_1 ) ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_2 , INT_1 , CHAR_1 ) ; VAR_1 . METHOD_2 ( INT_2 ) ; METHOD_3 ( STRING_3 ) ; java.lang.Thread . METHOD_4 ( INT_3 ) ; try { VAR_1 . METHOD_2 ( INT_2 ) ; fail ( STRING_4 ) ; } catch ( java.io.IOException VAR_2 ) { } METHOD_3 ( STRING_5 ) ; VAR_1 . METHOD_2 ( INT_2 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { java.lang.System.out.println ( STRING_1 ) ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_2 , INT_1 , CHAR_1 ) ; VAR_1 . METHOD_2 ( INT_2 ) ; METHOD_3 ( STRING_3 ) ; try { VAR_1 . METHOD_2 ( INT_2 ) ; fail ( STRING_4 ) ; } catch ( java.io.IOException VAR_2 ) { } METHOD_3 ( STRING_5 ) ; VAR_1 . METHOD_2 ( INT_2 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedWordpressEndpointBuilder\n             extends\n                 AdvancedWordpressEndpointConsumerBuilder, AdvancedWordpressEndpointProducerBuilder {\n         default WordpressEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedWordpressEndpointBuilder\n             extends\n                 AdvancedWordpressEndpointConsumerBuilder, AdvancedWordpressEndpointProducerBuilder {\n         default WordpressEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "TYPE_1 METHOD_1 ( TYPE_1 a ) { if ( a instanceof TYPE_2 ) { int VAR_1 = ( ( TYPE_2 ) ( a ) ) . METHOD_2 ( ) ; TYPE_3 VAR_2 = METHOD_3 ( ) ; TYPE_4 b = this . VAR_3 . METHOD_4 ( VAR_4 , VAR_2 , VAR_1 ) ; b . METHOD_5 ( a ) ; return b ; } return a ; }\n", "fixed": "TYPE_1 METHOD_1 ( TYPE_1 a ) { if ( a instanceof TYPE_2 ) { int VAR_1 = ( ( TYPE_2 ) ( a ) ) . METHOD_2 ( ) ; TYPE_3 VAR_2 = METHOD_3 ( ) ; TYPE_4 b = this . VAR_3 . METHOD_4 ( VAR_4 , VAR_2 , VAR_1 ) ; VAR_2 . METHOD_5 ( a ) ; return b ; } return a ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { android.content.Intent i = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; TYPE_2 VAR_3 = VAR_4 . get ( position ) ; i . METHOD_3 ( STRING_1 , TYPE_3 . METHOD_4 ( VAR_3 ) ) ; METHOD_5 ( i ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view , int position ) { TYPE_2 VAR_3 = VAR_4 . get ( position ) ; android.content.Intent i = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; i . METHOD_3 ( STRING_1 , TYPE_3 . METHOD_4 ( VAR_3 ) ) ; METHOD_5 ( i ) ; }\n"}
{"problem": "public void add ( TYPE_1 VAR_1 , double p ) throws TYPE_2 { if ( VAR_2 . METHOD_1 ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } b . add ( VAR_1 ) ; ( size ) ++ ; VAR_2 . put ( VAR_1 , new TYPE_3 ( b . METHOD_2 ( VAR_1 ) , p ) ) ; METHOD_3 ( b . METHOD_2 ( VAR_1 ) ) ; }\n", "fixed": "public void add ( TYPE_1 VAR_1 , double p ) throws TYPE_2 { if ( VAR_2 . METHOD_1 ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } b . add ( VAR_1 ) ; ( size ) ++ ; VAR_2 . put ( VAR_1 , new TYPE_3 ( b . METHOD_2 ( VAR_1 ) , p ) ) ; METHOD_3 ( ( ( size ) - 1 ) ) ; }\n"}
{"problem": "public void update ( float VAR_1 ) { METHOD_1 ( ) ; VAR_2 . update ( ) ; VAR_3 . step ( VAR_4 . METHOD_2 ( ) , INT_1 , INT_2 ) ; VAR_5 . METHOD_3 ( VAR_6 . METHOD_4 ( ) . x , VAR_6 . METHOD_4 ( ) . y ) ; VAR_7 . METHOD_5 ( VAR_6 . METHOD_4 ( ) . x , VAR_6 . METHOD_4 ( ) . y ) ; VAR_8 . update ( ) ; VAR_9 . update ( VAR_1 ) ; java.lang.System.out.println ( VAR_5 . METHOD_6 ( ) ) ; }\n", "fixed": "public void update ( float VAR_1 ) { METHOD_1 ( ) ; VAR_2 . update ( ) ; VAR_3 . step ( VAR_4 . METHOD_2 ( ) , INT_1 , INT_2 ) ; VAR_5 . METHOD_3 ( VAR_6 . METHOD_4 ( ) . x , VAR_6 . METHOD_4 ( ) . y ) ; VAR_7 . METHOD_5 ( VAR_6 . METHOD_4 ( ) . x , VAR_6 . METHOD_4 ( ) . y ) ; VAR_8 . update ( ) ; VAR_9 . update ( VAR_1 ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : android.content.Intent intent = new android.content.Intent ( VAR_2 , VAR_3 class ) ; METHOD_3 ( intent ) ; METHOD_4 ( ) ; return true ; case VAR_4 : return true ; default : return super . METHOD_1 ( item ) ; } }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : android.content.Intent intent = new android.content.Intent ( VAR_2 , VAR_3 class ) ; METHOD_3 ( intent ) ; return true ; case VAR_4 : return true ; default : return super . METHOD_1 ( item ) ; } }\n"}
{"problem": "private java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 ) { final java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_4 VAR_4 : VAR_1 ) { VAR_3 . add ( new TYPE_1 ( VAR_4 , VAR_2 . METHOD_2 ( VAR_4 . METHOD_2 ( ) ) ) ) ; } return VAR_3 ; }\n", "fixed": "private java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 ) { final java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_4 VAR_4 : VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( VAR_4 . METHOD_2 ( ) ) ) != null ) VAR_3 . add ( new TYPE_1 ( VAR_4 , VAR_2 . METHOD_2 ( VAR_4 . METHOD_2 ( ) ) ) ) ; } return VAR_3 ; }\n"}
{"problem": "private void METHOD_1 ( int VAR_1 ) { java.lang.String VAR_2 = ( VAR_1 == ( VAR_3 ) ) ? STRING_1 : STRING_2 + VAR_1 ; VAR_4 . info ( STRING_3 , VAR_2 ) ; boolean VAR_5 = true ; int VAR_6 = 0 ; do { VAR_4 . info ( STRING_4 , ( VAR_6 + 1 ) , VAR_2 ) ; this . METHOD_2 ( ) ; if ( ( ++ VAR_6 ) >= VAR_1 ) VAR_5 = false ; } while ( VAR_5 ) ; }\n", "fixed": "private void METHOD_1 ( int VAR_1 ) { java.lang.String VAR_2 = ( VAR_1 == ( VAR_3 ) ) ? STRING_1 : STRING_2 + VAR_1 ; VAR_4 . info ( STRING_3 , VAR_2 ) ; boolean VAR_5 = true ; int VAR_6 = 0 ; do { VAR_4 . info ( STRING_4 , ( VAR_6 + 1 ) , VAR_2 ) ; this . METHOD_2 ( ) ; if ( ( VAR_1 != 0 ) && ( ( ++ VAR_6 ) >= VAR_1 ) ) VAR_5 = false ; } while ( VAR_5 ) ; }\n"}
