{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "fixed": "     }\n     @Override\n    public synchronized void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1ccc740dcb588e324c33571df8d7475c09bf962a", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\ttimeoutPattern4.put(\"start\", Collections.singletonList(new Event(2, \"start\", 1.0)));\n \t\texpectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L));\n\t\texpectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L));\n \t\texpectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L));\n\t\texpectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L));\n \t\tPattern<Event, ?> pattern = Pattern.<Event>begin(\"start\").where(new SimpleCondition<Event>() {\n \t\t\tprivate static final long serialVersionUID = 7907391379273505897L;", "fixed": " \t\ttimeoutPattern4.put(\"start\", Collections.singletonList(new Event(2, \"start\", 1.0)));\n \t\texpectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L));\n\t\texpectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 12L));\n \t\texpectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L));\n\t\texpectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 12L));\n \t\tPattern<Event, ?> pattern = Pattern.<Event>begin(\"start\").where(new SimpleCondition<Event>() {\n \t\t\tprivate static final long serialVersionUID = 7907391379273505897L;", "sourceBeforeFix": "Tuple2.of(timeoutPattern4,13L)", "sourceAfterFix": "Tuple2.of(timeoutPattern4,12L)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Event_String() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         String event = Request.READONLY_EVENT;\n         byte[] request = getRequestBytes(event, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Event_String() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         String event = Request.READONLY_EVENT;\n         byte[] request = getRequestBytes(event, header);", "sourceBeforeFix": "(byte)0xff", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "783ce801bf1c82eb4cf2e55e46b15d9ef85f4349", "projectName": "pardom.ActiveAndroid", "bugType": "Change Identifier Used", "problem": " \t\tnew Delete().from(type).where(\"Id=?\", id).execute();\n \t}\n\tpublic static <T extends Model> T load(Class<? extends Model> type, long id) {\n \t\treturn new Select().from(type).where(\"Id=?\", id).executeSingle();\n \t}", "fixed": " \t\tnew Delete().from(type).where(\"Id=?\", id).execute();\n \t}\n\tpublic static <T extends Model> T load(Class<T> type, long id) {\n \t\treturn new Select().from(type).where(\"Id=?\", id).executeSingle();\n \t}", "sourceBeforeFix": "E extends Model", "sourceAfterFix": "T extends Model"}
{"fixCommitSHA1": "60ef304601539a6ed91ba9ae88c31114d4b098a6", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": "           didWriteExtensionStartElement = true;\n         }\n         xtw.writeStartElement(ACTIVITI_EXTENSIONS_PREFIX, customProperty.getName(), ACTIVITI_EXTENSIONS_NAMESPACE);\n        xtw.writeCharacters(customProperty.getSimpleValue());\n         xtw.writeEndElement();\n       }\n     }", "fixed": "           didWriteExtensionStartElement = true;\n         }\n         xtw.writeStartElement(ACTIVITI_EXTENSIONS_PREFIX, customProperty.getName(), ACTIVITI_EXTENSIONS_NAMESPACE);\n        xtw.writeCData(customProperty.getSimpleValue());\n         xtw.writeEndElement();\n       }\n     }", "sourceBeforeFix": "xtw.writeCharacters(customProperty.getSimpleValue())", "sourceAfterFix": "xtw.writeCData(customProperty.getSimpleValue())"}
