{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( int x = 0 ; x < ( VAR_2 . count ) ; x ++ ) { TYPE_1 VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 = VAR_3 . add ( ( ( VAR_4 . METHOD_3 ( ) ) - FLOAT_1 ) , 0 , ( ( VAR_4 . METHOD_3 ( ) ) - FLOAT_1 ) ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_3 , TYPE_2 . METHOD_6 ( VAR_5 ) , INT_1 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( int x = 0 ; x < ( VAR_2 . count ) ; x ++ ) { TYPE_1 VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 = VAR_3 . add ( ( ( VAR_4 . METHOD_3 ( ) ) - FLOAT_1 ) , ( ( VAR_4 . METHOD_3 ( ) ) - FLOAT_1 ) , ( ( VAR_4 . METHOD_3 ( ) ) - FLOAT_1 ) ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_3 , VAR_5 , INT_1 ) ; } }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { byte VAR_2 = VAR_1 . METHOD_2 ( ) ; short VAR_3 = ( ( short ) ( INT_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; TYPE_3 < TYPE_4 > VAR_4 = new TYPE_5 ( VAR_3 ) ; return ( VAR_2 & INT_2 ) == INT_3 ? new TYPE_6 ( VAR_4 , VAR_5 ) : new TYPE_6 ( VAR_5 , VAR_4 ) ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { byte VAR_2 = VAR_1 . METHOD_2 ( ) ; short VAR_3 = ( ( short ) ( INT_1 + ( ( VAR_1 . METHOD_2 ( ) ) & INT_2 ) ) ) ; TYPE_3 < TYPE_4 > VAR_4 = new TYPE_5 ( VAR_3 ) ; return ( VAR_2 & INT_2 ) == INT_3 ? new TYPE_6 ( VAR_4 , VAR_5 ) : new TYPE_6 ( VAR_5 , VAR_4 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n\t\tthis.container = factory.getEmbdeddedServletContainer();\nassertThat(getResponse(\"http:\n \t}", "fixed": " \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n\t\tthis.container = factory.getEmbeddedServletContainer();\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"problem": "public boolean add ( TYPE_1 p ) { if ( ( size ) < ( VAR_1 . length ) ) { VAR_1 [ size ] = new TYPE_2 ( p , size ) ; METHOD_1 ( size ) ; ( size ) ++ ; return true ; } return false ; }\n", "fixed": "private boolean add ( TYPE_1 p , int i ) { if ( ( size ) < ( VAR_1 . length ) ) { VAR_1 [ size ] = new TYPE_2 ( p , i ) ; METHOD_1 ( size ) ; ( size ) ++ ; return true ; } return false ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) || ( ! VAR_2 ) ) { VAR_3 = TYPE_2 . METHOD_3 ( VAR_1 ) ; VAR_4 . METHOD_4 ( STRING_1 , VAR_3 . get ( ) ) ; } else if ( ( VAR_3 . METHOD_2 ( ) ) && VAR_2 ) { VAR_3 = TYPE_2 . METHOD_3 ( METHOD_5 ( VAR_3 . get ( ) , VAR_1 ) ) ; VAR_4 . METHOD_4 ( STRING_2 , VAR_3 . get ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) || ( ! VAR_2 ) ) { VAR_3 = TYPE_2 . METHOD_3 ( VAR_1 ) ; VAR_4 . METHOD_4 ( STRING_1 , VAR_3 . get ( ) ) ; } else if ( VAR_3 . METHOD_2 ( ) ) { VAR_3 = TYPE_2 . METHOD_3 ( METHOD_5 ( VAR_3 . get ( ) , VAR_1 ) ) ; VAR_4 . METHOD_4 ( STRING_2 , VAR_3 . get ( ) ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.StringBuilder VAR_2 = METHOD_2 ( ) ; VAR_2 . append ( TYPE_2 . METHOD_3 ( STRING_1 , VAR_3 . METHOD_4 ( ) , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ) ; VAR_2 . append ( STRING_2 ) ; VAR_2 . append ( text ) ; VAR_2 . append ( TYPE_2 . METHOD_3 ( STRING_3 ) ) ; return VAR_2 . toString ( ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.StringBuilder VAR_2 = METHOD_2 ( ) ; VAR_2 . append ( TYPE_2 . METHOD_3 ( STRING_1 , VAR_3 . METHOD_4 ( ) , VAR_4 , VAR_6 , VAR_7 , VAR_5 ) ) ; VAR_2 . append ( STRING_2 ) ; VAR_2 . append ( text ) ; VAR_2 . append ( TYPE_2 . METHOD_3 ( STRING_3 ) ) ; return VAR_2 . toString ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { while ( ! ( java.lang.Thread . METHOD_2 ( ) ) ) { try { TYPE_1 VAR_1 = VAR_2 . METHOD_3 ( ) ; java.lang.Thread VAR_3 = new java.lang.Thread ( new TYPE_2 ( VAR_1 ) ) ; VAR_3 . start ( ) ; } catch ( java.io.IOException VAR_4 ) { VAR_5 . METHOD_4 ( VAR_6 , STRING_1 ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { while ( ! ( java.lang.Thread . METHOD_2 ( ) ) ) { try { TYPE_1 VAR_1 = VAR_2 . METHOD_3 ( ) ; java.lang.Thread VAR_3 = new java.lang.Thread ( new TYPE_2 ( VAR_1 ) ) ; VAR_3 . start ( ) ; } catch ( java.io.IOException VAR_4 ) { VAR_5 . METHOD_4 ( VAR_6 , STRING_1 , VAR_4 ) ; } } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { TYPE_2 VAR_4 = TYPE_2 . METHOD_3 ( VAR_1 ) ; VAR_2 = VAR_5 . get ( VAR_4 . METHOD_4 ( ) ) ; if ( VAR_2 == null ) { VAR_2 = VAR_6 . get ( 0 ) ; } } else { VAR_2 = VAR_6 . get ( 0 ) ; } } return VAR_2 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { TYPE_2 VAR_4 = TYPE_2 . METHOD_3 ( VAR_1 ) ; VAR_2 = VAR_5 . get ( VAR_4 . METHOD_4 ( ) . getName ( ) ) ; if ( VAR_2 == null ) { VAR_2 = VAR_6 . get ( 0 ) ; } } else { VAR_2 = VAR_6 . get ( 0 ) ; } } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 view , java.lang.String url ) { super . METHOD_1 ( view , url ) ; TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; new TYPE_3 < TYPE_1 , TYPE_4 , TYPE_4 > ( ) { protected TYPE_4 METHOD_3 ( TYPE_1 ... params ) { return METHOD_4 ( params [ 0 ] ) ; } protected void METHOD_5 ( TYPE_4 VAR_2 ) { super . METHOD_5 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; } } . execute ( VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 view , java.lang.String url ) { super . METHOD_1 ( view , url ) ; TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; new TYPE_3 < TYPE_1 , TYPE_4 , TYPE_4 > ( ) { protected TYPE_4 METHOD_3 ( TYPE_1 ... params ) { return METHOD_4 ( params [ 0 ] ) ; } protected void METHOD_5 ( TYPE_4 VAR_2 ) { super . METHOD_5 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; } } . execute ( view ) ; }\n"}
{"problem": "public static void METHOD_1 ( TYPE_1 [ ] [ ] VAR_1 , int VAR_2 , int VAR_3 ) { java.lang.System.out.println ( STRING_1 ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { for ( int j = 0 ; j < VAR_3 ; j ++ ) { java.lang.System.out.print ( ( ( VAR_1 [ i ] [ j ] . status ) + STRING_2 ) ) ; } java.lang.System.out.println ( ) ; } java.lang.System.out.println ( ) ; }\n", "fixed": "public static void METHOD_1 ( TYPE_1 [ ] [ ] VAR_1 , int VAR_2 , int VAR_3 ) { for ( int i = 0 ; i < VAR_2 ; i ++ ) { for ( int j = 0 ; j < VAR_3 ; j ++ ) { java.lang.System.out.print ( ( ( VAR_1 [ i ] [ j ] . status ) + STRING_2 ) ) ; } java.lang.System.out.println ( ) ; } java.lang.System.out.println ( ) ; }\n"}
{"fixCommitSHA1": "0d28e2c39fb2fb0b3f12716ae5cd7caef3b12b06", "projectName": "Alluxio.alluxio", "bugType": "Change Boolean Literal", "problem": "     }\n     try (LockedInodePath inodePath = mInodeTree\n         .lockFullInodePath(entry.getId(), InodeTree.LockMode.WRITE)) {\n      setAttributeInternal(inodePath, false, entry.getOpTimeMs(), options);\n     }\n   }", "fixed": "     }\n     try (LockedInodePath inodePath = mInodeTree\n         .lockFullInodePath(entry.getId(), InodeTree.LockMode.WRITE)) {\n      setAttributeInternal(inodePath, true, entry.getOpTimeMs(), options);\n     }\n   }", "sourceBeforeFix": "setAttributeInternal(inodePath,true,opTimeMs,options)", "sourceAfterFix": "setAttributeInternal(inodePath,false,opTimeMs,options)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( ( VAR_3 [ 0 ] ) == 0 ) { VAR_3 [ 0 ] = 1 ; TYPE_2 . METHOD_2 ( ) ; VAR_4 = TYPE_3 . METHOD_3 ( ) ; VAR_5 . METHOD_4 ( VAR_6 ) ; METHOD_5 ( ) ; VAR_7 = true ; } VAR_8 . METHOD_6 ( VAR_2 ) ; VAR_9 = ! ( VAR_9 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( ( VAR_3 [ 0 ] ) == 0 ) { VAR_3 [ 0 ] = 1 ; TYPE_2 . METHOD_2 ( ) ; VAR_4 = TYPE_3 . METHOD_3 ( ) ; VAR_5 . METHOD_4 ( VAR_6 ) ; METHOD_5 ( ) ; VAR_7 = true ; } VAR_8 . METHOD_6 ( VAR_2 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( this . VAR_1 ) { this . VAR_2 = this . METHOD_2 ( this . VAR_3 ) ; } else { this . VAR_2 = this . METHOD_3 ( false ) ; } this . METHOD_4 ( true ) ; }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( this . VAR_1 ) { this . VAR_2 = this . METHOD_2 ( this . VAR_3 ) ; } else { this . VAR_2 = this . METHOD_3 ( true ) ; } this . METHOD_4 ( true ) ; }\n"}
{"problem": "private static long METHOD_1 ( int size ) { long value = 0 ; for ( int i = 1 ; i <= ( size - 1 ) ; i ++ ) { value = ( ( VAR_1 ) * value ) % ( VAR_2 ) ; } return value ; }\n", "fixed": "private static long METHOD_1 ( int size ) { long value = 1 ; for ( int i = 1 ; i <= ( size - 1 ) ; i ++ ) { value = ( ( VAR_1 ) * value ) % ( VAR_2 ) ; } return value ; }\n"}
{"problem": "public void remove ( long id ) { TYPE_1 VAR_1 = VAR_2 . query ( id ) ; if ( VAR_1 != null ) { java.util.List < TYPE_1 > list = new java.util.ArrayList < > ( 1 ) ; list . add ( VAR_1 ) ; METHOD_1 ( list ) ; } }\n", "fixed": "public void remove ( long id ) { TYPE_1 VAR_1 = VAR_2 . query ( id ) ; if ( VAR_1 != null ) { java.util.List < TYPE_1 > list = new java.util.ArrayList < > ( 1 ) ; list . add ( VAR_1 ) ; remove ( list ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"problem": "public void METHOD_1 ( double VAR_1 ) { VAR_2 = true ; double VAR_3 = VAR_4 . METHOD_2 ( ( VAR_1 / ( VAR_5 ) ) ) ; int VAR_6 = ( ( int ) ( TYPE_1 . METHOD_3 ( VAR_3 ) ) ) ; java.lang.System.err.println ( ( STRING_1 + VAR_6 ) ) ; METHOD_4 ( 1 , VAR_7 , VAR_8 , 0 , VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( double VAR_1 ) { VAR_2 = true ; double VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; int VAR_6 = ( ( int ) ( TYPE_1 . METHOD_3 ( VAR_3 ) ) ) ; java.lang.System.err.println ( ( STRING_1 + VAR_6 ) ) ; METHOD_4 ( 1 , VAR_7 , VAR_8 , 0 , VAR_6 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { for ( int c = 0 ; c < ( array [ 0 ] . length ) ; c ++ ) { for ( int VAR_1 = 0 ; VAR_1 < ( array . length ) ; VAR_1 ++ ) { java.lang.System.out.print ( array [ VAR_1 ] [ c ] ) ; java.lang.System.out.print ( STRING_1 ) ; } java.lang.System.out.println ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { for ( int VAR_1 = 0 ; VAR_1 < ( array . length ) ; VAR_1 ++ ) { for ( int c = 0 ; c < ( array [ VAR_1 ] . length ) ; c ++ ) { java.lang.System.out.print ( array [ c ] [ VAR_1 ] ) ; java.lang.System.out.print ( STRING_1 ) ; } java.lang.System.out.println ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( android.view.View view ) { TYPE_1 . i ( STRING_1 , ( STRING_2 + i ) ) ; TYPE_2 . METHOD_2 ( i ) ; android.content.Intent intent = new android.content.Intent ( view . getContext ( ) , VAR_1 class ) ; context . METHOD_3 ( intent ) ; ( ( TYPE_3 ) ( view . getContext ( ) ) ) . METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { TYPE_1 . i ( STRING_1 , ( STRING_2 + i ) ) ; TYPE_2 . METHOD_2 ( i ) ; android.content.Intent intent = new android.content.Intent ( view . getContext ( ) , VAR_1 class ) ; context . METHOD_3 ( intent ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) . contains ( VAR_1 ) ) && ( ( VAR_3 ) > ( VAR_1 . METHOD_3 ( ) ) ) ) { java.util.List < TYPE_2 > VAR_4 = new java.util.LinkedList < TYPE_2 > ( VAR_5 ) ; for ( TYPE_2 VAR_6 : VAR_1 . METHOD_4 ( ) ) { if ( VAR_4 . contains ( VAR_6 ) ) { VAR_4 . remove ( VAR_6 ) ; } else { return false ; } } return true ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) . contains ( VAR_1 ) ) && ( ( VAR_3 ) >= ( VAR_1 . METHOD_3 ( ) ) ) ) { java.util.List < TYPE_2 > VAR_4 = new java.util.LinkedList < TYPE_2 > ( VAR_5 ) ; for ( TYPE_2 VAR_6 : VAR_1 . METHOD_4 ( ) ) { if ( VAR_4 . contains ( VAR_6 ) ) { VAR_4 . remove ( VAR_6 ) ; } else { return false ; } } return true ; } return false ; }\n"}
{"problem": "static java.util.Properties METHOD_1 ( java.lang.String fileName ) throws java.io.IOException { java.util.Properties VAR_1 = new java.util.Properties ( ) ; java.io.File VAR_2 = new java.io.File ( STRING_1 ) ; if ( VAR_2 . METHOD_2 ( ) ) { TYPE_1 VAR_3 = new TYPE_1 ( new java.io.FileInputStream ( STRING_1 ) , STRING_2 ) ; VAR_1 . METHOD_1 ( VAR_3 ) ; VAR_3 . METHOD_3 ( ) ; } return VAR_1 ; }\n", "fixed": "static java.util.Properties METHOD_1 ( java.lang.String fileName ) throws java.io.IOException { java.util.Properties VAR_1 = new java.util.Properties ( ) ; java.io.File VAR_2 = new java.io.File ( fileName ) ; if ( VAR_2 . METHOD_2 ( ) ) { TYPE_1 VAR_3 = new TYPE_1 ( new java.io.FileInputStream ( fileName ) , STRING_2 ) ; VAR_1 . METHOD_1 ( VAR_3 ) ; VAR_3 . METHOD_3 ( ) ; } return VAR_1 ; }\n"}
{"problem": "private static int METHOD_1 ( TYPE_1 VAR_1 ) { int number = 0 ; number += VAR_1 . METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( ) ) { number += INT_1 ; } if ( VAR_1 . METHOD_4 ( ) ) { number += INT_2 ; } if ( ( VAR_1 . METHOD_5 ( ) ) == 0 ) { number += INT_3 ; } return number ; }\n", "fixed": "private static int METHOD_1 ( TYPE_1 VAR_1 ) { int number = 0 ; number += VAR_1 . METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( ) ) { number += INT_1 ; } if ( VAR_1 . METHOD_4 ( ) ) { number += INT_2 ; } if ( ( VAR_1 . METHOD_5 ( ) ) == 1 ) { number += INT_3 ; } return number ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesNamespacesEndpointBuilder\n             extends\n                 KubernetesNamespacesEndpointConsumerBuilder, KubernetesNamespacesEndpointProducerBuilder {\n         default AdvancedKubernetesNamespacesEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesNamespacesEndpointBuilder\n             extends\n                 KubernetesNamespacesEndpointConsumerBuilder, KubernetesNamespacesEndpointProducerBuilder {\n         default AdvancedKubernetesNamespacesEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( this ) ; TYPE_3 VAR_3 = TYPE_4 . METHOD_4 ( ) ; VAR_4 = VAR_3 . METHOD_5 ( ) ; VAR_5 . setText ( VAR_3 . METHOD_6 ( ) ) ; VAR_6 . setText ( VAR_3 . getValue ( ) ) ; METHOD_7 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( this ) ; TYPE_3 VAR_3 = TYPE_4 . METHOD_4 ( ) ; VAR_4 = new java.util.ArrayList ( VAR_3 . METHOD_5 ( ) ) ; VAR_5 . setText ( VAR_3 . METHOD_6 ( ) ) ; VAR_6 . setText ( VAR_3 . getValue ( ) ) ; METHOD_7 ( ) ; }\n"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 8:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 8:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"problem": "public boolean METHOD_1 ( ) { java.net.URL url = null ; try { url = new java.net.URL ( VAR_1 . toString ( ) ) ; return ( url . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ) == 0 ; } catch ( final java.lang.Exception VAR_2 ) { } return false ; }\n", "fixed": "public boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return false ; } try { final java.net.URL url = new java.net.URL ( VAR_1 . toString ( ) ) ; return ( url . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ) == 0 ; } catch ( final java.lang.Exception VAR_2 ) { } return false ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MailEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMailEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface MailEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMailEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; if ( ( VAR_3 ) != ( - 1 ) ) { VAR_4 . METHOD_3 ( VAR_3 ) ; TYPE_1 . METHOD_4 ( VAR_5 , VAR_3 ) ; java.lang.String VAR_6 = TYPE_2 . METHOD_5 ( getActivity ( ) ) ; TYPE_1 . METHOD_6 ( getActivity ( ) , VAR_6 , VAR_3 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; if ( ( ( VAR_3 ) != ( - 1 ) ) && ( ( getActivity ( ) ) != null ) ) { VAR_4 . METHOD_3 ( VAR_3 ) ; TYPE_1 . METHOD_4 ( VAR_5 , VAR_3 ) ; java.lang.String VAR_6 = TYPE_2 . METHOD_5 ( getActivity ( ) ) ; TYPE_1 . METHOD_6 ( getActivity ( ) , VAR_6 , VAR_3 ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String output ) { java.lang.String VAR_1 ; java.lang.String VAR_2 = output . split ( \"\\n\" ) [ 1 ] ; int VAR_3 = java.lang.Integer.parseInt ( VAR_2 ) ; VAR_3 = VAR_3 - INT_1 ; if ( VAR_3 > 0 ) { METHOD_2 ( VAR_3 ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String output ) { java.lang.String VAR_1 ; java.lang.String VAR_2 = output . split ( \"\\n\" ) [ 0 ] ; int VAR_3 = java.lang.Integer.parseInt ( VAR_2 ) ; VAR_3 = VAR_3 - INT_1 ; if ( VAR_3 > 0 ) { METHOD_2 ( VAR_3 ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; int VAR_4 = java.lang.Integer.parseInt ( VAR_1 ) ; int VAR_5 = java.lang.Integer.parseInt ( VAR_1 ) ; java.lang.Integer VAR_6 = VAR_3 . METHOD_2 ( VAR_4 , VAR_5 ) . intValue ( ) ; return VAR_6 . toString ( ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; int VAR_4 = java.lang.Integer.parseInt ( VAR_1 ) ; int VAR_5 = java.lang.Integer.parseInt ( VAR_2 ) ; java.lang.Integer VAR_6 = VAR_3 . METHOD_2 ( VAR_4 , VAR_5 ) . intValue ( ) ; return VAR_6 . toString ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 y = new TYPE_1 ( INT_1 ) ; VAR_1 . METHOD_2 ( y ) ; TYPE_1 VAR_2 = VAR_1 . METHOD_3 ( INT_1 ) ; TYPE_2 . assertNotNull ( VAR_2 ) ; TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) ; TYPE_2 . assertEquals ( y . id , VAR_2 . id ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 y = new TYPE_1 ( INT_1 ) ; VAR_1 . METHOD_2 ( y ) ; TYPE_1 VAR_2 = VAR_1 . METHOD_3 ( INT_1 ) ; assertNotNull ( VAR_2 ) ; assertEquals ( VAR_3 , VAR_4 ) ; assertEquals ( y . id , VAR_2 . id ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < java.util.List < TYPE_2 > > VAR_1 , java.util.List < TYPE_2 > data ) { VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( data ) ) ; java.util.ArrayList < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 VAR_4 : VAR_5 ) { VAR_3 . add ( VAR_4 . METHOD_2 ( ) ) ; } java.util.Collections.sort ( VAR_3 ) ; VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < java.util.List < TYPE_2 > > VAR_1 , java.util.List < TYPE_2 > data ) { VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( data ) ) ; java.util.ArrayList < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 VAR_4 : VAR_2 ) { VAR_3 . add ( VAR_4 . METHOD_2 ( ) ) ; } java.util.Collections.sort ( VAR_3 ) ; VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_3 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedEhcacheEndpointBuilder\n             extends\n                 AdvancedEhcacheEndpointConsumerBuilder, AdvancedEhcacheEndpointProducerBuilder {\n         default EhcacheEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedEhcacheEndpointBuilder\n             extends\n                 AdvancedEhcacheEndpointConsumerBuilder, AdvancedEhcacheEndpointProducerBuilder {\n         default EhcacheEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 , TYPE_2 VAR_4 ) throws TYPE_3 { java.lang.String data = getString ( VAR_3 ) ; java.lang.String VAR_5 = data . substring ( 0 , INT_1 ) ; VAR_4 . METHOD_2 ( VAR_5 . METHOD_3 ( ) ) ; VAR_4 . METHOD_4 ( VAR_5 . length ( ) ) ; return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 , TYPE_2 VAR_4 ) throws TYPE_3 { java.lang.String data = getString ( VAR_3 ) ; java.lang.String VAR_5 = data . substring ( 0 , 1 ) ; VAR_4 . METHOD_2 ( VAR_5 . METHOD_3 ( ) ) ; VAR_4 . METHOD_4 ( VAR_5 . length ( ) ) ; return true ; }\n"}
{"problem": "public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; final TYPE_3 VAR_3 = VAR_1 . METHOD_3 ( ) ; if ( ( VAR_4 ) >= INT_1 ) { android.view.View VAR_5 = VAR_3 . METHOD_4 ( ) ; int VAR_6 = ( VAR_7 ) | ( VAR_8 ) ; VAR_5 . METHOD_5 ( VAR_6 ) ; } else { VAR_3 . METHOD_6 ( VAR_9 , VAR_9 ) ; } }\n", "fixed": "private static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; final TYPE_3 VAR_3 = VAR_1 . METHOD_3 ( ) ; if ( ( VAR_4 ) >= INT_1 ) { android.view.View VAR_5 = VAR_3 . METHOD_4 ( ) ; int VAR_6 = ( VAR_7 ) | ( VAR_8 ) ; VAR_5 . METHOD_5 ( VAR_6 ) ; } else { VAR_3 . METHOD_6 ( VAR_9 , VAR_9 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( view ) ) ; VAR_2 . METHOD_2 ( METHOD_3 ( ) . getColor ( VAR_3 ) ) ; VAR_2 . METHOD_4 ( FLOAT_1 ) ; VAR_2 . METHOD_5 ( VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { if ( ( VAR_1 == null ) || ( view == null ) ) { return ; } TYPE_2 VAR_2 = ( ( TYPE_2 ) ( view ) ) ; VAR_2 . METHOD_2 ( METHOD_3 ( ) . getColor ( VAR_3 ) ) ; VAR_2 . METHOD_4 ( FLOAT_1 ) ; VAR_2 . METHOD_5 ( VAR_4 ) ; }\n"}
{"fixCommitSHA1": "ac418afcea37e4f1def3780fea94c2454ab5c866", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                         reloadRequired = reloadRequired || Logging.requiresReload(attribute.getFlags());\n                     }\n                     if (restartRequired) {\n                        context.restartRequired();\n                     } else if (reloadRequired) {\n                        context.reloadRequired();\n                     }\n                 }\n                 performRollback(context, configuration, name, originalModel);", "fixed": "                         reloadRequired = reloadRequired || Logging.requiresReload(attribute.getFlags());\n                     }\n                     if (restartRequired) {\n                        context.revertRestartRequired();\n                     } else if (reloadRequired) {\n                        context.revertReloadRequired();\n                     }\n                 }\n                 performRollback(context, configuration, name, originalModel);", "sourceBeforeFix": "context.restartRequired()", "sourceAfterFix": "context.revertRestartRequired()"}
{"problem": "public int METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; int VAR_3 = ( ( int ) ( ( VAR_2 . METHOD_3 ( ) ) > > INT_1 ) ) ; int VAR_4 = ( VAR_3 / ( VAR_5 ) ) + ( VAR_6 ) ; return VAR_4 ; }\n", "fixed": "public int METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; int VAR_3 = ( ( int ) ( ( VAR_2 . METHOD_3 ( ) ) > > INT_1 ) ) ; int VAR_4 = VAR_3 / ( ( VAR_5 ) + ( VAR_6 ) ) ; return VAR_4 ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 context ) { TYPE_2 VAR_1 = context . METHOD_2 ( ) ; if ( VAR_2 . METHOD_3 ( ) ) { VAR_2 . METHOD_4 ( STRING_1 ) ; } try { VAR_3 = VAR_1 . METHOD_5 ( VAR_4 class . getName ( ) , new TYPE_3 ( ) , null ) ; } catch ( java.lang.Throwable VAR_5 ) { VAR_2 . error ( ( ( STRING_2 + STRING_3 ) + VAR_5 ) ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 context ) { TYPE_2 VAR_1 = context . METHOD_2 ( ) ; VAR_3 = VAR_1 . METHOD_5 ( VAR_4 class . getName ( ) , new TYPE_3 ( ) , null ) ; if ( VAR_2 . METHOD_3 ( ) ) { VAR_2 . METHOD_4 ( STRING_1 ) ; } }\n"}
{"problem": "public static void METHOD_1 ( java.lang.String message , double VAR_1 , double VAR_2 , double VAR_3 ) { TYPE_1 . METHOD_2 ( ) ; java.lang.System.out.println ( ( ( ( ( ( ( ( STRING_1 + message ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) + STRING_4 ) + VAR_3 ) ) ; double VAR_4 = VAR_1 - VAR_2 ; TYPE_1 . METHOD_3 ( ( VAR_1 < ( VAR_2 - ( java.lang.Math.abs ( VAR_4 ) ) ) ) ) ; }\n", "fixed": "public static void METHOD_1 ( java.lang.String message , float VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 . METHOD_2 ( ) ; java.lang.System.out.println ( ( ( ( ( ( ( ( STRING_1 + message ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) + STRING_4 ) + VAR_3 ) ) ; TYPE_1 . METHOD_3 ( ( VAR_1 < ( VAR_2 - ( java.lang.Math.abs ( VAR_3 ) ) ) ) ) ; }\n"}
{"problem": "java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = VAR_1 . split ( STRING_1 ) [ 1 ] ; java.lang.String VAR_3 = VAR_1 . split ( STRING_1 ) [ INT_1 ] . split ( STRING_2 ) [ 0 ] ; if ( VAR_2 . equals ( VAR_4 ) ) { for ( TYPE_1 VAR_5 : VAR_6 ) { if ( VAR_5 . getName ( ) . equals ( VAR_3 ) ) { return VAR_5 . getId ( ) ; } } } return null ; }\n", "fixed": "java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = VAR_1 . split ( STRING_1 ) [ 1 ] ; java.lang.String VAR_3 = VAR_1 . split ( STRING_1 ) [ INT_1 ] . split ( STRING_2 ) [ 0 ] ; for ( TYPE_1 VAR_5 : VAR_6 ) { if ( VAR_5 . getName ( ) . equals ( VAR_3 ) ) { return VAR_5 . getId ( ) ; } } return null ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( this ) ; VAR_3 = new TYPE_3 ( ) ; VAR_4 = new TYPE_4 ( this ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_5 ) ; METHOD_7 ( VAR_6 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( this ) ; VAR_3 = new TYPE_3 ( ) ; VAR_4 = new TYPE_4 ( this ) ; METHOD_5 ( ) ; METHOD_4 ( ) ; if ( VAR_1 != null ) METHOD_6 ( VAR_5 ) ; METHOD_7 ( VAR_6 ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { boolean VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 != ( VAR_3 ) ) { int VAR_4 = ( VAR_3 ) ? VAR_5 . METHOD_3 ( ) : 0 ; VAR_3 = VAR_1 ; METHOD_4 ( ) ; int VAR_6 = ( VAR_3 ) ? VAR_5 . METHOD_3 ( ) : 0 ; if ( VAR_4 > 0 ) { METHOD_5 ( 0 , VAR_4 ) ; } if ( VAR_6 > 0 ) { METHOD_6 ( 0 , VAR_6 ) ; } } }\n", "fixed": "private void METHOD_1 ( ) { boolean VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 != ( VAR_3 ) ) { int VAR_4 = ( VAR_3 ) ? VAR_5 . METHOD_3 ( ) : 0 ; VAR_3 = VAR_1 ; int VAR_6 = ( VAR_3 ) ? VAR_5 . METHOD_3 ( ) : 0 ; METHOD_4 ( ) ; if ( VAR_4 > 0 ) { METHOD_5 ( 0 , VAR_4 ) ; } if ( VAR_6 > 0 ) { METHOD_6 ( 0 , VAR_6 ) ; } } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { if ( ( results . length ) < 1 ) return VAR_1 ; java.util.List < java.lang.String > list = java.util.Arrays.asList ( results [ 0 ] . METHOD_2 ( ) ) ; if ( list . contains ( STRING_1 ) ) { return VAR_2 ; } else if ( list . contains ( STRING_2 ) ) { return VAR_3 ; } else { return VAR_1 ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { if ( ( ( results ) == null ) || ( ( results . length ) < 1 ) ) return VAR_1 ; java.util.List < java.lang.String > list = java.util.Arrays.asList ( results [ 0 ] . METHOD_2 ( ) ) ; if ( list . contains ( STRING_1 ) ) { return VAR_2 ; } else if ( list . contains ( STRING_2 ) ) { return VAR_3 ; } else { return VAR_1 ; } }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 , java.util.Vector < java.lang.Integer > VAR_2 ) { for ( java.lang.Integer VAR_3 : VAR_2 ) { TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . put ( STRING_1 , VAR_1 ) ; VAR_4 . put ( STRING_2 , VAR_3 ) ; java.lang.Long VAR_5 = VAR_6 . METHOD_2 ( STRING_3 , null , VAR_4 ) ; TYPE_2 . METHOD_3 ( STRING_4 , ( STRING_5 + VAR_5 ) ) ; } }\n", "fixed": "public void METHOD_1 ( int VAR_1 , java.util.Vector < java.lang.Integer > VAR_2 ) { for ( java.lang.Integer VAR_3 : VAR_2 ) { TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . put ( STRING_1 , VAR_1 ) ; VAR_4 . put ( STRING_2 , VAR_3 ) ; java.lang.Long VAR_5 = VAR_6 . METHOD_2 ( STRING_3 , null , VAR_4 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "98390cf27b0ce41447e0a104a8963b2cfdc20795", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \tpublic void add (boolean value1, boolean value2, boolean value3, boolean value4) {\r\n \t\tboolean[] items = this.items;\r\n\t\tif (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.75f)));\r\n \t\titems[size] = value1;\r\n \t\titems[size + 1] = value2;\r\n \t\titems[size + 2] = value3;\r", "fixed": " \tpublic void add (boolean value1, boolean value2, boolean value3, boolean value4) {\r\n \t\tboolean[] items = this.items;\r\nif (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.8f)));\n \t\titems[size] = value1;\r\n \t\titems[size + 1] = value2;\r\n \t\titems[size + 2] = value3;\r", "sourceBeforeFix": "size * 1.75f", "sourceAfterFix": "size * 1.8f"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) throws java.lang.Exception { java.lang.String VAR_4 = null ; VAR_4 = TYPE_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) . METHOD_4 ( ) ) ; java.lang.System.out.println ( ( ( ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_4 ) + STRING_4 ) ) ; return new TYPE_1 ( VAR_4 , VAR_3 . METHOD_5 ( ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) throws java.lang.Exception { java.lang.String VAR_4 = TYPE_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) . METHOD_4 ( ) ) ; java.lang.System.out.println ( ( ( ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_4 ) + STRING_4 ) ) ; return new TYPE_1 ( VAR_4 , VAR_3 . METHOD_5 ( ) ) ; }\n"}
{"project": "Math", "bugId": 18, "problem": " public FitnessFunction() {\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                res[i] = diff * x[i] + boundaries[0][i];\n             }\n             return res;\n         }", "fixed": " public FitnessFunction() {\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                res[i] = diff * x[i];\n             }\n             return res;\n         }", "observations": "", "repairActions": ["assignAdd", "assignExpChange", "condExpMod", "mcAdd", "varAdd"], "repairPatterns": ["expArithMod", "expLogicMod", "wrongComp"]}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; VAR_2 . METHOD_3 ( \"name\" , VAR_1 . name ) ; VAR_2 . METHOD_3 ( STRING_3 , VAR_4 ) ; VAR_2 . METHOD_3 ( STRING_4 , VAR_1 . info ) ; VAR_2 . METHOD_3 ( STRING_5 , VAR_5 ) ; METHOD_4 ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; VAR_2 . METHOD_3 ( \"name\" , VAR_1 . name ) ; VAR_2 . METHOD_3 ( STRING_3 , VAR_4 ) ; VAR_2 . METHOD_3 ( STRING_4 , VAR_1 . info ) ; VAR_2 . METHOD_3 ( STRING_5 , VAR_5 ) ; METHOD_4 ( VAR_2 ) ; }\n"}
{"problem": "public int METHOD_1 ( int [ ] num ) { if ( ( num . length ) == 0 ) { return 0 ; } int VAR_1 = 0 ; int VAR_2 = num [ 0 ] ; for ( int i = 1 ; i < ( num . length ) ; i ++ ) { int tmp = VAR_2 ; VAR_2 = TYPE_1 . METHOD_2 ( VAR_2 , TYPE_1 . METHOD_2 ( ( VAR_1 + ( num [ i ] ) ) , VAR_2 ) ) ; VAR_1 = tmp ; } return VAR_2 ; }\n", "fixed": "public int METHOD_1 ( int [ ] num ) { if ( ( num . length ) == 0 ) { return 0 ; } int VAR_1 = 0 ; int VAR_2 = num [ 0 ] ; for ( int i = 1 ; i < ( num . length ) ; i ++ ) { int tmp = VAR_2 ; VAR_2 = TYPE_1 . METHOD_2 ( ( VAR_1 + ( num [ i ] ) ) , VAR_2 ) ; VAR_1 = tmp ; } return VAR_2 ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_1 result = new TYPE_1 ( ) ; result . METHOD_2 ( VAR_1 . getString ( \"id\" ) . trim ( ) ) ; result . METHOD_3 ( VAR_1 . getString ( STRING_1 ) . trim ( ) ) ; result . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 . getString ( STRING_2 ) ) ) ; result . METHOD_6 ( VAR_1 . getInt ( STRING_3 ) ) ; return result ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_1 result = new TYPE_1 ( ) ; result . METHOD_2 ( VAR_1 . getString ( \"id\" ) ) ; result . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 . getString ( STRING_2 ) ) ) ; result . METHOD_6 ( VAR_1 . getInt ( STRING_3 ) ) ; return result ; }\n"}
{"fixCommitSHA1": "74f9a84ea9679e743f44a5a743b235c3266958e3", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": "  */\n @Configuration\n @ConditionalOnNotWebApplication\npublic class FreeMarkerNonWebConfiguration extends AbstractFreeMarkerConfiguration {\n\tpublic FreeMarkerNonWebConfiguration(FreeMarkerProperties properties) {\n \t\tsuper(properties);\n \t}", "fixed": "  */\n @Configuration\n @ConditionalOnNotWebApplication\nclass FreeMarkerNonWebConfiguration extends AbstractFreeMarkerConfiguration {\n\tFreeMarkerNonWebConfiguration(FreeMarkerProperties properties) {\n \t\tsuper(properties);\n \t}", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.valueOf(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "fixed": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "sourceBeforeFix": "Long.valueOf(timeout)", "sourceAfterFix": "Long.parseLong(timeout)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleCalendarStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedGoogleCalendarStreamEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleCalendarStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedGoogleCalendarStreamEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return A deep copy of this comparator instance.\n \t */\n\tpublic TypeComparator<T> duplicate();\n }", "fixed": " \t * \n \t * @return A deep copy of this comparator instance.\n \t */\n\tpublic abstract TypeComparator<T> duplicate();\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "fixed": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"problem": "public void METHOD_1 ( final TYPE_1 token , java.lang.String VAR_1 ) { if ( ! ( METHOD_2 ( VAR_1 ) ) ) { return ; } VAR_2 . METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( ) { METHOD_5 ( token , true ) ; } } ) ; }\n", "fixed": "public void METHOD_1 ( final TYPE_1 token , java.lang.String VAR_1 ) { if ( ! ( METHOD_2 ( VAR_1 , false ) ) ) { return ; } VAR_2 . METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( ) { METHOD_5 ( token , true ) ; } } ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { for ( int i = 0 ; i < ( VAR_4 . size ( ) ) ; i ++ ) { TYPE_1 VAR_5 = VAR_4 . get ( i ) ; if ( ( VAR_6 . equals ( VAR_1 ) ) && ( VAR_7 . equals ( VAR_2 ) ) ) { VAR_8 = VAR_3 ; return ; } } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { if ( VAR_1 . isEmpty ( ) ) return ; synchronized ( VAR_4 ) { for ( int i = 0 ; i < ( VAR_4 . size ( ) ) ; i ++ ) { TYPE_1 VAR_5 = VAR_4 . get ( i ) ; if ( ( VAR_6 . equals ( VAR_1 ) ) && ( VAR_7 . equals ( VAR_2 ) ) ) { VAR_8 = VAR_3 ; return ; } } } }\n"}
{"problem": "public static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , int VAR_4 , int height ) throws java.io.IOException { for ( TYPE_3 writer : TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_5 class ) ) { if ( VAR_1 . equals ( writer . METHOD_4 ( ) ) ) { writer . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 , height ) ; } } throw new java.io.IOException ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; }\n", "fixed": "public static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , int VAR_4 , int height ) throws java.io.IOException { for ( TYPE_3 writer : TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_5 class ) ) { if ( VAR_1 . equals ( writer . METHOD_4 ( ) ) ) { writer . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 , height ) ; return ; } } throw new java.io.IOException ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; }\n"}
{"problem": "public static double METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 , double VAR_2 , TYPE_2 VAR_3 , int VAR_4 ) { double VAR_5 = VAR_2 ; for ( TYPE_1 VAR_6 : VAR_1 ) { if ( ( VAR_6 . METHOD_2 ( ) ) <= VAR_4 ) { VAR_5 += VAR_6 . METHOD_3 ( ) ; } } return VAR_5 ; }\n", "fixed": "public static double METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 , double VAR_2 , TYPE_2 VAR_3 , int VAR_4 ) { double VAR_5 = 0 ; for ( TYPE_1 VAR_6 : VAR_1 ) { if ( ( VAR_6 . METHOD_2 ( ) ) <= VAR_4 ) { VAR_5 += VAR_6 . METHOD_3 ( ) ; } } return VAR_5 < VAR_2 ? VAR_2 : VAR_5 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int event ) { if ( VAR_2 ) { TYPE_2 . METHOD_2 ( this , ( ( ( VAR_3 ) + STRING_1 ) + ( VAR_4 . getId ( ) ) ) , new TYPE_3 ( ) , VAR_5 ) ; TYPE_1 VAR_6 = TYPE_1 . METHOD_3 ( VAR_7 , ( STRING_2 + ( VAR_2 ) ) , VAR_8 ) ; VAR_6 . show ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int event ) { if ( VAR_2 ) { TYPE_2 . METHOD_2 ( this , ( ( ( VAR_3 ) + STRING_1 ) + ( VAR_4 . getId ( ) ) ) , new TYPE_3 ( ) , VAR_5 ) ; TYPE_1 VAR_6 = TYPE_1 . METHOD_3 ( VAR_7 , STRING_2 , VAR_8 ) ; VAR_6 . show ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( getActivity ( ) , this , this ) ; } if ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) { VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; VAR_4 . setText ( VAR_6 ) ; } else { VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) { VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; VAR_4 . setText ( VAR_6 ) ; } else { VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String key , java.util.Set < java.lang.String > VAR_2 ) throws java.io.IOException { if ( ! ( key . equals ( VAR_1 . METHOD_2 ( ) ) ) ) { throw new java.io.IOException ( ( ( STRING_1 + key ) + STRING_2 ) ) ; } return METHOD_3 ( VAR_1 , VAR_2 ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String key , java.util.Map < java.lang.String , TYPE_1 > VAR_2 ) throws java.io.IOException { if ( ! ( key . equals ( VAR_1 . METHOD_2 ( ) ) ) ) { throw new java.io.IOException ( ( ( STRING_1 + key ) + STRING_2 ) ) ; } return METHOD_3 ( VAR_1 , VAR_2 ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = false ; int i = 0 ; while ( ( ! VAR_2 ) && ( i < ( this . VAR_3 . size ( ) ) ) ) { VAR_2 = this . VAR_3 . get ( i ) . contains ( VAR_1 ) ; if ( VAR_2 ) { this . VAR_3 . get ( i ) . remove ( VAR_1 ) ; } i ++ ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = false ; int i = 0 ; while ( i < ( this . VAR_3 . size ( ) ) ) { VAR_2 = this . VAR_3 . get ( i ) . contains ( VAR_1 ) ; if ( VAR_2 ) { this . VAR_3 . get ( i ) . remove ( VAR_1 ) ; } i ++ ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String event , java.lang.String VAR_1 ) { java.lang.String VAR_2 = this . METHOD_2 ( event , VAR_1 ) ; if ( VAR_2 == null ) { VAR_3 . info ( ( STRING_1 + VAR_1 ) ) ; VAR_2 = VAR_1 ; } TYPE_1 . METHOD_3 ( event , VAR_2 ) ; VAR_4 . METHOD_4 ( event , VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String event , java.lang.String VAR_1 ) { java.lang.String VAR_2 = this . METHOD_2 ( event , VAR_1 ) ; if ( VAR_2 == null ) { VAR_3 . info ( ( STRING_1 + VAR_1 ) ) ; VAR_2 = VAR_1 ; } TYPE_1 . METHOD_3 ( event , VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String [ ] data ) throws java.io.IOException { TYPE_1 writer = new TYPE_1 ( file ) ; writer . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( data ) . METHOD_4 ( TYPE_3 . METHOD_5 ( STRING_1 ) ) ) + STRING_2 ) ) ; writer . METHOD_6 ( ) ; writer . METHOD_7 ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String [ ] data ) throws java.io.IOException { TYPE_1 writer = new TYPE_1 ( new java.io.FileOutputStream ( file , true ) ) ; writer . append ( TYPE_2 . METHOD_3 ( data ) . METHOD_4 ( TYPE_3 . METHOD_5 ( STRING_1 ) ) ) . append ( STRING_2 ) ; writer . METHOD_2 ( ) ; writer . METHOD_7 ( ) ; }\n"}
{"problem": "private boolean METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 ) { if ( VAR_1 >= VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; } if ( VAR_3 >= VAR_4 ) { throw new TYPE_1 ( STRING_2 ) ; } if ( ( VAR_1 <= VAR_3 ) && ( VAR_4 < VAR_2 ) ) { return true ; } if ( ( VAR_1 < VAR_4 ) && ( VAR_4 <= VAR_2 ) ) { return true ; } return false ; }\n", "fixed": "private boolean METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 ) { if ( VAR_1 >= VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; } if ( VAR_3 >= VAR_4 ) { throw new TYPE_1 ( STRING_2 ) ; } if ( ( VAR_1 <= VAR_3 ) && ( VAR_3 < VAR_2 ) ) { return true ; } if ( ( VAR_1 < VAR_4 ) && ( VAR_4 <= VAR_2 ) ) { return true ; } return false ; }\n"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { VAR_1 = VAR_2 . main ; } if ( VAR_1 != ( VAR_3 ) ) { VAR_3 = VAR_1 ; VAR_4 . METHOD_2 ( VAR_5 ) ; TYPE_2 . METHOD_3 ( VAR_1 . x , ( ( ( VAR_6 . height ) - ( VAR_7 ) ) - ( VAR_1 . y ) ) , VAR_8 , VAR_7 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { VAR_1 = VAR_2 . main ; } if ( ( VAR_1 != ( VAR_3 ) ) && ( ( VAR_5 ) != null ) ) { VAR_3 = VAR_1 ; VAR_4 . METHOD_2 ( VAR_5 ) ; TYPE_2 . METHOD_3 ( VAR_1 . x , ( ( ( VAR_6 . height ) - ( VAR_7 ) ) - ( VAR_1 . y ) ) , VAR_8 , VAR_7 ) ; } }\n"}
{"fixCommitSHA1": "a0ecc248be51f8b5b518174457ac9c9875179c45", "projectName": "apache.hive", "bugType": "Change Modifier", "problem": " public class ASTNode extends CommonTree implements Node,Serializable {\n   private static final long serialVersionUID = 1L;\n  private ASTNodeOrigin origin;\n   public ASTNode() {\n   }", "fixed": " public class ASTNode extends CommonTree implements Node,Serializable {\n   private static final long serialVersionUID = 1L;\n  private transient ASTNodeOrigin origin;\n   public ASTNode() {\n   }", "sourceBeforeFix": "2", "sourceAfterFix": "130"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = new TYPE_4 ( ) { } ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; return VAR_4 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = new TYPE_4 ( ) { } ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; return VAR_4 ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.Integer VAR_1 ) { try { java.lang.String VAR_2 = TYPE_1 . METHOD_1 ( METHOD_2 ( ) , VAR_1 ) ; TYPE_2 . METHOD_3 ( context , VAR_2 ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_3 . METHOD_4 ( VAR_4 , VAR_5 ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.Integer VAR_1 ) { try { java.lang.String VAR_2 = TYPE_1 . METHOD_1 ( METHOD_2 ( ) , VAR_1 ) ; TYPE_2 . METHOD_3 ( this , VAR_2 ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_3 . METHOD_4 ( VAR_4 , VAR_5 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4c240da4e9e79317fe6f8f8d49a49aacfa0c7fd4", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "                       .put(\"created_date\", new DateTime().toString())\n                       .put(\"start\", segment.getInterval().getStart().toString())\n                       .put(\"end\", segment.getInterval().getEnd().toString())\n                      .put(\"partitioned\", (segment.getShardSpec() instanceof NoneShardSpec) ? 0 : 1)\n                       .put(\"version\", segment.getVersion())\n                       .put(\"used\", true)\n                      .put(\"payload\", mapper.writeValueAsString(segment))\n                       .build()\n               );", "fixed": "                       .put(\"created_date\", new DateTime().toString())\n                       .put(\"start\", segment.getInterval().getStart().toString())\n                       .put(\"end\", segment.getInterval().getEnd().toString())\n                      .put(\"partitioned\", (segment.getShardSpec() instanceof NoneShardSpec) ? false : true)\n                       .put(\"version\", segment.getVersion())\n                       .put(\"used\", true)\n                      .put(\"payload\", mapper.writeValueAsBytes(segment))\n                       .build()\n               );", "sourceBeforeFix": "mapper.writeValueAsString(segment)", "sourceAfterFix": "mapper.writeValueAsBytes(segment)"}
{"problem": "boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { for ( ; ( ( VAR_3 [ VAR_2 ] ) != VAR_1 ) && ( ( VAR_3 [ VAR_2 ] ) != ( - 1 ) ) ; ) { VAR_2 = VAR_4 [ VAR_3 [ VAR_2 ] ] ; TYPE_1 . assertTrue ( ( VAR_2 != ( - 1 ) ) ) ; } return ( VAR_3 [ VAR_2 ] ) == VAR_1 ; }\n", "fixed": "boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { for ( ; ( ( VAR_2 != ( - 1 ) ) && ( ( VAR_3 [ VAR_2 ] ) != VAR_1 ) ) && ( ( VAR_3 [ VAR_2 ] ) != ( - 1 ) ) ; ) { VAR_2 = VAR_4 [ VAR_3 [ VAR_2 ] ] ; } return ( VAR_2 == ( - 1 ) ) || ( ( VAR_3 [ VAR_2 ] ) == VAR_1 ) ; }\n"}
{"fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     \n    public static PkgControl load(final URI uri) throws CheckstyleException {\n         final InputStream inputStream;\n         try {\n             inputStream = uri.toURL().openStream();", "fixed": "     \n    public static ImportControl load(final URI uri) throws CheckstyleException {\n         final InputStream inputStream;\n         try {\n             inputStream = uri.toURL().openStream();", "sourceBeforeFix": "new PkgControl(pkg,regex)", "sourceAfterFix": "new ImportControl(pkg,regex)"}
{"problem": "private int METHOD_1 ( int VAR_1 ) { java.lang.String VAR_2 = java.lang.Integer.toString ( METHOD_1 ( ) ) ; try { if ( ( java.lang.Integer.parseInt ( VAR_2 ) ) < VAR_1 ) throw new TYPE_1 ( ) ; return java.lang.Integer.parseInt ( VAR_2 ) ; } catch ( TYPE_1 VAR_3 ) { out . METHOD_2 ( ( ( STRING_1 + STRING_2 ) + VAR_1 ) ) ; return METHOD_1 ( VAR_1 ) ; } }\n", "fixed": "private int METHOD_1 ( int VAR_1 ) { java.lang.String VAR_2 = java.lang.Integer.toString ( METHOD_1 ( ) ) ; try { if ( ( java.lang.Integer.parseInt ( VAR_2 ) ) < VAR_1 ) throw new TYPE_1 ( ) ; return java.lang.Integer.parseInt ( VAR_2 ) ; } catch ( TYPE_1 VAR_3 ) { out . METHOD_2 ( STRING_1 ) ; java.lang.System.out.println ( VAR_1 ) ; return METHOD_1 ( VAR_1 ) ; } }\n"}
{"problem": "private void METHOD_1 ( java.lang.Long VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) throws TYPE_3 { TYPE_4 VAR_4 = null ; try { VAR_4 = VAR_3 . METHOD_2 ( VAR_5 . METHOD_3 ( ) ) ; VAR_4 . METHOD_4 ( 1 , VAR_1 ) ; VAR_4 . METHOD_4 ( INT_1 , METHOD_5 ( VAR_2 , VAR_3 ) ) ; if ( ( VAR_4 . METHOD_6 ( ) ) != 1 ) { throw new TYPE_5 ( VAR_6 ) ; } } finally { METHOD_7 ( VAR_4 ) ; } }\n", "fixed": "private void METHOD_1 ( java.lang.Long VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) throws TYPE_3 { try ( TYPE_4 VAR_4 = VAR_3 . METHOD_2 ( VAR_5 . METHOD_3 ( ) ) ) { VAR_4 . METHOD_4 ( 1 , VAR_1 ) ; VAR_4 . METHOD_4 ( INT_1 , METHOD_5 ( VAR_2 , VAR_3 ) ) ; if ( ( VAR_4 . METHOD_6 ( ) ) != 1 ) { throw new TYPE_5 ( VAR_6 ) ; } } }\n"}
{"problem": "public < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 < TYPE_1 > VAR_1 ) { TYPE_2 < TYPE_1 > VAR_2 = VAR_1 . METHOD_2 ( VAR_3 class , this ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_2 < TYPE_1 > ( this , VAR_1 ) ; VAR_1 . METHOD_3 ( VAR_2 , VAR_4 class , this ) ; } return VAR_2 ; }\n", "fixed": "public < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 < TYPE_1 > VAR_1 ) { TYPE_2 < TYPE_1 > VAR_2 = VAR_1 . METHOD_2 ( VAR_3 class , this ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_2 < TYPE_1 > ( this , VAR_1 ) ; VAR_1 . METHOD_3 ( VAR_2 , VAR_3 class , this ) ; } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) > INT_1 ) { VAR_1 . METHOD_6 ( ) ; METHOD_7 ( ) ; VAR_2 . METHOD_8 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) >= INT_1 ) { VAR_1 . METHOD_6 ( ) ; METHOD_7 ( ) ; VAR_2 . METHOD_8 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { VAR_2 . METHOD_2 ( VAR_3 , VAR_3 ) ; TYPE_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; VAR_2 . METHOD_2 ( ( 1.0F / ( VAR_3 ) ) , ( 1.0F / ( VAR_3 ) ) ) ; VAR_2 . METHOD_3 ( ( ( java.awt.Font ) ( VAR_4 ) ) ) ; TYPE_5 . METHOD_1 ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { VAR_2 . METHOD_2 ( VAR_3 , VAR_3 ) ; TYPE_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; VAR_2 . METHOD_2 ( ( 1.0F / ( VAR_3 ) ) , ( 1.0F / ( VAR_3 ) ) ) ; TYPE_5 . METHOD_1 ( VAR_2 ) ; }\n"}
{"problem": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { try { TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; TYPE_4 . METHOD_4 ( VAR_3 ) ; TYPE_1 result = TYPE_5 . get ( VAR_3 ) ; return result ; } catch ( TYPE_6 | java.io.IOException VAR_4 ) { throw new TYPE_7 ( VAR_4 ) ; } }\n", "fixed": "private static TYPE_1 METHOD_1 ( java.lang.Object obj , java.lang.String VAR_2 ) { try { TYPE_3 VAR_3 = obj . getClass ( ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; TYPE_4 . METHOD_4 ( VAR_3 ) ; TYPE_1 result = TYPE_5 . get ( VAR_3 ) ; return result ; } catch ( TYPE_6 | java.io.IOException VAR_4 ) { throw new TYPE_7 ( VAR_4 ) ; } }\n"}
{"problem": "private void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( STRING_2 ) ; VAR_1 . METHOD_5 ( new TYPE_2 ( ) { public void METHOD_6 ( android.view.View VAR_3 ) { VAR_1 . METHOD_7 ( ) ; } } ) ; VAR_1 . show ( METHOD_8 ( ) , STRING_3 ) ; }\n", "fixed": "private void METHOD_1 ( java.lang.String message ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( message ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( STRING_2 ) ; VAR_1 . METHOD_5 ( new TYPE_2 ( ) { public void METHOD_6 ( android.view.View VAR_3 ) { VAR_1 . METHOD_7 ( ) ; } } ) ; VAR_1 . show ( METHOD_8 ( ) , STRING_3 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c32df371abcbee7ebbb77e6bf6a429d3f3f4134b", "projectName": "netty.netty", "bugType": "Change Caller in Function Call", "problem": "             tmpBuf.clear().position(index).limit(index + length);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + length) + \", maximum is \" + data.limit());\n         }\n         tmpBuf.get(dst, dstIndex, length);\n     }", "fixed": "             tmpBuf.clear().position(index).limit(index + length);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + length) + \", maximum is \" + buffer.limit());\n         }\n         tmpBuf.get(dst, dstIndex, length);\n     }", "sourceBeforeFix": "data.limit()", "sourceAfterFix": "buffer.limit()"}
{"problem": "private void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( this ) . toLowerCase ( TYPE_2 . METHOD_3 ( ) ) . equals ( VAR_1 . toLowerCase ( TYPE_2 . METHOD_3 ( ) ) ) ) ) { METHOD_4 ( ) ; METHOD_5 ( ) ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) . toLowerCase ( TYPE_2 . METHOD_3 ( ) ) . equals ( VAR_1 . toLowerCase ( TYPE_2 . METHOD_3 ( ) ) ) ) ) { METHOD_4 ( ) ; METHOD_5 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 ) ; double [ ] VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; TYPE_2 answer = VAR_4 . METHOD_4 ( VAR_2 ) ; TYPE_3 . METHOD_5 ( new double [ ] { 1 , 0 , 0 } , answer . getData ( ) , VAR_5 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 ) ; double [ ] VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; TYPE_2 answer = VAR_4 . METHOD_4 ( VAR_2 ) ; TYPE_3 . METHOD_5 ( new double [ ] { 1 , 0 , 0 , 0 } , answer . getData ( ) , VAR_5 ) ; }\n"}
{"problem": "public java.util.Date METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( STRING_1 ) ; java.lang.String VAR_2 = METHOD_2 ( STRING_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( STRING_3 ) ; java.util.Date date = null ; try { date = VAR_3 . METHOD_3 ( ( ( VAR_1 + STRING_4 ) + VAR_2 ) ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_4 ( ) ; return null ; } return date ; }\n", "fixed": "public java.util.Date METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( STRING_1 ) ; java.lang.String VAR_2 = METHOD_2 ( STRING_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( STRING_3 ) ; java.util.Date date = null ; try { date = VAR_3 . METHOD_3 ( ( ( VAR_1 + STRING_4 ) + VAR_2 ) ) ; } catch ( TYPE_2 VAR_4 ) { return null ; } return date ; }\n"}
{"problem": "private static java.lang.Object METHOD_1 ( java.lang.Object VAR_1 , java.lang.String VAR_2 ) throws TYPE_1 , TYPE_2 , TYPE_3 { if ( VAR_1 instanceof java.util.Map < ? , ? > ) { return ( ( java.util.Map < ? , ? > ) ( VAR_1 ) ) . get ( VAR_2 ) ; } else { return TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; } }\n", "fixed": "protected static java.lang.Object METHOD_1 ( java.lang.Object VAR_1 , java.lang.String VAR_2 ) throws TYPE_1 , TYPE_2 , TYPE_3 { if ( VAR_1 instanceof java.util.Map < ? , ? > ) { return ( ( java.util.Map < ? , ? > ) ( VAR_1 ) ) . get ( VAR_2 ) ; } else { return TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 . size ( ) ) == 0 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_2 ) ; } TYPE_1 VAR_5 = VAR_2 . get ( VAR_2 . size ( ) ) ; VAR_2 . remove ( VAR_2 . size ( ) ) ; return VAR_5 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 . size ( ) ) == 0 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_2 ) ; } if ( ( VAR_2 . size ( ) ) == 0 ) { return null ; } TYPE_1 VAR_5 = VAR_2 . get ( ( ( VAR_2 . size ( ) ) - 1 ) ) ; VAR_2 . remove ( ( ( VAR_2 . size ( ) ) - 1 ) ) ; return VAR_5 ; }\n"}
{"problem": "private int METHOD_1 ( int VAR_1 ) { int VAR_2 = 0 ; int [ ] VAR_3 = new int [ ] { INT_1 , INT_2 , 1 , INT_3 , INT_4 , INT_5 , INT_6 , INT_7 } ; VAR_2 = VAR_3 [ ( VAR_1 - 1 ) ] ; return VAR_2 ; }\n", "fixed": "private int METHOD_1 ( int VAR_1 ) { int VAR_2 = 0 ; int [ ] VAR_3 = new int [ ] { INT_1 , INT_2 , 1 , INT_3 , INT_4 , INT_5 , INT_6 , INT_7 } ; if ( VAR_1 != 0 ) VAR_2 = VAR_3 [ ( VAR_1 - 1 ) ] ; return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_4 . METHOD_3 ( new TYPE_3 ( getActivity ( ) , VAR_3 ) ) ; } METHOD_4 ( ( ( METHOD_5 ( ) ) + 1 ) ) ; VAR_4 . METHOD_6 ( ) ; VAR_4 . METHOD_7 ( new TYPE_4 ( this ) ) ; }\n", "fixed": "public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_4 . METHOD_3 ( new TYPE_3 ( getActivity ( ) , VAR_3 ) ) ; } METHOD_4 ( ( ( METHOD_5 ( ) ) + 1 ) ) ; VAR_4 . METHOD_6 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void update ( ) { if ( ( ( x ) + ( VAR_1 ) ) < 0 ) { x = 0 ; } else if ( ( ( x ) + ( VAR_1 ) ) > ( INT_1 - ( VAR_2 ) ) ) { x = INT_2 - ( VAR_2 ) ; } else x += VAR_1 ; if ( ( ( y ) + ( VAR_3 ) ) < INT_3 ) y += VAR_3 ; }\n", "fixed": "public void update ( ) { if ( ( ( x ) + ( VAR_1 ) ) < 0 ) { x = 0 ; } else if ( ( ( x ) + ( VAR_1 ) ) > ( INT_1 - ( VAR_2 ) ) ) { x = INT_2 - ( VAR_2 ) ; } else x += VAR_1 ; if ( ( ( y ) + ( VAR_3 ) ) < INT_3 ) y += VAR_3 ; if ( ( ( y ) + ( VAR_3 ) ) < 0 ) y = 0 ; }\n"}
{"problem": "private void METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) { if ( VAR_1 ) if ( VAR_1 ) { if ( ! ( VAR_2 . get ( ) ) ) TYPE_2 . METHOD_2 ( VAR_5 , VAR_3 ) ; VAR_2 . set ( true ) ; } else { if ( VAR_2 . get ( ) ) TYPE_2 . METHOD_2 ( VAR_5 , VAR_4 ) ; VAR_2 . set ( false ) ; } }\n", "fixed": "private void METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) { if ( VAR_1 ) { if ( ! ( VAR_2 . get ( ) ) ) TYPE_2 . METHOD_2 ( VAR_5 , VAR_3 ) ; VAR_2 . set ( true ) ; } else { if ( VAR_2 . get ( ) ) TYPE_2 . METHOD_2 ( VAR_5 , VAR_4 ) ; VAR_2 . set ( false ) ; } }\n"}
{"fixCommitSHA1": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "projectName": "hankcs.HanLP", "bugType": "Wrong Function Name", "problem": "     public static <K, V extends Comparable<V>> Map<K, V> sortMapByValue(Map<K, V> input, final boolean desc)\n     {\n         LinkedHashMap<K, V> output = new LinkedHashMap<K, V>(input.size());\n        ArrayList<Map.Entry<K, V>> entryList = new ArrayList<Map.Entry<K, V>>(input.size());\n         Collections.sort(entryList, new Comparator<Map.Entry<K, V>>()\n         {\n             public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2)", "fixed": "     public static <K, V extends Comparable<V>> Map<K, V> sortMapByValue(Map<K, V> input, final boolean desc)\n     {\n         LinkedHashMap<K, V> output = new LinkedHashMap<K, V>(input.size());\n        ArrayList<Map.Entry<K, V>> entryList = new ArrayList<Map.Entry<K, V>>(input.entrySet());\n         Collections.sort(entryList, new Comparator<Map.Entry<K, V>>()\n         {\n             public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2)", "sourceBeforeFix": "input.size()", "sourceAfterFix": "input.entrySet()"}
{"problem": "public void METHOD_1 ( ) { src = VAR_1 . METHOD_2 ( ) ; VAR_2 = VAR_3 . METHOD_3 ( ) ; VAR_4 = VAR_5 . METHOD_4 ( src ) ; VAR_6 = VAR_7 . METHOD_5 ( VAR_2 ) ; VAR_8 = new TYPE_1 < TYPE_2 > ( ) ; VAR_9 = ( VAR_10 , t ) - > { } ; }\n", "fixed": "public void METHOD_1 ( ) { src = VAR_1 . METHOD_2 ( ) ; VAR_2 = VAR_3 . METHOD_3 ( ) ; VAR_4 = VAR_5 . METHOD_4 ( src ) ; VAR_6 = VAR_7 . METHOD_5 ( VAR_2 ) ; VAR_8 = new TYPE_1 < TYPE_2 > ( ) ; VAR_9 = ( ) - > { } ; }\n"}
{"problem": "private void METHOD_1 ( ) { boolean VAR_1 = false ; while ( ! VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( true ) { VAR_1 = true ; METHOD_3 ( ) ; } else { java.lang.System.out.println ( STRING_2 ) ; } } }\n", "fixed": "private void METHOD_1 ( ) { boolean VAR_1 = false ; while ( ! VAR_1 ) { java.lang.System.out.print ( STRING_1 ) ; VAR_2 = VAR_3 . METHOD_2 ( ) ; java.lang.System.out.println ( ) ; if ( true ) { VAR_1 = true ; } else { java.lang.System.out.println ( STRING_2 ) ; } } }\n"}
{"problem": "private void METHOD_1 ( android.view.View VAR_1 , java.lang.CharSequence type , int index ) { TYPE_1 . METHOD_2 ( getContext ( ) , ( STRING_1 + type ) , VAR_2 ) . show ( ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_3 ( type , index ) ; TYPE_3 VAR_4 = METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) . METHOD_6 ( null ) . METHOD_7 ( VAR_5 ) . replace ( VAR_6 , VAR_3 , VAR_7 ) . commit ( ) ; }\n", "fixed": "private void METHOD_1 ( android.view.View VAR_1 , java.lang.CharSequence type , int index ) { TYPE_2 VAR_3 = TYPE_2 . METHOD_3 ( type , index ) ; TYPE_3 VAR_4 = METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) . METHOD_6 ( null ) . METHOD_7 ( VAR_5 ) . replace ( VAR_6 , VAR_3 , VAR_7 ) . commit ( ) ; }\n"}
{"problem": "public int METHOD_1 ( ) { int VAR_1 = VAR_2 ; TYPE_1 VAR_3 = ( ( TYPE_1 ) ( context . METHOD_2 ( VAR_4 ) ) ) ; switch ( VAR_3 . METHOD_3 ( ) ) { case VAR_5 : VAR_1 = VAR_2 ; break ; case VAR_6 : VAR_1 = VAR_7 ; break ; case VAR_8 : VAR_1 = VAR_9 ; } return VAR_1 ; }\n", "fixed": "public int METHOD_1 ( ) { int VAR_1 = VAR_2 ; TYPE_1 VAR_3 = ( ( TYPE_1 ) ( context . METHOD_2 ( VAR_4 ) ) ) ; switch ( VAR_3 . METHOD_3 ( ) ) { case VAR_5 : VAR_1 = VAR_2 ; break ; case VAR_6 : VAR_1 = VAR_7 ; break ; case VAR_8 : VAR_1 = VAR_9 ; break ; default : break ; } return VAR_1 ; }\n"}
{"problem": "public boolean METHOD_1 ( int a , int b ) { if ( ( ! ( VAR_1 . METHOD_2 ( a ) ) ) || ( ! ( VAR_1 . METHOD_2 ( b ) ) ) ) { return false ; } return VAR_1 . get ( a ) . equals ( VAR_1 . get ( b ) ) ; }\n", "fixed": "public boolean METHOD_1 ( int a , int b ) { if ( ( ( VAR_1 [ a ] ) == null ) || ( ( VAR_1 [ b ] ) == null ) ) { return false ; } return ( VAR_1 [ a ] ) == ( VAR_1 [ b ] ) ; }\n"}
{"problem": "protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { if ( VAR_2 == ( VAR_3 ) ) { super . METHOD_1 ( VAR_1 , VAR_2 , data ) ; } switch ( VAR_1 ) { case VAR_4 : TYPE_1 . METHOD_2 ( this , data ) ; break ; default : super . METHOD_1 ( VAR_1 , VAR_2 , data ) ; break ; } }\n", "fixed": "protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { if ( VAR_2 == ( VAR_3 ) ) { super . METHOD_1 ( VAR_1 , VAR_2 , data ) ; return ; } switch ( VAR_1 ) { case VAR_4 : TYPE_1 . METHOD_2 ( this , data ) ; break ; default : super . METHOD_1 ( VAR_1 , VAR_2 , data ) ; break ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = null ; for ( TYPE_2 < TYPE_3 > VAR_3 = VAR_4 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; ) { TYPE_3 VAR_5 = VAR_3 . METHOD_4 ( ) ; if ( VAR_5 . METHOD_5 ( ) ) { VAR_2 = VAR_5 . getText ( ) ; break ; } } return VAR_2 . equals ( STRING_1 ) ? null : java.lang.Integer.parseInt ( VAR_2 ) ; }\n", "fixed": "private java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = null ; for ( TYPE_2 < TYPE_3 > VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; ) { TYPE_3 VAR_5 = VAR_3 . METHOD_4 ( ) ; if ( VAR_5 . METHOD_5 ( ) ) { VAR_2 = VAR_5 . getText ( ) ; break ; } } return VAR_2 . equals ( STRING_1 ) ? null : java.lang.Integer.parseInt ( VAR_2 ) ; }\n"}
{"project": "Time", "bugId": 3, "problem": " public void setSecondOfMinute(final int secondOfMinute) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addSeconds(final int seconds) {\n             setMillis(getChronology().seconds().add(getMillis(), seconds));\n     }", "fixed": " public void setSecondOfMinute(final int secondOfMinute) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addSeconds(final int seconds) {\n        if (seconds != 0) {\n             setMillis(getChronology().seconds().add(getMillis(), seconds));\n        }\n     }", "observations": "The patches makes a type of \"bypass\" null check, where the logic is applyed only if the value is different of null.", "repairActions": ["condBranIfAdd"], "repairPatterns": ["copyPaste", "wrapsIf"]}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSamplingUsingmessageFrequency() throws Exception {\n         long totalMessages = 100;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "fixed": "     public void testSamplingUsingmessageFrequency() throws Exception {\n         long totalMessages = 100;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"problem": "public static void main ( java.lang.String [ ] args ) { while ( true ) { TYPE_1 . init ( ) ; java.lang.System.out.println ( ) ; java.lang.System.out.println ( STRING_1 ) ; java.util.Scanner VAR_1 = new java.util.Scanner ( VAR_2 ) ; if ( ( TYPE_1 . METHOD_1 ( VAR_1 . METHOD_2 ( ) , 1 ) ) == 1 ) { VAR_1 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( ) ; TYPE_1 . METHOD_4 ( ) ; } else { VAR_1 . METHOD_3 ( ) ; break ; } } }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { while ( true ) { TYPE_1 . init ( ) ; java.lang.System.out.println ( ) ; java.lang.System.out.println ( STRING_1 ) ; java.util.Scanner VAR_1 = new java.util.Scanner ( VAR_2 ) ; if ( ( TYPE_1 . METHOD_1 ( VAR_1 . METHOD_2 ( ) , 1 ) ) == 1 ) { TYPE_2 . METHOD_4 ( ) ; TYPE_1 . METHOD_4 ( ) ; } else { break ; } } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 node ) { return METHOD_2 ( METHOD_3 ( VAR_1 . METHOD_4 ( ) , node . getValue ( ) ) . METHOD_5 ( ( ( node . METHOD_6 ( ) ) == 0 ? INT_1 : node . METHOD_6 ( ) ) ) ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 node ) { return METHOD_2 ( METHOD_3 ( node . METHOD_4 ( ) , node . getValue ( ) ) . METHOD_5 ( ( ( node . METHOD_6 ( ) ) == 0 ? INT_1 : node . METHOD_6 ( ) ) ) ) ; }\n"}
{"problem": "public void start ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_2 . METHOD_1 ( ) . add ( TYPE_2 . METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( ) . add ( STRING_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( INT_1 ) ; VAR_1 . METHOD_5 ( INT_2 ) ; VAR_1 . METHOD_6 ( VAR_3 ) ; VAR_1 . show ( ) ; METHOD_7 ( ) ; METHOD_8 ( STRING_2 , this : : METHOD_7 ) ; }\n", "fixed": "public void start ( TYPE_1 VAR_1 ) throws java.lang.Exception { this . VAR_1 = VAR_1 ; VAR_2 . METHOD_1 ( ) . add ( TYPE_2 . METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( ) . add ( STRING_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( INT_1 ) ; VAR_1 . METHOD_5 ( INT_2 ) ; VAR_1 . METHOD_6 ( VAR_3 ) ; VAR_1 . show ( ) ; METHOD_7 ( ) ; METHOD_8 ( STRING_2 , this : : METHOD_7 ) ; }\n"}
{"problem": "public java.lang.Boolean METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( VAR_2 , true ) ; return true ; } catch ( java.io.IOException VAR_3 ) { TYPE_1 . METHOD_3 ( this . getClass ( ) . getName ( ) , STRING_1 , VAR_3 ) ; } return false ; }\n", "fixed": "public java.lang.Boolean METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( VAR_2 , true ) ; return true ; } catch ( java.lang.Exception VAR_3 ) { TYPE_1 . METHOD_3 ( this . getClass ( ) . getName ( ) , STRING_1 , VAR_3 ) ; } return false ; }\n"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void split(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    split(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void split(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    split(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; for ( TYPE_2 VAR_4 : VAR_5 ) { if ( ! ( VAR_6 . contains ( VAR_4 ) ) ) { VAR_4 . METHOD_3 ( VAR_2 ) ; } } METHOD_4 ( VAR_2 ) ; }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; for ( TYPE_2 VAR_4 : VAR_5 ) { if ( ! ( VAR_6 . contains ( VAR_4 ) ) ) { VAR_4 . METHOD_3 ( VAR_2 ) ; } } METHOD_4 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.io.IOException { java.lang.System.out.println ( STRING_1 ) ; java.io.File [ ] VAR_1 = new java.io.File ( ( STRING_2 + ( id ) ) ) . METHOD_2 ( ) ; java.util.ArrayList < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; for ( java.io.File VAR_3 : VAR_1 ) { if ( VAR_3 . METHOD_3 ( ) ) { VAR_2 . add ( VAR_3 . getName ( ) ) ; java.lang.System.out.println ( VAR_3 . getName ( ) ) ; } } VAR_4 = VAR_2 . iterator ( ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.io.IOException { java.lang.System.out.println ( STRING_1 ) ; java.io.File [ ] VAR_1 = new java.io.File ( STRING_2 ) . METHOD_2 ( ) ; java.util.ArrayList < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; for ( java.io.File VAR_3 : VAR_1 ) { if ( VAR_3 . METHOD_3 ( ) ) { VAR_2 . add ( VAR_3 . getName ( ) ) ; java.lang.System.out.println ( VAR_3 . getName ( ) ) ; } } VAR_4 = VAR_2 . iterator ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 position ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; if ( position != null ) for ( int i = 0 ; i < ( VAR_3 ) ; i ++ ) if ( ( VAR_4 . get ( i ) . METHOD_4 ( ) . METHOD_5 ( position ) ) < ( VAR_5 ) ) VAR_1 . METHOD_2 ( i ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 position ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; if ( position != null ) for ( int i = 0 ; i < ( VAR_3 ) ; i ++ ) if ( ( VAR_1 . get ( i ) ) && ( ( VAR_4 . get ( i ) . METHOD_4 ( ) . METHOD_5 ( position ) ) < ( VAR_5 ) ) ) VAR_1 . METHOD_2 ( i ) ; }\n"}
{"problem": "private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; boolean VAR_3 = VAR_1 . getBoolean ( STRING_1 , false ) ; if ( ! VAR_3 ) { TYPE_2 VAR_4 = VAR_1 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( STRING_2 , true ) ; VAR_4 . commit ( ) ; } return ! VAR_3 ; }\n", "fixed": "private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; boolean VAR_3 = VAR_1 . getBoolean ( STRING_2 , false ) ; if ( ! VAR_3 ) { TYPE_2 VAR_4 = VAR_1 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( STRING_2 , true ) ; VAR_4 . commit ( ) ; } return ! VAR_3 ; }\n"}
{"fixCommitSHA1": "3d785dfc55bb6fdec9c6fcd67b9a2359cc216181", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "         }\n     }\n    private class BlockingCallback implements AuthenticationCallback {\n         private final CountDownLatch countDownLatch = new CountDownLatch(1);\n         private Connection connection;", "fixed": "         }\n     }\n    private static class BlockingCallback implements AuthenticationCallback {\n         private final CountDownLatch countDownLatch = new CountDownLatch(1);\n         private Connection connection;", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "82a43727c308f2401468d4306c1ba2b5095f54b5", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n        assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, false);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, IOV_MAX + 1, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 0, 2, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 1, 1, true);", "fixed": "         assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n        assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, IOV_MAX + 1, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 0, 2, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 1, 1, true);", "sourceBeforeFix": "assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))", "sourceAfterFix": "assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; if ( VAR_2 == null ) { METHOD_5 ( ) ; VAR_3 = VAR_4 ; } else if ( ! ( VAR_2 . equals ( VAR_3 ) ) ) { METHOD_5 ( ) ; VAR_5 . METHOD_1 ( VAR_2 ) ; VAR_3 = VAR_2 ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; if ( VAR_2 == null ) { METHOD_5 ( ) ; } else if ( ! ( VAR_2 . equals ( VAR_3 ) ) ) { METHOD_5 ( ) ; VAR_5 . METHOD_1 ( VAR_2 ) ; VAR_3 = VAR_2 ; } }\n"}
{"problem": "public int METHOD_1 ( ) throws TYPE_1 { try { byte [ ] VAR_1 = new byte [ INT_1 ] ; for ( int i = 0 ; i < INT_1 ; i ++ ) { VAR_1 [ i ] = ( ( byte ) ( VAR_2 . METHOD_2 ( ) ) ) ; } buffer = TYPE_2 . METHOD_3 ( VAR_1 ) ; buffer . METHOD_4 ( VAR_3 ) ; return buffer . METHOD_5 ( ) ; } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_6 ( ) ; return 0 ; } }\n", "fixed": "public int METHOD_1 ( ) throws TYPE_1 { try { byte [ ] VAR_1 = new byte [ INT_1 ] ; for ( int i = 0 ; i < INT_1 ; i ++ ) { VAR_1 [ i ] = ( ( byte ) ( VAR_2 . METHOD_2 ( ) ) ) ; } buffer = TYPE_2 . METHOD_3 ( VAR_1 ) ; buffer . METHOD_4 ( VAR_3 ) ; return buffer . METHOD_5 ( ) ; } catch ( java.io.IOException VAR_4 ) { java.lang.System.out.println ( VAR_4 . toString ( ) ) ; return 0 ; } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 p , TYPE_3 value ) { TYPE_4 VAR_1 = TYPE_4 . METHOD_2 ( p . METHOD_3 ( ) ) ; if ( VAR_1 != null ) { return TYPE_5 . METHOD_1 ( VAR_1 . METHOD_2 ( ) , value , true ) ; } return TYPE_5 . METHOD_1 ( p . METHOD_3 ( ) . toString ( ) , value , false ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 p , TYPE_3 value ) { TYPE_4 VAR_1 = TYPE_4 . METHOD_2 ( p . METHOD_3 ( ) ) ; if ( VAR_1 != null ) { return TYPE_5 . METHOD_1 ( VAR_1 . METHOD_2 ( ) , value ) ; } return TYPE_5 . METHOD_1 ( p . METHOD_3 ( ) . toString ( ) , value ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"problem": "public < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_2 > METHOD_1 ( TYPE_4 < TYPE_1 > VAR_1 ) { try { return METHOD_1 ( METHOD_2 ( ) , VAR_1 ) ; } catch ( TYPE_5 VAR_2 ) { VAR_2 . METHOD_3 ( ) ; return new TYPE_3 ( VAR_3 , VAR_2 ) . METHOD_4 ( ) ; } }\n", "fixed": "public < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_2 > METHOD_1 ( TYPE_4 < TYPE_1 > VAR_1 ) { try { return METHOD_1 ( METHOD_2 ( ) , VAR_1 ) ; } catch ( TYPE_5 VAR_2 ) { VAR_2 . METHOD_3 ( ) ; return new TYPE_3 ( VAR_2 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String name , java.lang.String VAR_2 , boolean VAR_3 ) throws java.io.IOException { TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_2 ( name ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; TYPE_3 VAR_5 = ( ( TYPE_3 ) ( VAR_6 . METHOD_5 ( VAR_4 ) ) ) ; if ( VAR_5 != null ) { return METHOD_6 ( VAR_5 ) ; } return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String name , java.lang.String VAR_2 , boolean VAR_3 ) throws java.io.IOException { TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_2 ( name ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; return null ; }\n"}
{"problem": "private void METHOD_1 ( android.view.View view ) { VAR_1 . METHOD_2 ( ( ( VAR_1 ) == view ? VAR_2 : VAR_3 ) ) ; VAR_4 . METHOD_2 ( ( ( VAR_4 ) == view ? VAR_2 : VAR_3 ) ) ; VAR_5 . METHOD_2 ( ( ( VAR_5 ) == view ? VAR_2 : VAR_3 ) ) ; }\n", "fixed": "private void METHOD_1 ( android.view.View view ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ( ( VAR_1 ) == view ? VAR_2 : VAR_3 ) ) ; } if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_2 ( ( ( VAR_4 ) == view ? VAR_2 : VAR_3 ) ) ; } if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_2 ( ( ( VAR_5 ) == view ? VAR_2 : VAR_3 ) ) ; } }\n"}
{"problem": "private boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { if ( VAR_2 > VAR_3 ) { int VAR_4 = VAR_3 ; VAR_3 = VAR_2 ; VAR_2 = VAR_4 ; } for ( int file = VAR_2 + 1 ; file < ( VAR_3 - 1 ) ; file ++ ) { TYPE_2 position = new TYPE_2 ( TYPE_3 . values ( ) [ file ] , VAR_1 ) ; if ( ! ( METHOD_2 ( position ) ) ) { return false ; } } return true ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { if ( VAR_2 > VAR_3 ) { int VAR_4 = VAR_3 ; VAR_3 = VAR_2 ; VAR_2 = VAR_4 ; } for ( int file = VAR_2 + 1 ; file <= ( VAR_3 - 1 ) ; file ++ ) { TYPE_2 position = new TYPE_2 ( TYPE_3 . values ( ) [ file ] , VAR_1 ) ; if ( ! ( METHOD_2 ( position ) ) ) { return false ; } } return true ; }\n"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { METHOD_2 ( ) ; } else { VAR_1 = true ; TYPE_1 . METHOD_3 ( VAR_2 , STRING_1 ) ; VAR_3 . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( ) { VAR_1 = false ; } } , INT_1 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( ) ; } else { VAR_1 = true ; TYPE_1 . METHOD_3 ( VAR_2 , STRING_1 ) ; VAR_3 . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( ) { VAR_1 = false ; } } , INT_1 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8561cd53e8c439965aa34c89d0e5016f78ca7e89", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "     }\n     public Collection<String> getPrivateIpAddresses() throws Exception {\n        final Map<String, String> result = new DescribeInstances(awsConfig).execute(endpoint);\n         return result.keySet();\n     }\n     public Map<String, String> getAddresses() throws Exception {\n        return new DescribeInstances(awsConfig).execute(endpoint);\n     }\n     public void setEndpoint(String s) {", "fixed": "     }\n     public Collection<String> getPrivateIpAddresses() throws Exception {\n        final Map<String, String> result = new DescribeInstances(awsConfig).execute();\n         return result.keySet();\n     }\n     public Map<String, String> getAddresses() throws Exception {\n        return new DescribeInstances(awsConfig).execute();\n     }\n     public void setEndpoint(String s) {", "sourceBeforeFix": "new DescribeInstances(awsConfig).execute(endpoint)", "sourceAfterFix": "new DescribeInstances(awsConfig).execute()"}
{"problem": "public java.util.HashMap < java.lang.Long , java.lang.String > METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getString ( VAR_3 , null ) ; if ( VAR_1 == null ) { return new java.util.HashMap < java.lang.Long , java.lang.String > ( ) ; } return ( ( java.util.HashMap < java.lang.Long , java.lang.String > ) ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) ; }\n", "fixed": "public java.util.HashMap < java.lang.Long , java.lang.String > METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getString ( VAR_3 , null ) ; if ( VAR_1 == null ) { return new java.util.HashMap < java.lang.Long , java.lang.String > ( ) ; } else { return ( ( java.util.HashMap < java.lang.Long , java.lang.String > ) ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) ; } }\n"}
{"problem": "public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) ) == false ) return ; TYPE_1 . METHOD_6 ( null ) ; TYPE_1 . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( ) ; TYPE_2 . METHOD_10 ( ) ; TYPE_1 . METHOD_11 ( null ) ; }\n", "fixed": "public static boolean METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) ) == false ) return false ; TYPE_1 . METHOD_6 ( null ) ; TYPE_1 . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( ) ; TYPE_2 . METHOD_10 ( ) ; TYPE_1 . METHOD_11 ( null ) ; return true ; }\n"}
{"problem": "private java.lang.String METHOD_1 ( TYPE_1 < java.lang.String , java.lang.String > VAR_1 ) { final java.lang.String [ ] VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) . split ( STRING_2 ) ; for ( java.lang.String filename : VAR_2 ) { if ( filename . trim ( ) . startsWith ( STRING_3 ) ) { java.lang.String name = filename . split ( STRING_4 ) [ 1 ] . trim ( ) ; return name . replaceAll ( STRING_5 , STRING_6 ) ; } } return null ; }\n", "fixed": "private java.lang.String METHOD_1 ( TYPE_1 < java.lang.String , java.lang.String > VAR_1 ) { final java.lang.String [ ] VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) . split ( STRING_2 ) ; for ( java.lang.String filename : VAR_2 ) { if ( filename . trim ( ) . startsWith ( STRING_3 ) ) { java.lang.String name = filename . split ( STRING_4 ) [ 1 ] . trim ( ) ; name = name . replaceAll ( STRING_5 , STRING_6 ) ; return new java.io.File ( name ) . getName ( ) ; } } return null ; }\n"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) { TYPE_2 . METHOD_2 ( VAR_1 , TYPE_3 . not ( TYPE_3 . METHOD_3 ( VAR_3 class ) ) ) ; TYPE_4 < ? > VAR_4 = TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 ) ; TYPE_6 . assertTrue ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_4 ) + STRING_3 ) , VAR_4 . METHOD_6 ( ) . contains ( VAR_1 ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) { TYPE_4 < ? > VAR_4 = TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 ) ; TYPE_6 . assertTrue ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_4 ) + STRING_3 ) , VAR_4 . METHOD_6 ( ) . contains ( VAR_1 ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( STRING_1 ) . METHOD_6 ( STRING_2 ) . METHOD_5 ( STRING_3 ) . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_6 ( STRING_4 ) . METHOD_9 ( ) . METHOD_10 ( ) . METHOD_11 ( STRING_5 ) . METHOD_12 ( STRING_6 , true ) . METHOD_13 ( ) . METHOD_9 ( ) . METHOD_14 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_4 ( ) . METHOD_5 ( STRING_1 ) . METHOD_6 ( STRING_2 ) . METHOD_5 ( STRING_3 ) . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_6 ( STRING_4 ) . METHOD_9 ( ) . METHOD_10 ( ) . METHOD_11 ( STRING_5 ) . METHOD_12 ( STRING_6 , true ) . METHOD_13 ( ) . METHOD_9 ( ) . METHOD_14 ( ) ; }\n"}
{"project": "Closure", "bugId": 32, "problem": " private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n             return new ExtractionInfo(multilineText, token);\n           }\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n           builder.append(toString(token));\n           line = stream.getRemainingJSDocLine();", "fixed": " private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n             return new ExtractionInfo(multilineText, token);\n           }\n           builder.append(toString(token));\n           line = stream.getRemainingJSDocLine();", "observations": "", "repairActions": ["assignAdd", "condBranIfAdd", "condBranIfElseAdd", "condBranRem", "loopAdd", "mcAdd", "mcRem", "varAdd"], "repairPatterns": ["condBlockOthersAdd", "condBlockRem", "missComp"]}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { int i = VAR_2 . METHOD_2 ( ) ; java.lang.String tmp = ( ( java.lang.String ) ( VAR_3 . get ( i ) ) ) ; METHOD_3 ( tmp ) ; VAR_3 . remove ( i ) ; METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { int i = VAR_2 . METHOD_2 ( ) ; if ( i < 0 ) return ; java.lang.String tmp = ( ( java.lang.String ) ( VAR_3 . get ( i ) ) ) ; if ( tmp == null ) return ; METHOD_3 ( tmp ) ; VAR_3 . remove ( i ) ; METHOD_4 ( ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = VAR_4 . METHOD_2 ( ( ( STRING_1 + ( VAR_1 . getId ( ) ) ) + STRING_2 ) ) ; TYPE_3 VAR_5 = VAR_3 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_5 . METHOD_5 ( ) ) ; VAR_5 . setValue ( VAR_2 ) ; return VAR_2 . getId ( ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = VAR_4 . METHOD_2 ( ( ( VAR_1 . getId ( ) ) + STRING_2 ) ) ; TYPE_3 VAR_5 = VAR_3 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_5 . METHOD_5 ( ) ) ; VAR_5 . setValue ( VAR_2 ) ; return VAR_2 . getId ( ) ; }\n"}
{"problem": "public java.util.List < java.lang.Integer > METHOD_1 ( ) { java.util.List < java.lang.Integer > VAR_1 = new java.util.ArrayList ( VAR_2 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; ++ i ) { VAR_1 . add ( VAR_2 . METHOD_2 ( i ) ) ; } return VAR_1 ; }\n", "fixed": "public java.util.List < java.lang.Integer > METHOD_1 ( ) { java.util.List < java.lang.Integer > VAR_1 = new java.util.ArrayList < java.lang.Integer > ( VAR_2 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; ++ i ) { VAR_1 . add ( VAR_2 . METHOD_2 ( i ) ) ; } return VAR_1 ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( STRING_1 ) ) == null ) return null ; java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( java.lang.String VAR_3 : VAR_1 . METHOD_2 ( STRING_2 ) . METHOD_3 ( false ) ) { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ( STRING_3 + VAR_3 ) ) ) ; VAR_2 . add ( VAR_4 ) ; } TYPE_2 . info ( STRING_4 ) ; return VAR_2 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( STRING_1 ) ) == null ) return null ; java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( java.lang.String VAR_3 : VAR_1 . METHOD_2 ( STRING_2 ) . METHOD_3 ( false ) ) { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ( STRING_3 + VAR_3 ) ) ) ; VAR_2 . add ( VAR_4 ) ; } return VAR_2 ; }\n"}
{"problem": "public java.lang.String [ ] getText ( ) { final java.lang.String [ ] VAR_1 = new java.lang.String [ ( super . METHOD_1 ( ) ) + 1 ] ; java.lang.String temp = STRING_1 ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { for ( final char c : VAR_2 [ i ] ) { temp += c ; } VAR_1 [ i ] = temp ; } return VAR_1 ; }\n", "fixed": "public java.lang.String [ ] getText ( ) { final java.lang.String [ ] VAR_1 = new java.lang.String [ ( super . METHOD_1 ( ) ) + 1 ] ; java.lang.String temp = STRING_1 ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { for ( final char c : VAR_2 [ i ] ) { temp += c ; } VAR_1 [ i ] = temp ; temp = STRING_1 ; } return VAR_1 ; }\n"}
{"problem": "public boolean METHOD_1 ( int VAR_1 , char VAR_2 ) { if ( ( VAR_1 > ( ( VAR_3 ) - 1 ) ) || ( VAR_1 < 0 ) ) return false ; else if ( METHOD_2 ( ) ) return false ; for ( int i = 0 ; i < INT_1 ; i ++ ) if ( ( VAR_4 [ VAR_1 ] [ i ] ) == CHAR_1 ) { VAR_4 [ VAR_1 ] [ i ] = VAR_2 ; this . METHOD_3 ( VAR_1 , i ) ; return true ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( int VAR_1 , char VAR_2 ) { if ( ( VAR_1 > ( ( VAR_3 ) - 1 ) ) || ( VAR_1 < 0 ) ) return false ; else if ( METHOD_2 ( ) ) return false ; for ( int i = 0 ; i < INT_1 ; i ++ ) if ( ( VAR_4 [ VAR_1 ] [ i ] ) == CHAR_1 ) { VAR_4 [ VAR_1 ] [ i ] = VAR_2 ; return true ; } return false ; }\n"}
{"problem": "protected void METHOD_1 ( final java.lang.Object [ ] VAR_1 , java.lang.Object ... args ) { java.lang.Object [ ] VAR_2 = new java.lang.Object [ ( VAR_1 . length ) + ( args.length ) ] ; TYPE_1 . METHOD_2 ( VAR_1 , 0 , VAR_2 , 0 , VAR_1 . length ) ; TYPE_1 . METHOD_2 ( args , 0 , VAR_2 , VAR_1 . length , args.length ) ; this . VAR_3 . METHOD_3 ( ) . METHOD_1 ( VAR_2 ) ; }\n", "fixed": "protected void METHOD_1 ( final java.lang.Object [ ] VAR_1 , java.lang.Object ... args ) { java.lang.Object [ ] VAR_2 = new java.lang.Object [ ( VAR_1 . length ) + ( args.length ) ] ; TYPE_1 . METHOD_2 ( VAR_1 , 0 , VAR_2 , 0 , VAR_1 . length ) ; TYPE_1 . METHOD_2 ( args , 0 , VAR_2 , VAR_1 . length , args.length ) ; VAR_3 . METHOD_3 ( ) . METHOD_1 ( VAR_2 ) ; }\n"}
{"problem": "public static < TYPE_1 > TYPE_1 [ ] METHOD_1 ( java.lang.Object [ ] VAR_1 ) { TYPE_1 a = TYPE_2 . METHOD_2 ( ( ( TYPE_1 [ ] ) ( VAR_1 ) ) ) ; return a == null ? ( ( TYPE_1 [ ] ) ( VAR_1 ) ) : TYPE_2 . METHOD_1 ( VAR_1 , ( ( java.lang.Class < TYPE_1 > ) ( a . getClass ( ) ) ) ) ; }\n", "fixed": "public static < TYPE_1 > TYPE_1 [ ] METHOD_1 ( java.lang.Object [ ] VAR_1 ) { TYPE_1 a = TYPE_2 . METHOD_2 ( ( ( TYPE_1 [ ] ) ( VAR_1 ) ) ) . get ( ) ; return a == null ? ( ( TYPE_1 [ ] ) ( VAR_1 ) ) : TYPE_2 . METHOD_1 ( VAR_1 , ( ( java.lang.Class < TYPE_1 > ) ( a . getClass ( ) ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { ( state ) ++ ; switch ( state ) { default : android.content.Intent intent = new android.content.Intent ( VAR_1 . getContext ( ) , VAR_2 class ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( STRING_1 , VAR_4 . toString ( ) ) ; VAR_3 . METHOD_3 ( STRING_2 , VAR_5 ) ; intent . METHOD_4 ( VAR_3 ) ; METHOD_5 ( intent ) ; break ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { ( state ) ++ ; switch ( state ) { default : android.content.Intent intent = new android.content.Intent ( VAR_1 . getContext ( ) , VAR_2 class ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( STRING_1 , VAR_4 . toString ( ) ) ; intent . METHOD_4 ( VAR_3 ) ; METHOD_5 ( intent ) ; break ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 < TYPE_1 > VAR_1 , java.lang.Object ... args ) { try { if ( args != null ) { return TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( args ) ) ; } else { return TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; } } catch ( java.lang.Throwable VAR_2 ) { TYPE_4 . error ( STRING_1 , VAR_2 ) ; } return TYPE_2 . METHOD_4 ( ) ; }\n", "fixed": "private < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_3 < TYPE_1 > VAR_1 , java.lang.Object [ ] args ) { try { if ( args != null ) { return VAR_1 . METHOD_3 ( args ) ; } else { return VAR_1 . METHOD_3 ( ) ; } } catch ( java.lang.Throwable VAR_2 ) { TYPE_4 . error ( STRING_1 , VAR_2 ) ; } return null ; }\n"}
{"project": "Closure", "bugId": 113, "problem": " private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n      if (provided != null) {\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }", "fixed": " private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n      if (provided != null || requiresLevel.isOn()) {\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }", "observations": "Again, an existent condition with Null-Check was expanded with other condition.", "repairActions": ["condExpExpand", "mcAdd"], "repairPatterns": ["expLogicExpand", "singleLine"]}
{"problem": "private java.lang.Object execute ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 context ) { TYPE_2 VAR_3 = VAR_2 [ VAR_4 ] ; for ( TYPE_4 < TYPE_2 , java.lang.String > VAR_5 : VAR_6 ) { TYPE_2 VAR_7 = VAR_5 . first ( ) ; if ( ( VAR_7 == null ) || ( VAR_7 . equals ( VAR_3 ) ) ) { return context . METHOD_1 ( VAR_5 . METHOD_2 ( ) ) ; } } return context . METHOD_1 ( VAR_8 ) ; }\n", "fixed": "private java.lang.Object execute ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 context ) { TYPE_2 VAR_3 = VAR_2 [ VAR_4 ] ; for ( TYPE_4 < TYPE_2 , java.lang.String > VAR_5 : VAR_6 ) { TYPE_2 VAR_7 = VAR_5 . first ( ) ; if ( VAR_7 . equals ( VAR_3 ) ) { return context . METHOD_1 ( VAR_5 . METHOD_2 ( ) ) ; } } return context . METHOD_1 ( VAR_8 ) ; }\n"}
{"problem": "public < TYPE_1 > TYPE_1 [ ] METHOD_1 ( TYPE_1 [ ] args , int VAR_1 ) { return TYPE_2 . METHOD_2 ( args , ( ( VAR_1 * ( METHOD_3 ( ) ) ) - INT_1 ) , ( VAR_1 * ( METHOD_3 ( ) ) ) ) ; }\n", "fixed": "public < TYPE_1 > TYPE_1 [ ] METHOD_1 ( TYPE_1 [ ] args , int VAR_1 ) { return TYPE_2 . METHOD_2 ( args , ( ( VAR_1 * ( METHOD_3 ( ) ) ) - ( METHOD_3 ( ) ) ) , ( VAR_1 * ( METHOD_3 ( ) ) ) ) ; }\n"}
{"problem": "public static int METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { java.util.Scanner VAR_3 = new java.util.Scanner ( VAR_4 ) ; try { VAR_3 . METHOD_2 ( ) ; if ( ! ( VAR_1 . isEmpty ( ) ) ) { return java.lang.Integer.parseInt ( VAR_1 ) ; } else { return VAR_2 ; } } catch ( java.lang.Exception VAR_5 ) { java.lang.System.out.println ( STRING_1 ) ; return TYPE_1 . METHOD_1 ( VAR_3 . METHOD_3 ( ) , VAR_2 ) ; } }\n", "fixed": "public static int METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { java.util.Scanner VAR_3 = new java.util.Scanner ( VAR_4 ) ; try { if ( ! ( VAR_1 . isEmpty ( ) ) ) { return java.lang.Integer.parseInt ( VAR_1 ) ; } else { return VAR_2 ; } } catch ( java.lang.Exception VAR_5 ) { java.lang.System.out.println ( STRING_1 ) ; return TYPE_1 . METHOD_1 ( VAR_3 . METHOD_3 ( ) , VAR_2 ) ; } }\n"}
{"fixCommitSHA1": "28a04af5f4b957b75ba7dbf6486999b75547673c", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\tkoala.stateTime += deltaTime;\r\n\t\tif ((Gdx.input.isKeyPressed(Keys.SPACE) || isTouched(0.75f, 1)) && koala.grounded) {\r\n \t\t\tkoala.velocity.y += Koala.JUMP_VELOCITY;\r\n \t\t\tkoala.state = Koala.State.Jumping;\r\n \t\t\tkoala.grounded = false;\r", "fixed": " \t\tkoala.stateTime += deltaTime;\r\n\t\tif ((Gdx.input.isKeyPressed(Keys.SPACE) || isTouched(0.5f, 1)) && koala.grounded) {\r\n \t\t\tkoala.velocity.y += Koala.JUMP_VELOCITY;\r\n \t\t\tkoala.state = Koala.State.Jumping;\r\n \t\t\tkoala.grounded = false;\r", "sourceBeforeFix": "isTouched(0.75f,1)", "sourceAfterFix": "isTouched(0.5f,1)"}
{"problem": "public double METHOD_1 ( java.lang.Integer VAR_1 ) { double VAR_2 = METHOD_2 ( VAR_1 ) ; double VAR_3 = METHOD_3 ( ) ; if ( ( VAR_2 == 0 ) || ( VAR_3 == 0 ) ) return 0 ; return FLOAT_1 * ( ( VAR_2 * VAR_3 ) / ( VAR_2 + VAR_3 ) ) ; }\n", "fixed": "public double METHOD_1 ( java.lang.Integer VAR_1 ) { double VAR_2 = METHOD_2 ( VAR_1 ) ; double VAR_3 = METHOD_3 ( VAR_1 ) ; if ( ( VAR_2 == 0 ) || ( VAR_3 == 0 ) ) return 0 ; return FLOAT_1 * ( ( VAR_2 * VAR_3 ) / ( VAR_2 + VAR_3 ) ) ; }\n"}
{"fixCommitSHA1": "0b52fefcc898f6f82c627bba9fcdd38a62583b22", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         try {\n             final InputStream stream = new FileInputStream(file);\n             stream.close();\n            throw new Exception(\"File \" + file.getPath() + \" should not exist\");\n         }\n         catch (FileNotFoundException ex) {\n             return ex.getLocalizedMessage();", "fixed": "         try {\n             final InputStream stream = new FileInputStream(file);\n             stream.close();\n            throw new IllegalStateException(\"File \" + file.getPath() + \" should not exist\");\n         }\n         catch (FileNotFoundException ex) {\n             return ex.getLocalizedMessage();", "sourceBeforeFix": "new Exception(\"File \" + file.getPath() + \" should not exist\")", "sourceAfterFix": "new IllegalStateException(\"File \" + file.getPath() + \" should not exist\")"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) throws TYPE_3 { METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_4 = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( VAR_5 class ) ; TYPE_6 VAR_6 = METHOD_5 ( VAR_3 ) ; boolean status = VAR_4 . METHOD_1 ( VAR_2 , VAR_6 , INT_1 ) ; return status ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) throws TYPE_3 { METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_4 = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( VAR_5 class ) ; TYPE_6 VAR_6 = METHOD_5 ( VAR_3 ) ; return VAR_4 . METHOD_1 ( VAR_2 , VAR_6 , INT_1 ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_2 ( VAR_4 ) ; VAR_2 . METHOD_2 ( VAR_5 ) ; VAR_2 . METHOD_2 ( VAR_6 ) ; VAR_2 . METHOD_2 ( VAR_7 ) ; VAR_2 . METHOD_2 ( VAR_8 ) ; VAR_9 . METHOD_3 ( VAR_1 , VAR_2 ) ; }\n", "fixed": "private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_2 ( VAR_5 ) ; VAR_2 . METHOD_2 ( VAR_6 ) ; VAR_2 . METHOD_2 ( VAR_7 ) ; VAR_2 . METHOD_2 ( VAR_8 ) ; VAR_9 . METHOD_3 ( VAR_1 , VAR_2 ) ; }\n"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "fixed": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "sourceBeforeFix": "logger.debug(\"rapidRefreshFuture scheduleing for {} millis\",millis)", "sourceAfterFix": "logger.trace(\"rapidRefreshFuture scheduleing for {} millis\",millis)"}
{"problem": "private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.util.Properties VAR_3 = new java.util.Properties ( ) ; VAR_3 . put ( STRING_1 , VAR_1 ) ; VAR_3 . put ( STRING_2 , VAR_2 ) ; VAR_3 . put ( STRING_3 , STRING_4 ) ; VAR_3 . put ( STRING_5 , \"false\" ) ; VAR_3 . put ( STRING_6 , STRING_4 ) ; VAR_3 . put ( STRING_6 , STRING_7 ) ; VAR_3 . put ( STRING_8 , STRING_9 ) ; VAR_3 . put ( STRING_10 , STRING_11 ) ; return new TYPE_1 ( VAR_3 ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.util.Properties VAR_3 = new java.util.Properties ( ) ; VAR_3 . put ( STRING_1 , VAR_1 ) ; VAR_3 . put ( STRING_2 , VAR_2 ) ; VAR_3 . put ( STRING_3 , STRING_4 ) ; VAR_3 . put ( STRING_5 , \"false\" ) ; VAR_3 . put ( STRING_6 , STRING_7 ) ; VAR_3 . put ( STRING_8 , STRING_9 ) ; VAR_3 . put ( STRING_10 , STRING_11 ) ; return new TYPE_1 ( VAR_3 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_3 ( VAR_1 ) ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_2 ) ; TYPE_5 VAR_4 = new TYPE_5 ( ) ; TYPE_6 VAR_5 = new TYPE_6 ( VAR_2 ) ; TYPE_7 VAR_6 = new TYPE_7 ( VAR_2 , new TYPE_1 ( ) ) ; TYPE_8 VAR_7 = new TYPE_8 ( VAR_2 , VAR_3 , VAR_6 , VAR_4 , VAR_5 ) ; VAR_7 . METHOD_1 ( INT_1 ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_3 ( VAR_1 ) ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_2 ) ; TYPE_6 VAR_5 = new TYPE_6 ( VAR_2 ) ; TYPE_7 VAR_6 = new TYPE_7 ( VAR_2 , new TYPE_1 ( ) ) ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_6 , VAR_5 , VAR_3 , VAR_1 ) ; TYPE_8 VAR_7 = new TYPE_8 ( VAR_2 , VAR_3 , VAR_6 , VAR_4 , VAR_5 ) ; VAR_7 . METHOD_1 ( INT_1 ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { if ( ! ( VAR_1 ) ) { TYPE_1 . METHOD_3 ( ) ; return ; } if ( ( ++ ( VAR_2 ) ) == ( VAR_3 . size ( ) ) ) { ( VAR_2 ) -- ; TYPE_1 . METHOD_4 ( ) ; return ; } METHOD_5 ( ) ; VAR_4 = VAR_3 . get ( VAR_2 ) ; METHOD_6 ( VAR_4 ) ; VAR_1 = false ; VAR_5 = false ; } else { TYPE_1 . METHOD_7 ( ) ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { if ( ( ++ ( VAR_2 ) ) == ( VAR_3 . size ( ) ) ) { ( VAR_2 ) -- ; TYPE_1 . METHOD_4 ( ) ; return ; } METHOD_5 ( ) ; VAR_4 = VAR_3 . get ( VAR_2 ) ; METHOD_6 ( VAR_4 ) ; VAR_1 = false ; VAR_5 = false ; } else { TYPE_1 . METHOD_7 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( final TYPE_1 VAR_1 , int position ) { VAR_2 = VAR_3 . get ( position ) ; VAR_4 . setText ( VAR_3 . get ( position ) ) ; VAR_5 . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( android.view.View VAR_6 ) { TYPE_3 . METHOD_4 ( VAR_6 . getContext ( ) , STRING_1 , VAR_7 ) . show ( ) ; } } ) ; TYPE_4 . METHOD_5 ( VAR_8 . getContext ( ) ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( ) . METHOD_8 ( VAR_8 ) ; }\n", "fixed": "public void METHOD_1 ( final TYPE_1 VAR_1 , int position ) { VAR_2 = VAR_3 . get ( position ) ; VAR_4 . setText ( VAR_3 . get ( position ) ) ; VAR_5 . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( android.view.View VAR_6 ) { TYPE_3 . METHOD_4 ( VAR_6 . getContext ( ) , STRING_1 , VAR_7 ) . show ( ) ; } } ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . getName ( ) ) != null ) { name . setText ( VAR_1 . getName ( ) ) ; TYPE_2 . METHOD_2 ( getContext ( ) ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ; if ( VAR_3 . METHOD_7 ( ) ) { VAR_3 . METHOD_8 ( VAR_4 ) ; VAR_5 . METHOD_8 ( VAR_6 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . getName ( ) ) != null ) { name . setText ( VAR_1 . getName ( ) ) ; TYPE_2 . METHOD_2 ( getContext ( ) ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ; VAR_5 . METHOD_8 ( VAR_6 ) ; if ( VAR_3 . METHOD_7 ( ) ) { VAR_3 . METHOD_8 ( VAR_4 ) ; } } }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 . METHOD_3 ( VAR_1 . getId ( ) , STRING_2 ) ; TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , STRING_3 ) ; TYPE_3 . METHOD_3 ( VAR_1 . METHOD_5 ( ) , STRING_4 ) ; return VAR_3 . METHOD_1 ( VAR_1 ) ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 . METHOD_3 ( VAR_1 . getId ( ) , STRING_2 ) ; TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , STRING_3 ) ; TYPE_3 . METHOD_3 ( VAR_1 . METHOD_5 ( ) , STRING_4 ) ; return VAR_3 . METHOD_1 ( VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 field , TYPE_1 value , TYPE_3 VAR_2 ) { if ( ! ( VAR_2 instanceof TYPE_4 ) ) { TYPE_5 VAR_3 = VAR_4 . METHOD_2 ( field , new TYPE_6 ( VAR_5 . METHOD_3 ( ) , VAR_6 ) ) ; TYPE_7 VAR_7 = nodes [ value . METHOD_4 ( ) ] ; if ( VAR_7 != null ) { VAR_7 . METHOD_5 ( VAR_3 . getValue ( ) ) ; } } METHOD_6 ( field . METHOD_7 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 field , TYPE_1 value , TYPE_3 VAR_2 ) { TYPE_5 VAR_3 = VAR_4 . METHOD_2 ( field , new TYPE_6 ( VAR_5 . METHOD_3 ( ) , VAR_6 ) ) ; if ( ! ( VAR_2 instanceof TYPE_4 ) ) { TYPE_7 VAR_7 = nodes [ value . METHOD_4 ( ) ] ; if ( VAR_7 != null ) { VAR_7 . METHOD_5 ( VAR_3 . getValue ( ) ) ; } } METHOD_6 ( field . METHOD_7 ( ) ) ; }\n"}
{"problem": "public static boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return true ; } int VAR_2 = 0 ; for ( java.util.Map.Entry VAR_3 : VAR_1 . METHOD_2 ( ) ) { if ( ( VAR_3 . getValue ( ) ) == false ) { VAR_2 ++ ; } } if ( VAR_2 == ( VAR_1 . size ( ) ) ) { return true ; } else { return false ; } }\n", "fixed": "public static boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return true ; } int VAR_2 = 0 ; for ( java.util.Map.Entry VAR_3 : VAR_1 . METHOD_2 ( ) ) { if ( ! ( VAR_1 . get ( VAR_3 ) ) ) { VAR_2 ++ ; } } if ( VAR_2 == ( VAR_1 . size ( ) ) ) { return true ; } else { return false ; } }\n"}
{"problem": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { VAR_4 = ( ( TYPE_4 ) ( VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ) ) ; METHOD_3 ( VAR_4 ) ; TYPE_5 VAR_6 = ( ( TYPE_5 ) ( VAR_4 . METHOD_4 ( VAR_7 ) ) ) ; METHOD_5 ( VAR_6 , VAR_2 . getContext ( ) ) ; return VAR_4 ; }\n", "fixed": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { VAR_4 = ( ( TYPE_4 ) ( VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ) ) ; TYPE_5 VAR_6 = ( ( TYPE_5 ) ( VAR_4 . METHOD_4 ( VAR_7 ) ) ) ; METHOD_3 ( VAR_4 , VAR_6 ) ; METHOD_5 ( VAR_6 , VAR_2 . getContext ( ) ) ; return VAR_4 ; }\n"}
{"problem": "public static final < TYPE_1 > TYPE_1 METHOD_1 ( final java.lang.String VAR_1 , final TYPE_2 < TYPE_1 > type ) throws TYPE_3 , TYPE_4 , java.io.IOException { if ( ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) throw new TYPE_5 ( STRING_1 ) ; if ( type == null ) throw new TYPE_5 ( STRING_2 ) ; return VAR_2 . METHOD_2 ( VAR_1 , type ) ; }\n", "fixed": "public static final < TYPE_1 > TYPE_1 METHOD_1 ( final java.lang.String VAR_1 , final TYPE_2 < TYPE_1 > type ) throws TYPE_3 , TYPE_4 , java.io.IOException { if ( ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) throw new TYPE_5 ( STRING_1 ) ; if ( type == null ) throw new TYPE_5 ( STRING_2 ) ; return ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( VAR_1 , type ) ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; android.view.View VAR_2 = METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; android.view.View VAR_5 = METHOD_2 ( VAR_4 ) ; VAR_5 . METHOD_3 ( VAR_6 ) ; VAR_2 . METHOD_4 ( ) ; TYPE_2 VAR_7 = ( ( TYPE_2 ) ( METHOD_5 ( VAR_8 ) ) ) ; VAR_7 . METHOD_6 ( VAR_9 , VAR_10 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; android.view.View VAR_5 = METHOD_2 ( VAR_4 ) ; VAR_5 . METHOD_3 ( VAR_6 ) ; TYPE_2 VAR_7 = ( ( TYPE_2 ) ( METHOD_5 ( VAR_8 ) ) ) ; VAR_7 . METHOD_6 ( VAR_9 , VAR_10 ) ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { if ( TYPE_3 . METHOD_2 ( ) ) { return null ; } if ( VAR_1 . isEmpty ( ) ) { return TYPE_3 . METHOD_3 ( ) ; } final TYPE_4 VAR_2 = TYPE_5 . METHOD_1 ( ) . fieldName ( TYPE_6 . toString ( ) ) ; for ( final TYPE_7 VAR_3 : VAR_1 ) { VAR_2 . METHOD_4 ( TYPE_8 . METHOD_5 ( VAR_3 . toString ( ) ) ) ; } return VAR_2 . build ( ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { if ( TYPE_3 . METHOD_2 ( VAR_1 ) ) { return null ; } if ( VAR_1 . isEmpty ( ) ) { return TYPE_3 . METHOD_3 ( ) ; } final TYPE_4 VAR_2 = TYPE_5 . METHOD_1 ( ) . fieldName ( TYPE_6 . toString ( ) ) ; for ( final TYPE_7 VAR_3 : VAR_1 ) { VAR_2 . METHOD_4 ( TYPE_8 . METHOD_5 ( VAR_3 . toString ( ) ) ) ; } return VAR_2 . build ( ) ; }\n"}
{"problem": "private int METHOD_1 ( java.lang.String VAR_1 ) { for ( int i = 0 ; i < ( this . VAR_2 ) ; i ++ ) { if ( this . VAR_3 [ i ] . getName ( ) . equals ( VAR_1 ) ) { return i ; } } return - 1 ; }\n", "fixed": "public int METHOD_1 ( java.lang.String VAR_1 ) { for ( int i = 0 ; i < ( this . VAR_2 ) ; i ++ ) { if ( this . VAR_3 [ i ] . getName ( ) . equals ( VAR_1 ) ) { return i ; } } return - 1 ; }\n"}
{"problem": "public void update ( ) { if ( VAR_1 . METHOD_1 ( ) ) { long VAR_2 = VAR_3 . METHOD_2 ( VAR_4 ) ; if ( ( VAR_2 - ( VAR_5 ) ) > ( VAR_6 ) ) { VAR_5 = VAR_2 ; } } if ( VAR_7 . METHOD_1 ( ) ) { VAR_8 . update ( ) ; } }\n", "fixed": "public void update ( ) { if ( VAR_1 . METHOD_1 ( ) ) { long VAR_2 = VAR_3 . METHOD_2 ( VAR_4 ) ; if ( ( VAR_2 - ( VAR_5 ) ) > ( VAR_6 ) ) { VAR_5 = VAR_2 ; } } VAR_8 . update ( ) ; if ( VAR_7 . METHOD_1 ( ) ) { super . update ( ) ; } }\n"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)", "sourceAfterFix": "LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 8:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 8:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args)", "sourceAfterFix": "doInvoke(args)"}
{"problem": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { try { VAR_2 . METHOD_2 ( false ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } if ( ( ! ( VAR_4 ) ) && ( VAR_5 ) ) { VAR_6 . METHOD_4 ( VAR_7 , INT_1 ) ; } METHOD_5 ( null ) ; if ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) { METHOD_8 ( VAR_8 ) ; } METHOD_9 ( VAR_9 ) ; METHOD_10 ( ) ; }\n", "fixed": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { try { VAR_2 . METHOD_2 ( false ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } if ( ( ! ( VAR_4 ) ) && ( VAR_5 ) ) { VAR_6 . METHOD_4 ( VAR_7 , INT_1 ) ; } METHOD_5 ( null ) ; if ( ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) && ( VAR_5 ) ) { METHOD_8 ( VAR_8 ) ; } METHOD_9 ( VAR_9 ) ; METHOD_10 ( ) ; }\n"}
{"problem": "public void remove ( ) { VAR_1 . remove ( this ) ; if ( ( ( this . VAR_2 ) != null ) && ( ! ( this . VAR_2 . METHOD_1 ( ) . METHOD_2 ( ) ) ) ) { this . VAR_2 . METHOD_1 ( ) . remove ( ) ; } }\n", "fixed": "public void remove ( ) { VAR_1 . remove ( this ) ; if ( ( ( this . VAR_2 ) != null ) && ( ! ( this . VAR_2 . METHOD_2 ( ) ) ) ) { this . VAR_2 . METHOD_1 ( ) . remove ( ) ; } }\n"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArraysEXT(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "fixed": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArrays(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)", "sourceAfterFix": "GL.glGenTextures(n,toBuffer(textures,offset),0)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { android.content.Intent VAR_1 = new android.content.Intent ( context , VAR_2 class ) ; VAR_1 . METHOD_2 ( VAR_3 , intent ) ; context . METHOD_3 ( intent ) ; TYPE_1 VAR_4 = intent . METHOD_4 ( ) ; if ( ! ( VAR_4 . isEmpty ( ) ) ) { TYPE_2 . i ( VAR_5 , ( STRING_1 + ( VAR_4 . toString ( ) ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { android.content.Intent VAR_1 = new android.content.Intent ( context , VAR_2 class ) ; VAR_1 . METHOD_2 ( VAR_3 , intent ) ; context . METHOD_3 ( VAR_1 ) ; TYPE_1 VAR_4 = intent . METHOD_4 ( ) ; if ( ! ( VAR_4 . isEmpty ( ) ) ) { TYPE_2 . i ( VAR_5 , ( STRING_1 + ( VAR_4 . toString ( ) ) ) ) ; } }\n"}
{"problem": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) && ( VAR_2 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_3 ( ) ; } VAR_3 . METHOD_4 ( this ) ; TYPE_1 . METHOD_5 ( this ) . METHOD_6 ( VAR_4 ) ; TYPE_1 . METHOD_5 ( this ) . METHOD_6 ( VAR_5 ) ; TYPE_1 . METHOD_5 ( this ) . METHOD_6 ( VAR_6 ) ; TYPE_1 . METHOD_5 ( this ) . METHOD_6 ( VAR_7 ) ; }\n", "fixed": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_3 . METHOD_4 ( this ) ; TYPE_1 . METHOD_5 ( this ) . METHOD_6 ( VAR_4 ) ; TYPE_1 . METHOD_5 ( this ) . METHOD_6 ( VAR_5 ) ; TYPE_1 . METHOD_5 ( this ) . METHOD_6 ( VAR_6 ) ; TYPE_1 . METHOD_5 ( this ) . METHOD_6 ( VAR_7 ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( java.util.Collection < TYPE_1 > VAR_1 ) { TYPE_1 VAR_2 = null ; for ( TYPE_1 node : VAR_1 ) { if ( VAR_2 == null ) { VAR_2 = node ; } else if ( ( VAR_2 . METHOD_2 ( ) ) < ( node . METHOD_2 ( ) ) ) { VAR_2 = node ; } } return VAR_2 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.util.Collection < TYPE_1 > VAR_1 ) { TYPE_1 VAR_2 = null ; for ( TYPE_1 node : VAR_1 ) { if ( VAR_2 == null ) { VAR_2 = node ; } else if ( ( node . METHOD_2 ( ) ) < ( VAR_2 . METHOD_2 ( ) ) ) { VAR_2 = node ; } } return VAR_2 ; }\n"}
{"problem": "public boolean METHOD_1 ( android.view.View VAR_1 , TYPE_1 event ) { if ( ( event . METHOD_2 ( ) ) == ( VAR_2 ) ) { VAR_3 = false ; } else if ( ( event . METHOD_2 ( ) ) == ( VAR_4 ) ) { VAR_3 = VAR_5 . METHOD_3 ( event ) ; TYPE_2 . METHOD_4 ( VAR_6 , ( STRING_1 + ( VAR_3 ) ) ) ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( android.view.View VAR_1 , TYPE_1 event ) { if ( ( event . METHOD_2 ( ) ) == ( VAR_2 ) ) { VAR_3 = false ; } else if ( ( event . METHOD_2 ( ) ) == ( VAR_4 ) ) { VAR_3 = VAR_5 . METHOD_3 ( event ) ; } return true ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) { boolean VAR_1 = false ; boolean VAR_2 = false ; for ( TYPE_1 VAR_3 : VAR_4 ) { if ( VAR_3 . METHOD_2 ( ) . equals ( STRING_1 ) ) { VAR_1 = true ; } if ( VAR_3 . METHOD_2 ( ) . equals ( STRING_2 ) ) { VAR_2 = true ; } } if ( VAR_1 && VAR_2 ) { return STRING_3 ; } else { if ( VAR_2 ) { return STRING_4 ; } return STRING_5 ; } }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String args ) { if ( ( args . contains ( STRING_1 ) ) && ( args . contains ( STRING_2 ) ) ) { return STRING_3 ; } else { if ( args . contains ( STRING_2 ) ) { return STRING_4 ; } return STRING_5 ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static java.lang.Object METHOD_1 ( java.lang.String fileName ) { try { java.lang.Object VAR_1 ; java.io.FileInputStream VAR_2 = new java.io.FileInputStream ( new java.io.File ( ( ( TYPE_1 . METHOD_2 ( ) ) + fileName ) ) ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_1 = VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_1 ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_5 ( ) ; return null ; } }\n", "fixed": "public static java.lang.Object METHOD_1 ( java.lang.String fileName ) { try { java.lang.Object VAR_1 ; java.io.FileInputStream VAR_2 = new java.io.FileInputStream ( new java.io.File ( ( ( TYPE_1 . METHOD_2 ( ) ) + fileName ) ) ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_1 = VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_1 ; } catch ( java.lang.Exception VAR_4 ) { return null ; } }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 ( VAR_2 . get ( ( STRING_1 + ( VAR_3 . METHOD_3 ( ) ) ) ) ) ) ; VAR_2 . put ( ( STRING_1 + ( VAR_3 . METHOD_3 ( ) ) ) , new TYPE_2 ( VAR_3 ) ) ; VAR_2 . get ( ( STRING_1 + ( VAR_3 . METHOD_3 ( ) ) ) ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_2 . put ( ( STRING_1 + ( VAR_3 . METHOD_3 ( ) ) ) , new TYPE_2 ( VAR_3 ) ) ; VAR_1 . METHOD_2 ( new TYPE_1 ( VAR_2 . get ( ( STRING_1 + ( VAR_3 . METHOD_3 ( ) ) ) ) ) ) ; VAR_2 . get ( ( STRING_1 + ( VAR_3 . METHOD_3 ( ) ) ) ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , TYPE_2 source ) { synchronized ( VAR_3 ) { for ( TYPE_3 VAR_4 : VAR_3 ) { try { VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , source ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_6 . error ( ( STRING_1 + source ) , VAR_5 ) ; } } } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , TYPE_2 source ) { for ( TYPE_3 VAR_4 : VAR_3 ) { try { VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , source ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_6 . error ( ( STRING_1 + source ) , VAR_5 ) ; } } }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"problem": "public java.lang.Object METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 value = METHOD_2 ( VAR_1 ) ; switch ( VAR_2 ) { case 0 : return value . METHOD_3 ( ) . METHOD_4 ( ) ; case 1 : return value . METHOD_3 ( ) . METHOD_5 ( ) ; case INT_1 : return value . METHOD_6 ( ) ; default : return null ; } }\n", "fixed": "public java.lang.Object METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 value = METHOD_2 ( VAR_1 ) ; switch ( VAR_2 ) { case 0 : return value . METHOD_3 ( ) . METHOD_4 ( ) ; case 1 : return value . METHOD_3 ( ) . METHOD_5 ( ) ; default : return null ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String ... msg ) { if ( msg == null ) { return ; } for ( java.lang.String str : msg ) { TYPE_1 label = new TYPE_1 ( str ) ; label . METHOD_2 ( STRING_1 ) ; VAR_1 . add ( label ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String ... msg ) { if ( ( msg == null ) || ( ( VAR_1 ) == null ) ) { return ; } for ( java.lang.String str : msg ) { TYPE_1 label = new TYPE_1 ( str ) ; label . METHOD_2 ( STRING_1 ) ; VAR_1 . add ( label ) ; } }\n"}
{"problem": "private void start ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_1 ( VAR_2 ) ; VAR_1 . add ( new TYPE_2 ( VAR_3 , VAR_4 ) , VAR_5 ) ; VAR_1 . add ( new TYPE_3 ( VAR_3 , ( ( VAR_4 ) / INT_1 ) ) , VAR_6 ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( true ) ; }\n", "fixed": "private void start ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_1 ( VAR_2 ) ; VAR_1 . add ( new TYPE_2 ( VAR_3 , VAR_4 ) , VAR_5 ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( true ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; if ( METHOD_4 ( ) ) { TYPE_1 VAR_3 = getView ( ) ; VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; } else { if ( METHOD_4 ( ) ) { TYPE_1 VAR_3 = getView ( ) ; VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( ) ; } } }\n"}
{"problem": "protected void METHOD_1 ( java.lang.String VAR_1 , java.util.List < java.io.File > VAR_2 , java.lang.String VAR_3 , java.net.URL VAR_4 , java.lang.String VAR_5 ) throws java.lang.Exception { TYPE_1 VAR_6 = new TYPE_1 ( VAR_7 . METHOD_2 ( ) , name , METHOD_3 ( ) , VAR_7 . METHOD_4 ( ) , this ) ; METHOD_5 ( VAR_2 , new java.util.HashMap < java.lang.String , java.lang.String > ( ) ) ; VAR_6 . METHOD_1 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 ) ; }\n", "fixed": "protected void METHOD_1 ( java.lang.String VAR_1 , java.util.List < java.io.File > VAR_2 , java.lang.String VAR_3 , java.net.URL VAR_4 , java.lang.String VAR_5 ) throws java.lang.Exception { TYPE_1 VAR_6 = new TYPE_1 ( VAR_7 . METHOD_2 ( ) , getName ( ) , METHOD_3 ( ) , VAR_7 . METHOD_4 ( ) , this ) ; METHOD_5 ( VAR_2 , new java.util.HashMap < java.lang.String , java.lang.String > ( ) ) ; VAR_6 . METHOD_1 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 ) ; }\n"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"}
{"problem": "public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.util.ArrayList < java.lang.String > VAR_2 = VAR_3 . METHOD_2 ( ) ; java.util.ArrayList < java.lang.String > VAR_4 = VAR_3 . METHOD_3 ( ) ; for ( java.lang.String i : VAR_2 ) { java.util.ArrayList < java.lang.String > VAR_5 = VAR_3 . METHOD_4 ( i ) ; for ( java.lang.String j : VAR_5 ) { TYPE_1 . assertTrue ( VAR_4 . contains ( j ) ) ; } VAR_1 = ( STRING_2 + i ) + STRING_3 ; } TYPE_2 . METHOD_5 ( STRING_4 , VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { java.util.ArrayList < java.lang.String > VAR_2 = VAR_3 . METHOD_2 ( ) ; java.util.ArrayList < java.lang.String > VAR_4 = VAR_3 . METHOD_3 ( ) ; for ( java.lang.String i : VAR_4 ) { java.util.ArrayList < java.lang.String > VAR_5 = VAR_3 . METHOD_4 ( i ) ; for ( java.lang.String j : VAR_5 ) { TYPE_1 . assertTrue ( VAR_4 . contains ( j ) ) ; } } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 1 ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( ) ; java.util.List < java.lang.String > VAR_4 = new java.util.ArrayList < java.lang.String > ( ) ; VAR_4 . add ( STRING_1 ) ; VAR_4 . add ( STRING_2 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; java.lang.String name = TYPE_3 . METHOD_4 ( VAR_5 class ) . getConfig ( ) . getString ( STRING_3 ) ; VAR_3 . METHOD_5 ( name ) ; VAR_1 . METHOD_6 ( VAR_3 ) ; return VAR_1 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( ) ; java.util.List < java.lang.String > VAR_4 = new java.util.ArrayList < java.lang.String > ( ) ; VAR_4 . add ( STRING_1 ) ; VAR_4 . add ( STRING_2 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; java.lang.String name = TYPE_3 . METHOD_4 ( VAR_5 class ) . getConfig ( ) . getString ( STRING_3 ) ; VAR_3 . METHOD_5 ( name ) ; VAR_1 . METHOD_6 ( VAR_3 ) ; return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) for ( int j = 0 ; j < ( VAR_1 [ 0 ] . length ) ; j ++ ) for ( int VAR_2 = 0 ; VAR_2 < ( VAR_3 ) ; VAR_2 ++ ) METHOD_2 ( VAR_2 , i , j ) ; }\n", "fixed": "public void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) for ( int j = 0 ; j < ( VAR_1 [ 0 ] . length ) ; j ++ ) for ( int VAR_2 = 0 ; VAR_2 < ( VAR_1 [ 0 ] [ 0 ] . length ) ; VAR_2 ++ ) METHOD_2 ( VAR_2 , i , j ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public boolean METHOD_1 ( java.lang.String token ) { java.lang.String [ ] VAR_1 = TYPE_1 . METHOD_2 ( token ) ; long VAR_2 = java.lang.Long.parseLong ( VAR_1 [ 1 ] ) ; boolean VAR_3 = VAR_2 < ( TYPE_2 . METHOD_3 ( ) ) ; return ( ( METHOD_4 ( ) ) && ( ! VAR_3 ) ) && ( METHOD_5 ( VAR_2 ) . equals ( token ) ) ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String token ) { java.lang.String [ ] VAR_1 = TYPE_1 . METHOD_2 ( token ) ; long VAR_2 = ( ( VAR_1 . length ) <= 1 ) ? 0L : java.lang.Long.parseLong ( VAR_1 [ 1 ] ) ; boolean VAR_3 = VAR_2 < ( TYPE_2 . METHOD_3 ( ) ) ; return ( ( METHOD_4 ( ) ) && ( ! VAR_3 ) ) && ( METHOD_5 ( VAR_2 ) . equals ( token ) ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedNetWeaverEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default NetWeaverEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedNetWeaverEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default NetWeaverEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e2ff3aba4529be755b56da7a8f2a034856f12181", "projectName": "yusuke.twitter4j", "bugType": "Change Caller in Function Call", "problem": "         numberId = p.getProperty(\"numberid.user\");\n         numberPass = p.getProperty(\"numberid.password\");\n        numberIdId = Integer.valueOf(p.getProperty(\"numberid.id\"));\n         twitter1 = new TwitterFactory(conf1).getInstance();", "fixed": "         numberId = p.getProperty(\"numberid.user\");\n         numberPass = p.getProperty(\"numberid.password\");\n        numberIdId = Long.valueOf(p.getProperty(\"numberid.id\"));\n         twitter1 = new TwitterFactory(conf1).getInstance();", "sourceBeforeFix": "Integer.valueOf(p.getProperty(\"numberid.id\"))", "sourceAfterFix": "Long.valueOf(p.getProperty(\"numberid.id\"))"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 node ) { TYPE_3 id = new TYPE_3 ( node . METHOD_2 ( ) ) ; TYPE_4 type = node . METHOD_3 ( ) ; TYPE_5 text = new TYPE_5 ( node . getText ( ) ) ; return new TYPE_6 ( id , type , null , text , new java.util.ArrayList < TYPE_7 > ( ) , new TYPE_8 ( node . METHOD_4 ( ) . METHOD_5 ( this ) . toString ( ) ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 node ) { TYPE_3 id = new TYPE_3 ( node . METHOD_2 ( ) ) ; TYPE_4 type = node . METHOD_3 ( ) ; TYPE_5 text = new TYPE_5 ( node . getText ( ) ) ; TYPE_7 expr = ( ( TYPE_7 ) ( node . METHOD_4 ( ) . METHOD_5 ( this ) ) ) ; return new TYPE_6 ( id , type , null , text , expr ) ; }\n"}
{"problem": "public int METHOD_1 ( int position ) { if ( ( VAR_1 . get ( position ) . METHOD_2 ( ) ) == null ) { return VAR_2 ; } else if ( ( VAR_1 . get ( position ) . METHOD_2 ( ) ) != null ) { return VAR_3 ; } return - 1 ; }\n", "fixed": "public int METHOD_1 ( int position ) { if ( ( VAR_1 . get ( position ) . METHOD_2 ( ) ) == null ) { return VAR_3 ; } else if ( ( VAR_1 . get ( position ) . METHOD_2 ( ) ) != null ) { return VAR_3 ; } return - 1 ; }\n"}
{"fixCommitSHA1": "8bce6897f9f7e0b16508c462665e4f9d26d92e39", "projectName": "square.okhttp", "bugType": "Change Identifier Used", "problem": "     String contentType = null;\n     for (Header header : request.getAllHeaders()) {\n       String name = header.getName();\n      if (\"Content-Type\".equals(name)) {\n         contentType = header.getValue();\n       } else {\n         builder.header(name, header.getValue());", "fixed": "     String contentType = null;\n     for (Header header : request.getAllHeaders()) {\n       String name = header.getName();\n      if (\"Content-Type\".equalsIgnoreCase(name)) {\n         contentType = header.getValue();\n       } else {\n         builder.header(name, header.getValue());", "sourceBeforeFix": "\"Content-Type\".equals(name)", "sourceAfterFix": "\"Content-Type\".equalsIgnoreCase(name)"}
{"problem": "void METHOD_1 ( int VAR_1 ) { nodes . METHOD_2 ( TYPE_1 : : METHOD_1 ) ; nodes . add ( new TYPE_2 ( ( ( VAR_2 ) ++ ) , VAR_1 , VAR_3 ) ) ; VAR_4 . add ( new java.util.ArrayList < > ( ) ) ; }\n", "fixed": "void METHOD_1 ( int VAR_1 ) { for ( TYPE_2 node : nodes ) { node . METHOD_1 ( ) ; } nodes . add ( new TYPE_2 ( ( ( VAR_2 ) ++ ) , VAR_1 , VAR_3 ) ) ; VAR_4 . add ( new java.util.ArrayList < > ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { float VAR_2 = ( VAR_3 ) / VAR_1 ; new java.lang.Thread ( ( ) - > { while ( ( VAR_3 ) > 0.0F ) { METHOD_2 ( ( ( VAR_3 ) - VAR_2 ) ) ; try { java.lang.Thread . METHOD_3 ( 1 ) ; } catch ( TYPE_1 VAR_4 ) { VAR_4 . METHOD_4 ( ) ; } } METHOD_5 ( VAR_5 . get ( 0 ) ) ; } ) . start ( ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { float VAR_2 = ( VAR_3 ) / VAR_1 ; new java.lang.Thread ( ( ) - > { while ( ( VAR_3 ) > 0.0F ) { METHOD_2 ( ( ( VAR_3 ) - VAR_2 ) ) ; try { java.lang.Thread . METHOD_3 ( 1 ) ; } catch ( TYPE_1 VAR_4 ) { VAR_4 . METHOD_4 ( ) ; } } METHOD_5 ( VAR_5 ) ; } ) . start ( ) ; }\n"}
{"problem": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( VAR_4 ) ) ) ; if ( ( VAR_3 == null ) && VAR_2 ) { VAR_3 = new TYPE_1 ( VAR_1 ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; } return VAR_3 ; }\n", "fixed": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( VAR_4 ) ) ) ; if ( ( VAR_3 == null ) && VAR_2 ) { VAR_3 = new TYPE_1 ( VAR_1 ) ; VAR_1 . METHOD_3 ( VAR_4 , VAR_3 ) ; } return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_2 ( this ) ; } this . VAR_1 = VAR_1 ; if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_3 ( this ) ; } METHOD_4 ( VAR_2 , null , VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( this ) ; } this . VAR_1 = VAR_1 ; if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( this ) ; } METHOD_4 ( VAR_2 , null , VAR_1 ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( java.lang.String url , java.lang.String name , java.lang.String value , java.lang.String VAR_1 , java.lang.String path , long VAR_2 , long VAR_3 , long VAR_4 , boolean VAR_5 , boolean VAR_6 , int VAR_7 , int VAR_8 ) { return new TYPE_1 ( url , name , value , VAR_1 , path , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String value , java.lang.String VAR_1 , java.lang.String path , long VAR_2 , long VAR_3 , long VAR_4 , boolean VAR_5 , boolean VAR_6 , int VAR_7 , int VAR_8 ) { return new TYPE_1 ( name , value , VAR_1 , path , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"problem": "private boolean METHOD_1 ( java.lang.String className ) { if ( VAR_1 . contains ( className ) ) { return true ; } if ( className . contains ( STRING_1 ) ) { return true ; } if ( null != ( VAR_2 . getClass ( className ) ) ) { return true ; } return false ; }\n", "fixed": "protected boolean METHOD_1 ( java.lang.String className ) { if ( VAR_1 . contains ( className ) ) { return true ; } if ( className . contains ( STRING_1 ) ) { return true ; } if ( null != ( VAR_2 . getClass ( className ) ) ) { return true ; } return false ; }\n"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { new TYPE_3 ( VAR_1 ) { { TYPE_4 . METHOD_2 ( VAR_1 , STRING_1 ) ; result = new TYPE_5 ( ) ; VAR_2 = 1 ; } } ; TYPE_6 < TYPE_7 > VAR_3 = VAR_1 . METHOD_3 ( ) ; int VAR_4 = 0 ; while ( VAR_3 . iterator ( ) . METHOD_4 ( ) ) { VAR_4 ++ ; VAR_3 . iterator ( ) . METHOD_5 ( ) ; } TYPE_8 . assertEquals ( 0 , VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { new TYPE_3 ( VAR_1 ) { { TYPE_4 . METHOD_2 ( VAR_1 , STRING_1 ) ; result = new TYPE_5 ( ) ; VAR_2 = 1 ; } } ; TYPE_6 < TYPE_7 > VAR_3 = VAR_1 . METHOD_3 ( ) ; int VAR_4 = 0 ; while ( VAR_3 . iterator ( ) . METHOD_4 ( ) ) { VAR_4 ++ ; VAR_3 . iterator ( ) . METHOD_5 ( ) ; } assertEquals ( 0 , VAR_4 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"problem": "public TYPE_1 METHOD_1 ( int x , int y , int VAR_1 , byte VAR_2 , TYPE_2 VAR_3 ) { if ( VAR_2 < INT_1 ) return new TYPE_1 ( FLOAT_1 , 1 , 1 ) . update ( new TYPE_3 ( x , y , ( VAR_1 + FLOAT_2 ) ) ) ; else return new TYPE_1 ( 1 , 1 , FLOAT_1 ) . update ( new TYPE_3 ( x , y , VAR_1 ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int x , int y , int VAR_1 , byte VAR_2 , TYPE_2 VAR_3 ) { if ( VAR_2 < INT_1 ) return new TYPE_1 ( FLOAT_1 , 1 , 1 ) . update ( new TYPE_3 ( x , y , ( VAR_1 + FLOAT_2 ) ) ) ; else return new TYPE_1 ( 1 , 1 , FLOAT_1 ) . update ( new TYPE_3 ( ( x + FLOAT_2 ) , y , VAR_1 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . info ( STRING_1 ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_2 ) ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_2 ) ; TYPE_6 VAR_5 = VAR_2 . METHOD_3 ( STRING_2 ) . METHOD_3 ( ) ; TYPE_7 . start ( VAR_5 , VAR_3 , VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . info ( STRING_1 ) ; this . VAR_1 = VAR_1 ; TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_2 ) ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_2 ) ; TYPE_6 VAR_5 = VAR_2 . METHOD_3 ( STRING_2 ) . METHOD_3 ( ) ; TYPE_7 . start ( VAR_5 , VAR_3 , VAR_4 ) ; }\n"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n     final Map<String, Integer> cssNames;", "fixed": "   \n  public static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n     final Map<String, Integer> cssNames;", "sourceBeforeFix": "1024", "sourceAfterFix": "1028"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "fixed": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic abstract void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { VAR_2 . METHOD_2 ( position ) ; METHOD_3 ( VAR_2 ) ; java.lang.String VAR_3 = VAR_2 . getString ( 1 ) ; android.content.Intent i = new android.content.Intent ( this , VAR_4 class ) ; i . METHOD_4 ( \"name\" , VAR_3 ) ; METHOD_5 ( i ) ; if ( VAR_5 ) { METHOD_6 ( VAR_6 , VAR_7 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { VAR_2 . METHOD_2 ( position ) ; java.lang.String VAR_3 = VAR_2 . getString ( 1 ) ; android.content.Intent i = new android.content.Intent ( this , VAR_4 class ) ; i . METHOD_4 ( \"name\" , VAR_3 ) ; METHOD_5 ( i ) ; if ( VAR_5 ) { METHOD_6 ( VAR_6 , VAR_7 ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { try { java.util.Scanner VAR_2 = new java.util.Scanner ( new java.io.File ( VAR_1 ) ) ; VAR_3 = VAR_2 . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; } catch ( java.io.IOException VAR_4 ) { java.lang.System.out.println ( VAR_4 . METHOD_5 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { try { java.util.Scanner VAR_2 = new java.util.Scanner ( new java.io.File ( VAR_1 ) ) ; VAR_3 = VAR_2 . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; java.lang.System.out.println ( VAR_3 ) ; VAR_2 . METHOD_4 ( ) ; } catch ( java.io.IOException VAR_4 ) { java.lang.System.out.println ( VAR_4 . METHOD_5 ( ) ) ; } }\n"}
{"problem": "protected void METHOD_1 ( ) throws java.io.IOException , TYPE_1 , TYPE_2 { int c = METHOD_2 ( ) ; if ( c == CHAR_1 ) { VAR_1 = METHOD_3 ( ) ; } else if ( c == CHAR_2 ) { VAR_1 = METHOD_4 ( ) ; } else { VAR_1 = METHOD_5 ( ) ; } METHOD_6 ( VAR_2 , VAR_3 , VAR_1 ) ; }\n", "fixed": "protected void METHOD_1 ( ) throws java.io.IOException , TYPE_1 , TYPE_2 { int c = METHOD_2 ( ) ; if ( c == CHAR_1 ) { VAR_1 = METHOD_3 ( ) ; } else if ( c == CHAR_2 ) { VAR_1 = METHOD_4 ( ) ; } else { VAR_1 = METHOD_5 ( ) ; METHOD_6 ( VAR_2 , VAR_3 , VAR_1 ) ; } }\n"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();", "fixed": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { final java.util.List < TYPE_2 > VAR_2 = VAR_1 . METHOD_2 ( VAR_3 class ) ; for ( TYPE_2 VAR_4 : VAR_2 ) { final java.lang.Integer VAR_5 = ( ( ( VAR_6 ) != null ) && ( ( VAR_6 ) > 1 ) ) ? VAR_6 : 1 ; METHOD_3 ( ( ( VAR_7 ) + ( VAR_8 ) ) , TYPE_3 . METHOD_4 ( VAR_5 ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { final java.util.List < TYPE_2 > VAR_2 = VAR_1 . METHOD_2 ( VAR_3 class ) ; for ( TYPE_2 VAR_4 : VAR_2 ) { final java.lang.Integer VAR_5 = ( ( ( VAR_6 ) != null ) && ( ( VAR_6 ) > 1 ) ) ? VAR_6 : 1 ; METHOD_3 ( VAR_7 , TYPE_3 . METHOD_4 ( VAR_5 ) ) ; } }\n"}
{"problem": "private boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 { boolean VAR_3 = false ; TYPE_3 VAR_4 = null ; TYPE_4 VAR_5 = null ; try { VAR_4 = VAR_1 . METHOD_2 ( ) ; VAR_5 = VAR_4 . METHOD_3 ( null , null , VAR_2 , null ) ; if ( VAR_5 . METHOD_4 ( ) ) { VAR_3 = true ; } } finally { TYPE_5 . METHOD_5 ( VAR_5 ) ; } return VAR_3 ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 { boolean VAR_3 = false ; TYPE_3 VAR_4 = null ; TYPE_4 VAR_5 = null ; try { VAR_4 = VAR_1 . METHOD_2 ( ) ; VAR_5 = VAR_4 . METHOD_3 ( null , null , VAR_2 . toLowerCase ( ) , null ) ; if ( VAR_5 . METHOD_4 ( ) ) { VAR_3 = true ; } } finally { TYPE_5 . METHOD_5 ( VAR_5 ) ; } return VAR_3 ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedZooKeeperEndpointBuilder\n             extends\n                 AdvancedZooKeeperEndpointConsumerBuilder, AdvancedZooKeeperEndpointProducerBuilder {\n         default ZooKeeperEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedZooKeeperEndpointBuilder\n             extends\n                 AdvancedZooKeeperEndpointConsumerBuilder, AdvancedZooKeeperEndpointProducerBuilder {\n         default ZooKeeperEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , int VAR_3 ) throws TYPE_4 { if ( VAR_2 == null ) VAR_2 = new TYPE_3 ( ) ; this . VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_2 . METHOD_3 ( new TYPE_5 ( STRING_1 , VAR_1 . getId ( ) ) ) . METHOD_4 ( ) ; java.util.ArrayList < TYPE_1 > result = this . VAR_4 . METHOD_5 ( 0 ) ; this . VAR_4 . METHOD_2 ( null ) ; return result ; }\n", "fixed": "public java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , int VAR_3 ) throws TYPE_4 { if ( VAR_2 == null ) VAR_2 = new TYPE_3 ( ) ; this . VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_2 . METHOD_3 ( new TYPE_5 ( STRING_1 , VAR_1 . getId ( ) ) ) . METHOD_4 ( ) ; java.util.ArrayList < TYPE_1 > result = this . VAR_4 . METHOD_5 ( VAR_3 ) ; this . VAR_4 . METHOD_2 ( null ) ; return result ; }\n"}
{"problem": "public float [ ] getData ( ) { float [ ] data = new float [ VAR_1 . length ] ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { data [ i ] = VAR_2 [ i ] ; } return data ; }\n", "fixed": "public float [ ] getData ( ) { float [ ] data = new float [ VAR_2 . length ] ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { data [ i ] = VAR_2 [ i ] ; } return data ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return ; } TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 class , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_4 class ) . METHOD_4 ( \"id\" , VAR_1 . getId ( ) ) . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return ; } TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 class , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { VAR_3 . remove ( VAR_2 ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { try { final java.util.Date VAR_2 = METHOD_2 ( VAR_3 . METHOD_3 ( VAR_1 ) ) ; final java.lang.String date = VAR_4 . format ( VAR_2 ) ; final java.lang.String time = VAR_5 . format ( VAR_2 ) ; return ( date + STRING_1 ) + time ; } catch ( TYPE_1 VAR_6 ) { TYPE_2 . METHOD_4 ( VAR_7 , ( STRING_2 + VAR_1 ) ) ; } return STRING_3 ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { try { final java.util.Date VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; final java.lang.String date = VAR_4 . format ( VAR_2 ) ; final java.lang.String time = VAR_5 . format ( VAR_2 ) ; return ( date + STRING_1 ) + time ; } catch ( TYPE_1 VAR_6 ) { TYPE_2 . METHOD_4 ( VAR_7 , ( STRING_2 + VAR_1 ) ) ; } return STRING_3 ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . get ( ) ; TYPE_1 . METHOD_1 ( STRING_1 , null ) . get ( ) ; VAR_2 . METHOD_2 ( ) . get ( ) ; TYPE_1 . METHOD_1 ( STRING_2 , null ) . get ( ) ; VAR_3 . METHOD_3 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . get ( ) ; TYPE_1 . METHOD_1 ( STRING_1 , null ) . get ( ) ; VAR_2 . METHOD_2 ( ) . get ( ) ; TYPE_1 . METHOD_1 ( STRING_2 , null ) . get ( ) ; VAR_3 . METHOD_3 ( ) . get ( ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View view ) { TYPE_1 . get ( ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_4 ( STRING_1 , TYPE_1 . get ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_7 ( VAR_3 ) ; METHOD_8 ( ) . METHOD_9 ( ) . add ( VAR_4 , VAR_2 ) . commit ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { TYPE_1 . get ( ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_4 ( STRING_1 , TYPE_1 . get ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_7 ( VAR_3 ) ; METHOD_8 ( ) . METHOD_9 ( ) . replace ( VAR_4 , VAR_2 ) . commit ( ) ; }\n"}
{"problem": "private void init ( ) { try { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_1 ( ) . METHOD_2 ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { this . VAR_4 . add ( VAR_3 . getName ( ) ) ; } } catch ( java.io.IOException VAR_5 ) { this . errors . add ( STRING_1 ) ; TYPE_2 . info ( VAR_5 ) ; } }\n", "fixed": "private void init ( ) { try { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_1 ( ) . METHOD_2 ( ) ; if ( VAR_1 != null ) { for ( TYPE_1 VAR_3 : VAR_1 ) { this . VAR_4 . add ( VAR_3 . getName ( ) ) ; } } } catch ( java.io.IOException VAR_5 ) { this . errors . add ( STRING_1 ) ; TYPE_2 . info ( VAR_5 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { if ( ( VAR_1 . length ) == 0 ) return ; VAR_2 . METHOD_2 ( ) ; for ( final TYPE_1 VAR_3 : VAR_1 ) { VAR_4 . add ( VAR_3 ) ; remove ( VAR_3 ) ; boolean VAR_5 = ( VAR_6 . METHOD_3 ( ) . METHOD_4 ( ) ) != null ; METHOD_5 ( VAR_5 ) ; VAR_7 . METHOD_1 ( VAR_3 , new TYPE_2 ( ) { public TYPE_3 METHOD_6 ( ) { return METHOD_7 ( VAR_3 ) ; } } ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { if ( ( VAR_1 . length ) == 0 ) return ; VAR_2 . METHOD_2 ( ) ; for ( final TYPE_1 VAR_3 : VAR_1 ) { VAR_7 . METHOD_1 ( VAR_3 , new TYPE_2 ( ) { public TYPE_3 METHOD_6 ( ) { return METHOD_7 ( VAR_3 ) ; } } ) ; VAR_4 . add ( VAR_3 ) ; remove ( VAR_3 ) ; boolean VAR_5 = ( VAR_6 . METHOD_3 ( ) . METHOD_4 ( ) ) != null ; METHOD_5 ( VAR_5 ) ; } }\n"}
{"fixCommitSHA1": "178ff1dab007c547844a2195b178ae298b6138b5", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         Set<Object> unique = new HashSet<Object>();\n         for (Future<String> future : responses.values()) {\n            String reply = future.get(30, TimeUnit.SECONDS);\n             assertNotNull(\"Should get a reply\", reply);\n             unique.add(reply);\n         }", "fixed": "         Set<Object> unique = new HashSet<Object>();\n         for (Future<String> future : responses.values()) {\n            String reply = future.get(120, TimeUnit.SECONDS);\n             assertNotNull(\"Should get a reply\", reply);\n             unique.add(reply);\n         }", "sourceBeforeFix": "future.get(30,TimeUnit.SECONDS)", "sourceAfterFix": "future.get(120,TimeUnit.SECONDS)"}
{"problem": "private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 ( STRING_1 ) { public boolean execute ( ) { VAR_2 . METHOD_1 ( VAR_3 , new TYPE_2 ( ) { public void METHOD_3 ( ) { TYPE_3 . i ( VAR_4 , STRING_2 ) ; METHOD_4 ( true ) ; METHOD_5 ( ) ; } public void METHOD_6 ( int error ) { TYPE_3 . i ( VAR_4 , ( STRING_3 + error ) ) ; METHOD_5 ( ) ; } } ) ; return true ; } } ) ; }\n", "fixed": "private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 ( STRING_1 ) { public boolean execute ( ) { VAR_2 . METHOD_1 ( VAR_3 , new TYPE_2 ( ) { public void METHOD_3 ( ) { TYPE_3 . i ( VAR_4 , STRING_2 ) ; METHOD_5 ( ) ; } public void METHOD_6 ( int error ) { TYPE_3 . i ( VAR_4 , ( STRING_3 + error ) ) ; METHOD_5 ( ) ; } } ) ; return true ; } } ) ; }\n"}
{"problem": "public double METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( double ) ( VAR_1 . METHOD_2 ( VAR_2 , null ) . METHOD_3 ( ) ) ) / ( ( double ) ( VAR_1 . METHOD_2 ( VAR_2 , null ) . METHOD_4 ( ) ) ) ; }\n", "fixed": "public double METHOD_1 ( TYPE_1 VAR_1 ) { return 1 - ( ( ( double ) ( VAR_1 . METHOD_2 ( VAR_2 , null ) . METHOD_3 ( ) ) ) / ( ( double ) ( VAR_1 . METHOD_2 ( VAR_2 , null ) . METHOD_4 ( ) ) ) ) ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { java.util.ArrayList < TYPE_1 > VAR_5 = new java.util.ArrayList < TYPE_1 > ( ) ; int VAR_6 = TYPE_5 . METHOD_2 ( VAR_1 , VAR_2 ) . METHOD_3 ( ) ; for ( int i = 0 ; i < VAR_6 ; i ++ ) { } VAR_7 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_3 ) ) ; VAR_5 . add ( VAR_7 ) ; return VAR_5 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { java.util.ArrayList < TYPE_1 > VAR_5 = new java.util.ArrayList < TYPE_1 > ( ) ; int VAR_6 = TYPE_5 . METHOD_2 ( VAR_1 , VAR_2 ) . METHOD_3 ( ) ; return VAR_5 ; }\n"}
{"problem": "public static void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) . METHOD_2 ( ) ; VAR_2 = new TYPE_1 ( ) . METHOD_3 ( ) ; VAR_3 = new TYPE_1 ( ) . METHOD_4 ( ) ; VAR_4 = new TYPE_1 ( ) . METHOD_5 ( ) ; VAR_5 = new TYPE_1 ( ) . METHOD_6 ( ) ; VAR_6 = new TYPE_1 ( ) . METHOD_7 ( ) ; VAR_7 = new TYPE_1 ( ) . METHOD_8 ( ) ; VAR_8 = new TYPE_1 ( ) . METHOD_9 ( ) ; }\n", "fixed": "public static void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) . METHOD_2 ( ) ; VAR_2 = new TYPE_1 ( ) . METHOD_3 ( ) ; VAR_3 = new TYPE_1 ( ) . METHOD_4 ( ) ; VAR_4 = new TYPE_1 ( ) . METHOD_5 ( ) ; VAR_5 = new TYPE_1 ( ) . METHOD_6 ( ) ; VAR_6 = new TYPE_1 ( ) . METHOD_7 ( ) ; VAR_7 = new TYPE_1 ( ) . METHOD_8 ( ) ; }\n"}
{"fixCommitSHA1": "69b950bf50cc482a7bac2631a0d4d5afae964a94", "projectName": "swagger-api.swagger-core", "bugType": "Same Function More Args", "problem": "         BASE_CLASSES = Collections.unmodifiableMap(baseClasses);\n         final Map<String, PrimitiveType> externalClasses = new HashMap<String, PrimitiveType>();\n        addKeys(externalClasses, DATE, \"org.joda.time.LocalDate\");\n         addKeys(externalClasses, DATE_TIME, \"org.joda.time.DateTime\", \"org.joda.time.ReadableDateTime\",\n                \"javax.xml.datatype.XMLGregorianCalendar\");\n         EXTERNAL_CLASSES = Collections.unmodifiableMap(externalClasses);\n         final Map<String, PrimitiveType> names = new TreeMap<String, PrimitiveType>(String.CASE_INSENSITIVE_ORDER);", "fixed": "         BASE_CLASSES = Collections.unmodifiableMap(baseClasses);\n         final Map<String, PrimitiveType> externalClasses = new HashMap<String, PrimitiveType>();\n        addKeys(externalClasses, DATE, \"org.joda.time.LocalDate\", \"java.time.LocalDate\");\n         addKeys(externalClasses, DATE_TIME, \"org.joda.time.DateTime\", \"org.joda.time.ReadableDateTime\",\n                \"javax.xml.datatype.XMLGregorianCalendar\", \"java.time.LocalDateTime\");\n         EXTERNAL_CLASSES = Collections.unmodifiableMap(externalClasses);\n         final Map<String, PrimitiveType> names = new TreeMap<String, PrimitiveType>(String.CASE_INSENSITIVE_ORDER);", "sourceBeforeFix": "addKeys(externalClasses,DATE,\"org.joda.time.LocalDate\")", "sourceAfterFix": "addKeys(externalClasses,DATE,\"org.joda.time.LocalDate\",\"java.time.LocalDate\")"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_1 . execute ( STRING_1 ) ; VAR_1 . execute ( STRING_2 ) ; VAR_1 . execute ( STRING_3 ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_3 ( STRING_4 ) ; VAR_3 . METHOD_4 ( ) ; TYPE_3 . assertTrue ( VAR_3 . getString ( 1 ) . equals ( STRING_5 ) ) ; VAR_3 . METHOD_5 ( ) ; VAR_1 . METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_1 . execute ( STRING_1 ) ; VAR_1 . execute ( STRING_2 ) ; VAR_1 . execute ( STRING_3 ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_3 ( STRING_4 ) ; VAR_3 . METHOD_4 ( ) ; assertTrue ( VAR_3 . getString ( 1 ) . equals ( STRING_5 ) ) ; VAR_3 . METHOD_5 ( ) ; VAR_1 . METHOD_5 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private static float METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; int VAR_3 = ( VAR_1 . METHOD_2 ( ) . METHOD_4 ( ) ) + 1 ; float VAR_4 = ( ( ( float ) ( VAR_3 ) ) / VAR_3 ) + VAR_2 ; return VAR_4 ; }\n", "fixed": "private static float METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; int VAR_3 = ( VAR_1 . METHOD_2 ( ) . METHOD_4 ( ) ) + 1 ; float VAR_4 = ( ( float ) ( VAR_3 ) ) / ( VAR_3 + VAR_2 ) ; return VAR_4 ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { try { if ( ( ( VAR_1 ) <= ( VAR_2 . size ( ) ) ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) { return VAR_3 . METHOD_2 ( VAR_2 . get ( VAR_1 ) ) ; } return null ; } finally { ( VAR_1 ) ++ ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { try { if ( ( ( VAR_1 ) < ( VAR_2 . size ( ) ) ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) { return VAR_3 . METHOD_2 ( VAR_2 . get ( VAR_1 ) ) ; } return null ; } finally { ( VAR_1 ) ++ ; } }\n"}
{"problem": "public void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { final java.lang.String VAR_2 = VAR_3 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( true , VAR_2 ) ; VAR_3 . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( ) ; VAR_4 . METHOD_6 ( ) ; this . METHOD_7 ( ) ; } else if ( ! ( VAR_5 . METHOD_8 ( VAR_6 ) ) ) { TYPE_1 . METHOD_9 ( ) ; } VAR_7 = false ; }\n", "fixed": "public void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { VAR_4 . METHOD_6 ( ) ; this . METHOD_7 ( ) ; } else if ( ! ( VAR_5 . METHOD_8 ( VAR_6 ) ) ) { TYPE_1 . METHOD_9 ( ) ; } VAR_7 = false ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 result : VAR_1 ) { if ( ( METHOD_2 ( result ) ) && ( METHOD_3 ( result ) ) ) { VAR_2 . add ( result ) ; } } return VAR_2 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 result : VAR_1 ) { if ( ( METHOD_2 ( result ) ) || ( METHOD_3 ( result ) ) ) { VAR_2 . add ( result ) ; } } return VAR_2 ; }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 . METHOD_2 ( ) ) ) ; TYPE_1 VAR_3 = TYPE_4 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) ) ; VAR_3 . data ( ) . METHOD_6 ( ) ; return VAR_3 ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 . METHOD_2 ( ) ) ) ; TYPE_1 VAR_3 = TYPE_4 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , 1 , VAR_2 . METHOD_5 ( ) ) ; VAR_3 . data ( ) . METHOD_6 ( ) ; return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( final TYPE_1 VAR_1 ) throws java.io.IOException , java.lang.ClassNotFoundException { super . METHOD_1 ( VAR_1 ) ; final TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ; METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ( ( java.lang.String ) ( VAR_1 . METHOD_2 ( ) ) ) ) ; }\n", "fixed": "public void METHOD_1 ( final TYPE_1 VAR_1 ) throws java.io.IOException , java.lang.ClassNotFoundException { super . METHOD_1 ( VAR_1 ) ; final TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ; if ( VAR_2 != null ) { METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ; } METHOD_5 ( ( ( java.lang.String ) ( VAR_1 . METHOD_2 ( ) ) ) ) ; }\n"}
{"project": "Math", "bugId": 44, "problem": " protected double acceptStep(final AbstractStepInterpolator interpolator,\n             double previousT = interpolator.getGlobalPreviousTime();\n             final double currentT = interpolator.getGlobalCurrentTime();\n            resetOccurred = false;\n             if (! statesInitialized) {", "fixed": " protected double acceptStep(final AbstractStepInterpolator interpolator,\n             double previousT = interpolator.getGlobalPreviousTime();\n             final double currentT = interpolator.getGlobalCurrentTime();\n             if (! statesInitialized) {", "observations": "The variable and assignment adding are part of the for loop.", "repairActions": ["assignAdd", "assignRem", "loopAdd", "mcAdd", "varAdd"], "repairPatterns": ["copyPaste", "missComp"]}
{"problem": "private void METHOD_1 ( ) { VAR_1 = VAR_2 ; ++ ( VAR_3 ) ; VAR_4 . setText ( STRING_1 ) ; if ( ( ( TYPE_1 . METHOD_2 ( ) ) - ( startTime ) ) > ( VAR_5 ) ) { METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_6 , VAR_7 ) ; } }\n", "fixed": "private void METHOD_1 ( ) { VAR_1 = VAR_2 ; ++ ( VAR_3 ) ; VAR_4 . setText ( STRING_1 ) ; if ( ( ( TYPE_1 . METHOD_2 ( ) ) - ( startTime ) ) > ( VAR_5 ) ) { METHOD_4 ( ) ; METHOD_5 ( VAR_6 , VAR_7 ) ; } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_1 != null ) && ( VAR_2 != null ) ) { if ( ( TYPE_3 . equals ( TYPE_4 . METHOD_2 ( VAR_3 ) ) ) && ( TYPE_5 . equals ( TYPE_4 . METHOD_2 ( VAR_4 ) ) ) ) { return VAR_3 ; } } else if ( VAR_2 == null ) { return VAR_4 ; } else if ( VAR_1 == null ) { return VAR_3 ; } throw new TYPE_6 ( STRING_1 ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_1 != null ) && ( VAR_2 != null ) ) { if ( ( TYPE_3 . equals ( TYPE_4 . METHOD_2 ( VAR_3 ) ) ) && ( TYPE_5 . equals ( TYPE_4 . METHOD_2 ( VAR_4 ) ) ) ) { return VAR_3 ; } } else if ( VAR_1 != null ) { return VAR_4 ; } else if ( VAR_2 != null ) { return VAR_3 ; } throw new TYPE_6 ( STRING_1 ) ; }\n"}
{"problem": "private java.lang.CharSequence METHOD_1 ( final java.lang.String className , final int size ) { return java.lang.String.format ( ( STRING_1 + ( ( ( ( ( ( ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) + STRING_9 ) + STRING_10 ) + STRING_11 ) + STRING_5 ) + STRING_12 ) + STRING_13 ) ) , className , java.lang.Integer . METHOD_2 ( size ) , VAR_1 ) ; }\n", "fixed": "private java.lang.CharSequence METHOD_1 ( final java.lang.String className , final int size ) { return java.lang.String.format ( ( STRING_1 + ( ( ( ( ( ( ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) + STRING_9 ) + STRING_10 ) + STRING_11 ) + STRING_5 ) + STRING_12 ) + STRING_13 ) ) , className , size , VAR_1 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String type ) { switch ( type . toLowerCase ( ) ) { case STRING_1 : return VAR_1 ; case STRING_2 : return VAR_2 ; case STRING_3 : return VAR_3 ; case STRING_4 : return VAR_4 ; case STRING_5 : return VAR_5 ; case STRING_6 : return VAR_6 ; case STRING_7 : return VAR_7 ; case STRING_8 : return VAR_8 ; case STRING_9 : return VAR_9 ; default : return TYPE_1 . NULL ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String type ) { switch ( type . toLowerCase ( ) ) { case STRING_1 : return VAR_1 ; case STRING_2 : return VAR_2 ; case STRING_3 : return VAR_3 ; case STRING_4 : return VAR_3 ; case STRING_5 : return VAR_5 ; case STRING_6 : return VAR_6 ; case STRING_7 : return VAR_7 ; case STRING_8 : return VAR_8 ; case STRING_9 : return VAR_9 ; default : return TYPE_1 . NULL ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( java.lang.String source ) { java.lang.String [ ] date = source . split ( STRING_1 ) ; return new TYPE_1 ( java.lang.Integer.parseInt ( date [ 0 ] ) , java.lang.Integer.parseInt ( date [ 1 ] ) , java.lang.Integer.parseInt ( date [ INT_1 ] ) ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.lang.String source ) { java.lang.String [ ] date = source . split ( STRING_1 ) ; return new TYPE_1 ( java.lang.Integer.parseInt ( date [ 0 ] ) , ( ( java.lang.Integer.parseInt ( date [ 1 ] ) ) - 1 ) , java.lang.Integer.parseInt ( date [ INT_1 ] ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 info ) { if ( info instanceof TYPE_2 ) { this . VAR_1 = ( ( TYPE_2 ) ( info ) ) ; } if ( info instanceof TYPE_3 ) { if ( ( METHOD_2 ( ) . size ( ) ) == 0 ) { TYPE_4 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , STRING_1 , VAR_3 ) . show ( ) ; } else { TYPE_4 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , STRING_2 , VAR_3 ) . show ( ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 info ) { if ( info instanceof TYPE_2 ) { this . VAR_1 = ( ( TYPE_2 ) ( info ) ) ; } if ( info instanceof TYPE_3 ) { if ( ( METHOD_2 ( ) . size ( ) ) == 0 ) { } else { TYPE_4 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , STRING_2 , VAR_3 ) . show ( ) ; } } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { java.lang.String [ ] VAR_1 = new java.lang.String [ 1 ] ; TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( METHOD_3 ( ) , VAR_1 ) ; switch ( VAR_2 ) { case VAR_3 : return VAR_4 ; case VAR_5 : return VAR_6 ; case VAR_7 : return VAR_8 ; case VAR_9 : return VAR_10 ; case VAR_11 : return VAR_10 ; default : return METHOD_4 ( ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { java.lang.String [ ] VAR_1 = new java.lang.String [ 1 ] ; TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( METHOD_3 ( ) , VAR_1 ) ; switch ( VAR_2 ) { case VAR_3 : return VAR_4 ; case VAR_5 : return VAR_6 ; case VAR_7 : return VAR_8 ; case VAR_9 : return VAR_10 ; case VAR_11 : return VAR_6 ; default : return METHOD_4 ( ) ; } }\n"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"problem": "public boolean METHOD_1 ( int VAR_1 , TYPE_1 event ) { if ( VAR_1 == ( VAR_2 ) ) { if ( METHOD_2 ( ) ) { METHOD_3 ( new android.content.Intent ( this , VAR_3 class ) ) ; METHOD_4 ( ) ; } else { METHOD_3 ( new android.content.Intent ( this , VAR_4 class ) ) ; METHOD_4 ( ) ; } } return super . METHOD_1 ( VAR_1 , event ) ; }\n", "fixed": "public boolean METHOD_1 ( int VAR_1 , TYPE_1 event ) { if ( VAR_1 == ( VAR_2 ) ) { if ( METHOD_2 ( ) ) { METHOD_3 ( new android.content.Intent ( this , VAR_4 class ) ) ; METHOD_4 ( ) ; } else { METHOD_3 ( new android.content.Intent ( this , VAR_3 class ) ) ; METHOD_4 ( ) ; } } return super . METHOD_1 ( VAR_1 , event ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( VAR_1 ) ; if ( ( ( VAR_1 . METHOD_3 ( ) ) && ( ! ( VAR_1 . METHOD_4 ( ) ) ) ) && ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) { VAR_3 . METHOD_6 ( TYPE_3 . METHOD_7 ( VAR_1 , VAR_2 ) ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( ( VAR_1 . METHOD_3 ( ) ) && ( ! ( VAR_1 . METHOD_4 ( ) ) ) ) && ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) { VAR_3 . METHOD_6 ( TYPE_3 . METHOD_7 ( VAR_1 , VAR_2 ) ) ; } }\n"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"problem": "public static void METHOD_1 ( java.lang.String format , TYPE_1 VAR_1 ) { switch ( format ) { case STRING_1 : VAR_1 = VAR_2 ; break ; case STRING_2 : VAR_1 = VAR_3 ; break ; case STRING_3 : VAR_1 = VAR_4 ; break ; case STRING_4 : VAR_1 = VAR_5 ; break ; default : VAR_1 = VAR_6 ; break ; } }\n", "fixed": "public static void METHOD_1 ( java.lang.String format , TYPE_1 VAR_1 ) { if ( format == null ) { VAR_1 = VAR_6 ; return ; } switch ( format ) { case STRING_1 : VAR_1 = VAR_2 ; break ; case STRING_2 : VAR_1 = VAR_3 ; break ; case STRING_3 : VAR_1 = VAR_4 ; break ; case STRING_4 : VAR_1 = VAR_5 ; break ; default : VAR_1 = VAR_6 ; break ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 . getSelection ( ) ) ; if ( VAR_2 . getSelection ( ) ) { METHOD_3 ( false ) ; VAR_3 . METHOD_4 ( false ) ; METHOD_5 ( false ) ; VAR_4 . METHOD_4 ( false ) ; } else if ( ( ! ( VAR_3 . getSelection ( ) ) ) && ( ! ( VAR_4 . getSelection ( ) ) ) ) { METHOD_2 ( true ) ; VAR_2 . METHOD_4 ( true ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_5 ( VAR_4 . getSelection ( ) ) ; if ( VAR_4 . getSelection ( ) ) { METHOD_3 ( false ) ; VAR_3 . METHOD_4 ( false ) ; METHOD_2 ( false ) ; VAR_2 . METHOD_4 ( false ) ; } else { if ( ! ( VAR_3 . getSelection ( ) ) ) { METHOD_2 ( true ) ; VAR_2 . METHOD_4 ( true ) ; } } }\n"}
{"fixCommitSHA1": "0e371e64ca957e61a41309c7821cfff946274cbd", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t\t\t} else if (attr.equals(\"COLOR\")) {\r\n \t\t\t\tvertexAttributes.add(VertexAttribute.ColorUnpacked());\r\n \t\t\t} else if (attr.equals(\"COLORPACKED\")) {\r\n\t\t\t\tvertexAttributes.add(VertexAttribute.Color());\r\n \t\t\t} else if (attr.equals(\"TANGENT\")) {\r\n \t\t\t\tvertexAttributes.add(VertexAttribute.Tangent());\r\n \t\t\t} else if (attr.equals(\"BINORMAL\")) {\r", "fixed": " \t\t\t} else if (attr.equals(\"COLOR\")) {\r\n \t\t\t\tvertexAttributes.add(VertexAttribute.ColorUnpacked());\r\n \t\t\t} else if (attr.equals(\"COLORPACKED\")) {\r\n\t\t\t\tvertexAttributes.add(VertexAttribute.ColorPacked());\r\n \t\t\t} else if (attr.equals(\"TANGENT\")) {\r\n \t\t\t\tvertexAttributes.add(VertexAttribute.Tangent());\r\n \t\t\t} else if (attr.equals(\"BINORMAL\")) {\r", "sourceBeforeFix": "VertexAttribute.Color()", "sourceAfterFix": "VertexAttribute.ColorPacked()"}
{"problem": "public int METHOD_1 ( int VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { return VAR_2 ; } int offset = 0 ; for ( int i = 0 ; i < ( VAR_3 . size ( ) ) ; i ++ ) { if ( ( VAR_3 . METHOD_3 ( i ) . VAR_4 ) > VAR_1 ) { break ; } -- offset ; } return VAR_1 + offset ; }\n", "fixed": "public int METHOD_1 ( int VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { return VAR_2 ; } int offset = 0 ; for ( int i = 0 ; i < ( VAR_3 . size ( ) ) ; i ++ ) { if ( ( VAR_3 . METHOD_3 ( i ) . VAR_1 ) > VAR_1 ) { break ; } -- offset ; } return VAR_1 + offset ; }\n"}
{"problem": "public int [ ] METHOD_1 ( ) { if ( ( VAR_1 ) <= ( VAR_2 ) ) { return VAR_3 [ ( ( VAR_1 ) ++ ) ] ; } else { return new int [ ] { - 1 , - 1 , - 1 } ; } }\n", "fixed": "public int [ ] METHOD_1 ( ) { if ( ( VAR_1 ) <= ( VAR_2 ) ) { return VAR_3 [ ( ( VAR_1 ) ++ ) ] ; } else { return new int [ ] { - 1 , - 1 , - 1 , - 1 } ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , true ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { TYPE_2 . METHOD_1 ( ( STRING_5 + i ) , STRING_6 , STRING_7 , TYPE_2 . METHOD_2 ( VAR_1 ) ) ; TYPE_2 . METHOD_3 ( ( STRING_5 + i ) , STRING_6 , STRING_7 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , true ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { TYPE_2 . METHOD_1 ( ( STRING_5 + i ) , STRING_6 , STRING_7 , TYPE_2 . METHOD_2 ( VAR_1 ) ) ; TYPE_2 . METHOD_3 ( ( STRING_5 + i ) , STRING_6 , STRING_7 , TYPE_2 . METHOD_2 ( VAR_1 ) ) ; } }\n"}
{"fixCommitSHA1": "06f15a11212c6c77482e92b901a006212231d808", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         timeZone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(timeZoneId));\n     }\n    protected void setup(String host, int port, String databaseName, String timeZone)\n     {\n         setup(host, port, databaseName, timeZone, \"hive-test\", 100, 50);\n     }\n    protected void setup(String host, int port, String databaseName, String timeZoneId, String connectorName, int maxOutstandingSplits, int maxThreads)\n     {\n         setupHive(connectorName, databaseName, timeZoneId);", "fixed": "         timeZone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(timeZoneId));\n     }\n    protected final void setup(String host, int port, String databaseName, String timeZone)\n     {\n         setup(host, port, databaseName, timeZone, \"hive-test\", 100, 50);\n     }\n    protected final void setup(String host, int port, String databaseName, String timeZoneId, String connectorName, int maxOutstandingSplits, int maxThreads)\n     {\n         setupHive(connectorName, databaseName, timeZoneId);", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"problem": "public boolean METHOD_1 ( java.lang.String str ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; java.lang.String VAR_3 = STRING_3 ; return ( ( TYPE_1 . METHOD_2 ( VAR_1 , str ) ) | ( TYPE_1 . METHOD_2 ( VAR_2 , str ) ) ) | ( TYPE_1 . METHOD_2 ( VAR_3 , str ) ) ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String str ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; java.lang.String VAR_3 = STRING_3 ; return ( ( TYPE_1 . METHOD_2 ( VAR_1 , str ) ) || ( TYPE_1 . METHOD_2 ( VAR_2 , str ) ) ) || ( TYPE_1 . METHOD_2 ( VAR_3 , str ) ) ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 ; TYPE_2 VAR_3 ; try { VAR_2 = VAR_4 . METHOD_2 ( ) ; VAR_3 = VAR_2 . METHOD_3 ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + VAR_1 ) + STRING_4 ) ) ; VAR_3 . METHOD_4 ( ) ; return ( VAR_3 . getInt ( 1 ) ) == 1 ; } catch ( TYPE_3 VAR_5 ) { return false ; } }\n", "fixed": "public boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 ; TYPE_2 VAR_3 ; try { VAR_2 = VAR_4 . METHOD_2 ( ) ; VAR_3 = VAR_2 . METHOD_3 ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 . toUpperCase ( ) ) ) + STRING_4 ) ) ; VAR_3 . METHOD_4 ( ) ; return ( VAR_3 . getInt ( 1 ) ) == 1 ; } catch ( TYPE_3 VAR_5 ) { return false ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , long time ) { TYPE_2 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { return ; } VAR_2 . METHOD_1 ( time ) ; try { VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 , VAR_2 ) ; } catch ( TYPE_3 VAR_5 ) { TYPE_4 . METHOD_5 ( this . getClass ( ) . getName ( ) , VAR_5 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , long time ) { TYPE_2 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { return ; } VAR_2 . METHOD_1 ( time ) ; try { VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 , VAR_2 ) ; } catch ( TYPE_3 VAR_5 ) { TYPE_4 . METHOD_5 ( this . getClass ( ) . getName ( ) , VAR_5 ) ; } finally { VAR_3 . remove ( VAR_1 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { VAR_2 . METHOD_2 ( ) ; for ( final TYPE_1 VAR_3 : VAR_1 ) { VAR_4 . add ( VAR_3 ) ; remove ( VAR_3 ) ; boolean VAR_5 = ( VAR_6 . METHOD_3 ( ) . METHOD_4 ( ) ) != null ; METHOD_5 ( VAR_5 ) ; VAR_7 . METHOD_1 ( VAR_3 , new TYPE_2 ( ) { public TYPE_3 METHOD_6 ( ) { return METHOD_7 ( VAR_3 ) ; } } ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { if ( ( VAR_1 . length ) == 0 ) return ; VAR_2 . METHOD_2 ( ) ; for ( final TYPE_1 VAR_3 : VAR_1 ) { VAR_4 . add ( VAR_3 ) ; remove ( VAR_3 ) ; boolean VAR_5 = ( VAR_6 . METHOD_3 ( ) . METHOD_4 ( ) ) != null ; METHOD_5 ( VAR_5 ) ; VAR_7 . METHOD_1 ( VAR_3 , new TYPE_2 ( ) { public TYPE_3 METHOD_6 ( ) { return METHOD_7 ( VAR_3 ) ; } } ) ; } }\n"}
{"problem": "public static int METHOD_1 ( TYPE_1 VAR_1 , int position ) { int VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; int VAR_3 = TYPE_2 . METHOD_3 ( VAR_1 ) ; int VAR_4 = TYPE_2 . METHOD_4 ( VAR_1 ) ; if ( position < VAR_3 ) { return ( ( VAR_4 + 1 ) - VAR_2 ) + ( position % VAR_2 ) ; } if ( position > VAR_4 ) { return VAR_3 + ( position % VAR_2 ) ; } return position ; }\n", "fixed": "public static int METHOD_1 ( TYPE_1 VAR_1 , int position ) { int VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == 0 ) return 0 ; int VAR_3 = TYPE_2 . METHOD_3 ( VAR_1 ) ; int VAR_4 = TYPE_2 . METHOD_4 ( VAR_1 ) ; if ( position < VAR_3 ) { return ( ( VAR_4 + 1 ) - VAR_2 ) + ( position % VAR_2 ) ; } if ( position > VAR_4 ) { return VAR_3 + ( position % VAR_2 ) ; } return position ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 ; TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 ) ; VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; try { VAR_1 . METHOD_4 ( context , VAR_2 ) ; VAR_1 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( VAR_1 ) ; } catch ( java.io.IOException VAR_6 ) { VAR_5 . METHOD_7 ( VAR_6 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 ; TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 ) ; VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; try { VAR_1 . METHOD_4 ( context , VAR_2 ) ; VAR_1 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( VAR_3 , VAR_1 ) ; } catch ( java.io.IOException VAR_6 ) { VAR_5 . METHOD_7 ( VAR_6 ) ; } }\n"}
{"problem": "private final byte METHOD_1 ( byte VAR_1 , byte VAR_2 , int VAR_3 ) { switch ( VAR_3 ) { case 1 : return VAR_1 ; case INT_1 : return ( ( byte ) ( INT_2 - VAR_2 ) ) ; case INT_3 : return ( ( byte ) ( INT_2 - VAR_1 ) ) ; default : return VAR_1 ; } }\n", "fixed": "private final byte METHOD_1 ( byte VAR_1 , byte VAR_2 , int VAR_3 ) { switch ( VAR_3 ) { case 1 : return VAR_1 ; case INT_1 : return ( ( byte ) ( INT_2 - VAR_2 ) ) ; case INT_3 : return ( ( byte ) ( INT_2 - VAR_1 ) ) ; default : return VAR_2 ; } }\n"}
{"problem": "private boolean METHOD_1 ( TYPE_1 p , int x , int y ) { for ( TYPE_2 t : VAR_1 ) { if ( TYPE_3 . METHOD_2 ( new TYPE_4 ( ( x + ( t . METHOD_3 ( ) . x ) ) , ( y + ( t . METHOD_3 ( ) . y ) ) ) ) ) { return false ; } } return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 p , int x , int y ) { for ( TYPE_2 t : VAR_1 ) { if ( TYPE_3 . METHOD_2 ( new TYPE_4 ( ( x + ( t . METHOD_3 ( ) . x ) ) , ( y + ( t . METHOD_3 ( ) . y ) ) ) ) ) { return false ; } } return true ; }\n"}
{"problem": "public java.lang.Boolean METHOD_1 ( ) { try { if ( TYPE_1 . METHOD_2 ( ) ) { return true ; } else { return false ; } } catch ( TYPE_2 VAR_1 ) { TYPE_3 . METHOD_3 ( VAR_2 , null , VAR_1 ) ; return false ; } }\n", "fixed": "private java.lang.Boolean METHOD_1 ( ) { try { if ( TYPE_1 . METHOD_2 ( ) ) { return true ; } else { return false ; } } catch ( TYPE_2 VAR_1 ) { TYPE_3 . METHOD_3 ( VAR_2 , null , VAR_1 ) ; return false ; } }\n"}
{"fixCommitSHA1": "9f31e09cf0eb035341103471b0e51df96ac9f13c", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\tportFile.deleteOnExit();\n \t\t}\n \t\tcatch (Exception ex) {\n\t\t\tlogger.warn(String.format(\"Cannot create pid file %s\", this.file));\n \t\t}\n \t}", "fixed": " \t\t\tportFile.deleteOnExit();\n \t\t}\n \t\tcatch (Exception ex) {\n\t\t\tlogger.warn(String.format(\"Cannot create port file %s\", this.file));\n \t\t}\n \t}", "sourceBeforeFix": "ApplicationPidFileWriter.class", "sourceAfterFix": "EmbeddedServerPortFileWriter.class"}
{"problem": "public static boolean METHOD_1 ( TYPE_1 item ) { for ( TYPE_2 VAR_1 : VAR_2 ) { if ( TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . VAR_3 , item , false , false ) ) return true ; } for ( TYPE_2 VAR_1 : VAR_4 . values ( ) ) { if ( TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . VAR_3 , item , false , false ) ) return true ; } return false ; }\n", "fixed": "public static boolean METHOD_1 ( TYPE_1 item ) { for ( TYPE_2 VAR_1 : VAR_2 ) { if ( TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . VAR_3 , item , true , false ) ) return true ; } for ( TYPE_2 VAR_1 : VAR_4 . values ( ) ) { if ( TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . VAR_3 , item , true , false ) ) return true ; } return false ; }\n"}
{"problem": "private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) ) ; VAR_2 = new TYPE_1 ( this ) ; VAR_3 = VAR_4 . METHOD_5 ( VAR_5 class . getName ( ) , VAR_2 , new TYPE_2 < java.lang.String , java.lang.Object > ( ) ) ; VAR_2 . METHOD_6 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { if ( ( VAR_4 ) != null ) { VAR_1 . METHOD_2 ( STRING_1 , METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) ) ; VAR_2 = new TYPE_1 ( this ) ; VAR_3 = VAR_4 . METHOD_5 ( VAR_5 class . getName ( ) , VAR_2 , new TYPE_2 < java.lang.String , java.lang.Object > ( ) ) ; VAR_2 . METHOD_6 ( ) ; } }\n"}
{"problem": "private void METHOD_1 ( ) { do { VAR_1 = TYPE_1 . get ( ( STRING_1 + ( TYPE_2 . METHOD_2 ( ) ) ) ) . METHOD_3 ( ) ; } while ( VAR_1 . METHOD_4 ( ) ) ; do { VAR_2 = TYPE_1 . get ( ( STRING_2 + ( TYPE_2 . METHOD_2 ( ) ) ) ) . METHOD_3 ( ) ; } while ( VAR_1 . METHOD_4 ( ) ) ; }\n", "fixed": "private void METHOD_1 ( ) { do { VAR_1 = TYPE_1 . get ( ( STRING_1 + ( TYPE_2 . METHOD_2 ( ) ) ) ) . METHOD_3 ( ) ; } while ( VAR_1 . METHOD_4 ( ) ) ; do { VAR_2 = TYPE_1 . get ( ( STRING_2 + ( TYPE_2 . METHOD_2 ( ) ) ) ) . METHOD_3 ( ) ; } while ( VAR_2 . METHOD_4 ( ) ) ; }\n"}
{"problem": "void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 = true ; if ( ( VAR_2 ) && ( ! ( VAR_3 ) ) ) { VAR_4 . METHOD_3 ( VAR_5 , VAR_6 , VAR_7 ) ; } VAR_8 . METHOD_4 ( ) ; METHOD_5 ( ) ; }\n", "fixed": "void METHOD_1 ( ) { METHOD_2 ( ) ; if ( ( VAR_2 ) && ( ! ( VAR_3 ) ) ) { VAR_4 . METHOD_3 ( VAR_5 , VAR_6 , VAR_7 ) ; } METHOD_5 ( ) ; VAR_8 . METHOD_4 ( ) ; VAR_1 = true ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( this , VAR_4 , VAR_5 ) ; VAR_3 . METHOD_4 ( ) ; METHOD_5 ( ) . METHOD_6 ( true ) ; METHOD_5 ( ) . METHOD_7 ( VAR_6 ) ; METHOD_5 ( ) . METHOD_8 ( true ) ; METHOD_9 ( ) . METHOD_10 ( ) . replace ( VAR_7 , new TYPE_3 ( ) ) . commit ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_5 ) ; VAR_3 . METHOD_4 ( this ) ; METHOD_5 ( ) . METHOD_6 ( true ) ; METHOD_5 ( ) . METHOD_7 ( VAR_6 ) ; METHOD_5 ( ) . METHOD_8 ( true ) ; METHOD_9 ( ) . METHOD_10 ( ) . replace ( VAR_7 , new TYPE_3 ( ) ) . commit ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; VAR_1 = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_3 = ( VAR_1 ) / INT_1 ; VAR_4 . METHOD_4 ( ( ( VAR_4 . METHOD_5 ( ) ) + ( VAR_3 ) ) ) ; VAR_4 . METHOD_6 ( ( ( STRING_2 + ( fileName ) ) + STRING_3 ) ) ; VAR_5 = true ; VAR_6 . METHOD_7 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_3 = ( VAR_1 ) / INT_1 ; VAR_4 . METHOD_4 ( ( ( VAR_4 . METHOD_5 ( ) ) + ( VAR_3 ) ) ) ; VAR_4 . METHOD_6 ( ( ( STRING_2 + ( fileName ) ) + STRING_3 ) ) ; VAR_5 = true ; VAR_6 . METHOD_7 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) { return ; } switch ( VAR_1 . METHOD_3 ( ) ) { case VAR_2 : { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_4 ( ) ; VAR_3 = null ; } break ; } case VAR_4 : { VAR_5 . METHOD_5 ( VAR_6 ) ; VAR_7 . METHOD_5 ( VAR_8 ) ; break ; } } }\n", "fixed": "private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return ; } switch ( VAR_1 . METHOD_3 ( ) ) { case VAR_2 : { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_4 ( ) ; VAR_3 = null ; } break ; } case VAR_4 : { VAR_5 . METHOD_5 ( VAR_6 ) ; VAR_7 . METHOD_5 ( VAR_8 ) ; break ; } } }\n"}
{"problem": "public static void main ( ) { java.lang.System.out.println ( ( STRING_1 + STRING_2 ) ) ; final TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( STRING_2 , INT_1 , INT_2 ) ; TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 , INT_3 , INT_4 ) ; java.lang.System.out.println ( STRING_4 ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] arg ) { java.lang.System.out.println ( ( STRING_1 + STRING_2 ) ) ; final TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( STRING_2 , INT_1 , INT_2 ) ; TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 , INT_3 , INT_4 ) ; java.lang.System.out.println ( STRING_4 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) . add ( STRING_2 , STRING_3 ) . add ( STRING_4 , STRING_5 ) . add ( STRING_6 , STRING_7 ) . add ( STRING_8 , STRING_9 ) ; TYPE_2 . assertEquals ( VAR_2 , VAR_1 . toString ( new TYPE_3 ( ) . METHOD_2 ( true ) ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) . add ( STRING_2 , STRING_3 ) . add ( STRING_4 , STRING_5 ) . add ( STRING_6 , STRING_7 ) . add ( STRING_8 , STRING_9 ) ; TYPE_2 . assertEquals ( VAR_2 , VAR_1 . toString ( new TYPE_3 ( ) ) ) ; }\n"}
{"problem": "void METHOD_1 ( TYPE_1 VAR_1 ) { for ( int i = 0 , size = VAR_2 . size ( ) ; i < size ; i ++ ) { TYPE_2 VAR_3 = VAR_2 . get ( i ) ; VAR_3 . METHOD_2 ( ) ; } VAR_2 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( false ) ; }\n", "fixed": "void METHOD_1 ( TYPE_1 VAR_1 ) { for ( int i = 0 , size = VAR_2 . size ( ) ; i < size ; i ++ ) { TYPE_2 VAR_3 = VAR_2 . get ( i ) ; VAR_3 . METHOD_2 ( ) ; } VAR_2 . METHOD_3 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; VAR_3 . METHOD_6 ( VAR_1 ) ; if ( VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) ) { VAR_1 . METHOD_9 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; VAR_3 . METHOD_6 ( VAR_1 ) ; if ( ! ( VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) ) ) { VAR_1 . METHOD_9 ( ) ; } }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 key , TYPE_2 value , TYPE_3 context ) throws java.io.IOException , TYPE_4 { java.lang.String [ ] VAR_1 = key . toString ( ) . split ( VAR_2 ) ; VAR_3 . set ( java.lang.Long.parseLong ( VAR_1 [ 1 ] ) ) ; VAR_4 . add ( java.lang.Long.parseLong ( VAR_1 [ 1 ] ) ) ; VAR_5 . set ( ( ( ( VAR_1 [ 0 ] ) + ( VAR_2 ) ) + ( value . toString ( ) ) ) ) ; context . METHOD_2 ( VAR_3 , VAR_5 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 key , TYPE_2 value , TYPE_3 context ) throws java.io.IOException , TYPE_4 { java.lang.String [ ] VAR_1 = key . toString ( ) . split ( VAR_2 ) ; VAR_3 . set ( java.lang.Integer.parseInt ( VAR_1 [ 1 ] ) ) ; VAR_4 . add ( java.lang.Integer.parseInt ( VAR_1 [ 1 ] ) ) ; VAR_5 . set ( ( ( ( VAR_1 [ 0 ] ) + ( VAR_2 ) ) + ( value . toString ( ) ) ) ) ; context . METHOD_2 ( VAR_3 , VAR_5 ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.Integer VAR_1 , java.lang.String name ) { VAR_2 . add ( VAR_1 ) ; VAR_3 . add ( name ) ; METHOD_2 ( ( ( VAR_3 . size ( ) ) - 1 ) , ( ( VAR_4 ) - 1 ) ) ; ( VAR_5 ) ++ ; }\n", "fixed": "public void METHOD_1 ( java.lang.Integer VAR_1 , java.lang.String name ) { if ( ! ( VAR_2 . contains ( VAR_1 ) ) ) { VAR_2 . add ( VAR_1 ) ; VAR_3 . add ( name ) ; METHOD_2 ( ( ( VAR_3 . size ( ) ) - 1 ) , ( ( VAR_4 ) - 1 ) ) ; ( VAR_5 ) ++ ; } }\n"}
{"problem": "private void METHOD_1 ( ) { for ( int y = 0 ; y < ( VAR_1 ) ; y ++ ) { for ( int x = 0 ; x < ( VAR_2 ) ; x ++ ) { METHOD_2 ( x , y ) . METHOD_3 ( true ) ; } } }\n", "fixed": "private void METHOD_1 ( ) { for ( int y = 0 ; y < ( VAR_1 ) ; y ++ ) { for ( int x = 0 ; x < ( VAR_2 ) ; x ++ ) { METHOD_2 ( y , x ) . METHOD_3 ( true ) ; } } }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"problem": "private int [ ] METHOD_1 ( int number ) { switch ( number ) { case 0 : return new int [ ] { VAR_1 , VAR_2 , VAR_3 } ; case 1 : return new int [ ] { VAR_2 , VAR_3 , VAR_1 } ; case INT_1 : return new int [ ] { VAR_3 , VAR_1 , VAR_2 } ; default : return new int [ ] { VAR_1 , VAR_2 , VAR_3 } ; } }\n", "fixed": "private int [ ] METHOD_1 ( int number ) { switch ( number ) { case 0 : return new int [ ] { VAR_1 , VAR_2 , VAR_3 } ; case 1 : return new int [ ] { VAR_2 , VAR_3 , VAR_1 } ; case INT_1 : return new int [ ] { VAR_3 , VAR_1 , VAR_2 } ; default : return new int [ ] { VAR_3 , VAR_1 , VAR_2 } ; } }\n"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "fixed": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "f4fc27fb0ef1d23230c1f1c55a1234fba1c0acf7", "projectName": "jfeinstein10.SlidingMenu", "bugType": "Change Numeric Literal", "problem": " \t * @param animate true to animate the transition, false to ignore animation\n \t */\n \tpublic void showBehind(boolean animate) {\n\t\tmViewAbove.setCurrentItem(2, animate);\n \t}\n \t/**", "fixed": " \t * @param animate true to animate the transition, false to ignore animation\n \t */\n \tpublic void showBehind(boolean animate) {\n\t\tmViewAbove.setCurrentItem(0, animate);\n \t}\n \t/**", "sourceBeforeFix": "mViewAbove.setCurrentItem(2,animate)", "sourceAfterFix": "mViewAbove.setCurrentItem(0,animate)"}
{"fixCommitSHA1": "2c3feeb727c012f119e4c55efb51665a71a2d259", "projectName": "apache.hadoop", "bugType": "Change Numeric Literal", "problem": "   }\n  @Test (timeout = 120000)\n   public void testProfiler() throws IOException, InterruptedException,\n       ClassNotFoundException {\n     if (!(new File(MiniMRYarnCluster.APPJAR)).exists()) {", "fixed": "   }\n  @Test (timeout = 150000)\n   public void testProfiler() throws IOException, InterruptedException,\n       ClassNotFoundException {\n     if (!(new File(MiniMRYarnCluster.APPJAR)).exists()) {", "sourceBeforeFix": "timeout=120000", "sourceAfterFix": "timeout=150000"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c7fd539c43b8e027a74d0f9118e9f3d48bc930d1", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                             clusterMap.delete(buildAttributeName(entry.getKey()));\n                             iterator.remove();\n                         } else {\n                            clusterMap.put(buildAttributeName(entry.getKey()), cacheEntry.value);\n                             cacheEntry.dirty = false;\n                         }\n                     }", "fixed": "                             clusterMap.delete(buildAttributeName(entry.getKey()));\n                             iterator.remove();\n                         } else {\n                            clusterMap.set(buildAttributeName(entry.getKey()), cacheEntry.value);\n                             cacheEntry.dirty = false;\n                         }\n                     }", "sourceBeforeFix": "getClusterMap().put(buildAttributeName(name),value)", "sourceAfterFix": "getClusterMap().set(buildAttributeName(name),value)"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_4 ) { if ( ! ( VAR_3 . isEmpty ( ) ) ) { if ( VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ) return VAR_3 ; } } TYPE_1 VAR_3 = METHOD_3 ( ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 ) { synchronized ( VAR_4 ) { for ( TYPE_1 VAR_3 : VAR_4 ) { if ( ! ( VAR_3 . isEmpty ( ) ) ) { if ( VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ) return VAR_3 ; } } TYPE_1 VAR_3 = METHOD_3 ( ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; return VAR_3 ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , TYPE_2 VAR_2 ) { if ( TYPE_3 . METHOD_2 ( VAR_3 . getText ( ) ) ) { VAR_3 . setText ( VAR_2 . getName ( ) ) ; } METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_2 != null ) { if ( TYPE_3 . METHOD_2 ( VAR_3 . getText ( ) ) ) { VAR_3 . setText ( VAR_2 . getName ( ) ) ; } } METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( int VAR_1 , TYPE_1 node , TYPE_1 VAR_2 ) { TYPE_1 VAR_3 = null ; java.lang.System.out.println ( ( ( VAR_1 + STRING_1 ) + ( VAR_4 ) ) ) ; if ( ( VAR_1 != 0 ) && ( ! ( VAR_4 . get ( VAR_1 ) ) ) ) { VAR_4 . set ( VAR_1 , true ) ; METHOD_2 ( node , VAR_2 , VAR_1 ) ; } else { VAR_3 = node . METHOD_3 ( VAR_2 ) ; } return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int VAR_1 , TYPE_1 node , TYPE_1 VAR_2 ) { TYPE_1 VAR_3 = null ; if ( ( VAR_1 != 0 ) && ( ! ( VAR_4 . get ( VAR_1 ) ) ) ) { VAR_4 . set ( VAR_1 , true ) ; METHOD_2 ( node , VAR_2 , VAR_1 ) ; } else { VAR_3 = node . METHOD_3 ( VAR_2 ) ; } return VAR_3 ; }\n"}
{"problem": "protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( null ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; java.io.File VAR_2 = new java.io.File ( VAR_3 ) ; if ( VAR_2 . METHOD_5 ( ) ) { TYPE_1 . append ( VAR_4 , VAR_3 ) ; VAR_2 . delete ( ) ; } }\n", "fixed": "protected void METHOD_1 ( ) { VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; java.io.File VAR_2 = new java.io.File ( VAR_3 ) ; if ( VAR_2 . METHOD_5 ( ) ) { TYPE_1 . append ( VAR_4 , VAR_3 ) ; VAR_2 . delete ( ) ; } }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"problem": "private boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( ( VAR_1 . length ( ) ) != ( VAR_2 . length ( ) ) ) return false ; for ( int i = 0 ; i < ( VAR_1 . length ( ) ) ; i ++ ) { if ( ( VAR_1 . METHOD_2 ( i ) ) != ( VAR_2 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( ( VAR_1 . length ( ) ) != ( VAR_2 . length ( ) ) ) return false ; for ( int i = 0 ; i < ( VAR_1 . length ( ) ) ; i ++ ) { if ( ( VAR_1 . METHOD_2 ( i ) ) != ( VAR_2 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }\n"}
{"problem": "public void METHOD_1 ( ) { double VAR_1 = INT_1 ; double VAR_2 = INT_2 ; assertEquals ( STRING_1 , 0.0 , TYPE_1 . METHOD_2 ( VAR_1 , 0 ) ) ; assertEquals ( STRING_2 , FLOAT_1 , TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ) ; assertEquals ( STRING_3 , FLOAT_2 , TYPE_1 . METHOD_2 ( 1 , 1 ) ) ; assertEquals ( STRING_4 , FLOAT_3 , TYPE_1 . METHOD_2 ( INT_2 , INT_1 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { double VAR_1 = INT_1 ; double VAR_2 = INT_2 ; assertEquals ( STRING_1 , 0.0 , TYPE_1 . METHOD_2 ( VAR_1 , 0 ) , 0 ) ; assertEquals ( STRING_2 , FLOAT_1 , TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) , 0 ) ; assertEquals ( STRING_3 , FLOAT_2 , TYPE_1 . METHOD_2 ( 1 , 1 ) , 0 ) ; assertEquals ( STRING_4 , FLOAT_3 , TYPE_1 . METHOD_2 ( INT_2 , INT_1 ) , 0 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJingEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JingEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJingEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JingEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) { VAR_1 = VAR_1 . toLowerCase ( VAR_5 ) ; VAR_2 = VAR_2 . toLowerCase ( VAR_5 ) ; java.lang.System.out.println ( ( STRING_1 + VAR_2 ) ) ; if ( VAR_2 . equals ( METHOD_2 ( ) . toLowerCase ( VAR_5 ) ) ) { METHOD_3 ( ) . remove ( VAR_1 ) ; } else { METHOD_3 ( ) . get ( VAR_1 ) . remove ( VAR_2 ) ; } }\n", "fixed": "protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) { VAR_1 = VAR_1 . toLowerCase ( VAR_5 ) ; VAR_2 = VAR_2 . toLowerCase ( VAR_5 ) ; if ( VAR_2 . equals ( METHOD_2 ( ) . toLowerCase ( VAR_5 ) ) ) { METHOD_3 ( ) . remove ( VAR_1 ) ; } else { METHOD_3 ( ) . get ( VAR_1 ) . remove ( VAR_2 ) ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( ) throws java.lang.Exception { this . VAR_1 = ( this . VAR_2 ) ? this . VAR_3 . METHOD_2 ( this . VAR_4 ) : this . VAR_4 . METHOD_2 ( this . VAR_3 ) ; return METHOD_3 ( ( ( this . VAR_1 . compareTo ( VAR_5 ) ) > 0 ? this . VAR_1 : VAR_5 ) ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( ) throws java.lang.Exception { this . VAR_1 = ( this . VAR_2 ) ? this . VAR_3 . METHOD_2 ( this . VAR_4 ) : this . VAR_4 . METHOD_2 ( this . VAR_3 ) ; this . VAR_1 = METHOD_3 ( ( ( this . VAR_1 . compareTo ( VAR_5 ) ) > 0 ? this . VAR_1 : VAR_5 ) ) ; return this . VAR_1 ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { METHOD_2 ( VAR_1 ) ; java.lang.String VAR_2 = VAR_3 . METHOD_3 ( VAR_1 , VAR_4 ) ; TYPE_2 . METHOD_4 ( new java.io.File ( VAR_2 ) ) ; METHOD_5 ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ; switch ( VAR_5 . METHOD_8 ( ) . METHOD_9 ( ) ) { case VAR_6 : case VAR_7 : METHOD_10 ( VAR_1 ) ; break ; case VAR_8 : METHOD_11 ( VAR_1 ) ; break ; default : break ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; java.lang.String VAR_2 = VAR_3 . METHOD_3 ( VAR_1 , VAR_4 ) ; TYPE_2 . METHOD_4 ( new java.io.File ( VAR_2 ) ) ; METHOD_5 ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ; } switch ( VAR_5 . METHOD_8 ( ) . METHOD_9 ( ) ) { case VAR_6 : case VAR_7 : METHOD_10 ( VAR_1 ) ; break ; case VAR_8 : METHOD_11 ( VAR_1 ) ; break ; default : break ; } }\n"}
{"problem": "public void METHOD_1 ( int id ) { int VAR_1 = 0 ; this . VAR_2 = STRING_1 ; this . values = new TYPE_1 ( ) ; this . values . put ( STRING_2 , STRING_3 ) ; this . VAR_3 = STRING_4 + id ; this . VAR_4 = null ; VAR_1 = this . METHOD_2 ( this . VAR_2 , this . values , this . VAR_3 , this . VAR_4 ) ; VAR_5 . METHOD_3 ( STRING_5 , ( ( STRING_6 + VAR_1 ) + STRING_7 ) ) ; }\n", "fixed": "public void METHOD_1 ( int id ) { int VAR_1 = 0 ; this . VAR_2 = STRING_1 ; this . values = new TYPE_1 ( ) ; this . values . put ( STRING_2 , STRING_3 ) ; this . VAR_3 = STRING_4 + id ; this . VAR_4 = null ; VAR_1 = this . METHOD_2 ( this . VAR_2 , this . values , this . VAR_3 , this . VAR_4 ) ; }\n"}
{"problem": "public < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_1 , TYPE_2 > METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 , java.lang.Class < TYPE_2 > VAR_2 ) { if ( ( ( VAR_3 . String class ) == VAR_1 ) && ( VAR_4 class . METHOD_2 ( VAR_2 ) ) ) { return TYPE_4 . METHOD_3 ( new TYPE_5 < TYPE_6 > ( ) ) ; } else { return null ; } }\n", "fixed": "public < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_1 , TYPE_2 > METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 , java.lang.Class < TYPE_2 > VAR_2 ) { if ( ( ( VAR_3 . String class ) == VAR_1 ) && ( VAR_4 class . METHOD_2 ( VAR_2 ) ) ) { return TYPE_4 . METHOD_3 ( new TYPE_5 < > ( ) ) ; } return null ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; android.content.Intent intent = new android.content.Intent ( context , VAR_2 class ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; intent . METHOD_3 ( STRING_3 , VAR_3 . METHOD_4 ( VAR_4 . get ( position ) , VAR_5 class ) ) ; intent . METHOD_3 ( VAR_6 , position ) ; context . METHOD_5 ( intent ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( context , VAR_2 class ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; intent . METHOD_3 ( STRING_3 , VAR_3 . METHOD_4 ( VAR_4 . get ( position ) , VAR_5 class ) ) ; intent . METHOD_3 ( VAR_6 , position ) ; context . METHOD_5 ( intent ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "b5247d268fd7d0c60421becb0dd1297ca545d219", "projectName": "libgdx.libgdx", "bugType": "Change Caller in Function Call", "problem": " \t\t\tconnection.setDoOutput(doingOutPut);\r\n \t\t\tconnection.setDoInput(true);\r\n \t\t\tconnection.setRequestMethod(method);\r\n\t\t\tconnection.setFollowRedirects(httpRequest.getFollowRedirects());\r\n \t\t\tlock.lock();\r\n \t\t\tconnections.put(httpRequest, connection);\r", "fixed": " \t\t\tconnection.setDoOutput(doingOutPut);\r\n \t\t\tconnection.setDoInput(true);\r\n \t\t\tconnection.setRequestMethod(method);\r\n\t\t\tHttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\r\n \t\t\tlock.lock();\r\n \t\t\tconnections.put(httpRequest, connection);\r", "sourceBeforeFix": "connection.setFollowRedirects(httpRequest.getFollowRedirects())", "sourceAfterFix": "HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformiv(program,location,params)"}
{"problem": "public void METHOD_1 ( ) { int id = INT_1 ; java.lang.System.out.println ( ( STRING_1 + id ) ) ; TYPE_1 TYPE_2 = new TYPE_1 ( ) ; boolean result = TYPE_2 . METHOD_2 ( id ) ; assert result ; if ( result ) java.lang.System.out.println ( ( STRING_2 + id ) ) ; else java.lang.System.out.println ( ( STRING_3 + id ) ) ; java.lang.System.out.println ( STRING_4 ) ; }\n", "fixed": "public void METHOD_1 ( ) { int id = 1 ; java.lang.System.out.println ( ( STRING_1 + id ) ) ; TYPE_1 TYPE_2 = new TYPE_1 ( ) ; boolean result = TYPE_2 . METHOD_2 ( id ) ; assert result ; if ( result ) java.lang.System.out.println ( ( STRING_2 + id ) ) ; else java.lang.System.out.println ( ( STRING_3 + id ) ) ; java.lang.System.out.println ( STRING_4 ) ; }\n"}
{"problem": "public static java.lang.String METHOD_1 ( final java.lang.String string ) { if ( TYPE_1 . METHOD_2 ( string ) ) { return null ; } final TYPE_2 VAR_1 = new TYPE_2 ( string ) ; VAR_1 . METHOD_3 ( INT_1 , VAR_2 ) ; return TYPE_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; }\n", "fixed": "public static java.lang.String METHOD_1 ( final java.lang.String string ) { if ( TYPE_1 . METHOD_2 ( string ) ) { return null ; } final TYPE_2 VAR_1 = new TYPE_2 ( string ) . METHOD_3 ( INT_1 , VAR_2 ) ; return TYPE_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; }\n"}
{"problem": "protected java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( ) { java.util.HashMap < java.lang.String , java.lang.Object > VAR_1 = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; VAR_1 . put ( STRING_1 , STRING_2 ) ; VAR_1 . put ( STRING_3 , \"true\" ) ; VAR_1 . put ( STRING_4 , \"false\" ) ; VAR_1 . put ( STRING_5 , \"true\" ) ; VAR_1 . put ( STRING_6 , STRING_7 ) ; VAR_1 . put ( STRING_8 , STRING_9 ) ; VAR_1 . put ( VAR_2 , STRING_10 ) ; return VAR_1 ; }\n", "fixed": "protected java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( ) { java.util.HashMap < java.lang.String , java.lang.Object > VAR_1 = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; VAR_1 . put ( STRING_1 , STRING_2 ) ; VAR_1 . put ( STRING_3 , \"true\" ) ; VAR_1 . put ( STRING_4 , \"false\" ) ; VAR_1 . put ( STRING_5 , \"true\" ) ; VAR_1 . put ( STRING_6 , STRING_7 ) ; VAR_1 . put ( VAR_2 , STRING_10 ) ; return VAR_1 ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String VAR_2 , final java.lang.String VAR_3 , final int VAR_4 ) throws TYPE_2 { TYPE_1 result = VAR_5 . get ( VAR_1 ) ; if ( result == null ) { java.lang.System.out.println ( ( STRING_1 + VAR_1 ) ) ; result = new TYPE_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; VAR_5 . put ( VAR_1 , result ) ; } return result ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String VAR_2 , final java.lang.String VAR_3 , final int VAR_4 ) throws TYPE_2 { TYPE_1 result = VAR_5 . get ( VAR_1 ) ; if ( result == null ) { result = new TYPE_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; VAR_5 . put ( VAR_1 , result ) ; } return result ; }\n"}
{"problem": "public static java.util.HashSet < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { java.util.HashSet < java.lang.String > VAR_2 = new java.util.HashSet < java.lang.String > ( ) ; if ( VAR_1 != null ) { for ( java.lang.String VAR_3 : VAR_1 . split ( STRING_1 ) ) { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; }\n", "fixed": "public static java.util.HashSet < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { java.util.HashSet < java.lang.String > VAR_2 = new java.util.HashSet < java.lang.String > ( ) ; if ( VAR_1 != null ) { for ( java.lang.String VAR_3 : VAR_1 . split ( STRING_1 ) ) { if ( ( VAR_3 != null ) && ( ( VAR_3 . length ( ) ) > 0 ) ) VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; }\n"}
{"problem": "private void METHOD_1 ( java.lang.String fileName , boolean VAR_1 ) { try { java.lang.String VAR_2 = ( VAR_1 ) ? VAR_3 : VAR_4 ; java.lang.String VAR_5 = fileName . METHOD_2 ( ( ( VAR_6 ) + STRING_1 ) , ( VAR_2 + STRING_1 ) ) ; VAR_7 . METHOD_3 ( fileName , VAR_5 ) ; VAR_8 . METHOD_4 ( STRING_2 , fileName , ( VAR_1 ? STRING_3 : STRING_4 ) ) ; } catch ( java.lang.Exception VAR_9 ) { VAR_8 . METHOD_4 ( STRING_5 , fileName , VAR_9 ) ; } }\n", "fixed": "private void METHOD_1 ( java.lang.String fileName , boolean VAR_1 ) throws java.lang.Exception { try { java.lang.String VAR_2 = ( VAR_1 ) ? VAR_3 : VAR_4 ; java.lang.String VAR_5 = fileName . METHOD_2 ( ( ( VAR_6 ) + STRING_1 ) , VAR_2 ) ; VAR_7 . METHOD_3 ( fileName , VAR_5 ) ; VAR_8 . METHOD_4 ( STRING_2 , fileName , ( VAR_1 ? STRING_3 : STRING_4 ) ) ; } catch ( java.lang.Exception VAR_9 ) { VAR_8 . error ( STRING_5 , fileName , VAR_9 ) ; throw VAR_9 ; } }\n"}
{"fixCommitSHA1": "b041bcdeb2b96589efd6e6058fb0ba9dc630e949", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * @param child The Node to add as child of this Node\r\n \t * @return the zero-based index of the child */\r\n \tpublic <T extends Node> int insertChild (int index, final T child) {\r\n\t\tfor (Node p = this; p != null; p = child.getParent()) {\r\n \t\t\tif (p == child) throw new GdxRuntimeException(\"Cannot add a parent as a child\");\r\n \t\t}\r\n \t\tNode p = child.getParent();\r", "fixed": " \t * @param child The Node to add as child of this Node\r\n \t * @return the zero-based index of the child */\r\n \tpublic <T extends Node> int insertChild (int index, final T child) {\r\n\t\tfor (Node p = this; p != null; p = p.getParent()) {\r\n \t\t\tif (p == child) throw new GdxRuntimeException(\"Cannot add a parent as a child\");\r\n \t\t}\r\n \t\tNode p = child.getParent();\r", "sourceBeforeFix": "child.getParent()", "sourceAfterFix": "p.getParent()"}
{"problem": "public static java.lang.String METHOD_1 ( double number , int VAR_1 ) { double VAR_2 = TYPE_1 . METHOD_2 ( number , VAR_1 ) ; if ( VAR_2 >= INT_1 ) return java.lang.String . METHOD_3 ( ( ( int ) ( VAR_2 ) ) ) ; else return java.lang.String . METHOD_3 ( VAR_2 ) ; }\n", "fixed": "public static java.lang.String METHOD_1 ( double number , int VAR_1 ) { double VAR_2 = TYPE_1 . METHOD_2 ( number , VAR_1 ) ; if ( VAR_2 >= ( java.lang.Math.pow ( INT_1 , ( VAR_1 - 1 ) ) ) ) return java.lang.String . METHOD_3 ( ( ( int ) ( VAR_2 ) ) ) ; else return java.lang.String . METHOD_3 ( VAR_2 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( new byte [ VAR_2 ] ) ; final java.io.InputStream VAR_3 = TYPE_2 . METHOD_3 ( VAR_1 ) ; final int VAR_4 = VAR_3 . METHOD_4 ( new byte [ VAR_2 ] ) ; TYPE_3 . assertEquals ( INT_1 , VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( new byte [ VAR_2 ] ) ; java.io.InputStream VAR_3 = TYPE_2 . METHOD_3 ( VAR_1 ) ; int VAR_4 = VAR_3 . METHOD_4 ( new byte [ VAR_2 ] ) ; TYPE_3 . assertEquals ( VAR_2 , VAR_4 ) ; }\n"}
{"problem": "public static boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String [ ] VAR_3 ) { if ( VAR_1 . contains ( STRING_1 ) ) { java.lang.String VAR_4 = VAR_1 . substring ( 0 , VAR_1 . METHOD_2 ( STRING_1 ) ) ; for ( java.lang.String VAR_5 : VAR_3 ) { if ( VAR_2 . equals ( ( ( VAR_4 + STRING_1 ) + VAR_5 ) ) ) { return false ; } } } else { return false ; } return true ; }\n", "fixed": "public static boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String [ ] VAR_3 ) { if ( VAR_1 == null ) return true ; if ( VAR_1 . contains ( STRING_1 ) ) { java.lang.String VAR_4 = VAR_1 . substring ( 0 , VAR_1 . METHOD_2 ( STRING_1 ) ) ; for ( java.lang.String VAR_5 : VAR_3 ) { if ( VAR_2 . equals ( ( ( VAR_4 + STRING_1 ) + VAR_5 ) ) ) { return false ; } } } else { return false ; } return true ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.io.File VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { java.lang.String VAR_2 = VAR_1 . getName ( ) . split ( STRING_1 ) [ 0 ] ; if ( ( this . VAR_3 . contains ( VAR_2 ) ) || ( this . VAR_4 . contains ( VAR_2 ) ) ) { return VAR_2 ; } else { throw new TYPE_1 ( STRING_2 ) ; } } else { throw new TYPE_1 ( ( STRING_3 + VAR_1 ) ) ; } }\n", "fixed": "public java.lang.String METHOD_1 ( java.io.File VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { java.lang.String VAR_2 = VAR_1 . getName ( ) . split ( STRING_1 ) [ 0 ] ; if ( ( this . VAR_3 . contains ( VAR_2 ) ) || ( this . VAR_4 . contains ( VAR_2 ) ) ) { return VAR_2 ; } else { throw new TYPE_1 ( STRING_2 ) ; } } else { throw new TYPE_1 ( ( STRING_3 + VAR_1 ) ) ; } }\n"}
{"problem": "public static int [ ] METHOD_1 ( int [ ] array , java.util.Random VAR_1 ) { int a = VAR_1 . METHOD_2 ( array . length ) ; int b = VAR_1 . METHOD_2 ( ( ( array . length ) - 1 ) ) ; return TYPE_1 . METHOD_1 ( array , a , ( a == b ? ( array . length ) - 1 : b ) ) ; }\n", "fixed": "public static int [ ] METHOD_1 ( int [ ] array , java.util.Random VAR_1 ) { if ( ( array . length ) == 1 ) return array ; int a = VAR_1 . METHOD_2 ( array . length ) ; int b = VAR_1 . METHOD_2 ( ( ( array . length ) - 1 ) ) ; return TYPE_1 . METHOD_1 ( array , a , ( a == b ? ( array . length ) - 1 : b ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; int VAR_3 = METHOD_3 ( ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_2 . METHOD_5 ( VAR_3 ) ; VAR_2 . METHOD_6 ( VAR_3 ) ; VAR_2 . METHOD_7 ( VAR_3 ) ; VAR_1 . METHOD_1 ( VAR_2 ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; if ( VAR_2 != null ) { int VAR_3 = METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_2 . METHOD_5 ( VAR_3 ) ; VAR_2 . METHOD_6 ( VAR_3 ) ; VAR_2 . METHOD_7 ( VAR_3 ) ; VAR_1 . METHOD_1 ( VAR_2 ) ; } }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { new TYPE_1 ( ) . execute ( VAR_2 , VAR_3 ) ; try { VAR_4 . remove ( STRING_1 ) ; VAR_4 . put ( STRING_1 , VAR_3 ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_5 . METHOD_2 ( ) ; } VAR_6 . setText ( STRING_2 ) ; VAR_7 . METHOD_3 ( VAR_8 ) ; VAR_9 . METHOD_3 ( VAR_8 ) ; VAR_10 . METHOD_3 ( VAR_8 ) ; TYPE_2 . METHOD_4 ( STRING_3 , VAR_4 . toString ( ) ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { new TYPE_1 ( ) . execute ( VAR_2 , VAR_3 ) ; try { VAR_4 . remove ( STRING_1 ) ; VAR_4 . put ( STRING_1 , VAR_3 ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_5 . METHOD_2 ( ) ; } VAR_6 . setText ( STRING_2 ) ; VAR_7 . METHOD_3 ( VAR_8 ) ; VAR_9 . METHOD_3 ( VAR_8 ) ; VAR_10 . METHOD_3 ( VAR_8 ) ; }\n"}
{"problem": "protected void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) { int VAR_3 = ( ( int ) ( VAR_2 . METHOD_2 ( ) [ 1 ] ) ) ; VAR_1 = true ; if ( ( VAR_4 ) == VAR_3 ) { VAR_5 . add ( VAR_4 ) ; if ( VAR_5 . equals ( VAR_6 ) ) { METHOD_3 ( ) ; } } else { VAR_7 = VAR_3 ; METHOD_4 ( VAR_8 , VAR_3 ) ; } } }\n", "fixed": "protected void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) { int VAR_3 = ( ( int ) ( VAR_2 . METHOD_2 ( ) [ 1 ] ) ) ; VAR_7 = VAR_3 ; VAR_1 = true ; if ( ( VAR_4 ) == VAR_3 ) { VAR_5 . add ( VAR_4 ) ; if ( VAR_5 . equals ( VAR_6 ) ) { METHOD_3 ( ) ; } } else { METHOD_4 ( VAR_8 , VAR_3 ) ; } } }\n"}
{"fixCommitSHA1": "7a66b10e5a608524f0d48911bd3b5165fc3a2d1d", "projectName": "neo4j.neo4j", "bugType": "Same Function Less Args", "problem": "     @Test\n     public void shouldAllowExplainAsStartForACypherQuery() throws Exception\n     {\n        executeCommand( \"EXPLAIN OPTIONAL MATCH (n) RETURN n;\", \"DbHits\", \"No data returned\" );\n     }\n     @Test", "fixed": "     @Test\n     public void shouldAllowExplainAsStartForACypherQuery() throws Exception\n     {\n        executeCommand( \"EXPLAIN OPTIONAL MATCH (n) RETURN n;\", \"No data returned\" );\n     }\n     @Test", "sourceBeforeFix": "executeCommand(\"EXPLAIN OPTIONAL MATCH (n) RETURN n;\",\"DbHits\",\"No data returned\")", "sourceAfterFix": "executeCommand(\"EXPLAIN OPTIONAL MATCH (n) RETURN n;\",\"No data returned\")"}
{"problem": "public boolean remove ( int VAR_1 ) { if ( VAR_2 . METHOD_1 ( VAR_1 ) ) { int position = VAR_2 . get ( VAR_1 ) ; METHOD_2 ( VAR_3 , position , ( ( VAR_3 . size ( ) ) - 1 ) ) ; VAR_3 . remove ( ( ( VAR_3 . size ( ) ) - 1 ) ) ; return true ; } else { return false ; } }\n", "fixed": "public boolean remove ( int VAR_1 ) { if ( VAR_2 . METHOD_1 ( VAR_1 ) ) { int position = VAR_2 . get ( VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_2 , position , ( ( VAR_3 . size ( ) ) - 1 ) ) ; VAR_3 . remove ( ( ( VAR_3 . size ( ) ) - 1 ) ) ; VAR_2 . remove ( VAR_1 ) ; return true ; } else { return false ; } }\n"}
{"problem": "private int METHOD_1 ( int i , int j ) { int VAR_1 = ( METHOD_2 ( i , j ) ) - 1 ; int VAR_2 = VAR_1 / ( VAR_3 ) ; int VAR_4 = VAR_1 % ( VAR_3 ) ; int b = ( VAR_5 [ i ] [ j ] ) - 1 ; int VAR_6 = b / ( VAR_3 ) ; int VAR_7 = b % ( VAR_3 ) ; return ( java.lang.Math.abs ( ( VAR_6 - VAR_2 ) ) ) + ( java.lang.Math.abs ( ( VAR_7 - VAR_4 ) ) ) ; }\n", "fixed": "private int METHOD_1 ( int i , int j ) { int b = ( VAR_5 [ i ] [ j ] ) - 1 ; int VAR_6 = b / ( VAR_3 ) ; int VAR_7 = b % ( VAR_3 ) ; return ( java.lang.Math.abs ( ( VAR_6 - i ) ) ) + ( java.lang.Math.abs ( ( VAR_7 - j ) ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { this . METHOD_2 ( true ) ; VAR_2 = false ; VAR_3 . setEnabled ( false ) ; if ( ( VAR_4 ) == null ) this . METHOD_3 ( VAR_1 ) ; else VAR_4 . METHOD_4 ( VAR_1 ) ; VAR_4 . setEnabled ( true ) ; VAR_4 . METHOD_5 ( VAR_5 ) ; VAR_3 = VAR_4 ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { this . METHOD_2 ( true ) ; VAR_2 = false ; VAR_3 . setEnabled ( false ) ; if ( ( VAR_4 ) == null ) this . METHOD_3 ( VAR_1 ) ; else VAR_4 . METHOD_4 ( VAR_1 ) ; VAR_4 . setEnabled ( true ) ; VAR_3 = VAR_4 ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Map < java.lang.String , java.lang.String > parameters = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; parameters . put ( STRING_1 , STRING_2 ) ; return TYPE_3 . METHOD_2 ( STRING_3 , STRING_4 , STRING_4 , STRING_5 , VAR_1 . METHOD_3 ( ) , STRING_6 , parameters , STRING_7 , STRING_5 , null , ( STRING_8 + ( VAR_1 . METHOD_3 ( ) ) ) ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Map < java.lang.String , java.lang.String > parameters = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; parameters . put ( STRING_1 , STRING_2 ) ; return TYPE_3 . METHOD_2 ( ( STRING_3 + ( VAR_1 . METHOD_3 ( ) ) ) , STRING_4 , STRING_4 , STRING_5 , VAR_1 . METHOD_3 ( ) , STRING_6 , parameters , STRING_7 , STRING_5 , null , ( STRING_8 + ( VAR_1 . METHOD_3 ( ) ) ) ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface StubEndpointBuilder\n             extends\n                 StubEndpointConsumerBuilder, StubEndpointProducerBuilder {\n         default AdvancedStubEndpointBuilder advanced() {", "fixed": "     \n    public interface StubEndpointBuilder\n             extends\n                 StubEndpointConsumerBuilder, StubEndpointProducerBuilder {\n         default AdvancedStubEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( this ) ; METHOD_4 ( ) ; if ( VAR_1 == null ) { java.lang.Integer VAR_3 = getIntent ( ) . METHOD_5 ( VAR_4 , ( - 1 ) ) ; byte [ ] VAR_5 = getIntent ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_6 ) ; METHOD_8 ( TYPE_3 . METHOD_9 ( VAR_3 , VAR_5 ) , false ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( this ) ; METHOD_4 ( ) ; int VAR_3 = getIntent ( ) . METHOD_5 ( VAR_4 , ( - 1 ) ) ; if ( VAR_3 != ( - 1 ) ) { byte [ ] VAR_5 = getIntent ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_6 ) ; METHOD_8 ( TYPE_3 . METHOD_9 ( VAR_3 , VAR_5 ) , false ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void start ( ) { METHOD_1 ( ) ; this . VAR_1 = false ; while ( ! ( VAR_1 ) ) { try { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_3 . METHOD_2 ( ) ) ) ; for ( TYPE_2 VAR_4 : VAR_5 ) { VAR_2 . METHOD_3 ( VAR_4 ) ; } } catch ( java.lang.ClassNotFoundException | java.io.IOException VAR_6 ) { } } }\n", "fixed": "public void start ( ) { METHOD_1 ( ) ; this . VAR_1 = false ; java.lang.Thread t = new java.lang.Thread ( ) { public void METHOD_3 ( ) { while ( ! ( VAR_1 ) ) { try { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_3 . METHOD_2 ( ) ) ) ; for ( TYPE_2 VAR_4 : VAR_5 ) { VAR_2 . METHOD_3 ( VAR_4 ) ; } } catch ( java.lang.ClassNotFoundException | java.io.IOException VAR_6 ) { } } } } ; t . start ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Throwable error ) { if ( VAR_1 . METHOD_2 ( ) ) { java.lang.String VAR_2 = TYPE_2 . METHOD_3 ( error ) ; if ( VAR_3 . METHOD_4 ( ) ) { VAR_3 . METHOD_5 ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; } VAR_1 . METHOD_6 ( VAR_4 , VAR_2 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Throwable error ) { if ( ( VAR_1 != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { java.lang.String VAR_2 = TYPE_2 . METHOD_3 ( error ) ; if ( VAR_3 . METHOD_4 ( ) ) { VAR_3 . METHOD_5 ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; } VAR_1 . METHOD_6 ( VAR_4 , VAR_2 ) ; } }\n"}
{"fixCommitSHA1": "62daee8bf2d60c90827d2adc864662c9db6c4713", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "                                     r.setServlet(config.framework().newClassInstance(s.getClass()));\n                                     r.init(config);\n                                     config.framework().addAtmosphereHandler(path, r,\n                                            config.getBroadcasterFactory().lookup(m.broadcaster(), true), w.interceptors);\n                                 } else {\n                                     config.framework().addAtmosphereHandler(path, w.atmosphereHandler,\n                                            config.getBroadcasterFactory().lookup(m.broadcaster(), true), w.interceptors);\n                                 }\n                                 request.setAttribute(FrameworkConfig.NEW_MAPPING, \"true\");\n                             } catch (Throwable e) {", "fixed": "                                     r.setServlet(config.framework().newClassInstance(s.getClass()));\n                                     r.init(config);\n                                     config.framework().addAtmosphereHandler(path, r,\n                                            config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);\n                                 } else {\n                                     config.framework().addAtmosphereHandler(path, w.atmosphereHandler,\n                                            config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);\n                                 }\n                                 request.setAttribute(FrameworkConfig.NEW_MAPPING, \"true\");\n                             } catch (Throwable e) {", "sourceBeforeFix": "config.getBroadcasterFactory().lookup(m.broadcaster(),true)", "sourceAfterFix": "config.getBroadcasterFactory().lookup(m.broadcaster(),path,true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) { java.lang.System.out.println ( STRING_1 ) ; return ; } int index = ( VAR_1 . size ( ) ) - 1 ; TYPE_1 b = VAR_1 . get ( index ) ; VAR_1 . remove ( index ) ; VAR_2 += b . METHOD_2 ( ) ; }\n", "fixed": "public boolean METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) { java.lang.System.out.println ( STRING_1 ) ; return false ; } int index = ( VAR_1 . size ( ) ) - 1 ; TYPE_1 b = VAR_1 . get ( index ) ; VAR_1 . remove ( index ) ; VAR_2 += b . METHOD_2 ( ) ; return true ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new TYPE_2 ( STRING_1 ) ; } VAR_1 . index ( VAR_2 , VAR_3 , VAR_4 , new TYPE_3 < java.lang.Boolean > ( ) { public void METHOD_1 ( java.lang.Boolean result ) { VAR_1 . METHOD_2 ( ) ; if ( TYPE_4 . METHOD_3 ( VAR_5 ) ) { VAR_5 . METHOD_1 ( result ) ; } } } ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new TYPE_2 ( STRING_1 ) ; } java.lang.System.out.println ( VAR_1 ) ; VAR_1 . index ( VAR_2 , VAR_3 , VAR_4 , new TYPE_3 < java.lang.Boolean > ( ) { public void METHOD_1 ( java.lang.Boolean result ) { VAR_1 . METHOD_2 ( ) ; if ( TYPE_4 . METHOD_3 ( VAR_5 ) ) { VAR_5 . METHOD_1 ( result ) ; } } } ) ; }\n"}
{"problem": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 name , java.lang.Class < ? extends TYPE_1 > VAR_2 , boolean VAR_3 , boolean VAR_4 , TYPE_4 VAR_5 ) { if ( ( VAR_3 && VAR_4 ) && ( ! ( VAR_1 . METHOD_2 ( name ) ) ) ) { TYPE_5 . METHOD_1 ( VAR_1 , name . toString ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } return VAR_1 . METHOD_3 ( name ) ; }\n", "fixed": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 name , java.lang.Class < ? extends TYPE_1 > VAR_2 , boolean VAR_3 , boolean VAR_4 , TYPE_4 VAR_5 ) { if ( ( VAR_3 && VAR_4 ) && ( ! ( VAR_1 . METHOD_2 ( name ) ) ) ) { return TYPE_5 . METHOD_1 ( VAR_1 , name . toString ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } return VAR_1 . METHOD_3 ( name ) ; }\n"}
{"problem": "private void METHOD_1 ( android.content.Intent data ) throws java.io.IOException { final boolean VAR_1 ; if ( data . toString ( ) . equals ( STRING_1 ) ) { VAR_1 = true ; } else { final java.lang.String VAR_2 = data . METHOD_2 ( ) ; VAR_1 = ( VAR_2 != null ) && ( VAR_2 . equals ( VAR_3 ) ) ; } if ( VAR_1 ) { VAR_4 = VAR_5 ; } else { VAR_4 = data . getData ( ) ; } METHOD_3 ( VAR_4 ) ; }\n", "fixed": "private void METHOD_1 ( android.content.Intent data ) throws java.io.IOException { final boolean VAR_1 ; if ( ( data == null ) || ( data . toString ( ) . equals ( STRING_1 ) ) ) { VAR_1 = true ; } else { final java.lang.String VAR_2 = data . METHOD_2 ( ) ; VAR_1 = ( VAR_2 != null ) && ( VAR_2 . equals ( VAR_3 ) ) ; } if ( VAR_1 ) { VAR_4 = VAR_5 ; } else { VAR_4 = data . getData ( ) ; } METHOD_3 ( VAR_4 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , long VAR_3 , TYPE_3 VAR_4 ) { TYPE_4 handle = METHOD_2 ( ) ; VAR_1 . METHOD_3 ( handle ) ; TYPE_5 VAR_5 = new TYPE_5 ( VAR_1 , METHOD_4 ( VAR_2 ) , VAR_3 ) ; VAR_6 . put ( handle , VAR_5 ) ; synchronized ( VAR_5 ) { VAR_4 . execute ( VAR_7 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , long VAR_3 , TYPE_3 VAR_4 ) { TYPE_4 handle = METHOD_2 ( ) ; VAR_1 . METHOD_3 ( handle ) ; TYPE_5 VAR_5 = new TYPE_5 ( VAR_1 , METHOD_4 ( VAR_2 ) , VAR_3 ) ; synchronized ( this ) { VAR_6 . put ( handle , VAR_5 ) ; } synchronized ( VAR_5 ) { VAR_4 . execute ( VAR_7 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int item ) { switch ( item ) { case 0 : METHOD_2 ( VAR_2 ) ; break ; case 1 : METHOD_2 ( VAR_3 ) ; break ; case INT_1 : METHOD_2 ( VAR_4 ) ; break ; case INT_2 : METHOD_2 ( VAR_5 ) ; break ; case INT_3 : TYPE_2 . METHOD_3 ( ( ( char ) ( INT_4 ) ) ) ; break ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int item ) { switch ( item ) { case 0 : METHOD_2 ( VAR_2 ) ; break ; case 1 : METHOD_2 ( VAR_3 ) ; break ; case INT_1 : METHOD_2 ( VAR_5 ) ; break ; case INT_2 : TYPE_2 . METHOD_3 ( ( ( char ) ( INT_4 ) ) ) ; break ; } }\n"}
{"problem": "public static void open ( java.lang.Long id ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( id ) ; METHOD_2 ( VAR_1 ) ; VAR_2 = true ; VAR_1 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( TYPE_2 . get ( STRING_1 , STRING_2 ) ) ; TYPE_3 . index ( ) ; }\n", "fixed": "public static void open ( java.lang.Long id ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( id ) ; METHOD_2 ( VAR_1 ) ; VAR_2 = true ; VAR_1 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( TYPE_2 . get ( STRING_1 , STRING_2 ) ) ; TYPE_3 . show ( id ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; if ( ! ( VAR_2 . contains ( VAR_1 ) ) ) { METHOD_2 ( VAR_1 ) ; VAR_2 . add ( VAR_1 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; if ( ! ( VAR_2 . contains ( VAR_1 ) ) ) { VAR_2 . add ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { double VAR_1 = FLOAT_1 ; double VAR_2 = FLOAT_2 ; TYPE_1 VAR_3 = METHOD_2 ( VAR_4 class ) ; METHOD_3 ( VAR_3 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 ) ; TYPE_2 VAR_5 = new TYPE_2 ( VAR_3 ) ; TYPE_2 VAR_6 = METHOD_6 ( VAR_5 ) ; METHOD_3 ( VAR_6 . METHOD_7 ( ) ) . METHOD_5 ( true ) ; METHOD_8 ( VAR_5 . METHOD_9 ( VAR_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { double VAR_1 = FLOAT_1 ; double VAR_2 = FLOAT_2 ; TYPE_1 VAR_3 = METHOD_2 ( VAR_4 class ) ; METHOD_3 ( VAR_3 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 ) ; TYPE_2 VAR_5 = new TYPE_2 ( VAR_3 ) ; TYPE_2 VAR_6 = METHOD_6 ( VAR_5 ) ; METHOD_3 ( VAR_6 . METHOD_7 ( ) ) . METHOD_5 ( true ) ; METHOD_8 ( VAR_6 . METHOD_9 ( VAR_2 ) ) ; }\n"}
{"problem": "public TYPE_1 getData ( ) { METHOD_1 ( ) ; if ( ( ! ( VAR_1 ) ) || ( ! ( VAR_2 ) ) ) { return null ; } TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_4 . getText ( ) ) ; VAR_3 . METHOD_3 ( VAR_5 . getText ( ) ) ; VAR_3 . METHOD_4 ( java.lang.Integer.parseInt ( VAR_6 . getText ( ) ) ) ; VAR_3 . METHOD_5 ( METHOD_6 ( ) ) ; return VAR_3 ; }\n", "fixed": "public TYPE_1 getData ( ) { METHOD_1 ( ) ; if ( ! ( VAR_2 ) ) { return null ; } TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_4 . getText ( ) ) ; VAR_3 . METHOD_3 ( VAR_5 . getText ( ) ) ; VAR_3 . METHOD_4 ( java.lang.Integer.parseInt ( VAR_6 . getText ( ) ) ) ; VAR_3 . METHOD_5 ( METHOD_6 ( ) ) ; return VAR_3 ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 status = new TYPE_1 ( VAR_2 ) ; boolean commit = false ; METHOD_2 ( ) ; try { status = VAR_1 . METHOD_3 ( ) ; commit = ! ( status . METHOD_4 ( ) ) ; } finally { METHOD_5 ( commit ) ; } return status ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( METHOD_1 ( ) ) return VAR_1 . METHOD_3 ( ) ; else { TYPE_1 status = new TYPE_1 ( VAR_2 ) ; boolean commit = false ; METHOD_2 ( ) ; try { status = VAR_1 . METHOD_3 ( ) ; commit = ! ( status . METHOD_4 ( ) ) ; } finally { METHOD_5 ( commit ) ; } return status ; } }\n"}
{"problem": "public < TYPE_1 > TYPE_1 METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 ) { if ( VAR_2 class . METHOD_2 ( VAR_1 ) ) { return ( ( TYPE_1 ) ( VAR_3 ) ) ; } else if ( VAR_4 class . METHOD_2 ( VAR_1 ) ) { return ( ( TYPE_1 ) ( VAR_5 ) ) ; } else if ( VAR_6 class . METHOD_2 ( VAR_1 ) ) { return ( ( TYPE_1 ) ( VAR_7 ) ) ; } else { return null ; } }\n", "fixed": "public < TYPE_1 > TYPE_1 METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 ) { if ( VAR_2 class . METHOD_2 ( VAR_1 ) ) { return ( ( TYPE_1 ) ( VAR_3 ) ) ; } else if ( VAR_6 class . METHOD_2 ( VAR_1 ) ) { return ( ( TYPE_1 ) ( VAR_7 ) ) ; } else if ( VAR_4 class . METHOD_2 ( VAR_1 ) ) { return ( ( TYPE_1 ) ( VAR_5 ) ) ; } else { return null ; } }\n"}
{"problem": "private void METHOD_1 ( ) { VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) ; VAR_1 . METHOD_4 ( VAR_2 , ( ( TYPE_2 ) ( METHOD_5 ( VAR_3 ) ) ) , TYPE_3 . METHOD_6 ( ) ) ; METHOD_7 ( getString ( VAR_4 ) ) ; }\n", "fixed": "private void METHOD_1 ( ) { VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) ; VAR_1 . METHOD_4 ( VAR_2 , ( ( TYPE_2 ) ( METHOD_5 ( VAR_3 ) ) ) ) ; METHOD_7 ( getString ( VAR_4 ) ) ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 info = this . VAR_2 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; int id = 0 ; for ( TYPE_4 VAR_4 : info . METHOD_3 ( ) . METHOD_4 ( ) ) { TYPE_1 item = new TYPE_1 ( ( id ++ ) , VAR_4 ) ; VAR_3 . add ( item ) ; } return VAR_3 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 info = this . VAR_2 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; int id = 0 ; if ( ( info . METHOD_3 ( ) ) != null ) { for ( TYPE_4 VAR_4 : info . METHOD_3 ( ) . METHOD_4 ( ) ) { TYPE_1 item = new TYPE_1 ( ( id ++ ) , VAR_4 ) ; VAR_3 . add ( item ) ; } } return VAR_3 ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "9a1ba2926a59ce9fd80e6355fabdeccdec6ad19f", "projectName": "apache.hbase", "bugType": "Same Function More Args", "problem": "       setupServer();\n       tserver.serve();\n     } catch (Exception e) {\n      LOG.fatal(\"Cannot run ThriftServer\");\n       System.exit(-1);\n     }", "fixed": "       setupServer();\n       tserver.serve();\n     } catch (Exception e) {\n      LOG.fatal(\"Cannot run ThriftServer\", e);\n       System.exit(-1);\n     }", "sourceBeforeFix": "LOG.fatal(\"Cannot run ThriftServer\")", "sourceAfterFix": "LOG.fatal(\"Cannot run ThriftServer\",e)"}
{"problem": "public int compareTo ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . y ) == ( y ) ) { if ( ( VAR_1 . x ) == ( x ) ) { return 1 ; } else { return ( x ) - ( VAR_1 . x ) ; } } else { return ( y ) - ( VAR_1 . y ) ; } }\n", "fixed": "public int compareTo ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( ) ; } if ( ( VAR_1 . y ) == ( y ) ) { if ( ( VAR_1 . x ) == ( x ) ) { return 0 ; } else { return ( x ) - ( VAR_1 . x ) ; } } else { return ( y ) - ( VAR_1 . y ) ; } }\n"}
{"problem": "public int compareTo ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_1 ( ) ; int VAR_3 = this . VAR_4 . compareTo ( VAR_2 ) ; if ( VAR_3 != 0 ) return VAR_3 ; TYPE_3 VAR_5 = VAR_1 . METHOD_2 ( ) ; int VAR_6 = this . VAR_7 . compareTo ( VAR_5 ) ; if ( VAR_6 != 0 ) return VAR_6 ; return 0 ; }\n", "fixed": "public int compareTo ( TYPE_1 VAR_1 ) { TYPE_3 VAR_5 = VAR_1 . METHOD_2 ( ) ; int VAR_6 = this . VAR_7 . compareTo ( VAR_5 ) ; if ( VAR_6 != 0 ) return VAR_6 ; TYPE_2 VAR_2 = VAR_1 . METHOD_1 ( ) ; int VAR_3 = this . VAR_4 . compareTo ( VAR_2 ) ; if ( VAR_3 != 0 ) return VAR_3 ; return 0 ; }\n"}
{"problem": "public void METHOD_1 ( int i ) { TYPE_1 p = VAR_1 . get ( i ) ; VAR_2 = p ; if ( ( p . METHOD_2 ( ) ) != null ) { METHOD_3 ( p . METHOD_2 ( ) ) ; } else { METHOD_3 ( VAR_3 ) ; } }\n", "fixed": "public void METHOD_1 ( int i ) { TYPE_1 p = VAR_1 . get ( i ) ; VAR_2 = p ; if ( ( ( p . METHOD_2 ( ) ) != null ) && ( ! ( p . METHOD_2 ( ) . trim ( ) . isEmpty ( ) ) ) ) { METHOD_3 ( p . METHOD_2 ( ) ) ; } else { METHOD_3 ( VAR_3 ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.Object t ) { TYPE_1 num ; if ( t instanceof java.lang.String ) { num = java.lang.Integer.parseInt ( ( ( java.lang.String ) ( t ) ) ) ; } else { num = ( ( TYPE_1 ) ( t ) ) ; } time = num . intValue ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.Object t ) { TYPE_1 num ; if ( t instanceof java.lang.String ) { num = java.lang.Long.parseLong ( ( ( java.lang.String ) ( t ) ) ) ; } else { num = ( ( TYPE_1 ) ( t ) ) ; } time = num ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { try { java.lang.Thread . METHOD_2 ( INT_1 ) ; } catch ( TYPE_1 VAR_3 ) { return false ; } for ( java.lang.String VAR_4 : VAR_5 ) { java.lang.String [ ] VAR_6 = VAR_4 . split ( STRING_1 ) ; if ( VAR_6 [ 0 ] . equals ( VAR_7 ) ) { return VAR_6 [ 1 ] . equals ( VAR_8 ) ; } } VAR_9 = VAR_1 ; VAR_10 = VAR_2 ; return true ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_8 ) { try { java.lang.Thread . METHOD_2 ( INT_1 ) ; } catch ( TYPE_1 VAR_3 ) { return false ; } for ( java.lang.String VAR_4 : VAR_5 ) { java.lang.String [ ] VAR_6 = VAR_4 . split ( STRING_1 ) ; if ( VAR_6 [ 0 ] . equals ( VAR_1 ) ) { return VAR_6 [ 1 ] . equals ( VAR_8 ) ; } } VAR_9 = VAR_1 ; VAR_10 = VAR_8 ; return false ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; VAR_2 = METHOD_2 ( VAR_3 ) ; VAR_4 = ( ( TYPE_2 ) ( view . METHOD_3 ( VAR_5 ) ) ) ; VAR_4 . METHOD_4 ( this ) ; VAR_4 . METHOD_5 ( this ) ; VAR_4 . METHOD_6 ( VAR_6 . METHOD_7 ( VAR_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; VAR_4 = ( ( TYPE_2 ) ( view . METHOD_3 ( VAR_5 ) ) ) ; VAR_4 . METHOD_4 ( this ) ; VAR_4 . METHOD_5 ( this ) ; VAR_4 . METHOD_6 ( VAR_6 . METHOD_7 ( VAR_2 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 error ) { if ( ( VAR_1 . size ( ) ) == 0 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . setText ( VAR_4 ) ; } if ( ( error . METHOD_3 ( ) . METHOD_4 ( ) ) == INT_1 ) { VAR_5 = true ; } VAR_6 = false ; VAR_7 . METHOD_5 ( VAR_8 ) ; VAR_9 . METHOD_6 ( false ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 error ) { if ( ( VAR_1 . size ( ) ) == 0 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . setText ( VAR_4 ) ; } if ( ( ( error . METHOD_3 ( ) ) != null ) && ( ( error . METHOD_3 ( ) . METHOD_4 ( ) ) == INT_1 ) ) { VAR_5 = true ; } VAR_6 = false ; VAR_7 . METHOD_5 ( VAR_8 ) ; VAR_9 . METHOD_6 ( false ) ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; java.util.HashMap < java.lang.String , java.lang.String > VAR_3 = new java.util.HashMap < java.lang.String , java.lang.String > ( TYPE_4 . METHOD_3 ( VAR_2 ) ) ; VAR_3 . put ( STRING_1 , \"true\" ) ; VAR_3 . put ( STRING_2 , \"true\" ) ; VAR_3 . put ( STRING_3 , \"false\" ) ; VAR_2 = TYPE_4 . METHOD_4 ( VAR_2 , TYPE_4 . METHOD_5 ( VAR_3 ) ) ; return TYPE_5 . METHOD_6 ( VAR_2 ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; java.util.HashMap < java.lang.String , java.lang.String > VAR_3 = new java.util.HashMap < java.lang.String , java.lang.String > ( TYPE_4 . METHOD_3 ( VAR_2 ) ) ; VAR_3 . put ( STRING_2 , \"true\" ) ; VAR_3 . put ( STRING_3 , \"false\" ) ; VAR_2 = TYPE_4 . METHOD_4 ( VAR_2 , TYPE_4 . METHOD_5 ( VAR_3 ) ) ; return TYPE_5 . METHOD_6 ( VAR_2 ) ; }\n"}
{"problem": "protected boolean METHOD_1 ( int x , int y ) { if ( ! ( METHOD_2 ( x , y ) ) ) { return false ; } else { METHOD_3 ( ) ; VAR_1 . METHOD_1 ( x , y ) ; METHOD_4 ( ) ; return true ; } }\n", "fixed": "protected boolean METHOD_1 ( int x , int y ) { if ( ! ( METHOD_2 ( x , y ) ) ) { return false ; } else { METHOD_3 ( ) ; VAR_1 . METHOD_1 ( ( ( VAR_1 . x ) + x ) , ( ( VAR_1 . y ) + y ) ) ; METHOD_4 ( ) ; return true ; } }\n"}
{"problem": "public void METHOD_1 ( final java.lang.String key ) { if ( TYPE_1 . isEmpty ( key ) ) return ; VAR_1 . METHOD_2 ( ) ; VAR_1 = new TYPE_2 ( ) ; new TYPE_2 ( ) . METHOD_3 ( new TYPE_3 ( ) { public void METHOD_4 ( ) { METHOD_5 ( key ) ; } } , VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( final java.lang.String key ) { if ( TYPE_1 . isEmpty ( key ) ) return ; VAR_1 . METHOD_2 ( ) ; VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_3 ( new TYPE_3 ( ) { public void METHOD_4 ( ) { METHOD_5 ( key ) ; } } , VAR_2 ) ; }\n"}
{"problem": "public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_2 ( VAR_3 ) ; TYPE_1 . METHOD_2 ( VAR_4 ) ; TYPE_1 . METHOD_2 ( VAR_5 ) ; TYPE_1 . METHOD_2 ( VAR_6 ) ; TYPE_1 . METHOD_2 ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_2 ( new TYPE_3 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_4 . METHOD_3 ( ) ) ; }\n", "fixed": "public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_2 ( VAR_3 ) ; TYPE_1 . METHOD_2 ( VAR_5 ) ; TYPE_1 . METHOD_2 ( VAR_6 ) ; TYPE_1 . METHOD_2 ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_2 ( new TYPE_3 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_4 . METHOD_3 ( ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 [ ] VAR_1 , TYPE_2 VAR_2 ) { if ( ( this . VAR_3 ) && ( ( VAR_1 . length ) < 0 ) ) { this . VAR_3 = false ; TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( new TYPE_4 ( ) ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 [ ] VAR_1 , TYPE_2 VAR_2 ) { if ( ( this . VAR_3 ) && ( ( VAR_1 . length ) == 0 ) ) { this . VAR_3 = false ; TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( new TYPE_4 ( ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { status . setEnabled ( false ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; TYPE_2 VAR_4 = VAR_2 . METHOD_3 ( ) ; VAR_5 = VAR_4 . METHOD_4 ( ) ; VAR_6 = getIntent ( ) . METHOD_5 ( STRING_1 ) ; VAR_7 = java.lang.String . METHOD_6 ( VAR_8 . getText ( ) ) ; VAR_9 = getIntent ( ) . METHOD_5 ( STRING_2 ) ; new TYPE_3 ( ) . execute ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { status . setEnabled ( false ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; TYPE_2 VAR_4 = VAR_2 . METHOD_3 ( ) ; VAR_5 = VAR_4 . METHOD_4 ( ) ; VAR_6 = getIntent ( ) . METHOD_5 ( STRING_1 ) ; java.lang.System.out.println ( VAR_6 ) ; VAR_7 = java.lang.String . METHOD_6 ( VAR_8 . getText ( ) ) ; VAR_9 = getIntent ( ) . METHOD_5 ( STRING_2 ) ; new TYPE_3 ( ) . execute ( ) ; }\n"}
{"problem": "public java.lang.String toString ( ) { java.lang.StringBuilder output = new java.lang.StringBuilder ( STRING_1 ) ; for ( TYPE_1 item : values ) { output . append ( item . toString ( ) ) ; output . append ( STRING_2 ) ; } output . append ( STRING_3 ) ; return output . toString ( ) ; }\n", "fixed": "public java.lang.String toString ( ) { java.lang.StringBuilder output = new java.lang.StringBuilder ( STRING_1 ) ; boolean first = true ; for ( TYPE_1 item : values ) { if ( ! first ) output . append ( STRING_2 ) ; first = false ; output . append ( item . toString ( ) ) ; } output . append ( STRING_3 ) ; return output . toString ( ) ; }\n"}
{"problem": "public static boolean getBoolean ( java.lang.String VAR_1 , java.lang.Object ... VAR_2 ) { java.lang.String VAR_3 = TYPE_1 . getString ( VAR_1 , VAR_2 ) ; return ( java.lang.Boolean . METHOD_1 ( VAR_3 ) ) || ( ( VAR_4 . METHOD_2 ( VAR_3 ) ) && ( VAR_3 . equals ( \"0\" ) ) ) ; }\n", "fixed": "public static boolean getBoolean ( java.lang.String VAR_1 , java.lang.Object ... VAR_2 ) { java.lang.String VAR_3 = TYPE_1 . getString ( VAR_1 , VAR_2 ) ; return ( java.lang.Boolean . METHOD_1 ( VAR_3 ) ) || ( ( VAR_4 . METHOD_2 ( VAR_3 ) ) && ( ! ( VAR_3 . equals ( \"0\" ) ) ) ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { final java.lang.String key = VAR_1 . METHOD_2 ( ) ; if ( TYPE_2 . equals ( key ) ) { final boolean value = ( ( java.lang.Boolean ) ( VAR_2 ) ) ; TYPE_3 . METHOD_3 ( METHOD_4 ( ) , VAR_3 , ( value ? 1 : 0 ) ) ; return true ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { final java.lang.String key = VAR_1 . METHOD_2 ( ) ; if ( TYPE_2 . equals ( key ) ) { final boolean value = ( ( java.lang.Boolean ) ( VAR_2 ) ) ; TYPE_3 . METHOD_3 ( METHOD_4 ( ) , TYPE_2 , ( value ? 1 : 0 ) ) ; return true ; } return false ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { if ( ( listener ) == null ) return ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) ; if ( VAR_1 . METHOD_3 ( ) ) { java.lang.String VAR_2 = listener . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; } else { VAR_3 . METHOD_5 ( null ) ; } METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) ; if ( VAR_1 . METHOD_3 ( ) ) { java.lang.String VAR_2 = listener . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; } else { VAR_3 . METHOD_5 ( null ) ; } METHOD_6 ( ) ; }\n"}
{"problem": "private boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; TYPE_1 VAR_4 = new TYPE_1 ( STRING_2 ) ; java.util.Date VAR_5 = new java.util.Date ( ) ; TYPE_1 VAR_6 = new TYPE_1 ( STRING_2 ) ; java.util.Date VAR_7 = new java.util.Date ( ) ; try { VAR_5 = VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_7 = VAR_6 . METHOD_2 ( VAR_2 ) ; } catch ( TYPE_2 VAR_8 ) { VAR_8 . METHOD_3 ( ) ; } return ! ( VAR_7 . METHOD_4 ( VAR_5 ) ) ; }\n", "fixed": "private boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_4 = new TYPE_1 ( STRING_2 ) ; java.util.Date VAR_5 = new java.util.Date ( ) ; TYPE_1 VAR_6 = new TYPE_1 ( STRING_2 ) ; java.util.Date VAR_7 = new java.util.Date ( ) ; try { VAR_5 = VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_7 = VAR_6 . METHOD_2 ( VAR_2 ) ; } catch ( TYPE_2 VAR_8 ) { VAR_8 . METHOD_3 ( ) ; } return ! ( VAR_7 . METHOD_4 ( VAR_5 ) ) ; }\n"}
{"problem": "public int METHOD_1 ( char [ ] VAR_1 , int VAR_2 , int VAR_3 ) throws java.io.IOException { int count = 0 ; for ( ; count < VAR_3 ; count ++ ) { VAR_1 [ count ] = buffer [ ( VAR_2 + count ) ] ; } VAR_4 += VAR_2 ; VAR_4 += count ; java.lang.System.out.println ( ( ( ( STRING_1 + ( java.lang.String . METHOD_2 ( VAR_1 ) ) ) + STRING_2 ) + ( VAR_4 ) ) ) ; return count ; }\n", "fixed": "public int METHOD_1 ( char [ ] VAR_1 , int VAR_2 , int VAR_3 ) throws java.io.IOException { int count = 0 ; for ( ; count < VAR_3 ; count ++ ) { VAR_1 [ count ] = buffer [ ( VAR_2 + count ) ] ; } VAR_4 += VAR_2 ; VAR_4 += count ; return count ; }\n"}
{"problem": "public synchronized void METHOD_1 ( int node , int type , int value ) { VAR_1 . METHOD_2 ( node , new TYPE_1 ( this . VAR_2 , type , this . VAR_3 , value , VAR_4 ) ) ; if ( ( ( type != ( VAR_5 ) ) && ( type != ( VAR_6 ) ) ) && ( type != ( VAR_7 ) ) ) { VAR_4 . METHOD_3 ( ) ; } if ( type == ( VAR_8 ) ) { ( VAR_9 [ node ] ) ++ ; } }\n", "fixed": "public synchronized void METHOD_1 ( int node , int type , int value ) { VAR_1 . METHOD_2 ( node , new TYPE_1 ( this . VAR_2 , type , this . VAR_3 , new java.lang.Integer ( value ) , VAR_4 ) ) ; if ( ( ( type != ( VAR_5 ) ) && ( type != ( VAR_6 ) ) ) && ( type != ( VAR_7 ) ) ) { VAR_4 . METHOD_3 ( ) ; } if ( type == ( VAR_8 ) ) { ( VAR_9 [ node ] ) ++ ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"problem": "public void METHOD_1 ( ) throws java.io.IOException { java.util.List < java.lang.String > errors = new java.util.ArrayList < > ( ) ; VAR_1 . METHOD_1 ( VAR_2 , VAR_3 , errors ) ; if ( ! ( errors . isEmpty ( ) ) ) { METHOD_2 ( STRING_1 , errors ) ; } }\n", "fixed": "public void METHOD_1 ( ) throws java.io.IOException { java.util.List < java.lang.String > errors = new java.util.ArrayList < > ( ) ; VAR_1 . METHOD_1 ( VAR_2 , VAR_3 , errors , errors ) ; if ( ! ( errors . isEmpty ( ) ) ) { METHOD_2 ( STRING_1 , errors ) ; } }\n"}
{"problem": "private void METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) == 0 ) { return ; } TYPE_1 item = VAR_1 . get ( ( ( VAR_1 . size ( ) ) - 1 ) ) ; METHOD_2 ( item . METHOD_3 ( ) , item . METHOD_4 ( ) , true , false ) ; VAR_2 = item . METHOD_5 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) == 0 ) { return ; } TYPE_1 item = VAR_1 . get ( ( ( VAR_1 . size ( ) ) - 1 ) ) ; METHOD_2 ( item . METHOD_3 ( ) , item . METHOD_4 ( ) , true , false , item . METHOD_5 ( ) ) ; }\n"}
{"fixCommitSHA1": "ed13d3007bbe9cb7df8641d2e287bf94c314fb86", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "             return false;\n         }\n        long newReservation = memoryReservation.getAndAdd(bytes);\n         if (newReservation > maxMemoryReservation) {\n             memoryReservation.getAndAdd(-bytes);\n             return false;", "fixed": "             return false;\n         }\n        long newReservation = memoryReservation.addAndGet(bytes);\n         if (newReservation > maxMemoryReservation) {\n             memoryReservation.getAndAdd(-bytes);\n             return false;", "sourceBeforeFix": "memoryReservation.getAndAdd(bytes)", "sourceAfterFix": "memoryReservation.addAndGet(bytes)"}
{"problem": "public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.util.ArrayList < TYPE_2 > VAR_3 = new java.util.ArrayList < TYPE_2 > ( ) ; if ( ! ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ) { VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ; } TYPE_3 . METHOD_5 ( VAR_1 , VAR_4 ) ; VAR_3 . add ( VAR_2 ) ; TYPE_3 . METHOD_6 ( VAR_1 , VAR_3 ) ; }\n", "fixed": "public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.util.ArrayList < TYPE_2 > VAR_3 = new java.util.ArrayList < TYPE_2 > ( ) ; if ( ! ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ) { VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ; } TYPE_3 . METHOD_5 ( VAR_1 , VAR_4 ) ; if ( ! ( VAR_3 . contains ( VAR_2 ) ) ) { VAR_3 . add ( VAR_2 ) ; } TYPE_3 . METHOD_6 ( VAR_1 , VAR_3 ) ; }\n"}
{"problem": "protected java.lang.String METHOD_1 ( java.lang.String ... names ) { java.util.ArrayList < java.lang.String > VAR_1 = new java.util.ArrayList < > ( names . length ) ; for ( int i = 0 ; i < ( names . length ) ; i ++ ) { VAR_1 . add ( METHOD_2 ( names [ i ] ) ) ; } return TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) ; }\n", "fixed": "protected java.lang.String METHOD_1 ( java.lang.String ... names ) { java.util.ArrayList < java.lang.String > VAR_1 = new java.util.ArrayList < > ( names . length ) ; for ( java.lang.String name : names ) { VAR_1 . add ( METHOD_2 ( name ) ) ; } return TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) ; }\n"}
{"problem": "protected static void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; try { TYPE_1 . assertEquals ( VAR_1 , TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; } catch ( TYPE_3 VAR_2 ) { VAR_2 . METHOD_5 ( ) ; TYPE_1 . fail ( VAR_2 . METHOD_6 ( ) ) ; } }\n", "fixed": "private static void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; try { TYPE_1 . assertEquals ( VAR_1 , TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; } catch ( TYPE_3 VAR_2 ) { VAR_2 . METHOD_5 ( ) ; TYPE_1 . fail ( VAR_2 . METHOD_6 ( ) ) ; } }\n"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(639)", "sourceAfterFix": "new StringBuilder(638)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_1 == null ) || ( VAR_2 == null ) ) { VAR_3 . METHOD_2 ( null ) ; VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ; } else { if ( VAR_3 . METHOD_2 ( VAR_2 ) ) { VAR_3 . METHOD_5 ( VAR_1 , VAR_4 ) ; VAR_3 . METHOD_6 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_1 == null ) || ( VAR_2 == null ) ) { VAR_3 . METHOD_2 ( null ) ; VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ; } else { if ( VAR_3 . METHOD_2 ( VAR_2 ) ) { VAR_3 . METHOD_5 ( VAR_1 , VAR_4 , null ) ; VAR_3 . METHOD_6 ( ) ; } } }\n"}
{"problem": "public double METHOD_1 ( int VAR_1 ) { if ( ( VAR_1 < 1 ) || ( VAR_1 > ( this . VAR_2 ) ) ) { if ( ( this . VAR_3 ) == ( VAR_4 ) ) { java.lang.System.out.println ( STRING_1 ) ; } return 0.0 ; } return this . VAR_5 [ ( VAR_1 - 1 ) ] ; }\n", "fixed": "public double METHOD_1 ( int VAR_1 ) { if ( ( VAR_1 < 1 ) || ( VAR_1 > ( this . VAR_2 ) ) ) { if ( ( this . VAR_3 ) == ( VAR_4 ) ) { java.lang.System.out.println ( STRING_1 ) ; } return 0.0 ; } return this . VAR_5 [ VAR_1 ] ; }\n"}
{"fixCommitSHA1": "97dc0ab1bd49e5d7644b91bc07c56d759aa84cfa", "projectName": "openmrs.openmrs-core", "bugType": "Change Binary Operator", "problem": " \t */\r\n \t@Override\r\n \tpublic String getDescription() {\r\n\t\tif (getConcept() != null || getConcept().getDescription() != null) {\r\n \t\t\treturn getConcept().getDescription().getDescription();\r\n \t\t}\r\n \t\treturn null;\r", "fixed": " \t */\r\n \t@Override\r\n \tpublic String getDescription() {\r\n\t\tif (getConcept() != null && getConcept().getDescription() != null) {\r\n \t\t\treturn getConcept().getDescription().getDescription();\r\n \t\t}\r\n \t\treturn null;\r", "sourceBeforeFix": "getConcept() != null || getConcept().getName() != null", "sourceAfterFix": "getConcept() != null && getConcept().getName() != null"}
{"fixCommitSHA1": "cdc3ec178ca63ba1cb063986cba2c7b78209aa45", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     }\n     public HazelcastInstance[] newInstances(Config config, int nodeCount) {\n        final HazelcastInstance[] instances = new HazelcastInstance[count];\n         for (int i = 0; i < nodeCount; i++) {\n             instances[i] = newHazelcastInstance(config);\n         }", "fixed": "     }\n     public HazelcastInstance[] newInstances(Config config, int nodeCount) {\n        final HazelcastInstance[] instances = new HazelcastInstance[nodeCount];\n         for (int i = 0; i < nodeCount; i++) {\n             instances[i] = newHazelcastInstance(config);\n         }", "sourceBeforeFix": "new HazelcastInstance[count]", "sourceAfterFix": "new HazelcastInstance[nodeCount]"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedServletEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default ServletEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedServletEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default ServletEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; for ( TYPE_1 VAR_3 : VAR_2 ) { if ( VAR_3 . getName ( ) . equals ( VAR_4 ) ) { return VAR_3 ; } } return null ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 != null ) { for ( TYPE_1 VAR_3 : VAR_2 ) { if ( VAR_3 . getName ( ) . equals ( VAR_4 ) ) { return VAR_3 ; } } } return null ; }\n"}
{"problem": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View VAR_4 = getActivity ( ) . METHOD_2 ( ) . METHOD_3 ( ) ; int VAR_5 = VAR_6 ; VAR_4 . METHOD_4 ( VAR_5 ) ; view = VAR_1 . METHOD_5 ( VAR_7 , VAR_2 , false ) ; METHOD_6 ( ) ; return view ; }\n", "fixed": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { VAR_4 = getActivity ( ) . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_5 = VAR_6 ; VAR_4 . METHOD_4 ( VAR_5 ) ; view = VAR_1 . METHOD_5 ( VAR_7 , VAR_2 , false ) ; METHOD_6 ( ) ; return view ; }\n"}
{"problem": "private java.lang.String METHOD_1 ( java.lang.String VAR_1 , int i ) { java.lang.String result = STRING_1 ; java.lang.String VAR_2 = java.lang.String.format ( STRING_2 , VAR_1 ) ; try ( TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 , VAR_5 , VAR_6 ) ) { TYPE_2 VAR_7 = VAR_3 . METHOD_3 ( ) ; TYPE_3 VAR_8 = VAR_7 . METHOD_4 ( ) ; result = VAR_8 . METHOD_1 ( i ) ; } catch ( TYPE_4 VAR_9 ) { VAR_9 . METHOD_5 ( ) ; } return result ; }\n", "fixed": "private java.lang.String METHOD_1 ( java.lang.String VAR_1 , int i ) { java.lang.String result = STRING_1 ; java.lang.String VAR_2 = java.lang.String.format ( STRING_2 , VAR_1 ) ; try ( TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 , VAR_5 , VAR_6 ) ) { try ( TYPE_2 VAR_7 = VAR_3 . METHOD_3 ( ) ) { TYPE_3 VAR_8 = VAR_7 . METHOD_4 ( ) ; result = VAR_8 . METHOD_1 ( i ) ; } } catch ( TYPE_4 VAR_9 ) { VAR_9 . METHOD_5 ( ) ; } return result ; }\n"}
{"problem": "public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_2 ( VAR_1 ) ; for ( int p = 0 ; p < ( VAR_1 . size ( ) ) ; p ++ ) { TYPE_1 VAR_2 = VAR_1 . get ( p ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_2 ( VAR_1 ) ; for ( int p = 0 ; p < ( VAR_1 . size ( ) ) ; p ++ ) { TYPE_1 VAR_2 = VAR_1 . get ( p ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; METHOD_5 ( VAR_2 ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) > 0 ) && ( ( VAR_1 . METHOD_2 ( ) ) <= ( VAR_2 ) ) ) { return STRING_1 + ( TYPE_2 . values ( ) [ VAR_1 . METHOD_2 ( ) ] . name ) ; } return super . METHOD_1 ( VAR_1 ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) > 0 ) && ( ( VAR_1 . METHOD_2 ( ) ) <= ( VAR_2 ) ) ) { return STRING_1 + ( TYPE_2 . values ( ) [ ( ( VAR_1 . METHOD_2 ( ) ) - 1 ) ] . name ) ; } return super . METHOD_1 ( VAR_1 ) ; }\n"}
{"problem": "public long METHOD_1 ( ) { long result = - 1 ; int VAR_1 = METHOD_2 ( ) ; if ( ( VAR_1 < ( item . size ( ) ) ) && ( item . get ( VAR_1 ) . METHOD_3 ( ) ) ) { return item . get ( VAR_1 ) . getId ( ) ; } return result ; }\n", "fixed": "public long METHOD_1 ( ) { long result = - 1 ; int VAR_1 = METHOD_2 ( ) ; if ( ( ( VAR_1 >= 0 ) && ( VAR_1 < ( item . size ( ) ) ) ) && ( item . get ( VAR_1 ) . METHOD_3 ( ) ) ) { return item . get ( VAR_1 ) . getId ( ) ; } return result ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { if ( ( VAR_1 . METHOD_3 ( STRING_1 ) ) == ( - 1 ) ) { VAR_2 . execute ( STRING_2 ) ; } else { VAR_2 . execute ( VAR_1 . substring ( ( ( VAR_1 . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ) ; } } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_1 = VAR_1 . trim ( ) ; TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { if ( ( VAR_1 . METHOD_3 ( STRING_1 ) ) == ( - 1 ) ) { VAR_2 . execute ( STRING_2 ) ; } else { VAR_2 . execute ( VAR_1 . substring ( ( ( VAR_1 . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ) ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNano(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "fixed": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"problem": "public static java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList ( VAR_1 . size ( ) ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { TYPE_1 VAR_4 = new TYPE_1 ( VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_3 . name ) ; VAR_2 . add ( VAR_4 ) ; } TYPE_2 . METHOD_2 ( VAR_2 ) ; return VAR_2 ; }\n", "fixed": "public static java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , int size ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( size ) ; for ( int i = 0 ; i < size ; i ++ ) { TYPE_1 VAR_3 = VAR_1 . get ( i ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_3 . name ) ; VAR_2 . add ( VAR_4 ) ; } TYPE_2 . METHOD_2 ( VAR_2 ) ; return VAR_2 ; }\n"}
{"problem": "public int METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 . get ( VAR_1 ) ) != null ) { int VAR_3 = VAR_2 . get ( VAR_1 ) . METHOD_2 ( ) ; VAR_2 . remove ( VAR_1 ) ; return VAR_3 ; } return 0 ; }\n", "fixed": "public int METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 . get ( VAR_1 ) ) != null ) { int VAR_3 = VAR_2 . get ( VAR_1 ) . METHOD_2 ( ) ; VAR_2 . remove ( VAR_1 ) ; return VAR_3 ; } return - 1 ; }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) . METHOD_6 ( VAR_2 ) . METHOD_7 ( VAR_3 ) ; VAR_4 . setText ( VAR_1 . getName ( ) ) ; VAR_5 . setText ( VAR_6 . METHOD_8 ( ) ) ; VAR_7 . setText ( java.lang.String . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) ) ; VAR_8 . setText ( VAR_6 . METHOD_11 ( ) ) ; }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) . METHOD_6 ( VAR_2 ) . METHOD_7 ( VAR_3 ) ; VAR_4 . setText ( VAR_1 . getName ( ) ) ; VAR_7 . setText ( java.lang.String . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( java.util.List < ? extends TYPE_2 > data ) { int p = data . iterator ( ) . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; TYPE_1 VAR_1 = new TYPE_3 ( data . size ( ) , p ) ; int VAR_2 = 0 ; for ( TYPE_2 VAR_3 : data ) { VAR_1 . METHOD_5 ( VAR_2 , VAR_3 . METHOD_3 ( ) . METHOD_6 ( ) ) ; VAR_2 += 1 ; } return new TYPE_4 ( VAR_1 ) . METHOD_7 ( ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.util.List < ? extends TYPE_2 > data ) { TYPE_1 VAR_1 = new TYPE_3 ( data . size ( ) , p ) ; int VAR_2 = 0 ; for ( TYPE_2 VAR_3 : data ) { VAR_1 . METHOD_5 ( VAR_2 , VAR_3 . METHOD_3 ( ) . METHOD_6 ( ) ) ; VAR_2 += 1 ; } return new TYPE_4 ( VAR_1 ) . METHOD_7 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { TYPE_2 intent = new TYPE_2 ( view . getContext ( ) , VAR_2 class ) ; TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_4 . get ( VAR_1 . METHOD_2 ( ) ) ) ) ; intent . METHOD_3 ( VAR_5 , VAR_3 ) ; METHOD_4 ( intent ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { android.content.Intent intent = new android.content.Intent ( view . getContext ( ) , VAR_2 class ) ; TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_4 . get ( VAR_1 . METHOD_2 ( ) ) ) ) ; intent . METHOD_3 ( VAR_5 , VAR_3 ) ; METHOD_4 ( intent ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { int count = INT_1 ; TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ( count + 1 ) ) ; assertEquals ( ( ( ( STRING_1 + count ) + STRING_2 ) + ( VAR_1 . result ( ) . size ( ) ) ) , count , VAR_1 . result ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { int count = INT_1 ; TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ( count + 1 ) ) ; assertEquals ( ( ( ( STRING_1 + count ) + STRING_2 ) + ( VAR_1 . result ( ) . size ( ) ) ) , count , VAR_1 . result ( ) . size ( ) ) ; }\n"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { switch ( getType ( ) ) { case VAR_2 : METHOD_2 ( VAR_1 ) ; break ; case VAR_3 : METHOD_3 ( VAR_1 ) ; break ; case VAR_4 : METHOD_4 ( VAR_1 ) ; break ; default : return ; } METHOD_5 ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { switch ( getType ( ) ) { case VAR_2 : METHOD_2 ( ) ; break ; case VAR_3 : METHOD_3 ( ) ; break ; case VAR_4 : METHOD_4 ( ) ; break ; default : return ; } METHOD_5 ( ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = super . METHOD_1 ( ) ; if ( ( VAR_2 ) == 0 ) { VAR_1 += STRING_1 + STRING_2 ; } else if ( ( VAR_2 ) == 1 ) { VAR_1 += STRING_3 ; } else if ( ( VAR_2 ) == INT_1 ) { VAR_1 += STRING_4 + STRING_2 ; } else if ( ( VAR_2 ) == INT_2 ) { VAR_1 += STRING_5 ; } if ( ( java.lang.Integer.parseInt ( VAR_3 ) ) >= INT_3 ) { VAR_1 += STRING_6 ; } return VAR_1 ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = super . METHOD_1 ( ) ; if ( ( VAR_2 ) == 0 ) { VAR_1 += STRING_1 + STRING_2 ; } else if ( ( VAR_2 ) == 1 ) { VAR_1 += STRING_3 ; } else if ( ( VAR_2 ) == INT_1 ) { VAR_1 += STRING_4 + STRING_2 ; } else if ( ( VAR_2 ) == INT_2 ) { VAR_1 += STRING_5 ; } return VAR_1 ; }\n"}
{"problem": "public static synchronized TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { throw new TYPE_2 ( STRING_1 ) ; } VAR_1 = new TYPE_1 ( TYPE_3 . METHOD_2 ( STRING_2 ) , TYPE_3 . METHOD_2 ( STRING_3 ) , TYPE_3 . METHOD_2 ( STRING_4 ) , TYPE_3 . METHOD_2 ( STRING_5 ) ) ; return VAR_1 ; }\n", "fixed": "public static synchronized TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( TYPE_3 . METHOD_2 ( STRING_2 ) , TYPE_3 . METHOD_2 ( STRING_3 ) , TYPE_3 . METHOD_2 ( STRING_4 ) , TYPE_3 . METHOD_2 ( STRING_5 ) ) ; } return VAR_1 ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) . METHOD_4 ( this ) ; METHOD_5 ( TYPE_2 . METHOD_6 ( this ) ) ; VAR_3 . METHOD_7 ( this ) ; VAR_4 . METHOD_8 ( new TYPE_3 ( ) ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) . METHOD_4 ( this ) ; METHOD_5 ( TYPE_2 . METHOD_6 ( this ) ) ; VAR_4 . METHOD_8 ( new TYPE_3 ( ) ) ; VAR_3 . METHOD_7 ( this ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { for ( int VAR_1 = 0 ; VAR_1 < ( VAR_2 . size ( ) ) ; VAR_1 ++ ) { if ( VAR_2 . get ( VAR_1 ) . getName ( ) . contains ( STRING_1 ) ) { VAR_2 . get ( VAR_1 ) . METHOD_2 ( ( ( STRING_2 + VAR_1 ) + 1 ) ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { for ( int VAR_1 = 0 ; VAR_1 < ( VAR_2 . size ( ) ) ; VAR_1 ++ ) { if ( VAR_2 . get ( VAR_1 ) . getName ( ) . contains ( STRING_1 ) ) { VAR_2 . get ( VAR_1 ) . METHOD_2 ( ( STRING_2 + ( VAR_1 + 1 ) ) ) ; } } }\n"}
{"problem": "public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ( ( ( VAR_1 < 0 ) || ( VAR_1 >= ( VAR_3 ) ) ) || ( VAR_2 < 0 ) ) || ( VAR_2 >= ( VAR_3 ) ) ) return false ; return ( METHOD_2 ( VAR_1 , VAR_2 ) ) && ( TYPE_1 . METHOD_3 ( 0 , ( - 1 ) , VAR_1 , VAR_2 ) ) ; }\n", "fixed": "public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ( ( ( VAR_1 < 0 ) || ( VAR_1 >= ( VAR_3 ) ) ) || ( VAR_2 < 0 ) ) || ( VAR_2 >= ( VAR_3 ) ) ) return false ; return ( METHOD_2 ( VAR_1 , VAR_2 ) ) && ( TYPE_1 . METHOD_3 ( 0 , ( - 1 ) , VAR_1 , VAR_2 , false ) ) ; }\n"}
{"problem": "private java.lang.String METHOD_1 ( final java.lang.String filename ) { TYPE_1 path = TYPE_2 . get ( ( ( ( ( ( VAR_1 ) + ( VAR_2 ) ) + ( VAR_3 ) ) + filename ) + ( VAR_4 ) ) ) ; byte [ ] VAR_5 ; try { VAR_5 = TYPE_3 . METHOD_2 ( path ) ; } catch ( java.io.IOException VAR_6 ) { throw new TYPE_4 ( ( STRING_1 + filename ) ) ; } return new java.lang.String ( VAR_5 , VAR_7 ) ; }\n", "fixed": "private java.lang.String METHOD_1 ( final java.lang.String filename ) { TYPE_1 path = TYPE_2 . get ( ( ( ( ( ( VAR_1 ) + ( VAR_2 ) ) + ( VAR_3 ) ) + filename ) + ( VAR_4 ) ) ) ; byte [ ] VAR_5 ; try { VAR_5 = TYPE_3 . METHOD_2 ( path ) ; } catch ( java.io.IOException VAR_6 ) { throw new TYPE_4 ( ( STRING_1 + path ) ) ; } return new java.lang.String ( VAR_5 , VAR_7 ) ; }\n"}
{"problem": "public void replace ( TYPE_1 VAR_1 ) { final java.lang.String key = VAR_1 . getName ( ) ; switch ( size ) { case INT_1 : if ( key . equals ( VAR_2 ) ) { VAR_3 = VAR_1 ; return ; } case INT_2 : if ( key . equals ( VAR_4 ) ) { VAR_5 = VAR_1 ; return ; } case 1 : if ( key . equals ( VAR_6 ) ) { VAR_7 = VAR_1 ; return ; } } throw new TYPE_2 ( ( ( STRING_1 + key ) + STRING_2 ) ) ; }\n", "fixed": "public void replace ( TYPE_1 VAR_1 ) { final java.lang.String key = VAR_1 . getName ( ) ; switch ( size ) { case INT_1 : if ( key . equals ( VAR_2 ) ) { VAR_3 = VAR_1 ; return ; } case INT_2 : if ( key . equals ( VAR_4 ) ) { VAR_5 = VAR_1 ; return ; } case 1 : if ( key . equals ( VAR_6 ) ) { VAR_7 = VAR_1 ; return ; } } super . replace ( VAR_1 ) ; }\n"}
{"fixCommitSHA1": "3f3bab10b9ca68eb31a7ef5a31e49145b51006fd", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\tserializedValue = new SerializedValue<>(null);\n \t\t\t\t} else {\n \t\t\t\t\tbyte[] serializedData = new byte[length];\n\t\t\t\t\tdis.read(serializedData, 0, length);\n \t\t\t\t\tserializedValue = SerializedValue.fromBytes(serializedData);\n \t\t\t\t}", "fixed": " \t\t\t\t\tserializedValue = new SerializedValue<>(null);\n \t\t\t\t} else {\n \t\t\t\t\tbyte[] serializedData = new byte[length];\n\t\t\t\t\tdis.readFully(serializedData, 0, length);\n \t\t\t\t\tserializedValue = SerializedValue.fromBytes(serializedData);\n \t\t\t\t}", "sourceBeforeFix": "dis.read(serializedData,0,length)", "sourceAfterFix": "dis.readFully(serializedData,0,length)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"problem": "private boolean METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getText ( ) ; if ( ( ( ( VAR_1 != null ) && ( VAR_1 != STRING_1 ) ) && ( ( VAR_3 . METHOD_2 ( ) ) != null ) ) && ( ( VAR_4 . METHOD_2 ( ) ) != null ) ) { return true ; } return false ; }\n", "fixed": "private boolean METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getText ( ) ; if ( ( ( VAR_1 != null ) && ( VAR_1 != STRING_1 ) ) && ( ( VAR_4 . METHOD_2 ( ) ) != null ) ) { return true ; } return false ; }\n"}
{"problem": "protected boolean METHOD_1 ( ) { long VAR_1 = this . METHOD_2 ( ) ; int VAR_2 = this . METHOD_3 ( ) ; if ( VAR_2 < 0 ) { return false ; } if ( ( ( TYPE_1 . METHOD_4 ( ) ) - VAR_1 ) > ( VAR_2 * INT_1 ) ) { return true ; } return false ; }\n", "fixed": "protected boolean METHOD_1 ( ) { long VAR_1 = this . METHOD_2 ( ) ; int VAR_2 = 0 ; if ( null != ( this . METHOD_3 ( ) ) ) { VAR_2 = this . METHOD_3 ( ) . intValue ( ) ; } if ( VAR_2 < 0 ) { return false ; } if ( ( ( TYPE_1 . METHOD_4 ( ) ) - VAR_1 ) > ( VAR_2 * INT_1 ) ) { return true ; } return false ; }\n"}
{"problem": "public final int METHOD_1 ( long VAR_1 ) { int count = 0 ; for ( long p = VAR_1 - 1 ; p >= 0 ; p -- ) { if ( ( this . METHOD_2 ( VAR_1 ) ) == CHAR_1 ) { break ; } count ++ ; } return count ; }\n", "fixed": "public final int METHOD_1 ( long VAR_1 ) { int count = 0 ; for ( long p = VAR_1 - 1 ; p >= 0 ; p -- ) { if ( ( this . METHOD_2 ( p ) ) == CHAR_1 ) { break ; } count ++ ; } return count ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : METHOD_3 ( ) ; return true ; case VAR_2 : METHOD_4 ( ) ; return true ; case VAR_3 : METHOD_5 ( ) ; default : return super . METHOD_1 ( item ) ; } }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : METHOD_3 ( ) ; return true ; case VAR_2 : METHOD_4 ( ) ; return true ; case VAR_3 : METHOD_5 ( ) ; return true ; default : return super . METHOD_1 ( item ) ; } }\n"}
{"problem": "public boolean add ( TYPE_1 VAR_1 ) { if ( ( this . size ( ) ) == ( VAR_2 ) ) { ( VAR_3 ) ++ ; METHOD_1 ( VAR_4 . get ( 0 ) ) ; VAR_4 . remove ( ( ( VAR_4 . size ( ) ) - 1 ) ) ; VAR_1 . METHOD_2 ( 0L ) ; VAR_4 . add ( 0 , VAR_1 ) ; return true ; } else add ( 0 , VAR_1 ) ; return true ; }\n", "fixed": "public boolean add ( TYPE_1 VAR_1 ) { if ( ( this . size ( ) ) == ( VAR_2 ) ) { ( VAR_3 ) ++ ; METHOD_1 ( VAR_4 . get ( 0 ) ) ; VAR_4 . remove ( ( ( VAR_4 . size ( ) ) - 1 ) ) ; VAR_1 . METHOD_2 ( 0L ) ; VAR_4 . add ( 0 , VAR_1 ) ; return true ; } else { VAR_1 . METHOD_2 ( 0L ) ; add ( 0 , VAR_1 ) ; } return true ; }\n"}
{"problem": "void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) && ( ( VAR_2 . size ( ) ) > 0 ) ) && ( ! ( VAR_2 . METHOD_3 ( ) . METHOD_2 ( ) ) ) ) { TYPE_1 VAR_3 = VAR_2 . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( VAR_1 ) ; METHOD_1 ( VAR_3 ) ; } else { VAR_2 . add ( VAR_1 ) ; } }\n", "fixed": "private void METHOD_1 ( final TYPE_1 state ) { if ( ( ( ! ( VAR_2 . isEmpty ( ) ) ) && ( state . METHOD_2 ( ) ) ) && ( ! ( VAR_2 . METHOD_3 ( ) . METHOD_2 ( ) ) ) ) { final TYPE_1 VAR_3 = VAR_2 . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( state ) ; METHOD_1 ( VAR_3 ) ; } else { VAR_2 . add ( state ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_3 = VAR_2 . METHOD_4 ( VAR_4 class , 1 ) ; VAR_5 = VAR_2 . METHOD_4 ( VAR_6 class , 1 ) ; message = VAR_2 . METHOD_4 ( VAR_7 class , 1 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_3 = VAR_2 . METHOD_4 ( VAR_4 class , 1 ) ; VAR_5 = VAR_2 . METHOD_4 ( VAR_6 class , 1 ) ; }\n"}
{"problem": "private void METHOD_1 ( int VAR_1 ) { int VAR_2 = METHOD_2 ( VAR_1 ) . getId ( ) ; if ( ( VAR_1 != ( VAR_3 ) ) && ( ( VAR_4 ) != null ) ) { VAR_3 = VAR_1 ; VAR_4 . METHOD_3 ( VAR_2 ) ; } else if ( ( ( VAR_5 ) != null ) && ( ! ( VAR_6 ) ) ) { VAR_5 . METHOD_4 ( VAR_2 ) ; } if ( VAR_6 ) { VAR_6 = false ; } }\n", "fixed": "private void METHOD_1 ( int VAR_1 ) { int VAR_2 = METHOD_2 ( VAR_1 ) . getId ( ) ; if ( VAR_1 != ( VAR_3 ) ) { if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_3 ( VAR_2 ) ; } } else if ( ( ( VAR_5 ) != null ) && ( ! ( VAR_6 ) ) ) { VAR_5 . METHOD_4 ( VAR_2 ) ; } VAR_3 = VAR_1 ; if ( VAR_6 ) { VAR_6 = false ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { while ( VAR_1 ) { try { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; } java.lang.Thread . METHOD_4 ( INT_1 ) ; } catch ( TYPE_1 | TYPE_2 | java.lang.NullPointerException VAR_5 ) { VAR_5 . METHOD_5 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { while ( VAR_1 ) { try { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; if ( ( VAR_4 ) != null ) VAR_4 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; java.lang.Thread . METHOD_4 ( INT_1 ) ; } catch ( TYPE_1 | TYPE_2 | java.lang.NullPointerException VAR_5 ) { VAR_5 . METHOD_5 ( ) ; } } }\n"}
{"problem": "private void METHOD_1 ( ) { try { java.lang.String VAR_1 = STRING_1 + ( STRING_2 + STRING_3 ) ; TYPE_1 VAR_2 = c . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; } catch ( TYPE_2 VAR_3 ) { VAR_4 . error ( STRING_4 , VAR_3 ) ; } }\n", "fixed": "private void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 + ( STRING_2 + STRING_3 ) ; try ( TYPE_1 VAR_2 = c . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( VAR_1 ) ; } catch ( TYPE_2 VAR_3 ) { VAR_4 . error ( STRING_4 , VAR_3 ) ; } }\n"}
{"problem": "protected void METHOD_1 ( ) { VAR_1 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_1 ) ; VAR_5 = METHOD_2 ( VAR_5 , VAR_6 , VAR_7 ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; VAR_8 = METHOD_2 ( VAR_8 , VAR_9 , VAR_10 ) ; VAR_4 . METHOD_5 ( VAR_8 ) ; VAR_11 = METHOD_2 ( VAR_11 , VAR_12 , VAR_13 ) ; VAR_4 . METHOD_6 ( VAR_11 ) ; }\n", "fixed": "protected void METHOD_1 ( ) { VAR_1 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_1 ) ; VAR_5 = METHOD_2 ( VAR_5 , VAR_6 , VAR_7 ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; VAR_8 = METHOD_2 ( VAR_8 , VAR_9 , VAR_10 ) ; VAR_4 . METHOD_5 ( VAR_8 ) ; VAR_11 = METHOD_2 ( VAR_11 , VAR_12 , VAR_13 ) ; VAR_4 . METHOD_6 ( VAR_11 ) ; }\n"}
{"problem": "public void put ( TYPE_1 VAR_1 , TYPE_2 value , java.util.Map < java.lang.String , java.lang.Object > VAR_2 ) { TYPE_3 < TYPE_2 > VAR_3 = new TYPE_3 < TYPE_2 > ( name , VAR_2 , this . VAR_4 , this . VAR_5 , this . VAR_6 ) ; VAR_3 . put ( VAR_1 , value ) ; }\n", "fixed": "public void put ( TYPE_1 VAR_1 , TYPE_2 value , java.util.Map < java.lang.String , java.lang.Object > VAR_2 ) { TYPE_3 < TYPE_2 > VAR_3 = new TYPE_3 ( name , VAR_2 , this . VAR_4 , this . VAR_5 , this . VAR_6 ) ; VAR_3 . put ( VAR_1 , value ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_2 VAR_2 = null ; boolean VAR_3 = false ; for ( TYPE_1 c : VAR_1 ) { if ( c . getName ( ) . equals ( STRING_1 ) ) VAR_2 = ( ( TYPE_2 ) ( c ) ) ; if ( c . getName ( ) . equals ( STRING_2 ) ) { VAR_3 = true ; break ; } } if ( VAR_3 ) VAR_2 . METHOD_2 ( true ) ; }\n", "fixed": "private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_2 VAR_2 = null ; boolean VAR_3 = false ; for ( TYPE_1 c : VAR_1 ) { if ( c . getName ( ) . equals ( STRING_1 ) ) VAR_2 = ( ( TYPE_2 ) ( c ) ) ; if ( c . getName ( ) . equals ( STRING_2 ) ) { VAR_3 = true ; break ; } } if ( ( VAR_2 != null ) && VAR_3 ) VAR_2 . METHOD_2 ( true ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = this . VAR_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( STRING_1 , this . VAR_3 . METHOD_4 ( ) ) ; VAR_1 . METHOD_3 ( STRING_2 , null ) ; VAR_1 . METHOD_5 ( STRING_3 ) ; return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = this . VAR_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( STRING_1 , this . VAR_3 . METHOD_4 ( false ) ) ; VAR_1 . METHOD_3 ( STRING_2 , null ) ; VAR_1 . METHOD_5 ( STRING_3 ) ; return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { java.lang.Object VAR_1 = event . METHOD_2 ( ) ; if ( VAR_1 == start ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 . METHOD_3 ( false ) ; VAR_3 . init ( ) ; } if ( VAR_1 == VAR_4 ) { java.lang.System.out.println ( STRING_2 ) ; VAR_2 . METHOD_3 ( false ) ; } if ( VAR_1 == VAR_5 ) java.lang.System.exit ( 0 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { java.lang.Object VAR_1 = event . METHOD_2 ( ) ; if ( VAR_1 == start ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 . METHOD_3 ( false ) ; } if ( VAR_1 == VAR_4 ) { java.lang.System.out.println ( STRING_2 ) ; VAR_2 . METHOD_3 ( false ) ; } if ( VAR_1 == VAR_5 ) java.lang.System.exit ( 0 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; int VAR_2 = INT_1 ; while ( ( VAR_1 . isEmpty ( ) ) && ( VAR_2 >= 0 ) ) { VAR_1 = METHOD_2 ( VAR_2 , false ) ; VAR_2 -= 1 ; } if ( VAR_1 . isEmpty ( ) ) { return null ; } else { java.util.Collections.sort ( VAR_1 ) ; return VAR_1 . get ( ( ( VAR_1 . size ( ) ) - 1 ) ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; int VAR_2 = INT_1 ; while ( ( VAR_1 . isEmpty ( ) ) && ( VAR_2 >= 1 ) ) { VAR_1 = METHOD_2 ( VAR_2 , false ) ; VAR_2 -= 1 ; } if ( VAR_1 . isEmpty ( ) ) { return null ; } else { java.util.Collections.sort ( VAR_1 ) ; return VAR_1 . get ( ( ( VAR_1 . size ( ) ) - 1 ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( INT_1 ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; try { VAR_3 . METHOD_6 ( VAR_3 . METHOD_7 ( VAR_2 ) ) ; } catch ( TYPE_3 VAR_4 ) { } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( INT_1 ) ; long VAR_2 = TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) . getTime ( ) ; try { VAR_3 . METHOD_6 ( VAR_3 . METHOD_7 ( VAR_2 ) ) ; } catch ( TYPE_3 VAR_4 ) { } }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 , java.lang.String name ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( this ) ; VAR_2 . METHOD_3 ( new TYPE_2 ( name , VAR_1 ) ) ; METHOD_4 ( ) . METHOD_5 ( ) . remove ( METHOD_4 ( ) . METHOD_6 ( VAR_3 ) ) . commit ( ) ; METHOD_4 ( ) . METHOD_5 ( ) . replace ( VAR_4 , new TYPE_3 ( ) ) . commit ( ) ; VAR_5 . setText ( java.lang.Integer.toString ( 0 ) ) ; METHOD_7 ( ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 , java.lang.String name ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( this ) ; VAR_2 . METHOD_3 ( new TYPE_2 ( name , VAR_1 ) ) ; METHOD_4 ( ) . METHOD_5 ( ) . remove ( METHOD_4 ( ) . METHOD_6 ( VAR_3 ) ) . commit ( ) ; METHOD_4 ( ) . METHOD_5 ( ) . replace ( VAR_4 , TYPE_3 . METHOD_2 ( this ) ) . commit ( ) ; VAR_5 . setText ( java.lang.Integer.toString ( 0 ) ) ; METHOD_7 ( ) ; }\n"}
{"problem": "private boolean METHOD_1 ( java.lang.String key , boolean VAR_1 ) { if ( VAR_2 ) { return VAR_3 . getBoolean ( key , VAR_1 ) ; } else { if ( ! ( VAR_4 . METHOD_2 ( key ) ) ) { VAR_4 . put ( key , ( ( VAR_3 . getBoolean ( key , VAR_1 ) ) + STRING_1 ) ) ; } return java.lang.Boolean . METHOD_3 ( VAR_4 . get ( key ) ) ; } }\n", "fixed": "protected boolean METHOD_1 ( java.lang.String key , boolean VAR_1 ) { if ( VAR_2 ) { return VAR_3 . getBoolean ( key , VAR_1 ) ; } else { if ( ! ( VAR_4 . METHOD_2 ( key ) ) ) { VAR_4 . put ( key , ( ( VAR_3 . getBoolean ( key , VAR_1 ) ) + STRING_1 ) ) ; } return java.lang.Boolean . METHOD_3 ( VAR_4 . get ( key ) ) ; } }\n"}
{"problem": "protected void METHOD_1 ( java.lang.CharSequence VAR_1 , TYPE_1 VAR_2 ) { java.util.ArrayList < TYPE_2 > results = ( ( java.util.ArrayList < TYPE_2 > ) ( VAR_2 . values ) ) ; if ( ( VAR_2 . count ) > 0 ) { VAR_3 . METHOD_2 ( ) ; for ( TYPE_2 VAR_4 : results ) { VAR_3 . add ( VAR_4 ) ; } METHOD_3 ( ) ; } else { VAR_3 . METHOD_2 ( ) ; METHOD_3 ( ) ; } }\n", "fixed": "protected void METHOD_1 ( java.lang.CharSequence VAR_1 , TYPE_1 VAR_2 ) { VAR_3 . METHOD_2 ( ) ; java.util.ArrayList < TYPE_2 > results = ( ( java.util.ArrayList < TYPE_2 > ) ( VAR_2 . values ) ) ; if ( ( VAR_2 . count ) > 0 ) { for ( TYPE_2 VAR_4 : results ) { VAR_3 . add ( VAR_4 ) ; } METHOD_3 ( ) ; } else { METHOD_3 ( ) ; } }\n"}
{"problem": "protected void METHOD_1 ( java.lang.String result ) { super . METHOD_1 ( result ) ; if ( ( VAR_1 ) == 1 ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 . setEnabled ( true ) ; VAR_3 . setEnabled ( true ) ; VAR_4 . setEnabled ( false ) ; } if ( ( VAR_5 ) == 1 ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , STRING_2 , VAR_6 ) . show ( ) ; } }\n", "fixed": "protected void METHOD_1 ( java.lang.String result ) { super . METHOD_1 ( result ) ; if ( ( VAR_1 ) == 1 ) { VAR_2 . setEnabled ( true ) ; VAR_3 . setEnabled ( true ) ; VAR_4 . setEnabled ( false ) ; } if ( ( VAR_5 ) == 1 ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , STRING_2 , VAR_6 ) . show ( ) ; } }\n"}
{"problem": "private TYPE_1 < TYPE_2 > METHOD_1 ( int VAR_1 , java.lang.Long VAR_2 , java.lang.Long VAR_3 ) { TYPE_1 < TYPE_2 > VAR_4 = new TYPE_1 < TYPE_2 > ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_4 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; } else if ( VAR_3 != null ) { VAR_4 . METHOD_4 ( TYPE_3 . METHOD_3 ( VAR_3 ) ) ; } return VAR_4 ; }\n", "fixed": "private TYPE_1 < TYPE_2 > METHOD_1 ( int VAR_1 , java.lang.Long VAR_2 , java.lang.Long VAR_3 ) { TYPE_1 < TYPE_2 > VAR_4 = new TYPE_1 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_4 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; } else if ( VAR_3 != null ) { VAR_4 . METHOD_4 ( TYPE_3 . METHOD_3 ( VAR_3 ) ) ; } return VAR_4 ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EhcacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedEhcacheEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface EhcacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedEhcacheEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( final int VAR_1 ) { for ( int i = 0 ; i <= ( VAR_2 ) ; i ++ ) { if ( ( i < VAR_1 ) || ( ( VAR_3 [ i ] ) > VAR_1 ) ) { VAR_4 . set ( i ) ; } else { VAR_5 . set ( i ) ; } } }\n", "fixed": "public void METHOD_1 ( final int VAR_1 ) { for ( int i = 0 ; i <= ( VAR_2 ) ; i ++ ) { if ( VAR_1 == ( - 1 ) ) { VAR_5 . set ( i ) ; VAR_4 . set ( i ) ; } else if ( ( i < VAR_1 ) || ( ( VAR_3 [ i ] ) > VAR_1 ) ) { VAR_4 . set ( i ) ; } else { VAR_5 . set ( i ) ; } } }\n"}
{"problem": "public void init ( ) throws TYPE_1 , TYPE_2 { VAR_1 = new TYPE_3 ( VAR_2 , VAR_3 class . METHOD_1 ( STRING_1 ) , new int [ ] { VAR_4 } , false ) ; VAR_5 = new TYPE_4 ( ) ; TYPE_5 . get ( ) . init ( ) ; }\n", "fixed": "public void init ( ) throws TYPE_1 , TYPE_2 { TYPE_5 . get ( ) . init ( ) ; VAR_1 = new TYPE_3 ( VAR_2 , VAR_3 class . METHOD_1 ( STRING_1 ) , new int [ ] { VAR_4 } , false ) ; VAR_5 = new TYPE_4 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; VAR_1 . METHOD_4 ( STRING_3 ) ; TYPE_2 VAR_2 = new TYPE_2 ( new TYPE_3 ( ) , new java.util.ArrayList < TYPE_4 > ( ) , VAR_1 , new TYPE_5 ( STRING_4 ) , false , STRING_4 , null ) ; TYPE_6 . assertNotNull ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; VAR_1 . METHOD_4 ( STRING_3 ) ; TYPE_2 VAR_2 = new TYPE_2 ( new TYPE_3 ( ) , new java.util.ArrayList < TYPE_4 > ( ) , VAR_1 , false , STRING_4 , null ) ; TYPE_6 . assertNotNull ( VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { try { this . VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; } catch ( java.lang.Exception VAR_4 ) { TYPE_1 . METHOD_5 ( VAR_5 , ( STRING_1 + ( VAR_4 . toString ( ) ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { if ( ( this . VAR_1 ) != null ) this . VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 ) != null ) VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; } catch ( java.lang.Exception VAR_4 ) { TYPE_1 . METHOD_5 ( VAR_5 , ( STRING_1 + ( VAR_4 . toString ( ) ) ) ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws java.io.IOException { java.io.File file = new java.io.File ( VAR_1 ) ; if ( ( ! ( file . METHOD_2 ( ) ) ) || ( ! ( file . METHOD_3 ( ) ) ) ) { throw new java.io.IOException ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } return METHOD_1 ( file , null , VAR_2 , VAR_3 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_3 ) throws java.io.IOException { java.io.File file = new java.io.File ( VAR_1 ) ; if ( ( ! ( file . METHOD_2 ( ) ) ) || ( ! ( file . METHOD_3 ( ) ) ) ) { throw new java.io.IOException ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } return METHOD_1 ( file , null , VAR_3 ) ; }\n"}
{"fixCommitSHA1": "c2727dd063ee825119f627fdcf51a26a21d43fd5", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "   protected abstract boolean tableExists(Handle handle, final String tableName);\n  public void createTable(final IDBI dbi, final String tableName, final List<String> sql)\n   {\n     try {\n       dbi.withHandle(", "fixed": "   protected abstract boolean tableExists(Handle handle, final String tableName);\n  public void createTable(final IDBI dbi, final String tableName, final Iterable<String> sql)\n   {\n     try {\n       dbi.withHandle(", "sourceBeforeFix": "List<String>", "sourceAfterFix": "Iterable<String>"}
{"problem": "public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { if ( VAR_1 != null ) { final TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) . METHOD_7 ( TYPE_4 . METHOD_8 ( VAR_1 ) ) . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) ; return VAR_2 . build ( ) ; } return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( ) ; if ( VAR_1 != null ) VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) . METHOD_7 ( TYPE_4 . METHOD_8 ( VAR_1 ) ) . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) ; return VAR_2 . build ( ) ; }\n"}
{"problem": "private TYPE_1 [ ] METHOD_1 ( ) { if ( ( ( METHOD_2 ( ) ) instanceof TYPE_2 ) || ( ( METHOD_2 ( ) ) instanceof TYPE_3 ) ) { java.lang.Object content = this . METHOD_3 ( TYPE_4 . METHOD_4 ( ) ) ; if ( content instanceof TYPE_1 [ ] ) { TYPE_1 [ ] values = ( ( TYPE_1 [ ] ) ( content ) ) ; return values ; } } return null ; }\n", "fixed": "private TYPE_1 [ ] METHOD_1 ( ) { if ( ( ( METHOD_2 ( ) ) instanceof TYPE_2 ) || ( ( METHOD_2 ( ) ) instanceof TYPE_3 ) ) { java.lang.Object content = METHOD_3 ( TYPE_4 . METHOD_4 ( ) ) ; if ( content instanceof TYPE_1 [ ] ) { TYPE_1 [ ] values = ( ( TYPE_1 [ ] ) ( content ) ) ; return values ; } } return null ; }\n"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Ignoring duplicate class \" + className)", "sourceAfterFix": "LOG.warn(\"Ignoring duplicate class \" + className)"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( INT_1 ) . build ( ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = VAR_2 . METHOD_5 ( INT_1 , VAR_4 ) ; TYPE_3 . assertThat ( VAR_3 , TYPE_4 . not ( TYPE_4 . METHOD_6 ( ) ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( INT_1 ) . build ( ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = VAR_2 . METHOD_5 ( INT_1 , VAR_4 , null ) ; TYPE_3 . assertThat ( VAR_3 , TYPE_4 . not ( TYPE_4 . METHOD_6 ( ) ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_1 t ; TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; t = ( ( TYPE_1 ) ( VAR_2 . METHOD_4 ( VAR_1 ) ) ) ; VAR_2 . METHOD_5 ( ) . commit ( ) ; VAR_2 . METHOD_6 ( ) ; return t ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( ) . commit ( ) ; VAR_2 . METHOD_6 ( ) ; return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { TYPE_2 list = VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ; for ( int i = 0 ; i < ( list . METHOD_4 ( ) ) ; i ++ ) { VAR_4 . add ( TYPE_3 . METHOD_5 ( list . METHOD_6 ( i ) ) ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { TYPE_2 list = VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ; for ( int i = 0 ; i < ( list . METHOD_4 ( ) ) ; i ++ ) { VAR_4 . add ( TYPE_3 . METHOD_5 ( list . METHOD_6 ( i ) ) ) ; } } }\n"}
{"problem": "private java.util.List < java.lang.String > METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { return VAR_2 ; } java.lang.String VAR_3 = TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) , STRING_1 ) ; return TYPE_4 . METHOD_5 ( VAR_3 , VAR_1 ) ; }\n", "fixed": "private java.util.List < java.lang.String > METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { return VAR_2 ; } java.lang.String VAR_3 = TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) , STRING_1 ) ; return TYPE_3 . METHOD_5 ( VAR_3 , VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String text ) { METHOD_2 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( text ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; try { VAR_2 . METHOD_3 ( VAR_1 , VAR_3 , VAR_3 . METHOD_4 ( ) ) ; } catch ( java.lang.Exception VAR_4 ) { TYPE_3 . METHOD_5 ( VAR_4 ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String text ) { METHOD_2 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( text ) ; try { new TYPE_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 , 0 ) ; } catch ( java.lang.Exception VAR_4 ) { TYPE_3 . METHOD_5 ( VAR_4 ) ; } }\n"}
{"problem": "private java.lang.String METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 ; if ( ( ( VAR_2 ) != null ) && ( ( VAR_2 . METHOD_2 ( ) ) != null ) ) { final java.lang.String VAR_3 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 = METHOD_4 ( METHOD_5 ( VAR_3 ) ) ; } return VAR_1 ; }\n", "fixed": "private java.lang.String METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 ; if ( ( ( VAR_2 ) != null ) && ( ( VAR_2 . METHOD_2 ( ) ) != null ) ) { final java.lang.String VAR_3 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 = METHOD_5 ( VAR_3 ) ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public boolean METHOD_1 ( TYPE_1 data ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_3 values = new TYPE_3 ( ) ; values . put ( VAR_3 , VAR_4 ) ; values . put ( VAR_5 , VAR_6 ) ; values . put ( VAR_7 , VAR_8 ) ; values . put ( VAR_9 , ( VAR_10 ? 1 : 0 ) ) ; VAR_1 . METHOD_3 ( VAR_11 , null , values ) ; return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 data ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_3 values = new TYPE_3 ( ) ; values . put ( VAR_7 , VAR_8 ) ; values . put ( VAR_9 , ( VAR_10 ? 1 : 0 ) ) ; VAR_1 . METHOD_3 ( VAR_11 , null , values ) ; return true ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , double [ ] VAR_2 ) { for ( int i = 0 ; i < ( VAR_3 . length ) ; i ++ ) { VAR_3 [ i ] = ( ( ( VAR_3 [ i ] ) * ( VAR_4 ) ) + ( VAR_2 [ i ] ) ) / ( ( VAR_4 ) + 1 ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , double [ ] VAR_2 ) { ( VAR_4 ) ++ ; for ( int i = 0 ; i < ( VAR_3 . length ) ; i ++ ) { VAR_3 [ i ] = ( ( ( VAR_3 [ i ] ) * ( VAR_4 ) ) + ( VAR_2 [ i ] ) ) / ( ( VAR_4 ) + 1 ) ; } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 source , TYPE_5 VAR_4 ) { VAR_2 = TYPE_6 . METHOD_2 ( VAR_2 , VAR_5 ) ; if ( VAR_1 instanceof TYPE_7 ) { TYPE_7 VAR_6 = ( ( TYPE_7 ) ( VAR_1 ) ) ; if ( VAR_6 . METHOD_3 ( ) ) { return VAR_6 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ; } } return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_3 . METHOD_6 ( ) . VAR_7 , source , VAR_4 ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 source , TYPE_5 VAR_4 ) { VAR_2 = TYPE_6 . METHOD_2 ( VAR_2 , VAR_5 ) ; return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_3 . METHOD_6 ( ) . VAR_7 , source , VAR_4 ) ; }\n"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "fixed": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 . getId ( ) ) ; VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; VAR_2 . setState ( VAR_3 ) ; VAR_2 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; VAR_2 . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) ; VAR_2 . METHOD_10 ( TYPE_3 . METHOD_11 ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ) ; return VAR_2 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 . getId ( ) ) ; VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; VAR_2 . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) ; VAR_2 . METHOD_10 ( TYPE_3 . METHOD_11 ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ) ; return VAR_2 ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( STRING_1 ) . append ( VAR_2 . size ( ) ) . append ( STRING_2 ) . append ( VAR_3 . size ( ) ) ; for ( java.util.Map.Entry < java.lang.String , TYPE_1 > VAR_4 : TYPE_2 . METHOD_2 ( VAR_2 ) ) { TYPE_1 c = VAR_4 . getValue ( ) ; VAR_1 . append ( STRING_3 ) . append ( c . METHOD_1 ( ) ) ; } return VAR_1 . toString ( ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( STRING_1 ) . append ( VAR_2 . size ( ) ) . append ( STRING_2 ) . append ( VAR_3 . size ( ) ) ; java.util.Collections.sort ( VAR_2 ) ; for ( TYPE_1 c : VAR_2 ) { VAR_1 . append ( STRING_3 ) . append ( c . METHOD_1 ( ) ) ; } return VAR_1 . toString ( ) ; }\n"}
{"problem": "private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String type = null ; if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { type = VAR_2 . get ( VAR_1 ) ; if ( VAR_3 . contains ( type ) ) return type ; } else type = STRING_1 + VAR_1 ; return type ; }\n", "fixed": "private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String type = null ; if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { type = VAR_2 . get ( VAR_1 ) ; } else { type = VAR_1 ; } if ( ! ( VAR_3 . contains ( type ) ) ) { type = STRING_1 + VAR_1 ; } return type ; }\n"}
{"problem": "protected TYPE_1 < TYPE_2 , java.lang.Integer > METHOD_1 ( int VAR_1 ) { TYPE_1 < TYPE_2 , java.lang.Integer > VAR_2 = new TYPE_1 < TYPE_2 , java.lang.Integer > ( ( ( VAR_3 ) + VAR_1 ) , VAR_4 , VAR_5 ) ; VAR_2 . METHOD_2 ( VAR_6 , VAR_7 ) ; return VAR_2 ; }\n", "fixed": "protected TYPE_1 < TYPE_2 , java.lang.Integer > METHOD_1 ( int VAR_1 ) { TYPE_1 < TYPE_2 , java.lang.Integer > VAR_2 = new TYPE_1 ( ( ( VAR_3 ) + VAR_1 ) , VAR_4 , VAR_5 ) ; VAR_2 . METHOD_2 ( VAR_6 , VAR_7 ) ; return VAR_2 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item ) { int id = item . METHOD_2 ( ) ; if ( id == ( VAR_1 ) ) { METHOD_3 ( new android.content.Intent ( this , VAR_2 class ) ) ; return true ; } if ( id == ( VAR_3 ) ) { METHOD_4 ( ) ; return true ; } return super . METHOD_1 ( item ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 item ) { int id = item . METHOD_2 ( ) ; if ( id == ( VAR_1 ) ) { METHOD_3 ( new android.content.Intent ( this , VAR_2 class ) ) ; return true ; } return super . METHOD_1 ( item ) ; }\n"}
{"fixCommitSHA1": "bbb28b514aadd4fc649dd0b7a47c6ece4d629fa7", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                                        if (body.endsWith(\"6\")) {\n                                             log.info(\"5th message received.  Rolling back.\");\n                                             exchange.getOut().setFault(true);\n                                             exchange.getOut().setBody(\"5th message received.  Rolling back.\");", "fixed": "                                        if (body.endsWith(\"6\") || body.endsWith(\"10\")) {\n                                             log.info(\"5th message received.  Rolling back.\");\n                                             exchange.getOut().setFault(true);\n                                             exchange.getOut().setBody(\"5th message received.  Rolling back.\");", "sourceBeforeFix": "getMockEndpoint(\"mock:test.after.1\").expectedMinimumMessageCount(10)", "sourceAfterFix": "getMockEndpoint(\"mock:test.after.1\").expectedMessageCount(10)"}
{"problem": "public java.lang.String METHOD_1 ( int index ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( index ) . METHOD_3 ( ) ; if ( VAR_1 == null ) { if ( index <= INT_1 ) { return ( STRING_1 + index ) + STRING_1 ; } else return ( java.lang.Integer.toString ( index ) ) + STRING_1 ; } else return ( STRING_1 + ( VAR_1 . METHOD_4 ( ) ) ) + STRING_1 ; }\n", "fixed": "private java.lang.String METHOD_1 ( int index ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( index ) . METHOD_3 ( ) ; if ( VAR_1 == null ) { if ( index <= INT_1 ) { return ( STRING_1 + index ) + STRING_1 ; } else return ( java.lang.Integer.toString ( index ) ) + STRING_1 ; } else return ( STRING_1 + ( VAR_1 . METHOD_4 ( ) ) ) + STRING_1 ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( false ) ; VAR_1 . METHOD_4 ( true ) ; VAR_1 . METHOD_5 ( true ) ; VAR_1 . METHOD_6 ( true ) ; VAR_1 . METHOD_7 ( true ) ; VAR_1 . METHOD_8 ( true ) ; VAR_1 . METHOD_9 ( true ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( false ) ; VAR_1 . METHOD_4 ( true ) ; VAR_1 . METHOD_5 ( true ) ; VAR_1 . METHOD_6 ( true ) ; VAR_1 . METHOD_7 ( true ) ; VAR_1 . METHOD_8 ( true ) ; VAR_1 . METHOD_9 ( true ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.Object VAR_3 ) { for ( java.util.Iterator < TYPE_1 > VAR_4 = VAR_5 . iterator ( ) ; VAR_4 . METHOD_2 ( ) ; ) { TYPE_1 VAR_6 = VAR_4 . METHOD_3 ( ) ; if ( VAR_2 . equals ( VAR_6 ) ) { ( ( TYPE_2 ) ( VAR_6 ) ) . METHOD_4 ( VAR_7 ) ; VAR_4 . remove ( ) ; break ; } } super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.Object VAR_3 ) { for ( java.util.Iterator < TYPE_1 > VAR_4 = VAR_5 . iterator ( ) ; VAR_4 . METHOD_2 ( ) ; ) { TYPE_1 VAR_6 = VAR_4 . METHOD_3 ( ) ; if ( VAR_2 . equals ( VAR_6 . getName ( ) ) ) { ( ( TYPE_2 ) ( VAR_6 ) ) . METHOD_4 ( VAR_7 ) ; VAR_4 . remove ( ) ; break ; } } super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"problem": "public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( ) ; METHOD_5 ( VAR_1 , VAR_2 , STRING_1 , STRING_2 ) ; METHOD_6 ( VAR_1 , VAR_3 , STRING_1 ) ; METHOD_5 ( VAR_4 , VAR_5 , STRING_3 ) ; METHOD_5 ( VAR_4 , VAR_5 , STRING_4 ) ; }\n", "fixed": "public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( ) ; METHOD_6 ( VAR_1 , VAR_2 , STRING_1 , STRING_2 ) ; METHOD_6 ( VAR_1 , VAR_3 , STRING_1 ) ; METHOD_5 ( VAR_4 , VAR_5 , STRING_3 ) ; METHOD_5 ( VAR_4 , VAR_5 , STRING_4 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( final java.lang.String ... VAR_1 ) throws java.io.IOException { final java.util.List < java.lang.String > args = new java.util.ArrayList < > ( ) ; args . METHOD_2 ( java.util.Arrays.asList ( this . VAR_2 , STRING_1 ) ) ; for ( final java.lang.String VAR_2 : VAR_1 ) { args . add ( VAR_2 ) ; } final java.lang.String [ ] array = new java.lang.String [ args . size ( ) ] ; args . METHOD_3 ( array ) ; this . VAR_3 . METHOD_4 ( VAR_4 , array ) ; }\n", "fixed": "public void METHOD_1 ( final java.lang.String ... VAR_1 ) throws java.io.IOException { final java.util.List < java.lang.String > args = new java.util.ArrayList < > ( ) ; args . METHOD_2 ( java.util.Arrays.asList ( this . VAR_2 , STRING_1 ) ) ; for ( final java.lang.String VAR_2 : VAR_1 ) { args . add ( VAR_2 ) ; } final java.lang.Object [ ] array = args . METHOD_3 ( new java.lang.String [ args . size ( ) ] ) ; this . VAR_3 . METHOD_4 ( VAR_4 , array ) ; }\n"}
{"problem": "public TYPE_1 < TYPE_2 < TYPE_3 , java.lang.Object > > METHOD_1 ( TYPE_4 VAR_1 , TYPE_5 VAR_2 , TYPE_6 response ) { TYPE_7 . METHOD_2 ( response , VAR_1 . toString ( ) , VAR_2 ) ; TYPE_7 . METHOD_3 ( response , VAR_2 ) ; return METHOD_1 ( VAR_1 , VAR_2 ) ; }\n", "fixed": "public TYPE_1 < TYPE_2 < TYPE_3 , java.lang.Object > > METHOD_1 ( TYPE_4 VAR_1 , TYPE_5 VAR_2 , java.lang.String token , TYPE_6 response ) { TYPE_7 . METHOD_2 ( response , VAR_1 . toString ( ) , VAR_2 ) ; TYPE_7 . METHOD_3 ( response , VAR_2 ) ; return METHOD_1 ( VAR_1 , VAR_2 , token ) ; }\n"}
{"problem": "public int delete ( ) { java.lang.Integer VAR_1 = 0 ; try { TYPE_1 [ ] VAR_2 = METHOD_1 ( METHOD_2 ( ) ) ; for ( TYPE_1 result : VAR_2 ) { VAR_1 += result . count ; } METHOD_3 ( ) ; } catch ( TYPE_2 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } catch ( TYPE_3 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } return VAR_1 ; }\n", "fixed": "public int delete ( ) { java.lang.Integer VAR_1 = 0 ; try { TYPE_1 [ ] VAR_2 = METHOD_1 ( METHOD_2 ( ) ) ; for ( TYPE_1 result : VAR_2 ) { VAR_1 += result . count ; } METHOD_3 ( ) ; } catch ( TYPE_2 | TYPE_3 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( INT_1 , CHAR_1 , false ) ; VAR_1 . METHOD_2 ( 1 , VAR_2 ) ; TYPE_3 . assertEquals ( VAR_1 . METHOD_3 ( 1 ) , INT_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( INT_1 , CHAR_1 , false ) ; if ( ( VAR_2 != null ) && ( VAR_1 != null ) ) VAR_1 . METHOD_2 ( 1 , VAR_2 ) ; TYPE_3 . assertEquals ( VAR_1 . METHOD_3 ( 1 ) , INT_1 ) ; }\n"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "fixed": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "sourceBeforeFix": "factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fBodyGeneric,NO_ANNOTATIONS,retrofit)"}
{"project": "Math", "bugId": 48, "problem": " protected final double doSolve() {\n                 case REGULA_FALSI:\n                     break;\n                 default:", "fixed": " protected final double doSolve() {\n                 case REGULA_FALSI:\n                    if (x == x1) {\n                        throw new ConvergenceException();\n                    }\n                     break;\n                 default:", "observations": "", "repairActions": ["condBranIfAdd", "exThrowsAdd", "objInstAdd"], "repairPatterns": ["condBlockExcAdd"]}
{"problem": "protected void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_2 ( ) ; if ( VAR_3 ) { VAR_4 . METHOD_2 ( ) ; } VAR_5 . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_6 ) { VAR_7 . METHOD_3 ( STRING_1 ) ; return ; } }\n", "fixed": "protected void METHOD_1 ( ) { try { VAR_5 . METHOD_2 ( ) ; VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_2 ( ) ; if ( VAR_3 ) { VAR_4 . METHOD_2 ( ) ; } } catch ( TYPE_1 VAR_6 ) { VAR_7 . METHOD_3 ( STRING_1 ) ; return ; } }\n"}
{"problem": "public float METHOD_1 ( TYPE_1 VAR_1 , int i ) { assert i >= 0 ; assert i < ( VAR_2 ) ; assert ( VAR_1 . METHOD_2 ( ) ) == ( n ) ; float VAR_3 = 0.0F ; for ( int j = 0 ; j < ( n ) ; j ++ ) { VAR_3 += ( data [ ( ( i * ( n ) ) + j ) ] ) * ( VAR_1 . get ( i ) ) ; } return VAR_3 ; }\n", "fixed": "public float METHOD_1 ( TYPE_1 VAR_1 , int i ) { assert i >= 0 ; assert i < ( VAR_2 ) ; assert ( VAR_1 . METHOD_2 ( ) ) == ( n ) ; float VAR_3 = 0.0F ; for ( int j = 0 ; j < ( n ) ; j ++ ) { VAR_3 += ( data [ ( ( i * ( n ) ) + j ) ] ) * ( VAR_1 . get ( j ) ) ; } return VAR_3 ; }\n"}
{"problem": "static java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) if ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) < INT_1 ) return VAR_2 ; return null ; }\n", "fixed": "static java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) if ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) <= INT_1 ) return VAR_2 ; return null ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = null ; java.lang.String VAR_3 = VAR_4 . METHOD_2 ( STRING_1 ) ; TYPE_3 query = METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ; query . METHOD_6 ( STRING_2 , VAR_1 . METHOD_7 ( ) ) ; query . METHOD_8 ( INT_1 ) ; VAR_2 = ( ( java.util.List < TYPE_1 > ) ( query . list ( ) ) ) ; return VAR_2 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = null ; java.lang.String VAR_3 = VAR_4 . METHOD_2 ( STRING_1 ) ; TYPE_3 query = METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ; query . METHOD_6 ( STRING_2 , VAR_1 . METHOD_7 ( ) ) ; VAR_2 = ( ( java.util.List < TYPE_1 > ) ( query . list ( ) ) ) ; return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 ; synchronized ( this ) { VAR_3 = VAR_1 ; VAR_4 = null ; for ( TYPE_2 VAR_5 : VAR_6 ) { VAR_5 . METHOD_1 ( VAR_1 ) ; } } TYPE_3 . METHOD_1 ( METHOD_2 ( ) , VAR_1 . METHOD_2 ( ) ) ; if ( VAR_2 != null ) { METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 ; synchronized ( this ) { VAR_3 = VAR_1 ; VAR_4 = null ; for ( TYPE_2 VAR_5 : VAR_6 ) { VAR_5 . METHOD_1 ( VAR_1 ) ; } } TYPE_3 . METHOD_1 ( METHOD_2 ( ) , VAR_1 . METHOD_2 ( ) ) ; if ( ( VAR_2 != null ) && ( VAR_2 != VAR_1 ) ) { METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) ) ; } }\n"}
{"fixCommitSHA1": "eba20b3dcc401fb4c873afc5948cc92fbcb00097", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\tint size = s.count();\n \t\tdouble[] ret = new double[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\tret[i] = ((Number) s.first()).intValue();\n \t\treturn ret;\n \t\t}\n }", "fixed": " \t\tint size = s.count();\n \t\tdouble[] ret = new double[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\tret[i] = ((Number) s.first()).doubleValue();\n \t\treturn ret;\n \t\t}\n }", "sourceBeforeFix": "((Number)s.first()).intValue()", "sourceAfterFix": "((Number)s.first()).longValue()"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.Object t ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 , STRING_1 ) ; if ( ( t == null ) || ( ! ( ( ( TYPE_1 ) ( t ) ) . METHOD_3 ( ) . equals ( VAR_2 ) ) ) ) return METHOD_4 ( VAR_1 ) ; return ( ( TYPE_1 ) ( t ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 t ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 , STRING_1 ) ; if ( ( t == null ) || ( ! ( t . METHOD_3 ( ) . equals ( VAR_2 ) ) ) ) return METHOD_4 ( VAR_1 ) ; return t ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( VAR_2 , this . getContext ( ) ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; } else { VAR_1 . METHOD_5 ( VAR_2 ) ; } VAR_5 . METHOD_4 ( VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( this . getContext ( ) ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; } else { VAR_1 . METHOD_5 ( VAR_2 ) ; } VAR_5 . METHOD_4 ( VAR_6 ) ; }\n"}
{"problem": "private double METHOD_1 ( int VAR_1 , int VAR_2 ) { double VAR_3 = 1.0 ; for ( int j = INT_1 ; j <= VAR_2 ; j ++ ) { double VAR_4 = ( TYPE_1 . METHOD_2 ( j ) ) / ( TYPE_1 . METHOD_2 ( FLOAT_1 ) ) ; VAR_3 += 1.0 / VAR_4 ; } return VAR_3 ; }\n", "fixed": "private double METHOD_1 ( int VAR_2 ) { double VAR_3 = 1.0 ; for ( int j = INT_1 ; j <= VAR_2 ; j ++ ) { double VAR_4 = ( TYPE_1 . METHOD_2 ( j ) ) / ( TYPE_1 . METHOD_2 ( FLOAT_1 ) ) ; VAR_3 += 1.0 / VAR_4 ; } return VAR_3 ; }\n"}
{"fixCommitSHA1": "46125686874f5b69bcdb6f4c9bef3f900a7057c6", "projectName": "netty.netty", "bugType": "Change Numeric Literal", "problem": "                 wakenUp.set(false);\n                 try {\n                    int selectedKeyCount = selector.select(500);", "fixed": "                 wakenUp.set(false);\n                 try {\n                    int selectedKeyCount = selector.select(10);", "sourceBeforeFix": "500 * 1000000L", "sourceAfterFix": "10 * 1000000L"}
{"problem": "public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 = true ; VAR_3 = false ; VAR_4 = INT_1 ; VAR_5 = VAR_1 . METHOD_2 ( getContext ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_6 ) , null , VAR_2 ) ; VAR_7 . METHOD_5 ( VAR_5 ) ; TYPE_3 . METHOD_6 ( getClass ( ) . toString ( ) , STRING_1 ) ; } catch ( TYPE_4 VAR_8 ) { VAR_8 . METHOD_7 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_5 = VAR_1 . METHOD_2 ( getContext ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_6 ) ) ; VAR_7 . METHOD_5 ( VAR_5 ) ; TYPE_3 . METHOD_6 ( getClass ( ) . toString ( ) , STRING_1 ) ; } catch ( TYPE_4 VAR_8 ) { VAR_8 . METHOD_7 ( ) ; } }\n"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * base path is interpreted as a filename rather than a directory. E.g.:\n    *   getRelativeTo(\"../foo/bar.js\", \"baz/bam/qux.js\") --> \"baz/foo/bar.js\"\n    */\n  private String getRelativeTo(String relative, String base) {\n     return FileSystems.getDefault().getPath(base)\n         .resolveSibling(relative)\n         .normalize()", "fixed": "    * base path is interpreted as a filename rather than a directory. E.g.:\n    *   getRelativeTo(\"../foo/bar.js\", \"baz/bam/qux.js\") --> \"baz/foo/bar.js\"\n    */\n  private static String getRelativeTo(String relative, String base) {\n     return FileSystems.getDefault().getPath(base)\n         .resolveSibling(relative)\n         .normalize()", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"problem": "public static void main ( java.lang.String [ ] args ) { try { TYPE_1 . METHOD_1 ( STRING_1 , STRING_2 ) ; } catch ( java.io.IOException VAR_1 ) { VAR_1 . METHOD_2 ( ) ; } TYPE_2 VAR_1 = new TYPE_2 ( INT_1 , INT_2 ) ; VAR_1 . METHOD_3 ( INT_3 , INT_4 ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { try { TYPE_1 . METHOD_1 ( args ) ; } catch ( java.io.IOException VAR_1 ) { VAR_1 . METHOD_2 ( ) ; } TYPE_2 VAR_1 = new TYPE_2 ( INT_1 , INT_2 ) ; VAR_1 . METHOD_3 ( INT_3 , INT_4 ) ; }\n"}
{"fixCommitSHA1": "ba98d83f598bbf2e9f5c41eeb51d36369a088fa6", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "         }\n         \n        protected int getMessageLength() {\n             return currentOutputPosition;\n         }", "fixed": "         }\n         \n        protected final int getMessageLength() {\n             return currentOutputPosition;\n         }", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"fixCommitSHA1": "72754c27b271416d3c8ee7497fa7f88abff393f8", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t\t}\n \t}\n\tprivate JobExplorer createJobExplorer() throws Exception {\n \t\tJobExplorerFactoryBean jobExplorerFactoryBean = new JobExplorerFactoryBean();\n \t\tjobExplorerFactoryBean.setDataSource(this.dataSource);\n \t\tString tablePrefix = this.properties.getTablePrefix();", "fixed": " \t\t}\n \t}\n\tprotected JobExplorer createJobExplorer() throws Exception {\n \t\tJobExplorerFactoryBean jobExplorerFactoryBean = new JobExplorerFactoryBean();\n \t\tjobExplorerFactoryBean.setDataSource(this.dataSource);\n \t\tString tablePrefix = this.properties.getTablePrefix();", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"problem": "private void METHOD_1 ( final TYPE_1 VAR_1 , final long VAR_2 , final java.util.List < java.lang.Long > VAR_3 ) { if ( ( ( VAR_1 != null ) && ( TYPE_2 . equals ( VAR_1 . getType ( ) ) ) ) && ( VAR_2 != ( VAR_1 . getId ( ) ) ) ) { VAR_3 . add ( VAR_1 . getId ( ) ) ; } }\n", "fixed": "private void METHOD_1 ( final TYPE_1 VAR_1 , final long VAR_2 , final java.util.Collection < java.lang.Long > VAR_3 ) { if ( ( ( VAR_1 != null ) && ( TYPE_2 . equals ( VAR_1 . getType ( ) ) ) ) && ( VAR_2 != ( VAR_1 . getId ( ) ) ) ) { VAR_3 . add ( VAR_1 . getId ( ) ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) { TYPE_1 status = METHOD_2 ( ) ; java.lang.String VAR_1 = null ; switch ( status ) { case VAR_2 : VAR_1 = result . METHOD_3 ( ) ; return METHOD_4 ( status , VAR_1 ) ; case VAR_3 : VAR_1 = STRING_1 ; return METHOD_4 ( status , VAR_1 ) ; default : return METHOD_4 ( status , VAR_1 ) ; } }\n", "fixed": "public java.lang.String METHOD_1 ( ) { TYPE_1 status = METHOD_2 ( ) ; java.lang.String VAR_1 = null ; switch ( status ) { case VAR_2 : VAR_1 = result . METHOD_3 ( ) ; return METHOD_4 ( status , VAR_1 ) ; case VAR_3 : VAR_1 = STRING_1 ; return METHOD_4 ( status , VAR_1 ) ; default : return METHOD_4 ( status , null ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( TYPE_2 . equals ( VAR_2 . METHOD_2 ( ) ) ) { TYPE_3 . get ( ) . METHOD_3 ( ) ; } VAR_3 . METHOD_4 ( TYPE_3 . get ( ) . METHOD_5 ( java.util.Arrays.asList ( TYPE_4 . METHOD_6 ( VAR_4 ) ) ) ) ; METHOD_7 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( TYPE_2 . equals ( VAR_2 . METHOD_2 ( ) ) ) { TYPE_3 . get ( ) . METHOD_3 ( ) ; } else { METHOD_7 ( ) ; } VAR_3 . METHOD_4 ( TYPE_3 . get ( ) . METHOD_5 ( java.util.Arrays.asList ( TYPE_4 . METHOD_6 ( VAR_4 ) ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . getClass ( ) ) == ( VAR_2 class ) ) VAR_3 = VAR_1 . METHOD_1 ( name ) ; else if ( ( VAR_1 . getClass ( ) ) == ( VAR_4 class ) ) VAR_5 = VAR_1 . METHOD_1 ( name ) ; else if ( ( VAR_1 . getClass ( ) ) == ( VAR_4 class ) ) VAR_6 = VAR_1 . METHOD_1 ( name ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . getClass ( ) ) == ( VAR_2 class ) ) return VAR_3 = VAR_1 . METHOD_1 ( name ) ; else if ( ( VAR_1 . getClass ( ) ) == ( VAR_4 class ) ) return VAR_5 = VAR_1 . METHOD_1 ( name ) ; else return VAR_6 = VAR_1 . METHOD_1 ( name ) ; }\n"}
{"problem": "public static int METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( ( ( ( VAR_1 . METHOD_2 ( ) ) + ( VAR_1 . METHOD_3 ( 1 ) . METHOD_4 ( ) ) ) - INT_1 ) + ( TYPE_2 . METHOD_5 ( ) ) ) / INT_2 ) + 1 ; }\n", "fixed": "public static int METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( ( ( ( VAR_1 . METHOD_2 ( ) ) + ( VAR_1 . METHOD_3 ( 1 ) . METHOD_4 ( ) ) ) - INT_1 ) - ( TYPE_2 . METHOD_5 ( ) ) ) / INT_2 ) + 1 ; }\n"}
{"problem": "protected void METHOD_1 ( ) { synchronized ( VAR_1 ) { java.util.Iterator < TYPE_1 > VAR_2 = VAR_1 . iterator ( ) ; while ( VAR_2 . METHOD_2 ( ) ) { TYPE_1 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( ( this . VAR_4 ) == null ) { this . VAR_4 = VAR_3 ; continue ; } if ( ( VAR_4 . METHOD_4 ( ) ) < ( VAR_3 . METHOD_4 ( ) ) ) { VAR_4 = VAR_3 ; } } } }\n", "fixed": "protected void METHOD_1 ( ) { synchronized ( VAR_1 ) { java.util.Iterator < TYPE_1 > VAR_2 = VAR_1 . iterator ( ) ; while ( VAR_2 . METHOD_2 ( ) ) { TYPE_1 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( ( ( VAR_4 ) == null ) || ( ( VAR_4 . METHOD_4 ( ) ) < ( VAR_3 . METHOD_4 ( ) ) ) ) { VAR_4 = VAR_3 ; } } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( null , VAR_1 . get ( VAR_2 . METHOD_3 ( ) ) ) ; if ( ( VAR_3 ) == null ) return ; java.lang.Object obj = VAR_3 . METHOD_4 ( ) ; if ( obj != null ) { TYPE_1 node = METHOD_5 ( VAR_3 . METHOD_4 ( ) ) ; node . METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( null , VAR_1 . get ( VAR_2 . METHOD_3 ( ) ) ) ; if ( ( VAR_3 ) == null ) return ; java.lang.Object obj = VAR_3 . METHOD_4 ( ) ; if ( obj != null ) { TYPE_1 node = METHOD_5 ( VAR_3 . METHOD_4 ( ) ) ; if ( node != null ) node . METHOD_6 ( ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( ) { java.lang.String result = VAR_1 . getText ( ) . toString ( ) ; if ( TYPE_1 . isEmpty ( result ) ) { TYPE_2 . METHOD_2 ( getActivity ( ) , VAR_2 , VAR_3 ) . show ( ) ; return false ; } VAR_4 = result ; return true ; }\n", "fixed": "public boolean METHOD_1 ( ) { java.lang.String result = null ; if ( ( VAR_1 . getText ( ) ) != null ) { result = VAR_1 . getText ( ) . toString ( ) ; } if ( TYPE_1 . isEmpty ( result ) ) { TYPE_2 . METHOD_2 ( getActivity ( ) , VAR_2 , VAR_3 ) . show ( ) ; return false ; } VAR_4 = result ; return true ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( ) ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( ) ; VAR_2 . execute ( new TYPE_4 ( VAR_3 , VAR_4 , 1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ) ; try { VAR_2 . METHOD_4 ( ) ; while ( ! ( VAR_2 . METHOD_5 ( 1 , VAR_10 ) ) ) ; } catch ( TYPE_5 VAR_11 ) { java.lang.System.err.println ( STRING_1 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( ) ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( ) ; VAR_2 . execute ( new TYPE_4 ( VAR_3 , 1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ) ; try { VAR_2 . METHOD_4 ( ) ; while ( ! ( VAR_2 . METHOD_5 ( 1 , VAR_10 ) ) ) ; } catch ( TYPE_5 VAR_11 ) { java.lang.System.err.println ( STRING_1 ) ; } } }\n"}
{"fixCommitSHA1": "370ead7395fc9194a3dc2d05afc4b3409f6b27da", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     }\n   }\n  private HashMap<String, ASTNode> doPhase1GetAggregationsFromSelect(\n       ASTNode selExpr) {\n    HashMap<String, ASTNode> aggregationTrees = new HashMap<String, ASTNode>();\n     for (int i = 0; i < selExpr.getChildCount(); ++i) {\n       ASTNode sel = (ASTNode) selExpr.getChild(i).getChild(0);\n       doPhase1GetAllAggregations(sel, aggregationTrees);", "fixed": "     }\n   }\n  private LinkedHashMap<String, ASTNode> doPhase1GetAggregationsFromSelect(\n       ASTNode selExpr) {\n    LinkedHashMap<String, ASTNode> aggregationTrees = new LinkedHashMap<String, ASTNode>();\n     for (int i = 0; i < selExpr.getChildCount(); ++i) {\n       ASTNode sel = (ASTNode) selExpr.getChild(i).getChild(0);\n       doPhase1GetAllAggregations(sel, aggregationTrees);", "sourceBeforeFix": "HashMap<String,ASTNode>", "sourceAfterFix": "LinkedHashMap<String,ASTNode>"}
{"fixCommitSHA1": "04a010c8499fbc96b1e5a99bdbebaf0b38d24586", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": "* @return {@link\n \tpublic char[] ensureCapacity (int additionalCapacity) {\r\n \t\tint sizeNeeded = size + additionalCapacity;\r\n\t\tif (sizeNeeded >= items.length) resize(Math.max(8, sizeNeeded));\r\n \t\treturn items;\r\n \t}\r", "fixed": "* @return {@link\n \tpublic char[] ensureCapacity (int additionalCapacity) {\r\n \t\tint sizeNeeded = size + additionalCapacity;\r\n\t\tif (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));\r\n \t\treturn items;\r\n \t}\r", "sourceBeforeFix": "sizeNeeded >= items.length", "sourceAfterFix": "sizeNeeded > items.length"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( VAR_1 . METHOD_2 ( getActivity ( ) ) ) { METHOD_3 ( ) ; } else { TYPE_2 . METHOD_4 ( getActivity ( ) , STRING_1 ) ; TYPE_2 . METHOD_4 ( getActivity ( ) , STRING_2 ) ; METHOD_5 ( ) ; VAR_2 . METHOD_6 ( false ) ; } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( VAR_1 . METHOD_2 ( getActivity ( ) ) ) { METHOD_3 ( ) ; } else { TYPE_2 . METHOD_4 ( getActivity ( ) , STRING_1 ) ; TYPE_2 . METHOD_4 ( getActivity ( ) , STRING_2 ) ; METHOD_5 ( ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_6 ( false ) ; } } }\n"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 = VAR_1 ; VAR_4 = VAR_2 ; VAR_5 = - 1 ; VAR_6 = 0 ; VAR_7 = ( VAR_3 . METHOD_2 ( ) . size ( ) ) / ( VAR_8 ) ; VAR_9 = VAR_3 . METHOD_3 ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 = VAR_1 ; VAR_4 = VAR_2 ; VAR_5 = - 1 ; VAR_6 = 0 ; VAR_7 = ( ( VAR_3 . METHOD_2 ( ) . size ( ) ) - 1 ) / ( VAR_8 ) ; VAR_9 = VAR_3 . METHOD_3 ( VAR_2 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) == null ) VAR_2 = new java.util.LinkedList < > ( ) ; if ( ( VAR_2 . size ( ) ) < VAR_1 ) for ( int i = VAR_2 . size ( ) ; i < VAR_1 ; i ++ ) VAR_2 . add ( new TYPE_2 ( ) ) ; return VAR_2 . get ( ( VAR_1 - 1 ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) == null ) VAR_2 = new java.util.LinkedList < > ( ) ; if ( VAR_1 <= ( ( VAR_2 . size ( ) ) + 1 ) ) VAR_2 . add ( ( VAR_1 - 1 ) , new TYPE_2 ( ) ) ; else for ( int i = VAR_2 . size ( ) ; i <= VAR_1 ; i ++ ) VAR_2 . add ( new TYPE_2 ( ) ) ; return VAR_2 . get ( ( VAR_1 - 1 ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( ) { VAR_1 = new java.util.ArrayList [ n ] ; for ( int i = 0 ; i < ( n ) ; i ++ ) { VAR_1 [ i ] = new java.util.ArrayList < java.lang.Integer > ( ) ; VAR_1 [ i ] . METHOD_2 ( this . VAR_2 [ i ] ) ; } }\n", "fixed": "protected void METHOD_1 ( ) { VAR_1 = new java.util.HashSet [ n ] ; for ( int i = 0 ; i < ( n ) ; i ++ ) { VAR_1 [ i ] = new java.util.HashSet < java.lang.Integer > ( ) ; VAR_1 [ i ] . METHOD_2 ( this . VAR_2 [ i ] ) ; } }\n"}
{"fixCommitSHA1": "e36c4c77bfbbf18ce8e46fa8efe2a809df891345", "projectName": "netty.netty", "bugType": "Change Caller in Function Call", "problem": "         if (maskPayload) {\n             int random = (int) (Math.random() * Integer.MAX_VALUE);\n             mask = ByteBuffer.allocate(4).putInt(random).array();\n            header.writeBytes(mask);\n             int counter = 0;\n             for (int i = data.readerIndex(); i < data.writerIndex(); i ++) {", "fixed": "         if (maskPayload) {\n             int random = (int) (Math.random() * Integer.MAX_VALUE);\n             mask = ByteBuffer.allocate(4).putInt(random).array();\n            out.writeBytes(mask);\n             int counter = 0;\n             for (int i = data.readerIndex(); i < data.writerIndex(); i ++) {", "sourceBeforeFix": "header.writeBytes(mask)", "sourceAfterFix": "out.writeBytes(mask)"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException , TYPE_3 { if ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) != null ) { VAR_1 . METHOD_2 ( ) . METHOD_4 ( STRING_2 , STRING_3 ) ; VAR_2 . METHOD_5 ( STRING_4 ) ; return ; } VAR_2 . METHOD_6 ( STRING_5 ) ; VAR_1 . METHOD_7 ( STRING_6 ) ; VAR_1 . METHOD_8 ( VAR_3 ) . METHOD_9 ( VAR_1 , VAR_2 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException , TYPE_3 { VAR_2 . METHOD_6 ( STRING_5 ) ; VAR_1 . METHOD_7 ( STRING_6 ) ; if ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) != null ) { VAR_1 . METHOD_2 ( ) . METHOD_4 ( STRING_2 , STRING_3 ) ; VAR_2 . METHOD_5 ( STRING_4 ) ; return ; } VAR_1 . METHOD_8 ( VAR_3 ) . METHOD_9 ( VAR_1 , VAR_2 ) ; }\n"}
{"problem": "private boolean METHOD_1 ( java.util.List < java.lang.Double > VAR_1 ) { boolean VAR_2 = true ; for ( java.lang.Double VAR_3 : VAR_1 ) { for ( java.lang.Double VAR_4 : VAR_1 ) { if ( ! ( VAR_3 . equals ( VAR_4 ) ) ) { VAR_2 = false ; } } } return VAR_2 ; }\n", "fixed": "public boolean METHOD_1 ( java.util.List < java.lang.Double > VAR_1 ) { boolean VAR_2 = true ; for ( java.lang.Double VAR_3 : VAR_1 ) { for ( java.lang.Double VAR_4 : VAR_1 ) { if ( ! ( VAR_3 . equals ( VAR_4 ) ) ) { VAR_2 = false ; } } } return VAR_2 ; }\n"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see java.lang.Object\n \t */\n\tpublic int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "fixed": " \t * \n* @see java.lang.Object\n \t */\n\tpublic abstract int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "public void METHOD_1 ( int n ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( int i = 0 ; i < n ; i ++ ) { METHOD_4 ( ) ; METHOD_5 ( ) ; if ( ( i % INT_1 ) == 0 ) { METHOD_2 ( ) ; } METHOD_3 ( ) ; TYPE_1 . METHOD_6 ( VAR_1 , VAR_2 , STRING_1 ) ; } }\n", "fixed": "public void METHOD_1 ( int n ) { METHOD_3 ( ) ; for ( int i = 0 ; i < n ; i ++ ) { METHOD_4 ( ) ; METHOD_5 ( ) ; if ( ( i % INT_1 ) == 0 ) { METHOD_2 ( ) ; } METHOD_3 ( ) ; TYPE_1 . METHOD_6 ( VAR_1 , VAR_2 , STRING_1 ) ; } }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) throws TYPE_1 , TYPE_2 , TYPE_3 { if ( VAR_2 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( ) ; } VAR_3 . setEnabled ( false ) ; VAR_4 . setEnabled ( true ) ; VAR_5 . setEnabled ( true ) ; VAR_6 . setEnabled ( false ) ; VAR_7 . setEnabled ( false ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) throws TYPE_1 , TYPE_2 , TYPE_3 { if ( VAR_2 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( ) ; } VAR_3 . setEnabled ( false ) ; VAR_4 . setEnabled ( false ) ; VAR_5 . setEnabled ( true ) ; VAR_6 . setEnabled ( false ) ; VAR_7 . setEnabled ( false ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String filename = VAR_2 ; java.io.FileWriter VAR_3 = null ; try { VAR_3 = new java.io.FileWriter ( filename , true ) ; VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_4 ( ) ; } finally { try { if ( VAR_3 != null ) VAR_3 . METHOD_5 ( ) ; } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_4 ( ) ; } } return METHOD_6 ( ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String filename = VAR_2 ; java.io.FileWriter VAR_3 = null ; try { VAR_3 = new java.io.FileWriter ( filename , true ) ; VAR_3 . METHOD_2 ( ( \"\\n\" + ( VAR_1 . METHOD_3 ( ) ) ) ) ; } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_4 ( ) ; } finally { try { if ( VAR_3 != null ) VAR_3 . METHOD_5 ( ) ; } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_4 ( ) ; } } return METHOD_6 ( ) ; }\n"}
{"problem": "public static java.lang.String METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( STRING_1 ) . toLowerCase ( ) . contains ( STRING_2 ) ) { return STRING_2 ; } else if ( VAR_1 . METHOD_2 ( STRING_1 ) . toLowerCase ( ) . contains ( STRING_3 ) ) { return STRING_3 ; } return STRING_4 ; }\n", "fixed": "public static java.lang.String METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( STRING_1 ) ) == null ) return STRING_4 ; if ( VAR_1 . METHOD_2 ( STRING_1 ) . toLowerCase ( ) . contains ( STRING_2 ) ) { return STRING_2 ; } else if ( VAR_1 . METHOD_2 ( STRING_1 ) . toLowerCase ( ) . contains ( STRING_3 ) ) { return STRING_3 ; } return STRING_4 ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 source ) { for ( TYPE_3 VAR_2 : VAR_1 . METHOD_2 ( source . METHOD_3 ( ) ) ) { TYPE_4 VAR_3 = ( ( TYPE_4 ) ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( VAR_4 class . METHOD_6 ( ) , VAR_2 ) ) ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_7 ( source . METHOD_8 ( ) , VAR_1 ) ; } } return false ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 source ) { for ( TYPE_3 VAR_2 : VAR_1 . METHOD_2 ( source . METHOD_3 ( ) ) ) { TYPE_4 VAR_3 = ( ( TYPE_4 ) ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( VAR_4 class . METHOD_6 ( ) , VAR_2 ) ) ) ; if ( VAR_3 != null ) { if ( VAR_3 . METHOD_7 ( source . METHOD_8 ( ) , VAR_1 ) ) { return true ; } } } return false ; }\n"}
{"fixCommitSHA1": "09ca7c3d598d13a865596fbfd5b2a6dc6ece7237", "projectName": "swagger-api.swagger-core", "bugType": "Less Specific If", "problem": "                 }\n             }\n         }\n        if (subtypeProps.isEmpty()) {\n             child.setProperties(null);\n         }\n     }", "fixed": "                 }\n             }\n         }\n        if (subtypeProps == null || subtypeProps.isEmpty()) {\n             child.setProperties(null);\n         }\n     }", "sourceBeforeFix": "subtypeProps.isEmpty()", "sourceAfterFix": "subtypeProps == null || subtypeProps.isEmpty()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { java.lang.System.out.println ( ( STRING_1 + ( VAR_4 ) ) ) ; if ( VAR_3 && ( VAR_4 ) ) { android.content.Intent intent = new android.content.Intent ( this , VAR_5 class ) ; intent . METHOD_2 ( STRING_2 , VAR_6 ) ; intent . METHOD_2 ( STRING_3 , VAR_2 ) ; METHOD_3 ( intent ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { if ( VAR_3 && ( VAR_4 ) ) { android.content.Intent intent = new android.content.Intent ( this , VAR_5 class ) ; intent . METHOD_2 ( STRING_2 , VAR_6 ) ; intent . METHOD_2 ( STRING_3 , VAR_2 ) ; METHOD_3 ( intent ) ; } }\n"}
{"problem": "public void METHOD_1 ( final java.lang.String VAR_1 ) throws java.io.IOException { if ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) { METHOD_2 ( ) . METHOD_4 ( true ) ; } TYPE_1 state = METHOD_2 ( ) . METHOD_5 ( VAR_3 class ) ; if ( state == null ) { return ; } new TYPE_2 ( state , VAR_1 , METHOD_2 ( ) , this ) . METHOD_6 ( ) ; synchronized ( this ) { VAR_4 . add ( VAR_1 ) ; } }\n", "fixed": "public void METHOD_1 ( final java.lang.String VAR_1 ) throws java.io.IOException { if ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) { METHOD_2 ( ) . METHOD_4 ( true ) ; } TYPE_1 state = METHOD_2 ( ) . METHOD_5 ( VAR_3 class ) ; if ( state == null ) { return ; } new TYPE_2 ( state , VAR_1 , METHOD_2 ( ) , this ) . start ( ) ; synchronized ( this ) { VAR_4 . add ( VAR_1 ) ; } }\n"}
{"problem": "public int compareTo ( TYPE_1 VAR_1 ) { if ( ( this . VAR_2 ) < ( VAR_3 ) ) return - 1 ; else if ( ( this . VAR_2 ) > ( VAR_3 ) ) return - 1 ; else return ( this . n ) < ( VAR_1 . n ) ? - 1 : 1 ; }\n", "fixed": "public int compareTo ( TYPE_1 VAR_1 ) { if ( ( this . VAR_2 ) < ( VAR_3 ) ) return - 1 ; else if ( ( this . VAR_2 ) > ( VAR_3 ) ) return 1 ; else return ( this . n ) < ( VAR_1 . n ) ? - 1 : 1 ; }\n"}
{"problem": "private void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) > 0 ) { VAR_3 . add ( VAR_1 ) ; break ; } } data = TYPE_3 . METHOD_4 ( VAR_3 ) ; VAR_4 = new TYPE_4 < TYPE_1 > ( data ) ; if ( VAR_3 . isEmpty ( ) ) VAR_4 = null ; }\n", "fixed": "protected void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) > 0 ) { VAR_3 . add ( VAR_1 ) ; break ; } } data = TYPE_3 . METHOD_4 ( VAR_3 ) ; VAR_4 = new TYPE_4 < TYPE_1 > ( data ) ; if ( VAR_3 . isEmpty ( ) ) VAR_4 = null ; }\n"}
{"fixCommitSHA1": "acc9d3961e1d0d8ebf12269a08566222ec382cf2", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "put(43239, new VariableInformation(1,\t\"Total hot water operation time add\",\tNibeDataType.S32,\tType.Sensor));\nput(43395, new VariableInformation(1,\t\"HPAC relays\",\t\t\t\t\t\t\tNibeDataType.U8,\tType.Sensor));\nput(43416, new VariableInformation(1,\t\"Compressor starts EB100-EP14\",\t\t\tNibeDataType.S32,\tType.Sensor));\nput(43420, new VariableInformation(10,\t\"Total operation time compressor\",\t\tNibeDataType.S32,\tType.Sensor));\nput(43424, new VariableInformation(1,\t\"Total hot water operation time compr\",\tNibeDataType.S32,\tType.Sensor));\nput(43427, new VariableInformation(1,\t\"Compressor state EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));\nput(43514, new VariableInformation(1,\t\"PCA-Base relayes EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));", "fixed": "put(43239, new VariableInformation(1,\t\"Total hot water operation time add\",\tNibeDataType.S32,\tType.Sensor));\nput(43395, new VariableInformation(1,\t\"HPAC relays\",\t\t\t\t\t\t\tNibeDataType.U8,\tType.Sensor));\nput(43416, new VariableInformation(1,\t\"Compressor starts EB100-EP14\",\t\t\tNibeDataType.S32,\tType.Sensor));\nput(43420, new VariableInformation(1,\t\"Total operation time compressor\",\t\tNibeDataType.S32,\tType.Sensor));\nput(43424, new VariableInformation(1,\t\"Total hot water operation time compr\",\tNibeDataType.S32,\tType.Sensor));\nput(43427, new VariableInformation(1,\t\"Compressor state EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));\nput(43514, new VariableInformation(1,\t\"PCA-Base relayes EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));", "sourceBeforeFix": "new VariableInformation(10,\"Total operation time compressor\",NibeDataType.S32,Type.Sensor)", "sourceAfterFix": "new VariableInformation(1,\"Total operation time compressor\",NibeDataType.S32,Type.Sensor)"}
{"problem": "public byte [ ] METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . put ( VAR_4 ) ; VAR_1 . put ( ( ( byte ) ( ( VAR_5 . METHOD_4 ( ) ) & INT_1 ) ) ) ; VAR_1 . put ( VAR_6 . METHOD_5 ( VAR_7 ) ) ; while ( VAR_1 . METHOD_6 ( ) ) { VAR_1 . METHOD_7 ( CHAR_1 ) ; } return VAR_1 . array ( ) ; }\n", "fixed": "public byte [ ] METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . put ( VAR_4 ) ; VAR_1 . put ( ( ( byte ) ( ( VAR_5 . METHOD_4 ( ) ) & INT_1 ) ) ) ; VAR_1 . put ( VAR_6 . METHOD_5 ( VAR_7 ) ) ; while ( VAR_1 . METHOD_6 ( ) ) { VAR_1 . put ( ( ( byte ) ( CHAR_1 ) ) ) ; } return VAR_1 . array ( ) ; }\n"}
{"problem": "public TYPE_1 put ( java.io.InputStream VAR_1 , java.lang.String VAR_2 , java.lang.String name , long VAR_3 , long VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 , java.lang.Long VAR_7 , java.lang.Long VAR_8 ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 , TYPE_7 { return VAR_9 . put ( VAR_1 , VAR_2 , name , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , false , false ) ; }\n", "fixed": "public TYPE_1 put ( java.io.InputStream VAR_1 , java.lang.String VAR_2 , java.lang.String name , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 , java.lang.String VAR_7 , java.lang.String VAR_8 ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 , TYPE_7 { return VAR_9 . put ( VAR_1 , VAR_2 , name , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , false , false ) ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 , java.lang.String VAR_2 ) { if ( VAR_1 . isEmpty ( ) ) return new java.util.LinkedList < > ( ) ; TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_4 = TYPE_2 . METHOD_3 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_5 = TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 , VAR_4 ) ; java.util.List < TYPE_1 > VAR_6 = TYPE_2 . METHOD_5 ( VAR_5 , VAR_1 ) ; return TYPE_2 . trim ( VAR_6 , VAR_3 , VAR_4 ) ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 , java.lang.String VAR_2 ) { if ( VAR_1 . isEmpty ( ) ) return new java.util.LinkedList < > ( ) ; TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_4 = TYPE_2 . METHOD_3 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_5 = TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 , VAR_4 ) ; return TYPE_2 . METHOD_5 ( VAR_5 , VAR_1 ) ; }\n"}
{"fixCommitSHA1": "ad392b3d40e7e7299f06b969c5f4a90ba90ed2fa", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       case COMPLETE_STORE:\n         return entry.getCompleteStore();\n       case CREATE_STORE:\n        return entry.getCompleteStore();\n       case DELETE_STORE:\n         return entry.getDeleteStore();\n       case MERGE_STORE:", "fixed": "       case COMPLETE_STORE:\n         return entry.getCompleteStore();\n       case CREATE_STORE:\n        return entry.getCreateStore();\n       case DELETE_STORE:\n         return entry.getDeleteStore();\n       case MERGE_STORE:", "sourceBeforeFix": "entry.getCompleteStore()", "sourceAfterFix": "entry.getCreateStore()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = 0 ; if ( ( VAR_1 != null ) && ( ( VAR_3 ) != null ) ) { VAR_2 = VAR_1 . METHOD_2 ( VAR_3 . getType ( ) , VAR_3 . METHOD_3 ( ) ) ; } TYPE_2 VAR_4 = TYPE_2 . METHOD_4 ( STRING_1 ) . METHOD_5 ( STRING_2 , VAR_2 ) ; return TYPE_3 . message ( VAR_4 ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = 0 ; if ( ( VAR_1 != null ) && ( ( VAR_3 ) != null ) ) { VAR_2 = VAR_1 . METHOD_2 ( VAR_3 . getType ( ) , VAR_3 . METHOD_3 ( ) ) ; } TYPE_2 VAR_4 = TYPE_2 . METHOD_4 ( STRING_1 ) . METHOD_5 ( STRING_2 , VAR_2 ) ; java.lang.System.out.println ( TYPE_3 . message ( VAR_4 ) ) ; return TYPE_3 . message ( VAR_4 ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 item ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( VAR_1 . get ( i ) . equals ( item ) ) { VAR_1 . remove ( i ) ; } } }\n", "fixed": "private void METHOD_1 ( java.lang.String id ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( VAR_1 . get ( i ) . equals ( id ) ) { VAR_1 . remove ( i ) ; } } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"problem": "public synchronized void METHOD_1 ( int VAR_1 ) { this . VAR_2 = VAR_1 ; if ( ( VAR_3 ) != null ) VAR_3 . METHOD_2 ( this . VAR_1 , VAR_3 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) , VAR_3 . METHOD_5 ( ) ) ; }\n", "fixed": "public synchronized void METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; if ( ( VAR_3 ) != null ) VAR_3 . METHOD_2 ( this . VAR_1 , VAR_3 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) , VAR_3 . METHOD_5 ( ) ) ; }\n"}
{"problem": "private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = null ; java.lang.String VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_4 = VAR_5 . METHOD_3 ( VAR_3 ) ; if ( VAR_4 != null ) { VAR_6 . METHOD_4 ( ( ( ( VAR_7 ) + STRING_1 ) + ( VAR_4 . METHOD_5 ( ) ) ) ) ; VAR_8 = true ; VAR_2 = TYPE_3 . replace ( VAR_9 , VAR_3 ) ; } else { VAR_2 = VAR_10 ; } return VAR_2 ; }\n", "fixed": "private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = null ; java.lang.String VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_4 = VAR_5 . METHOD_3 ( VAR_3 ) ; if ( VAR_4 != null ) { VAR_6 . METHOD_4 ( ( ( ( VAR_7 ) + STRING_1 ) + ( VAR_4 . METHOD_5 ( ) ) ) ) ; VAR_8 = true ; VAR_2 = TYPE_3 ; } else { VAR_2 = VAR_10 ; } return VAR_2 ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( ) { TYPE_1 TYPE_2 = new TYPE_1 ( ) ; TYPE_3 . METHOD_2 ( STRING_1 , STRING_2 , VAR_1 ) ; TYPE_2 . METHOD_3 ( new TYPE_4 ( new TYPE_5 ( null , VAR_2 ) , VAR_3 ) ) ; TYPE_2 . METHOD_3 ( new TYPE_6 ( ) ) ; return TYPE_2 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( ) { TYPE_1 TYPE_2 = new TYPE_1 ( ) ; TYPE_3 . METHOD_2 ( STRING_1 , STRING_2 , VAR_1 ) ; TYPE_2 . METHOD_3 ( new TYPE_4 ( new TYPE_5 ( null , VAR_2 ) , VAR_3 ) ) ; TYPE_2 . METHOD_3 ( new TYPE_6 ( 1 ) ) ; return TYPE_2 ; }\n"}
{"problem": "public final boolean contains ( double VAR_1 , double VAR_2 ) { if ( ( ( ( VAR_1 <= ( VAR_3 ) ) && ( VAR_1 > ( VAR_4 ) ) ) && ( VAR_2 <= ( VAR_5 ) ) ) && ( VAR_2 > ( VAR_6 ) ) ) return true ; else return false ; }\n", "fixed": "public final boolean contains ( double VAR_1 , double VAR_2 ) { if ( ( ( ( VAR_1 > ( VAR_4 ) ) && ( VAR_1 <= ( VAR_3 ) ) ) && ( VAR_2 > ( VAR_6 ) ) ) && ( VAR_2 <= ( VAR_5 ) ) ) return true ; else return false ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 event = VAR_1 . getValue ( VAR_2 class ) ; TYPE_3 . METHOD_2 ( STRING_1 , ( STRING_2 + VAR_3 ) ) ; TYPE_3 . METHOD_2 ( STRING_3 , ( STRING_2 + event ) ) ; if ( event != null ) VAR_4 . add ( VAR_1 . getValue ( VAR_2 class ) ) ; TYPE_3 . METHOD_3 ( STRING_4 , ( STRING_2 + ( VAR_5 . METHOD_4 ( ) ) ) ) ; VAR_5 . METHOD_5 ( ) ; VAR_6 . METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 event = VAR_1 . getValue ( VAR_2 class ) ; TYPE_3 . METHOD_2 ( STRING_1 , ( STRING_2 + VAR_3 ) ) ; TYPE_3 . METHOD_2 ( STRING_3 , ( STRING_2 + event ) ) ; if ( event != null ) VAR_4 . add ( VAR_1 . getValue ( VAR_2 class ) ) ; TYPE_3 . METHOD_3 ( STRING_4 , ( STRING_2 + ( VAR_5 . METHOD_4 ( ) ) ) ) ; VAR_5 . METHOD_5 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) throws TYPE_1 { final java.lang.String VAR_3 = new TYPE_2 ( ) . METHOD_2 ( VAR_1 ) ; final java.lang.String VAR_4 = new TYPE_2 ( ) . METHOD_2 ( VAR_2 ) ; if ( VAR_3 . equals ( VAR_4 ) ) { throw new TYPE_1 ( STRING_1 , VAR_3 , VAR_4 ) ; } }\n", "fixed": "public static void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) throws TYPE_1 { final java.lang.String VAR_3 = new TYPE_2 ( ) . METHOD_2 ( VAR_1 ) ; final java.lang.String VAR_4 = new TYPE_2 ( ) . METHOD_2 ( VAR_2 ) ; if ( ! ( VAR_3 . equals ( VAR_4 ) ) ) { throw new TYPE_1 ( STRING_1 , VAR_3 , VAR_4 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { while ( ! ( VAR_1 ) ) { METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) . message ( VAR_2 , STRING_1 , STRING_2 ) ; VAR_3 . METHOD_4 ( out ) ; try { java.lang.Thread . METHOD_5 ( INT_1 ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_6 ( ) ; } } while ( ! ( METHOD_2 ( ) ) ) { } VAR_3 . METHOD_7 ( out ) ; }\n", "fixed": "public void METHOD_1 ( ) { while ( ! ( VAR_1 ) ) { METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) . message ( VAR_2 , STRING_1 , STRING_2 ) ; VAR_3 . METHOD_4 ( out ) ; } while ( ! ( METHOD_2 ( ) ) ) { } VAR_3 . METHOD_7 ( out ) ; }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { if ( VAR_1 == 1 ) { VAR_2 . add ( INT_1 ) ; VAR_2 . add ( INT_1 ) ; VAR_2 . add ( INT_2 ) ; } else if ( VAR_1 == INT_3 ) { VAR_2 . add ( INT_4 ) ; VAR_2 . add ( INT_4 ) ; VAR_2 . add ( INT_5 ) ; } else if ( VAR_1 == INT_6 ) { VAR_2 . add ( INT_4 ) ; VAR_2 . add ( INT_7 ) ; VAR_2 . add ( INT_8 ) ; } }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { if ( VAR_1 == 1 ) { VAR_2 [ 0 ] = INT_1 ; VAR_2 [ 1 ] = INT_1 ; VAR_2 [ INT_3 ] = INT_2 ; } else if ( VAR_1 == INT_3 ) { VAR_2 [ 0 ] = INT_4 ; VAR_2 [ 1 ] = INT_4 ; VAR_2 [ INT_3 ] = INT_5 ; } else if ( VAR_1 == INT_6 ) { VAR_2 [ 0 ] = INT_4 ; VAR_2 [ 1 ] = INT_7 ; VAR_2 [ INT_3 ] = INT_8 ; } }\n"}
{"problem": "public TYPE_1 getName ( ) { if ( ( super . getName ( ) ) != null ) { if ( ( METHOD_1 ( ) . METHOD_2 ( ) ) != null ) { return new TYPE_1 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) , METHOD_1 ( ) . METHOD_2 ( ) . METHOD_5 ( ) ) ; } else { return new TYPE_1 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) , METHOD_1 ( ) . METHOD_5 ( ) ) ; } } else { return super . getName ( ) ; } }\n", "fixed": "public TYPE_1 getName ( ) { if ( ( super . getName ( ) ) == null ) { if ( ( METHOD_1 ( ) . METHOD_2 ( ) ) != null ) { return new TYPE_1 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) , METHOD_1 ( ) . METHOD_2 ( ) . METHOD_5 ( ) ) ; } else { return new TYPE_1 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) , METHOD_1 ( ) . METHOD_5 ( ) ) ; } } else { return super . getName ( ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7907f476688eb48f9b46434e90ef0bb02c1ea5d5", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     void joinReset() {\r\n         joinInProgress = false;\r\n         setJoins.clear();\r\n        timeToStartJoin = System.currentTimeMillis() + WAIT_SECONDS_BEFORE_JOIN + 1000;\r\n     }\r\n     public class AsyncRemotelyObjectCallable extends TargetAwareOp {\r", "fixed": "     void joinReset() {\r\n         joinInProgress = false;\r\n         setJoins.clear();\r\n        timeToStartJoin = System.currentTimeMillis() + WAIT_MILLIS_BEFORE_JOIN;\r\n     }\r\n     public class AsyncRemotelyObjectCallable extends TargetAwareOp {\r", "sourceBeforeFix": "System.currentTimeMillis() + WAIT_SECONDS_BEFORE_JOIN + 1000", "sourceAfterFix": "System.currentTimeMillis() + WAIT_MILLIS_BEFORE_JOIN"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( VAR_3 ) ) ) ; TYPE_2 VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 , TYPE_4 . METHOD_4 ( VAR_1 ) ) ; TYPE_2 VAR_5 = VAR_4 . METHOD_5 ( 0 ) ; VAR_5 . METHOD_6 ( ( ( VAR_1 . getName ( ) ) + STRING_1 ) ) ; VAR_2 . METHOD_7 ( VAR_6 , VAR_5 ) ; }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( VAR_3 ) ) ) ; TYPE_2 VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 , TYPE_4 . METHOD_4 ( VAR_1 ) ) ; TYPE_2 VAR_5 = VAR_4 . METHOD_5 ( 0 ) ; VAR_5 . METHOD_6 ( VAR_6 ) ; VAR_2 . METHOD_7 ( VAR_6 , VAR_5 ) ; }\n"}
{"problem": "public TYPE_1 < TYPE_2 > METHOD_1 ( ) { final TYPE_3 VAR_1 = TYPE_4 . getConfig ( ) ; return VAR_2 ? TYPE_5 . METHOD_2 ( name ) ? TYPE_5 . METHOD_3 ( name ) : VAR_3 ? TYPE_6 . METHOD_4 ( VAR_4 ) ? TYPE_6 . METHOD_3 ( VAR_4 ) : VAR_5 : VAR_5 : VAR_3 ? TYPE_6 . METHOD_4 ( VAR_4 ) ? TYPE_6 . METHOD_3 ( VAR_4 ) : VAR_5 : VAR_5 ; }\n", "fixed": "public TYPE_1 < TYPE_2 > METHOD_1 ( ) { final TYPE_3 VAR_1 = TYPE_4 . getConfig ( ) ; return ( VAR_2 ) && ( TYPE_5 . METHOD_2 ( name ) ) ? TYPE_5 . METHOD_3 ( name ) : ( VAR_3 ) && ( TYPE_6 . METHOD_4 ( VAR_4 ) ) ? TYPE_6 . METHOD_3 ( VAR_4 ) : VAR_5 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 , TYPE_3 { TYPE_1 VAR_2 = null ; if ( TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) ) { VAR_2 = TYPE_5 . METHOD_2 ( ) . METHOD_4 ( VAR_1 ) ; } if ( VAR_2 != null ) { return VAR_2 ; } else { VAR_2 = new TYPE_6 ( ) . METHOD_5 ( VAR_1 ) ; TYPE_5 . METHOD_2 ( ) . METHOD_6 ( VAR_1 , VAR_2 ) ; return VAR_2 ; } }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 , TYPE_3 { TYPE_1 VAR_2 = TYPE_5 . METHOD_2 ( ) . METHOD_4 ( VAR_1 ) ; if ( VAR_2 != null ) { return VAR_2 ; } else { VAR_2 = new TYPE_6 ( ) . METHOD_5 ( VAR_1 ) ; TYPE_5 . METHOD_2 ( ) . METHOD_6 ( VAR_1 , VAR_2 ) ; return VAR_2 ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . assertEquals ( VAR_1 . length , VAR_2 . METHOD_2 ( VAR_3 ) . length ) ; VAR_2 . METHOD_3 ( VAR_3 , VAR_4 ) ; TYPE_1 . assertEquals ( 0 , VAR_2 . METHOD_2 ( VAR_3 ) . length ) ; VAR_2 . METHOD_3 ( VAR_3 , VAR_5 ) ; TYPE_1 . assertTrue ( TYPE_2 . equals ( VAR_5 , VAR_2 . METHOD_2 ( VAR_3 ) ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . assertEquals ( VAR_1 . length , VAR_2 . METHOD_2 ( VAR_3 ) . length ) ; VAR_2 . METHOD_3 ( VAR_3 , VAR_4 ) ; TYPE_1 . assertEquals ( 0 , VAR_2 . METHOD_2 ( VAR_3 ) . length ) ; VAR_2 . METHOD_3 ( VAR_3 , VAR_1 ) ; TYPE_1 . assertTrue ( TYPE_2 . equals ( VAR_1 , VAR_2 . METHOD_2 ( VAR_3 ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( new java.io.File ( VAR_1 ) . METHOD_2 ( ) ) ) { throw new TYPE_1 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } try { VAR_2 = new TYPE_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 , false , false ) ; VAR_2 . METHOD_5 ( this ) ; } catch ( TYPE_3 VAR_7 ) { throw new TYPE_4 ( STRING_3 , VAR_7 ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { if ( ! ( new java.io.File ( VAR_1 ) . METHOD_2 ( ) ) ) { throw new TYPE_1 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } try { VAR_2 = new TYPE_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 , false , false ) ; VAR_2 . METHOD_5 ( this ) ; } catch ( TYPE_3 VAR_7 ) { throw new java.io.IOException ( STRING_3 , VAR_7 ) ; } }\n"}
{"project": "Closure", "bugId": 38, "problem": " void addNumber(double x) {\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n       add(\" \");\n     }", "fixed": " void addNumber(double x) {\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n    if ((x < 0 || negativeZero) && prev == '-') {\n       add(\" \");\n     }", "observations": "Parentesis added has no effect on expression evaluation, so a conditional expression expansion was considered only.", "repairActions": ["condExpExpand"], "repairPatterns": ["expLogicExpand", "singleLine"]}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this , TYPE_2 . METHOD_2 ( ) ) ; java.util.List < TYPE_3 > VAR_2 ; try { VAR_2 = VAR_1 . METHOD_3 ( VAR_3 , VAR_4 , 1 ) ; VAR_5 = VAR_2 . get ( 0 ) . METHOD_4 ( 0 ) ; } catch ( java.io.IOException VAR_6 ) { VAR_5 = STRING_1 ; } }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this , TYPE_2 . METHOD_2 ( ) ) ; java.util.List < TYPE_3 > VAR_2 ; try { VAR_2 = VAR_1 . METHOD_3 ( VAR_3 , VAR_4 , 1 ) ; VAR_5 = VAR_2 . get ( 0 ) . METHOD_4 ( 0 ) ; } catch ( java.lang.Exception VAR_6 ) { VAR_5 = STRING_1 ; } }\n"}
{"project": "Mockito", "bugId": 14, "problem": " public IOngoingStubbing stub() {\n         } else if (!mockUtil.isMock(mock)) {\r\n             reporter.notAMockPassedToVerify();\r\n         }\r\n        mockingProgress.verificationStarted(mode);\r\n         return mock;\r\n     }\r", "fixed": " public IOngoingStubbing stub() {\n         } else if (!mockUtil.isMock(mock)) {\r\n             reporter.notAMockPassedToVerify();\r\n         }\r\n        mockingProgress.verificationStarted(new MockAwareVerificationMode(mock, mode));\r\n         return mock;\r\n     }\r", "observations": "An existing parameter (\"mode\") was wrapped by a constructor call, instantiating MockAwareVerificationMode object", "repairActions": ["condBranIfAdd", "mcAdd", "mcParValChange", "objInstAdd"], "repairPatterns": ["wrapsIf", "wrapsMethod"]}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_3 = false ; VAR_4 = 0 ; VAR_5 = new TYPE_2 ( ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; TYPE_3 VAR_6 = METHOD_8 ( ) ; TYPE_4 VAR_7 = VAR_6 . METHOD_9 ( ) ; VAR_8 = new TYPE_5 ( ) ; VAR_7 . add ( VAR_9 , VAR_8 ) . commit ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_3 = false ; VAR_4 = 0 ; VAR_5 = new TYPE_2 ( ) ; METHOD_5 ( VAR_1 ) ; TYPE_3 VAR_6 = METHOD_8 ( ) ; TYPE_4 VAR_7 = VAR_6 . METHOD_9 ( ) ; VAR_8 = new TYPE_5 ( ) ; VAR_7 . add ( VAR_9 , VAR_8 ) . commit ( ) ; }\n"}
{"problem": "private void METHOD_1 ( java.util.Collection < TYPE_1 > VAR_1 ) { java.util.ArrayList < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( TYPE_1 key : VAR_1 ) list . add ( ( ( VAR_2 ) + ( key . toString ( ) ) ) ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; }\n", "fixed": "private void METHOD_1 ( java.util.Collection < TYPE_1 > VAR_1 ) { java.util.ArrayList < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( TYPE_1 key : VAR_1 ) list . add ( ( ( VAR_2 ) + ( key . toString ( ) ) ) ) ; VAR_3 . METHOD_2 ( list ) ; }\n"}
{"problem": "public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 , VAR_3 ) ; java.util.List < TYPE_4 > list = VAR_4 . METHOD_3 ( VAR_2 . getId ( ) , 1 ) ; if ( ( list == null ) || ( list . isEmpty ( ) ) ) { return new TYPE_5 ( TYPE_6 . METHOD_4 ( ) , TYPE_6 . METHOD_5 ( ) , null ) ; } return new TYPE_5 ( TYPE_7 . METHOD_4 ( ) , TYPE_7 . METHOD_5 ( ) , list ) ; }\n", "fixed": "public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 , VAR_3 ) ; java.util.List < TYPE_4 > list = VAR_4 . METHOD_3 ( VAR_2 . getId ( ) , 1 ) ; return new TYPE_5 ( TYPE_7 . METHOD_4 ( ) , TYPE_7 . METHOD_5 ( ) , list ) ; }\n"}
{"fixCommitSHA1": "09694b9eaf40fff637428b473b8fdcef8f8c37c2", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "   WORKER_NETWORK_NETTY_WORKER_THREADS(Name.WORKER_NETWORK_NETTY_WORKER_THREADS, 0),\n   WORKER_PRINCIPAL(Name.WORKER_PRINCIPAL, null),\n   WORKER_RPC_PORT(Name.WORKER_RPC_PORT, 29998),\n  WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS, 10000),\n   WORKER_TIERED_STORE_BLOCK_LOCKS(Name.WORKER_TIERED_STORE_BLOCK_LOCKS, 1000),\n   WORKER_TIERED_STORE_LEVEL0_ALIAS(Name.WORKER_TIERED_STORE_LEVEL0_ALIAS, \"MEM\"),\n   WORKER_TIERED_STORE_LEVEL0_DIRS_PATH(Name.WORKER_TIERED_STORE_LEVEL0_DIRS_PATH, \"/mnt/ramdisk\"),", "fixed": "   WORKER_NETWORK_NETTY_WORKER_THREADS(Name.WORKER_NETWORK_NETTY_WORKER_THREADS, 0),\n   WORKER_PRINCIPAL(Name.WORKER_PRINCIPAL, null),\n   WORKER_RPC_PORT(Name.WORKER_RPC_PORT, 29998),\n  WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS, 60000),\n   WORKER_TIERED_STORE_BLOCK_LOCKS(Name.WORKER_TIERED_STORE_BLOCK_LOCKS, 1000),\n   WORKER_TIERED_STORE_LEVEL0_ALIAS(Name.WORKER_TIERED_STORE_LEVEL0_ALIAS, \"MEM\"),\n   WORKER_TIERED_STORE_LEVEL0_DIRS_PATH(Name.WORKER_TIERED_STORE_LEVEL0_DIRS_PATH, \"/mnt/ramdisk\"),", "sourceBeforeFix": "WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS,10000)", "sourceAfterFix": "WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS,60000)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SjmsBatchEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedSjmsBatchEndpointBuilder advanced() {\n             return (AdvancedSjmsBatchEndpointBuilder) this;\n         }", "fixed": "     \n    public interface SjmsBatchEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedSjmsBatchEndpointBuilder advanced() {\n             return (AdvancedSjmsBatchEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public java.lang.Boolean METHOD_1 ( ) { java.util.Set < TYPE_1 > names = ( ( TYPE_2 ) ( this . VAR_1 ) ) . METHOD_2 ( ) ; for ( TYPE_1 name : names ) { if ( ( ( name . compareTo ( VAR_2 ) ) != 0 ) && ( ( name . compareTo ( VAR_3 ) ) != 0 ) ) { return false ; } } return true ; }\n", "fixed": "public java.lang.Boolean METHOD_1 ( ) { java.util.Set < TYPE_1 > names = ( ( TYPE_2 ) ( this . VAR_1 ) ) . METHOD_2 ( ) ; for ( TYPE_1 name : names ) { if ( ( ( name . compareTo ( VAR_2 ) ) != 0 ) && ( ( name . compareTo ( VAR_3 ) ) != 0 ) ) { return true ; } } return false ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { final TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( getId ( ) ) ; if ( VAR_1 instanceof TYPE_4 ) { final TYPE_4 VAR_2 = ( ( TYPE_4 ) ( VAR_1 ) ) ; return new TYPE_1 ( getId ( ) ) { public TYPE_5 METHOD_4 ( java.util.List < TYPE_5 > VAR_3 ) { return VAR_2 . METHOD_4 ( VAR_3 ) ; } } ; } return new TYPE_1 ( getId ( ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { if ( ( this ) instanceof TYPE_4 ) { final TYPE_4 VAR_2 = ( ( TYPE_4 ) ( this ) ) ; return new TYPE_1 ( getId ( ) ) { public TYPE_5 METHOD_4 ( java.util.List < TYPE_5 > VAR_3 ) { return VAR_2 . METHOD_4 ( VAR_3 ) ; } } ; } return new TYPE_1 ( getId ( ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 , this . VAR_2 ) ; VAR_1 . METHOD_2 ( STRING_2 , this . VAR_3 ) ; VAR_1 . METHOD_2 ( STRING_3 , this . VAR_4 ) ; VAR_1 . METHOD_2 ( STRING_4 , this . VAR_5 ) ; return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 , this . VAR_2 ) ; VAR_1 . METHOD_2 ( STRING_2 , this . VAR_3 ) ; VAR_1 . METHOD_2 ( STRING_3 , this . VAR_4 ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "2071f9b5421f853e8515f309b2874399c895c43a", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "      */\n     public SeverityLevelCounter(SeverityLevel level) {\n         if (level == null) {\n            throw new IllegalArgumentException();\n         }\n         this.level = level;\n     }", "fixed": "      */\n     public SeverityLevelCounter(SeverityLevel level) {\n         if (level == null) {\n            throw new IllegalArgumentException(\"'level' cannot be null\");\n         }\n         this.level = level;\n     }", "sourceBeforeFix": "new IllegalArgumentException()", "sourceAfterFix": "new IllegalArgumentException(\"'level' cannot be null\")"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . put ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; VAR_2 . put ( STRING_2 , VAR_1 . METHOD_3 ( ) ) ; VAR_2 . put ( STRING_3 , VAR_1 . METHOD_4 ( ) ) ; VAR_2 . put ( STRING_4 , VAR_1 . METHOD_5 ( ) ) ; VAR_2 . put ( STRING_5 , VAR_1 . getTime ( ) ) ; return VAR_2 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 == null ) return null ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . put ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; VAR_2 . put ( STRING_2 , VAR_1 . METHOD_3 ( ) ) ; VAR_2 . put ( STRING_3 , VAR_1 . METHOD_4 ( ) ) ; VAR_2 . put ( STRING_4 , VAR_1 . METHOD_5 ( ) ) ; VAR_2 . put ( STRING_5 , VAR_1 . getTime ( ) ) ; return VAR_2 ; }\n"}
{"problem": "public TYPE_1 < java.lang.String , java.lang.Object > METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 < java.lang.String , java.lang.Object > VAR_2 = TYPE_3 . METHOD_2 ( ) ; final java.lang.String VAR_3 ; java.lang.String VAR_4 = STRING_1 ; VAR_2 = ( ( TYPE_1 < java.lang.String , java.lang.Object > ) ( VAR_1 . METHOD_3 ( ( STRING_2 + VAR_1 ) ) ) ) ; VAR_1 . METHOD_4 ( STRING_2 , VAR_5 ) ; return VAR_2 ; }\n", "fixed": "public TYPE_1 < java.lang.String , java.lang.Object > METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 < java.lang.String , java.lang.Object > VAR_2 = TYPE_3 . METHOD_2 ( ) ; final java.lang.String VAR_3 ; java.lang.String VAR_4 = STRING_1 ; VAR_2 = ( ( TYPE_1 < java.lang.String , java.lang.Object > ) ( VAR_1 . METHOD_3 ( ( STRING_2 + VAR_1 ) ) ) ) ; VAR_1 . METHOD_4 ( STRING_2 , null ) ; return VAR_2 ; }\n"}
{"problem": "private java.lang.Boolean METHOD_1 ( java.lang.String VAR_1 ) { for ( java.lang.Integer VAR_2 : VAR_3 ) { TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 = VAR_5 . get ( VAR_2 ) ; if ( ( VAR_4 . METHOD_2 ( ) . equals ( VAR_1 ) ) == true ) { return true ; } } return false ; }\n", "fixed": "public java.lang.Boolean METHOD_1 ( java.lang.String VAR_1 ) { for ( java.lang.Integer VAR_2 : VAR_3 ) { TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 = VAR_5 . get ( VAR_2 ) ; if ( ( VAR_4 . METHOD_2 ( ) . equals ( VAR_1 ) ) == true ) { return true ; } } return false ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public boolean METHOD_1 ( long VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; int VAR_2 = TYPE_1 . METHOD_3 ( VAR_1 ) ; int position = TYPE_1 . METHOD_4 ( VAR_1 ) ; return ( ( 1 < < position ) & ( VAR_3 [ VAR_2 ] ) ) != 0 ; }\n", "fixed": "public boolean METHOD_1 ( long VAR_1 ) { METHOD_2 ( VAR_1 ) ; int VAR_2 = TYPE_1 . METHOD_3 ( VAR_1 ) ; int position = TYPE_1 . METHOD_4 ( VAR_1 ) ; return ( ( 1 < < position ) & ( VAR_3 [ VAR_2 ] ) ) != 0 ; }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) { int a = INT_1 ; int b = INT_2 ; int c = INT_3 ; TYPE_1 . add ( a , b ) ; TYPE_1 . add ( b , c ) ; METHOD_1 ( c , a ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { int a = INT_1 ; int b = INT_2 ; int c = INT_3 ; TYPE_1 . add ( a , b ) ; TYPE_1 . add ( b , c ) ; TYPE_1 . METHOD_1 ( c , a ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = INT_1 ; if ( ( VAR_3 ) > VAR_2 ) { VAR_4 . remove ( VAR_1 ) ; } else { VAR_5 += VAR_6 ; VAR_7 += VAR_8 ; ( VAR_9 ) ++ ; ( VAR_3 ) ++ ; VAR_1 . METHOD_2 ( ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_3 ) > ( VAR_2 ) ) { VAR_4 . remove ( VAR_1 ) ; } else { VAR_5 += VAR_6 ; VAR_7 += VAR_8 ; ( VAR_9 ) ++ ; ( VAR_3 ) ++ ; VAR_1 . METHOD_2 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { android.content.Intent intent = new android.content.Intent ( this . VAR_4 . getActivity ( ) . METHOD_2 ( ) , VAR_5 class ) ; if ( ( this . VAR_4 ) != null ) { this . VAR_4 . METHOD_3 ( ( ( TYPE_1 ) ( this ) ) , android.content.Intent . METHOD_4 ( intent , new java.lang.String ( title ) ) , ( ( ( ( VAR_1 + 1 ) * INT_1 ) + VAR_2 ) + 1 ) ) ; } }\n", "fixed": "public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { android.content.Intent intent = new android.content.Intent ( this . VAR_4 . getActivity ( ) . METHOD_2 ( ) , VAR_5 class ) ; if ( ( this . VAR_4 ) != null ) { this . VAR_4 . METHOD_3 ( ( ( TYPE_1 ) ( this ) ) , intent , ( ( ( ( VAR_1 + 1 ) * INT_1 ) + VAR_2 ) + 1 ) ) ; } }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n\tpublic String getGlobalProperty(String propertyName) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n\tpublic String getGlobalProperty(String propertyName);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface LdapEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedLdapEndpointBuilder advanced() {\n             return (AdvancedLdapEndpointBuilder) this;\n         }", "fixed": "     \n    public interface LdapEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedLdapEndpointBuilder advanced() {\n             return (AdvancedLdapEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; int VAR_1 = this . METHOD_2 ( ) . METHOD_3 ( ) ; int VAR_2 = this . METHOD_2 ( ) . METHOD_4 ( ) ; this . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , VAR_2 ) ; java.lang.System.out.println ( this . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_7 ( VAR_1 , VAR_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { int VAR_1 = this . METHOD_2 ( ) . METHOD_3 ( ) ; int VAR_2 = this . METHOD_2 ( ) . METHOD_4 ( ) ; this . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 ) ; VAR_1 . show ( VAR_3 ) ; VAR_1 . METHOD_2 ( ( ( ( VAR_4 ) / INT_1 ) - ( ( VAR_1 . METHOD_3 ( ) ) / INT_1 ) ) , ( ( ( VAR_5 ) / INT_1 ) - INT_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 ) ; VAR_1 . show ( VAR_3 ) ; VAR_1 . METHOD_2 ( ( ( ( VAR_4 ) / INT_1 ) - ( ( VAR_1 . METHOD_3 ( ) ) / INT_1 ) ) , 0 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Object target = VAR_1 . METHOD_2 ( ) ; if ( target == null ) { return ; } java.lang.System.out.println ( ( STRING_1 + target ) ) ; if ( ( target . getClass ( ) ) == ( VAR_2 class ) ) { } else if ( ( target . getClass ( ) ) == ( VAR_3 class ) ) { VAR_1 . METHOD_3 ( VAR_4 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Object target = VAR_1 . METHOD_2 ( ) ; if ( target == null ) { return ; } if ( ( target . getClass ( ) ) == ( VAR_2 class ) ) { } else if ( ( target . getClass ( ) ) == ( VAR_3 class ) ) { VAR_1 . METHOD_3 ( VAR_4 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 , TYPE_3 , TYPE_4 , java.io.IOException { TYPE_5 < java.lang.String > VAR_1 = new TYPE_5 ( java.util.Arrays.asList ( STRING_1 , STRING_2 ) ) ; TYPE_6 < TYPE_5 < java.lang.String > > node = new TYPE_6 ( VAR_1 ) ; TYPE_7 VAR_2 = new TYPE_7 ( ) ; VAR_2 . METHOD_2 ( VAR_3 , node , new TYPE_8 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 , TYPE_3 , TYPE_4 , java.io.IOException { TYPE_5 < java.lang.String > VAR_1 = new TYPE_5 ( java.util.Arrays.asList ( STRING_1 , STRING_2 ) ) ; TYPE_6 < TYPE_5 < java.lang.String > > node = new TYPE_6 ( VAR_1 ) ; TYPE_7 VAR_2 = new TYPE_7 ( ) ; TYPE_8 writer = new TYPE_8 ( ) ; VAR_2 . METHOD_2 ( VAR_3 , node , writer ) ; java.lang.System.out.println ( writer . toString ( ) ) ; }\n"}
{"problem": "public static TYPE_1 init ( java.lang.String name , java.util.Date date ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( name ) ; java.util.Calendar VAR_2 = java.util.Calendar.getInstance ( ) ; VAR_2 . METHOD_2 ( date ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; return VAR_1 ; }\n", "fixed": "public static TYPE_1 init ( java.lang.String name , java.util.Date date ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( name ) ; java.util.Calendar VAR_2 = null ; if ( date != null ) { VAR_2 = java.util.Calendar.getInstance ( ) ; VAR_2 . METHOD_2 ( date ) ; } VAR_1 . METHOD_3 ( VAR_2 ) ; return VAR_1 ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( long ... VAR_1 ) { for ( long number : VAR_1 ) { if ( number > ( VAR_2 ) ) { throw new TYPE_1 ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ; } } if ( ( VAR_1 . length ) == 0 ) { return STRING_3 ; } return this . METHOD_2 ( VAR_1 ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( long ... VAR_1 ) { if ( ( VAR_1 . length ) == 0 ) { return STRING_3 ; } for ( long number : VAR_1 ) { if ( number < 0 ) { return STRING_3 ; } if ( number > ( VAR_2 ) ) { throw new TYPE_1 ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ; } } return this . METHOD_2 ( VAR_1 ) ; }\n"}
{"problem": "private java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Set < java.lang.String > result = new java.util.HashSet < java.lang.String > ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( ! ( VAR_2 . equals ( VAR_3 ) ) ) ) result . add ( VAR_2 ) ; for ( java.lang.String VAR_4 : VAR_1 . METHOD_3 ( ) ) result . add ( VAR_4 ) ; return result ; }\n", "fixed": "private java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > result = new java.util.ArrayList < java.lang.String > ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( ! ( VAR_2 . equals ( VAR_3 ) ) ) ) result . add ( VAR_2 ) ; for ( java.lang.String VAR_4 : VAR_1 . METHOD_3 ( ) ) result . add ( VAR_4 ) ; return result ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { if ( ! ( VAR_4 ) ) { METHOD_2 ( VAR_2 , VAR_3 ) ; return ; } VAR_5 . METHOD_3 ( ) ; this . VAR_6 = new java.util.Date ( ) . getTime ( ) ; TYPE_1 VAR_7 = VAR_8 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_6 ) ; METHOD_5 ( VAR_7 ) ; VAR_9 . METHOD_6 ( VAR_7 ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { if ( ! ( VAR_4 ) ) { METHOD_2 ( VAR_2 , VAR_3 ) ; return ; } VAR_5 . METHOD_3 ( ) ; long time = new java.util.Date ( ) . getTime ( ) ; this . VAR_6 = time ; TYPE_1 VAR_7 = VAR_8 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_6 ) ; METHOD_5 ( VAR_7 ) ; VAR_9 . METHOD_6 ( VAR_7 ) ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 < TYPE_1 > METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_1 , VAR_2 ) , new TYPE_2 ( STRING_2 , STRING_3 , VAR_3 ) , new TYPE_2 ( STRING_4 , STRING_5 , VAR_3 ) , new TYPE_2 ( STRING_6 , STRING_7 , VAR_3 ) ) ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 < TYPE_1 > METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_1 , VAR_3 ) , new TYPE_2 ( STRING_2 , STRING_3 , VAR_3 ) , new TYPE_2 ( STRING_4 , STRING_5 , VAR_3 ) , new TYPE_2 ( STRING_6 , STRING_7 , VAR_3 ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "7369734ba2477dc5f208c9bcdbf438d42e92ac25", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tsetTransform(false);\n \t}\n\tpublic Container (Actor actor) {\n \t\tthis();\n \t\tsetActor(actor);\n \t}", "fixed": " \t\tsetTransform(false);\n \t}\n\tpublic Container (T actor) {\n \t\tthis();\n \t\tsetActor(actor);\n \t}", "sourceBeforeFix": "Actor actor", "sourceAfterFix": "T actor"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ce8d80dd2543eaa821e861969cfb53b9b3a666de", "projectName": "alibaba.fastjson", "bugType": "Less Specific If", "problem": "                }\n                superClass = superClass.getSuperclass();\n               if (superClass == Object.class) {\n                    break;\n                }\n             }", "fixed": "                }\n                superClass = superClass.getSuperclass();\n               if (superClass == Object.class || superClass == null) {\n                    break;\n                }\n             }", "sourceBeforeFix": "superClass == Object.class", "sourceAfterFix": "superClass == Object.class || superClass == null"}
{"problem": "private boolean METHOD_1 ( ) { for ( int i = 0 ; i < INT_1 ; i ++ ) { if ( ( java.lang.Math.abs ( VAR_1 [ i ] ) ) > ( ( VAR_2 ) * INT_2 ) ) { return true ; } } return false ; }\n", "fixed": "public boolean METHOD_1 ( ) { for ( int i = 0 ; i < INT_1 ; i ++ ) { if ( ( java.lang.Math.abs ( VAR_1 [ i ] ) ) > ( ( VAR_2 ) * INT_2 ) ) { return true ; } } return false ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 message , TYPE_2 response ) { TYPE_3 . METHOD_2 ( response ) ; TYPE_4 . METHOD_3 ( STRING_1 , response . toString ( ) ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; TYPE_5 . METHOD_5 ( ) ; if ( ! ( TYPE_5 . isEmpty ( ) ) ) { TYPE_3 . METHOD_6 ( TYPE_5 . METHOD_7 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 message , TYPE_2 response ) { TYPE_3 . METHOD_2 ( response ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; TYPE_5 . METHOD_5 ( ) ; if ( ! ( TYPE_5 . isEmpty ( ) ) ) { TYPE_3 . METHOD_6 ( TYPE_5 . METHOD_7 ( ) ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 == null ) || ( ! ( VAR_3 . METHOD_3 ( ) . get ( 0 ) . METHOD_4 ( ) ) ) ) { return null ; } TYPE_2 VAR_4 = new TYPE_2 ( VAR_3 ) ; this . VAR_5 . add ( VAR_4 ) ; return VAR_4 . METHOD_5 ( ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 == null ) || ( VAR_3 . METHOD_3 ( ) . get ( 0 ) . METHOD_4 ( ) ) ) { return null ; } TYPE_2 VAR_4 = new TYPE_2 ( VAR_3 ) ; this . VAR_5 . add ( VAR_4 ) ; return VAR_4 . METHOD_5 ( ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 ) ; for ( int VAR_4 = 0 ; VAR_4 < ( VAR_2 . METHOD_2 ( ) ) ; VAR_4 ++ ) { for ( int VAR_5 = 0 ; VAR_5 < ( VAR_2 . METHOD_3 ( ) ) ; VAR_5 ++ ) { TYPE_2 VAR_6 = VAR_3 . METHOD_4 ( VAR_4 , VAR_5 ) ; VAR_3 . METHOD_5 ( VAR_4 , VAR_5 , VAR_6 . METHOD_6 ( VAR_1 ) ) ; } } return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 ) ; for ( int VAR_4 = 0 ; VAR_4 < ( VAR_2 . METHOD_2 ( ) ) ; VAR_4 ++ ) { for ( int VAR_5 = 0 ; VAR_5 < ( VAR_2 . METHOD_3 ( ) ) ; VAR_5 ++ ) { TYPE_2 VAR_6 = VAR_3 . METHOD_4 ( VAR_4 , VAR_5 ) ; VAR_3 . METHOD_5 ( VAR_4 , VAR_5 , VAR_6 . METHOD_6 ( VAR_1 ) ) ; } } return VAR_3 ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { final TYPE_2 VAR_1 = METHOD_2 ( ) ; final TYPE_3 VAR_2 = METHOD_3 ( ) . METHOD_4 ( METHOD_5 ( ) ) ; final TYPE_1 VAR_3 = TYPE_4 . METHOD_6 ( VAR_1 , VAR_2 , VAR_4 ) ; final TYPE_2 [ ] VAR_5 = METHOD_7 ( ) ; for ( final TYPE_2 VAR_6 : VAR_5 ) { final java.lang.String VAR_7 = METHOD_8 ( VAR_6 ) ; TYPE_5 . METHOD_9 ( VAR_3 , VAR_7 ) ; } return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { final TYPE_2 VAR_1 = METHOD_2 ( ) ; final TYPE_3 VAR_2 = METHOD_4 ( ) ; final TYPE_1 VAR_3 = TYPE_4 . METHOD_6 ( VAR_1 , VAR_2 , VAR_4 ) ; final TYPE_2 [ ] VAR_5 = METHOD_7 ( ) ; for ( final TYPE_2 VAR_6 : VAR_5 ) { final java.lang.String VAR_7 = METHOD_8 ( VAR_6 ) ; TYPE_5 . METHOD_9 ( VAR_3 , VAR_7 ) ; } return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; java.lang.String VAR_3 = TYPE_2 . METHOD_2 ( STRING_3 , STRING_4 ) ; java.lang.String url = TYPE_3 . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , STRING_5 ) . url ( ) ; TYPE_4 . assertThat ( url ) . METHOD_4 ( STRING_6 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; java.lang.String VAR_3 = STRING_3 ; java.lang.String url = TYPE_3 . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , STRING_5 ) . url ( ) ; TYPE_4 . assertThat ( url ) . METHOD_4 ( STRING_6 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static < TYPE_1 > void METHOD_1 ( java.lang.String VAR_1 , java.lang.String msg ) throws java.lang.NullPointerException { TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , msg ) ; if ( TYPE_3 . METHOD_3 ( ) . contains ( VAR_3 ) ) { TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_3 , null , VAR_1 , msg , null ) ; } }\n", "fixed": "public static < TYPE_1 > void METHOD_1 ( java.lang.String VAR_1 , java.lang.String msg ) throws java.lang.NullPointerException { TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , msg ) ; if ( TYPE_3 . METHOD_3 ( ) . contains ( VAR_2 ) ) { TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_2 , null , VAR_1 , msg , null ) ; } }\n"}
{"problem": "public void execute ( TYPE_1 VAR_1 ) throws TYPE_2 { java.util.ArrayList < java.lang.String > values = new java.util.ArrayList < java.lang.String > ( ) ; for ( TYPE_3 VAR_2 : VAR_3 ) { TYPE_4 VAR_4 = VAR_2 . getValue ( VAR_1 ) ; values . add ( VAR_4 . toString ( ) ) ; } VAR_5 . execute ( new java.util.ArrayList < java.lang.String > ( VAR_6 ) , new java.util.ArrayList < java.lang.String > ( values ) ) ; }\n", "fixed": "public void execute ( TYPE_1 VAR_1 ) throws TYPE_2 { java.lang.System.out.println ( VAR_3 . size ( ) ) ; java.util.ArrayList < java.lang.String > values = new java.util.ArrayList < java.lang.String > ( ) ; for ( TYPE_3 VAR_2 : VAR_3 ) { TYPE_4 VAR_4 = VAR_2 . getValue ( VAR_1 ) ; values . add ( VAR_4 . toString ( ) ) ; } VAR_5 . execute ( new java.util.ArrayList < java.lang.String > ( VAR_6 ) , new java.util.ArrayList < java.lang.String > ( values ) ) ; }\n"}
{"problem": "public void handle ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_1 ( ) ; java.util.ArrayList < TYPE_3 > VAR_3 = VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_3 VAR_5 : VAR_3 ) { VAR_5 . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_5 , VAR_6 . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_2 ) ) ) ; } }\n", "fixed": "public void handle ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_1 ( ) ; java.util.ArrayList < TYPE_3 > VAR_3 = VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_3 VAR_5 : VAR_3 ) { VAR_5 . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_6 . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_2 ) ) ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c9f41fa744d6520f5f44be1a8a16e6a32a8fa83d", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "     \n    void failTask(Throwable cause)\n     {\n         TaskStatus taskStatus = getTaskStatus();\n         if (!taskStatus.getState().isDone()) {", "fixed": "     \n    private void failTask(Throwable cause)\n     {\n         TaskStatus taskStatus = getTaskStatus();\n         if (!taskStatus.getState().isDone()) {", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"problem": "protected void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( position ) ; if ( VAR_1 == ( this ) ) { TYPE_2 VAR_3 = VAR_4 . METHOD_3 ( ) . METHOD_4 ( position ) ; TYPE_1 VAR_5 = VAR_2 . METHOD_2 ( VAR_3 ) ; if ( ( VAR_6 . METHOD_3 ( ) ) == ( VAR_4 ) ) { VAR_7 = true ; VAR_8 = true ; return ; } return ; } VAR_7 = true ; VAR_9 = true ; }\n", "fixed": "protected void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( position ) ; if ( VAR_1 == ( this ) ) { TYPE_2 VAR_3 = VAR_4 . METHOD_3 ( ) . METHOD_4 ( position ) ; TYPE_1 VAR_5 = VAR_2 . METHOD_2 ( VAR_3 ) ; if ( ( VAR_5 != null ) && ( ( VAR_6 . METHOD_3 ( ) ) == ( VAR_4 ) ) ) { VAR_7 = true ; VAR_8 = true ; return ; } return ; } VAR_7 = true ; VAR_9 = true ; }\n"}
{"problem": "public void METHOD_1 ( ) { int count = INT_1 ; TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( count ) ; assertEquals ( ( ( ( STRING_1 + count ) + STRING_2 ) + ( VAR_1 . result ( ) . size ( ) ) ) , ( count - 1 ) , VAR_1 . result ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { int count = INT_1 ; TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ( count + 1 ) ) ; assertEquals ( ( ( ( STRING_1 + count ) + STRING_2 ) + ( VAR_1 . result ( ) . size ( ) ) ) , count , VAR_1 . result ( ) ) ; }\n"}
{"fixCommitSHA1": "6d760c0089645e220355f70b258dbfadb86a055e", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                 cache = b.getBroadcasterConfig().getBroadcasterCache();\n                 List<Object> t = cache.retrieveFromCache(b.getID(), r);\n                cachedMessages = b.getBroadcasterConfig().applyFilters(r, t);\n                 if (t.size() > 0) {\n                     logger.trace(\"Found Cached Messages For AtmosphereResource {} with Broadcaster {}\", r.uuid(), broadcasterID);\n                     cachedMessages.addAll(t);", "fixed": "                 cache = b.getBroadcasterConfig().getBroadcasterCache();\n                 List<Object> t = cache.retrieveFromCache(b.getID(), r);\n                t = b.getBroadcasterConfig().applyFilters(r, t);\n                 if (t.size() > 0) {\n                     logger.trace(\"Found Cached Messages For AtmosphereResource {} with Broadcaster {}\", r.uuid(), broadcasterID);\n                     cachedMessages.addAll(t);", "sourceBeforeFix": "cachedMessages=b.getBroadcasterConfig().applyFilters(r,t)", "sourceAfterFix": "t=b.getBroadcasterConfig().applyFilters(r,t)"}
{"problem": "void METHOD_1 ( ) { VAR_1 = true ; synchronized ( VAR_2 ) { if ( ( response ) != null ) { final TYPE_1 VAR_3 = response ; response = null ; new TYPE_2 < java.lang.Void , java.lang.Void , java.lang.Void > ( ) { protected java.lang.Void METHOD_2 ( java.lang.Void ... VAR_4 ) { try { VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ; } catch ( TYPE_3 VAR_5 ) { } return null ; } } . execute ( ) ; } } }\n", "fixed": "void METHOD_1 ( ) { VAR_1 = true ; if ( ( response ) != null ) { new TYPE_2 < java.lang.Void , java.lang.Void , java.lang.Void > ( ) { protected java.lang.Void METHOD_2 ( java.lang.Void ... VAR_4 ) { response . METHOD_3 ( ) . METHOD_4 ( ) ; return null ; } } . execute ( ) ; } }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int i , int j , int x , int y , int k ) { if ( TYPE_3 . METHOD_2 ( STRING_1 ) ) { int VAR_2 = i * INT_1 ; int VAR_3 = k ; int VAR_4 = j * INT_1 ; TYPE_4 VAR_5 = VAR_6 . METHOD_3 ( 0 ) ; TYPE_5 VAR_7 = VAR_5 . METHOD_4 ( VAR_2 , VAR_4 ) . METHOD_5 ( VAR_3 ) ; return VAR_8 ; } else { return VAR_9 ; } }\n", "fixed": "protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int i , int j , int x , int y , int k ) { if ( TYPE_3 . METHOD_2 ( STRING_1 ) ) { int VAR_2 = i ; int VAR_3 = k ; int VAR_4 = j ; TYPE_4 VAR_5 = VAR_6 . METHOD_3 ( 0 ) ; TYPE_5 VAR_7 = VAR_5 . METHOD_4 ( VAR_2 , VAR_4 ) . METHOD_5 ( VAR_3 ) ; return VAR_8 ; } else { return VAR_9 ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMailEndpointBuilder\n             extends\n                 AdvancedMailEndpointConsumerBuilder, AdvancedMailEndpointProducerBuilder {\n         default MailEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMailEndpointBuilder\n             extends\n                 AdvancedMailEndpointConsumerBuilder, AdvancedMailEndpointProducerBuilder {\n         default MailEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 method ) { return ( ) - > { final TYPE_4 VAR_1 = VAR_2 . value ( ) ; for ( TYPE_5 VAR_3 : VAR_4 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; } response = method . METHOD_1 ( VAR_1 ) ; for ( TYPE_5 TYPE_6 : VAR_4 ) { TYPE_6 . METHOD_3 ( response ) ; } METHOD_4 ( response ) ; return response ; } ; }\n", "fixed": "private TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 method ) { return ( ) - > { final TYPE_4 VAR_1 = VAR_2 . value ( ) ; for ( TYPE_5 VAR_3 : VAR_4 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; } response = method . METHOD_1 ( VAR_1 ) ; for ( TYPE_5 VAR_3 : VAR_4 ) { VAR_3 . METHOD_3 ( response ) ; } METHOD_4 ( response ) ; return response ; } ; }\n"}
{"problem": "void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 ( 0 , 0 , 0 , 0 ) , false ) ; TYPE_2 . METHOD_3 ( VAR_2 ) . METHOD_4 ( VAR_3 , 0 ) ; TYPE_2 . METHOD_3 ( VAR_2 ) . METHOD_4 ( VAR_4 , 0 ) ; TYPE_2 . METHOD_3 ( VAR_2 ) . METHOD_4 ( VAR_5 , 0 ) ; }\n", "fixed": "void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 ( 0 , 0 , 0 , 0 ) , false ) ; METHOD_3 ( VAR_2 ) . METHOD_4 ( VAR_3 , 0 ) ; METHOD_3 ( VAR_2 ) . METHOD_4 ( VAR_4 , 0 ) ; METHOD_3 ( VAR_2 ) . METHOD_4 ( VAR_5 , 0 ) ; }\n"}
{"problem": "public long METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 values = new TYPE_2 ( ) ; values . put ( VAR_2 , VAR_1 . getId ( ) ) ; values . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) ; values . put ( VAR_4 , VAR_1 . METHOD_3 ( ) ) ; return VAR_5 . replace ( VAR_6 , null , values ) ; }\n", "fixed": "public long METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 values = new TYPE_2 ( ) ; values . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) ; values . put ( VAR_4 , VAR_1 . METHOD_3 ( ) ) ; return VAR_5 . replace ( VAR_6 , null , values ) ; }\n"}
{"fixCommitSHA1": "bbfc2b18a1b5ed3968212db115410ee515dca460", "projectName": "jersey.jersey", "bugType": "Change Numeric Literal", "problem": "     @Override\n     protected void configureClient(ClientConfig clientConfig) {\n        clientConfig.property(ClientProperties.READ_TIMEOUT, 1000);\n     }\n     @Test", "fixed": "     @Override\n     protected void configureClient(ClientConfig clientConfig) {\n        clientConfig.property(ClientProperties.READ_TIMEOUT, 2000);\n     }\n     @Test", "sourceBeforeFix": "Thread.sleep(2000)", "sourceAfterFix": "Thread.sleep(5000)"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = getIntent ( ) . METHOD_3 ( ) . getString ( \"name\" ) ; id = getIntent ( ) . METHOD_3 ( ) . getInt ( \"id\" ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = getIntent ( ) . METHOD_3 ( ) . getString ( \"name\" ) ; id = getIntent ( ) . METHOD_3 ( ) . getInt ( \"id\" ) ; init ( ) ; }\n"}
{"problem": "public static java.lang.String METHOD_1 ( java.lang.Object VAR_1 , java.lang.Class VAR_2 , TYPE_1 VAR_3 ) throws java.io.IOException { if ( VAR_3 == null ) { VAR_3 = new TYPE_1 ( ) ; } VAR_3 . METHOD_2 ( VAR_4 ) ; if ( VAR_2 != null ) return VAR_3 . METHOD_3 ( VAR_1 ) ; return VAR_3 . METHOD_4 ( VAR_2 ) . METHOD_3 ( VAR_1 ) ; }\n", "fixed": "public static java.lang.String METHOD_1 ( java.lang.Object VAR_1 , java.lang.Class VAR_2 , TYPE_1 VAR_3 ) throws java.io.IOException { if ( VAR_3 == null ) { VAR_3 = new TYPE_1 ( ) ; } if ( VAR_2 != null ) return VAR_3 . METHOD_4 ( VAR_2 ) . METHOD_3 ( VAR_1 ) ; return VAR_3 . METHOD_3 ( VAR_1 ) ; }\n"}
{"problem": "public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < java.lang.Double > VAR_1 = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < ( TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ; i ++ ) { VAR_1 . add ( ( 1.0 / ( TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ; } TYPE_1 < TYPE_2 > VAR_2 = new TYPE_1 < TYPE_2 > ( VAR_1 , this . VAR_3 ) ; return VAR_2 ; }\n", "fixed": "public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < java.lang.Double > VAR_1 = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < ( TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ; i ++ ) { VAR_1 . add ( ( 1.0 / ( TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ; } TYPE_1 < TYPE_2 > VAR_2 = new TYPE_1 < TYPE_2 > ( VAR_1 ) ; return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; setState ( VAR_1 ) ; if ( ( VAR_2 ) >= ( VAR_3 ) ) { VAR_4 . METHOD_2 ( null ) ; } else if ( ( VAR_5 ) != null ) { VAR_6 = true ; } METHOD_3 ( true , false ) ; }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; setState ( VAR_1 ) ; if ( ( ( VAR_2 ) >= ( VAR_3 ) ) && ( ( VAR_4 ) != null ) ) { VAR_4 . METHOD_2 ( null ) ; } else if ( ( VAR_5 ) != null ) { VAR_6 = true ; } METHOD_3 ( true , false ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 , java.io.IOException { TYPE_3 VAR_3 = new TYPE_4 ( ) . url ( ( ( ( VAR_4 ) + STRING_1 ) + VAR_1 ) ) . METHOD_2 ( STRING_2 , METHOD_3 ( ) ) . METHOD_1 ( VAR_2 ) . build ( ) ; return METHOD_4 ( VAR_3 ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 , java.io.IOException { TYPE_3 VAR_3 = new TYPE_4 ( ) . url ( ( ( VAR_4 ) + VAR_1 ) ) . METHOD_2 ( STRING_2 , METHOD_3 ( ) ) . METHOD_1 ( VAR_2 ) . build ( ) ; return METHOD_4 ( VAR_3 ) ; }\n"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see NormalizableKey\n \t */\n\tpublic void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "fixed": " \t * \n* @see NormalizableKey\n \t */\n\tpublic abstract void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "public static void METHOD_1 ( TYPE_1 status ) { int VAR_1 = status . get ( 0 ) ; if ( VAR_1 < 0 ) { java.lang.String message = TYPE_2 . METHOD_2 ( VAR_1 ) ; throw new TYPE_3 ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + message ) ) ; } else if ( VAR_1 > 0 ) { TYPE_4 . get ( VAR_2 class ) . METHOD_3 ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; } }\n", "fixed": "public static void METHOD_1 ( TYPE_1 status ) { int VAR_1 = status . get ( 0 ) ; if ( VAR_1 < 0 ) { java.lang.String message = TYPE_2 . METHOD_2 ( VAR_1 ) ; } else if ( VAR_1 > 0 ) { TYPE_4 . get ( VAR_2 class ) . METHOD_3 ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; } }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( INT_1 , INT_2 ) ; VAR_1 . METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( INT_3 , INT_3 ) ; VAR_1 . init ( ) ; VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; VAR_1 . METHOD_6 ( new TYPE_2 ( ) ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( INT_1 , INT_2 ) ; VAR_1 . METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( INT_3 , INT_3 ) ; VAR_1 . init ( ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = null ; for ( TYPE_2 VAR_3 : this . VAR_4 ) { if ( VAR_2 == null ) { VAR_2 = this . METHOD_2 ( VAR_3 ) ; } VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ; VAR_3 . METHOD_6 ( VAR_2 . METHOD_4 ( ) . getId ( ) ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; } this . VAR_4 . METHOD_8 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = null ; for ( TYPE_2 VAR_3 : this . VAR_4 ) { if ( VAR_2 == null ) { VAR_2 = this . METHOD_2 ( VAR_3 ) ; } if ( VAR_2 != null ) { VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ; VAR_3 . METHOD_6 ( VAR_2 . METHOD_4 ( ) . getId ( ) ) ; } VAR_1 . METHOD_7 ( VAR_3 ) ; } this . VAR_4 . METHOD_8 ( ) ; }\n"}
{"problem": "java.lang.String METHOD_1 ( ) { java.lang.String str = VAR_1 . getString ( STRING_1 , \"0\" ) ; TYPE_1 . i ( STRING_2 , VAR_2 ) ; int VAR_3 = str . METHOD_2 ( STRING_3 ) ; if ( VAR_3 != ( - 1 ) ) { return str . substring ( 0 , VAR_3 ) ; } return str ; }\n", "fixed": "java.lang.String METHOD_1 ( ) { java.lang.String str = VAR_1 . getString ( STRING_1 , \"0\" ) ; TYPE_1 . i ( STRING_2 , str ) ; int VAR_3 = str . METHOD_2 ( STRING_3 ) ; if ( VAR_3 != ( - 1 ) ) { return str . substring ( 0 , VAR_3 ) ; } return str ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( VAR_2 class , STRING_1 ) ) . METHOD_4 ( this . VAR_3 ) ; TYPE_1 . METHOD_2 ( this . VAR_3 . METHOD_5 ( VAR_4 ) ) . METHOD_4 ( STRING_2 ) ; TYPE_2 . assertEquals ( STRING_2 , this . VAR_5 . METHOD_1 ( VAR_4 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( this . VAR_1 . METHOD_3 ( VAR_2 class , STRING_1 ) ) . METHOD_4 ( this . VAR_3 ) ; METHOD_2 ( this . VAR_3 . METHOD_5 ( VAR_4 ) ) . METHOD_4 ( STRING_2 ) ; TYPE_2 . assertEquals ( STRING_2 , this . VAR_5 . METHOD_1 ( VAR_4 ) ) ; }\n"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"problem": "private void METHOD_1 ( ) { try { VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.System.out.println ( STRING_1 ) ; while ( true ) { TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( ) ; java.lang.System.out.println ( VAR_3 . toString ( ) ) ; VAR_4 . add ( new TYPE_3 ( VAR_3 . METHOD_3 ( ) ) ) ; new java.lang.Thread ( new TYPE_4 ( VAR_3 ) ) . start ( ) ; java.lang.System.out.println ( STRING_2 ) ; } } catch ( java.io.IOException VAR_5 ) { VAR_5 . METHOD_4 ( ) ; } finally { } }\n", "fixed": "private void METHOD_1 ( ) { try { VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.System.out.println ( STRING_1 ) ; while ( true ) { TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( ) ; java.lang.System.out.println ( VAR_3 . toString ( ) ) ; VAR_4 . add ( new TYPE_3 ( VAR_3 . METHOD_3 ( ) , true ) ) ; new java.lang.Thread ( new TYPE_4 ( VAR_3 ) ) . start ( ) ; java.lang.System.out.println ( STRING_2 ) ; } } catch ( java.io.IOException VAR_5 ) { VAR_5 . METHOD_4 ( ) ; } finally { } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( int VAR_1 ) { java.util.Random VAR_2 = new java.util.Random ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( new TYPE_2 ( ) , VAR_2 . METHOD_2 ( VAR_1 ) , TYPE_3 . METHOD_3 ( INT_1 , 0 , VAR_1 ) ) ; boolean VAR_4 = true ; for ( int source : VAR_5 ) { if ( ( VAR_6 ) == source ) { VAR_4 = false ; break ; } } if ( ! VAR_4 ) VAR_3 = TYPE_3 . METHOD_1 ( VAR_1 ) ; return VAR_3 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.util.Random VAR_2 , int VAR_1 ) { TYPE_1 VAR_3 = new TYPE_1 ( new TYPE_2 ( ) , VAR_2 . METHOD_2 ( VAR_1 ) , TYPE_3 . METHOD_3 ( VAR_2 , INT_1 , 0 , VAR_1 ) ) ; boolean VAR_4 = true ; for ( int source : VAR_5 ) { if ( ( VAR_6 ) == source ) { VAR_4 = false ; break ; } } if ( ! VAR_4 ) VAR_3 = TYPE_3 . METHOD_1 ( VAR_2 , VAR_1 ) ; return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( isEmpty ( ) ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 = VAR_2 ; ( VAR_4 ) ++ ; return ; } VAR_2 . METHOD_3 ( new TYPE_2 < TYPE_1 > ( VAR_1 , VAR_2 , null ) ) ; VAR_2 = VAR_2 . METHOD_4 ( ) ; ( VAR_4 ) ++ ; return ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( isEmpty ( ) ) { VAR_2 = new TYPE_2 < TYPE_1 > ( VAR_1 , null , null ) ; VAR_3 = VAR_2 ; ( VAR_4 ) ++ ; return ; } VAR_2 . METHOD_3 ( new TYPE_2 < TYPE_1 > ( VAR_1 , VAR_2 , null ) ) ; VAR_2 = VAR_2 . METHOD_4 ( ) ; ( VAR_4 ) ++ ; return ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , int x , int y , int VAR_2 , TYPE_2 VAR_3 ) { id = VAR_4 ; VAR_5 = new TYPE_3 ( x , y , 0 ) ; VAR_6 = new TYPE_4 ( VAR_2 , VAR_3 ) ; return new TYPE_1 ( id , name , VAR_1 , VAR_5 , VAR_6 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , int x , int y , int VAR_2 , TYPE_2 VAR_3 ) { id = VAR_4 ; VAR_5 = new TYPE_3 ( x , y ) ; VAR_6 = new TYPE_4 ( VAR_2 , VAR_3 ) ; return new TYPE_1 ( id , name , VAR_1 , VAR_5 , VAR_6 ) ; }\n"}
{"problem": "private boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String date ) { if ( ( ( STRING_1 . equals ( VAR_1 ) ) || ( STRING_1 . equals ( VAR_2 ) ) ) || ( STRING_1 . equals ( date ) ) ) { TYPE_1 . METHOD_2 ( getActivity ( ) , STRING_2 , VAR_3 ) . show ( ) ; return false ; } return true ; }\n", "fixed": "private boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String date ) { if ( ( STRING_1 . equals ( VAR_2 ) ) || ( STRING_1 . equals ( date ) ) ) { TYPE_1 . METHOD_2 ( getActivity ( ) , STRING_2 , VAR_3 ) . show ( ) ; return false ; } return true ; }\n"}
{"fixCommitSHA1": "35ae055794f875bdf3f4e54605ee1ca4daac028a", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     public PortableFactory createFactory() {\n         return new PortableFactory() {\n            final ConstructorFunction<Integer, Portable>[] constructors = new ConstructorFunction[EVICT_ALL + 1];\n             {\n                 constructors[GET] = new ConstructorFunction<Integer, Portable>() {", "fixed": "     public PortableFactory createFactory() {\n         return new PortableFactory() {\n            final ConstructorFunction<Integer, Portable>[] constructors = new ConstructorFunction[IS_EMPTY + 1];\n             {\n                 constructors[GET] = new ConstructorFunction<Integer, Portable>() {", "sourceBeforeFix": "EVICT_ALL + 1", "sourceAfterFix": "IS_EMPTY + 1"}
{"problem": "public java.lang.String toString ( ) { java.lang.String VAR_1 = STRING_1 + ( super . toString ( ) ) ; if ( ( text ) != null ) { VAR_1 = ( ( VAR_1 + STRING_2 ) + ( text ) ) + STRING_3 ; } VAR_1 = VAR_1 + STRING_4 ; return VAR_1 ; }\n", "fixed": "public java.lang.String toString ( ) { java.lang.String VAR_1 = STRING_1 + ( type ) ; if ( ( text ) != null ) { VAR_1 = ( ( VAR_1 + STRING_2 ) + ( text ) ) + STRING_3 ; } VAR_1 = VAR_1 + STRING_4 ; return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; VAR_1 = null ; VAR_2 = null ; VAR_3 = null ; VAR_4 = null ; VAR_5 = null ; VAR_6 = null ; VAR_7 = null ; VAR_8 = null ; VAR_9 = null ; VAR_10 = null ; VAR_11 = null ; VAR_12 = null ; VAR_13 = null ; VAR_14 = null ; VAR_15 = null ; VAR_16 = null ; VAR_17 = null ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; VAR_1 = null ; VAR_2 = null ; VAR_3 = null ; VAR_4 = null ; VAR_5 = null ; VAR_6 = null ; VAR_7 = null ; VAR_8 = null ; VAR_9 = null ; VAR_10 = null ; VAR_11 = null ; VAR_12 = null ; VAR_13 = null ; VAR_14 = null ; VAR_15 = null ; VAR_17 = null ; }\n"}
{"fixCommitSHA1": "4a0d68c50bc8ef11d94538567ce3c8f7deb5d4ab", "projectName": "netty.netty", "bugType": "Change Binary Operator", "problem": "     }\n     private void runTaskQueue() {\n        while (acquiredChannelCount <= maxConnections) {\n             AcquireTask task = pendingAcquireQueue.poll();\n             if (task == null) {\n                 break;", "fixed": "     }\n     private void runTaskQueue() {\n        while (acquiredChannelCount < maxConnections) {\n             AcquireTask task = pendingAcquireQueue.poll();\n             if (task == null) {\n                 break;", "sourceBeforeFix": "acquiredChannelCount <= maxConnections", "sourceAfterFix": "acquiredChannelCount < maxConnections"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( getClass ( ) . METHOD_3 ( ) . getName ( ) , STRING_1 , INT_1 ) ; super . METHOD_1 ( ) ; className = getClass ( ) . METHOD_4 ( ) ; VAR_1 = new TYPE_1 ( STRING_2 , className ) ; VAR_2 = STRING_3 ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( getClass ( ) . METHOD_3 ( ) . getName ( ) , STRING_1 , INT_1 ) ; super . METHOD_1 ( ) ; className = getClass ( ) . METHOD_4 ( ) ; VAR_1 = new TYPE_1 ( STRING_2 , className ) ; VAR_2 = STRING_3 ; getActivity ( ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) throws TYPE_1 { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 VAR_4 = VAR_5 . METHOD_3 ( VAR_6 ) ; VAR_4 . METHOD_4 ( 1 , VAR_1 ) ; VAR_4 . METHOD_4 ( INT_1 , VAR_2 ) ; TYPE_5 VAR_7 = VAR_4 . METHOD_5 ( ) ; VAR_7 . METHOD_6 ( ) ; VAR_4 . METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) throws TYPE_1 { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 VAR_4 = VAR_3 . METHOD_3 ( VAR_6 ) ; VAR_4 . METHOD_4 ( 1 , VAR_1 ) ; VAR_4 . METHOD_4 ( INT_1 , VAR_2 ) ; TYPE_5 VAR_7 = VAR_4 . METHOD_5 ( ) ; VAR_7 . METHOD_6 ( ) ; VAR_4 . METHOD_6 ( ) ; }\n"}
{"problem": "public java.lang.String execute ( TYPE_1 message ) { TYPE_2 VAR_1 = message . METHOD_1 ( STRING_1 ) ; if ( VAR_1 == null ) { return STRING_2 ; } try { return METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( message ) ) ) ; } catch ( java.io.IOException VAR_2 ) { return VAR_2 . METHOD_5 ( ) ; } }\n", "fixed": "public java.lang.String execute ( TYPE_1 message ) { TYPE_2 VAR_1 = message . METHOD_1 ( STRING_1 ) ; if ( VAR_1 == null ) { return STRING_2 ; } try { return METHOD_2 ( VAR_1 , new java.lang.String ( TYPE_4 . METHOD_4 ( message ) ) ) ; } catch ( java.io.IOException VAR_2 ) { return VAR_2 . METHOD_5 ( ) ; } }\n"}
{"problem": "protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( true ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_3 ( ) ; } VAR_2 . METHOD_4 ( ) ; VAR_4 = new TYPE_1 ( VAR_5 , getActivity ( ) , VAR_6 , VAR_7 , VAR_8 ) ; VAR_9 . start ( ) ; VAR_10 . METHOD_5 ( ) ; }\n", "fixed": "protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( true ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_3 ( ) ; } VAR_2 . METHOD_4 ( ) ; VAR_4 = new TYPE_1 ( VAR_5 , getActivity ( ) , VAR_6 , VAR_7 , VAR_8 ) ; VAR_9 . start ( ) ; if ( ( VAR_10 ) != null ) { VAR_10 . METHOD_5 ( ) ; } }\n"}
{"problem": "private static java.util.regex.Matcher METHOD_1 ( TYPE_1 pattern , java.lang.String VAR_1 ) { if ( VAR_1 != null ) { java.util.regex.Matcher VAR_2 = pattern . METHOD_2 ( VAR_1 ) ; while ( ( VAR_2 . METHOD_3 ( ) ) && ( ( VAR_2 . METHOD_4 ( ) ) > 0 ) ) { return VAR_2 ; } } return null ; }\n", "fixed": "private static java.util.regex.Matcher METHOD_1 ( TYPE_1 pattern , java.lang.String VAR_1 ) { if ( VAR_1 != null ) { java.util.regex.Matcher VAR_2 = pattern . METHOD_2 ( VAR_1 ) ; if ( ( VAR_2 . METHOD_3 ( ) ) && ( ( VAR_2 . METHOD_4 ( ) ) > 0 ) ) { return VAR_2 ; } } return null ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 out ) throws java.io.IOException { if ( ( this ) == null ) return ; out . METHOD_2 ( VAR_1 ) ; out . METHOD_3 ( size ( ) ) ; out . METHOD_4 ( VAR_2 ) ; for ( TYPE_2 f : VAR_3 ) { f . METHOD_1 ( out ) ; } out . METHOD_2 ( CHAR_1 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 out ) throws java.io.IOException { out . METHOD_2 ( VAR_1 ) ; out . METHOD_3 ( size ( ) ) ; out . METHOD_4 ( VAR_2 ) ; for ( TYPE_2 f : VAR_3 ) { f . METHOD_1 ( out ) ; } out . METHOD_2 ( CHAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( float VAR_1 ) { VAR_2 . METHOD_2 ( 0 , 0 , 0 , 1 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_5 . step ( VAR_6 , VAR_7 , VAR_8 ) ; VAR_9 . METHOD_4 ( VAR_10 ) ; VAR_11 . METHOD_1 ( VAR_9 , VAR_12 , true ) ; VAR_9 . METHOD_5 ( ) ; VAR_13 . METHOD_1 ( VAR_9 , VAR_1 ) ; VAR_9 . end ( ) ; VAR_14 . METHOD_1 ( VAR_5 , VAR_10 ) ; TYPE_1 . METHOD_6 ( new TYPE_2 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( float VAR_1 ) { VAR_2 . METHOD_2 ( 0 , 0 , 0 , 1 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_5 . step ( VAR_6 , VAR_7 , VAR_8 ) ; VAR_9 . METHOD_4 ( VAR_10 ) ; VAR_9 . METHOD_5 ( ) ; VAR_11 . METHOD_1 ( VAR_9 , VAR_12 , true ) ; VAR_13 . METHOD_1 ( VAR_9 , VAR_1 ) ; VAR_9 . end ( ) ; VAR_14 . METHOD_1 ( VAR_5 , VAR_10 ) ; TYPE_1 . METHOD_6 ( new TYPE_2 ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) . METHOD_3 ( ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) ; VAR_4 = new TYPE_3 ( VAR_1 , VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ) ; METHOD_6 ( VAR_4 ) ; android.view.View view = getView ( ) ; if ( view != null ) { view . METHOD_7 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) . METHOD_3 ( ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) ; VAR_4 = new TYPE_3 ( VAR_1 , VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ) ; METHOD_6 ( VAR_4 ) ; }\n"}
{"problem": "private static java.lang.String METHOD_1 ( java.lang.String str ) { for ( java.lang.String VAR_1 : VAR_2 ) { str = str . replaceAll ( VAR_1 , STRING_1 ) ; } for ( java.lang.String [ ] VAR_3 : VAR_4 ) { str = str . replaceAll ( VAR_3 [ 0 ] , VAR_3 [ 1 ] ) ; } return ( STRING_2 + str ) + STRING_3 ; }\n", "fixed": "private static java.lang.String METHOD_1 ( java.lang.String str ) { for ( java.lang.String VAR_1 : VAR_2 ) { str = str . replaceAll ( VAR_1 , STRING_1 ) ; } for ( java.lang.String [ ] VAR_3 : VAR_4 ) { str = str . replaceAll ( VAR_3 [ 0 ] , VAR_3 [ 1 ] ) ; } return str ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_2 ) { for ( int i = 0 ; i < ( VAR_3 . size ( ) ) ; i ++ ) { if ( ( VAR_3 . get ( i ) . position ) == VAR_4 ) { VAR_5 . METHOD_2 ( i ) ; break ; } } VAR_6 . METHOD_3 ( VAR_7 ) ; } else { VAR_5 . METHOD_4 ( VAR_4 ) ; VAR_6 . METHOD_3 ( VAR_8 ) ; } VAR_2 = ! ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_2 ) { for ( int i = 0 ; i < ( VAR_3 . size ( ) ) ; i ++ ) { if ( ( VAR_3 . get ( i ) . position ) == VAR_4 ) { VAR_5 . METHOD_2 ( i ) ; break ; } } VAR_6 . METHOD_3 ( VAR_7 ) ; } else { VAR_2 = true ; VAR_5 . METHOD_4 ( VAR_4 ) ; VAR_6 . METHOD_3 ( VAR_8 ) ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAhcEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AhcEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAhcEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AhcEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( this ) ; TYPE_4 VAR_4 = TYPE_4 . METHOD_4 ( this ) ; VAR_3 . METHOD_5 ( VAR_4 ) ; new TYPE_5 ( this , VAR_4 , VAR_3 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_2 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( this ) ; TYPE_4 VAR_4 = TYPE_4 . METHOD_4 ( this ) ; VAR_3 . METHOD_5 ( VAR_4 ) ; new TYPE_5 ( this , VAR_4 , VAR_3 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"problem": "public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { final TYPE_5 VAR_4 = VAR_5 . METHOD_2 ( VAR_3 . METHOD_3 ( ) . getName ( ) ) ; VAR_6 . METHOD_1 ( VAR_4 , VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) ) ; return new TYPE_1 ( VAR_7 . METHOD_6 ( STRING_1 , null , VAR_1 ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { final TYPE_5 VAR_4 = VAR_5 . METHOD_2 ( VAR_3 . METHOD_3 ( ) . getName ( ) ) ; return new TYPE_1 ( VAR_7 . METHOD_6 ( STRING_1 , null , VAR_1 ) ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = STRING_1 ; int VAR_3 = INT_1 ; java.lang.String type = STRING_2 ; java.lang.String VAR_4 = java.lang.String.format ( ( STRING_3 + ( ( STRING_4 + STRING_5 ) + STRING_6 ) ) , VAR_2 , VAR_3 , VAR_1 , type ) ; return TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_4 ) , VAR_5 class ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String type ) { java.lang.String VAR_2 = STRING_1 ; int VAR_3 = INT_1 ; java.lang.String VAR_4 = java.lang.String.format ( ( STRING_3 + ( ( STRING_4 + STRING_5 ) + STRING_6 ) ) , VAR_2 , VAR_3 , VAR_1 , type ) ; return TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_4 ) , VAR_5 class ) ; }\n"}
{"problem": "public java.lang.String toString ( ) { java.lang.String VAR_1 = ( METHOD_1 ( ) ? STRING_1 : STRING_2 ) + ( value . toString ( ) ) ; return ( ( ( ( getClass ( ) . getName ( ) ) + STRING_3 ) + ( java.lang.Integer.toString ( METHOD_2 ( ) ) ) ) + STRING_3 ) + VAR_1 ; }\n", "fixed": "public java.lang.String toString ( ) { java.lang.String str = ( METHOD_1 ( ) ? STRING_1 : STRING_2 ) + ( value . toString ( ) ) ; return ( ( ( ( getClass ( ) . getName ( ) ) + STRING_3 ) + ( java.lang.Integer.toString ( METHOD_2 ( ) ) ) ) + STRING_3 ) + str ; }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) throws TYPE_1 { METHOD_2 ( VAR_1 , VAR_2 , STRING_1 , true ) ; TYPE_2 VAR_5 = VAR_6 . METHOD_3 ( STRING_2 ) ; VAR_5 . METHOD_4 ( 1 , VAR_1 ) ; VAR_5 . METHOD_4 ( INT_1 , VAR_3 ) ; VAR_5 . METHOD_4 ( INT_2 , VAR_4 ) ; VAR_5 . execute ( ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , java.lang.String text ) throws TYPE_1 { METHOD_2 ( VAR_1 , VAR_2 , text , true ) ; TYPE_2 VAR_5 = VAR_6 . METHOD_3 ( STRING_2 ) ; VAR_5 . METHOD_4 ( 1 , VAR_1 ) ; VAR_5 . METHOD_4 ( INT_1 , VAR_3 ) ; VAR_5 . METHOD_4 ( INT_2 , VAR_4 ) ; VAR_5 . execute ( ) ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String url , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) throws java.io.IOException { java.lang.String VAR_5 = ( VAR_1 . isEmpty ( ) ) ? STRING_1 : ( VAR_1 + STRING_2 ) + VAR_2 ; return TYPE_2 . METHOD_1 ( new java.net.URL ( url ) , VAR_5 , VAR_3 , VAR_4 ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String url , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) throws java.io.IOException { java.lang.String VAR_5 = ( ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) ? STRING_1 : ( VAR_1 + STRING_2 ) + VAR_2 ; return TYPE_2 . METHOD_1 ( new java.net.URL ( url ) , VAR_5 , VAR_3 , VAR_4 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_6 = TYPE_5 . METHOD_3 ( VAR_4 ) ; TYPE_6 . getContext ( ) . METHOD_4 ( new TYPE_7 ( VAR_1 , null , java.util.Arrays.asList ( new TYPE_8 ( STRING_1 ) ) ) ) ; VAR_7 . METHOD_5 ( ( ( TYPE_9 ) ( VAR_3 . METHOD_6 ( ) ) ) , ( ( TYPE_10 ) ( VAR_3 . METHOD_7 ( ) ) ) , VAR_6 ) ; return null ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > VAR_2 , TYPE_2 VAR_3 ) { TYPE_4 VAR_6 = TYPE_5 . METHOD_3 ( VAR_1 ) ; TYPE_6 . getContext ( ) . METHOD_4 ( new TYPE_7 ( VAR_1 , null , java.util.Arrays.asList ( new TYPE_8 ( STRING_1 ) ) ) ) ; VAR_7 . METHOD_5 ( ( ( TYPE_9 ) ( VAR_3 . METHOD_6 ( ) ) ) , ( ( TYPE_10 ) ( VAR_3 . METHOD_7 ( ) ) ) , VAR_6 ) ; return null ; }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( ) { java.util.Collection < TYPE_1 > VAR_1 = TYPE_1 . METHOD_2 ( ( ( VAR_2 ) != null ? VAR_2 . trim ( ) : null ) ) ; TYPE_1 VAR_3 = ( VAR_1 . isEmpty ( ) ) ? null : VAR_1 . iterator ( ) . METHOD_3 ( ) ; if ( VAR_3 == null ) VAR_3 = VAR_4 ; return VAR_3 ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( ) { java.util.Collection < TYPE_1 > VAR_1 = TYPE_1 . METHOD_2 ( ( ( VAR_2 ) != null ? VAR_2 . trim ( ) : null ) ) ; TYPE_1 VAR_3 = ( VAR_1 . isEmpty ( ) ) ? null : VAR_1 . iterator ( ) . METHOD_3 ( ) ; return VAR_3 ; }\n"}
{"problem": "public java.lang.String toString ( ) { java.lang.String VAR_1 = name ; VAR_1 = VAR_1 + STRING_1 ; VAR_1 = ( ( VAR_1 + \"\\t\" ) + ( text ) ) + \"\\n\" ; VAR_1 = ( VAR_1 + \"\\t\" ) + STRING_2 ; for ( TYPE_1 VAR_2 : this . VAR_3 ) { VAR_1 += ( STRING_3 + VAR_2 ) + \"\\n\" ; } return VAR_1 ; }\n", "fixed": "public java.lang.String toString ( ) { java.lang.String VAR_1 = name ; VAR_1 = VAR_1 + STRING_1 ; VAR_1 = ( ( VAR_1 + \"\\t\" ) + ( text . trim ( ) ) ) + \"\\n\" ; VAR_1 = ( VAR_1 + \"\\t\" ) + STRING_2 ; for ( TYPE_1 VAR_2 : this . VAR_3 ) { VAR_1 += ( STRING_3 + VAR_2 ) + \"\\n\" ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "27212f298ec3ee50204e5169f61ba48702346450", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "       \"Redeclared variable: {0}\");\n   static final DiagnosticType AMBIGUOUS_FUNCTION_DECL =\n    DiagnosticType.disabled(\"AMBIGUOUS_FUNCTION_DECL\",\n         \"Ambiguous use of a named function: {0}.\");\n   static final DiagnosticType EARLY_REFERENCE_ERROR = DiagnosticType.error(", "fixed": "       \"Redeclared variable: {0}\");\n   static final DiagnosticType AMBIGUOUS_FUNCTION_DECL =\n    DiagnosticType.error(\"AMBIGUOUS_FUNCTION_DECL\",\n         \"Ambiguous use of a named function: {0}.\");\n   static final DiagnosticType EARLY_REFERENCE_ERROR = DiagnosticType.error(", "sourceBeforeFix": "DiagnosticType.disabled(\"AMBIGUOUS_FUNCTION_DECL\",\"Ambiguous use of a named function: {0}.\")", "sourceAfterFix": "DiagnosticType.error(\"AMBIGUOUS_FUNCTION_DECL\",\"Ambiguous use of a named function: {0}.\")"}
{"problem": "public TYPE_1 METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) throws TYPE_3 { try { TYPE_4 VAR_2 = TYPE_5 . METHOD_2 ( ) . METHOD_3 ( VAR_3 , VAR_4 class ) ; return TYPE_6 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) , VAR_5 ) ; } catch ( java.lang.Exception VAR_6 ) { TYPE_7 . error ( STRING_1 , VAR_6 ) ; throw new TYPE_3 ( VAR_6 , VAR_7 ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) throws TYPE_3 { try { TYPE_4 VAR_2 = TYPE_5 . METHOD_2 ( ) . METHOD_3 ( VAR_3 , VAR_4 class ) ; return VAR_2 . METHOD_5 ( VAR_1 ) ; } catch ( java.lang.Exception VAR_6 ) { TYPE_7 . error ( STRING_1 , VAR_6 ) ; throw new TYPE_3 ( VAR_6 , VAR_7 ) ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedEhcacheEndpointBuilder\n             extends\n                 AdvancedEhcacheEndpointConsumerBuilder, AdvancedEhcacheEndpointProducerBuilder {\n         default EhcacheEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedEhcacheEndpointBuilder\n             extends\n                 AdvancedEhcacheEndpointConsumerBuilder, AdvancedEhcacheEndpointProducerBuilder {\n         default EhcacheEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( ( key . METHOD_2 ( ) ) & ( VAR_1 ) ) != 0 ) { key . METHOD_3 ( ( ( key . METHOD_3 ( ) ) & ( ~ ( VAR_2 ) ) ) ) ; this . VAR_3 . METHOD_4 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( ( key . METHOD_2 ( ) ) & ( VAR_1 ) ) != 0 ) { key . METHOD_3 ( ( ( key . METHOD_3 ( ) ) & ( ~ ( VAR_2 ) ) ) ) ; this . VAR_3 . METHOD_4 ( ) ; return ; } super . METHOD_1 ( ) ; }\n"}
{"fixCommitSHA1": "f86baa60b64682aeaeafe54055df03f4d3f8c5d1", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         meta.setContentMD5(new String(Base64.encode(mHash.digest())));\n       }\n       meta.setContentLength(mFile.length());\n      meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM);", "fixed": "         meta.setContentMD5(new String(Base64.encode(mHash.digest())));\n       }\n       meta.setContentLength(mFile.length());\n      meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM);", "sourceBeforeFix": "meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)", "sourceAfterFix": "meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)"}
{"problem": "public static final long METHOD_1 ( java.io.InputStream VAR_1 ) throws java.io.IOException { int [ ] VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , INT_1 ) ; return TYPE_2 . METHOD_3 ( VAR_2 [ 0 ] , VAR_2 [ 1 ] , VAR_2 [ INT_2 ] , VAR_2 [ INT_3 ] ) ; }\n", "fixed": "public static final long METHOD_1 ( java.io.InputStream VAR_1 ) throws java.io.IOException { int [ ] VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , INT_1 ) ; return TYPE_2 . METHOD_3 ( VAR_2 [ INT_3 ] , VAR_2 [ INT_2 ] , VAR_2 [ 1 ] , VAR_2 [ 0 ] ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { TYPE_2 . METHOD_2 ( ( ) - > { TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_1 ) ) ; VAR_3 . METHOD_3 ( ) . update ( VAR_3 ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; } ) ; } }\n", "fixed": "public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { TYPE_2 . METHOD_2 ( ( ) - > { VAR_1 . METHOD_3 ( ) . update ( VAR_1 ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; } ) ; } } }\n"}
{"problem": "public static void METHOD_1 ( java.lang.String ... VAR_1 ) throws java.io.IOException { for ( java.lang.String path : VAR_1 ) { java.io.File f = new java.io.File ( path ) ; if ( ( f != null ) && ( f . METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( new java.io.File ( path ) ) ; } } }\n", "fixed": "public static void METHOD_1 ( java.lang.String ... VAR_1 ) throws java.io.IOException { for ( java.lang.String path : VAR_1 ) { java.io.File f = new java.io.File ( path ) ; if ( ( f != null ) && ( f . METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( f ) ; } } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MailEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMailEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface MailEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMailEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a204cc6e5f02a11438c0fc399f4c9a12f7888ea5", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "         try {\n            future1.get(1, TimeUnit.SECONDS);\n         }\n         catch (TimeoutException e) {", "fixed": "         try {\n            future1.get(2, TimeUnit.SECONDS);\n         }\n         catch (TimeoutException e) {", "sourceBeforeFix": "future1.get(1,TimeUnit.SECONDS)", "sourceAfterFix": "future1.get(2,TimeUnit.SECONDS)"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; if ( ( VAR_3 . METHOD_2 ( this ) ) != null ) { VAR_2 . show ( METHOD_3 ( ) , STRING_1 ) ; METHOD_4 ( VAR_4 ) ; } else { TYPE_2 . METHOD_5 ( this , STRING_2 , VAR_5 ) . show ( ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; if ( ( VAR_3 . METHOD_2 ( this ) ) != null ) { VAR_2 . show ( METHOD_3 ( ) , STRING_1 ) ; } else { TYPE_2 . METHOD_5 ( this , STRING_2 , VAR_5 ) . show ( ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 ) { VAR_1 = METHOD_2 ( VAR_1 ) ; java.lang.String [ ] VAR_2 = VAR_1 . split ( STRING_1 ) ; if ( ( VAR_2 . length ) == INT_1 ) { METHOD_3 ( VAR_2 [ 0 ] . trim ( ) ) ; METHOD_4 ( VAR_2 [ 1 ] . trim ( ) ) ; } else { METHOD_3 ( VAR_2 [ 0 ] . trim ( ) ) ; } }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 ) { VAR_1 = METHOD_2 ( VAR_1 ) ; java.lang.String [ ] VAR_2 = VAR_1 . split ( STRING_1 ) ; if ( ( VAR_2 . length ) == INT_1 ) { METHOD_3 ( VAR_2 [ 0 ] . trim ( ) ) ; METHOD_4 ( VAR_2 [ 1 ] . trim ( ) ) ; } else { if ( ! ( VAR_2 [ 0 ] . trim ( ) . isEmpty ( ) ) ) { METHOD_3 ( VAR_2 [ 0 ] . trim ( ) ) ; } } }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; if ( VAR_3 != null ) { METHOD_4 ( VAR_3 ) ; METHOD_5 ( ) . METHOD_6 ( true ) ; METHOD_5 ( ) . METHOD_7 ( METHOD_8 ( ) . getText ( VAR_5 ) ) ; } METHOD_8 ( ) . getText ( VAR_6 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; if ( VAR_3 != null ) { METHOD_4 ( VAR_3 ) ; METHOD_5 ( ) . METHOD_6 ( true ) ; METHOD_5 ( ) . METHOD_7 ( METHOD_8 ( ) . getText ( VAR_5 ) ) ; } }\n"}
{"fixCommitSHA1": "0f8c0e4ff5f80aab6ab653c9aaa5a97812d2ec7c", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     private TransactionManager transactionManager;\n    @Resource(name = \"java:jboss/mail\")\n     private Context context;\n    @Resource(name = \"java:/TransactionManager\")\n     public void setTransactionManager(TransactionManager transactionManager) {\n         this.transactionManager = transactionManager;\n     }", "fixed": "     private TransactionManager transactionManager;\n    @Resource(lookup = \"java:jboss/mail\")\n     private Context context;\n    @Resource(lookup = \"java:/TransactionManager\")\n     public void setTransactionManager(TransactionManager transactionManager) {\n         this.transactionManager = transactionManager;\n     }", "sourceBeforeFix": "name=\"java:/TransactionManager\"", "sourceAfterFix": "lookup=\"java:/TransactionManager\""}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . equals ( VAR_1 ) ) ) { java.lang.String pattern = STRING_1 ; if ( ( VAR_1 == null ) || ( ! ( VAR_1 . METHOD_2 ( pattern ) ) ) ) { throw new TYPE_2 ( VAR_1 ) ; } } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . equals ( VAR_1 ) ) ) { java.lang.String pattern = STRING_1 ; if ( ( VAR_1 == null ) || ( ! ( VAR_1 . METHOD_2 ( pattern ) ) ) ) { throw new TYPE_2 ( VAR_1 ) ; } } }\n"}
{"problem": "private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 ; VAR_2 = VAR_1 . replaceAll ( STRING_1 , STRING_2 ) ; VAR_2 = VAR_2 . replaceAll ( \"\\t\" , STRING_2 ) ; VAR_2 = VAR_2 . replaceAll ( STRING_3 , STRING_2 ) ; VAR_2 = VAR_2 . trim ( ) ; return VAR_2 ; }\n", "fixed": "private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = STRING_2 ; VAR_2 = VAR_1 . replaceAll ( STRING_1 , STRING_2 ) ; VAR_2 = VAR_2 . replaceAll ( \"\\t\" , STRING_2 ) ; VAR_2 = VAR_2 . replaceAll ( STRING_3 , STRING_2 ) ; return VAR_2 . trim ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int status , int VAR_2 ) { if ( VAR_2 == ( VAR_3 ) ) { METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_4 . METHOD_4 ( ) ; } else if ( VAR_2 == ( VAR_5 ) ) { METHOD_5 ( ) ; VAR_4 . METHOD_6 ( ) ; VAR_6 . METHOD_7 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int status , int VAR_2 ) { if ( VAR_2 == ( VAR_3 ) ) { METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_4 . METHOD_4 ( ) ; } else if ( VAR_2 == ( VAR_5 ) ) { METHOD_5 ( ) ; VAR_4 . METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( boolean VAR_1 ) { java.lang.String VAR_2 ; if ( VAR_1 ) { VAR_2 = ( ( ( ( ( STRING_1 + ( this . VAR_3 ) ) + STRING_2 ) + ( this . VAR_4 ) ) + STRING_3 ) + ( this . VAR_5 ) ) + STRING_4 ; } else { VAR_2 = ( ( ( STRING_1 + ( this . VAR_3 ) ) + STRING_2 ) + ( this . VAR_4 ) ) + STRING_5 ; } return VAR_2 ; }\n", "fixed": "public java.lang.String METHOD_1 ( boolean VAR_1 ) { java.lang.String VAR_2 ; if ( VAR_1 ) { VAR_2 = ( ( ( ( ( STRING_1 + ( ( this . VAR_3 ) + 1 ) ) + STRING_2 ) + ( this . VAR_4 ) ) + STRING_3 ) + ( this . VAR_5 ) ) + STRING_4 ; } else { VAR_2 = ( ( ( STRING_1 + ( ( this . VAR_3 ) + 1 ) ) + STRING_2 ) + ( this . VAR_4 ) ) + STRING_5 ; } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) instanceof TYPE_2 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; TYPE_3 VAR_3 = VAR_2 . METHOD_2 ( ) ; int VAR_4 = VAR_3 . METHOD_3 ( STRING_1 ) ; if ( VAR_4 != ( - 0 ) ) { VAR_4 -- ; VAR_3 . METHOD_4 ( STRING_1 , VAR_4 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) instanceof TYPE_2 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; TYPE_3 VAR_3 = VAR_2 . METHOD_2 ( ) ; int VAR_4 = VAR_3 . METHOD_3 ( STRING_1 ) ; if ( VAR_4 > 0 ) { VAR_4 -- ; VAR_3 . METHOD_4 ( STRING_1 , VAR_4 ) ; } } }\n"}
{"problem": "private java.util.LinkedList < TYPE_1 > METHOD_1 ( java.util.LinkedList < TYPE_1 > VAR_1 ) { VAR_1 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_1 . size ( ) ) > 1 ) { java.lang.System.err.println ( STRING_1 ) ; TYPE_1 VAR_2 = VAR_1 . remove ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; } java.lang.System.err.println ( VAR_1 . size ( ) ) ; return VAR_1 ; }\n", "fixed": "private java.util.LinkedList < TYPE_1 > METHOD_1 ( java.util.LinkedList < TYPE_1 > VAR_1 ) { VAR_1 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_1 . size ( ) ) > 1 ) { java.lang.System.err.println ( STRING_1 ) ; TYPE_1 VAR_2 = VAR_1 . remove ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "0a1836b22646342828e96b1d0e7dad9c8bfdabfe", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         bar.expectedMessageCount(0);\n         MockEndpoint start = getMockEndpoint(\"mock:start\");\nstart.expectedMessageCount(6);\n         template.sendBody(\"activemq:queue:foo\", \"Hello World\");", "fixed": "         bar.expectedMessageCount(0);\n         MockEndpoint start = getMockEndpoint(\"mock:start\");\nstart.expectedMessageCount(7);\n         template.sendBody(\"activemq:queue:foo\", \"Hello World\");", "sourceBeforeFix": "start.expectedMessageCount(6)", "sourceAfterFix": "start.expectedMessageCount(7)"}
{"problem": "public void METHOD_1 ( android.view.View view ) { java.lang.Boolean VAR_1 = ( VAR_2 ) != null ; if ( ! VAR_1 ) { METHOD_2 ( ) ; VAR_2 = new TYPE_1 ( this ) ; VAR_2 . start ( ) ; VAR_3 . start ( ) ; } else { METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; } ( ( android.widget.Button ) ( METHOD_5 ( VAR_4 ) ) ) . setText ( ( VAR_1 ? VAR_5 : VAR_6 ) ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { java.lang.Boolean VAR_1 = ( VAR_2 ) != null ; if ( ! VAR_1 ) { METHOD_2 ( ) ; VAR_2 = new TYPE_1 ( this ) ; VAR_2 . start ( ) ; VAR_3 . start ( ) ; VAR_1 = true ; } else { METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; VAR_1 = false ; } ( ( android.widget.Button ) ( METHOD_5 ( VAR_4 ) ) ) . setText ( ( VAR_1 ? VAR_5 : VAR_6 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { this . VAR_1 = new TYPE_1 ( ) ; TYPE_2 . METHOD_2 ( this . VAR_2 ) . METHOD_3 ( this . VAR_3 ) . METHOD_4 ( ( ( java.util.Map < java.lang.String , java.lang.Object > ) ( TYPE_3 . METHOD_5 ( ) ) ) ) ; TYPE_2 . METHOD_2 ( true ) . METHOD_3 ( this . VAR_2 ) . METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { this . VAR_1 = new TYPE_1 ( ) ; METHOD_2 ( this . VAR_2 ) . METHOD_3 ( this . VAR_3 ) . METHOD_4 ( ( ( java.util.Map < java.lang.String , java.lang.Object > ) ( TYPE_3 . METHOD_5 ( ) ) ) ) ; METHOD_2 ( true ) . METHOD_3 ( this . VAR_2 ) . METHOD_6 ( ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 ) { switch ( VAR_1 . METHOD_2 ( ) ) { case VAR_3 : return VAR_1 . METHOD_3 ( ) ; case VAR_4 : return VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; case VAR_5 : return VAR_1 . METHOD_3 ( ) . METHOD_5 ( VAR_2 ) ; default : return VAR_6 ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 ) { switch ( VAR_1 . METHOD_2 ( ) ) { case VAR_3 : return VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; case VAR_4 : return VAR_1 . METHOD_3 ( ) ; case VAR_5 : return VAR_2 . METHOD_5 ( VAR_1 . METHOD_3 ( ) ) ; default : return VAR_6 ; } }\n"}
{"fixCommitSHA1": "ca90ef4529782f76edc2fa3882e509e7d52f26f7", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     protected static final String WSDL_URL_PROP = \"wsdlURL=classpath:person.wsdl\";\nprotected static final String SERVICE_ADDRESS = \"http:\nprotected static String FROM_URI = \"cxf:\n         + PORT_NAME_PROP + \"&\" + SERVICE_NAME_PROP + \"&\" + WSDL_URL_PROP + \"&dataFormat=\" + DataFormat.PAYLOAD;\nprotected static String DETAILS = \"<detail><UnknownPersonFault xmlns=\\\"http:\n         + \"<personId></personId></UnknownPersonFault></detail>\";\n     @Override\n     protected RouteBuilder createRouteBuilder() {", "fixed": "     protected static final String WSDL_URL_PROP = \"wsdlURL=classpath:person.wsdl\";\nprotected static final String SERVICE_ADDRESS = \"http:\nprotected static final String FROM_URI = \"cxf:\n         + PORT_NAME_PROP + \"&\" + SERVICE_NAME_PROP + \"&\" + WSDL_URL_PROP + \"&dataFormat=\" + DataFormat.PAYLOAD;\nprotected static final String DETAILS = \"<detail><UnknownPersonFault xmlns=\\\"http:\n         + \"<personId></personId></UnknownPersonFault></detail>\";\n     @Override\n     protected RouteBuilder createRouteBuilder() {", "sourceBeforeFix": "12", "sourceAfterFix": "28"}
{"problem": "public void METHOD_1 ( ) { VAR_1 [ VAR_2 ] . VAR_3 = VAR_4 . get ( STRING_1 ) ; VAR_1 [ VAR_5 ] . VAR_3 = VAR_4 . get ( STRING_2 ) ; VAR_1 [ VAR_6 ] . VAR_3 = VAR_4 . get ( STRING_3 ) ; VAR_1 [ VAR_7 ] . VAR_3 = VAR_4 . get ( STRING_4 ) ; VAR_8 = new TYPE_1 ( VAR_1 , new TYPE_2 ( 0.0 , 0.0 , 0.0 ) , new TYPE_3 ( 1.0 , 0.0 , 0.0 ) , VAR_9 ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 [ VAR_7 ] . VAR_3 = VAR_4 . get ( STRING_4 ) ; VAR_1 [ VAR_6 ] . VAR_3 = VAR_4 . get ( STRING_3 ) ; VAR_1 [ VAR_2 ] . VAR_3 = VAR_4 . get ( STRING_1 ) ; VAR_1 [ VAR_5 ] . VAR_3 = VAR_4 . get ( STRING_2 ) ; VAR_8 = new TYPE_1 ( VAR_1 , new TYPE_2 ( 0.0 , 0.0 , 0.0 ) , new TYPE_3 ( 1.0 , 0.0 , 0.0 ) , VAR_9 ) ; }\n"}
{"problem": "public synchronized void METHOD_1 ( java.lang.String VAR_1 , java.lang.Integer VAR_2 ) { METHOD_2 ( VAR_3 ) ; VAR_4 . add ( new TYPE_1 ( VAR_1 , ( ( TYPE_2 . METHOD_3 ( ) ) + ( VAR_2 == null ? ( VAR_5 ) + ( VAR_6 ) : VAR_2 ) ) ) ) ; }\n", "fixed": "protected synchronized void METHOD_1 ( java.lang.String VAR_1 , java.lang.Integer VAR_2 ) { METHOD_2 ( VAR_3 ) ; VAR_4 . add ( new TYPE_1 ( VAR_1 , ( ( TYPE_2 . METHOD_3 ( ) ) + ( VAR_2 == null ? ( VAR_5 ) + ( VAR_6 ) : VAR_2 ) ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 out ) throws java.lang.Exception { out . METHOD_2 ( STRING_1 , this . getClass ( ) . METHOD_3 ( ) ) ; out . METHOD_4 ( ( STRING_2 + ( VAR_1 . length ) ) ) ; for ( TYPE_2 VAR_2 : VAR_1 ) { out . METHOD_4 ( ( STRING_3 + ( VAR_2 . size ( ) ) ) ) ; for ( TYPE_3 VAR_3 : VAR_2 ) { VAR_3 . METHOD_1 ( out ) ; } out . METHOD_4 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 out ) throws java.lang.Exception { out . METHOD_2 ( STRING_1 , this . getClass ( ) . METHOD_3 ( ) ) ; out . METHOD_4 ( ( STRING_2 + ( VAR_1 . length ) ) ) ; for ( TYPE_2 VAR_2 : VAR_1 ) { out . METHOD_4 ( ( STRING_3 + ( VAR_2 . size ( ) ) ) ) ; for ( TYPE_3 VAR_3 : VAR_2 ) { VAR_3 . METHOD_1 ( out ) ; out . METHOD_4 ( ) ; } out . METHOD_4 ( ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String query , int k ) throws java.io.IOException , TYPE_1 { VAR_1 = new TYPE_2 ( VAR_2 , VAR_3 , query ) ; VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_4 = VAR_1 . METHOD_3 ( k ) ; TYPE_4 [ ] VAR_5 = VAR_6 ; return METHOD_4 ( VAR_5 ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String query , int k ) throws java.io.IOException , TYPE_1 { VAR_1 = new TYPE_2 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( query ) ; TYPE_3 VAR_4 = VAR_1 . METHOD_3 ( k ) ; TYPE_4 [ ] VAR_5 = VAR_6 ; return METHOD_4 ( VAR_5 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { this . VAR_1 = true ; if ( this . VAR_2 ) { this . VAR_3 = true ; } if ( this . VAR_4 ) { this . VAR_5 . METHOD_2 ( ) ; } this . METHOD_3 ( true ) ; }\n", "fixed": "public void METHOD_1 ( ) { this . VAR_1 = true ; if ( this . VAR_2 ) { ( this . VAR_3 ) -- ; } if ( this . VAR_4 ) { this . VAR_5 . METHOD_2 ( ) ; } this . METHOD_3 ( true ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "fixed": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "sourceBeforeFix": "id=15806", "sourceAfterFix": "id=10806"}
{"fixCommitSHA1": "65f815b3aaa4ca2aff782b35c1fa0d318f10387c", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String, U> e : handlers.entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.debug(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     handler = e.getValue();\n                    logger.debug(\"Mapped {} to {}\", t, e.getValue());\n                     break;\n                 }\n             }", "fixed": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String, U> e : handlers.entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.trace(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     handler = e.getValue();\n                    logger.trace(\"Mapped {} to {}\", t, e.getValue());\n                     break;\n                 }\n             }", "sourceBeforeFix": "logger.debug(\"Trying to map {} to {}\",t,path)", "sourceAfterFix": "logger.trace(\"Trying to map {} to {}\",t,path)"}
{"problem": "public java.util.HashMap < java.lang.String , java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.HashMap < java.lang.String , java.lang.String > VAR_2 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) . toString ( ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; java.util.List < TYPE_2 > VAR_4 = VAR_1 . METHOD_4 ( ) ; for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_3 = VAR_5 . toString ( ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; } return VAR_2 ; }\n", "fixed": "public java.util.HashMap < java.lang.String , java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.HashMap < java.lang.String , java.lang.String > VAR_2 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) . toString ( ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; java.util.List < TYPE_2 > VAR_4 = VAR_1 . METHOD_4 ( ) ; if ( VAR_4 != null ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_3 = VAR_5 . toString ( ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; } } return VAR_2 ; }\n"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param format a <code>String</code> value\n      * @throws ConversionException if unable to create Pattern object.\n      */\n    public void setOnCommentFormat(String format) {\n         onRegexp = Utils.createPattern(format);\n     }", "fixed": "      * @param format a <code>String</code> value\n      * @throws ConversionException if unable to create Pattern object.\n      */\n    public final void setOnCommentFormat(String format) {\n         onRegexp = Utils.createPattern(format);\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 p = new TYPE_1 ( STRING_1 , VAR_1 . getId ( ) , INT_1 , STRING_2 , STRING_3 ) ; TYPE_2 . METHOD_2 ( p ) ; TYPE_3 . assertNotNull ( STRING_4 , TYPE_2 . query ( VAR_2 class , p . getId ( ) ) ) ; TYPE_4 . assertEquals ( STRING_4 , 1 , TYPE_2 . METHOD_3 ( VAR_3 class ) ) ; TYPE_2 . delete ( p ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 p = new TYPE_1 ( STRING_1 , VAR_1 . getId ( ) , INT_1 , STRING_2 , STRING_3 ) ; TYPE_2 . METHOD_2 ( p ) ; TYPE_3 . assertNotNull ( STRING_4 , TYPE_2 . query ( VAR_2 class , p . getId ( ) ) ) ; TYPE_4 . assertEquals ( STRING_4 , 1 , TYPE_2 . METHOD_3 ( VAR_2 class ) . size ( ) ) ; TYPE_2 . delete ( p ) ; }\n"}
{"problem": "public boolean METHOD_1 ( ) { final TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( VAR_3 ) ) ) ; final TYPE_2 VAR_4 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( ( VAR_6 ) >= ( VAR_7 ) ) { if ( VAR_1 . METHOD_4 ( ) ) return false ; } return ( VAR_4 . METHOD_5 ( ) ) == ( VAR_8 ) ; }\n", "fixed": "public boolean METHOD_1 ( ) { final TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( VAR_3 ) ) ) ; final TYPE_2 VAR_4 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( VAR_1 . METHOD_4 ( ) ) return false ; return ( VAR_4 . METHOD_5 ( ) ) == ( VAR_8 ) ; }\n"}
{"problem": "protected void METHOD_1 ( java.lang.String result ) { if ( ( result != null ) && ( ( result . length ( ) ) > 0 ) ) { VAR_1 = result ; METHOD_2 ( ) ; VAR_2 = true ; VAR_3 = ( ( TYPE_1 ) ( VAR_4 . METHOD_3 ( ) ) ) ; VAR_5 = 0 ; METHOD_4 ( ) ; METHOD_5 ( ) ; android.content.Intent VAR_6 = new android.content.Intent ( ) ; VAR_6 . METHOD_6 ( STRING_1 , result ) ; METHOD_7 ( VAR_7 , VAR_6 ) ; } VAR_8 . METHOD_8 ( ) ; }\n", "fixed": "protected void METHOD_1 ( java.lang.String result ) { if ( ( result != null ) && ( ( result . length ( ) ) > 0 ) ) { VAR_1 = result ; METHOD_2 ( ) ; VAR_2 = true ; VAR_3 = ( ( TYPE_1 ) ( VAR_4 . METHOD_3 ( ) ) ) ; VAR_5 = 0 ; METHOD_4 ( ) ; android.content.Intent VAR_6 = new android.content.Intent ( ) ; VAR_6 . METHOD_6 ( STRING_1 , result ) ; METHOD_7 ( VAR_7 , VAR_6 ) ; } METHOD_5 ( ) ; VAR_8 . METHOD_8 ( ) ; }\n"}
{"fixCommitSHA1": "127108d1005124b8d33651569780b08fa2b5d5b8", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     private Properties overrideProperties;\n     @Metadata(defaultValue = \"\" + SYSTEM_PROPERTIES_MODE_OVERRIDE, enums = \"0,1,2\")\n     private int systemPropertiesMode = SYSTEM_PROPERTIES_MODE_OVERRIDE;\n    @Metadata(defaultValue = \"\" + SYSTEM_PROPERTIES_MODE_FALLBACK, enums = \"0,1,2\")\n     private int environmentVariableMode = ENVIRONMENT_VARIABLES_MODE_OVERRIDE;\n     public PropertiesComponent() {", "fixed": "     private Properties overrideProperties;\n     @Metadata(defaultValue = \"\" + SYSTEM_PROPERTIES_MODE_OVERRIDE, enums = \"0,1,2\")\n     private int systemPropertiesMode = SYSTEM_PROPERTIES_MODE_OVERRIDE;\n    @Metadata(defaultValue = \"\" + ENVIRONMENT_VARIABLES_MODE_OVERRIDE, enums = \"0,1,2\")\n     private int environmentVariableMode = ENVIRONMENT_VARIABLES_MODE_OVERRIDE;\n     public PropertiesComponent() {", "sourceBeforeFix": "\"\" + SYSTEM_PROPERTIES_MODE_FALLBACK", "sourceAfterFix": "\"\" + ENVIRONMENT_VARIABLES_MODE_OVERRIDE"}
{"problem": "private static java.lang.String METHOD_1 ( TYPE_1 t , boolean VAR_1 ) { java.util.List < TYPE_2 > list = TYPE_3 . METHOD_2 ( t , VAR_1 ) ; java.lang.StringBuffer VAR_2 = new java.lang.StringBuffer ( INT_1 ) ; TYPE_2 VAR_3 = list . remove ( 0 ) ; VAR_2 . append ( VAR_3 . METHOD_3 ( ) ) ; for ( TYPE_2 VAR_4 : list ) { VAR_2 . append ( STRING_1 ) ; VAR_2 . append ( VAR_4 . METHOD_3 ( ) ) ; } return VAR_2 . toString ( ) ; }\n", "fixed": "private static java.lang.String METHOD_1 ( TYPE_1 t ) { java.util.List < TYPE_2 > list = TYPE_3 . METHOD_2 ( t ) ; java.lang.StringBuilder VAR_2 = new java.lang.StringBuilder ( INT_1 ) ; TYPE_2 VAR_3 = list . remove ( 0 ) ; VAR_2 . append ( VAR_3 . METHOD_3 ( ) ) ; for ( TYPE_2 VAR_4 : list ) { VAR_2 . append ( STRING_1 ) ; VAR_2 . append ( VAR_4 . METHOD_3 ( ) ) ; } return VAR_2 . toString ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; int VAR_2 = VAR_3 . METHOD_2 ( ) . size ( ) ; VAR_3 . delete ( VAR_1 ) ; TYPE_1 < TYPE_2 > VAR_4 = VAR_3 . METHOD_3 ( VAR_1 ) ; int VAR_5 = VAR_3 . METHOD_2 ( ) . size ( ) ; TYPE_3 . METHOD_4 ( STRING_2 , VAR_4 . METHOD_5 ( ) ) ; TYPE_3 . assertEquals ( STRING_3 , ( VAR_2 - 1 ) , VAR_5 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; int VAR_2 = VAR_3 . METHOD_2 ( ) . size ( ) ; VAR_3 . delete ( VAR_1 ) ; TYPE_1 < TYPE_2 > VAR_4 = VAR_3 . METHOD_3 ( VAR_1 ) ; int VAR_5 = VAR_3 . METHOD_2 ( ) . size ( ) ; METHOD_4 ( STRING_2 , VAR_4 . METHOD_5 ( ) ) ; assertEquals ( STRING_3 , ( VAR_2 - 1 ) , VAR_5 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String name , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_2 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { java.lang.String [ ] VAR_7 = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 } ; return new TYPE_3 ( VAR_1 , name , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String name , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_2 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { java.lang.String [ ] VAR_7 = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ; return new TYPE_3 ( VAR_1 , name , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(639)", "sourceAfterFix": "new StringBuilder(638)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; for ( int index = 0 ; index <= ( VAR_2 ) ; index ++ ) { VAR_1 . METHOD_1 ( ( ) - > { java.util.Date VAR_3 = new java.util.Date ( ) ; VAR_4 . METHOD_2 ( ( ( ( ( STRING_1 + ( VAR_3 . toString ( ) ) ) + STRING_2 ) + STRING_3 ) + ( TYPE_3 . format ( VAR_3 ) ) ) ) ; } ) ; } VAR_1 . start ( ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; for ( int index = 0 ; index < ( VAR_2 ) ; index ++ ) { VAR_1 . METHOD_1 ( ( ) - > { java.util.Date VAR_3 = new java.util.Date ( ) ; VAR_4 . METHOD_2 ( ( ( ( ( STRING_1 + ( VAR_3 . toString ( ) ) ) + STRING_2 ) + STRING_3 ) + ( TYPE_3 . format ( VAR_3 ) ) ) ) ; } ) ; } VAR_1 . start ( ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DirectVmEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDirectVmEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DirectVmEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDirectVmEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ; super . METHOD_1 ( VAR_1 ) ; METHOD_5 ( VAR_2 ) ; TYPE_3 . init ( this ) ; if ( VAR_1 == null ) { METHOD_6 ( ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ; super . METHOD_1 ( VAR_1 ) ; METHOD_5 ( VAR_2 ) ; if ( VAR_1 == null ) { TYPE_3 . init ( this ) ; METHOD_6 ( ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( final java.lang.String message , final java.lang.Object ... params ) { TYPE_2 result = VAR_1 . get ( ) ; if ( result == null ) { result = new TYPE_2 ( ) ; VAR_1 . set ( result ) ; } else { result . set ( message , params ) ; } return result ; }\n", "fixed": "public TYPE_1 METHOD_1 ( final java.lang.String message , final java.lang.Object ... params ) { TYPE_2 result = VAR_1 . get ( ) ; if ( result == null ) { result = new TYPE_2 ( ) ; VAR_1 . set ( result ) ; } result . set ( message , params ) ; return result ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"problem": "public void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) { java.lang.String VAR_1 = null ; while ( VAR_1 == null ) VAR_1 = TYPE_2 . METHOD_5 ( ) ; TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_6 ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_7 ( ) . METHOD_8 ( VAR_1 ) ) ; java.lang.System.out.println ( STRING_1 ) ; } else { java.lang.System.out.println ( STRING_2 ) ; } java.lang.System.out.println ( STRING_3 ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) { java.lang.System.out.println ( STRING_2 ) ; return ; } java.lang.String VAR_1 = null ; while ( VAR_1 == null ) VAR_1 = TYPE_2 . METHOD_5 ( ) ; TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_6 ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_7 ( ) . METHOD_8 ( VAR_1 ) ) ; java.lang.System.out.println ( STRING_1 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 ) ) ; TYPE_4 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; TYPE_5 VAR_5 = VAR_3 . METHOD_3 ( ) ; try { return METHOD_4 ( VAR_2 , VAR_5 ) ; } finally { VAR_5 . METHOD_5 ( ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 ) ) ; TYPE_4 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; TYPE_5 VAR_5 = VAR_3 . METHOD_3 ( ) ; try { return METHOD_4 ( VAR_2 , VAR_5 , false ) ; } finally { VAR_5 . METHOD_5 ( ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( android.view.View VAR_1 , boolean VAR_2 , long VAR_3 ) { if ( VAR_1 == null ) { return false ; } int key = ( ( int ) ( VAR_1 . METHOD_2 ( ) ) ) ; if ( ( VAR_4 . METHOD_3 ( key ) ) && ( METHOD_4 ( VAR_1 ) ) ) { VAR_4 . remove ( key ) ; METHOD_5 ( VAR_1 , VAR_2 , VAR_3 ) ; return true ; } return false ; }\n", "fixed": "private boolean METHOD_1 ( android.view.View VAR_1 , boolean VAR_2 , long VAR_3 ) { if ( VAR_1 == null ) { return false ; } int key = ( ( int ) ( VAR_1 . METHOD_2 ( ) ) ) ; if ( ( VAR_4 . METHOD_3 ( key ) ) && ( METHOD_4 ( VAR_1 ) ) ) { VAR_4 . remove ( key ) ; METHOD_5 ( VAR_1 , VAR_2 , VAR_3 ) ; return true ; } return false ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.Object message ) throws java.lang.Exception { switch ( message . getClass ( ) . METHOD_2 ( ) ) { case STRING_1 : VAR_1 . error ( STRING_2 ) ; break ; case STRING_3 : TYPE_1 VAR_2 = VAR_3 class . METHOD_3 ( message ) ; METHOD_4 ( VAR_2 ) ; break ; default : METHOD_5 ( message ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.Object message ) throws java.lang.Exception { switch ( message . getClass ( ) . METHOD_2 ( ) ) { case STRING_3 : TYPE_1 VAR_2 = VAR_3 class . METHOD_3 ( message ) ; METHOD_4 ( VAR_2 ) ; break ; default : METHOD_5 ( message ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return ( ) - > new TYPE_3 ( ) { java.util.Iterator VAR_2 = VAR_1 . iterator ( ) ; public boolean METHOD_2 ( ) { return VAR_2 . METHOD_2 ( ) ; } public java.lang.Object METHOD_3 ( ) { return VAR_2 . METHOD_3 ( ) ; } } ; }\n", "fixed": "public TYPE_3 iterator ( ) { return new TYPE_3 ( ) { java.util.Iterator VAR_2 = VAR_1 . iterator ( ) ; public boolean METHOD_2 ( ) { return VAR_2 . METHOD_2 ( ) ; } public java.lang.Object METHOD_3 ( ) { return VAR_2 . METHOD_3 ( ) ; } } ; }\n"}
{"fixCommitSHA1": "5cc0714840bf8f7797a118e4bac5dabdd20e3f67", "projectName": "apache.hbase", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  public void setClusterStatus(ClusterStatus st) {\n     super.setClusterStatus(st);\n     updateRegionLoad();\n     for(CostFromRegionLoadFunction cost : regionLoadFunctions) {", "fixed": "   }\n   @Override\n  public synchronized void setClusterStatus(ClusterStatus st) {\n     super.setClusterStatus(st);\n     updateRegionLoad();\n     for(CostFromRegionLoadFunction cost : regionLoadFunctions) {", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return SourceMap.Format.V3;\n   }\n  private String getEncodedFileName() {\n     if (File.separatorChar == '\\\\') {\n       return \"c:/myfile.js\";\n     } else {", "fixed": "     return SourceMap.Format.V3;\n   }\n  private static String getEncodedFileName() {\n     if (File.separatorChar == '\\\\') {\n       return \"c:/myfile.js\";\n     } else {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( new java.io.File ( METHOD_3 ( VAR_2 ) ) ) ; remove ( toString ( VAR_3 ) ) ; for ( java.lang.Object VAR_4 : METHOD_4 ( ) ) { VAR_1 . set ( toString ( VAR_4 ) , get ( toString ( VAR_4 ) ) ) ; } VAR_1 . set ( STRING_1 , null ) ; try { VAR_1 . METHOD_1 ( new java.io.File ( METHOD_3 ( VAR_2 ) ) ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_5 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( new java.io.File ( METHOD_3 ( VAR_2 ) ) ) ; for ( java.lang.Object VAR_4 : METHOD_4 ( ) ) { VAR_1 . set ( toString ( VAR_4 ) , get ( toString ( VAR_4 ) ) ) ; } VAR_1 . set ( STRING_1 , null ) ; try { VAR_1 . METHOD_1 ( new java.io.File ( METHOD_3 ( VAR_2 ) ) ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_5 . METHOD_5 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( long number , int VAR_1 ) { if ( ! ( VAR_2 ) ) throw new TYPE_1 ( STRING_1 ) ; if ( VAR_1 < 1 ) throw new TYPE_2 ( STRING_2 ) ; if ( VAR_1 > INT_1 ) throw new TYPE_2 ( STRING_3 ) ; long a ; for ( int i = VAR_1 ; i >= 0 ; i -- ) { a = METHOD_2 ( i ) ; METHOD_3 ( ( ( number & a ) == a ) ) ; } }\n", "fixed": "public void METHOD_1 ( long number , int VAR_1 ) { if ( ! ( VAR_2 ) ) throw new TYPE_1 ( STRING_1 ) ; if ( VAR_1 < 1 ) throw new TYPE_2 ( STRING_2 ) ; if ( VAR_1 > INT_1 ) throw new TYPE_2 ( STRING_3 ) ; long a ; for ( int i = VAR_1 - 1 ; i >= 0 ; i -- ) { a = METHOD_2 ( i ) ; METHOD_3 ( ( ( number & a ) == a ) ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.io.File file ) { java.lang.String VAR_1 = STRING_1 ; try { try ( java.io.FileInputStream VAR_2 = new java.io.FileInputStream ( file ) ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ; } } catch ( TYPE_2 VAR_3 ) { java.util.logging.Logger.getLogger ( VAR_4 class . getName ( ) ) . METHOD_3 ( VAR_5 , null , VAR_3 ) ; } catch ( java.io.IOException VAR_3 ) { java.util.logging.Logger.getLogger ( VAR_4 class . getName ( ) ) . METHOD_3 ( VAR_5 , null , VAR_3 ) ; } return VAR_1 ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String filePath ) { java.lang.String VAR_1 = STRING_1 ; try { try ( java.io.FileInputStream VAR_2 = new java.io.FileInputStream ( new java.io.File ( filePath ) ) ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ; } } catch ( TYPE_2 VAR_3 ) { java.util.logging.Logger.getLogger ( VAR_4 class . getName ( ) ) . METHOD_3 ( VAR_5 , null , VAR_3 ) ; } catch ( java.io.IOException VAR_3 ) { java.util.logging.Logger.getLogger ( VAR_4 class . getName ( ) ) . METHOD_3 ( VAR_5 , null , VAR_3 ) ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( VAR_1 . get ( i ) ) { VAR_1 . put ( i , false ) ; METHOD_2 ( i ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { for ( int i = 0 ; i <= ( VAR_1 . size ( ) ) ; i ++ ) { if ( VAR_1 . get ( i ) ) { VAR_1 . put ( i , false ) ; METHOD_2 ( i ) ; } } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 p , double VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_3 VAR_4 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_5 = METHOD_4 ( p , VAR_2 ) ; if ( VAR_1 != 0.0 ) { VAR_6 = - 1.0 ; } METHOD_5 ( VAR_5 , VAR_1 , ( - 1 ) , VAR_3 , VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 p , double VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_3 VAR_4 ) { METHOD_3 ( ) ; TYPE_1 VAR_5 = METHOD_4 ( p , VAR_2 ) ; if ( VAR_1 != 0.0 ) { VAR_6 = - 1.0 ; } METHOD_5 ( VAR_5 , VAR_1 , ( - 1 ) , VAR_3 , VAR_4 ) ; }\n"}
{"fixCommitSHA1": "ef11886bf2190370a0f3fd287616763826239c48", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n\t\tps.createRelationship(rel);\r\n \t}\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r", "fixed": " \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n\t\tps.saveRelationship(rel);\r\n \t}\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r", "sourceBeforeFix": "Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))", "sourceAfterFix": "Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( ) { public void execute ( ) { VAR_2 . setText ( VAR_3 . getString ( STRING_1 ) ) ; } } ) ; }\n", "fixed": "public void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( java.lang.Throwable t ) { } TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( ) { public void execute ( ) { VAR_2 . setText ( VAR_3 . getString ( STRING_1 ) ) ; } } ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 ) ; VAR_4 = new TYPE_2 ( new TYPE_3 ( this , null , null , 1 ) ) ; METHOD_4 ( ) ; VAR_5 . METHOD_5 ( ) ; TYPE_4 VAR_6 = ( ( TYPE_4 ) ( METHOD_6 ( ) . METHOD_7 ( VAR_7 ) ) ) ; VAR_6 . METHOD_8 ( this ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 ) ; VAR_4 = new TYPE_2 ( new TYPE_3 ( this , null , null , 1 ) ) ; TYPE_4 VAR_6 = ( ( TYPE_4 ) ( METHOD_6 ( ) . METHOD_7 ( VAR_7 ) ) ) ; VAR_6 . METHOD_8 ( this ) ; METHOD_4 ( ) ; VAR_5 . METHOD_5 ( ) ; }\n"}
{"problem": "private int METHOD_1 ( TYPE_1 VAR_1 , int x , int y ) { int result = VAR_2 . METHOD_2 ( VAR_1 , x , y ) ; if ( result <= ( VAR_3 ) ) { if ( ( VAR_4 ) != null ) { METHOD_3 ( VAR_4 , VAR_5 , VAR_6 ) ; } VAR_4 = VAR_1 ; VAR_5 = x ; VAR_6 = y ; METHOD_3 ( VAR_4 , VAR_5 , VAR_6 ) ; } else { VAR_2 . METHOD_4 ( ) ; } return result ; }\n", "fixed": "public int METHOD_1 ( TYPE_1 VAR_1 , int x , int y ) { int result = VAR_2 . METHOD_2 ( VAR_1 , x , y ) ; if ( result <= ( VAR_3 ) ) { if ( ( VAR_4 ) != null ) { METHOD_3 ( VAR_4 , VAR_5 , VAR_6 ) ; } VAR_4 = VAR_1 ; VAR_5 = x ; VAR_6 = y ; METHOD_3 ( VAR_4 , VAR_5 , VAR_6 ) ; } else { VAR_2 . METHOD_4 ( ) ; } return result ; }\n"}
{"problem": "public boolean METHOD_1 ( int i , int j ) { if ( ( i <= 0 ) || ( i > ( n ) ) ) { throw new TYPE_1 ( STRING_1 ) ; } if ( ( j <= 0 ) || ( j > ( n ) ) ) { throw new TYPE_1 ( STRING_2 ) ; } if ( ( VAR_1 [ ( i - 1 ) ] [ ( j - 1 ) ] ) == 1 ) { return true ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( int i , int j ) { if ( ( i <= 0 ) || ( i > ( n ) ) ) { throw new TYPE_1 ( STRING_1 ) ; } if ( ( j <= 0 ) || ( j > ( n ) ) ) { throw new TYPE_1 ( STRING_2 ) ; } return ( VAR_1 [ ( i - 1 ) ] [ ( j - 1 ) ] ) == ( open ) ; }\n"}
{"fixCommitSHA1": "f5309e8856186f5105e0bfcefda1273330f36ac0", "projectName": "jersey.jersey", "bugType": "Same Function Less Args", "problem": " \t\tClientConfig jerseyConfig = new ClientConfig();\n \t\tClient client = ClientBuilder.newClient(jerseyConfig);\n\t\tclient = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_PASS, 1));\n \t\tWebTarget resource = client.target(getBaseUri()).path(\"auth-digest\");", "fixed": " \t\tClientConfig jerseyConfig = new ClientConfig();\n \t\tClient client = ClientBuilder.newClient(jerseyConfig);\n\t\tclient = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_PASS));\n \t\tWebTarget resource = client.target(getBaseUri()).path(\"auth-digest\");", "sourceBeforeFix": "new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS,1)", "sourceAfterFix": "new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS)"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( METHOD_2 ( ) ) { METHOD_3 ( VAR_2 ) ; } else { METHOD_3 ( VAR_3 ) ; return ; } VAR_4 = ( ( TYPE_2 ) ( METHOD_4 ( VAR_5 ) ) ) ; TYPE_3 VAR_6 = new TYPE_4 ( this , VAR_7 ) ; VAR_4 . METHOD_5 ( true ) ; VAR_4 . METHOD_6 ( VAR_6 ) ; TYPE_5 VAR_8 = new TYPE_5 ( ) ; VAR_8 . execute ( VAR_9 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ! ( METHOD_2 ( ) ) ) { METHOD_3 ( VAR_3 ) ; return ; } METHOD_3 ( VAR_2 ) ; VAR_4 = ( ( TYPE_2 ) ( METHOD_4 ( VAR_5 ) ) ) ; TYPE_3 VAR_6 = new TYPE_4 ( this , VAR_7 ) ; VAR_4 . METHOD_5 ( true ) ; VAR_4 . METHOD_6 ( VAR_6 ) ; TYPE_5 VAR_8 = new TYPE_5 ( ) ; VAR_8 . execute ( VAR_9 ) ; }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( VAR_1 ) ; TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_1 . METHOD_1 ( VAR_3 ) ; TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( STRING_3 , STRING_2 ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( STRING_3 , STRING_2 ) ; TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_1 . METHOD_1 ( VAR_3 ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . getContext ( ) . METHOD_2 ( ) ; java.lang.String VAR_3 = VAR_2 . getName ( ) ; TYPE_4 VAR_4 = VAR_5 . METHOD_3 ( VAR_3 ) ; java.lang.String name = STRING_1 ; if ( VAR_4 != null ) { name = VAR_4 . getName ( ) ; } VAR_1 . METHOD_4 ( \"name\" , name ) ; return STRING_2 ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_3 = this . METHOD_2 ( ) . getName ( ) ; TYPE_4 VAR_4 = VAR_5 . METHOD_3 ( VAR_3 ) ; java.lang.String name = STRING_1 ; if ( VAR_4 != null ) { name = VAR_4 . getName ( ) ; } VAR_1 . METHOD_4 ( \"name\" , name ) ; return STRING_2 ; }\n"}
{"problem": "private boolean METHOD_1 ( char c , char VAR_1 ) { return ( ( TYPE_1 . METHOD_2 ( c ) ) && ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) || ( ( TYPE_1 . METHOD_4 ( c ) ) && ( TYPE_1 . METHOD_4 ( VAR_1 ) ) ) ; }\n", "fixed": "private boolean METHOD_1 ( char c , char VAR_1 ) { return ( ( TYPE_1 . METHOD_2 ( c ) ) && ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) || ( ( ! ( TYPE_1 . METHOD_4 ( c ) ) ) && ( TYPE_1 . METHOD_4 ( VAR_1 ) ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedServiceEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default ServiceEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedServiceEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default ServiceEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public java.lang.String METHOD_1 ( ) { VAR_1 . info ( STRING_1 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_2 . METHOD_3 ( VAR_4 class ) ) ) ; java.lang.String message = ( ( java.lang.String ) ( VAR_3 . METHOD_4 ( VAR_5 ) ) ) ; if ( message == null ) { message = STRING_2 + ( VAR_5 ) ; } else { VAR_1 . info ( ( STRING_3 + message ) ) ; } return message ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { VAR_1 . info ( STRING_1 ) ; java.lang.String message = ( ( java.lang.String ) ( VAR_3 . METHOD_4 ( VAR_5 ) ) ) ; if ( message == null ) { message = STRING_2 + ( VAR_5 ) ; } else { VAR_1 . info ( ( STRING_3 + message ) ) ; } return message ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 p ; try { if ( TYPE_3 . METHOD_2 ( STRING_1 ) . contains ( STRING_2 ) ) { p = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ( ( VAR_2 ) + STRING_3 ) ) ; } else { p = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ( ( VAR_2 ) + STRING_3 ) ) ; } } catch ( java.io.IOException VAR_3 ) { java.util.logging.Logger.getLogger ( VAR_4 class . getName ( ) ) . METHOD_5 ( VAR_5 , null , VAR_3 ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 p ; try { p = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ( ( VAR_2 ) + STRING_3 ) ) ; } catch ( java.io.IOException VAR_3 ) { java.util.logging.Logger.getLogger ( VAR_4 class . getName ( ) ) . METHOD_5 ( VAR_5 , null , VAR_3 ) ; } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) , ( TYPE_1 VAR_4 ) - > VAR_4 . METHOD_4 ( ) . getId ( ) . equals ( VAR_1 . METHOD_4 ( ) . getId ( ) ) ) ; if ( VAR_2 == null ) { VAR_3 . METHOD_3 ( ) . add ( VAR_1 ) ; } else { VAR_2 . METHOD_5 ( ( ( VAR_2 . METHOD_6 ( ) ) + ( VAR_1 . METHOD_6 ( ) ) ) ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) , ( TYPE_1 VAR_4 ) - > VAR_1 . METHOD_4 ( ) . getId ( ) . equals ( VAR_1 . METHOD_4 ( ) . getId ( ) ) ) ; if ( VAR_2 == null ) { VAR_3 . METHOD_3 ( ) . add ( VAR_1 ) ; } else { VAR_2 . METHOD_5 ( ( ( VAR_2 . METHOD_6 ( ) ) + ( VAR_1 . METHOD_6 ( ) ) ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( float VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( VAR_2 ) != null ) for ( TYPE_1 c : VAR_2 ) { if ( ( c != null ) && ( c instanceof TYPE_2 ) ) ( ( TYPE_2 ) ( c ) ) . METHOD_1 ( VAR_1 ) ; } }\n", "fixed": "public void METHOD_1 ( float VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( VAR_2 ) != null ) { synchronized ( VAR_2 ) { for ( TYPE_1 c : VAR_2 ) { if ( ( c != null ) && ( c instanceof TYPE_2 ) ) ( ( TYPE_2 ) ( c ) ) . METHOD_1 ( VAR_1 ) ; } } } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_2 = this . VAR_4 . METHOD_1 ( VAR_1 ) ; VAR_3 . put ( VAR_1 , VAR_2 ) ; } return VAR_2 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_2 = this . VAR_4 . METHOD_1 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; } } return VAR_2 ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String title , java.lang.String url ) { VAR_1 = this . METHOD_2 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . put ( VAR_3 , title ) ; VAR_2 . put ( VAR_4 , url ) ; long result = VAR_1 . METHOD_3 ( VAR_5 , null , VAR_2 ) ; if ( result == ( - 1 ) ) { return false ; } else { return true ; } }\n", "fixed": "public boolean METHOD_1 ( java.lang.String title , java.lang.String url ) { VAR_1 = this . METHOD_2 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . put ( VAR_3 , title ) ; VAR_2 . put ( VAR_4 , url ) ; long result = VAR_1 . METHOD_3 ( VAR_5 , null , VAR_2 ) ; return result != ( - 1 ) ; }\n"}
{"problem": "protected void METHOD_1 ( android.content.Intent intent ) { TYPE_1 VAR_1 = intent . METHOD_2 ( ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_3 ( this ) ; java.lang.String VAR_3 = VAR_2 . METHOD_4 ( intent ) ; if ( ! ( VAR_1 . isEmpty ( ) ) ) { switch ( VAR_3 ) { case VAR_4 : { TYPE_3 . METHOD_5 ( VAR_1 . getString ( STRING_1 ) , VAR_1 . getString ( STRING_2 ) , this ) ; } } } TYPE_4 . METHOD_6 ( intent ) ; }\n", "fixed": "protected void METHOD_1 ( android.content.Intent intent ) { TYPE_1 VAR_1 = intent . METHOD_2 ( ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_3 ( this ) ; java.lang.String VAR_3 = VAR_2 . METHOD_4 ( intent ) ; if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { switch ( VAR_3 ) { case VAR_4 : { TYPE_3 . METHOD_5 ( VAR_1 . getString ( STRING_1 ) , VAR_1 . getString ( STRING_2 ) , this ) ; } } } TYPE_4 . METHOD_6 ( intent ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { VAR_1 . METHOD_2 ( STRING_1 ) ; float VAR_2 = METHOD_3 ( VAR_1 ) ; TYPE_4 VAR_3 = METHOD_4 ( VAR_1 ) ; double VAR_4 = VAR_3 . METHOD_5 ( VAR_2 , TYPE_5 . METHOD_6 ( VAR_1 ) ) ; java.lang.String text = java.lang.String . METHOD_7 ( VAR_4 ) ; response . METHOD_8 ( STRING_2 ) ; response . METHOD_2 ( STRING_3 ) ; response . METHOD_9 ( ) . METHOD_10 ( text ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { VAR_1 . METHOD_2 ( STRING_3 ) ; float VAR_2 = METHOD_3 ( VAR_1 ) ; TYPE_4 VAR_3 = METHOD_4 ( VAR_1 ) ; double VAR_4 = VAR_3 . METHOD_5 ( VAR_2 , TYPE_5 . METHOD_6 ( VAR_1 ) ) ; java.lang.String text = java.lang.String . METHOD_7 ( VAR_4 ) ; response . METHOD_8 ( STRING_2 ) ; response . METHOD_2 ( STRING_3 ) ; response . METHOD_9 ( ) . METHOD_10 ( text ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.System.out.println ( ( STRING_1 + ( VAR_1 . getId ( ) ) ) ) ; this . VAR_1 . METHOD_2 ( ) ; this . VAR_1 . METHOD_3 ( VAR_2 ) . METHOD_2 ( ) ; this . VAR_1 . METHOD_3 ( VAR_3 ) . METHOD_4 ( new TYPE_1 ( STRING_2 ) ) ; this . VAR_1 . METHOD_3 ( VAR_4 ) . METHOD_4 ( new TYPE_1 ( STRING_2 ) ) ; VAR_1 . METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) ; this . VAR_1 . METHOD_3 ( VAR_2 ) . METHOD_2 ( ) ; this . VAR_1 . METHOD_3 ( VAR_3 ) . METHOD_4 ( new TYPE_1 ( STRING_2 ) ) ; this . VAR_1 . METHOD_3 ( VAR_4 ) . METHOD_4 ( new TYPE_1 ( STRING_2 ) ) ; VAR_1 . METHOD_5 ( ) ; }\n"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "             for (CodegenProperty var : cm.vars) {\n                String jsDocType = getJSDocTypeWithBraces(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n                 if (Boolean.TRUE.equals(var.required)) {", "fixed": "             for (CodegenProperty var : cm.vars) {\n                String jsDocType = getJSDocType(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n                 if (Boolean.TRUE.equals(var.required)) {", "sourceBeforeFix": "getJSDocTypeWithBraces(operation)", "sourceAfterFix": "getJSDocType(operation)"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; for ( java.lang.String key : VAR_1 . METHOD_2 ( ) ) { java.lang.String [ ] VAR_3 = key . split ( STRING_1 , INT_1 ) ; java.lang.String value = VAR_1 . METHOD_3 ( VAR_3 [ 0 ] ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_3 [ 0 ] , VAR_3 [ 1 ] , value ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; } return VAR_2 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; for ( java.lang.String key : VAR_1 . METHOD_2 ( ) ) { java.lang.String [ ] VAR_3 = key . split ( STRING_1 , INT_1 ) ; java.lang.String value = VAR_1 . METHOD_3 ( key ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_3 [ 0 ] , VAR_3 [ 1 ] , value ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; } return VAR_2 ; }\n"}
{"fixCommitSHA1": "d0c64987a9cb694631a3e5bc77b669f49f93a30e", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": "if (itemMap.getSoapValueParser() == null) {\n             NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());\n            if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n                 value = nlDataOutNodes.item(0).getTextContent();\n             } else {", "fixed": "if (itemMap.getSoapValueParser() == null) {\n             NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());\n            if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                 value = nlDataOutNodes.item(0).getTextContent();\n             } else {", "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0", "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; VAR_3 . info ( STRING_1 ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_3 . error ( ( ( ( VAR_4 . METHOD_3 ( ) ) + \"\\n\" ) + VAR_4 ) ) ; java.lang.System.out.println ( ( ( ( VAR_4 . METHOD_3 ( ) ) + \"\\n\" ) + VAR_4 ) ) ; } VAR_3 . info ( ( ( STRING_2 + ( VAR_1 . getId ( ) ) ) + STRING_3 ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; VAR_3 . info ( STRING_1 ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_3 . error ( ( ( ( VAR_4 . METHOD_3 ( ) ) + \"\\n\" ) + VAR_4 ) ) ; } VAR_3 . info ( ( ( STRING_2 + ( VAR_1 . getId ( ) ) ) + STRING_3 ) ) ; }\n"}
{"problem": "public void update ( TYPE_1 VAR_1 , int i ) throws TYPE_2 { java.util.ArrayList < TYPE_3 > VAR_2 = VAR_3 . METHOD_1 ( ) ; VAR_4 = new java.util.ArrayList < > ( ) ; int j = 1 ; for ( TYPE_3 VAR_5 : VAR_2 ) { VAR_4 . add ( new TYPE_4 ( j ) ) ; j ++ ; } }\n", "fixed": "public void update ( TYPE_1 VAR_1 , int i ) throws TYPE_2 { if ( ( VAR_3 ) != null ) { java.util.ArrayList < TYPE_3 > VAR_2 = VAR_3 . METHOD_1 ( ) ; VAR_4 = new java.util.ArrayList < > ( ) ; int j = 1 ; for ( TYPE_3 VAR_5 : VAR_2 ) { VAR_4 . add ( new TYPE_4 ( j ) ) ; j ++ ; } } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ( VAR_1 . getText ( ) . length ( ) ) >= VAR_2 ) { java.lang.String text = VAR_1 . getText ( ) ; java.lang.String VAR_3 = text . substring ( 0 , VAR_2 ) ; VAR_4 . setText ( VAR_3 ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ( VAR_1 . getText ( ) . length ( ) ) >= VAR_2 ) { java.lang.String text = VAR_1 . getText ( ) ; java.lang.String VAR_3 = text . substring ( 0 , VAR_2 ) ; VAR_1 . setText ( VAR_3 ) ; } }\n"}
{"problem": "void METHOD_1 ( int VAR_1 ) { this . VAR_2 = VAR_1 ; int VAR_3 = ( ( METHOD_2 ( VAR_4 ) ) + ( ( VAR_5 ) == ( VAR_6 ) ? INT_1 : 0 ) ) % INT_2 ; VAR_7 . METHOD_3 ( ( ( VAR_3 + ( VAR_2 ) ) % INT_2 ) ) ; }\n", "fixed": "void METHOD_1 ( int VAR_1 ) { this . VAR_2 = VAR_1 ; if ( ( VAR_7 ) != null ) { int VAR_3 = ( ( METHOD_2 ( VAR_4 ) ) + ( ( VAR_5 ) == ( VAR_6 ) ? INT_1 : 0 ) ) % INT_2 ; VAR_7 . METHOD_3 ( ( ( VAR_3 + ( VAR_2 ) ) % INT_2 ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( boolean VAR_1 , int VAR_2 , java.lang.String VAR_3 , int VAR_4 , boolean VAR_5 , boolean VAR_6 , java.lang.String VAR_7 , java.lang.String VAR_8 , boolean VAR_9 , boolean VAR_10 ) { VAR_11 = VAR_1 ; VAR_12 = VAR_2 ; VAR_13 = VAR_3 ; VAR_14 = VAR_4 ; VAR_15 = VAR_7 ; VAR_16 = VAR_5 ; VAR_17 = VAR_6 ; VAR_18 = VAR_8 ; VAR_19 = VAR_9 ; VAR_20 = VAR_10 ; METHOD_2 ( VAR_21 ) ; }\n", "fixed": "public void METHOD_1 ( boolean VAR_1 , int VAR_2 , java.lang.String VAR_3 , int VAR_4 , boolean VAR_5 , boolean VAR_6 , java.lang.String VAR_7 , java.lang.String VAR_8 , boolean VAR_10 ) { VAR_11 = VAR_1 ; VAR_12 = VAR_2 ; VAR_13 = VAR_3 ; VAR_14 = VAR_4 ; VAR_15 = VAR_7 ; VAR_16 = VAR_5 ; VAR_17 = VAR_6 ; VAR_18 = VAR_8 ; VAR_19 = VAR_9 ; VAR_20 = VAR_10 ; METHOD_2 ( VAR_21 ) ; }\n"}
{"fixCommitSHA1": "3f0fb5b3ed32cf28b5a4ca49b8eac5a4bab3f36b", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         new Thread() {\n             public void run() {\n                 try {\n                    if (mm.tryLock(key, 4, TimeUnit.SECONDS)) {\n                         tryLockSuccess.countDown();\n                     }\n                 } catch (InterruptedException e) {", "fixed": "         new Thread() {\n             public void run() {\n                 try {\n                    if (mm.tryLock(key, 10, TimeUnit.SECONDS)) {\n                         tryLockSuccess.countDown();\n                     }\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "mm.tryLock(key,4,TimeUnit.SECONDS)", "sourceAfterFix": "mm.tryLock(key,10,TimeUnit.SECONDS)"}
{"problem": "public void METHOD_1 ( ) { java.lang.String VAR_1 ; for ( java.util.Iterator < java.lang.String > VAR_2 = VAR_3 . METHOD_2 ( ) . iterator ( ) ; VAR_2 . METHOD_3 ( ) ; ) { VAR_1 = VAR_2 . METHOD_4 ( ) ; VAR_3 . get ( VAR_1 ) . METHOD_5 ( this ) ; } }\n", "fixed": "public void METHOD_1 ( ) { java.lang.String url ; for ( java.util.Iterator < java.lang.String > VAR_2 = VAR_3 . METHOD_2 ( ) . iterator ( ) ; VAR_2 . METHOD_3 ( ) ; ) { url = VAR_2 . METHOD_4 ( ) ; VAR_3 . get ( url ) . METHOD_5 ( this ) ; } }\n"}
{"fixCommitSHA1": "ff7d97dc1a7222e6c207a95f429aa5bfde5155ee", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         }\n     }\n    public XMLStreamReaderInputStream(XMLStreamReader reader, XMLOutputFactory outfactory) {\n         this(reader, \"utf-8\", outfactory);\n     }", "fixed": "         }\n     }\n    XMLStreamReaderInputStream(XMLStreamReader reader, XMLOutputFactory outfactory) {\n         this(reader, \"utf-8\", outfactory);\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"problem": "public void METHOD_1 ( android.view.View view , TYPE_1 event ) { final int VAR_1 = ( ( int ) ( event . METHOD_2 ( ) ) ) ; if ( ( VAR_1 <= INT_1 ) && ( VAR_1 > INT_2 ) ) { VAR_2 = ! ( VAR_2 ) ; TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; } else if ( ( VAR_1 <= INT_3 ) && ( VAR_1 > INT_1 ) ) { TYPE_2 . METHOD_3 ( new TYPE_4 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View view , TYPE_1 event ) { final int VAR_1 = ( ( int ) ( event . METHOD_2 ( ) ) ) ; if ( VAR_1 <= INT_2 ) { VAR_2 = ! ( VAR_2 ) ; TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; } else TYPE_2 . METHOD_3 ( new TYPE_4 ( ) ) ; }\n"}
{"problem": "public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { for ( java.lang.String VAR_2 : VAR_1 . split ( STRING_1 ) ) { if ( VAR_2 . trim ( ) . startsWith ( STRING_2 ) ) { java.lang.String [ ] VAR_3 = VAR_2 . split ( STRING_3 ) ; if ( ( VAR_3 [ 1 ] . length ) > 1 ) { return VAR_3 [ 1 ] . trim ( ) ; } } } return null ; }\n", "fixed": "public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { for ( java.lang.String VAR_2 : VAR_1 . split ( STRING_1 ) ) { if ( VAR_2 . trim ( ) . startsWith ( STRING_2 ) ) { java.lang.String [ ] VAR_3 = VAR_2 . split ( STRING_3 ) ; if ( ( VAR_3 . length ) > 1 ) { return VAR_3 [ 1 ] . trim ( ) ; } } } return null ; }\n"}
{"problem": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; boolean VAR_3 = false ; synchronized ( this ) { VAR_3 = VAR_4 . remove ( VAR_2 ) ; } if ( ( VAR_3 && ( VAR_5 ) ) && ( ! ( VAR_6 ) ) ) METHOD_3 ( VAR_7 , VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( ! ( VAR_5 ) ) return ; final TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; boolean VAR_3 = false ; synchronized ( this ) { VAR_3 = VAR_4 . remove ( VAR_2 ) ; } if ( VAR_3 && ( ! ( VAR_6 ) ) ) METHOD_3 ( VAR_7 , VAR_2 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } if ( ( VAR_1 . METHOD_3 ( ) ) == ( ( METHOD_4 ( ) ) - 1 ) ) { VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( 0 ) ; } else { VAR_1 . METHOD_7 ( 1 ) ; } return VAR_1 . METHOD_8 ( ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( 0 , 0 ) ; } else if ( ( VAR_1 . METHOD_3 ( ) ) == ( ( METHOD_4 ( ) ) - 1 ) ) { VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( 0 ) ; } else { VAR_1 . METHOD_7 ( 1 ) ; } return VAR_1 . METHOD_8 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMSKEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MSKEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMSKEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MSKEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( java.lang.String date ) { java.util.Date VAR_1 = TYPE_1 . METHOD_2 ( date , STRING_1 ) ; if ( ! ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_4 ( ) . METHOD_5 ( STRING_2 ) ; VAR_3 . setText ( java.lang.String.format ( STRING_3 , VAR_2 . METHOD_6 ( ) , VAR_2 . METHOD_7 ( ) , TYPE_1 . METHOD_8 ( VAR_2 . METHOD_9 ( ) ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String date ) { java.util.Date VAR_1 = TYPE_1 . METHOD_2 ( date , STRING_1 ) ; if ( ! ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_4 ( ) . METHOD_5 ( STRING_2 ) ; if ( VAR_2 != null ) { VAR_3 . setText ( java.lang.String.format ( STRING_3 , VAR_2 . METHOD_6 ( ) , VAR_2 . METHOD_7 ( ) , TYPE_1 . METHOD_8 ( VAR_2 . METHOD_9 ( ) ) ) ) ; } } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSlackEndpointBuilder\n             extends\n                 AdvancedSlackEndpointConsumerBuilder, AdvancedSlackEndpointProducerBuilder {\n         default SlackEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSlackEndpointBuilder\n             extends\n                 AdvancedSlackEndpointConsumerBuilder, AdvancedSlackEndpointProducerBuilder {\n         default SlackEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public java.util.Set < java.lang.Long > METHOD_1 ( java.lang.Long VAR_1 ) throws java.lang.Exception { java.util.List < TYPE_1 > result = VAR_2 . METHOD_2 ( VAR_1 , VAR_3 ) ; if ( ( result == null ) || ( ( result . size ( ) ) == 0 ) ) { return null ; } else { java.util.Set < java.lang.Long > VAR_4 = new java.util.HashSet < > ( ) ; for ( TYPE_1 VAR_5 : result ) { VAR_4 . add ( VAR_5 . METHOD_3 ( ) ) ; } return VAR_4 ; } }\n", "fixed": "public java.util.Set < java.lang.Long > METHOD_1 ( java.lang.Long VAR_1 ) throws java.lang.Exception { java.util.Set < java.lang.Long > VAR_4 = new java.util.HashSet < > ( ) ; java.util.List < TYPE_1 > result = VAR_2 . METHOD_2 ( VAR_1 , VAR_3 ) ; if ( ( result == null ) || ( ( result . size ( ) ) == 0 ) ) { return VAR_4 ; } else { for ( TYPE_1 VAR_5 : result ) { VAR_4 . add ( VAR_5 . METHOD_3 ( ) ) ; } return VAR_4 ; } }\n"}
{"problem": "public boolean equals ( java.lang.Object obj ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; return ( ( VAR_2 . equals ( VAR_3 ) ) && ( VAR_4 . equals ( name ) ) ) && ( TYPE_2 . equals ( VAR_1 . args , args ) ) ; }\n", "fixed": "public boolean equals ( java.lang.Object obj ) { if ( obj == null ) return false ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; return ( ( VAR_2 . equals ( VAR_3 ) ) && ( VAR_4 . equals ( name ) ) ) && ( TYPE_2 . equals ( VAR_1 . args , args ) ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_2 ( ) . METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( ) ; VAR_3 = VAR_3 . METHOD_3 ( STRING_1 ) ; java.lang.String VAR_4 = VAR_3 . toString ( ) ; return VAR_4 ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_2 ( ) . METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( ) ; VAR_3 = VAR_3 . METHOD_3 ( STRING_1 ) ; java.lang.String VAR_4 = VAR_3 . toString ( ) ; java.lang.System.out.println ( VAR_4 ) ; return VAR_4 ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return false ; } if ( ( VAR_2 ) == true ) { return this . VAR_2 ; } else if ( VAR_1 . METHOD_2 ( ) ) { return false ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return false ; } if ( ( VAR_2 ) == true ) { return VAR_1 . METHOD_2 ( ) ; } else { return ! ( VAR_1 . METHOD_2 ( ) ) ; } }\n"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 status ) { if ( status . equals ( VAR_2 ) ) { TYPE_3 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , VAR_3 . getText ( ) . toString ( ) , VAR_4 . getText ( ) . toString ( ) , false ) ; } else { VAR_5 . setEnabled ( true ) ; TYPE_4 . METHOD_5 ( getString ( VAR_6 ) , TYPE_3 . METHOD_2 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 status ) { if ( ( TYPE_3 . METHOD_2 ( ) ) == null ) { return ; } if ( status . equals ( VAR_2 ) ) { TYPE_3 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , VAR_3 . getText ( ) . toString ( ) , VAR_4 . getText ( ) . toString ( ) , false ) ; } else { VAR_5 . setEnabled ( true ) ; TYPE_4 . METHOD_5 ( getString ( VAR_6 ) , TYPE_3 . METHOD_2 ( ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( params . METHOD_3 ( ) ) ; if ( ( VAR_3 . METHOD_4 ( ) ) && ( TYPE_2 . equals ( METHOD_5 ( ) , VAR_2 ) ) ) { TYPE_3 . METHOD_6 ( STRING_1 ) ; if ( METHOD_7 ( ) ) METHOD_8 ( ) ; } else { VAR_3 . METHOD_9 ( METHOD_10 ( ) , METHOD_11 ( ) . METHOD_12 ( ) ) ; TYPE_3 . METHOD_6 ( STRING_2 ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( params . METHOD_3 ( ) ) ; if ( ( VAR_3 . METHOD_4 ( ) ) && ( TYPE_2 . equals ( METHOD_5 ( ) , VAR_2 ) ) ) { TYPE_3 . METHOD_6 ( STRING_1 ) ; if ( METHOD_7 ( false ) ) METHOD_8 ( ) ; } else { VAR_3 . METHOD_9 ( METHOD_10 ( ) , METHOD_11 ( ) . METHOD_12 ( ) ) ; TYPE_3 . METHOD_6 ( STRING_2 ) ; } }\n"}
{"problem": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) VAR_1 . METHOD_2 ( ) ; TYPE_1 b = new TYPE_1 ( ) ; b . METHOD_3 ( VAR_2 , false ) ; if ( ( ( getIntent ( ) ) != null ) && ( getIntent ( ) . METHOD_4 ( VAR_2 , false ) ) ) { b . METHOD_3 ( VAR_2 , true ) ; METHOD_5 ( new TYPE_2 ( ) , false , b , VAR_3 class . METHOD_6 ( ) ) ; } }\n", "fixed": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 b = new TYPE_1 ( ) ; b . METHOD_3 ( VAR_2 , false ) ; if ( ( ( getIntent ( ) ) != null ) && ( getIntent ( ) . METHOD_4 ( VAR_2 , false ) ) ) { b . METHOD_3 ( VAR_2 , true ) ; METHOD_5 ( new TYPE_2 ( ) , false , b , VAR_3 class . METHOD_6 ( ) ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 message , TYPE_3 VAR_1 ) { TYPE_4 p = VAR_1 . METHOD_2 ( ) . VAR_2 ; if ( ( VAR_3 ) != null ) { java.lang.System.out.println ( VAR_3 . getClass ( ) . getName ( ) ) ; TYPE_5 . METHOD_3 ( p , VAR_3 ) ; VAR_4 . METHOD_4 ( ) ; VAR_3 . METHOD_4 ( ) ; } return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 message , TYPE_3 VAR_1 ) { TYPE_4 p = VAR_1 . METHOD_2 ( ) . VAR_2 ; if ( ( VAR_3 ) != null ) { TYPE_5 . METHOD_3 ( p , VAR_3 ) ; VAR_4 . METHOD_4 ( ) ; VAR_3 . METHOD_4 ( ) ; } return null ; }\n"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_5 ( VAR_3 ) ; } if ( ( getView ( ) ) != null ) { getView ( ) . METHOD_5 ( VAR_4 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_5 ( VAR_3 ) ; } if ( ( getView ( ) ) != null ) { getView ( ) . METHOD_5 ( VAR_4 ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { java.lang.System.out.println ( ( STRING_1 + ( i ) ) ) ; int index = ( i ) ++ ; java.lang.System.out.println ( ( STRING_2 + ( i ) ) ) ; while ( ( ( i ) < ( ( keys . length ) - 1 ) ) && ( ( keys [ i ] ) == null ) ) ( i ) ++ ; java.lang.System.out.println ( ( STRING_3 + ( i ) ) ) ; return keys [ index ] ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { int index = ( i ) ++ ; while ( ( ( i ) < ( ( keys . length ) - 1 ) ) && ( ( keys [ i ] ) == null ) ) ( i ) ++ ; return keys [ index ] ; }\n"}
{"fixCommitSHA1": "cae7c4cee89d2a11e957ae153eb9d5e567a0170a", "projectName": "alibaba.dubbo", "bugType": "Same Function More Args", "problem": "                     ctField.getFieldInfo().addAttribute(attribute);\r\n                     ctClass.addField(ctField);\r\n                 }\r\n                parameterClass = ctClass.toClass();\r\n             }\r\n             Object parameterBean = parameterClass.newInstance();\r\n             for (int i = 0; i < args.length; i++) {\r", "fixed": "                     ctField.getFieldInfo().addAttribute(attribute);\r\n                     ctClass.addField(ctField);\r\n                 }\r\n                parameterClass = ctClass.toClass(clazz.getClassLoader(), null);\r\n             }\r\n             Object parameterBean = parameterClass.newInstance();\r\n             for (int i = 0; i < args.length; i++) {\r", "sourceBeforeFix": "ctClass.toClass()", "sourceAfterFix": "ctClass.toClass(clazz.getClassLoader(),null)"}
{"problem": "private double [ ] METHOD_1 ( double [ ] p ) { double [ ] VAR_1 = new double [ INT_1 ] ; VAR_1 [ 0 ] = p [ 0 ] ; VAR_1 [ 1 ] = ( VAR_1 [ 0 ] ) + ( p [ 1 ] ) ; VAR_1 [ INT_2 ] = ( VAR_1 [ 1 ] ) + ( p [ INT_2 ] ) ; VAR_1 [ INT_3 ] = ( VAR_1 [ INT_2 ] ) + ( p [ INT_3 ] ) ; return p ; }\n", "fixed": "private double [ ] METHOD_1 ( double [ ] p ) { double [ ] VAR_1 = new double [ INT_1 ] ; VAR_1 [ 0 ] = p [ 0 ] ; VAR_1 [ 1 ] = ( VAR_1 [ 0 ] ) + ( p [ 1 ] ) ; VAR_1 [ INT_2 ] = ( VAR_1 [ 1 ] ) + ( p [ INT_2 ] ) ; VAR_1 [ INT_3 ] = ( VAR_1 [ INT_2 ] ) + ( p [ INT_3 ] ) ; return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; if ( ( VAR_1 . METHOD_2 ( ) . size ( ) ) > ( VAR_2 . METHOD_3 ( ) . size ( ) ) ) { java.lang.System.out.println ( STRING_2 ) ; METHOD_4 ( ) ; } else if ( ( VAR_1 . METHOD_2 ( ) . size ( ) ) < ( VAR_2 . METHOD_3 ( ) . size ( ) ) ) { java.lang.System.out.println ( STRING_3 ) ; METHOD_5 ( ) ; } VAR_3 . METHOD_6 ( ) ; this . METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) . size ( ) ) > ( VAR_2 . METHOD_3 ( ) . size ( ) ) ) METHOD_4 ( ) ; else if ( ( VAR_1 . METHOD_2 ( ) . size ( ) ) < ( VAR_2 . METHOD_3 ( ) . size ( ) ) ) METHOD_5 ( ) ; VAR_3 . METHOD_6 ( ) ; this . METHOD_6 ( ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = this . VAR_2 ; VAR_1 += STRING_1 ; for ( int i = 0 ; i < ( VAR_3 . length ) ; ++ i ) { VAR_1 += VAR_3 [ i ] . toString ( ) ; if ( i != ( ( VAR_3 . length ) - 1 ) ) { VAR_1 += STRING_2 ; } else { VAR_1 += STRING_3 ; } } return VAR_1 ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = this . VAR_2 ; VAR_1 += STRING_1 ; for ( int i = 0 ; i < ( VAR_3 . length ) ; ++ i ) { VAR_1 += VAR_3 [ i ] . toString ( ) ; if ( i != ( ( VAR_3 . length ) - 1 ) ) { VAR_1 += STRING_2 ; } } VAR_1 += STRING_3 ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "e96a6fb6d3cbaf82fc011f7f6df80536adb7dc26", "projectName": "hazelcast.hazelcast", "bugType": "Change Boolean Literal", "problem": "     @Test\n     public void checkAllPermission_whenDeploy() {\n        new CheckPermission().of(\"all\").against(\"deploy\").expect(false).run();\n     }\n }", "fixed": "     @Test\n     public void checkAllPermission_whenDeploy() {\n        new CheckPermission().of(\"all\").against(\"deploy\").expect(true).run();\n     }\n }", "sourceBeforeFix": "new CheckPermission().of(\"all\").against(\"deploy\").expect(false)", "sourceAfterFix": "new CheckPermission().of(\"all\").against(\"deploy\").expect(true)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.lang.Exception { new TYPE_3 ( VAR_3 . METHOD_2 ( STRING_1 ) ) . METHOD_2 ( STRING_2 ) . set ( METHOD_3 ( ) , TYPE_4 . METHOD_4 ( TYPE_4 . METHOD_5 ( false ) , METHOD_3 ( ) ) ) ; METHOD_6 ( ) . METHOD_7 ( VAR_4 ) ; for ( TYPE_5 VAR_5 : TYPE_6 . METHOD_8 ( ) ) { METHOD_9 ( VAR_5 ) ; } super . METHOD_1 ( VAR_1 , VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.lang.Exception { this . VAR_1 = VAR_1 ; new TYPE_3 ( VAR_3 . METHOD_2 ( STRING_1 ) ) . METHOD_2 ( STRING_2 ) . set ( METHOD_3 ( ) , TYPE_4 . METHOD_4 ( TYPE_4 . METHOD_5 ( false ) , METHOD_3 ( ) ) ) ; METHOD_6 ( ) . METHOD_7 ( VAR_4 ) ; for ( TYPE_5 VAR_5 : TYPE_6 . METHOD_8 ( ) ) { METHOD_9 ( VAR_5 ) ; } super . METHOD_1 ( VAR_1 , VAR_2 ) ; }\n"}
{"problem": "static java.lang.String [ ] METHOD_1 ( java.lang.String args ) { if ( args == null ) { return null ; } final java.lang.String [ ] VAR_1 = TYPE_1 . METHOD_2 ( args ) ; if ( VAR_1 == null ) { return null ; } if ( ( args != null ) && ( args . METHOD_3 ( STRING_1 ) ) ) { VAR_1 [ ( ( VAR_1 . length ) - 1 ) ] = ( VAR_1 [ ( ( VAR_1 . length ) - 1 ) ] ) + STRING_1 ; } return VAR_1 ; }\n", "fixed": "static java.lang.String [ ] METHOD_1 ( java.lang.String args ) { if ( args == null ) { return null ; } final java.lang.String [ ] VAR_1 = TYPE_1 . METHOD_2 ( args ) ; if ( args . METHOD_3 ( STRING_1 ) ) { VAR_1 [ ( ( VAR_1 . length ) - 1 ) ] = ( VAR_1 [ ( ( VAR_1 . length ) - 1 ) ] ) + STRING_1 ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( STRING_1 ) ; assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; assertTrue ( VAR_1 . METHOD_3 ( VAR_2 ) ) ; assertTrue ( VAR_1 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( VAR_1 . METHOD_3 ( VAR_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( STRING_1 ) ; assertTrue ( VAR_1 . METHOD_2 ( STRING_1 ) ) ; assertTrue ( VAR_1 . METHOD_3 ( VAR_2 ) ) ; assertTrue ( VAR_1 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( VAR_1 . METHOD_3 ( VAR_2 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.System.out.print ( STRING_1 ) ; VAR_1 = ( VAR_2 . METHOD_2 ( ) ) + ( VAR_2 . METHOD_3 ( ) ) ; while ( ! ( METHOD_4 ( VAR_1 ) ) ) { METHOD_5 ( STRING_2 ) ; VAR_1 = ( VAR_2 . METHOD_2 ( ) ) + ( VAR_2 . METHOD_3 ( ) ) ; } VAR_3 = VAR_1 ; }\n", "fixed": "private void METHOD_1 ( ) { java.lang.System.out.print ( STRING_1 ) ; VAR_1 = ( VAR_2 . METHOD_2 ( ) ) + ( VAR_2 . METHOD_3 ( ) ) ; while ( ! ( METHOD_4 ( VAR_1 ) ) ) { METHOD_5 ( STRING_2 ) ; VAR_1 = ( VAR_2 . METHOD_2 ( ) ) + ( VAR_2 . METHOD_3 ( ) ) ; } VAR_3 = VAR_1 ; }\n"}
{"fixCommitSHA1": "cddf42c30c1b839e44c03e017ccdb3619d3aa967", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\tif (person.isPersonVoided()) {\r\n\t\t\tif (!StringUtils.hasLength(person.getVoidReason()))\r\n \t\t\t\tthrow new APIException(\r\n \t\t\t\t        \"The voided bit was set to true, so a void reason is required at save time for person: \" + person);\r", "fixed": " \t\tif (person.isPersonVoided()) {\r\n\t\t\tif (!StringUtils.hasLength(person.getPersonVoidReason()))\r\n \t\t\t\tthrow new APIException(\r\n \t\t\t\t        \"The voided bit was set to true, so a void reason is required at save time for person: \" + person);\r", "sourceBeforeFix": "person.getVoidReason()", "sourceAfterFix": "person.getPersonVoidReason()"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( VAR_3 , VAR_4 ) ; intent . METHOD_2 ( VAR_5 , VAR_1 . METHOD_3 ( ) ) ; intent . METHOD_2 ( VAR_6 , VAR_7 . getId ( ) ) ; intent . METHOD_4 ( VAR_8 ) ; METHOD_5 ( intent ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( VAR_3 , VAR_4 ) ; intent . METHOD_2 ( VAR_5 , VAR_1 . METHOD_3 ( ) ) ; intent . METHOD_2 ( VAR_6 , VAR_7 . getId ( ) ) ; METHOD_5 ( intent ) ; }\n"}
{"problem": "public int METHOD_1 ( ) { int sum = 0 ; int position = 0 ; for ( int VAR_1 : VAR_2 ) { if ( VAR_1 == 0 ) { continue ; } int VAR_3 = VAR_1 - 1 ; int diff = java.lang.Math.abs ( ( position - VAR_3 ) ) ; int VAR_4 = ( METHOD_2 ( diff ) ) + ( METHOD_3 ( diff ) ) ; sum += VAR_4 ; position ++ ; } return sum ; }\n", "fixed": "public int METHOD_1 ( ) { int sum = 0 ; int position = 0 ; for ( int VAR_1 : VAR_2 ) { if ( VAR_1 != 0 ) { int VAR_3 = VAR_1 - 1 ; int diff = java.lang.Math.abs ( ( position - VAR_3 ) ) ; int VAR_4 = ( METHOD_2 ( diff ) ) + ( METHOD_3 ( diff ) ) ; sum += VAR_4 ; } position ++ ; } return sum ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( boolean VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( 1 ) . METHOD_4 ( new TYPE_3 ( INT_1 ) ) ; if ( VAR_1 ) { VAR_2 . METHOD_5 ( new TYPE_4 ( ) . METHOD_6 ( VAR_4 ) . build ( ) ) ; } else { VAR_2 . METHOD_7 ( new TYPE_5 ( ) . METHOD_8 ( VAR_5 < TYPE_6 > METHOD_9 ( ) ) . build ( ) ) ; } return VAR_2 . build ( ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( boolean VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( 1 ) ; if ( VAR_1 ) { VAR_2 . METHOD_5 ( new TYPE_4 ( ) . METHOD_6 ( VAR_4 ) . build ( ) ) ; } else { VAR_2 . METHOD_7 ( new TYPE_5 ( ) . METHOD_8 ( VAR_5 < TYPE_6 > METHOD_9 ( ) ) . build ( ) ) . METHOD_4 ( new TYPE_3 ( INT_1 ) ) ; } return VAR_2 . build ( ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . get ( VAR_3 . METHOD_2 ( ) ) ) ) ; TYPE_2 . METHOD_3 ( STRING_1 , ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) + ( VAR_1 . METHOD_4 ( ) ) ) ) ; if ( VAR_1 . METHOD_4 ( ) ) { VAR_3 . METHOD_5 ( true ) ; } else { VAR_3 . METHOD_5 ( false ) ; } }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . get ( VAR_3 . METHOD_2 ( ) ) ) ) ; if ( VAR_1 . METHOD_4 ( ) ) { VAR_3 . METHOD_5 ( true ) ; } else { VAR_3 . METHOD_5 ( false ) ; } }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_2 , STRING_1 ) ; info = STRING_2 ; if ( ( getIntent ( ) ) != null ) { info = getIntent ( ) . METHOD_4 ( VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_2 , info ) ; } TYPE_3 . METHOD_5 ( this , info ) ; METHOD_6 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_2 , STRING_1 ) ; info = STRING_2 ; if ( ( getIntent ( ) ) != null ) { info = getIntent ( ) . METHOD_4 ( VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_2 , ( ( info ) + STRING_2 ) ) ; } TYPE_3 . METHOD_5 ( this , info ) ; METHOD_6 ( ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 expr ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( expr . METHOD_3 ( ) . METHOD_4 ( ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 , null ) ; expr . METHOD_5 ( TYPE_4 . METHOD_6 ( VAR_3 ) ) ; VAR_3 . METHOD_7 ( expr ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 expr ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( expr . METHOD_3 ( ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 , null ) ; expr . METHOD_5 ( TYPE_4 . METHOD_6 ( VAR_3 ) ) ; VAR_3 . METHOD_7 ( expr ) ; }\n"}
{"problem": "public void METHOD_1 ( int position ) { switch ( position ) { case 0 : VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; break ; case 1 : case INT_1 : VAR_3 . METHOD_3 ( ) ; VAR_1 . METHOD_2 ( VAR_4 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; } }\n", "fixed": "public void METHOD_1 ( int position ) { switch ( position ) { case 0 : VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; break ; case 1 : VAR_3 . METHOD_3 ( ) ; VAR_1 . METHOD_2 ( VAR_4 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; } }\n"}
{"problem": "public java.lang.String toString ( ) { java.lang.String str = STRING_1 ; if ( ( METHOD_1 ( ) ) > 0 ) { str += ( STRING_2 + ( METHOD_1 ( ) ) ) + STRING_3 ; } str += name ; if ( ( VAR_1 ) != ( VAR_2 ) ) str += ( STRING_4 + ( VAR_1 . toString ( ) ) ) + STRING_5 ; return str ; }\n", "fixed": "public java.lang.String toString ( ) { java.lang.String str = STRING_1 ; if ( ( METHOD_1 ( ) ) > 0 ) { str += ( STRING_2 + ( METHOD_1 ( ) ) ) + STRING_3 ; } str += name ; if ( ( ( VAR_1 ) != null ) && ( ( VAR_1 ) != ( VAR_2 ) ) ) str += ( STRING_4 + ( VAR_1 . toString ( ) ) ) + STRING_5 ; return str ; }\n"}
{"problem": "public java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; for ( TYPE_1 VAR_3 : this . VAR_4 . values ( ) ) { if ( VAR_3 . METHOD_2 ( ) . equals ( VAR_1 ) ) { VAR_2 . add ( VAR_3 . METHOD_3 ( ) ) ; } } return VAR_2 ; }\n", "fixed": "public java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; for ( TYPE_1 VAR_3 : VAR_4 . values ( ) ) { if ( VAR_3 . METHOD_2 ( ) . equals ( VAR_1 ) ) { VAR_2 . add ( VAR_3 . METHOD_3 ( ) ) ; } } return VAR_2 ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_2 < TYPE_1 > METHOD_2 ( new TYPE_3 ( ) , new TYPE_4 ( ) , new TYPE_5 ( ) , new TYPE_6 ( ) , new TYPE_7 ( ) , new TYPE_8 ( ) , new TYPE_9 ( ) , new TYPE_10 ( ) , new TYPE_11 ( ) , new TYPE_12 ( ) , new TYPE_13 ( ) , new TYPE_14 ( ) , new TYPE_15 ( ) , new TYPE_16 ( ) , new TYPE_17 ( ) , new TYPE_18 ( ) ) ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_2 < TYPE_1 > METHOD_2 ( new TYPE_3 ( ) , new TYPE_4 ( ) , new TYPE_5 ( ) , new TYPE_6 ( ) , new TYPE_7 ( ) , new TYPE_8 ( ) , new TYPE_9 ( ) , new TYPE_10 ( ) , new TYPE_11 ( ) , new TYPE_12 ( ) , new TYPE_13 ( ) , new TYPE_14 ( ) , new TYPE_16 ( ) , new TYPE_17 ( ) , new TYPE_18 ( ) ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; java.util.List < TYPE_4 > VAR_2 = VAR_1 . METHOD_4 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( getActivity ( ) ) ; for ( TYPE_4 VAR_4 : VAR_2 ) { java.lang.String [ ] values = VAR_4 . getName ( ) . values ( ) . METHOD_5 ( new java.lang.String [ 0 ] ) ; VAR_3 . add ( TYPE_5 . METHOD_6 ( values [ 0 ] , VAR_5 class ) ) ; } return VAR_3 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_3 = new TYPE_1 ( getActivity ( ) ) ; for ( TYPE_4 VAR_4 : VAR_2 ) { java.lang.String [ ] values = VAR_4 . getName ( ) . values ( ) . METHOD_5 ( new java.lang.String [ 0 ] ) ; VAR_3 . add ( TYPE_5 . METHOD_6 ( values [ 0 ] , VAR_5 class ) ) ; } return VAR_3 ; }\n"}
{"problem": "public static java.util.List < java.lang.Object [ ] > data ( ) { return java.util.Arrays.asList ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { STRING_1 , STRING_2 , STRING_3 } , new java.lang.Object [ ] { STRING_4 , STRING_2 , STRING_5 } , new java.lang.Object [ ] { STRING_6 , STRING_2 , STRING_7 } , new java.lang.Object [ ] { STRING_8 , STRING_2 , STRING_9 } } ) ; }\n", "fixed": "public static java.util.List < java.lang.Object [ ] > data ( ) { return java.util.Arrays.asList ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { STRING_2 , STRING_3 } , new java.lang.Object [ ] { STRING_2 , STRING_5 } , new java.lang.Object [ ] { STRING_2 , STRING_7 } , new java.lang.Object [ ] { STRING_2 , STRING_9 } } ) ; }\n"}
{"fixCommitSHA1": "0b3166b35fac48f68ba84f1110421d99c4222244", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "     @Override\n     public byte[] decodeMessage() {\n        byte[] data = new byte[9];\n         data[0] = 0x09;\n         data[1] = RFXComBaseMessage.PacketType.UV.toByte();", "fixed": "     @Override\n     public byte[] decodeMessage() {\n        byte[] data = new byte[10];\n         data[0] = 0x09;\n         data[1] = RFXComBaseMessage.PacketType.UV.toByte();", "sourceBeforeFix": "new byte[9]", "sourceAfterFix": "new byte[10]"}
{"problem": "private int METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; if ( ( VAR_2 ) == ( VAR_3 ) ) { return ( ( ( VAR_1 + INT_1 ) + ( INT_2 * ( VAR_4 ) ) ) + INT_3 ) % INT_4 ; } else { return VAR_1 ; } }\n", "fixed": "private int METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; if ( ( VAR_2 ) == ( VAR_3 ) ) { return ( ( VAR_1 + ( INT_2 * ( VAR_4 ) ) ) + INT_1 ) % INT_4 ; } else { return VAR_1 ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 [ ] VAR_1 ) { TYPE_1 VAR_2 = null ; for ( TYPE_2 VAR_3 : VAR_4 ) { if ( ( VAR_1 . length ) == ( VAR_5 . length ) ) { if ( METHOD_2 ( VAR_1 , VAR_5 ) ) { VAR_2 = VAR_3 . output ; break ; } } } return VAR_2 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_1 [ ] VAR_1 ) { TYPE_1 VAR_2 = null ; for ( TYPE_2 VAR_3 : VAR_4 ) { if ( ( VAR_1 . length ) == ( VAR_5 . length ) ) { if ( TYPE_2 . METHOD_2 ( VAR_1 , VAR_5 ) ) { VAR_2 = VAR_3 . output ; break ; } } } return VAR_2 ; }\n"}
{"fixCommitSHA1": "213109c115e65588b265650eee80fad7652b2129", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\ttry {\r\n \t\t\tLwjglMusic music = new LwjglMusic(((LwjglFileHandle)file));\r\n \t\t\treturn music;\r\n\t\t} catch (Exception e) {\r\n \t\t\tthrow new GdxRuntimeException(\"Couldn't create Music instance from file '\" + file + \"'\", e);\r\n \t\t}\r\n \t}\r", "fixed": " \t\ttry {\r\n \t\t\tLwjglMusic music = new LwjglMusic(((LwjglFileHandle)file));\r\n \t\t\treturn music;\r\n\t\t} catch (Throwable e) {\r\n \t\t\tthrow new GdxRuntimeException(\"Couldn't create Music instance from file '\" + file + \"'\", e);\r\n \t\t}\r\n \t}\r", "sourceBeforeFix": "Exception e", "sourceAfterFix": "Throwable e"}
{"problem": "static java.lang.Integer [ ] METHOD_1 ( int VAR_1 ) { java.util.List < java.lang.Integer > VAR_2 = new java.util.ArrayList < > ( VAR_1 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) VAR_2 . add ( ( ( int ) ( ( java.lang.Math.random ( ) ) * ( VAR_3 ) ) ) ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; java.lang.Integer [ ] VAR_4 = new java.lang.Integer [ VAR_1 ] ; VAR_2 . METHOD_3 ( VAR_4 ) ; return VAR_4 ; }\n", "fixed": "static java.util.List < java.lang.Integer > METHOD_1 ( int VAR_1 ) { java.util.List < java.lang.Integer > VAR_2 = new java.util.ArrayList < > ( VAR_1 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) VAR_2 . add ( ( ( int ) ( ( java.lang.Math.random ( ) ) * ( VAR_3 ) ) ) ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( int line ) { java.lang.Object [ ] VAR_1 = TYPE_1 . METHOD_2 ( line , this . main . METHOD_3 ( ) . METHOD_4 ( ) ) ; if ( VAR_1 [ 0 ] . equals ( STRING_1 ) ) this . METHOD_5 ( ( ( int ) ( VAR_1 [ 1 ] ) ) ) ; }\n", "fixed": "public void METHOD_1 ( int line ) { java.lang.Object [ ] VAR_1 = TYPE_1 . METHOD_2 ( line , this . main . METHOD_3 ( ) . METHOD_4 ( ) ) ; if ( ( VAR_1 [ 0 ] . equals ( STRING_1 ) ) && ( ( ( int ) ( VAR_1 [ 1 ] ) ) >= 0 ) ) this . METHOD_5 ( ( ( int ) ( VAR_1 [ 1 ] ) ) ) ; }\n"}
{"problem": "public boolean METHOD_1 ( ) { java.lang.String VAR_1 = null ; final java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , STRING_1 ) ; for ( final TYPE_1 VAR_5 : VAR_2 ) VAR_1 = VAR_5 . getValue ( ) ; if ( VAR_1 . METHOD_3 ( STRING_2 ) ) return true ; else return false ; }\n", "fixed": "public boolean METHOD_1 ( ) { java.lang.String VAR_1 = null ; final java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , STRING_1 ) ; if ( VAR_2 != null ) for ( final TYPE_1 VAR_5 : VAR_2 ) VAR_1 = VAR_5 . getValue ( ) ; if ( ( VAR_1 != null ) && ( VAR_1 . METHOD_3 ( STRING_2 ) ) ) return true ; else return false ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 = false ; VAR_2 . METHOD_2 ( ) ; for ( TYPE_1 VAR_3 : VAR_4 . values ( ) ) { VAR_3 . METHOD_1 ( ) ; } VAR_4 . METHOD_2 ( ) ; try { VAR_5 . METHOD_3 ( ) ; VAR_6 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_7 ) { VAR_7 . METHOD_4 ( ) ; } TYPE_2 . METHOD_5 ( VAR_8 , STRING_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { return ; } VAR_1 = false ; VAR_2 . METHOD_2 ( ) ; for ( TYPE_1 VAR_3 : VAR_4 . values ( ) ) { VAR_3 . METHOD_1 ( ) ; } VAR_4 . METHOD_2 ( ) ; try { VAR_5 . METHOD_3 ( ) ; VAR_6 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_7 ) { VAR_7 . METHOD_4 ( ) ; } TYPE_2 . METHOD_5 ( VAR_8 , STRING_1 ) ; }\n"}
{"fixCommitSHA1": "52746b8ea6d15e1814adbc657c7d64ee1af2af36", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "       try {\n         inputRow = parser.parse(value.toString());\n       }\n      catch (IllegalArgumentException e) {\n         if (config.isIgnoreInvalidRows()) {\n           context.getCounter(HadoopDruidIndexerConfig.IndexJobCounters.INVALID_ROW_COUNTER).increment(1);\nreturn;", "fixed": "       try {\n         inputRow = parser.parse(value.toString());\n       }\n      catch (Exception e) {\n         if (config.isIgnoreInvalidRows()) {\n           context.getCounter(HadoopDruidIndexerConfig.IndexJobCounters.INVALID_ROW_COUNTER).increment(1);\nreturn;", "sourceBeforeFix": "IllegalArgumentException e", "sourceAfterFix": "Exception e"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { android.content.Intent result = new android.content.Intent ( ) ; result . METHOD_2 ( VAR_2 , VAR_1 ) ; METHOD_3 ( VAR_3 , result ) ; METHOD_4 ( ) ; return true ; } return false ; }\n", "fixed": "private boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { android.content.Intent result = new android.content.Intent ( ) ; result . METHOD_2 ( VAR_2 , VAR_1 ) ; METHOD_3 ( VAR_3 , result ) ; METHOD_4 ( ) ; return true ; } METHOD_4 ( ) ; return false ; }\n"}
{"problem": "public long METHOD_1 ( TYPE_1 file ) { try { int VAR_1 = METHOD_2 ( file ) ; file . METHOD_1 ( new byte [ ] { 0 } ) ; if ( VAR_1 > 0 ) { byte [ ] VAR_2 = new byte [ VAR_1 ] ; file . METHOD_1 ( VAR_2 ) ; } return ( ( long ) ( VAR_1 ) ) + 1 ; } catch ( java.io.IOException VAR_3 ) { throw new TYPE_2 ( STRING_1 , VAR_3 ) ; } }\n", "fixed": "public long METHOD_1 ( TYPE_1 file ) { try { file . METHOD_1 ( new byte [ ] { 0 } ) ; int VAR_1 = METHOD_2 ( file ) ; if ( VAR_1 > 0 ) { byte [ ] VAR_2 = new byte [ VAR_1 ] ; file . METHOD_1 ( VAR_2 ) ; } return ( ( long ) ( VAR_1 ) ) + 1 ; } catch ( java.io.IOException VAR_3 ) { throw new TYPE_2 ( STRING_1 , VAR_3 ) ; } }\n"}
{"problem": "public void execute ( ) { if ( ( VAR_1 ) == null ) { METHOD_1 ( STRING_1 ) ; } VAR_1 . METHOD_2 ( VAR_2 ) ; try { VAR_1 . METHOD_3 ( ) ; } catch ( TYPE_1 | TYPE_2 VAR_3 ) { METHOD_1 ( ( STRING_2 + ( VAR_3 . getClass ( ) . METHOD_4 ( ) ) ) ) ; } }\n", "fixed": "public void execute ( ) { if ( ( VAR_1 ) == null ) { METHOD_1 ( STRING_1 ) ; return ; } VAR_1 . METHOD_2 ( VAR_2 ) ; try { VAR_1 . METHOD_3 ( ) ; } catch ( TYPE_1 | TYPE_2 VAR_3 ) { METHOD_1 ( ( STRING_2 + ( VAR_3 . getClass ( ) . METHOD_4 ( ) ) ) ) ; } }\n"}
{"problem": "public int METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_4 class , VAR_3 . METHOD_4 ( ) . METHOD_5 ( INT_1 , INT_1 , INT_1 ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { return ( ( VAR_5 ) * ( VAR_2 . size ( ) ) ) - 1 ; } return 0 ; }\n", "fixed": "public int METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_4 class , VAR_3 . METHOD_4 ( ) . METHOD_5 ( INT_1 , INT_1 , INT_1 ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { return ( VAR_5 ) * ( ( VAR_2 . size ( ) ) - 1 ) ; } return 0 ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { try { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; return VAR_5 . METHOD_1 ( VAR_2 , VAR_3 ) ; } catch ( java.lang.Exception VAR_6 ) { VAR_6 . METHOD_3 ( ) ; throw new TYPE_3 ( VAR_6 ) ; } }\n", "fixed": "public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { try { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; java.util.Map < java.lang.String , java.lang.String > result = VAR_5 . METHOD_1 ( VAR_2 , VAR_3 ) ; return result ; } catch ( java.lang.Exception VAR_6 ) { VAR_6 . METHOD_3 ( ) ; throw new TYPE_3 ( VAR_6 ) ; } }\n"}
{"project": "Mockito", "bugId": 6, "problem": "      * @return <code>false</code>.\r\n      */\r\n     public static boolean anyBoolean() {\r\n        return reportMatcher(Any.ANY).returnFalse();\r\n     }\r\n     /**\r", "fixed": "      * @return <code>false</code>.\r\n      */\r\n     public static boolean anyBoolean() {\r\n        return reportMatcher(new InstanceOf(Boolean.class)).returnFalse();\r\n     }\r\n     /**\r", "observations": "Instantiates specific objects in place of call do Any.ANY", "repairActions": ["mcParValChange", "objInstAdd", "varReplMc"], "repairPatterns": ["copyPaste", "wrongMethodRef", "wrongVarRef"]}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RestEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRestEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface RestEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRestEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { TYPE_3 VAR_1 = METHOD_2 ( ) ; try { VAR_1 . METHOD_3 ( VAR_2 [ 0 ] , VAR_2 [ INT_1 ] ) ; TYPE_4 . METHOD_4 ( VAR_3 . METHOD_5 ( ) . get ( 0 ) . equals ( VAR_2 [ INT_1 ] ) ) ; } catch ( TYPE_1 VAR_4 ) { TYPE_4 . fail ( STRING_1 ) ; } }\n", "fixed": "public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { TYPE_3 VAR_1 = METHOD_2 ( ) ; try { VAR_1 . METHOD_3 ( VAR_2 [ 0 ] , VAR_2 [ INT_1 ] ) ; TYPE_4 . assertTrue ( VAR_3 . METHOD_5 ( ) . get ( 0 ) . equals ( VAR_2 [ INT_1 ] ) ) ; } catch ( TYPE_1 VAR_4 ) { TYPE_4 . fail ( STRING_1 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { if ( VAR_2 ) { if ( VAR_1 == null ) { return TYPE_1 . error ( STRING_1 ) ; } TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 == null ) || ( ! ( VAR_3 . METHOD_3 ( STRING_2 ) ) ) ) { return TYPE_1 . error ( STRING_3 ) ; } } return TYPE_1 . METHOD_4 ( ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( ( VAR_2 ) == null ) || ( VAR_2 ) ) { if ( VAR_1 == null ) { return TYPE_1 . error ( STRING_1 ) ; } TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 == null ) || ( ! ( VAR_3 . METHOD_3 ( STRING_2 ) ) ) ) { return TYPE_1 . error ( STRING_3 ) ; } } return TYPE_1 . METHOD_4 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . info ( ( STRING_1 + ( METHOD_2 ( ) ) ) ) ; TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 ) ) ; if ( VAR_2 . METHOD_3 ( ) ) { try { VAR_3 . METHOD_4 ( VAR_2 . METHOD_3 ( ) ) ; } catch ( TYPE_4 VAR_4 ) { VAR_5 . METHOD_5 ( VAR_6 , VAR_4 . METHOD_6 ( ) ) ; } } TYPE_5 . METHOD_7 ( VAR_7 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 ) ) ; if ( VAR_2 . METHOD_3 ( ) ) { try { VAR_3 . METHOD_4 ( VAR_2 . METHOD_3 ( ) ) ; } catch ( TYPE_4 VAR_4 ) { VAR_5 . METHOD_5 ( VAR_6 , VAR_4 . METHOD_6 ( ) ) ; } } TYPE_5 . METHOD_7 ( VAR_7 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public int METHOD_1 ( TYPE_1 c ) { int VAR_1 = - 1 ; for ( int i = 0 ; ( i <= ( VAR_2 ) ) && ( VAR_1 == ( - 1 ) ) ; i ++ ) { if ( VAR_3 [ i ] . equals ( c ) ) ; VAR_1 = i ; } return VAR_1 ; }\n", "fixed": "public int METHOD_1 ( TYPE_1 c ) { int VAR_1 = - 1 ; for ( int i = 0 ; ( i <= ( VAR_2 ) ) && ( VAR_1 == ( - 1 ) ) ; i ++ ) { if ( VAR_3 [ i ] . equals ( c ) ) VAR_1 = i ; } return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( java.util.Collection < TYPE_1 > VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_2 . add ( VAR_4 ) ; } TYPE_2 VAR_5 = new TYPE_2 ( VAR_6 ) ; new TYPE_3 ( VAR_7 , VAR_8 ) . METHOD_2 ( VAR_9 , VAR_5 ) ; }\n", "fixed": "public void METHOD_1 ( java.util.Collection < TYPE_1 > VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_2 . add ( VAR_4 ) ; } TYPE_2 VAR_5 = new TYPE_2 ( VAR_6 , VAR_2 ) ; new TYPE_3 ( VAR_7 , VAR_8 ) . METHOD_2 ( VAR_9 , VAR_5 ) ; }\n"}
{"problem": "public final void METHOD_1 ( java.lang.String title , java.lang.String content , boolean VAR_1 ) { VAR_2 = new TYPE_1 ( this ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( false ) . METHOD_4 ( true , 0 ) . METHOD_5 ( VAR_1 ) . build ( ) ; if ( title != null ) { VAR_2 . METHOD_6 ( ) . setText ( title ) ; } VAR_2 . METHOD_7 ( content ) ; VAR_2 . show ( ) ; }\n", "fixed": "public final void METHOD_1 ( java.lang.String title , java.lang.String content , boolean VAR_1 ) { VAR_2 = new TYPE_1 ( this ) . METHOD_2 ( VAR_3 ) . title ( title ) . content ( content ) . METHOD_3 ( false ) . METHOD_4 ( true , 0 ) . METHOD_5 ( VAR_1 ) . build ( ) ; VAR_2 . show ( ) ; }\n"}
{"problem": "public boolean METHOD_1 ( java.io.File f ) { if ( f . METHOD_2 ( ) ) { return true ; } final java.lang.String VAR_1 = TYPE_1 . METHOD_3 ( f ) ; if ( VAR_1 != null ) { return ( VAR_1 . equals ( STRING_1 ) ) || ( VAR_1 . equals ( STRING_2 ) ) ; } else return false ; }\n", "fixed": "public boolean METHOD_1 ( java.io.File f ) { if ( f . METHOD_2 ( ) ) { return true ; } final java.lang.String VAR_1 = TYPE_1 . METHOD_3 ( f ) ; if ( VAR_1 != null ) { return VAR_1 . equals ( STRING_1 ) ; } else return false ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 . info ( this . METHOD_2 ( ) ) ; java.lang.String fileName = ( ( ( STRING_1 + ( this . VAR_1 ) ) + STRING_2 ) + ( this . VAR_2 ) ) + STRING_3 ; try { METHOD_3 ( ( ( ( VAR_3 ) + fileName ) + STRING_4 ) , ( ( VAR_3 ) + ( this . VAR_1 ) ) ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_4 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) throws java.io.IOException { java.lang.String fileName = ( ( ( STRING_1 + ( this . VAR_1 ) ) + STRING_2 ) + ( this . VAR_2 ) ) + STRING_3 ; try { METHOD_3 ( ( ( ( VAR_3 ) + fileName ) + STRING_4 ) , ( ( VAR_3 ) + ( this . VAR_1 ) ) ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_4 ( ) ; } }\n"}
{"problem": "private void METHOD_1 ( java.lang.String p ) throws java.io.IOException { if ( p . startsWith ( STRING_1 ) ) { java.lang.String [ ] VAR_1 = p . split ( STRING_2 ) ; VAR_2 . METHOD_2 ( VAR_1 [ 1 ] , java.lang.Integer.parseInt ( VAR_1 [ INT_1 ] ) ) ; } else if ( p . startsWith ( STRING_3 ) ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( ) ; } else { VAR_4 . add ( p ) ; java.lang.System.out.println ( ( STRING_4 + p ) ) ; } }\n", "fixed": "private void METHOD_1 ( java.lang.String p ) throws java.io.IOException { if ( p . startsWith ( STRING_1 ) ) { java.lang.String [ ] VAR_1 = p . split ( STRING_2 ) ; VAR_2 . METHOD_2 ( VAR_1 [ 1 ] , java.lang.Integer.parseInt ( VAR_1 [ INT_1 ] ) ) ; } else if ( p . startsWith ( STRING_3 ) ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; } else { VAR_4 . add ( p ) ; java.lang.System.out.println ( ( STRING_4 + p ) ) ; } }\n"}
{"problem": "private java.lang.Object METHOD_1 ( java.util.Map < ? , ? > VAR_1 ) { if ( ( VAR_1 . size ( ) ) == 1 ) { return VAR_1 . values ( ) . iterator ( ) . METHOD_2 ( ) ; } for ( java.lang.String key : VAR_2 ) { if ( VAR_1 . METHOD_3 ( key ) ) { return VAR_1 . get ( VAR_1 ) ; } } return VAR_1 ; }\n", "fixed": "private java.lang.Object METHOD_1 ( java.util.Map < ? , ? > VAR_1 ) { if ( ( VAR_1 . size ( ) ) == 1 ) { return VAR_1 . values ( ) . iterator ( ) . METHOD_2 ( ) ; } for ( java.lang.String key : VAR_2 ) { if ( VAR_1 . METHOD_3 ( key ) ) { return VAR_1 . get ( key ) ; } } return VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; METHOD_11 ( ) ; METHOD_12 ( ) ; METHOD_13 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_10 ( ) ; METHOD_11 ( ) ; METHOD_12 ( ) ; METHOD_13 ( ) ; METHOD_9 ( ) ; }\n"}
{"problem": "public final boolean METHOD_1 ( ) { if ( ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ) && ( ! ( VAR_1 . METHOD_3 ( ) ) ) ) { boolean VAR_2 = VAR_3 ; float offset = java.lang.Math.abs ( VAR_4 ) ; float VAR_5 = VAR_6 ; return ( ! VAR_2 ) || ( VAR_2 && ( offset >= ( 1 - VAR_5 ) ) ) ; } return false ; }\n", "fixed": "public final boolean METHOD_1 ( ) { if ( ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ) && ( ! ( VAR_1 . METHOD_3 ( ) ) ) ) { boolean VAR_2 = VAR_3 ; float offset = java.lang.Math.abs ( VAR_4 ) ; float VAR_5 = VAR_6 ; return ( ! VAR_2 ) || ( VAR_2 && ( offset >= VAR_5 ) ) ; } return false ; }\n"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"problem": "public static TYPE_1 [ ] METHOD_1 ( TYPE_2 index , TYPE_1 method , TYPE_3 VAR_1 ) throws TYPE_4 { if ( ! ( TYPE_5 . METHOD_2 ( method ) ) ) return VAR_2 ; final TYPE_6 VAR_3 = method . METHOD_3 ( ) ; if ( VAR_3 == null ) return VAR_2 ; TYPE_6 [ ] VAR_4 = TYPE_5 . METHOD_4 ( index , VAR_3 ) ; return TYPE_5 . METHOD_1 ( VAR_4 , method , null ) ; }\n", "fixed": "public static TYPE_1 [ ] METHOD_1 ( TYPE_2 index , TYPE_1 method , TYPE_3 VAR_1 ) throws TYPE_4 { if ( ! ( TYPE_5 . METHOD_2 ( method ) ) ) return VAR_2 ; final TYPE_6 VAR_3 = method . METHOD_3 ( ) ; if ( VAR_3 == null ) return VAR_2 ; TYPE_6 [ ] VAR_4 = TYPE_5 . METHOD_4 ( index , VAR_3 ) ; return TYPE_5 . METHOD_1 ( VAR_4 , method , VAR_1 ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 ; if ( ! ( VAR_2 ) ) { VAR_2 = true ; TYPE_2 . METHOD_2 ( this , STRING_1 , VAR_3 ) . show ( ) ; VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_3 ( new TYPE_3 ( ) { public void METHOD_4 ( ) { VAR_2 = false ; } } , INT_1 ) ; } else { METHOD_5 ( ) ; java.lang.System.exit ( 0 ) ; } }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 VAR_1 ; if ( ! ( VAR_2 ) ) { VAR_2 = true ; TYPE_2 . METHOD_2 ( this , STRING_1 , VAR_3 ) . show ( ) ; VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_3 ( new TYPE_3 ( ) { public void METHOD_4 ( ) { VAR_2 = false ; } } , INT_1 ) ; } else { java.lang.System.exit ( 0 ) ; } }\n"}
{"problem": "private void METHOD_1 ( int VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { VAR_2 . METHOD_3 ( VAR_1 , false ) ; VAR_3 . remove ( VAR_1 ) ; if ( VAR_3 . isEmpty ( ) ) VAR_4 . METHOD_4 ( ) ; } else { VAR_2 . METHOD_3 ( VAR_1 , true ) ; VAR_3 . put ( VAR_1 , true ) ; TYPE_1 . i ( getClass ( ) . METHOD_5 ( ) , VAR_3 . toString ( ) ) ; } }\n", "fixed": "private void METHOD_1 ( int VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { VAR_2 . METHOD_3 ( VAR_1 , false ) ; VAR_3 . remove ( VAR_1 ) ; if ( VAR_3 . isEmpty ( ) ) VAR_4 . METHOD_4 ( ) ; } else { VAR_2 . METHOD_3 ( VAR_1 , true ) ; VAR_3 . put ( VAR_1 , true ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( STRING_1 ) ) ) ; int VAR_3 = VAR_4 ; java.util.Collection < TYPE_2 > VAR_5 = ( ( java.util.Collection < TYPE_2 > ) ( VAR_6 . METHOD_3 ( VAR_3 ) ) ) ; if ( VAR_5 . isEmpty ( ) ) { return false ; } else { return true ; } }\n", "fixed": "public boolean METHOD_1 ( ) { if ( ( VAR_2 . METHOD_2 ( STRING_1 ) ) == null ) { return false ; } TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( STRING_1 ) ) ) ; int VAR_3 = VAR_4 ; java.util.Collection < TYPE_2 > VAR_5 = ( ( java.util.Collection < TYPE_2 > ) ( VAR_6 . METHOD_3 ( VAR_3 ) ) ) ; if ( VAR_5 . isEmpty ( ) ) { return false ; } else { return true ; } }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { int VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 == INT_1 ) { if ( VAR_3 . METHOD_3 ( ) ) { { for ( TYPE_1 VAR_4 : TYPE_1 . values ( ) ) { if ( VAR_3 . METHOD_4 ( VAR_4 , VAR_5 ) ) { VAR_3 . METHOD_1 ( VAR_4 , VAR_5 ) ; return ; } } } } } }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { int VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 == INT_1 ) { if ( VAR_3 . METHOD_3 ( ) ) { for ( TYPE_1 VAR_4 : TYPE_1 . values ( ) ) { if ( VAR_3 . METHOD_4 ( VAR_4 , VAR_5 ) ) { VAR_3 . METHOD_1 ( VAR_4 , VAR_5 ) ; return ; } } } } }\n"}
{"problem": "private void METHOD_1 ( ) { if ( VAR_1 ) return ; VAR_1 = true ; TYPE_1 . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( TYPE_3 event ) { METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } } ) ; }\n", "fixed": "private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return ; VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( TYPE_3 event ) { METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } } ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 ) ; this . VAR_1 = VAR_1 ; VAR_2 . setText ( VAR_1 . METHOD_3 ( ) ) ; VAR_3 = 0 ; VAR_4 = 0 ; VAR_5 = 0 ; VAR_6 = 0 ; VAR_7 = 0 ; java.lang.String VAR_8 = TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_9 , STRING_2 ) ; TYPE_2 . METHOD_2 ( ( STRING_3 + VAR_8 ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 ) ; this . VAR_1 = VAR_1 ; VAR_2 . setText ( VAR_1 . METHOD_3 ( ) ) ; VAR_3 = 0 ; VAR_4 = 0 ; VAR_5 = 0 ; VAR_6 = 0 ; VAR_7 = 0 ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) ; int VAR_3 = VAR_1 . METHOD_3 ( ) ; java.util.LinkedList < TYPE_1 > VAR_4 = VAR_1 . METHOD_4 ( ) ; if ( VAR_3 >= ( VAR_4 . size ( ) ) ) { return null ; } return VAR_4 . get ( VAR_3 ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int VAR_3 = VAR_1 . METHOD_3 ( ) ; java.util.LinkedList < TYPE_1 > VAR_4 = VAR_1 . METHOD_4 ( ) ; if ( VAR_3 >= ( VAR_4 . size ( ) ) ) { return null ; } return VAR_4 . get ( VAR_3 ) ; }\n"}
{"fixCommitSHA1": "463750c397e836dbcea5cee0d960c4551f6cebaf", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);", "fixed": "       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);", "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > message , TYPE_2 VAR_1 , boolean VAR_2 ) { if ( ( this . VAR_3 . size ( ) ) > 0 ) { for ( TYPE_3 VAR_4 : VAR_3 ) { VAR_4 . METHOD_1 ( message , VAR_1 , VAR_2 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 < ? > message , TYPE_2 VAR_1 , boolean VAR_2 ) { if ( ( this . size ) > 0 ) { for ( TYPE_3 VAR_4 : VAR_3 ) { VAR_4 . METHOD_1 ( message , VAR_1 , VAR_2 ) ; } } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleSheetsEndpointBuilder\n             extends\n                 GoogleSheetsEndpointConsumerBuilder, GoogleSheetsEndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleSheetsEndpointBuilder\n             extends\n                 GoogleSheetsEndpointConsumerBuilder, GoogleSheetsEndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"problem": "private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 , final TYPE_2 VAR_2 , final TYPE_3 VAR_3 , final TYPE_4 VAR_4 ) { final java.lang.String VAR_5 = ( VAR_1 + STRING_1 ) + ( VAR_3 . METHOD_2 ( ) ) ; final java.lang.String message = VAR_6 . METHOD_3 ( STRING_2 , null , VAR_2 ) ; return METHOD_4 ( STRING_3 , ( ( message + STRING_4 ) + VAR_5 ) , VAR_4 ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 , final TYPE_2 VAR_2 , final TYPE_3 VAR_3 , final TYPE_4 VAR_4 ) { final java.lang.String VAR_5 = ( VAR_1 + STRING_1 ) + ( VAR_3 . METHOD_2 ( ) ) ; final java.lang.String msg = VAR_6 . METHOD_3 ( STRING_2 , null , VAR_2 ) ; return METHOD_4 ( STRING_3 , ( ( msg + STRING_4 ) + VAR_5 ) , VAR_4 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 a = new TYPE_2 ( ) ; a . METHOD_2 ( this , VAR_2 ) ; a . show ( METHOD_3 ( ) , STRING_1 ) ; METHOD_4 ( ) . METHOD_5 ( 0 ) . METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 a = new TYPE_2 ( ) ; a . METHOD_2 ( this , VAR_2 ) ; a . show ( METHOD_3 ( ) , STRING_1 ) ; METHOD_4 ( ) . METHOD_5 ( 1 ) . METHOD_6 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( ( ( ( STRING_1 + ( VAR_3 ) ) + STRING_2 ) + VAR_1 ) ) ; if ( ( VAR_1 == ( VAR_3 ) ) && ( ! ( METHOD_3 ( ) ) ) ) return ; VAR_3 = VAR_1 ; TYPE_1 . METHOD_4 ( VAR_1 ) ; if ( ( ( VAR_4 ) != null ) && ( ( VAR_5 ) != null ) ) build ( ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( ( ( ( STRING_1 + ( VAR_3 ) ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 = VAR_1 ; TYPE_1 . METHOD_4 ( VAR_1 ) ; if ( ( ( VAR_4 ) != null ) && ( ( VAR_5 ) != null ) ) build ( ) ; }\n"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int status ) { if ( status == ( VAR_2 ) ) { METHOD_2 ( VAR_3 ) ; METHOD_3 ( ) ; TYPE_2 . i ( VAR_4 , ( STRING_1 + status ) ) ; } else { TYPE_2 . i ( VAR_4 , ( STRING_1 + status ) ) ; METHOD_2 ( VAR_5 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int status ) { if ( status == ( VAR_2 ) ) { METHOD_2 ( VAR_3 ) ; METHOD_3 ( ) ; TYPE_2 . i ( VAR_4 , ( STRING_1 + status ) ) ; } else { TYPE_2 . i ( VAR_4 , ( STRING_1 + status ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Long VAR_2 ) { VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_1 VAR_4 = METHOD_3 ( VAR_1 ) ; VAR_5 . update ( VAR_4 , VAR_1 , VAR_2 ) ; VAR_5 . METHOD_4 ( VAR_1 , VAR_3 , VAR_2 ) ; VAR_6 . METHOD_5 ( VAR_1 , VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Long VAR_2 ) { VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_1 VAR_4 = METHOD_3 ( VAR_1 ) ; VAR_5 . update ( VAR_4 , VAR_1 , VAR_2 ) ; VAR_5 . METHOD_4 ( VAR_4 , VAR_3 , VAR_2 ) ; VAR_6 . METHOD_5 ( VAR_4 , VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 . METHOD_3 ( ) . METHOD_5 ( ) , STRING_1 ) ; VAR_1 . METHOD_6 ( new TYPE_3 ( VAR_2 , VAR_1 ) ) ; VAR_2 . METHOD_6 ( VAR_4 ) ; TYPE_4 . METHOD_7 ( ) . METHOD_8 ( VAR_2 ) ; VAR_4 . METHOD_9 ( VAR_2 ) ; this . VAR_4 . METHOD_10 ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 . METHOD_3 ( ) . METHOD_5 ( ) , STRING_1 ) ; new TYPE_3 ( VAR_2 , VAR_1 ) ; VAR_2 . METHOD_6 ( VAR_4 ) ; TYPE_4 . METHOD_7 ( ) . METHOD_8 ( VAR_2 ) ; VAR_4 . METHOD_9 ( VAR_2 ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . getClass ( ) . METHOD_2 ( VAR_2 class ) ) { METHOD_1 ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ; } if ( VAR_1 . getClass ( ) . METHOD_2 ( VAR_3 class ) ) { METHOD_1 ( ( ( TYPE_3 ) ( VAR_1 ) ) ) ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return METHOD_1 ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ; } if ( VAR_1 instanceof TYPE_3 ) { return METHOD_1 ( ( ( TYPE_3 ) ( VAR_1 ) ) ) ; } return false ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Integer VAR_2 ) { for ( TYPE_2 VAR_3 : VAR_4 ) if ( ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_1 . METHOD_3 ( ) ) ) { VAR_3 . METHOD_4 ( VAR_2 ) ; return ; } TYPE_2 VAR_5 = new TYPE_2 ( VAR_1 ) ; if ( VAR_2 != null ) VAR_5 . METHOD_4 ( VAR_2 ) ; this . VAR_4 . add ( VAR_5 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Integer VAR_2 ) { for ( TYPE_2 VAR_3 : VAR_4 ) if ( ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_1 . METHOD_3 ( ) ) ) { if ( VAR_2 != null ) VAR_3 . METHOD_4 ( VAR_2 ) ; return ; } TYPE_2 VAR_5 = new TYPE_2 ( VAR_1 ) ; if ( VAR_2 != null ) VAR_5 . METHOD_4 ( VAR_2 ) ; this . VAR_4 . add ( VAR_5 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_1 . METHOD_3 ( this ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_2 ( VAR_4 ) ) ) ; VAR_5 = METHOD_2 ( VAR_6 ) ; ( ( TYPE_2 ) ( METHOD_2 ( VAR_7 . title ) ) ) . setText ( VAR_8 . getString ( VAR_9 ) ) ; METHOD_4 ( true ) ; METHOD_5 ( false , STRING_1 ) ; METHOD_6 ( ) ; }\n", "fixed": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; ( ( TYPE_2 ) ( METHOD_2 ( VAR_7 . title ) ) ) . setText ( VAR_8 . getString ( VAR_9 ) ) ; METHOD_4 ( true ) ; METHOD_5 ( false , STRING_1 ) ; METHOD_6 ( ) ; }\n"}
{"problem": "private void METHOD_1 ( int index ) { if ( ( answer ) != ( VAR_1 . METHOD_2 ( ) . get ( ( ( VAR_2 ) - 1 ) ) . METHOD_3 ( ) ) ) { VAR_3 = VAR_4 . METHOD_4 ( VAR_1 . METHOD_2 ( ) . get ( ( ( VAR_2 ) - 1 ) ) . METHOD_3 ( ) , STRING_1 , VAR_5 ) ; } else { VAR_3 = STRING_2 ; } VAR_6 = true ; METHOD_5 ( VAR_7 ) ; }\n", "fixed": "private void METHOD_1 ( ) { if ( ( answer ) != ( VAR_1 . METHOD_2 ( ) . get ( ( ( VAR_2 ) - 1 ) ) . METHOD_3 ( ) ) ) { VAR_3 = VAR_4 . METHOD_4 ( VAR_1 . METHOD_2 ( ) . get ( ( ( VAR_2 ) - 1 ) ) . METHOD_3 ( ) , STRING_1 , VAR_5 ) ; } else { VAR_3 = STRING_2 ; } VAR_6 = true ; METHOD_5 ( VAR_7 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( final double VAR_1 , final double VAR_2 , final int VAR_3 ) { this . VAR_4 . put ( TYPE_2 . name ( ) , VAR_1 ) ; this . VAR_4 . put ( TYPE_3 . name ( ) , VAR_2 ) ; this . VAR_4 . put ( TYPE_4 . name ( ) , VAR_3 ) ; return this ; }\n", "fixed": "public TYPE_1 METHOD_1 ( final double VAR_1 , final double VAR_2 , final int VAR_3 ) { this . VAR_4 . put ( TYPE_2 . getName ( ) , VAR_1 ) ; this . VAR_4 . put ( TYPE_3 . getName ( ) , VAR_2 ) ; this . VAR_4 . put ( TYPE_4 . getName ( ) , VAR_3 ) ; return this ; }\n"}
{"problem": "public static java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , java.lang.Boolean VAR_2 ) { java.net.URL url = TYPE_2 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = null ; VAR_4 = VAR_2 ; try { VAR_3 = TYPE_2 . METHOD_3 ( url ) ; } catch ( java.io.IOException VAR_5 ) { TYPE_3 . METHOD_4 ( VAR_6 , STRING_1 , VAR_5 ) ; } java.util.List < TYPE_1 > VAR_7 = METHOD_5 ( VAR_3 , VAR_4 ) ; return VAR_7 ; }\n", "fixed": "public static java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , java.lang.Boolean VAR_2 ) { java.net.URL url = TYPE_2 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = null ; VAR_4 = VAR_2 ; try { VAR_3 = TYPE_2 . METHOD_3 ( url ) ; } catch ( java.io.IOException VAR_5 ) { TYPE_3 . METHOD_4 ( VAR_6 , STRING_1 , VAR_5 ) ; } java.util.List < TYPE_1 > VAR_7 = TYPE_2 . METHOD_5 ( VAR_3 , VAR_4 ) ; return VAR_7 ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = false ; java.util.Iterator iterator = VAR_3 . iterator ( ) ; while ( iterator . METHOD_2 ( ) ) { TYPE_2 p = ( ( TYPE_2 ) ( iterator . METHOD_3 ( ) ) ) ; TYPE_3 . get ( p ) . VAR_4 = false ; TYPE_3 . get ( p ) . METHOD_4 ( true ) ; p . METHOD_5 ( false , false , true ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Iterator iterator = VAR_3 . iterator ( ) ; while ( iterator . METHOD_2 ( ) ) { TYPE_2 p = ( ( TYPE_2 ) ( iterator . METHOD_3 ( ) ) ) ; TYPE_3 . get ( p ) . METHOD_5 ( true , false , false , true ) ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ZooKeeperMasterEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedZooKeeperMasterEndpointBuilder advanced() {", "fixed": "     \n    public interface ZooKeeperMasterEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedZooKeeperMasterEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"problem": "public boolean METHOD_1 ( ) { this . VAR_1 = null ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; java.lang.String VAR_3 = VAR_2 . METHOD_5 ( this . VAR_4 ) ; if ( VAR_3 == STRING_1 ) { this . value = true ; return true ; } else if ( VAR_3 == null ) { this . value = false ; return true ; } else { VAR_1 = STRING_2 ; return false ; } }\n", "fixed": "public boolean METHOD_1 ( ) { this . VAR_1 = null ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; java.lang.String VAR_3 = VAR_2 . METHOD_5 ( this . VAR_4 ) ; if ( VAR_3 == null ) { this . value = false ; return true ; } else if ( VAR_3 . equals ( STRING_1 ) ) { this . value = true ; return true ; } else { VAR_1 = STRING_2 ; return false ; } }\n"}
{"problem": "protected void METHOD_1 ( ) throws java.lang.Throwable { super . METHOD_1 ( ) ; VAR_1 . info ( ( STRING_1 + ( VAR_2 ) ) ) ; java.lang.System.out.println ( ( STRING_1 + ( VAR_2 ) ) ) ; if ( ( VAR_3 ) != null ) VAR_3 . METHOD_2 ( ) ; else { if ( ( writer ) != null ) writer . METHOD_2 ( ) ; if ( ( VAR_4 ) != null ) VAR_4 . METHOD_2 ( ) ; } }\n", "fixed": "protected void METHOD_1 ( ) throws java.lang.Throwable { super . METHOD_1 ( ) ; VAR_1 . info ( ( STRING_1 + ( VAR_2 ) ) ) ; if ( ( VAR_3 ) != null ) VAR_3 . METHOD_2 ( ) ; else { if ( ( writer ) != null ) writer . METHOD_2 ( ) ; if ( ( VAR_4 ) != null ) VAR_4 . METHOD_2 ( ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = null ; TYPE_2 VAR_3 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 != null ) { VAR_2 = VAR_3 . METHOD_3 ( ) ; java.lang.System.out.println ( VAR_3 . METHOD_4 ( ) ) ; if ( ! ( VAR_2 . equals ( STRING_1 ) ) ) { return VAR_2 ; } VAR_2 = null ; } return VAR_2 ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = null ; TYPE_2 VAR_3 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 != null ) { VAR_2 = VAR_3 . METHOD_3 ( ) ; if ( ! ( VAR_2 . equals ( STRING_1 ) ) ) { return VAR_2 ; } VAR_2 = null ; } return VAR_2 ; }\n"}
{"problem": "void METHOD_1 ( boolean VAR_1 ) { if ( VAR_2 ) { java.lang.String line = STRING_1 ; try { if ( VAR_1 || ( VAR_3 . METHOD_2 ( ) ) ) { line = VAR_3 . METHOD_3 ( ) ; METHOD_4 ( line ) ; } } catch ( java.io.IOException VAR_4 ) { java.lang.System.err.println ( ( STRING_2 + VAR_4 ) ) ; java.lang.System.exit ( 1 ) ; } } }\n", "fixed": "void METHOD_1 ( boolean VAR_1 ) { if ( VAR_2 ) { java.lang.String line = STRING_1 ; try { if ( VAR_1 || ( VAR_3 . METHOD_2 ( ) ) ) { line = VAR_3 . METHOD_3 ( ) ; if ( line == null ) return ; METHOD_4 ( line ) ; } } catch ( java.io.IOException VAR_4 ) { java.lang.System.err.println ( ( STRING_2 + VAR_4 ) ) ; java.lang.System.exit ( 1 ) ; } } }\n"}
{"problem": "public void METHOD_1 ( android.view.View view ) { METHOD_2 ( VAR_1 ) ; if ( ( VAR_2 ) == true ) { VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_2 = false ; } else if ( ( VAR_2 ) == false ) { VAR_3 . METHOD_3 ( VAR_5 ) ; VAR_2 = true ; } if ( ( VAR_6 ) == true ) { VAR_7 . METHOD_3 ( VAR_4 ) ; } else if ( ( VAR_6 ) == false ) { VAR_7 . METHOD_3 ( VAR_5 ) ; VAR_6 = true ; } }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { if ( ( VAR_2 ) == true ) { VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_2 = false ; } else if ( ( VAR_2 ) == false ) { METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_5 ) ; VAR_2 = true ; } if ( ( VAR_6 ) == true ) { VAR_7 . METHOD_3 ( VAR_4 ) ; } else if ( ( VAR_6 ) == false ) { VAR_7 . METHOD_3 ( VAR_5 ) ; VAR_6 = true ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_3 < TYPE_2 > response ) { VAR_2 . add ( new TYPE_4 ( METHOD_2 ( VAR_3 ) , ( ( int ) ( response . METHOD_3 ( ) . rows . get ( 0 ) . VAR_4 . get ( 0 ) . VAR_5 . value ) ) ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_3 < TYPE_2 > response ) { int VAR_5 = ( ( int ) ( response . METHOD_3 ( ) . rows . get ( 0 ) . VAR_4 . get ( 0 ) . VAR_5 . value ) ) ; VAR_2 . add ( new TYPE_4 ( METHOD_2 ( VAR_3 ) , VAR_5 ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { if ( ( this . VAR_1 ) == 0 ) return null ; TYPE_1 VAR_2 = VAR_3 [ 0 ] ; ( this . VAR_1 ) -- ; TYPE_1 t = VAR_3 [ this . VAR_1 ] ; METHOD_2 ( t , 0 ) ; return VAR_2 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { if ( ( this . VAR_1 ) == 0 ) return null ; TYPE_1 VAR_2 = VAR_3 [ 0 ] ; ( this . VAR_1 ) -- ; VAR_3 [ 0 ] = VAR_3 [ this . VAR_1 ] ; VAR_3 [ this . VAR_1 ] = null ; METHOD_2 ( 0 ) ; return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View view ) { if ( ( VAR_1 ) != ( - 1 ) ) { this . METHOD_2 ( ) . METHOD_3 ( ( ( TYPE_1 ) ( VAR_2 . METHOD_4 ( VAR_1 ) ) ) ) ; } this . METHOD_2 ( ) . METHOD_3 ( this ) ; VAR_1 = this . METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { if ( ( VAR_1 ) != ( - 1 ) ) { this . METHOD_2 ( ) . METHOD_3 ( ( ( TYPE_1 ) ( VAR_2 . METHOD_4 ( VAR_1 ) ) ) ) ; } this . METHOD_2 ( ) . METHOD_3 ( this ) ; VAR_1 = ( ( VAR_1 ) == ( this . METHOD_5 ( ) ) ) ? - 1 : this . METHOD_5 ( ) ; }\n"}
{"problem": "private int METHOD_1 ( java.lang.String [ ] VAR_1 , java.lang.String [ ] VAR_2 , int VAR_3 ) { int result = 0 ; while ( result < VAR_3 ) { if ( ! ( VAR_1 [ result ] . equals ( VAR_2 [ result ] ) ) ) { return VAR_3 ; } result ++ ; } return result ; }\n", "fixed": "static int METHOD_1 ( java.lang.String [ ] VAR_1 , java.lang.String [ ] VAR_2 , int VAR_3 ) { int result = 0 ; while ( result < VAR_3 ) { if ( ! ( VAR_1 [ result ] . equals ( VAR_2 [ result ] ) ) ) { break ; } result ++ ; } return result ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { if ( VAR_1 ) { TYPE_2 VAR_2 = VAR_3 ; java.util.List < TYPE_3 > VAR_4 = VAR_2 . METHOD_2 ( VAR_5 class , VAR_6 ) ; for ( TYPE_3 VAR_7 : VAR_4 ) { TYPE_4 VAR_8 = VAR_7 . METHOD_3 ( ) ; if ( ( VAR_8 != null ) && ( ( VAR_8 . METHOD_4 ( ) ) instanceof TYPE_5 ) ) TYPE_6 . METHOD_5 ( VAR_7 ) . METHOD_6 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { if ( VAR_1 ) { TYPE_2 VAR_2 = VAR_3 ; java.util.List < TYPE_3 > VAR_4 = VAR_2 . METHOD_2 ( VAR_5 class , VAR_6 ) ; for ( TYPE_3 VAR_7 : VAR_4 ) TYPE_6 . METHOD_5 ( VAR_7 ) . METHOD_6 ( ) ; } }\n"}
{"problem": "protected void METHOD_1 ( ) { if ( ( ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ) != ( VAR_3 ) ) && ( ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 ) ) != ( VAR_3 ) ) ) { TYPE_1 . METHOD_3 ( ( ( TYPE_2 ) ( VAR_1 ) ) , new java.lang.String [ ] { VAR_2 } , VAR_5 ) ; return ; } TYPE_3 . METHOD_4 ( VAR_6 , VAR_7 , VAR_8 ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ( ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ) != ( VAR_3 ) ) && ( ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 ) ) != ( VAR_3 ) ) ) { TYPE_1 . METHOD_3 ( ( ( TYPE_2 ) ( VAR_1 ) ) , new java.lang.String [ ] { VAR_2 } , VAR_5 ) ; return ; } TYPE_3 . METHOD_4 ( VAR_6 , VAR_7 , VAR_8 ) ; }\n"}
{"problem": "public int diff ( TYPE_1 < TYPE_2 > . VAR_1 b ) { int VAR_2 ; if ( ( ( VAR_3 ) == null ) && ( ( VAR_4 ) == null ) ) VAR_2 = 1 ; else if ( ( VAR_3 ) == null ) VAR_2 = - ( VAR_4 . height ) ; else if ( ( VAR_4 ) == null ) VAR_2 = VAR_3 . height ; else { VAR_2 = ( VAR_3 . height ) - ( VAR_4 . height ) ; } return VAR_2 ; }\n", "fixed": "public int diff ( TYPE_1 < TYPE_2 > . VAR_1 b ) { int VAR_2 ; if ( ( ( VAR_3 ) == null ) && ( ( VAR_4 ) == null ) ) VAR_2 = 0 ; else if ( ( VAR_3 ) == null ) VAR_2 = - ( VAR_4 . height ) ; else if ( ( VAR_4 ) == null ) VAR_2 = VAR_3 . height ; else { VAR_2 = ( VAR_3 . height ) - ( VAR_4 . height ) ; } return VAR_2 ; }\n"}
{"fixCommitSHA1": "7369734ba2477dc5f208c9bcdbf438d42e92ac25", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": "  * {@link Table} with a single cell but is more lightweight.\n  * @author Nathan Sweet */\n public class Container<T extends Actor> extends WidgetGroup {\n\tprivate Actor actor;\n \tprivate Value minWidth = Value.minWidth, minHeight = Value.minHeight;\n \tprivate Value prefWidth = Value.prefWidth, prefHeight = Value.prefHeight;\n \tprivate Value maxWidth = Value.zero, maxHeight = Value.zero;", "fixed": "  * {@link Table} with a single cell but is more lightweight.\n  * @author Nathan Sweet */\n public class Container<T extends Actor> extends WidgetGroup {\n\tprivate T actor;\n \tprivate Value minWidth = Value.minWidth, minHeight = Value.minHeight;\n \tprivate Value prefWidth = Value.prefWidth, prefHeight = Value.prefHeight;\n \tprivate Value maxWidth = Value.zero, maxHeight = Value.zero;", "sourceBeforeFix": "Actor actor", "sourceAfterFix": "T actor"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public int METHOD_1 ( ) { final int VAR_1 = INT_1 ; int VAR_2 = VAR_1 * ( getName ( ) . METHOD_1 ( ) ) ; VAR_2 = VAR_1 + ( null == ( METHOD_2 ( ) ) ? 0 : METHOD_2 ( ) . METHOD_1 ( ) ) ; return VAR_2 ; }\n", "fixed": "public int METHOD_1 ( ) { final int VAR_1 = INT_1 ; int VAR_2 = VAR_1 * ( getName ( ) . METHOD_1 ( ) ) ; VAR_2 = VAR_2 + ( null == ( METHOD_2 ( ) ) ? 0 : METHOD_2 ( ) . METHOD_1 ( ) ) ; return VAR_2 ; }\n"}
{"problem": "public boolean METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 , int VAR_2 , java.util.Set < java.lang.String > VAR_3 , java.util.Set < TYPE_1 > VAR_4 , TYPE_2 VAR_5 , double VAR_6 ) throws java.io.IOException , TYPE_3 { double VAR_7 = VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , this ) ; if ( VAR_7 >= VAR_6 ) { return true ; } else { return false ; } }\n", "fixed": "public boolean METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 , int VAR_2 , java.util.Set < java.lang.String > VAR_3 , java.util.Map < java.lang.String , java.util.Set < TYPE_1 > > VAR_4 , TYPE_2 VAR_5 , double VAR_6 ) throws java.io.IOException , TYPE_3 { double VAR_7 = VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , this ) ; if ( VAR_7 >= VAR_6 ) { return true ; } else { return false ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return The length of the data type, or <code>-1</code> for variable length data types.\n \t */\n\tpublic int getLength();", "fixed": " \t * \n \t * @return The length of the data type, or <code>-1</code> for variable length data types.\n \t */\n\tpublic abstract int getLength();", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "private java.lang.Boolean METHOD_1 ( int VAR_1 , int VAR_2 , int size ) { int VAR_3 = METHOD_2 ( VAR_1 ) ; int VAR_4 = METHOD_3 ( VAR_2 ) ; for ( int VAR_5 = VAR_3 ; VAR_5 < ( VAR_3 + INT_1 ) ; VAR_5 ++ ) { for ( int c = VAR_4 ; c < ( VAR_4 + INT_1 ) ; c ++ ) { if ( ( values [ VAR_5 ] [ c ] ) == size ) { return true ; } } } return false ; }\n", "fixed": "private java.lang.Boolean METHOD_1 ( int VAR_1 , int VAR_2 , int size ) { int VAR_3 = VAR_1 / INT_1 ; int VAR_4 = VAR_2 / INT_1 ; for ( int VAR_5 = VAR_3 ; VAR_5 < ( VAR_3 + INT_1 ) ; VAR_5 ++ ) { for ( int c = VAR_4 ; c < ( VAR_4 + INT_1 ) ; c ++ ) { if ( ( values [ VAR_5 ] [ c ] ) == size ) { return true ; } } } return false ; }\n"}
{"problem": "public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 ( ) { public void METHOD_3 ( ) { VAR_1 . setText ( TYPE_2 . get ( ) ) ; VAR_2 . METHOD_2 ( new TYPE_1 ( ) { public void METHOD_3 ( ) { VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_2 . METHOD_5 ( ) ; } } ) ; } } ) ; }\n", "fixed": "public static void METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_2 ) == null ) ) return ; VAR_1 . METHOD_2 ( new TYPE_1 ( ) { public void METHOD_3 ( ) { VAR_1 . setText ( TYPE_2 . get ( ) ) ; VAR_2 . METHOD_2 ( new TYPE_1 ( ) { public void METHOD_3 ( ) { VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_2 . METHOD_5 ( ) ; } } ) ; } } ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; for ( TYPE_2 VAR_2 : VAR_3 . METHOD_3 ( ) ) { java.util.Set < java.lang.String > VAR_4 = new java.util.HashSet < > ( ) ; for ( java.lang.String VAR_5 : VAR_3 . get ( VAR_2 ) ) { if ( VAR_5 . equals ( VAR_1 ) ) { VAR_4 . add ( VAR_1 ) ; } } VAR_3 . get ( VAR_2 ) . METHOD_4 ( VAR_4 ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . info ( STRING_1 , VAR_1 ) ; for ( TYPE_2 VAR_2 : VAR_3 . METHOD_3 ( ) ) { java.util.Set < java.lang.String > VAR_4 = new java.util.HashSet < > ( ) ; for ( java.lang.String VAR_5 : VAR_3 . get ( VAR_2 ) ) { if ( VAR_5 . equals ( VAR_1 ) ) { VAR_4 . add ( VAR_1 ) ; } } VAR_3 . get ( VAR_2 ) . METHOD_4 ( VAR_4 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , int rows , int VAR_2 , boolean VAR_3 , long VAR_4 , java.lang.String VAR_5 ) { VAR_1 . METHOD_2 ( VAR_6 , null , new TYPE_2 ( ) . METHOD_3 ( VAR_2 ) . METHOD_4 ( rows ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_4 ) . METHOD_7 ( VAR_5 ) . METHOD_8 ( ) ) ; return VAR_1 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , int rows , int VAR_2 , boolean VAR_3 , long VAR_4 , java.lang.String VAR_5 ) { VAR_1 . METHOD_2 ( VAR_6 , null , new TYPE_2 ( ) . METHOD_3 ( VAR_2 ) . METHOD_4 ( rows ) . METHOD_5 ( true ) . METHOD_6 ( VAR_4 ) . METHOD_7 ( VAR_5 ) . METHOD_8 ( ) ) ; return VAR_1 ; }\n"}
{"problem": "public static void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( VAR_4 class ) . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( STRING_1 ) ) . METHOD_6 ( VAR_1 ) ) . first ( ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_7 ( VAR_2 ) ; VAR_3 . METHOD_8 ( ) ; } else { TYPE_1 VAR_5 = new TYPE_1 ( VAR_1 , VAR_6 , VAR_7 , VAR_8 ) ; VAR_5 . METHOD_8 ( ) ; } }\n", "fixed": "public static void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( VAR_4 class ) . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( STRING_1 ) ) . METHOD_6 ( VAR_1 ) ) . first ( ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_7 ( VAR_2 ) ; VAR_3 . METHOD_8 ( ) ; } else { TYPE_1 VAR_5 = new TYPE_1 ( VAR_1 , VAR_6 , VAR_7 , VAR_2 ) ; VAR_5 . METHOD_8 ( ) ; } }\n"}
{"problem": "public static int METHOD_1 ( char c ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { if ( ( VAR_1 [ i ] ) == c ) return i ; } throw new TYPE_1 ( STRING_1 ) ; }\n", "fixed": "public static int METHOD_1 ( char c ) throws java.lang.Exception { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { if ( ( VAR_1 [ i ] ) == c ) return i ; } throw new java.lang.Exception ( STRING_1 ) ; }\n"}
{"problem": "private void METHOD_1 ( final TYPE_1 VAR_1 , int position ) { TYPE_2 VAR_2 = VAR_3 . get ( position ) ; VAR_4 . setText ( VAR_2 . METHOD_2 ( ) ) ; VAR_5 . setText ( VAR_2 . METHOD_3 ( ) ) ; TYPE_3 . METHOD_4 ( STRING_1 , ( ( ( STRING_2 + ( VAR_2 . METHOD_5 ( ) ) ) + STRING_3 ) + ( VAR_2 . METHOD_6 ( ) ) ) ) ; VAR_6 . setText ( VAR_2 . METHOD_5 ( ) ) ; VAR_7 . setText ( VAR_2 . METHOD_6 ( ) ) ; }\n", "fixed": "private void METHOD_1 ( final TYPE_1 VAR_1 , int position ) { TYPE_2 VAR_2 = VAR_3 . get ( position ) ; VAR_4 . setText ( VAR_2 . METHOD_2 ( ) ) ; VAR_5 . setText ( VAR_2 . METHOD_3 ( ) ) ; VAR_6 . setText ( VAR_2 . METHOD_5 ( ) ) ; VAR_7 . setText ( VAR_2 . METHOD_6 ( ) ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int position ) { if ( ( VAR_2 ) != null ) { VAR_3 . setText ( METHOD_2 ( position ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; VAR_4 . setText ( METHOD_2 ( position ) . METHOD_3 ( ) . METHOD_5 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int position ) { if ( ( VAR_2 ) != null ) { VAR_3 . setText ( METHOD_2 ( position ) . METHOD_4 ( ) ) ; VAR_4 . setText ( METHOD_2 ( position ) . METHOD_5 ( ) ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "         }\n       }\n     }\n    logger.info(\"Renamed \" + instancesRenamed + \" instances of \"\n                 + propsRenamed + \" properties.\");\n    logger.info(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n                 + \"properties, \" + propsSkipped + \" instances of properties \"\n                 + \"that were skipped for specific types and \" + singleTypeProps\n                 + \" properties that were referenced from only one type.\");", "fixed": "         }\n       }\n     }\n    logger.fine(\"Renamed \" + instancesRenamed + \" instances of \"\n                 + propsRenamed + \" properties.\");\n    logger.fine(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n                 + \"properties, \" + propsSkipped + \" instances of properties \"\n                 + \"that were skipped for specific types and \" + singleTypeProps\n                 + \" properties that were referenced from only one type.\");", "sourceBeforeFix": "logger.info(\"Renamed \" + instancesRenamed + \" instances of \"+ propsRenamed+ \" properties.\")", "sourceAfterFix": "logger.fine(\"Renamed \" + instancesRenamed + \" instances of \"+ propsRenamed+ \" properties.\")"}
{"fixCommitSHA1": "2a88a3de65a60011e86c05a4eb31182521fc4544", "projectName": "naver.pinpoint", "bugType": "Wrong Function Name", "problem": "             logger.debug(\"Asynchronous invocation. asyncContext={}\", asyncContext);\n         }\n        final Trace trace = asyncContext.continueAsyncTraceObject();\n         if (trace == null) {\n             return;\n         }", "fixed": "             logger.debug(\"Asynchronous invocation. asyncContext={}\", asyncContext);\n         }\n        final Trace trace = asyncContext.currentAsyncTraceObject();\n         if (trace == null) {\n             return;\n         }", "sourceBeforeFix": "asyncContext.continueAsyncTraceObject()", "sourceAfterFix": "asyncContext.currentAsyncTraceObject()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 < java.util.List < java.util.Date > > VAR_1 ) { try { java.util.List < java.util.Date > VAR_2 = VAR_1 . get ( ) ; if ( ( VAR_2 . size ( ) ) == INT_1 ) { this . VAR_1 = TYPE_1 . METHOD_2 ( VAR_1 . get ( ) . get ( 1 ) ) ; } else { this . VAR_1 = TYPE_1 . METHOD_3 ( ) ; } } catch ( TYPE_2 VAR_3 ) { throw new TYPE_3 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 < java.util.List < java.util.Date > > VAR_1 ) { try { java.util.List < java.util.Date > VAR_2 = VAR_1 . get ( ) ; if ( ( VAR_2 . size ( ) ) == INT_1 ) { this . VAR_1 = TYPE_1 . METHOD_2 ( VAR_1 . get ( ) . get ( 1 ) ) ; } else { throw new TYPE_2 ( ) ; } } catch ( TYPE_2 VAR_3 ) { this . VAR_1 = TYPE_1 . METHOD_3 ( ) ; } }\n"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "a27f765d8c91708483d0e1c6fe8a37676b7bd24d", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "   @Test\n   public void createFileWithTtlTest() throws Exception {\n     CreateFileOptions options =\n        CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(1);\n     long fileId = mFileSystemMaster.createFile(NESTED_FILE_URI, options);\n     FileInfo fileInfo = mFileSystemMaster.getFileInfo(fileId);\n     Assert.assertEquals(fileInfo.getFileId(), fileId);", "fixed": "   @Test\n   public void createFileWithTtlTest() throws Exception {\n     CreateFileOptions options =\n        CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(0);\n     long fileId = mFileSystemMaster.createFile(NESTED_FILE_URI, options);\n     FileInfo fileInfo = mFileSystemMaster.getFileInfo(fileId);\n     Assert.assertEquals(fileInfo.getFileId(), fileId);", "sourceBeforeFix": "CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(1)", "sourceAfterFix": "CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(0)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void execute ( ) { if ( VAR_1 . METHOD_1 ( ) ) { VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) , VAR_1 . METHOD_3 ( INT_1 ) , 1.0 ) ; } else { VAR_2 . METHOD_2 ( VAR_1 . METHOD_4 ( ) , VAR_3 . METHOD_5 ( ) , ( ( VAR_3 . METHOD_6 ( ) ) + FLOAT_1 ) ) ; } }\n", "fixed": "protected void execute ( ) { if ( VAR_1 . METHOD_1 ( ) ) { VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) , VAR_1 . METHOD_3 ( INT_1 ) , 1.0 ) ; } else { VAR_2 . METHOD_2 ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) , ( ( VAR_1 . METHOD_6 ( ) ) + FLOAT_1 ) ) ; } }\n"}
{"fixCommitSHA1": "c5da37a16d63469dcf2ee85ca1f96dc6b6799cea", "projectName": "iluwatar.java-design-patterns", "bugType": "Change Identifier Used", "problem": " public class App {\r\n \tpublic static void main(String[] args) {\r\n\t\tGnomeEngineeringManager manager = new GnomeEngineeringManager();\r\n \t\tmanager.operateDevice();\r\n \t}\r\n }\r", "fixed": " public class App {\r\n \tpublic static void main(String[] args) {\r\n\t\tEngineer manager = new GnomeEngineeringManager();\r\n \t\tmanager.operateDevice();\r\n \t}\r\n }\r", "sourceBeforeFix": "GnomeEngineeringManager manager=new GnomeEngineeringManager(); ", "sourceAfterFix": "Engineer manager=new GnomeEngineeringManager(); "}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"problem": "public void METHOD_1 ( java.lang.String key , java.lang.String value ) { if ( ( ( ( VAR_1 ) == null ) || ( ( VAR_1 . METHOD_2 ( ) ) == null ) ) || ( ( VAR_1 . METHOD_2 ( ) . getType ( ) ) == ( VAR_2 ) ) ) { return ; } VAR_1 . METHOD_2 ( ) . METHOD_3 ( key , new TYPE_1 ( TYPE_2 . METHOD_4 ( ) , value ) ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String key , java.lang.String value ) { if ( ( ( ( VAR_1 ) == null ) || ( ( VAR_1 . METHOD_2 ( ) ) == null ) ) || ( ( VAR_1 . METHOD_2 ( ) . getType ( ) ) != ( VAR_2 ) ) ) { return ; } VAR_1 . METHOD_2 ( ) . METHOD_3 ( key , new TYPE_1 ( TYPE_2 . METHOD_4 ( ) , value ) ) ; }\n"}
{"fixCommitSHA1": "3b8080d4f13c4e36a27cf0a35266fe673b228a63", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "         meta.setContentMD5(new String(Base64.encode(mHash.digest())));\n       }\n       meta.setContentLength(mFile.length());\n      meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM);", "fixed": "         meta.setContentMD5(new String(Base64.encode(mHash.digest())));\n       }\n       meta.setContentLength(mFile.length());\n      meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM);", "sourceBeforeFix": "meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)", "sourceAfterFix": "meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)"}
{"problem": "private void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) { VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; } else { VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) ) { VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; } else { VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; } }\n"}
{"problem": "public final TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_2 ( ( STRING_1 + STRING_2 ) ) ; } if ( ( VAR_2 ) == null ) { throw new TYPE_3 ( ( STRING_3 + ( getClass ( ) . METHOD_2 ( ) ) ) ) ; } VAR_1 = false ; return VAR_2 ; }\n", "fixed": "public final TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_2 ( ( STRING_1 + STRING_2 ) ) ; } if ( ( VAR_2 ) == null ) { throw new TYPE_3 ( ( STRING_3 + ( getClass ( ) . getName ( ) ) ) ) ; } VAR_1 = false ; return VAR_2 ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"problem": "public TYPE_1 [ ] METHOD_1 ( ) { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 . size ( ) ] ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { VAR_1 [ i ] = new TYPE_2 ( i , ( ( STRING_1 + i ) + STRING_2 ) ) ; } return VAR_1 ; }\n", "fixed": "public TYPE_1 [ ] METHOD_1 ( ) { if ( ( ( VAR_2 ) == null ) || ( VAR_2 . isEmpty ( ) ) ) { return new TYPE_1 [ ] { } ; } else { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 . size ( ) ] ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { VAR_1 [ i ] = new TYPE_2 ( i , ( ( STRING_1 + i ) + STRING_2 ) ) ; } return VAR_1 ; } }\n"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n          mBuf.array()[0] = (byte) (k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();", "fixed": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "7109f6f55968c830c5f43ff798e106ef2f14c71c", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "                 eq((byte) 0),\n                 eq(new GeneralDataCoding(\n                         false,\n                        false,\n                         MessageClass.CLASS1,\n                         Alphabet.ALPHA_8_BIT)),\n                 eq((byte) 0),", "fixed": "                 eq((byte) 0),\n                 eq(new GeneralDataCoding(\n                         false,\n                        true,\n                         MessageClass.CLASS1,\n                         Alphabet.ALPHA_8_BIT)),\n                 eq((byte) 0),", "sourceBeforeFix": "new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)", "sourceAfterFix": "new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)"}
{"fixCommitSHA1": "32b59bda9d3f717b01045b1f3423d5ca12e5b4b5", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                     switch (transition) {\n                         case STARTING_to_UP: {\n                            CommonDeployment deploymentMD = ((ResourceAdapterDeploymentService) controller.getService()).getRaDeployment();\n                             if (deploymentMD.getConnectionManagers() != null && deploymentMD.getConnectionManagers()[0].getPool() != null) {\n                                 StatisticsPlugin poolStats = deploymentMD.getConnectionManagers()[0].getPool().getStatistics();", "fixed": "                     switch (transition) {\n                         case STARTING_to_UP: {\n                            CommonDeployment deploymentMD = ((ResourceAdapterXmlDeploymentService) controller.getService()).getRaxmlDeployment();\n                             if (deploymentMD.getConnectionManagers() != null && deploymentMD.getConnectionManagers()[0].getPool() != null) {\n                                 StatisticsPlugin poolStats = deploymentMD.getConnectionManagers()[0].getPool().getStatistics();", "sourceBeforeFix": "(ResourceAdapterDeploymentService)controller.getService()", "sourceAfterFix": "(ResourceAdapterXmlDeploymentService)controller.getService()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"problem": "public void METHOD_1 ( ) { while ( true ) { METHOD_2 ( ) ; if ( ( VAR_1 ) > 0 ) { if ( VAR_2 ) { METHOD_3 ( ) ; METHOD_4 ( ) ; } else { METHOD_5 ( ) ; } } try { java.lang.Thread . METHOD_6 ( VAR_3 ) ; } catch ( TYPE_1 VAR_4 ) { VAR_4 . METHOD_7 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { while ( true ) { try { METHOD_2 ( ) ; if ( ( VAR_1 ) > 0 ) { if ( VAR_2 ) { METHOD_3 ( ) ; METHOD_4 ( ) ; } else { METHOD_5 ( ) ; } } java.lang.Thread . METHOD_6 ( VAR_3 ) ; } catch ( TYPE_1 VAR_4 ) { VAR_4 . METHOD_7 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } } }\n"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"problem": "TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = new TYPE_5 ( ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; return new TYPE_6 ( VAR_4 , VAR_2 , VAR_5 . METHOD_3 ( ) , VAR_5 . METHOD_4 ( ) , VAR_5 . METHOD_5 ( ) , VAR_3 ) ; }\n", "fixed": "TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = new TYPE_5 ( ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; return new TYPE_6 ( VAR_4 , VAR_5 . METHOD_3 ( ) , VAR_5 . METHOD_4 ( ) , VAR_5 . METHOD_5 ( ) , VAR_3 ) ; }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) throws java.lang.ClassNotFoundException { TYPE_1 . METHOD_1 ( ) ; TYPE_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) ; TYPE_3 VAR_1 = new TYPE_3 ( ) ; for ( TYPE_4 VAR_2 : TYPE_5 . values ( ) ) { VAR_1 . METHOD_4 ( VAR_2 . getName ( ) , 0 , VAR_2 . METHOD_5 ( ) [ 0 ] , VAR_2 . METHOD_5 ( ) [ 1 ] ) ; } }\n", "fixed": "public static void main ( java.lang.String [ ] args ) throws java.lang.ClassNotFoundException { TYPE_1 . METHOD_1 ( ) ; TYPE_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) ; TYPE_3 VAR_1 = new TYPE_3 ( ) ; for ( TYPE_4 VAR_2 : TYPE_5 . values ( ) ) { VAR_1 . METHOD_4 ( VAR_2 . getName ( ) , VAR_2 . getId ( ) , VAR_2 . METHOD_5 ( ) [ 0 ] , VAR_2 . METHOD_5 ( ) [ 1 ] ) ; } }\n"}
{"project": "Closure", "bugId": 70, "problem": " private void declareArguments(Node functionNode) {\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n               defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), true);\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n               defineSlot(astParameter, functionNode, null, true);", "fixed": " private void declareArguments(Node functionNode) {\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n               defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), false);\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n               defineSlot(astParameter, functionNode, null, true);", "observations": "", "repairActions": ["mcParValChange"], "repairPatterns": ["constChange", "singleLine"]}
{"problem": "public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { java.lang.String VAR_1 = intent . METHOD_2 ( ) ; if ( VAR_1 . equals ( VAR_2 ) ) { java.lang.String VAR_3 = intent . METHOD_3 ( VAR_4 ) ; if ( TYPE_1 . isEmpty ( VAR_3 ) ) { return ; } if ( VAR_3 . equals ( VAR_5 ) ) { if ( VAR_6 ) { TYPE_2 . METHOD_4 ( ) ; TYPE_3 . METHOD_4 ( ) ; } } } }\n", "fixed": "public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { java.lang.String VAR_1 = intent . METHOD_2 ( ) ; if ( VAR_1 . equals ( VAR_2 ) ) { java.lang.String VAR_3 = intent . METHOD_3 ( VAR_4 ) ; if ( TYPE_1 . isEmpty ( VAR_3 ) ) { return ; } if ( VAR_3 . equals ( VAR_5 ) ) { if ( VAR_6 ) { TYPE_3 . METHOD_4 ( ) ; } } } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( int VAR_1 , TYPE_2 context , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) throws java.lang.Exception { java.util.Calendar VAR_4 = TYPE_5 . METHOD_2 ( VAR_1 , 1 , 1 ) ; TYPE_6 VAR_5 = ( ( TYPE_7 ) ( VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( ) ; return METHOD_5 ( VAR_2 , VAR_3 , context , VAR_5 , TYPE_5 . METHOD_6 ( VAR_4 ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int VAR_1 , TYPE_3 VAR_2 ) throws java.lang.Exception { java.util.Calendar VAR_4 = TYPE_5 . METHOD_2 ( VAR_1 , 1 , 1 ) ; TYPE_6 VAR_5 = ( ( TYPE_7 ) ( VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( ) ; return METHOD_5 ( VAR_5 , TYPE_5 . METHOD_6 ( VAR_4 ) ) ; }\n"}
{"fixCommitSHA1": "7b1dba9a494ca50e2fde047544a675df6c702e54", "projectName": "apache.camel", "bugType": "More Specific If", "problem": "             return false;\n         }\n        if (expression.indexOf(\"${\") >= 0) {\n             return true;\n         }", "fixed": "             return false;\n         }\n        if (\"simple\".equalsIgnoreCase(language) && expression.indexOf(\"${\") >= 0) {\n             return true;\n         }", "sourceBeforeFix": "expression.indexOf(\"${\") >= 0", "sourceAfterFix": "\"simple\".equalsIgnoreCase(language) && expression.indexOf(\"${\") >= 0"}
{"fixCommitSHA1": "780a95c41d5d9ddafe1a237628183020746825a8", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t * before growing the backing table. */\n \tpublic IntIntMap (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "fixed": " \t * before growing the backing table. */\n \tpublic IntIntMap (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 . METHOD_2 ( VAR_1 ) ; if ( this . VAR_2 . contains ( VAR_3 ) ) { TYPE_5 . METHOD_2 ( VAR_1 ) ; TYPE_6 . METHOD_2 ( VAR_1 ) ; } java.util.Collections.sort ( VAR_1 , new TYPE_7 ( ) ) ; }\n", "fixed": "private void METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) > 0 ) { return ; } TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 . METHOD_2 ( VAR_1 ) ; if ( this . VAR_2 . contains ( VAR_3 ) ) { TYPE_5 . METHOD_2 ( VAR_1 ) ; TYPE_6 . METHOD_2 ( VAR_1 ) ; } java.util.Collections.sort ( VAR_1 , new TYPE_7 ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( TYPE_1 . METHOD_2 ( ) . equals ( VAR_1 ) ) return ; if ( ( TYPE_1 . METHOD_3 ( ) ) == ( java.lang.Integer . METHOD_4 ( VAR_1 ) ) ) VAR_3 . METHOD_5 ( VAR_2 ) ; VAR_3 . METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( TYPE_1 . METHOD_2 ( ) . equals ( VAR_1 ) ) return ; if ( ( TYPE_1 . METHOD_3 ( ) ) == ( java.lang.Integer . METHOD_4 ( VAR_1 ) ) ) { VAR_3 . METHOD_5 ( VAR_2 ) ; VAR_3 . METHOD_6 ( ) ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_3 ( ) . METHOD_2 ( ) ; java.lang.String VAR_3 = VAR_2 . METHOD_3 ( VAR_1 ) ; TYPE_1 VAR_4 = VAR_2 . METHOD_4 ( VAR_3 , VAR_5 class ) ; VAR_6 . add ( VAR_1 ) ; METHOD_5 ( ) ; VAR_7 . METHOD_6 ( ) ; return VAR_1 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_3 ( ) . METHOD_2 ( ) ; java.lang.String VAR_3 = VAR_2 . METHOD_3 ( VAR_1 ) ; TYPE_1 VAR_4 = VAR_2 . METHOD_4 ( VAR_3 , VAR_5 class ) ; VAR_6 . add ( VAR_4 ) ; METHOD_5 ( ) ; VAR_7 . METHOD_6 ( ) ; return VAR_4 ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { long VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 < TYPE_3 > VAR_2 = new TYPE_3 ( new TYPE_4 ( VAR_3 ) ) . METHOD_3 ( this ) ; METHOD_4 ( VAR_2 . getContext ( ) ) ; long VAR_4 = ( TYPE_1 . METHOD_2 ( ) ) - VAR_1 ; VAR_5 . info ( STRING_1 , ( VAR_4 / FLOAT_1 ) ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { long VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 < TYPE_3 > VAR_2 = new TYPE_3 ( new TYPE_4 ( new java.io.FileInputStream ( args [ 0 ] ) ) ) . METHOD_3 ( this ) ; METHOD_4 ( VAR_2 . getContext ( ) ) ; long VAR_4 = ( TYPE_1 . METHOD_2 ( ) ) - VAR_1 ; VAR_5 . info ( STRING_1 , ( VAR_4 / FLOAT_1 ) ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { int i ; java.lang.String temp = new java.lang.String ( VAR_1 ) ; for ( i = ( VAR_2 . size ( ) ) - 1 ; 0 < i ; i -- ) { temp = VAR_2 . get ( i ) . METHOD_1 ( temp ) ; } return temp ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { int i ; java.lang.String temp = new java.lang.String ( VAR_1 ) ; for ( i = ( VAR_2 . size ( ) ) - 1 ; 0 <= i ; i -- ) { temp = VAR_2 . get ( i ) . METHOD_1 ( temp ) ; } return temp ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_4 ( ) ; VAR_2 . METHOD_2 ( ) . add ( VAR_1 ) ; TYPE_5 VAR_3 = VAR_4 ; TYPE_6 TYPE_7 = VAR_3 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) . add ( TYPE_7 ) ; TYPE_2 VAR_5 = VAR_1 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( ) ; TYPE_8 . assertEquals ( VAR_5 . METHOD_7 ( ) . get ( 1 ) . METHOD_8 ( ) , VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_4 ( ) ; VAR_2 . METHOD_2 ( ) . add ( VAR_1 ) ; TYPE_5 VAR_3 = VAR_4 ; TYPE_6 TYPE_7 = VAR_3 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) . add ( TYPE_7 ) ; TYPE_2 VAR_5 = VAR_1 . METHOD_5 ( ) ; TYPE_8 . assertEquals ( VAR_5 . METHOD_7 ( ) . get ( 1 ) . METHOD_8 ( ) , VAR_6 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public android.view.View getView ( int position , android.view.View view , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = context . METHOD_1 ( ) ; android.view.View VAR_3 = VAR_2 . METHOD_2 ( VAR_4 , null , true ) ; TYPE_3 VAR_5 = ( ( TYPE_3 ) ( VAR_3 . METHOD_3 ( VAR_6 ) ) ) ; VAR_5 . METHOD_4 ( TYPE_4 . METHOD_5 ( ( STRING_1 + ( VAR_7 [ position ] ) ) ) ) ; return VAR_3 ; }\n", "fixed": "public android.view.View getView ( int position , android.view.View view , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = context . METHOD_1 ( ) ; android.view.View VAR_3 = VAR_2 . METHOD_2 ( VAR_4 , null , true ) ; TYPE_3 VAR_5 = ( ( TYPE_3 ) ( VAR_3 . METHOD_3 ( VAR_6 ) ) ) ; VAR_5 . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_7 [ position ] ) ) ; return VAR_3 ; }\n"}
{"problem": "public static void METHOD_1 ( java.lang.String name ) { TYPE_1 c = VAR_1 . get ( name ) ; if ( c != null ) { c . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 . remove ( name ) ; TYPE_2 . METHOD_4 ( ( STRING_1 + name ) , c ) ; } }\n", "fixed": "public static void METHOD_1 ( java.lang.String name ) { TYPE_1 c = VAR_1 . get ( name ) ; if ( c != null ) { c . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 . remove ( name ) ; TYPE_2 . METHOD_4 ( name , c ) ; } }\n"}
{"problem": "private static java.lang.String METHOD_1 ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { VAR_1 . append ( VAR_2 [ ( ( int ) ( java.lang.Math.round ( ( ( java.lang.Math.random ( ) ) * ( VAR_2 . length ) ) ) ) ) ] ) ; } return VAR_1 . toString ( ) ; }\n", "fixed": "private static java.lang.String METHOD_1 ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { VAR_1 . append ( VAR_2 [ ( ( int ) ( java.lang.Math.round ( ( ( ( java.lang.Math.random ( ) ) * ( VAR_2 . length ) ) - 1 ) ) ) ) ] ) ; } return VAR_1 . toString ( ) ; }\n"}
{"problem": "public static java.lang.String get ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = STRING_1 ; TYPE_1 VAR_3 = null ; try { java.net.URL url = TYPE_2 . METHOD_1 ( VAR_1 ) ; VAR_3 = TYPE_2 . METHOD_2 ( url , VAR_3 ) ; int VAR_4 = TYPE_2 . METHOD_3 ( VAR_3 ) ; VAR_2 = TYPE_2 . METHOD_4 ( VAR_4 , VAR_3 ) ; } catch ( java.io.IOException | TYPE_3 VAR_5 ) { VAR_2 = VAR_5 . METHOD_5 ( ) ; } return VAR_2 ; }\n", "fixed": "public static java.lang.String get ( java.lang.String VAR_1 ) throws java.io.IOException { java.lang.String VAR_2 = STRING_1 ; TYPE_1 VAR_3 = null ; java.net.URL url = TYPE_2 . METHOD_1 ( VAR_1 ) ; VAR_3 = TYPE_2 . METHOD_2 ( url , VAR_3 ) ; int VAR_4 = TYPE_2 . METHOD_3 ( VAR_3 ) ; VAR_2 = TYPE_2 . METHOD_4 ( VAR_4 , VAR_3 ) ; return VAR_2 ; }\n"}
{"problem": "private java.io.BufferedReader METHOD_1 ( ) throws java.io.IOException , TYPE_1 { METHOD_2 ( ) . error ( ( STRING_1 + ( VAR_1 ) ) ) ; if ( ( ! ( TYPE_2 . isEmpty ( VAR_1 ) ) ) || ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) throw new TYPE_1 ( STRING_2 ) ; java.net.URL VAR_2 = new java.net.URL ( VAR_1 ) ; TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_2 . METHOD_4 ( ) ) ) ; return new java.io.BufferedReader ( new TYPE_4 ( VAR_3 . METHOD_5 ( ) ) ) ; }\n", "fixed": "private java.io.BufferedReader METHOD_1 ( ) throws java.io.IOException , TYPE_1 { if ( ( TYPE_2 . isEmpty ( VAR_1 ) ) || ( ! ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ) throw new TYPE_1 ( STRING_2 ) ; java.net.URL VAR_2 = new java.net.URL ( VAR_1 ) ; TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_2 . METHOD_4 ( ) ) ) ; return new java.io.BufferedReader ( new TYPE_4 ( VAR_3 . METHOD_5 ( ) ) ) ; }\n"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "fixed": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 source , TYPE_4 [ ] parameters ) { if ( ! ( VAR_1 instanceof TYPE_5 ) ) { return false ; } TYPE_5 VAR_3 = ( ( TYPE_5 ) ( VAR_1 ) ) ; TYPE_6 VAR_4 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; return TYPE_7 . METHOD_6 ( VAR_4 , VAR_5 ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 source , TYPE_4 [ ] parameters ) { if ( ! ( VAR_1 instanceof TYPE_5 ) ) { return false ; } TYPE_5 VAR_3 = ( ( TYPE_5 ) ( VAR_1 ) ) ; TYPE_6 VAR_4 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; return ! ( TYPE_7 . METHOD_6 ( VAR_4 , VAR_5 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 , int VAR_2 , int [ ] c , TYPE_1 VAR_3 ) { for ( int i = VAR_1 ; i < VAR_2 ; i ++ ) { for ( int j = 0 ; j < ( c . length ) ; j ++ ) { VAR_4 [ i ] [ j ] = VAR_5 [ i ] [ j ] ; } } }\n", "fixed": "public void METHOD_1 ( int VAR_1 , int VAR_2 , int [ ] c , TYPE_1 VAR_3 ) { for ( int i = VAR_1 ; i <= VAR_2 ; i ++ ) { for ( int j = 0 ; j < ( c . length ) ; j ++ ) { VAR_4 [ i ] [ j ] = VAR_5 [ i ] [ c [ j ] ] ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == ( ( METHOD_3 ( ) ) - 1 ) ) { ( VAR_1 ) ++ ; } VAR_2 = METHOD_4 ( ) ; METHOD_5 ( ) ; if ( METHOD_6 ( ) ) { METHOD_1 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == ( ( METHOD_3 ( ) ) - 1 ) ) { ( VAR_1 ) ++ ; } VAR_2 = METHOD_4 ( ) ; METHOD_5 ( ) ; if ( METHOD_6 ( ) ) { METHOD_1 ( ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( long id ) { try { this . METHOD_2 ( ) ; TYPE_2 query = VAR_1 . METHOD_3 ( STRING_1 ) ; query . METHOD_4 ( STRING_2 , id ) ; this . METHOD_5 ( ) ; return ( ( TYPE_1 ) ( query . METHOD_6 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { throw new TYPE_3 ( VAR_2 . METHOD_7 ( ) ) ; } finally { this . METHOD_5 ( ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( long id ) { try { this . METHOD_2 ( ) ; TYPE_2 query = VAR_1 . METHOD_3 ( STRING_1 ) ; query . METHOD_4 ( STRING_2 , id ) ; return ( ( TYPE_1 ) ( query . METHOD_6 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { throw new TYPE_3 ( VAR_2 . METHOD_7 ( ) ) ; } finally { this . METHOD_5 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( int path , java.lang.String VAR_1 , java.lang.String fileName ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; TYPE_2 values = new TYPE_2 ( ) ; values . put ( STRING_1 , path ) ; values . put ( STRING_2 , VAR_1 ) ; values . put ( \"name\" , fileName ) ; VAR_2 . METHOD_3 ( STRING_3 , null , values ) ; }\n", "fixed": "public void METHOD_1 ( int path , java.lang.String VAR_1 , java.lang.String fileName ) { TYPE_2 values = new TYPE_2 ( ) ; values . put ( STRING_1 , path ) ; values . put ( STRING_2 , VAR_1 ) ; values . put ( \"name\" , fileName ) ; VAR_2 . METHOD_3 ( STRING_3 , null , values ) ; }\n"}
{"fixCommitSHA1": "013bd22eb4848763ee8281e51109b6e98e071cdf", "projectName": "dropwizard.dropwizard", "bugType": "Change Modifier", "problem": "             }\n         }\n        private String normalizePath(String basePath, String path) {\n             if (path == null) {\n                 return basePath;\n             }", "fixed": "             }\n         }\n        private static String normalizePath(String basePath, String path) {\n             if (path == null) {\n                 return basePath;\n             }", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {\n         long totalMessages = 50;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "fixed": "     public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {\n         long totalMessages = 50;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDozerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DozerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDozerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DozerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.Object VAR_1 , TYPE_2 method , java.util.List < java.lang.Object > VAR_2 ) { TYPE_3 . METHOD_2 ( ( VAR_1 != null ) ) ; TYPE_3 . METHOD_2 ( ( method != null ) ) ; TYPE_3 . METHOD_2 ( ( VAR_2 != null ) ) ; java.util.List < java.lang.Object > VAR_3 = TYPE_4 . METHOD_3 ( new java.util.ArrayList < > ( VAR_2 ) ) ; TYPE_3 . METHOD_2 ( ( ! ( VAR_2 . contains ( null ) ) ) ) ; return new TYPE_1 ( VAR_1 , method , VAR_3 ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.Object VAR_1 , TYPE_2 method , java.util.List < java.lang.Object > VAR_2 ) { TYPE_3 . METHOD_2 ( ( VAR_1 != null ) ) ; TYPE_3 . METHOD_2 ( ( method != null ) ) ; TYPE_3 . METHOD_2 ( ( VAR_2 != null ) ) ; return new TYPE_1 ( VAR_1 , method , TYPE_4 . METHOD_3 ( new java.util.ArrayList < > ( VAR_2 ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_3 ) ) { TYPE_1 . METHOD_3 ( getContext ( ) , ( ( STRING_1 + ( VAR_3 . getName ( ) ) ) + STRING_2 ) , VAR_4 ) . show ( ) ; TYPE_2 . METHOD_4 ( VAR_2 , getContext ( ) ) ; METHOD_5 ( ) ; } else { TYPE_1 . METHOD_3 ( getContext ( ) , ( STRING_3 + ( VAR_3 . getName ( ) ) ) , VAR_4 ) . show ( ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_3 ) ) { TYPE_1 . METHOD_3 ( getContext ( ) , ( ( STRING_1 + ( VAR_3 . getName ( ) ) ) + STRING_2 ) , VAR_4 ) . show ( ) ; TYPE_2 . METHOD_4 ( VAR_2 , getContext ( ) ) ; METHOD_5 ( ) ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = null ; for ( TYPE_3 VAR_4 : VAR_1 . METHOD_2 ( ) ) { if ( VAR_4 . METHOD_3 ( ) . contains ( VAR_2 ) ) { VAR_3 = ( ( TYPE_1 ) ( VAR_4 ) ) ; } } return VAR_3 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = null ; for ( TYPE_3 VAR_4 : VAR_1 . METHOD_2 ( ) ) { if ( VAR_4 . METHOD_3 ( ) . equals ( VAR_2 ) ) { VAR_3 = ( ( TYPE_1 ) ( VAR_4 ) ) ; } } return VAR_3 ; }\n"}
{"problem": "public static void METHOD_1 ( TYPE_1 out , TYPE_2 VAR_1 ) throws java.io.IOException { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) ; TYPE_5 . METHOD_3 ( out , VAR_1 . METHOD_4 ( ) ) ; TYPE_5 . METHOD_5 ( out , VAR_2 . METHOD_6 ( ) ) ; TYPE_5 . METHOD_7 ( out , VAR_2 ) ; }\n", "fixed": "public static void METHOD_1 ( TYPE_1 out , TYPE_2 VAR_1 ) throws java.io.IOException { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) ; TYPE_5 . METHOD_3 ( out , VAR_1 . getType ( ) ) ; TYPE_5 . METHOD_5 ( out , VAR_2 . METHOD_6 ( ) ) ; TYPE_5 . METHOD_7 ( out , VAR_2 ) ; }\n"}
{"problem": "public static void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( ) . METHOD_2 ( ) ; VAR_2 = new TYPE_1 ( ) . METHOD_3 ( ) ; VAR_3 = new TYPE_1 ( ) . METHOD_3 ( ) . METHOD_3 ( ) ; VAR_4 = new TYPE_2 ( ) ; VAR_5 = TYPE_3 . METHOD_4 ( STRING_1 ) ; VAR_6 = VAR_4 . METHOD_5 ( VAR_5 ) ; VAR_7 = TYPE_3 . METHOD_4 ( STRING_2 ) ; VAR_8 = VAR_4 . METHOD_5 ( VAR_7 ) ; }\n", "fixed": "public static void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 = TYPE_1 . METHOD_3 ( ) ; VAR_3 = VAR_2 . METHOD_3 ( ) ; VAR_4 = new TYPE_2 ( ) ; VAR_5 = TYPE_3 . METHOD_4 ( STRING_1 ) ; VAR_6 = VAR_4 . METHOD_5 ( VAR_5 ) ; VAR_7 = TYPE_3 . METHOD_4 ( STRING_2 ) ; VAR_8 = VAR_4 . METHOD_5 ( VAR_7 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( METHOD_2 ( ) ) != null ) { VAR_2 = METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; VAR_3 = METHOD_2 ( ) . getInt ( STRING_2 ) ; TYPE_2 . METHOD_4 ( STRING_3 , ( STRING_4 + ( VAR_3 ) ) ) ; } super . METHOD_1 ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { VAR_2 = VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_3 = VAR_1 . getInt ( STRING_2 ) ; } else if ( ( METHOD_2 ( ) ) != null ) { VAR_2 = METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; VAR_3 = METHOD_2 ( ) . getInt ( STRING_2 ) ; } super . METHOD_1 ( VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . assertNotNull ( STRING_1 , TYPE_3 . get ( ) ) ; TYPE_4 [ ] VAR_2 = TYPE_4 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_2 [ VAR_3 . METHOD_6 ( VAR_2 . length ) ] ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( TYPE_4 . METHOD_7 ( STRING_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . assertNotNull ( STRING_1 , TYPE_3 . get ( ) ) ; TYPE_4 [ ] VAR_2 = TYPE_4 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_2 [ VAR_3 . METHOD_6 ( VAR_2 . length ) ] ) ; }\n"}
{"fixCommitSHA1": "9653982736890bac7024ddb1a25e74ee0aa726b8", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "      * @return the builder\n      */\n     public Type setExchangePattern(ExchangePattern exchangePattern) {\n        addOutput(new ExchangePatternType(exchangePattern));\n         return (Type) this;\n     }", "fixed": "      * @return the builder\n      */\n     public Type setExchangePattern(ExchangePattern exchangePattern) {\n        addOutput(new SetExchangePatternType(exchangePattern));\n         return (Type) this;\n     }", "sourceBeforeFix": "new ExchangePatternType(exchangePattern)", "sourceAfterFix": "new SetExchangePatternType(exchangePattern)"}
{"fixCommitSHA1": "998d200618f6c6699f8bacd059ffda7c54f4d39e", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     public static Rule<ExchangeNode> checkRulesAreFiredBeforeAddExchangesRule()\n     {\n        return checkPlanDoNotMatch(exchange(), \"Expected rules to be fired before 'AddExchanges' optimizer\");\n     }\n    public static <T extends PlanNode> Rule<T> checkPlanDoNotMatch(Pattern<T> pattern, String message)\n     {\n         return new CheckNoPlanNodeMatchesRule<>(pattern, message);\n     }", "fixed": "     public static Rule<ExchangeNode> checkRulesAreFiredBeforeAddExchangesRule()\n     {\n        return checkNoPlanNodeMatches(exchange(), \"Expected rules to be fired before 'AddExchanges' optimizer\");\n     }\n    private static <T extends PlanNode> Rule<T> checkNoPlanNodeMatches(Pattern<T> pattern, String message)\n     {\n         return new CheckNoPlanNodeMatchesRule<>(pattern, message);\n     }", "sourceBeforeFix": "checkPlanDoNotMatch(exchange(),\"Expected rules to be fired before 'AddExchanges' optimizer\")", "sourceAfterFix": "checkNoPlanNodeMatches(exchange(),\"Expected rules to be fired before 'AddExchanges' optimizer\")"}
{"problem": "public int METHOD_1 ( int [ ] [ ] VAR_1 ) { this . VAR_1 = VAR_1 ; VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_2 ( VAR_3 , 0 ) ; int VAR_4 = VAR_5 ; int VAR_6 = - 1 ; for ( TYPE_1 p : VAR_2 ) { java.lang.System.out.println ( ( ( ( p . position ) + STRING_1 ) + ( VAR_7 ) ) ) ; if ( VAR_4 < ( VAR_7 ) ) { VAR_4 = VAR_7 ; VAR_6 = p . position ; } } return VAR_6 ; }\n", "fixed": "public int METHOD_1 ( int [ ] [ ] VAR_1 ) { this . VAR_1 = VAR_1 ; VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_2 ( VAR_3 , 0 ) ; int VAR_4 = VAR_5 ; int VAR_6 = - 1 ; for ( TYPE_1 p : VAR_2 ) { if ( VAR_4 < ( VAR_7 ) ) { VAR_4 = VAR_7 ; VAR_6 = p . position ; } } return VAR_6 ; }\n"}
{"problem": "public float METHOD_1 ( ) { float sum = 0.0F ; float VAR_1 = METHOD_2 ( ) ; for ( TYPE_1 VAR_2 : list ) { if ( ( VAR_2 . METHOD_3 ( ) ) >= VAR_1 ) { sum += VAR_2 . METHOD_3 ( ) ; } } return sum ; }\n", "fixed": "public float METHOD_1 ( ) { float sum = 0.0F ; float VAR_1 = METHOD_2 ( ) ; for ( TYPE_1 VAR_2 : this . list ) { if ( ( VAR_2 . METHOD_3 ( ) ) >= VAR_1 ) { sum += VAR_2 . METHOD_3 ( ) ; } } return sum ; }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { VAR_3 [ VAR_1 ] = VAR_2 ; if ( ( VAR_2 != null ) && ( ( VAR_4 ) > ( METHOD_2 ( ) ) ) ) { VAR_4 = METHOD_2 ( ) ; } METHOD_3 ( ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { VAR_3 [ VAR_1 ] = VAR_2 ; if ( ( VAR_2 != null ) && ( ( VAR_4 ) > ( METHOD_2 ( ) ) ) ) { VAR_4 = METHOD_2 ( ) ; } METHOD_3 ( VAR_1 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( final int id ) { final TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( id ) ; TYPE_3 . METHOD_3 ( STRING_1 , id ) ; if ( VAR_1 == null ) { TYPE_3 . METHOD_4 ( STRING_2 , id ) ; return TYPE_1 . status ( VAR_3 ) . build ( ) ; } else { return TYPE_1 . METHOD_5 ( new TYPE_4 ( VAR_1 , VAR_4 . METHOD_6 ( ) ) ) . build ( ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( final int id ) { TYPE_3 . METHOD_3 ( STRING_1 , id ) ; final TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( id ) ; if ( VAR_1 == null ) { TYPE_3 . METHOD_4 ( STRING_2 , id ) ; return TYPE_1 . status ( VAR_3 ) . build ( ) ; } else { return TYPE_1 . METHOD_5 ( new TYPE_4 ( VAR_1 , VAR_4 . METHOD_6 ( ) ) ) . build ( ) ; } }\n"}
{"fixCommitSHA1": "6ad626ae51a157306ddf4165f13ff5eb5b4d5e8b", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t\t\tif (bootstrap != null) {\n \t\t\t\tEventLoopGroup group = bootstrap.group();\n \t\t\t\tif (group != null) {\n\t\t\t\t\tgroup.shutdownGracefully();\n \t\t\t\t}\n \t\t\t}\n \t\t}", "fixed": " \t\t\tif (bootstrap != null) {\n \t\t\t\tEventLoopGroup group = bootstrap.group();\n \t\t\t\tif (group != null) {\n\t\t\t\t\tgroup.shutdownGracefully(0, 10, TimeUnit.SECONDS);\n \t\t\t\t}\n \t\t\t}\n \t\t}", "sourceBeforeFix": "NIO_GROUP.shutdownGracefully()", "sourceAfterFix": "NIO_GROUP.shutdownGracefully(0,10,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                         flags.add(Flag.CANCELLED);\n                         response.get(OUTCOME).set(CANCELLED);\n                         response.get(FAILURE_DESCRIPTION).set(\"Operation cancelled\");\n                        response.set(ROLLED_BACK).set(true);\n                         return ResultAction.ROLLBACK;\n                     }\n                 }", "fixed": "                         flags.add(Flag.CANCELLED);\n                         response.get(OUTCOME).set(CANCELLED);\n                         response.get(FAILURE_DESCRIPTION).set(\"Operation cancelled\");\n                        response.get(ROLLED_BACK).set(true);\n                         return ResultAction.ROLLBACK;\n                     }\n                 }", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"problem": "public static boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return false ; } if ( VAR_1 . isEmpty ( ) ) { return false ; } try { int VAR_2 = java.lang.Integer.parseInt ( VAR_1 ) ; if ( VAR_2 <= 0 ) { return false ; } if ( VAR_2 > INT_1 ) { return false ; } } catch ( java.lang.Exception VAR_3 ) { return false ; } return true ; }\n", "fixed": "public static boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return false ; } if ( VAR_1 . isEmpty ( ) ) { return false ; } try { int VAR_2 = java.lang.Integer.parseInt ( VAR_1 ) ; if ( VAR_2 <= 0 ) { return false ; } } catch ( java.lang.Exception VAR_3 ) { return false ; } return true ; }\n"}
{"problem": "public static java.io.File METHOD_1 ( java.lang.String fileName ) { java.io.File file = new java.io.File ( fileName ) ; boolean VAR_1 = false ; if ( ! ( file . METHOD_2 ( ) ) ) { try { VAR_1 = file . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_4 ( ) ; } } return VAR_1 ? file : null ; }\n", "fixed": "public static java.io.File METHOD_1 ( java.lang.String fileName ) { java.io.File file = new java.io.File ( fileName ) ; if ( ! ( file . METHOD_2 ( ) ) ) { try { file . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_4 ( ) ; } } return file ; }\n"}
{"problem": "public void METHOD_1 ( ) { int counter = 0 ; while ( counter < INT_1 ) { VAR_1 . METHOD_2 ( new TYPE_1 ( VAR_2 , java.lang.Thread . METHOD_3 ( ) . getName ( ) ) ) ; java.lang.System.out.println ( ( ( ( STRING_1 + ( java.lang.Thread . METHOD_3 ( ) . getName ( ) ) ) + STRING_2 ) + counter ) ) ; counter ++ ; } }\n", "fixed": "public void METHOD_1 ( ) { int counter = 0 ; while ( counter < INT_1 ) { VAR_1 . METHOD_2 ( new TYPE_1 ( counter , java.lang.Thread . METHOD_3 ( ) . getName ( ) ) ) ; java.lang.System.out.println ( ( ( ( STRING_1 + ( java.lang.Thread . METHOD_3 ( ) . getName ( ) ) ) + STRING_2 ) + counter ) ) ; counter ++ ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private boolean METHOD_1 ( android.content.Context context , java.lang.String VAR_1 , java.lang.String className ) { final TYPE_1 VAR_2 = context . METHOD_2 ( ) ; final android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_3 ( VAR_1 , className ) ; java.util.List list = VAR_2 . METHOD_4 ( intent , VAR_3 ) ; return ( list . size ( ) ) > 0 ; }\n", "fixed": "private boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String className ) { final TYPE_1 VAR_2 = METHOD_2 ( ) ; final android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_3 ( VAR_1 , className ) ; java.util.List list = VAR_2 . METHOD_4 ( intent , VAR_3 ) ; return ( list . size ( ) ) > 0 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 msg , TYPE_2 VAR_1 , java.awt.Color VAR_2 , long VAR_3 ) { msg . x = ( ( float ) ( VAR_1 . METHOD_2 ( ) ) ) ; msg . y = ( ( float ) ( VAR_1 . METHOD_3 ( ) ) ) ; TYPE_3 VAR_4 = new TYPE_3 ( ) ; VAR_5 = c . METHOD_4 ( ) ; VAR_6 = c . METHOD_5 ( ) ; VAR_4 . b = c . METHOD_6 ( ) ; VAR_7 = VAR_4 ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 msg , TYPE_2 VAR_1 , java.awt.Color VAR_2 , long VAR_3 ) { msg . x = ( ( float ) ( VAR_1 . METHOD_2 ( ) ) ) ; msg . y = ( ( float ) ( VAR_1 . METHOD_3 ( ) ) ) ; TYPE_3 VAR_4 = new TYPE_3 ( ) ; VAR_5 = VAR_2 . METHOD_4 ( ) ; VAR_6 = VAR_2 . METHOD_5 ( ) ; VAR_4 . b = VAR_2 . METHOD_6 ( ) ; VAR_7 = VAR_4 ; }\n"}
{"problem": "private boolean METHOD_1 ( TYPE_1 < TYPE_2 > path , TYPE_2 target ) { int VAR_1 = 0 ; TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( path ) ; while ( ! ( VAR_2 . METHOD_3 ( ) ) ) { if ( VAR_1 > 1 ) return false ; else if ( ( VAR_2 . METHOD_4 ( ) . equals ( target ) ) && ( VAR_1 <= 1 ) ) return true ; else VAR_1 ++ ; } return false ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 < TYPE_2 > path , TYPE_2 target ) { int VAR_1 = 0 ; if ( ( path . size ( ) ) > 1 ) { TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( path ) ; while ( ! ( VAR_2 . METHOD_3 ( ) ) ) { if ( VAR_1 > 1 ) return false ; else if ( ( VAR_2 . METHOD_4 ( ) . equals ( target ) ) && ( VAR_1 <= 1 ) ) return true ; else VAR_1 ++ ; } } return false ; }\n"}
{"problem": "public boolean METHOD_1 ( int VAR_1 , java.lang.String name ) { if ( ( METHOD_2 ( VAR_1 ) ) == null ) return false ; else { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . METHOD_3 ( name ) ; VAR_3 . put ( new java.lang.Integer ( VAR_1 ) , VAR_2 ) ; return true ; } }\n", "fixed": "public boolean METHOD_1 ( int VAR_1 , java.lang.String name ) { if ( ( METHOD_2 ( VAR_1 ) ) != null ) return false ; else { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . METHOD_3 ( name ) ; VAR_3 . put ( new java.lang.Integer ( VAR_1 ) , VAR_2 ) ; return true ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"problem": "void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_2 { if ( ( TYPE_3 . equals ( VAR_1 ) ) && ( TYPE_4 . METHOD_2 ( VAR_2 ) ) ) { TYPE_5 VAR_4 = METHOD_3 ( VAR_2 ) ; if ( VAR_4 == null ) { throw new TYPE_2 ( ) ; } final TYPE_5 VAR_5 = METHOD_3 ( VAR_3 ) ; VAR_6 . METHOD_4 ( VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) , VAR_5 . METHOD_5 ( ) . METHOD_6 ( ) ) ; } }\n", "fixed": "void METHOD_1 ( java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_2 { TYPE_5 VAR_4 = METHOD_3 ( VAR_2 ) ; if ( VAR_4 == null ) { throw new TYPE_2 ( ) ; } TYPE_5 VAR_5 = METHOD_3 ( VAR_3 ) ; VAR_6 . METHOD_4 ( VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) , VAR_5 . METHOD_5 ( ) . METHOD_6 ( ) ) ; }\n"}
{"problem": "private java.lang.StringBuilder METHOD_1 ( java.io.InputStream VAR_1 ) { java.lang.String VAR_2 = STRING_1 ; java.lang.StringBuilder answer = new java.lang.StringBuilder ( ) ; java.io.BufferedReader VAR_3 = new java.io.BufferedReader ( new TYPE_1 ( VAR_1 ) ) ; try { while ( ( VAR_2 = VAR_3 . METHOD_2 ( ) ) != null ) { answer . append ( VAR_2 ) ; } } catch ( java.io.IOException VAR_4 ) { TYPE_2 . METHOD_3 ( VAR_5 , ( STRING_2 + ( VAR_4 . toString ( ) ) ) , VAR_6 ) . show ( ) ; } return answer ; }\n", "fixed": "private java.lang.StringBuilder METHOD_1 ( java.io.InputStream VAR_1 ) { java.lang.String VAR_2 ; java.lang.StringBuilder answer = new java.lang.StringBuilder ( ) ; java.io.BufferedReader VAR_3 = new java.io.BufferedReader ( new TYPE_1 ( VAR_1 ) ) ; try { while ( ( VAR_2 = VAR_3 . METHOD_2 ( ) ) != null ) { answer . append ( VAR_2 ) ; } } catch ( java.io.IOException VAR_4 ) { TYPE_2 . METHOD_3 ( VAR_5 , ( STRING_2 + ( VAR_4 . toString ( ) ) ) , VAR_6 ) . show ( ) ; } return answer ; }\n"}
{"problem": "public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_3 ( ) ; TYPE_3 VAR_4 = ( ( TYPE_4 ) ( VAR_3 ) ) . METHOD_4 ( ) ; VAR_4 = METHOD_5 ( VAR_4 , INT_1 ) ; METHOD_6 ( VAR_4 ) ; } catch ( java.io.IOException VAR_5 ) { TYPE_5 . METHOD_7 ( VAR_6 , ( STRING_1 + ( VAR_5 . METHOD_8 ( ) ) ) ) ; } }\n", "fixed": "private void METHOD_1 ( ) { try { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_3 ( ) ; TYPE_3 VAR_4 = ( ( TYPE_4 ) ( VAR_3 ) ) . METHOD_4 ( ) ; VAR_4 = METHOD_5 ( VAR_4 , INT_1 ) ; METHOD_6 ( VAR_4 ) ; } catch ( java.io.IOException VAR_5 ) { TYPE_5 . METHOD_7 ( VAR_6 , ( STRING_1 + ( VAR_5 . METHOD_8 ( ) ) ) ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 ) ) { return ( ( TYPE_2 ) ( VAR_3 ) ) ; } else if ( ( VAR_1 ) == ( VAR_4 ) ) { return ( ( TYPE_3 ) ( VAR_5 ) ) ; } else { return null ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 ) ) { return ( ( TYPE_2 ) ( VAR_3 ) ) ; } else if ( ( VAR_1 ) == ( VAR_4 ) ) { return ( ( TYPE_3 ) ( VAR_5 ) ) ; } else { return new TYPE_1 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { METHOD_2 ( ) ; try { METHOD_3 ( VAR_2 . METHOD_4 ( VAR_1 ) ) ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_5 ( ) ; TYPE_2 VAR_4 = TYPE_2 . METHOD_6 ( getActivity ( ) . METHOD_7 ( ) , ( STRING_1 + ( VAR_3 . toString ( ) ) ) , VAR_5 ) ; VAR_4 . METHOD_8 ( VAR_6 , 0 , 0 ) ; VAR_4 . show ( ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { METHOD_2 ( ) ; try { METHOD_3 ( VAR_2 . METHOD_4 ( VAR_1 ) ) ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_5 ( ) ; TYPE_2 VAR_4 = TYPE_2 . METHOD_6 ( getActivity ( ) . METHOD_7 ( ) , ( STRING_1 + ( VAR_3 . toString ( ) ) ) , VAR_5 ) ; VAR_4 . METHOD_8 ( VAR_6 , 0 , 0 ) ; VAR_4 . show ( ) ; return ; } }\n"}
{"problem": "private java.lang.String METHOD_1 ( TYPE_1 < java.lang.String > VAR_1 ) { java.lang.StringBuilder VAR_2 = new java.lang.StringBuilder ( ) ; boolean first = true ; for ( java.lang.String item : VAR_1 ) { if ( ! first ) { VAR_2 . append ( STRING_1 ) ; } VAR_2 . append ( item ) ; } return VAR_2 . toString ( ) ; }\n", "fixed": "private java.lang.String METHOD_1 ( TYPE_1 < java.lang.String > VAR_1 ) { java.lang.StringBuilder VAR_2 = new java.lang.StringBuilder ( ) ; boolean first = true ; for ( java.lang.String item : VAR_1 ) { if ( ! first ) { VAR_2 . append ( STRING_1 ) ; } VAR_2 . append ( item ) ; first = false ; } return VAR_2 . toString ( ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.Boolean b ) { if ( b == true ) { java.lang.String VAR_1 = n . getText ( ) . toString ( ) ; java.lang.String VAR_2 = VAR_3 . getText ( ) . toString ( ) ; int VAR_4 = METHOD_2 ( VAR_2 ) ; if ( VAR_4 >= 0 ) { char [ ] VAR_5 = TYPE_1 . METHOD_3 ( VAR_1 , VAR_4 ) ; java.lang.String output = METHOD_4 ( VAR_6 , VAR_5 ) ; return output ; } else return STRING_1 ; } else { return STRING_1 ; } }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.Boolean b ) { if ( b == true ) { java.lang.String VAR_1 = n . getText ( ) . toString ( ) ; java.lang.String VAR_2 = VAR_3 . getText ( ) . toString ( ) ; int VAR_4 = METHOD_2 ( VAR_2 ) ; if ( VAR_4 >= 0 ) { char [ ] VAR_5 = METHOD_3 ( VAR_1 , VAR_4 ) ; java.lang.String output = METHOD_4 ( VAR_6 , VAR_5 ) ; return output ; } else return STRING_1 ; } else { return STRING_1 ; } }\n"}
{"problem": "private void METHOD_1 ( ) throws TYPE_1 { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; TYPE_2 . METHOD_4 ( VAR_4 ) ; METHOD_5 ( ) ; VAR_5 . METHOD_6 ( STRING_2 ) ; VAR_6 = STRING_3 ; VAR_7 . METHOD_7 ( ) ; METHOD_8 ( ) ; VAR_7 . METHOD_9 ( ) ; METHOD_8 ( ) ; VAR_7 . METHOD_10 ( ) ; METHOD_8 ( ) ; METHOD_11 ( ) ; VAR_7 . METHOD_12 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) throws TYPE_1 { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; TYPE_2 . METHOD_4 ( VAR_4 ) ; METHOD_5 ( ) ; VAR_5 . METHOD_6 ( STRING_2 ) ; VAR_7 . METHOD_7 ( ) ; METHOD_8 ( ) ; VAR_7 . METHOD_9 ( ) ; METHOD_8 ( ) ; VAR_7 . METHOD_10 ( ) ; METHOD_8 ( ) ; METHOD_11 ( ) ; VAR_7 . METHOD_12 ( ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 to , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = METHOD_2 ( VAR_2 , INT_1 ) ; TYPE_5 < TYPE_2 > VAR_4 = METHOD_3 ( to , VAR_1 , STRING_1 , STRING_2 ) ; TYPE_6 < TYPE_7 > VAR_5 = VAR_6 . METHOD_4 ( VAR_4 , VAR_7 , VAR_3 ) ; return TYPE_8 . METHOD_5 ( VAR_5 . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_9 : : new ) . METHOD_9 ( TYPE_10 . METHOD_10 ( ) ) , VAR_5 . METHOD_11 ( ) , VAR_3 ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 to , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = METHOD_2 ( VAR_2 , INT_1 ) ; TYPE_5 < TYPE_2 > VAR_4 = METHOD_3 ( VAR_1 , to , STRING_1 , STRING_2 ) ; TYPE_6 < TYPE_7 > VAR_5 = VAR_6 . METHOD_4 ( VAR_4 , VAR_7 , VAR_3 ) ; return TYPE_8 . METHOD_5 ( VAR_5 . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_9 : : new ) . METHOD_9 ( TYPE_10 . METHOD_10 ( ) ) , VAR_5 . METHOD_11 ( ) , VAR_3 ) ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = METHOD_2 ( VAR_1 ) ; TYPE_5 VAR_4 = VAR_3 . METHOD_3 ( ) . get ( VAR_2 ) ; java.util.List < TYPE_1 > VAR_5 = TYPE_6 . METHOD_4 ( ) ; if ( TYPE_7 . METHOD_5 ( VAR_4 ) ) { VAR_5 . add ( METHOD_6 ( TYPE_8 . toString ( ) , STRING_1 ) ) ; VAR_5 . add ( METHOD_6 ( TYPE_9 . toString ( ) , STRING_2 ) ) ; } return VAR_5 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = METHOD_2 ( VAR_1 ) ; TYPE_5 VAR_4 = VAR_3 . METHOD_3 ( ) . get ( VAR_2 ) ; java.util.List < TYPE_1 > VAR_5 = TYPE_6 . METHOD_4 ( ) ; VAR_5 . add ( METHOD_6 ( TYPE_8 . toString ( ) , STRING_1 ) ) ; if ( TYPE_7 . METHOD_5 ( VAR_4 ) ) { VAR_5 . add ( METHOD_6 ( TYPE_9 . toString ( ) , STRING_2 ) ) ; } return VAR_5 ; }\n"}
{"problem": "protected java.lang.String METHOD_1 ( java.lang.String path ) { final java.lang.String url ; if ( path . startsWith ( VAR_1 ) ) url = ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) + path ; else url = ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) + ( VAR_1 ) ) + path ; return url . replace ( STRING_2 , STRING_3 ) ; }\n", "fixed": "protected java.lang.String METHOD_1 ( java.lang.String path ) { final java.lang.String url ; if ( path . startsWith ( VAR_1 ) ) url = ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) + path ; else url = ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) + ( VAR_1 ) ) + path ; return url ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_5 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_6 ) ) ) ; VAR_7 = ( ( android.widget.Button ) ( METHOD_3 ( VAR_8 ) ) ) ; VAR_9 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_10 ) ) ) ; VAR_7 . METHOD_4 ( this ) ; VAR_11 = new TYPE_4 ( this ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_5 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_6 ) ) ) ; VAR_7 = ( ( android.widget.Button ) ( METHOD_3 ( VAR_8 ) ) ) ; VAR_9 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_10 ) ) ) ; VAR_7 . METHOD_4 ( this ) ; }\n"}
{"problem": "public void METHOD_1 ( int size , java.util.Set < TYPE_1 > VAR_1 ) throws java.io.IOException { out . METHOD_2 ( size ) ; out . METHOD_3 ( ) ; for ( TYPE_1 file : VAR_1 ) { out . METHOD_2 ( file . METHOD_4 ( ) ) ; out . METHOD_5 ( file . getName ( ) ) ; out . METHOD_6 ( file . METHOD_7 ( ) ) ; out . METHOD_3 ( ) ; } }\n", "fixed": "public void METHOD_1 ( int size , java.util.Set < TYPE_1 > VAR_1 ) throws java.io.IOException { out . METHOD_2 ( size ) ; out . METHOD_3 ( ) ; for ( TYPE_1 file : VAR_1 ) { out . METHOD_2 ( file . METHOD_4 ( ) ) ; out . METHOD_5 ( file . getName ( ) ) ; out . METHOD_6 ( file . METHOD_7 ( ) ) ; } out . METHOD_3 ( ) ; }\n"}
{"problem": "java.lang.String METHOD_1 ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; if ( ( VAR_2 ) != null ) { VAR_1 . append ( VAR_3 ) ; VAR_1 . append ( VAR_2 . METHOD_2 ( ) ) ; } for ( TYPE_1 format : VAR_4 ) { VAR_1 . append ( VAR_3 ) ; VAR_1 . append ( format . METHOD_2 ( ) ) ; } VAR_1 . append ( text ) ; return VAR_1 . toString ( ) ; }\n", "fixed": "java.lang.StringBuilder METHOD_1 ( java.lang.StringBuilder VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_1 . append ( VAR_3 ) ; VAR_1 . append ( VAR_2 . METHOD_2 ( ) ) ; } for ( TYPE_1 format : VAR_4 ) { VAR_1 . append ( VAR_3 ) ; VAR_1 . append ( format . METHOD_2 ( ) ) ; } VAR_1 . append ( text ) ; return VAR_1 ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_1 b = VAR_1 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ( ( VAR_2 ) * INT_1 ) , 0 ) ) ; return new TYPE_1 ( ( ( INT_1 * ( VAR_2 ) ) + ( b . METHOD_3 ( ) ) ) , b . METHOD_4 ( ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_2 ( ( ( VAR_2 ) * INT_1 ) , 0 ) ) ; TYPE_1 b = VAR_1 . METHOD_1 ( ) ; return new TYPE_1 ( ( ( INT_1 * ( VAR_2 ) ) + ( b . METHOD_3 ( ) ) ) , b . METHOD_4 ( ) ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( this , VAR_2 , null , VAR_3 ) ; VAR_4 = VAR_1 . METHOD_2 ( ) ; java.lang.String [ ] VAR_5 = new java.lang.String [ ] { VAR_6 , VAR_7 , VAR_8 } ; java.lang.String VAR_9 = null ; java.lang.String [ ] VAR_10 = null ; java.lang.String VAR_11 = null ; java.lang.String VAR_12 = null ; java.lang.String VAR_13 = null ; TYPE_1 VAR_14 = VAR_4 . query ( VAR_15 , VAR_5 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ) ; return VAR_14 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( this , VAR_2 , null , VAR_3 ) ; VAR_4 = VAR_1 . METHOD_2 ( ) ; java.lang.String [ ] VAR_5 = new java.lang.String [ ] { VAR_6 , VAR_7 , VAR_8 } ; return VAR_4 . query ( VAR_15 , VAR_5 , null , null , null , null , null ) ; }\n"}
{"problem": "public boolean METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { TYPE_1 VAR_5 = TYPE_2 . METHOD_2 ( VAR_6 ) ; if ( VAR_5 != null ) { this . VAR_7 . METHOD_3 ( new TYPE_3 ( VAR_1 , VAR_2 ) ) ; TYPE_2 . METHOD_4 ( VAR_5 ) ; return true ; } VAR_8 = false ; return false ; }\n", "fixed": "public boolean METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { VAR_8 = false ; TYPE_1 VAR_5 = TYPE_2 . METHOD_2 ( VAR_6 ) ; if ( VAR_5 != null ) { this . VAR_7 . METHOD_3 ( new TYPE_3 ( VAR_1 , VAR_2 ) ) ; TYPE_2 . METHOD_4 ( VAR_5 ) ; return true ; } return false ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String text ) { if ( text != null ) { if ( text . isEmpty ( ) ) { return VAR_1 ; } for ( TYPE_1 VAR_2 : TYPE_1 . values ( ) ) { if ( ( text . METHOD_2 ( VAR_2 . name ( ) ) ) || ( text . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) ) { return VAR_2 ; } } } return VAR_3 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String text ) { if ( text != null ) { if ( text . isEmpty ( ) ) { return VAR_1 ; } for ( TYPE_1 VAR_2 : TYPE_1 . values ( ) ) { if ( ( text . METHOD_2 ( VAR_2 . name ( ) ) ) || ( text . METHOD_2 ( VAR_2 . toString ( ) ) ) ) { return VAR_2 ; } } } return VAR_3 ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( STRING_1 , VAR_2 . METHOD_4 ( ) ) ; VAR_3 . METHOD_3 ( STRING_2 , VAR_2 . METHOD_5 ( ) ) ; java.lang.String VAR_4 = TYPE_4 . METHOD_6 ( VAR_2 . METHOD_7 ( ) , VAR_1 ) ; TYPE_1 VAR_5 = VAR_2 . METHOD_8 ( VAR_4 ) ; return VAR_5 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( STRING_1 , VAR_2 . METHOD_4 ( ) ) ; VAR_3 . METHOD_3 ( STRING_2 , VAR_2 . METHOD_5 ( ) ) ; return METHOD_1 ( VAR_1 , VAR_2 ) ; }\n"}
{"problem": "public boolean METHOD_1 ( java.util.Collection < ? > c ) { if ( VAR_1 class . equals ( c . getClass ( ) ) ) { boolean VAR_2 = false ; for ( final TYPE_1 VAR_3 = ( ( TYPE_2 ) ( c ) ) . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; ) { VAR_2 |= remove ( VAR_3 . METHOD_4 ( ) ) ; } return VAR_2 ; } return super . METHOD_1 ( c ) ; }\n", "fixed": "public boolean METHOD_1 ( java.util.Collection < ? > c ) { if ( ! ( VAR_1 class . equals ( c . getClass ( ) ) ) ) { return super . METHOD_1 ( c ) ; } boolean VAR_2 = false ; for ( final TYPE_1 VAR_3 = ( ( TYPE_2 ) ( c ) ) . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; ) { VAR_2 |= remove ( VAR_3 . METHOD_4 ( ) ) ; } return VAR_2 ; }\n"}
{"problem": "public boolean delete ( TYPE_1 t ) { if ( ( ( t . METHOD_1 ( ) ) && ( VAR_1 ) ) && ( ! ( VAR_2 ) ) ) { java.lang.String VAR_3 = ( ( ( ( STRING_1 + ( VAR_4 ) ) + STRING_2 ) + ( VAR_5 ) ) + STRING_3 ) + ( VAR_6 ) ; METHOD_2 ( VAR_3 ) ; synchronized ( VAR_7 ) { VAR_7 . METHOD_3 ( VAR_3 ) ; } return true ; } return false ; }\n", "fixed": "public boolean delete ( TYPE_1 t ) { if ( ( ( t . METHOD_1 ( ) ) && ( VAR_1 ) ) && ( ! ( VAR_2 ) ) ) { java.lang.String VAR_3 = ( ( ( ( STRING_1 + ( VAR_4 ) ) + STRING_2 ) + ( VAR_5 ) ) + STRING_3 ) + ( t . id ) ; METHOD_2 ( VAR_3 ) ; synchronized ( VAR_7 ) { VAR_7 . METHOD_3 ( VAR_3 ) ; } return true ; } return false ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = null ; TYPE_2 state = VAR_1 . METHOD_2 ( ) ; if ( ( state != ( VAR_3 ) ) && ( state != ( VAR_4 ) ) ) { VAR_1 . METHOD_1 ( ) ; } int index = VAR_5 . METHOD_3 ( VAR_1 ) ; if ( index > 0 ) { VAR_2 = VAR_5 . remove ( index ) ; } if ( VAR_2 != null ) { METHOD_4 ( VAR_2 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_5 . remove ( VAR_1 ) ) ) { return ; } TYPE_2 state = VAR_1 . METHOD_2 ( ) ; if ( ( state != ( VAR_3 ) ) && ( state != ( VAR_4 ) ) ) { VAR_1 . METHOD_1 ( ) ; } METHOD_4 ( VAR_1 ) ; }\n"}
{"problem": "public int METHOD_1 ( int VAR_1 ) { int VAR_2 = 0 ; try { TYPE_1 query = VAR_3 . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 , VAR_1 ) ; VAR_2 = query . METHOD_4 ( ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_5 ( ) ; } return VAR_2 ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { int VAR_2 = 0 ; try { TYPE_1 query = VAR_3 . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 , VAR_1 ) ; VAR_2 = query . METHOD_4 ( ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_5 ( ) ; } java.lang.System.out.println ( VAR_2 ) ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_2 TYPE_3 = TYPE_2 . METHOD_2 ( ) ; TYPE_4 VAR_2 = TYPE_4 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) ) ; TYPE_5 VAR_3 = TYPE_3 . METHOD_6 ( VAR_1 , VAR_4 ) ; int id = VAR_3 . id ; java.lang.String name = VAR_3 . name ; return METHOD_7 ( VAR_5 . METHOD_8 ( VAR_2 , id , name ) ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_2 TYPE_3 = TYPE_2 . METHOD_2 ( ) ; TYPE_4 VAR_2 = TYPE_4 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) ) ; TYPE_5 VAR_3 = TYPE_3 . METHOD_6 ( VAR_1 , VAR_4 ) ; int id = VAR_3 . id ; java.lang.String name = VAR_3 . name ; return METHOD_7 ( VAR_5 . METHOD_8 ( VAR_2 , id , name , false ) ) ; }\n"}
{"problem": "public int [ ] METHOD_1 ( int VAR_1 , int VAR_2 ) { int [ ] VAR_3 = new int [ INT_1 ] ; VAR_3 [ 0 ] = VAR_1 / INT_2 ; VAR_3 [ 0 ] = ( VAR_3 [ 0 ] ) * INT_3 ; VAR_3 [ 1 ] = VAR_2 / INT_2 ; VAR_3 [ 1 ] = ( ( VAR_3 [ 1 ] ) + 1 ) * INT_2 ; return VAR_3 ; }\n", "fixed": "public int [ ] METHOD_1 ( int VAR_1 , int VAR_2 ) { int [ ] VAR_3 = new int [ INT_1 ] ; VAR_3 [ 0 ] = VAR_1 / INT_2 ; VAR_3 [ 0 ] = ( VAR_3 [ 0 ] ) * INT_2 ; VAR_3 [ 1 ] = VAR_2 / INT_2 ; VAR_3 [ 1 ] = ( ( VAR_3 [ 1 ] ) + 1 ) * INT_2 ; return VAR_3 ; }\n"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 ) { METHOD_2 ( ( STRING_1 + VAR_1 ) ) ; TYPE_1 . METHOD_3 ( VAR_2 , ( STRING_2 + VAR_1 ) ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; intent . METHOD_4 ( VAR_4 , VAR_5 ) ; intent . METHOD_4 ( VAR_6 , VAR_1 ) ; METHOD_5 ( intent ) ; }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 ) { METHOD_2 ( ( STRING_1 + VAR_1 ) ) ; TYPE_1 . i ( VAR_2 , ( STRING_2 + VAR_1 ) ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; intent . METHOD_4 ( VAR_4 , VAR_5 ) ; intent . METHOD_4 ( VAR_6 , VAR_1 ) ; METHOD_5 ( intent ) ; }\n"}
{"problem": "public static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 buffer = TYPE_1 . METHOD_2 ( VAR_2 ) ; buffer . METHOD_3 ( VAR_1 ) ; java.lang.String VAR_3 = TYPE_2 . METHOD_4 ( buffer . array ( ) ) ; for ( int i = 0 ; i < ( INT_1 - ( VAR_3 . length ( ) ) ) ; i ++ ) { VAR_3 = \"0\" + VAR_3 ; } return VAR_3 ; }\n", "fixed": "public static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 buffer = TYPE_1 . METHOD_2 ( VAR_2 ) ; buffer . METHOD_3 ( VAR_1 ) ; java.lang.String VAR_3 = TYPE_2 . METHOD_4 ( buffer . array ( ) ) ; while ( ( VAR_3 . length ( ) ) < INT_1 ) { VAR_3 = \"0\" + VAR_3 ; } return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 c = VAR_2 . METHOD_2 ( VAR_3 , 0 ) ; VAR_4 = VAR_2 . METHOD_3 ( STRING_1 , VAR_5 , VAR_6 ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; VAR_7 = new TYPE_3 ( VAR_8 , VAR_8 , VAR_8 , VAR_8 ) ; VAR_9 = 1 ; VAR_10 = VAR_11 ; VAR_1 . add ( VAR_4 , c ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 c = VAR_2 . METHOD_2 ( VAR_3 , 0 ) ; VAR_4 = VAR_2 . METHOD_3 ( STRING_1 , VAR_5 , VAR_6 ) ; VAR_4 . METHOD_4 ( this ) ; VAR_7 = new TYPE_3 ( VAR_8 , VAR_8 , VAR_8 , VAR_8 ) ; VAR_9 = 1 ; VAR_10 = VAR_11 ; VAR_1 . add ( VAR_4 , c ) ; }\n"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"problem": "public java.util.List < java.lang.String > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 ; try { VAR_1 = VAR_2 . METHOD_2 ( ) ; } catch ( java.lang.Exception VAR_3 ) { java.lang.System.err.println ( STRING_1 ) ; VAR_3 . METHOD_3 ( ) ; return null ; } java.util.List < java.lang.String > VAR_4 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_5 : VAR_1 ) { VAR_4 . add ( VAR_5 . getId ( ) ) ; } return VAR_4 ; }\n", "fixed": "public java.util.List < java.lang.String > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 ; try { VAR_1 = VAR_2 . METHOD_2 ( ) ; } catch ( java.lang.Exception VAR_3 ) { java.lang.System.err.println ( STRING_1 ) ; return null ; } java.util.List < java.lang.String > VAR_4 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_5 : VAR_1 ) { VAR_4 . add ( VAR_5 . getId ( ) ) ; } return VAR_4 ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 message = new TYPE_1 ( ) ; VAR_2 = ( ( java.lang.String ) ( VAR_1 . get ( STRING_1 ) ) ) ; VAR_3 = ( ( java.lang.String ) ( VAR_1 . get ( STRING_2 ) ) ) ; VAR_4 = ( ( java.lang.Integer ) ( VAR_1 . get ( STRING_3 ) ) ) ; return message ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 message = new TYPE_1 ( ) ; VAR_2 = ( ( java.lang.String ) ( VAR_1 . get ( STRING_1 ) ) ) ; VAR_3 = ( ( java.lang.String ) ( VAR_1 . get ( STRING_2 ) ) ) ; VAR_4 = getInt ( VAR_1 , STRING_3 ) ; return message ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.Long id ) { TYPE_1 VAR_1 = VAR_2 . get ( ( ( VAR_3 ) + id ) ) ; if ( VAR_1 == null ) { VAR_1 = VAR_4 . METHOD_1 ( id ) ; if ( VAR_1 != null ) VAR_2 . put ( ( ( VAR_3 ) + id ) , VAR_1 ) ; } return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.Long id ) { if ( id == null ) return null ; TYPE_1 VAR_1 = VAR_2 . get ( ( ( VAR_3 ) + id ) ) ; if ( VAR_1 == null ) { VAR_1 = VAR_4 . METHOD_1 ( id ) ; if ( VAR_1 != null ) VAR_2 . put ( ( ( VAR_3 ) + id ) , VAR_1 ) ; } return VAR_1 ; }\n"}
{"problem": "java.lang.String METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = new TYPE_1 ( STRING_1 , new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , STRING_2 ) . METHOD_3 ( ) ) . METHOD_3 ( ) ; this . VAR_2 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) , STRING_3 , null , VAR_1 . METHOD_6 ( ) ) ; return VAR_1 ; }\n", "fixed": "java.lang.String METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = new TYPE_1 ( STRING_1 , new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , 0 ) . METHOD_3 ( ) ) . METHOD_3 ( ) ; this . VAR_2 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) , STRING_3 , null , VAR_1 . METHOD_6 ( ) ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "0355f17f04738ad9315d0c8ecad1b282f836e7f3", "projectName": "antlr.antlr4", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\tSetTransition set = (SetTransition)edge;\n \t\t\t\t\tString label = set.label().toString();\n \t\t\t\t\tif ( isLexer ) label = set.label().toString(true);\n\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenNames());\n \t\t\t\t\tif ( edge instanceof NotSetTransition ) label = \"~\"+label;\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}", "fixed": " \t\t\t\t\tSetTransition set = (SetTransition)edge;\n \t\t\t\t\tString label = set.label().toString();\n \t\t\t\t\tif ( isLexer ) label = set.label().toString(true);\n\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tif ( edge instanceof NotSetTransition ) label = \"~\"+label;\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}", "sourceBeforeFix": "grammar.getTokenNames()", "sourceAfterFix": "grammar.getTokenDisplayNames()"}
{"problem": "public void METHOD_1 ( ) { long VAR_1 = TYPE_1 . METHOD_2 ( new java.util.Date ( ) . getTime ( ) ) ; if ( VAR_1 > ( VAR_2 ) ) { VAR_3 . getData ( ) . METHOD_3 ( ) ; VAR_4 . getData ( ) . METHOD_3 ( ) ; VAR_5 . getData ( ) . METHOD_3 ( ) ; VAR_6 . getData ( ) . METHOD_3 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { long VAR_1 = TYPE_1 . METHOD_2 ( new java.util.Date ( ) . getTime ( ) ) ; if ( VAR_1 > ( VAR_2 ) ) { VAR_3 . getData ( ) . METHOD_3 ( ) ; VAR_4 . getData ( ) . METHOD_3 ( ) ; VAR_5 . getData ( ) . METHOD_3 ( ) ; VAR_6 . getData ( ) . METHOD_3 ( ) ; VAR_2 = VAR_1 ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_3 ) ) ; java.lang.String VAR_4 = STRING_1 + ( new java.lang.String ( VAR_2 ) ) ; TYPE_1 VAR_5 = new TYPE_1 ( ) ; VAR_5 . set ( VAR_6 , VAR_4 ) ; return VAR_5 ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_3 ) ) ; java.lang.String VAR_4 = STRING_1 + ( new java.lang.String ( VAR_2 ) ) ; TYPE_1 VAR_5 = new TYPE_1 ( ) ; VAR_5 . set ( VAR_6 , VAR_4 ) ; return VAR_5 ; }\n"}
{"problem": "public static android.content.Intent METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , int VAR_3 ) { android.content.Intent intent = new android.content.Intent ( VAR_4 . context , VAR_5 class ) ; intent . METHOD_2 ( VAR_6 , VAR_1 ) ; intent . METHOD_2 ( VAR_7 , VAR_8 ) ; intent . METHOD_2 ( VAR_9 , VAR_3 ) ; return intent ; }\n", "fixed": "public static android.content.Intent METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , int VAR_3 ) { android.content.Intent intent = new android.content.Intent ( VAR_4 . context , VAR_5 class ) ; intent . METHOD_2 ( VAR_6 , VAR_1 . getValue ( ) ) ; intent . METHOD_2 ( VAR_7 , VAR_8 ) ; intent . METHOD_2 ( VAR_9 , VAR_3 ) ; return intent ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 intent ) { TYPE_1 i = new TYPE_1 ( this , VAR_1 class ) ; i . METHOD_2 ( VAR_2 ) ; i . METHOD_3 ( VAR_3 ) ; METHOD_4 ( i ) ; final java.lang.String VAR_4 = intent . METHOD_5 ( ) ; if ( VAR_4 != null ) { TYPE_2 . METHOD_6 ( ) . METHOD_7 ( VAR_4 , new TYPE_3 ( this ) ) ; } else { TYPE_4 . METHOD_8 ( STRING_1 ) ; TYPE_4 . METHOD_8 ( STRING_2 ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 intent ) { TYPE_1 i = new TYPE_1 ( this , VAR_1 class ) ; i . METHOD_2 ( VAR_2 ) ; i . METHOD_3 ( VAR_3 ) ; METHOD_4 ( i ) ; final java.lang.String VAR_4 = intent . METHOD_5 ( ) ; intent . METHOD_2 ( null ) ; if ( VAR_4 != null ) { TYPE_2 . METHOD_6 ( ) . METHOD_7 ( VAR_4 , new TYPE_3 ( this ) ) ; } else { TYPE_4 . METHOD_8 ( STRING_1 ) ; TYPE_4 . METHOD_8 ( STRING_2 ) ; } }\n"}
{"problem": "public void METHOD_1 ( double VAR_1 , double VAR_2 , double VAR_3 , double VAR_4 , TYPE_1 < java.lang.Integer > VAR_5 ) { if ( METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) { VAR_5 . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; java.lang.System.out.println ( STRING_1 ) ; } else if ( METHOD_5 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) { VAR_5 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ; java.lang.System.out.println ( STRING_2 ) ; } }\n", "fixed": "public void METHOD_1 ( double VAR_1 , double VAR_2 , double VAR_3 , double VAR_4 , TYPE_1 < java.lang.Integer > VAR_5 ) { if ( METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) { VAR_5 . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; } else if ( METHOD_5 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) { VAR_5 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( android.content.Context context ) { java.lang.String VAR_1 = STRING_1 ; java.io.InputStream VAR_2 = context . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; java.lang.StringBuffer VAR_4 = new java.lang.StringBuffer ( ) ; int VAR_5 ; try { while ( ( VAR_5 = VAR_2 . METHOD_4 ( ) ) != ( - 1 ) ) { VAR_4 . append ( ( ( char ) ( VAR_5 ) ) ) ; } } catch ( java.io.IOException VAR_6 ) { VAR_6 . METHOD_5 ( ) ; } return VAR_4 . toString ( ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( android.content.Context context ) { java.io.InputStream VAR_2 = context . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; java.lang.StringBuffer VAR_4 = new java.lang.StringBuffer ( ) ; int VAR_5 ; try { while ( ( VAR_5 = VAR_2 . METHOD_4 ( ) ) != ( - 1 ) ) { VAR_4 . append ( ( ( char ) ( VAR_5 ) ) ) ; } } catch ( java.io.IOException VAR_6 ) { VAR_6 . METHOD_5 ( ) ; } return VAR_4 . toString ( ) ; }\n"}
{"problem": "private boolean METHOD_1 ( TYPE_1 node ) { if ( ( node . METHOD_2 ( ) ) && ( node . METHOD_3 ( ) ) ) { return false ; } if ( ! ( node . METHOD_4 ( ) . isEmpty ( ) ) ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_5 ( node . METHOD_6 ( 0 ) ) ; if ( ( VAR_1 . METHOD_2 ( ) ) && ( VAR_1 . METHOD_3 ( ) ) ) { return false ; } } return true ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 node ) { if ( ( node . METHOD_2 ( ) ) && ( node . METHOD_3 ( ) ) ) { return false ; } if ( ! ( node . METHOD_4 ( ) . isEmpty ( ) ) ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_5 ( node . METHOD_6 ( 0 ) ) ; if ( ( ( VAR_1 != null ) && ( VAR_1 . METHOD_2 ( ) ) ) && ( VAR_1 . METHOD_3 ( ) ) ) { return false ; } } return true ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 info ) { METHOD_2 ( ) ; TYPE_2 VAR_1 = VAR_2 . METHOD_3 ( ) ; try { VAR_2 . METHOD_4 ( info ) ; VAR_1 . commit ( ) ; } catch ( java.lang.Exception TYPE_3 ) { java.lang.System.out.println ( ( STRING_1 + ( TYPE_3 . METHOD_5 ( ) ) ) ) ; VAR_1 . METHOD_6 ( ) ; } finally { METHOD_7 ( ) ; METHOD_8 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 info ) { TYPE_2 VAR_1 = VAR_2 . METHOD_3 ( ) ; try { VAR_2 . METHOD_4 ( info ) ; VAR_1 . commit ( ) ; } catch ( java.lang.Exception TYPE_3 ) { java.lang.System.out.println ( ( STRING_1 + ( TYPE_3 . METHOD_5 ( ) ) ) ) ; VAR_1 . METHOD_6 ( ) ; } finally { METHOD_7 ( ) ; } }\n"}
{"fixCommitSHA1": "1311b037963f606ad2d2acb70f3141cddd7e6067", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "       Logger.getLogger(SourceMapInput.class.getName());\n   private SourceFile sourceFile;\n  private SourceMapConsumerV3 parsedSourceMap = null;\n   public SourceMapInput(SourceFile sourceFile) {\n     this.sourceFile = sourceFile;", "fixed": "       Logger.getLogger(SourceMapInput.class.getName());\n   private SourceFile sourceFile;\n  private volatile SourceMapConsumerV3 parsedSourceMap = null;\n   public SourceMapInput(SourceFile sourceFile) {\n     this.sourceFile = sourceFile;", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "0d3c78b6f28fb3cad00c12605209c524702adb0a", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "fixed": "                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { if ( ( VAR_1 > INT_1 ) || ( VAR_1 < 0 ) ) return ; ( this . VAR_2 ) ++ ; this . VAR_3 = ( ( ( VAR_3 ) * ( VAR_2 ) ) + VAR_1 ) / ( ( VAR_2 ) + 1 ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { if ( ( VAR_1 > INT_1 ) || ( VAR_1 < 0 ) ) return ; this . VAR_3 = ( ( ( VAR_3 ) * ( VAR_2 ) ) + VAR_1 ) / ( ( VAR_2 ) + 1 ) ; ( this . VAR_2 ) ++ ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c86726616d8ae64416799c1a6fae3640bb8bf15d", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": " public class HttpProxyRouteTest extends BaseJettyTest {\n    private int size = 500;\n     @Test\n     public void testHttpProxy() throws Exception {", "fixed": " public class HttpProxyRouteTest extends BaseJettyTest {\n    private int size = 10;\n     @Test\n     public void testHttpProxy() throws Exception {", "sourceBeforeFix": "size=500", "sourceAfterFix": "size=10"}
{"problem": "public java.lang.String METHOD_1 ( ) { java.lang.String content ; try { content = ( ( java.lang.String ) ( this . VAR_1 . get ( STRING_1 ) ) ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( content ) ; content = VAR_2 . text ( ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_3 . METHOD_3 ( STRING_2 , VAR_3 . METHOD_4 ( ) , VAR_3 ) ; content = null ; } return content ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { java.lang.String content ; try { content = ( ( java.lang.String ) ( this . VAR_1 . get ( STRING_1 ) ) ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( content ) ; content = VAR_2 . toString ( ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_3 . METHOD_3 ( STRING_2 , VAR_3 . METHOD_4 ( ) , VAR_3 ) ; content = null ; } return content ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; } else { VAR_3 . METHOD_4 ( TYPE_3 . METHOD_5 ( ) . METHOD_6 ( STRING_1 ) . toString ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } else { VAR_3 . METHOD_4 ( TYPE_3 . METHOD_5 ( ) . METHOD_6 ( STRING_1 ) . toString ( ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ ( VAR_3 . length ) + 1 ] ; for ( int i = 0 ; i < ( VAR_3 . length ) ; i ++ ) { VAR_2 [ i ] = VAR_3 [ i ] ; } VAR_2 [ VAR_3 . length ] = VAR_1 ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ ( VAR_3 . length ) + 1 ] ; for ( int i = 0 ; i < ( VAR_3 . length ) ; i ++ ) { VAR_2 [ i ] = VAR_3 [ i ] ; } VAR_2 [ VAR_3 . length ] = VAR_1 ; VAR_3 = VAR_2 ; }\n"}
{"problem": "public synchronized void METHOD_1 ( int [ ] [ ] VAR_1 ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { java.util.ArrayList < java.lang.Integer > values = new java.util.ArrayList < java.lang.Integer > ( ) ; for ( int j = 0 ; j < ( VAR_1 [ i ] . length ) ; j ++ ) { values . add ( VAR_1 [ i ] [ j ] ) ; } data . add ( values ) ; } }\n", "fixed": "public synchronized void METHOD_1 ( int [ ] [ ] VAR_1 ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { java.util.List < java.lang.Integer > values = new java.util.ArrayList < java.lang.Integer > ( ) ; for ( int j = 0 ; j < ( VAR_1 [ i ] . length ) ; j ++ ) { values . add ( VAR_1 [ i ] [ j ] ) ; } data . add ( values ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 msg , java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = TYPE_2 . split ( msg . getText ( ) ) ; for ( java.lang.String VAR_3 : VAR_2 ) { this . VAR_4 . METHOD_1 ( VAR_1 , java.lang.String.format ( STRING_1 , msg . METHOD_2 ( ) . getClass ( ) . METHOD_3 ( ) , msg . METHOD_4 ( ) , msg . METHOD_5 ( ) , VAR_3 ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 msg , java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = TYPE_2 . split ( msg . getText ( ) ) ; for ( java.lang.String VAR_3 : VAR_2 ) { VAR_4 . METHOD_1 ( VAR_1 , java.lang.String.format ( STRING_1 , msg . METHOD_2 ( ) . getClass ( ) . METHOD_3 ( ) , msg . METHOD_4 ( ) , msg . METHOD_5 ( ) , VAR_3 ) ) ; } }\n"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 , TYPE_3 { if ( ( VAR_3 ) != null ) { VAR_4 . METHOD_2 ( VAR_1 , ( ( VAR_5 ) == null ? METHOD_3 ( VAR_6 ) : VAR_5 ) , VAR_3 ) ; } }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 , TYPE_3 { if ( ( VAR_3 ) != null ) { VAR_4 . METHOD_2 ( VAR_1 , ( ( VAR_5 ) == null ? METHOD_3 ( VAR_6 ) : VAR_5 ) , VAR_3 ) ; } else { } }\n"}
{"problem": "public static void METHOD_1 ( ) { if ( ( ( VAR_1 [ ( ( VAR_1 . length ) - 1 ) ] ) > ( VAR_2 ) ) && ( ( VAR_3 [ ( ( VAR_3 . length ) - 1 ) ] ) > ( VAR_2 ) ) ) { VAR_4 = true ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( ( VAR_1 [ ( ( VAR_1 . length ) - 1 ) ] ) > ( VAR_2 ) ) && ( ( VAR_3 [ ( ( VAR_3 . length ) - 1 ) ] ) > ( VAR_2 ) ) ) { VAR_4 = true ; } }\n"}
{"problem": "public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_2 element = METHOD_2 ( VAR_1 ) ; java.lang.String VAR_2 = element . METHOD_3 ( element . METHOD_4 ( ) ) ; TYPE_3 VAR_3 = METHOD_5 ( VAR_2 ) ; java.lang.String VAR_4 = METHOD_6 ( element ) ; java.lang.Object VAR_5 = VAR_3 . METHOD_7 ( new TYPE_4 ( new TYPE_5 ( VAR_4 ) ) ) ; return VAR_5 ; }\n", "fixed": "public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_2 element = METHOD_2 ( VAR_1 ) ; if ( element == null ) return null ; java.lang.String VAR_2 = element . METHOD_3 ( element . METHOD_4 ( ) ) ; TYPE_3 VAR_3 = METHOD_5 ( VAR_2 ) ; java.lang.String VAR_4 = METHOD_6 ( element ) ; java.lang.Object VAR_5 = VAR_3 . METHOD_7 ( new TYPE_4 ( new TYPE_5 ( VAR_4 ) ) ) ; return VAR_5 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected int delete ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { int VAR_3 = 0 ; if ( TYPE_1 . METHOD_1 ( ) ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( ) ; VAR_3 = VAR_4 . delete ( VAR_1 , VAR_2 , null ) ; VAR_4 . METHOD_3 ( ) ; } else { VAR_6 . add ( new TYPE_3 ( VAR_7 , VAR_1 , null , VAR_2 , null ) ) ; } return VAR_3 ; }\n", "fixed": "protected int delete ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { int VAR_3 = 0 ; if ( TYPE_1 . METHOD_1 ( ) ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( ) ; VAR_3 = VAR_4 . delete ( VAR_1 , VAR_2 , null ) ; } else { VAR_6 . add ( new TYPE_3 ( VAR_7 , VAR_1 , null , VAR_2 , null ) ) ; } return VAR_3 ; }\n"}
{"problem": "private java.lang.CharSequence METHOD_1 ( char [ ] VAR_1 , int VAR_2 , int VAR_3 ) { if ( ( VAR_1 [ VAR_3 ] ) == ( VAR_4 ) ) { return substring ( VAR_1 , VAR_2 , VAR_3 ) ; } int VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != ( VAR_6 ) ) { return substring ( VAR_1 , VAR_2 , VAR_5 ) ; } else { return substring ( VAR_1 , VAR_2 , ( VAR_3 + 1 ) ) ; } }\n", "fixed": "private java.lang.CharSequence METHOD_1 ( char [ ] VAR_1 , int VAR_2 , int VAR_3 ) { if ( ( VAR_1 [ VAR_3 ] ) == ( VAR_4 ) ) { return substring ( VAR_1 , VAR_2 , VAR_3 ) ; } return substring ( VAR_1 , VAR_2 , ( VAR_3 + 1 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { if ( ( ( VAR_1 . getText ( ) ) != null ) && ( ! ( STRING_1 . equals ( VAR_1 . getText ( ) ) ) ) ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . setEnabled ( false ) ; } else { VAR_2 . setEnabled ( true ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { if ( ! ( VAR_1 . getText ( ) . trim ( ) . isEmpty ( ) ) ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . setEnabled ( false ) ; } else { VAR_2 . setEnabled ( true ) ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixValueEndpointBuilder\n             extends\n                 AtomixValueEndpointConsumerBuilder, AtomixValueEndpointProducerBuilder {\n         default AdvancedAtomixValueEndpointBuilder advanced() {", "fixed": "     \n    public interface AtomixValueEndpointBuilder\n             extends\n                 AtomixValueEndpointConsumerBuilder, AtomixValueEndpointProducerBuilder {\n         default AdvancedAtomixValueEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( java.lang.String [ ] VAR_1 ) { for ( java.lang.String [ ] c : VAR_2 ) { if ( ( c [ 0 ] . equals ( VAR_1 [ 0 ] ) ) && ( c [ 1 ] . equals ( VAR_1 [ 1 ] ) ) ) { VAR_2 . remove ( c ) ; break ; } } }\n", "fixed": "public boolean METHOD_1 ( java.lang.String [ ] VAR_1 ) { for ( java.lang.String [ ] c : VAR_2 ) { if ( ( c [ 0 ] . equals ( VAR_1 [ 0 ] ) ) && ( c [ 1 ] . equals ( VAR_1 [ 1 ] ) ) ) { VAR_2 . remove ( c ) ; return true ; } } return false ; }\n"}
{"problem": "protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent intent ) { super . METHOD_1 ( VAR_1 , VAR_2 , intent ) ; if ( VAR_2 == INT_1 ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( intent . METHOD_2 ( STRING_1 ) ) ) ; VAR_4 . remove ( VAR_3 . getId ( ) ) ; VAR_4 . add ( VAR_3 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } }\n", "fixed": "protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent intent ) { super . METHOD_1 ( VAR_1 , VAR_2 , intent ) ; if ( VAR_2 == INT_1 ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( intent . METHOD_2 ( STRING_1 ) ) ) ; VAR_4 . set ( VAR_3 . getId ( ) , VAR_3 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } }\n"}
{"problem": "public static void METHOD_1 ( java.lang.String title , java.lang.String type ) { if ( VAR_1 ) return ; if ( VAR_2 ) VAR_3 . info ( ( ( ( STRING_1 + title ) + STRING_2 ) + type ) ) ; VAR_4 . type ( VAR_5 ) . METHOD_2 ( VAR_6 ) . METHOD_3 ( STRING_3 ) . METHOD_4 ( STRING_4 ) . METHOD_5 ( title ) . label ( type ) . build ( ) . METHOD_6 ( false ) ; }\n", "fixed": "public static void METHOD_1 ( java.lang.String title , java.lang.String type ) { if ( VAR_1 ) return ; if ( VAR_2 ) VAR_3 . info ( ( ( ( STRING_1 + title ) + STRING_2 ) + type ) ) ; VAR_4 . type ( VAR_5 ) . METHOD_2 ( VAR_6 ) . METHOD_3 ( STRING_3 ) . METHOD_4 ( STRING_4 ) . METHOD_5 ( title ) . label ( type ) . build ( ) . METHOD_6 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( boolean VAR_1 ) { TYPE_1 context = METHOD_2 ( ) ; if ( VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_2 ( context ) ; TYPE_3 VAR_3 = context . METHOD_3 ( ) . METHOD_4 ( VAR_4 class ) ; VAR_3 . METHOD_5 ( context , VAR_2 ) ; } TYPE_4 . METHOD_1 ( METHOD_6 ( ) , VAR_2 . METHOD_6 ( ) ) ; } else { TYPE_4 . METHOD_1 ( METHOD_6 ( ) , 0 ) ; } }\n", "fixed": "public void METHOD_1 ( boolean VAR_1 ) { TYPE_1 context = METHOD_2 ( ) ; if ( VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_2 ( context ) ; } TYPE_3 VAR_3 = context . METHOD_3 ( ) . METHOD_4 ( VAR_4 class ) ; VAR_3 . METHOD_5 ( context , VAR_2 ) ; TYPE_4 . METHOD_1 ( METHOD_6 ( ) , VAR_2 . METHOD_6 ( ) ) ; } else { TYPE_4 . METHOD_1 ( METHOD_6 ( ) , 0 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 ) { java.util.LinkedList < java.lang.String > VAR_3 = new java.util.LinkedList < java.lang.String > ( ) ; for ( TYPE_2 VAR_4 : VAR_2 ) { java.lang.String VAR_5 = ( VAR_6 ) + ( VAR_4 . getName ( ) . toLowerCase ( ) ) ; VAR_1 . put ( VAR_5 , VAR_4 . getValue ( ) ) ; } VAR_1 . put ( VAR_7 , TYPE_3 . METHOD_2 ( CHAR_1 ) . METHOD_3 ( VAR_3 ) ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 ) { java.util.LinkedList < java.lang.String > VAR_3 = new java.util.LinkedList < java.lang.String > ( ) ; for ( TYPE_2 VAR_4 : VAR_2 ) { java.lang.String VAR_5 = ( VAR_6 ) + ( VAR_4 . getName ( ) . toLowerCase ( ) ) ; VAR_3 . add ( VAR_5 ) ; VAR_1 . put ( VAR_5 , VAR_4 . getValue ( ) ) ; } VAR_1 . put ( VAR_7 , TYPE_3 . METHOD_2 ( CHAR_1 ) . METHOD_3 ( VAR_3 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { for ( TYPE_1 item : VAR_1 . METHOD_2 ( ) ) { item . METHOD_3 ( ) ; } for ( TYPE_1 item : VAR_2 . METHOD_2 ( ) ) { item . METHOD_3 ( ) ; } TYPE_2 . METHOD_4 ( VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( ) { for ( TYPE_1 item : VAR_1 . METHOD_2 ( ) ) { item . METHOD_3 ( ) ; } for ( TYPE_1 item : VAR_2 . METHOD_2 ( ) ) { item . METHOD_3 ( ) ; } state = null ; TYPE_2 . METHOD_4 ( VAR_3 ) ; }\n"}
{"fixCommitSHA1": "eba20b3dcc401fb4c873afc5948cc92fbcb00097", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\tint size = s.count();\n \t\t\tfloat[] ret = new float[size];\n \t\t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\t\tret[i] = ((Number) s.first()).intValue();\n \t\t\treturn ret;\n \t\t\t}\n \t}", "fixed": " \t\t\tint size = s.count();\n \t\t\tfloat[] ret = new float[size];\n \t\t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\t\tret[i] = ((Number) s.first()).floatValue();\n \t\t\treturn ret;\n \t\t\t}\n \t}", "sourceBeforeFix": "((Number)s.first()).intValue()", "sourceAfterFix": "((Number)s.first()).longValue()"}
{"problem": "public static int METHOD_1 ( int [ ] array , int start , int end ) { if ( ( end - start ) >= 1 ) { ( VAR_1 ) ++ ; } int VAR_2 = array [ start ] ; while ( start < end ) { while ( ( array [ start ] ) < VAR_2 ) { start ++ ; } while ( ( array [ end ] ) > VAR_2 ) { end -- ; } TYPE_1 . METHOD_2 ( array , start , end ) ; } return start ; }\n", "fixed": "public static int METHOD_1 ( int [ ] array , int start , int end ) { ( VAR_1 ) ++ ; int VAR_2 = array [ start ] ; while ( start < end ) { while ( ( array [ start ] ) < VAR_2 ) { start ++ ; } while ( ( array [ end ] ) > VAR_2 ) { end -- ; } TYPE_1 . METHOD_2 ( array , start , end ) ; } return start ; }\n"}
{"problem": "private < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { throw new TYPE_3 ( java.lang.String.format ( STRING_1 , VAR_1 . getName ( ) ) ) ; } return new TYPE_4 < TYPE_1 > ( VAR_1 , VAR_2 , parameters ) ; }\n", "fixed": "public < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { throw new TYPE_3 ( java.lang.String.format ( STRING_1 , VAR_1 . getName ( ) ) ) ; } return new TYPE_4 < TYPE_1 > ( VAR_1 , VAR_2 , parameters ) ; }\n"}
{"problem": "protected void METHOD_1 ( ) { VAR_1 [ 0 ] = STRING_1 ; if ( ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) > 0 ) { VAR_1 [ 1 ] = STRING_2 ; VAR_1 [ INT_1 ] = STRING_3 ; VAR_1 [ INT_2 ] = STRING_4 ; VAR_1 [ INT_3 ] = STRING_5 ; } else { VAR_1 [ 1 ] = STRING_5 ; VAR_1 [ INT_1 ] = STRING_5 ; VAR_1 [ INT_2 ] = STRING_5 ; VAR_1 [ INT_3 ] = STRING_5 ; } }\n", "fixed": "protected void METHOD_1 ( ) { VAR_1 [ 0 ] = STRING_1 ; if ( ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) > 0 ) { VAR_1 [ 1 ] = STRING_2 ; VAR_1 [ INT_1 ] = STRING_3 ; VAR_1 [ INT_2 ] = STRING_4 ; } else { VAR_1 [ 1 ] = STRING_5 ; VAR_1 [ INT_1 ] = STRING_5 ; VAR_1 [ INT_2 ] = STRING_5 ; } VAR_1 [ INT_3 ] = STRING_5 ; }\n"}
{"problem": "int METHOD_1 ( java.lang.String str ) { TYPE_1 p ; p = TYPE_1 . METHOD_2 ( STRING_1 ) ; java.util.regex.Matcher VAR_1 ; VAR_1 = p . METHOD_3 ( str ) ; if ( VAR_1 . METHOD_4 ( ) ) { int result = java.lang.Integer.parseInt ( str . substring ( VAR_1 . start ( ) , VAR_1 . end ( ) ) ) ; return result ; } else return ( ( java.lang.Integer ) ( null ) ) ; }\n", "fixed": "final java.lang.Object METHOD_1 ( final java.lang.String str ) { TYPE_1 p ; p = TYPE_1 . METHOD_2 ( STRING_1 ) ; java.util.regex.Matcher VAR_1 ; VAR_1 = p . METHOD_3 ( str ) ; if ( VAR_1 . METHOD_4 ( ) ) { int result = java.lang.Integer.parseInt ( str . substring ( VAR_1 . start ( ) , VAR_1 . end ( ) ) ) ; return result ; } else { return null ; } }\n"}
{"problem": "public < TYPE_1 > boolean METHOD_1 ( TYPE_2 < TYPE_1 > key , TYPE_1 value ) { TYPE_3 . METHOD_2 ( key , STRING_1 ) ; VAR_1 . METHOD_3 ( ) ; try { METHOD_4 ( ) ; if ( ! ( VAR_2 . METHOD_5 ( key ) ) ) { VAR_2 . put ( key , value ) ; return true ; } return false ; } finally { VAR_1 . METHOD_6 ( ) ; } }\n", "fixed": "public < TYPE_1 > boolean METHOD_1 ( TYPE_2 < TYPE_1 > key , TYPE_1 value ) { TYPE_3 . METHOD_2 ( key , STRING_1 ) ; VAR_1 . METHOD_3 ( ) ; try { if ( ! ( VAR_2 . METHOD_5 ( key ) ) ) { METHOD_4 ( ) ; VAR_2 . put ( key , value ) ; return true ; } return false ; } finally { VAR_1 . METHOD_6 ( ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( TYPE_3 . getContext ( ) . METHOD_2 ( ) ) ) ; final TYPE_4 VAR_2 = ( ( TYPE_4 ) ( VAR_1 . METHOD_3 ( ) ) ) ; return new TYPE_5 ( VAR_2 . METHOD_4 ( ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { if ( ! ( ( TYPE_3 . getContext ( ) . METHOD_2 ( ) ) instanceof TYPE_2 ) ) { return null ; } TYPE_2 VAR_1 = ( ( TYPE_2 ) ( TYPE_3 . getContext ( ) . METHOD_2 ( ) ) ) ; final TYPE_4 VAR_2 = ( ( TYPE_4 ) ( VAR_1 . METHOD_3 ( ) ) ) ; return new TYPE_5 ( VAR_2 . METHOD_4 ( ) ) ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"problem": "public long METHOD_1 ( int id ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; try { return VAR_1 . delete ( VAR_3 , ( ( ( VAR_4 ) + STRING_1 ) + id ) , null ) ; } catch ( java.lang.Exception VAR_5 ) { return - 1 ; } }\n", "fixed": "public long METHOD_1 ( int id ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; try { int i = VAR_1 . delete ( VAR_3 , ( ( ( VAR_4 ) + STRING_1 ) + id ) , null ) ; return VAR_1 . delete ( VAR_3 , ( ( ( VAR_4 ) + STRING_1 ) + id ) , null ) ; } catch ( java.lang.Exception VAR_5 ) { return - 1 ; } }\n"}
{"problem": "public void METHOD_1 ( ) { for ( java.util.Iterator < java.lang.Integer > VAR_1 = METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; ) { int VAR_2 = VAR_1 . METHOD_4 ( ) ; for ( java.util.Iterator < java.lang.Integer > VAR_3 = METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; ) { int VAR_4 = VAR_3 . METHOD_4 ( ) ; if ( METHOD_5 ( VAR_2 , VAR_4 ) ) { METHOD_6 ( VAR_4 ) ; } } } }\n", "fixed": "public void METHOD_1 ( ) { for ( java.util.Iterator < java.lang.Integer > VAR_1 = METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; ) { int VAR_2 = VAR_1 . METHOD_4 ( ) ; for ( java.util.Iterator < java.lang.Integer > VAR_3 = METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; ) { int VAR_4 = VAR_3 . METHOD_4 ( ) ; if ( ( VAR_2 != VAR_4 ) && ( METHOD_5 ( VAR_2 , VAR_4 ) ) ) { METHOD_6 ( VAR_4 ) ; } } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "0d0ab352fa9a8ac9cb2dcb543ba1705a4e187eb1", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "                 if (batteryLevel == 255) {\n                     batteryLevel = 0;\n                     batteryLow = true;\n                    logger.warn(\"NODE {}: BATTERY LOW!\", this.getNode().getNodeId());\n                 } else {\n                     batteryLow = false;\n                 }", "fixed": "                 if (batteryLevel == 255) {\n                     batteryLevel = 0;\n                     batteryLow = true;\n                    logger.debug(\"NODE {}: BATTERY LOW!\", this.getNode().getNodeId());\n                 } else {\n                     batteryLow = false;\n                 }", "sourceBeforeFix": "logger.warn(\"NODE {}: BATTERY LOW!\",this.getNode().getNodeId())", "sourceAfterFix": "logger.debug(\"NODE {}: BATTERY LOW!\",this.getNode().getNodeId())"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { int count = 0 ; for ( int i = 0 ; i < ( VAR_2 ) ; i ++ ) { for ( int j = 0 ; j < ( VAR_3 ) ; j ++ ) { VAR_4 [ j ] [ i ] . METHOD_1 ( VAR_1 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( int i = 0 ; i < ( VAR_2 ) ; i ++ ) { for ( int j = 0 ; j < ( VAR_3 ) ; j ++ ) { VAR_4 [ j ] [ i ] . METHOD_1 ( VAR_1 ) ; } } }\n"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.valueOf(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "fixed": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String substring ) { java.lang.String VAR_1 = null ; for ( TYPE_1 event : list ) { final java.lang.String VAR_2 = event . METHOD_2 ( ) ; if ( VAR_2 . contains ( substring ) ) { VAR_1 = VAR_2 ; break ; } } return VAR_1 ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String substring ) { java.lang.String VAR_1 = null ; synchronized ( this ) { for ( TYPE_1 event : list ) { final java.lang.String VAR_2 = event . METHOD_2 ( ) ; if ( VAR_2 . contains ( substring ) ) { VAR_1 = VAR_2 ; break ; } } } return VAR_1 ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . get ( 0 ) ; if ( ( VAR_2 . value ( ) ) == ( VAR_4 ) ) { VAR_3 . remove ( 0 ) ; return new TYPE_1 ( VAR_5 , VAR_1 , METHOD_2 ( ) ) ; } if ( ( VAR_2 . value ( ) ) == ( VAR_6 ) ) { VAR_3 . remove ( 0 ) ; return new TYPE_1 ( VAR_7 , VAR_1 , METHOD_2 ( ) ) ; } return null ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . get ( 0 ) ; if ( ( VAR_2 . value ( ) ) == ( VAR_4 ) ) { VAR_3 . remove ( 0 ) ; return new TYPE_1 ( VAR_5 , VAR_1 , METHOD_2 ( ) ) ; } if ( ( VAR_2 . value ( ) ) == ( VAR_6 ) ) { VAR_3 . remove ( 0 ) ; return new TYPE_1 ( VAR_7 , VAR_1 , METHOD_2 ( ) ) ; } return VAR_1 ; }\n"}
{"problem": "public static void main ( java.lang.String [ ] arg ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 = false ; VAR_3 = INT_1 ; VAR_1 . height = INT_2 ; VAR_1 . title = STRING_1 ; VAR_1 . METHOD_1 ( STRING_2 , VAR_4 ) ; new TYPE_2 ( new TYPE_3 ( ) , VAR_1 ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] arg ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 = false ; VAR_3 = INT_1 ; VAR_1 . height = INT_2 ; VAR_1 . title = STRING_1 ; new TYPE_2 ( new TYPE_3 ( ) , VAR_1 ) ; }\n"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClientModel(@Valid Client body);\n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })", "fixed": "     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClientModel(@Valid Client body) throws Exception;\n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"problem": "public final boolean METHOD_1 ( ) { if ( 0 != ( ( VAR_1 ) & ( VAR_2 ) ) ) { final int VAR_3 = VAR_4 . METHOD_2 ( ) ; return ( INT_1 == VAR_3 ) || ( INT_2 == VAR_3 ) ; } return false ; }\n", "fixed": "public final boolean METHOD_1 ( ) { if ( 0 != ( ( VAR_1 ) & ( VAR_2 ) ) ) { final int VAR_3 = VAR_4 . METHOD_2 ( ) ; return ( INT_1 == VAR_3 ) || ( INT_2 == VAR_3 ) ; } else { return false ; } }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( STRING_9 ) . METHOD_4 ( ) . METHOD_7 ( ) . METHOD_10 ( ) . METHOD_4 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( STRING_9 ) . METHOD_4 ( ) . METHOD_7 ( ) . METHOD_10 ( ) . METHOD_4 ( ) ; }\n"}
{"problem": "public static void main ( final java.lang.String [ ] args ) { final TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; try { if ( ( args.length ) < INT_1 ) { TYPE_2 . METHOD_1 ( VAR_1 ) ; } else { TYPE_2 . METHOD_2 ( VAR_1 , args ) ; } } catch ( java.lang.Throwable VAR_2 ) { TYPE_3 . error ( STRING_2 , VAR_2 ) ; java.lang.System.exit ( ( - 1 ) ) ; } finally { VAR_1 . METHOD_3 ( ) ; } }\n", "fixed": "public static void main ( final java.lang.String [ ] args ) throws java.lang.Exception { final TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; try { if ( ( args.length ) < INT_1 ) { TYPE_2 . METHOD_1 ( VAR_1 ) ; } else { TYPE_2 . METHOD_2 ( VAR_1 , args ) ; } } finally { VAR_1 . METHOD_3 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; VAR_2 . setText ( java.lang.String.format ( STRING_1 , ( METHOD_8 ( ) ? VAR_3 . METHOD_9 ( ) : STRING_2 ) ) ) ; METHOD_10 ( ) ; VAR_4 . METHOD_11 ( new TYPE_2 ( VAR_5 ) ) ; super . METHOD_1 ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; VAR_2 . setText ( java.lang.String.format ( STRING_1 , ( METHOD_8 ( ) ? VAR_3 . METHOD_9 ( ) : STRING_2 ) ) ) ; METHOD_10 ( ) ; VAR_4 . METHOD_11 ( new TYPE_2 ( VAR_5 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 { super . METHOD_1 ( ) ; METHOD_2 ( ) ; if ( ! ( VAR_1 ) ) { METHOD_3 ( ) ; METHOD_4 ( ) ; } else { METHOD_5 ( ) ; } try { VAR_2 . METHOD_6 ( VAR_3 , ( ! ( VAR_4 . METHOD_7 ( ) ) ) , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception VAR_7 ) { throw new TYPE_1 ( VAR_7 ) ; } }\n", "fixed": "public void METHOD_1 ( ) throws TYPE_1 { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_4 ( ) ; METHOD_3 ( ) ; if ( VAR_1 ) { METHOD_5 ( ) ; } try { VAR_2 . METHOD_6 ( VAR_3 , ( ! ( VAR_4 . METHOD_7 ( ) ) ) , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception VAR_7 ) { throw new TYPE_1 ( VAR_7 ) ; } }\n"}
{"problem": "public void start ( TYPE_1 context ) throws java.lang.Exception { super . start ( context ) ; TYPE_2 VAR_1 = new TYPE_3 ( STRING_1 , STRING_2 ) ; VAR_2 = TYPE_4 . METHOD_1 ( VAR_1 ) ; VAR_3 = ( ( VAR_2 . size ( ) ) > 0 ) ? VAR_2 . get ( 0 ) : null ; if ( ( VAR_3 ) == null ) { VAR_3 = new TYPE_5 ( ) ; } }\n", "fixed": "public void start ( TYPE_1 context ) throws java.lang.Exception { super . start ( context ) ; TYPE_2 VAR_1 = new TYPE_3 ( STRING_1 , STRING_2 ) ; VAR_3 = new TYPE_5 ( ) ; VAR_2 = TYPE_4 . METHOD_1 ( VAR_1 ) ; VAR_2 . add ( VAR_3 ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( ( ( VAR_2 . METHOD_2 ( ) ) != null ) && ( ! ( VAR_2 . METHOD_2 ( ) . isEmpty ( ) ) ) ) && ( ! ( VAR_2 . METHOD_2 ( ) . trim ( ) . METHOD_3 ( STRING_1 ) ) ) ) { android.content.Intent intent = new android.content.Intent ( VAR_3 ) ; intent . METHOD_4 ( TYPE_1 . METHOD_5 ( ( STRING_2 + ( VAR_2 . METHOD_2 ( ) ) ) ) ) ; METHOD_6 ( intent ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( ( VAR_2 . METHOD_2 ( ) ) != null ) && ( ! ( VAR_2 . METHOD_2 ( ) . isEmpty ( ) ) ) ) { android.content.Intent intent = new android.content.Intent ( VAR_3 ) ; intent . METHOD_4 ( TYPE_1 . METHOD_5 ( ( STRING_2 + ( VAR_2 . METHOD_2 ( ) ) ) ) ) ; METHOD_6 ( intent ) ; } }\n"}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "     }\n     if (!isProperlyConfigured) {\n      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n     if (!isConnected()) {\n      logger.error(\"InfluxDB is not yet connected\");\n       return;\n     }", "fixed": "     }\n     if (!isProperlyConfigured) {\n      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n     if (!isConnected()) {\n      logger.warn(\"InfluxDB is not yet connected\");\n       return;\n     }", "sourceBeforeFix": "logger.error(\"InfluxDB is not yet connected\")", "sourceAfterFix": "logger.warn(\"InfluxDB is not yet connected\")"}
{"problem": "public void METHOD_1 ( byte [ ] data , TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; if ( data != null ) { new TYPE_2 ( getContext ( ) , data , VAR_3 , VAR_4 ) . start ( ) ; } if ( ! ( VAR_4 . METHOD_3 ( ) ) ) { METHOD_4 ( ) ; } }\n", "fixed": "public void METHOD_1 ( byte [ ] data , TYPE_1 VAR_1 ) { if ( data != null ) { new TYPE_2 ( getContext ( ) , data , VAR_3 , VAR_4 ) . start ( ) ; } if ( ! ( VAR_4 . METHOD_3 ( ) ) ) { METHOD_4 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( final java.util.Set < TYPE_1 > source , final java.util.Set < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { java.util.Set < TYPE_1 > VAR_3 = new java.util.HashSet ( source ) ; java.util.Set < TYPE_1 > VAR_4 = new java.util.HashSet ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_2 . METHOD_3 ( ( ( ( double ) ( VAR_3 . size ( ) ) ) / ( source . size ( ) ) ) ) ; }\n", "fixed": "public void METHOD_1 ( final java.util.Set < TYPE_1 > source , final java.util.Set < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { java.util.Set < TYPE_1 > VAR_3 = new java.util.HashSet ( source ) ; java.util.Set < TYPE_1 > VAR_4 = new java.util.HashSet ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_2 . METHOD_3 ( VAR_3 . size ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . remove ( VAR_2 ) ; -- ( VAR_4 ) ; VAR_2 . METHOD_3 ( ) ; if ( ( VAR_3 . size ( ) ) == 0 ) { TYPE_3 VAR_5 = METHOD_4 ( STRING_1 , args ) ; VAR_3 . add ( VAR_5 ) ; ++ ( VAR_4 ) ; VAR_5 . METHOD_5 ( VAR_6 ) ; METHOD_6 ( VAR_5 ) ; METHOD_7 ( VAR_5 ) ; VAR_5 . METHOD_8 ( true ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . remove ( VAR_2 ) ; -- ( VAR_4 ) ; VAR_2 . METHOD_3 ( ) ; if ( ( VAR_3 . size ( ) ) == 0 ) { TYPE_3 VAR_5 = METHOD_4 ( STRING_1 , args ) ; VAR_3 . add ( VAR_5 ) ; ++ ( VAR_4 ) ; VAR_5 . METHOD_5 ( VAR_6 ) ; METHOD_6 ( VAR_5 ) ; METHOD_7 ( VAR_5 ) ; VAR_5 . METHOD_8 ( false ) ; } }\n"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n     final Map<String, Integer> cssNames;", "fixed": "   \n  public static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n     final Map<String, Integer> cssNames;", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"problem": "public final void METHOD_1 ( final int VAR_1 ) { VAR_2 += VAR_1 ; if ( ( VAR_2 ) != 0 ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; } TYPE_2 . info ( STRING_2 , ( ( STRING_3 + VAR_1 ) + STRING_4 ) ) ; if ( ( VAR_2 ) >= ( VAR_3 ) ) { java.lang.System.out.println ( \"true\" ) ; TYPE_1 . METHOD_2 ( STRING_5 ) ; ( VAR_4 ) ++ ; VAR_3 += INT_1 ; TYPE_2 . info ( STRING_2 , STRING_6 ) ; } }\n", "fixed": "public final void METHOD_1 ( final int VAR_1 ) { VAR_2 += VAR_1 ; if ( ( VAR_2 ) != 0 ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; } TYPE_2 . info ( STRING_2 , ( ( STRING_3 + VAR_1 ) + STRING_4 ) ) ; if ( ( VAR_2 ) >= ( VAR_3 ) ) { TYPE_1 . METHOD_2 ( STRING_5 ) ; ( VAR_4 ) ++ ; VAR_3 += INT_1 ; TYPE_2 . info ( STRING_2 , STRING_6 ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.Thread t , java.lang.Throwable VAR_1 ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 . error ( VAR_1 . METHOD_3 ( ) ) ; for ( TYPE_2 element : VAR_1 . METHOD_4 ( ) ) { if ( ( element . toString ( ) ) != null ) { TYPE_1 . error ( element . toString ( ) ) ; } } }\n", "fixed": "public void METHOD_1 ( java.lang.Thread t , java.lang.Throwable VAR_1 ) { VAR_1 . METHOD_2 ( ) ; if ( ( ( VAR_1 . METHOD_3 ( ) ) != null ) && ( ! ( VAR_1 . METHOD_3 ( ) . isEmpty ( ) ) ) ) { TYPE_1 . error ( VAR_1 . METHOD_3 ( ) ) ; } for ( TYPE_2 element : VAR_1 . METHOD_4 ( ) ) { if ( ( element . toString ( ) ) != null ) { TYPE_1 . error ( element . toString ( ) ) ; } } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = super . METHOD_1 ( VAR_1 ) ; VAR_3 = METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ; java.util.Date VAR_4 = new java.util.Date ( ) ; VAR_4 . METHOD_6 ( VAR_3 . METHOD_7 ( ) ) ; METHOD_8 ( VAR_4 ) ; VAR_5 = VAR_3 . METHOD_9 ( ) ; METHOD_10 ( VAR_3 . METHOD_9 ( ) . METHOD_11 ( ) ) ; return VAR_2 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = super . METHOD_1 ( VAR_1 ) ; VAR_3 = METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; if ( VAR_1 == null ) { METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ; java.util.Date VAR_4 = new java.util.Date ( ) ; VAR_4 . METHOD_6 ( VAR_3 . METHOD_7 ( ) ) ; METHOD_8 ( VAR_4 ) ; VAR_5 = VAR_3 . METHOD_9 ( ) ; METHOD_10 ( VAR_3 . METHOD_9 ( ) . METHOD_11 ( ) ) ; } return VAR_2 ; }\n"}
{"problem": "private < TYPE_1 > TYPE_1 METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String VAR_2 , final TYPE_2 < TYPE_1 > VAR_3 , final java.lang.String VAR_4 , final java.lang.Object ... VAR_5 ) { TYPE_3 < TYPE_1 > op = ( TYPE_4 VAR_6 ) - > { TYPE_5 VAR_7 = null ; try { VAR_7 = VAR_6 . open ( VAR_2 ) ; return VAR_3 . METHOD_2 ( VAR_7 ) ; } finally { VAR_6 . METHOD_3 ( VAR_7 ) ; } } ; return METHOD_1 ( VAR_1 , op , VAR_4 , VAR_5 ) ; }\n", "fixed": "private < TYPE_1 > TYPE_1 METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String VAR_2 , final TYPE_2 < TYPE_1 > VAR_3 , final java.lang.String VAR_4 , final java.lang.Object ... VAR_5 ) { TYPE_3 < TYPE_1 > op = ( TYPE_4 VAR_6 ) - > { TYPE_5 VAR_7 = VAR_6 . open ( VAR_2 ) ; try { return VAR_3 . METHOD_2 ( VAR_7 ) ; } finally { VAR_6 . METHOD_3 ( VAR_7 ) ; } } ; return METHOD_1 ( VAR_1 , op , VAR_4 , VAR_5 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_3 ( ) ; TYPE_4 . assertThat ( VAR_2 . METHOD_4 ( ) , TYPE_5 . METHOD_5 ( false ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_3 ( ) ; TYPE_4 . assertThat ( VAR_2 . METHOD_4 ( ) , TYPE_5 . METHOD_5 ( false ) ) ; VAR_2 . METHOD_3 ( ) ; TYPE_4 . assertThat ( VAR_2 . METHOD_4 ( ) , TYPE_5 . METHOD_5 ( false ) ) ; }\n"}
{"problem": "public void execute ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_1 ( VAR_2 class ) . METHOD_2 ( STRING_1 , results . METHOD_3 ( ) ) . METHOD_2 ( STRING_2 , VAR_3 ) . count ( ) ) == 0 ) { TYPE_2 VAR_4 = VAR_1 . METHOD_4 ( VAR_2 class , results . METHOD_3 ( ) ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_1 . METHOD_6 ( VAR_4 ) ; } }\n", "fixed": "public void execute ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_1 ( VAR_2 class ) . METHOD_2 ( STRING_1 , results . METHOD_3 ( ) ) . METHOD_2 ( STRING_2 , VAR_3 ) . count ( ) ) == 0 ) { TYPE_2 VAR_4 ; VAR_4 = VAR_1 . METHOD_4 ( VAR_2 class , results . METHOD_3 ( ) ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_1 . METHOD_6 ( VAR_4 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { boolean response = TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( ) ) + STRING_1 ) ) ; if ( response ) { VAR_2 . METHOD_4 ( ) . METHOD_5 ( VAR_1 , METHOD_6 ( ) ) ; VAR_2 . METHOD_4 ( ) . METHOD_7 ( VAR_1 , METHOD_8 ( ) ) ; METHOD_9 ( VAR_1 , VAR_3 ) ; } else { VAR_2 . METHOD_4 ( ) . METHOD_10 ( VAR_1 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { boolean response = TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( ) ) + STRING_1 ) ) ; if ( response ) { VAR_2 . METHOD_4 ( ) . METHOD_5 ( VAR_1 , METHOD_6 ( ) ) ; METHOD_9 ( VAR_1 , VAR_3 ) ; } else { VAR_2 . METHOD_4 ( ) . METHOD_10 ( VAR_1 ) ; } }\n"}
{"problem": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . get ( 0 ) . METHOD_2 ( VAR_3 ) ; VAR_2 . get ( 1 ) . METHOD_2 ( VAR_3 ) ; VAR_2 . get ( INT_1 ) . METHOD_2 ( VAR_3 ) ; VAR_2 . get ( INT_2 ) . METHOD_2 ( VAR_3 ) ; VAR_4 . start ( ) ; }\n", "fixed": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . get ( 0 ) . METHOD_2 ( VAR_3 ) ; VAR_2 . get ( 1 ) . METHOD_2 ( VAR_3 ) ; VAR_2 . get ( INT_1 ) . METHOD_2 ( VAR_3 ) ; VAR_2 . get ( INT_2 ) . METHOD_2 ( VAR_3 ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { this . path = ( ( ( ( ( ( ( ( ( new java.io.File ( STRING_1 ) . METHOD_2 ( ) ) + ( VAR_1 ) ) + ( this . VAR_2 ) ) + ( VAR_1 ) ) + ( VAR_3 . get ( VAR_4 ) ) ) + ( VAR_5 ) ) + ( VAR_3 . get ( VAR_6 ) ) ) + ( VAR_5 ) ) + ( VAR_3 . get ( VAR_7 ) ) ) + STRING_2 ; }\n", "fixed": "private void METHOD_1 ( ) { this . path = ( ( ( ( ( ( ( ( ( ( new java.io.File ( STRING_1 ) . METHOD_2 ( ) ) + ( VAR_1 ) ) + ( this . VAR_2 ) ) + ( VAR_1 ) ) + ( VAR_3 . get ( VAR_4 ) ) ) + ( VAR_5 ) ) + ( VAR_3 . get ( VAR_6 ) ) ) + 1 ) + ( VAR_5 ) ) + ( VAR_3 . get ( VAR_7 ) ) ) + STRING_2 ; }\n"}
{"problem": "public void METHOD_1 ( ) { boolean VAR_1 = true ; while ( VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; if ( ( ( VAR_2 ) > 0 ) && ( ( VAR_3 ) == false ) ) { METHOD_5 ( ) ; } else { VAR_1 = false ; } } if ( VAR_3 ) { java.lang.System.out.println ( STRING_1 ) ; } else { java.lang.System.out.println ( ( STRING_2 + ( words ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) { boolean VAR_1 = true ; while ( VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; if ( ( ( VAR_2 ) > 0 ) && ( ( VAR_3 ) == false ) ) { METHOD_5 ( ) ; } else { VAR_1 = false ; } } if ( VAR_3 ) { java.lang.System.out.println ( STRING_1 ) ; } else { java.lang.System.out.println ( ( STRING_2 + ( words . toUpperCase ( ) ) ) ) ; } }\n"}
{"fixCommitSHA1": "0397639dc6f21b1336674d1fe72c9b3b06578570", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         assertNotNull(transferMessage.getBody(SerializableRequestDto.class));\n         assertNotNull(transferMessage.getHeader(\"requestObject\", SerializableRequestDto.class));\n         assertEquals(Boolean.TRUE, transferMessage.getHeader(\"boolean\", Boolean.class));\n        assertEquals((Long) 123l, transferMessage.getHeader(\"long\", Long.class));\n         assertEquals((Double) 1.23, transferMessage.getHeader(\"double\", Double.class));\n         assertEquals(\"hello\", transferMessage.getHeader(\"string\", String.class));\n         assertNotNull(transferExchange.getProperty(\"requestObjectProperty\", SerializableRequestDto.class));", "fixed": "         assertNotNull(transferMessage.getBody(SerializableRequestDto.class));\n         assertNotNull(transferMessage.getHeader(\"requestObject\", SerializableRequestDto.class));\n         assertEquals(Boolean.TRUE, transferMessage.getHeader(\"boolean\", Boolean.class));\n        assertEquals((Long) 123L, transferMessage.getHeader(\"long\", Long.class));\n         assertEquals((Double) 1.23, transferMessage.getHeader(\"double\", Double.class));\n         assertEquals(\"hello\", transferMessage.getHeader(\"string\", String.class));\n         assertNotNull(transferExchange.getProperty(\"requestObjectProperty\", SerializableRequestDto.class));", "sourceBeforeFix": "(Long)123l", "sourceAfterFix": "(Long)123L"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public java.util.Set < TYPE_1 > METHOD_1 ( java.lang.Long VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 response ) throws TYPE_5 { java.lang.String VAR_4 = VAR_3 . METHOD_2 ( ) ; if ( VAR_5 . METHOD_3 ( VAR_4 , VAR_1 ) ) { response . METHOD_4 ( VAR_6 ) ; return null ; } VAR_2 . METHOD_5 ( VAR_4 ) ; return VAR_5 . METHOD_6 ( VAR_2 ) ; }\n", "fixed": "public java.util.Set < TYPE_1 > METHOD_1 ( java.lang.Long VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 response ) throws TYPE_5 { java.lang.String VAR_4 = VAR_3 . METHOD_2 ( ) ; if ( ! ( VAR_5 . METHOD_3 ( VAR_4 , VAR_1 ) ) ) { response . METHOD_4 ( VAR_6 ) ; return null ; } VAR_2 . METHOD_5 ( VAR_4 ) ; return VAR_5 . METHOD_6 ( VAR_2 ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( number , name , VAR_2 ) ; try { VAR_3 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_5 . METHOD_3 ( ) . METHOD_4 ( ( ( ( STRING_1 + ( number ) ) + STRING_2 ) + ( VAR_4 . METHOD_5 ( ) ) ) ) ; } return null ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( number , name , VAR_2 ) ; try { VAR_3 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_5 . METHOD_4 ( ( ( ( STRING_1 + ( number ) ) + STRING_2 ) + ( VAR_4 . METHOD_5 ( ) ) ) ) ; } return null ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public boolean METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) ; if ( ( VAR_2 == null ) || ( TYPE_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) ) { return false ; } return VAR_4 . contains ( VAR_2 . METHOD_5 ( ) ) ; }\n", "fixed": "public boolean METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) ; if ( ( VAR_2 == null ) || ( TYPE_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) ) { return false ; } return ! ( VAR_4 . contains ( VAR_2 . METHOD_5 ( ) ) ) ; }\n"}
{"problem": "public java.lang.String [ ] METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; java.lang.String id = STRING_1 ; java.lang.String token = STRING_1 ; if ( ( VAR_1 != null ) && ( ! ( VAR_1 . METHOD_3 ( ) ) ) ) { id = VAR_1 . METHOD_4 ( ) ; token = VAR_1 . METHOD_5 ( ) ; } else { id = null ; token = null ; } return new java.lang.String [ ] { id , token } ; }\n", "fixed": "public java.lang.String [ ] METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; java.lang.String id = STRING_1 ; java.lang.String token = STRING_1 ; if ( ( VAR_1 != null ) && ( ! ( VAR_1 . METHOD_3 ( ) ) ) ) { id = VAR_1 . METHOD_4 ( ) ; token = VAR_1 . METHOD_5 ( ) ; return new java.lang.String [ ] { id , token } ; } else { return null ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback);\n     @GET\n     @Consumes({ \"*/*\" })", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback) throws Exception;\n     @GET\n     @Consumes({ \"*/*\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"problem": "protected java.lang.Object METHOD_1 ( java.lang.String name ) { java.lang.Object VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) , name ) ; TYPE_1 . METHOD_2 ( ) . METHOD_5 ( VAR_2 . METHOD_4 ( ) , name , null ) ; return VAR_1 ; }\n", "fixed": "private java.lang.Object METHOD_1 ( java.lang.String name ) { java.lang.Object VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) , name ) ; TYPE_1 . METHOD_2 ( ) . METHOD_5 ( VAR_2 . METHOD_4 ( ) , name , null ) ; return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = null ; try { METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_3 = VAR_2 . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( 1 , VAR_1 ) ; VAR_3 . METHOD_6 ( ) ; } catch ( TYPE_3 VAR_5 ) { METHOD_7 ( VAR_5 , VAR_1 ) ; throw new TYPE_4 ( VAR_6 , VAR_5 ) ; } finally { METHOD_8 ( VAR_3 ) ; } }\n", "fixed": "public void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 ) { try ( TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) ) { METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_5 ( 1 , VAR_1 ) ; VAR_3 . METHOD_6 ( ) ; } catch ( TYPE_3 VAR_5 ) { METHOD_7 ( VAR_5 , VAR_1 ) ; throw new TYPE_4 ( VAR_6 , VAR_5 ) ; } }\n"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid status value\", response = Void.class, responseContainer = \"List\") })\n    List<List<Pet>> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status);\n     @GET\n     @Path(\"/findByTags\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid status value\", response = Void.class, responseContainer = \"List\") })\n    List<Pet> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status) throws Exception;\n     @GET\n     @Path(\"/findByTags\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"problem": "private TYPE_1 METHOD_1 ( ) { METHOD_2 ( true ) ; VAR_1 . add ( VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_3 ( VAR_2 , VAR_5 ) ; METHOD_4 ( ) ; METHOD_5 ( TYPE_2 . t ( STRING_1 ) ) ; METHOD_6 ( ) ; METHOD_7 ( true ) ; VAR_4 . METHOD_8 ( INT_1 ) ; return VAR_4 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( ) { VAR_1 . add ( VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_3 ( VAR_2 , VAR_5 ) ; METHOD_4 ( ) ; METHOD_5 ( TYPE_2 . t ( STRING_1 ) ) ; METHOD_6 ( ) ; METHOD_7 ( true ) ; VAR_4 . METHOD_8 ( INT_1 ) ; return VAR_4 ; }\n"}
{"problem": "public double METHOD_1 ( double [ ] x ) { return ( ( x [ INT_1 ] ) * ( x [ INT_2 ] ) ) - ( ( ( ( ( VAR_1 * ( x [ INT_3 ] ) ) * ( x [ 0 ] ) ) * ( x [ 0 ] ) ) * ( x [ 0 ] ) ) * ( x [ 0 ] ) ) ; }\n", "fixed": "public double METHOD_1 ( double [ ] x ) { return ( ( x [ INT_1 ] ) * ( x [ INT_2 ] ) ) - ( ( ( ( VAR_1 * ( x [ INT_3 ] ) ) * ( x [ 0 ] ) ) * ( x [ 0 ] ) ) * ( x [ 0 ] ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { if ( isEmpty ( ) ) throw new TYPE_2 ( STRING_1 ) ; TYPE_1 item = VAR_1 . item ; if ( ( VAR_2 ) == ( VAR_3 ) ) { VAR_1 . item = null ; } else { VAR_1 = VAR_2 ; } VAR_4 -= 1 ; return item ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { if ( isEmpty ( ) ) throw new TYPE_2 ( STRING_1 ) ; TYPE_1 item = VAR_1 . item ; if ( ( VAR_2 ) == ( VAR_3 ) ) { } else { VAR_1 = VAR_2 ; } VAR_4 -= 1 ; return item ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( VAR_4 . METHOD_2 ( INT_1 ) ) ; TYPE_2 count = VAR_2 . METHOD_6 ( ) ; VAR_2 . METHOD_7 ( ( count ++ ) ) ; return VAR_3 . METHOD_8 ( VAR_2 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( VAR_4 . METHOD_2 ( INT_1 ) ) ; TYPE_2 count = VAR_2 . METHOD_6 ( ) ; VAR_2 . METHOD_7 ( ( ++ count ) ) ; return VAR_3 . METHOD_8 ( VAR_2 ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 == null ) { return null ; } TYPE_1 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 , VAR_3 class ) ; VAR_2 . METHOD_3 ( VAR_4 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ; return VAR_2 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 == null ) { return null ; } TYPE_1 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 , VAR_3 class ) ; if ( ( VAR_1 . METHOD_5 ( ) ) != null ) { VAR_2 . METHOD_3 ( VAR_4 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ; } return VAR_2 ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_2 ) ; java.util.Calendar VAR_4 = new TYPE_2 ( VAR_1 , VAR_2 , 1 ) ; int VAR_5 = VAR_4 . METHOD_2 ( VAR_6 ) ; VAR_3 . METHOD_3 ( VAR_5 ) ; java.util.Calendar VAR_7 = java.util.Calendar.getInstance ( ) ; VAR_7 . METHOD_4 ( VAR_4 . getTime ( ) ) ; int VAR_8 = VAR_7 . get ( VAR_9 ) ; VAR_3 . METHOD_5 ( VAR_8 ) ; return VAR_10 . METHOD_6 ( VAR_3 ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_2 ) ; java.util.Calendar VAR_4 = new TYPE_2 ( VAR_1 , ( VAR_2 - 1 ) , 1 ) ; int VAR_5 = VAR_4 . METHOD_2 ( VAR_6 ) ; VAR_3 . METHOD_3 ( VAR_5 ) ; java.util.Calendar VAR_7 = java.util.Calendar.getInstance ( ) ; VAR_7 . METHOD_4 ( VAR_4 . getTime ( ) ) ; int VAR_8 = VAR_7 . get ( VAR_9 ) ; VAR_3 . METHOD_5 ( VAR_8 ) ; return VAR_10 . METHOD_6 ( VAR_3 ) ; }\n"}
{"problem": "private int METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { throw new TYPE_1 ( STRING_1 ) ; } int id = VAR_2 [ ( -- ( VAR_1 ) ) ] ; TYPE_2 . METHOD_2 ( VAR_3 , ( id < < INT_1 ) , ( ( id < < INT_1 ) + INT_2 ) , 0 ) ; return VAR_2 [ ( -- ( VAR_1 ) ) ] ; }\n", "fixed": "private int METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { throw new TYPE_1 ( STRING_1 ) ; } int id = VAR_2 [ ( -- ( VAR_1 ) ) ] ; TYPE_2 . METHOD_2 ( VAR_3 , ( id < < INT_1 ) , ( ( id < < INT_1 ) + INT_2 ) , 0 ) ; return id ; }\n"}
{"problem": "private boolean METHOD_1 ( int VAR_1 ) { if ( ! ( VAR_2 ) ) { return false ; } METHOD_2 ( VAR_3 ) ; if ( VAR_1 > 0 ) { return ( VAR_4 ) < 0 ; } else { return ( VAR_5 ) > ( METHOD_3 ( ) ) ; } }\n", "fixed": "private boolean METHOD_1 ( int VAR_1 ) { if ( ! ( VAR_2 ) ) { return false ; } METHOD_2 ( VAR_3 ) ; if ( VAR_1 > 0 ) { return ( java.lang.Math.round ( VAR_4 ) ) < 0 ; } else { return ( java.lang.Math.round ( VAR_5 ) ) > ( METHOD_3 ( ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( writer ) != null ) { try { writer . METHOD_1 ( ) ; } catch ( java.lang.Exception VAR_1 ) { } writer = null ; } if ( ( VAR_2 ) != null ) { try { VAR_2 . METHOD_2 ( false ) ; } catch ( java.lang.Exception VAR_1 ) { } VAR_2 = null ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_2 ) != null ) { try { VAR_2 . METHOD_2 ( false ) ; } catch ( java.lang.Exception VAR_1 ) { } VAR_2 = null ; } if ( ( writer ) != null ) { try { writer . METHOD_1 ( ) ; } catch ( java.lang.Exception VAR_1 ) { } writer = null ; } }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( ) { java.lang.System.out.println ( ( ( VAR_1 ) + STRING_1 ) ) ; java.util.List < TYPE_1 > VAR_2 = VAR_1 . METHOD_2 ( STRING_2 ) . METHOD_3 ( ) ; if ( VAR_2 == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } else { return VAR_2 ; } }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_2 = VAR_1 . METHOD_2 ( STRING_2 ) . METHOD_3 ( ) ; if ( VAR_2 == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } else { return VAR_2 ; } }\n"}
{"problem": "private void METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_4 , VAR_1 ) ; VAR_5 . add ( VAR_3 ) ; for ( int j = 0 ; j < ( VAR_3 . METHOD_3 ( ) ) ; j += VAR_2 ) { TYPE_1 VAR_6 = VAR_3 . METHOD_4 ( j , ( j + VAR_2 ) ) ; VAR_7 . add ( new TYPE_2 ( VAR_6 ) ) ; } }\n", "fixed": "private void METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_4 , VAR_1 ) ; VAR_5 . add ( VAR_3 ) ; for ( int j = 0 ; j < ( VAR_3 . METHOD_3 ( ) ) ; j += VAR_2 ) { TYPE_1 VAR_6 = VAR_3 . METHOD_4 ( j , VAR_2 ) ; VAR_7 . add ( new TYPE_2 ( VAR_6 ) ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_3 , STRING_1 ) ; METHOD_4 ( ) ; TYPE_2 . METHOD_3 ( VAR_3 , STRING_2 ) ; TYPE_2 . METHOD_3 ( VAR_3 , STRING_3 ) ; try { VAR_4 . METHOD_5 ( STRING_4 ) ; VAR_4 . METHOD_6 ( ) ; VAR_4 . METHOD_7 ( VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception VAR_7 ) { VAR_7 . METHOD_8 ( ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_3 , STRING_1 ) ; METHOD_4 ( ) ; TYPE_2 . METHOD_3 ( VAR_3 , STRING_2 ) ; TYPE_2 . METHOD_3 ( VAR_3 , STRING_3 ) ; try { VAR_4 . METHOD_6 ( ) ; VAR_4 . METHOD_7 ( VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception VAR_7 ) { VAR_7 . METHOD_8 ( ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 TYPE_2 ) { boolean VAR_1 = VAR_2 . METHOD_1 ( TYPE_2 ) ; if ( VAR_1 ) { this . METHOD_2 ( ( ( - 1 ) * ( TYPE_2 . METHOD_3 ( ) ) ) ) ; return true ; } else { return false ; } }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 TYPE_2 ) { boolean VAR_1 ; if ( this . METHOD_2 ( ( ( - 1 ) * ( TYPE_2 . METHOD_3 ( ) ) ) ) ) { VAR_1 = VAR_2 . METHOD_1 ( TYPE_2 ) ; return VAR_1 ; } return false ; }\n"}
{"fixCommitSHA1": "1bac47f6afece6418b841fced7807ef5ff7a2615", "projectName": "mybatis.mybatis-3", "bugType": "Change Identifier Used", "problem": "   }\r\n   private boolean commandReadyToExecute(String trimmedLine) {\r\n    return !fullLineDelimiter && trimmedLine.endsWith(delimiter) || fullLineDelimiter && trimmedLine.equals(delimiter);\r\n   }\r\n   private void executeStatement(String command) throws SQLException, UnsupportedEncodingException {\r", "fixed": "   }\r\n   private boolean commandReadyToExecute(String trimmedLine) {\r\n    return !fullLineDelimiter && trimmedLine.contains(delimiter) || fullLineDelimiter && trimmedLine.equals(delimiter);\r\n   }\r\n   private void executeStatement(String command) throws SQLException, UnsupportedEncodingException {\r", "sourceBeforeFix": "trimmedLine.endsWith(delimiter)", "sourceAfterFix": "trimmedLine.contains(delimiter)"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "fixed": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "d9ce8ddd35f22bba791a97e17d14ce4ff0a9f87c", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "  * {@code OperationHandler} responsible for adding a virtual host.\n  *\n  * @author Emanuel Muckenhuber\n  */\n class WebVirtualHostAdd implements ModelAddOperationHandler, DescriptionProvider {", "fixed": "  * {@code OperationHandler} responsible for adding a virtual host.\n  *\n  * @author Emanuel Muckenhuber\n * @author Scott stark (sstark@redhat.com) (C) 2011 Red Hat Inc.\n  */\n class WebVirtualHostAdd implements ModelAddOperationHandler, DescriptionProvider {", "sourceBeforeFix": "node.has(Constants.ALIAS)", "sourceAfterFix": "node.hasDefined(Constants.ALIAS)"}
{"fixCommitSHA1": "8c7c5d4dc981cb21d4151379d0e6b9e5c131d7ec", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t\t}\n \t\t\t}\n \t\t}\n\t\tcatch (IllegalArgumentException e) {\n \t\t\tlogger.error(\"Could not parse VCAP_APPLICATION\", e);\n \t\t}\n \t\treturn properties;", "fixed": " \t\t\t\t}\n \t\t\t}\n \t\t}\n\t\tcatch (Exception e) {\n \t\t\tlogger.error(\"Could not parse VCAP_APPLICATION\", e);\n \t\t}\n \t\treturn properties;", "sourceBeforeFix": "IllegalArgumentException e", "sourceAfterFix": "Exception e"}
{"problem": "private void METHOD_1 ( java.util.Set < java.lang.String > set , java.lang.String content ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( content ) ; TYPE_3 VAR_2 = VAR_1 . select ( STRING_1 ) ; for ( TYPE_4 element : VAR_2 ) { java.lang.String VAR_3 = METHOD_3 ( element ) ; if ( ( VAR_3 != null ) && ( VAR_3 . startsWith ( VAR_4 ) ) ) { set . add ( VAR_3 ) ; } } }\n", "fixed": "private void METHOD_1 ( java.lang.String url , java.util.Set < java.lang.String > set , java.lang.String content ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( content ) ; TYPE_3 VAR_2 = VAR_1 . select ( STRING_1 ) ; for ( TYPE_4 element : VAR_2 ) { java.lang.String VAR_3 = METHOD_3 ( url , element ) ; if ( ( VAR_3 != null ) && ( VAR_3 . startsWith ( VAR_4 ) ) ) { set . add ( VAR_3 ) ; } } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { if ( ( VAR_3 ) == null ) { VAR_3 = ( ( TYPE_3 ) ( VAR_1 ) ) ; TYPE_4 VAR_4 = new TYPE_4 ( ( ( TYPE_5 ) ( VAR_3 . METHOD_2 ( ) ) ) ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; } return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { if ( ( VAR_3 ) == null ) { VAR_3 = ( ( TYPE_3 ) ( VAR_1 ) ) ; VAR_4 = new TYPE_4 ( ( ( TYPE_5 ) ( VAR_3 . METHOD_2 ( ) ) ) ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; } return null ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( view . METHOD_3 ( ) ) . METHOD_4 ( VAR_1 ) ; TYPE_2 VAR_2 = METHOD_5 ( ) ; TYPE_3 VAR_3 = TYPE_3 . METHOD_6 ( VAR_4 ) . METHOD_7 ( STRING_1 ) . build ( ) ; TYPE_4 response = VAR_2 . METHOD_8 ( view . METHOD_9 ( ) , VAR_5 , VAR_3 ) ; java.lang.String VAR_6 = METHOD_10 ( response ) ; METHOD_11 ( STRING_2 , VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( view . METHOD_3 ( ) ) . METHOD_4 ( VAR_1 ) ; TYPE_2 VAR_2 = METHOD_5 ( ) ; TYPE_3 VAR_3 = TYPE_3 . METHOD_6 ( VAR_4 ) . build ( ) ; TYPE_4 response = VAR_2 . METHOD_8 ( view . METHOD_9 ( ) , VAR_5 , VAR_3 ) ; java.lang.String VAR_6 = METHOD_10 ( response ) ; METHOD_11 ( STRING_2 , VAR_6 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_2 { if ( VAR_4 . METHOD_2 ( VAR_2 ) ) { java.util.Collection < TYPE_3 > VAR_5 = METHOD_3 ( VAR_2 ) . METHOD_4 ( ) ; METHOD_3 ( VAR_2 ) . METHOD_5 ( true , false ) ; VAR_4 . put ( VAR_3 , METHOD_6 ( VAR_1 ) ) ; for ( TYPE_3 VAR_6 : VAR_5 ) { METHOD_3 ( VAR_3 ) . addComponent ( VAR_6 , true , false ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_2 { if ( VAR_4 . METHOD_2 ( VAR_2 ) ) { java.util.Collection < TYPE_3 > VAR_5 = METHOD_3 ( VAR_2 , false ) . METHOD_4 ( ) ; METHOD_3 ( VAR_2 , false ) . METHOD_5 ( true , false ) ; VAR_4 . put ( VAR_3 , METHOD_6 ( VAR_1 ) ) ; for ( TYPE_3 VAR_6 : VAR_5 ) { METHOD_3 ( VAR_3 ) . addComponent ( VAR_6 , true , false ) ; } } }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "a5b05566ebeb1504da6579b21f424fbb45a56148", "projectName": "apache.flink", "bugType": "Change Boolean Literal", "problem": " \tpublic static InfoOptions parseInfoCommand(String[] args) throws CliArgsException {\n \t\ttry {\n \t\t\tPosixParser parser = new PosixParser();\n\t\t\tCommandLine line = parser.parse(INFO_OPTIONS, args, false);\n \t\t\treturn new InfoOptions(line);\n \t\t}\n \t\tcatch (ParseException e) {", "fixed": " \tpublic static InfoOptions parseInfoCommand(String[] args) throws CliArgsException {\n \t\ttry {\n \t\t\tPosixParser parser = new PosixParser();\n\t\t\tCommandLine line = parser.parse(INFO_OPTIONS, args, true);\n \t\t\treturn new InfoOptions(line);\n \t\t}\n \t\tcatch (ParseException e) {", "sourceBeforeFix": "parser.parse(INFO_OPTIONS,args,false)", "sourceAfterFix": "parser.parse(INFO_OPTIONS,args,true)"}
{"problem": "private TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 ; if ( ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( java.lang.Integer.parseInt ( id ) ) ) == null ) { VAR_1 = TYPE_1 . METHOD_4 ( ) . build ( ) ; } else { VAR_1 = TYPE_1 . METHOD_5 ( ) . build ( ) ; } return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 ; if ( ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( java.lang.Integer.parseInt ( id ) ) ) == null ) { VAR_1 = TYPE_1 . METHOD_4 ( ) . build ( ) ; } else { VAR_1 = TYPE_1 . METHOD_5 ( ) . build ( ) ; } return VAR_1 ; }\n"}
{"problem": "public double METHOD_1 ( ) { if ( ( ( VAR_1 [ INT_1 ] ) == null ) || ( ( VAR_2 ) == 0 ) ) { return 0 ; } else { java.lang.System.out.println ( ( ( ( STRING_1 + ( VAR_1 [ INT_1 ] . VAR_3 ) ) + STRING_2 ) + ( ( FLOAT_1 / INT_2 ) * ( VAR_1 [ INT_1 ] . VAR_3 ) ) ) ) ; return ( FLOAT_1 / INT_2 ) * ( VAR_1 [ INT_1 ] . VAR_3 ) ; } }\n", "fixed": "public double METHOD_1 ( ) { if ( ( ( VAR_1 [ INT_1 ] ) == null ) || ( ( VAR_2 ) == 0 ) ) { return 0 ; } else { return ( FLOAT_1 / INT_2 ) * ( VAR_1 [ INT_1 ] . VAR_3 ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String title , int VAR_1 , boolean VAR_2 ) { android.view.View VAR_3 = VAR_4 . METHOD_2 ( VAR_5 , VAR_6 , false ) ; METHOD_3 ( VAR_3 ) ; line ( VAR_3 ) ; TYPE_1 VAR_7 = ( ( TYPE_1 ) ( VAR_3 . METHOD_4 ( VAR_8 ) ) ) ; METHOD_5 ( VAR_7 , title , STRING_1 , VAR_1 , 0 , VAR_2 ) ; VAR_6 . METHOD_6 ( VAR_7 ) ; return VAR_7 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String title , int VAR_1 , boolean VAR_2 ) { android.view.View VAR_3 = VAR_4 . METHOD_2 ( VAR_5 , VAR_6 , false ) ; METHOD_3 ( VAR_3 ) ; line ( VAR_3 ) ; TYPE_1 VAR_7 = ( ( TYPE_1 ) ( VAR_3 . METHOD_4 ( VAR_8 ) ) ) ; METHOD_5 ( VAR_7 , title , STRING_1 , VAR_1 , 0 , VAR_2 ) ; VAR_6 . METHOD_6 ( VAR_3 ) ; return VAR_7 ; }\n"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"problem": "private boolean METHOD_1 ( java.lang.String className ) { if ( VAR_1 . contains ( className ) ) { return true ; } if ( className . contains ( STRING_1 ) ) { return true ; } if ( null != ( VAR_2 . getClass ( className ) ) ) { return true ; } return false ; }\n", "fixed": "protected boolean METHOD_1 ( java.lang.String className ) { if ( VAR_1 . contains ( className ) ) { return true ; } if ( className . contains ( STRING_1 ) ) { return true ; } if ( null != ( VAR_2 . getClass ( className ) ) ) { return true ; } return false ; }\n"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"problem": "public byte [ ] METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; TYPE_3 context = new TYPE_3 ( VAR_4 ) ; try { VAR_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , context ) ; } catch ( java.io.IOException VAR_5 ) { VAR_6 . error ( STRING_1 , VAR_5 ) ; } return VAR_3 . METHOD_5 ( ) ; }\n", "fixed": "public byte [ ] METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; TYPE_3 context = new TYPE_3 ( VAR_4 ) ; try { VAR_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , context ) ; } catch ( java.io.IOException VAR_5 ) { java.lang.System.out.println ( VAR_5 ) ; VAR_6 . error ( STRING_1 , VAR_5 ) ; } return VAR_3 . METHOD_5 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_1 = new TYPE_2 < java.lang.String , TYPE_3 > ( ) ; TYPE_4 . add ( VAR_2 , INT_1 ) . METHOD_3 ( ) ; TYPE_4 . add ( VAR_3 , INT_2 ) . METHOD_3 ( ) ; TYPE_4 . add ( VAR_4 , 1 ) . METHOD_4 ( INT_3 ) . METHOD_5 ( 0 , INT_4 ) ; }\n", "fixed": "public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_1 = new TYPE_2 < java.lang.String , TYPE_3 > ( ) ; TYPE_4 . add ( VAR_2 , INT_1 ) . METHOD_3 ( ) ; TYPE_4 . add ( VAR_3 , INT_2 ) . METHOD_3 ( ) ; TYPE_4 . add ( VAR_4 , INT_3 ) . METHOD_4 ( INT_3 ) . METHOD_5 ( 0 , INT_4 ) ; }\n"}
{"fixCommitSHA1": "d43446d30101b7ffb930410311167e8e1a396071", "projectName": "hazelcast.hazelcast", "bugType": "Delete Throws Exception", "problem": "      *         count is not zero\n      * @throws IllegalArgumentException if {@code count} is negative\n      */\n    boolean trySetCount(int count) throws IllegalArgumentException;\n }", "fixed": "      *         count is not zero\n      * @throws IllegalArgumentException if {@code count} is negative\n      */\n    boolean trySetCount(int count);\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( getActivity ( ) , ( STRING_1 + ( event . getName ( ) ) ) , VAR_2 ) . show ( ) ; METHOD_3 ( ) . METHOD_4 ( ) . replace ( VAR_3 , new TYPE_4 ( event . getName ( ) . split ( TYPE_5 . METHOD_5 ( STRING_2 ) ) [ 0 ] ) ) . METHOD_6 ( STRING_3 ) . commit ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { METHOD_3 ( ) . METHOD_4 ( ) . replace ( VAR_3 , new TYPE_4 ( event . getName ( ) . split ( TYPE_5 . METHOD_5 ( STRING_2 ) ) [ 0 ] ) ) . METHOD_6 ( STRING_3 ) . commit ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) . VAR_2 . METHOD_3 ( ) ) == 0 ) { VAR_3 . METHOD_4 ( ) ; } VAR_4 . remove ( VAR_1 . METHOD_2 ( ) . VAR_2 . METHOD_3 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) . VAR_2 . METHOD_3 ( ) ) == 0 ) { VAR_3 . METHOD_4 ( ) ; } synchronized ( VAR_4 ) { VAR_4 . remove ( VAR_1 . METHOD_2 ( ) . VAR_2 . METHOD_3 ( ) ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) throws java.lang.ClassNotFoundException , TYPE_1 { java.util.Map VAR_1 = TYPE_2 . getContext ( ) . METHOD_2 ( ) ; TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 . get ( STRING_1 ) ) ) ; TYPE_4 VAR_3 = new TYPE_4 ( ) ; VAR_4 = VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; return VAR_5 ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) throws java.lang.ClassNotFoundException , TYPE_1 { java.util.Map VAR_1 = TYPE_2 . getContext ( ) . METHOD_2 ( ) ; VAR_2 = ( ( TYPE_3 ) ( VAR_1 . get ( STRING_1 ) ) ) ; TYPE_4 VAR_3 = new TYPE_4 ( ) ; VAR_4 = VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; return VAR_5 ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 [ ] VAR_1 ) { METHOD_2 ( ) ; if ( VAR_1 == null ) { return null ; } for ( TYPE_2 VAR_2 : VAR_1 ) { java.lang.String VAR_3 = METHOD_3 ( VAR_2 ) ; if ( VAR_3 != null ) { TYPE_1 VAR_4 = VAR_5 . METHOD_4 ( VAR_3 ) ; if ( VAR_4 != null ) { return VAR_4 ; } } } return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 [ ] VAR_1 ) { METHOD_2 ( ) ; if ( VAR_1 == null ) { return null ; } for ( TYPE_2 VAR_2 : VAR_1 ) { java.lang.String VAR_3 = METHOD_3 ( VAR_2 . getId ( ) ) ; if ( VAR_3 != null ) { TYPE_1 VAR_4 = VAR_5 . METHOD_4 ( VAR_3 ) ; if ( VAR_4 != null ) { return VAR_4 ; } } } return null ; }\n"}
{"problem": "public java.lang.Void execute ( ) { TYPE_1 VAR_1 = METHOD_1 ( ) ; if ( ! ( TYPE_2 . equals ( VAR_1 . METHOD_2 ( ) ) ) ) { if ( ( METHOD_3 ( ) ) && ( METHOD_4 ( ) ) ) { METHOD_5 ( VAR_2 , VAR_1 ) ; } else if ( METHOD_3 ( ) ) { METHOD_5 ( VAR_3 , VAR_1 ) ; } else if ( METHOD_4 ( ) ) { METHOD_5 ( VAR_4 , VAR_1 ) ; } } return null ; }\n", "fixed": "public java.lang.Void execute ( ) { TYPE_1 VAR_1 = METHOD_1 ( ) ; if ( ! ( TYPE_2 . equals ( VAR_1 ) ) ) { if ( ( METHOD_3 ( ) ) && ( METHOD_4 ( ) ) ) { METHOD_5 ( VAR_2 , VAR_1 ) ; } else if ( METHOD_3 ( ) ) { METHOD_5 ( VAR_3 , VAR_1 ) ; } else if ( METHOD_4 ( ) ) { METHOD_5 ( VAR_4 , VAR_1 ) ; } } return null ; }\n"}
{"problem": "private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.Collections.sort ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; if ( ( VAR_5 ) != null ) { int VAR_6 = VAR_3 . METHOD_5 ( VAR_5 ) ; VAR_4 . METHOD_6 ( VAR_6 ) ; } }\n", "fixed": "private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( ( VAR_4 ) == null ) { return ; } java.util.Collections.sort ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; if ( ( VAR_5 ) != null ) { int VAR_6 = VAR_3 . METHOD_5 ( VAR_5 ) ; VAR_4 . METHOD_6 ( VAR_6 ) ; } }\n"}
{"problem": "public java.lang.Thread METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Thread t = new java.lang.Thread ( new TYPE_2 ( VAR_2 ) , VAR_1 , ( ( ( VAR_3 ) + STRING_1 ) + ( VAR_4 . METHOD_2 ( ) ) ) ) ; t . METHOD_3 ( VAR_5 ) ; if ( ( t . METHOD_4 ( ) ) != ( VAR_6 ) ) t . METHOD_5 ( VAR_6 ) ; return t ; }\n", "fixed": "public java.lang.Thread METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Thread t = new java.lang.Thread ( new TYPE_2 ( VAR_2 ) , VAR_1 , ( ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) + STRING_1 ) + ( VAR_4 . METHOD_2 ( ) ) ) ) ; t . METHOD_3 ( VAR_5 ) ; if ( ( t . METHOD_4 ( ) ) != ( VAR_6 ) ) t . METHOD_5 ( VAR_6 ) ; return t ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_1 buffer ) { int VAR_1 = buffer . getInt ( ) ; TYPE_1 VAR_2 = buffer . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; buffer . position ( ( ( buffer . position ( ) ) + VAR_1 ) ) ; return buffer ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_1 buffer ) { int VAR_1 = buffer . getInt ( ) ; TYPE_1 VAR_2 = buffer . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; buffer . position ( ( ( buffer . position ( ) ) + VAR_1 ) ) ; return VAR_2 ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.lang.Integer VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( ( VAR_2 != null ) && ( VAR_2 > 0 ) ) { return VAR_4 . get ( VAR_2 ) . METHOD_2 ( VAR_1 ) ; } return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.lang.Integer VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( ( ( VAR_2 != null ) && ( VAR_2 > 0 ) ) && ( ( VAR_4 . get ( VAR_2 ) ) != null ) ) { return VAR_4 . get ( VAR_2 ) . METHOD_2 ( VAR_1 ) ; } return null ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.Throwable VAR_1 ) { VAR_2 . remove ( key ) ; VAR_3 . remove ( key ) ; errors . put ( key , VAR_1 ) ; TYPE_1 VAR_4 = VAR_5 . get ( key ) ; if ( VAR_4 != null ) { VAR_6 . METHOD_1 ( VAR_1 ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.Throwable VAR_1 ) { VAR_2 . remove ( key ) ; VAR_3 . remove ( key ) ; data . remove ( key ) ; errors . put ( key , VAR_1 ) ; TYPE_1 VAR_4 = VAR_5 . get ( key ) ; if ( VAR_4 != null ) { VAR_6 . METHOD_1 ( VAR_1 ) ; } }\n"}
{"problem": "public java.lang.Integer METHOD_1 ( java.lang.String VAR_1 , java.lang.String [ ] VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; TYPE_1 query = this . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; query . METHOD_4 ( STRING_2 , VAR_1 ) ; query . METHOD_5 ( STRING_3 , VAR_2 ) ; java.lang.Integer count = query . METHOD_6 ( ) ; return count ; }\n", "fixed": "public java.lang.Integer METHOD_1 ( java.lang.String VAR_1 , java.lang.String [ ] VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; TYPE_1 query = this . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; query . METHOD_4 ( STRING_2 , VAR_1 ) ; query . METHOD_5 ( STRING_3 , VAR_2 ) ; java.lang.Long count = ( ( java.lang.Long ) ( query . list ( ) . get ( 0 ) ) ) ; return count . intValue ( ) ; }\n"}
{"fixCommitSHA1": "acd7e159d2b9ce1cad742ebadce8ce1804553ad1", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "                     records.add(record);\n                 }\n                if ((ZWaveConfigurationCommandClass) node.getCommandClass(CommandClass.ASSOCIATION) != null) {\n                     record = new OpenHABConfigurationRecord(domain + \"associations/\", \"Association Groups\");\n                     record.addAction(\"Refresh\", \"Refresh\");\n                     records.add(record);", "fixed": "                     records.add(record);\n                 }\n                if ((ZWaveAssociationCommandClass) node.getCommandClass(CommandClass.ASSOCIATION) != null) {\n                     record = new OpenHABConfigurationRecord(domain + \"associations/\", \"Association Groups\");\n                     record.addAction(\"Refresh\", \"Refresh\");\n                     records.add(record);", "sourceBeforeFix": "(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)", "sourceAfterFix": "(ZWaveAssociationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)"}
{"problem": "private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( new TYPE_1 ( ) { public void METHOD_4 ( TYPE_2 VAR_2 ) { java.lang.String VAR_3 = VAR_2 . METHOD_5 ( ) ; VAR_4 . METHOD_6 ( new TYPE_3 ( VAR_3 ) ) ; } } ) ; VAR_1 . METHOD_7 ( new TYPE_4 ( ) { public void METHOD_8 ( ) { VAR_1 . METHOD_9 ( TYPE_5 . METHOD_10 ( VAR_5 , INT_1 ) ) ; } } ) ; }\n", "fixed": "private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( new TYPE_1 ( ) { public void METHOD_4 ( TYPE_2 VAR_2 ) { java.lang.String VAR_3 = VAR_2 . METHOD_5 ( ) ; VAR_4 . METHOD_6 ( new TYPE_3 ( VAR_3 ) ) ; } } ) ; if ( ( VAR_5 ) != null ) { VAR_1 . METHOD_7 ( new TYPE_4 ( ) { public void METHOD_8 ( ) { VAR_1 . METHOD_9 ( TYPE_5 . METHOD_10 ( VAR_5 , INT_1 ) ) ; } } ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "fixed": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"problem": "private static boolean METHOD_1 ( TYPE_1 filePath ) { boolean VAR_1 = ( filePath . METHOD_2 ( ) . toString ( ) . METHOD_3 ( CHAR_1 ) ) > 0 ; return VAR_1 && ( ! ( ( TYPE_2 . METHOD_4 ( filePath ) ) || ( TYPE_2 . METHOD_5 ( filePath ) ) ) ) ; }\n", "fixed": "private static boolean METHOD_1 ( TYPE_1 filePath ) { boolean VAR_1 = ( filePath . METHOD_2 ( ) . toString ( ) . METHOD_3 ( CHAR_1 ) ) > 0 ; return VAR_1 && ( ( ! ( TYPE_2 . METHOD_4 ( filePath ) ) ) || ( TYPE_2 . METHOD_5 ( filePath ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( float VAR_1 ) { if ( ! ( VAR_2 ) ) { if ( VAR_3 ) { if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_1 ( ( ( long ) ( VAR_1 * INT_1 ) ) ) ; } if ( VAR_1 == FLOAT_1 ) { VAR_5 = VAR_6 ; } } else { VAR_7 = VAR_1 ; } } else { if ( ( VAR_8 ) != null ) { VAR_8 . METHOD_1 ( ( ( ( long ) ( VAR_1 ) ) * INT_1 ) ) ; } } }\n", "fixed": "public void METHOD_1 ( float VAR_1 ) { if ( ! ( VAR_2 ) ) { if ( VAR_3 ) { this . VAR_4 . METHOD_1 ( ( ( long ) ( VAR_1 * INT_1 ) ) ) ; if ( VAR_1 == FLOAT_1 ) { VAR_5 = VAR_6 ; } } else { VAR_7 = VAR_1 ; } } else { VAR_8 . METHOD_1 ( ( ( ( long ) ( VAR_1 ) ) * INT_1 ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( int TYPE_1 ) { for ( int i = 0 ; i < ( TYPE_2 . get ( TYPE_1 ) . VAR_1 . size ( ) ) ; i ++ ) if ( ( TYPE_2 . get ( TYPE_1 ) . VAR_1 . get ( i ) ) != null ) java.lang.System.out.println ( ( ( ( i + 1 ) + STRING_1 ) + ( TYPE_2 . get ( TYPE_1 ) . VAR_1 . get ( i ) . METHOD_2 ( ) ) ) ) ; }\n", "fixed": "public void METHOD_1 ( int TYPE_1 ) { for ( int i = 0 ; i < ( TYPE_2 . get ( TYPE_1 ) . VAR_1 . size ( ) ) ; i ++ ) if ( ( TYPE_2 . get ( TYPE_1 ) . VAR_1 . get ( i ) ) != null ) java.lang.System.out.println ( ( ( i + STRING_1 ) + ( TYPE_2 . get ( TYPE_1 ) . VAR_1 . get ( i ) . METHOD_2 ( ) ) ) ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 type , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { if ( ( null == ( name ) ) || ( VAR_2 . METHOD_2 ( ) ) ) { METHOD_3 ( false ) ; } TYPE_5 VAR_3 = ( ( TYPE_5 ) ( METHOD_4 ( VAR_2 ) . METHOD_5 ( METHOD_6 ( ) , null ) ) ) ; VAR_3 . METHOD_7 ( type , VAR_1 , VAR_2 ) ; return VAR_3 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 type , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { if ( ( null == ( name ) ) || ( VAR_2 . METHOD_2 ( ) ) ) { METHOD_3 ( false ) ; } TYPE_5 VAR_3 = ( ( TYPE_5 ) ( METHOD_4 ( VAR_2 ) . METHOD_5 ( METHOD_6 ( ) , null ) ) ) ; if ( VAR_3 != null ) VAR_3 . METHOD_7 ( type , VAR_1 , VAR_2 ) ; return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { android.widget.Button b = ( ( android.widget.Button ) ( VAR_1 ) ) ; VAR_2 = b . getText ( ) . toString ( ) ; VAR_3 . setText ( VAR_2 ) ; VAR_4 . append ( VAR_5 . getText ( ) . toString ( ) ) ; VAR_5 . getText ( ) . METHOD_2 ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { android.widget.Button b = ( ( android.widget.Button ) ( VAR_1 ) ) ; VAR_2 = b . getText ( ) . toString ( ) ; VAR_3 . setText ( VAR_2 ) ; if ( ! ( VAR_5 . getText ( ) . toString ( ) . isEmpty ( ) ) ) { VAR_4 . setText ( VAR_5 . getText ( ) . toString ( ) ) ; VAR_5 . getText ( ) . METHOD_2 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_3 . METHOD_2 ( true ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_4 = new TYPE_2 ( VAR_2 , VAR_3 ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; VAR_5 . METHOD_5 ( VAR_2 ) ; VAR_6 . METHOD_5 ( VAR_2 ) ; VAR_6 . METHOD_4 ( VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_3 . METHOD_2 ( true ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_4 = new TYPE_2 ( VAR_2 , VAR_3 ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; VAR_5 . METHOD_5 ( VAR_2 ) ; VAR_6 . METHOD_5 ( VAR_2 ) ; VAR_6 . METHOD_4 ( VAR_4 ) ; VAR_6 . METHOD_3 ( VAR_1 ) ; }\n"}
{"problem": "public boolean execute ( ) { if ( ! ( VAR_1 ) ) { return false ; } for ( TYPE_1 VAR_2 : this . VAR_3 ) { if ( VAR_2 . METHOD_1 ( this . VAR_4 ) ) { if ( this . METHOD_2 ( VAR_2 . get ( this . VAR_4 ) , this . VAR_5 , this . VAR_6 ) ) { this . VAR_7 . add ( VAR_2 ) ; } } } return true ; }\n", "fixed": "public boolean execute ( ) { if ( ! ( VAR_1 ) ) { return false ; } for ( TYPE_1 VAR_2 : this . VAR_3 ) { if ( ( VAR_2 . METHOD_1 ( this . VAR_4 ) ) && ( this . METHOD_2 ( VAR_2 . get ( this . VAR_4 ) , this . VAR_5 , this . VAR_6 ) ) ) { this . VAR_7 . add ( VAR_2 ) ; } } return true ; }\n"}
{"problem": "public static void METHOD_1 ( ) { java.lang.System.out.println ( TYPE_1 . METHOD_2 ( ) ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( ) ; VAR_1 . METHOD_6 ( VAR_4 ) ; VAR_1 . METHOD_7 ( VAR_5 , VAR_3 ) ; TYPE_4 VAR_6 = ( ( TYPE_4 ) ( VAR_7 ) ) ; VAR_6 . METHOD_8 ( VAR_1 ) ; }\n", "fixed": "public static void METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( ) ; VAR_1 . METHOD_6 ( VAR_4 ) ; VAR_1 . METHOD_7 ( VAR_5 , VAR_3 ) ; TYPE_4 VAR_6 = ( ( TYPE_4 ) ( VAR_7 ) ) ; VAR_6 . METHOD_8 ( VAR_1 ) ; }\n"}
{"problem": "public void update ( ) { METHOD_1 ( ) ; VAR_1 += VAR_2 ; VAR_2 = ( ( VAR_3 . METHOD_2 ( ) ) * INT_1 ) + ( VAR_4 ) ; VAR_2 = ( VAR_3 . METHOD_2 ( ) ) * INT_1 ; VAR_5 . METHOD_3 ( ( ( VAR_1 ) - INT_2 ) , ( ( VAR_6 ) - INT_2 ) , INT_3 , INT_4 ) ; if ( VAR_5 . METHOD_4 ( VAR_7 ) ) { METHOD_5 ( ) ; } }\n", "fixed": "public void update ( ) { METHOD_1 ( ) ; VAR_1 += VAR_2 ; VAR_2 = ( ( VAR_3 . METHOD_2 ( ) ) * INT_1 ) + ( VAR_4 ) ; VAR_5 . METHOD_3 ( ( ( VAR_1 ) - INT_2 ) , ( ( VAR_6 ) - INT_2 ) , INT_3 , INT_4 ) ; if ( VAR_5 . METHOD_4 ( VAR_7 ) ) { METHOD_5 ( ) ; } }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) { java.io.File VAR_1 = new java.io.File ( STRING_1 ) ; VAR_1 . METHOD_1 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; java.lang.System.out.println ( STRING_2 ) ; java.util.Scanner VAR_3 = new java.util.Scanner ( VAR_4 ) ; VAR_2 . path = VAR_3 . METHOD_2 ( ) ; java.lang.System.out.println ( VAR_2 . path ) ; try { VAR_2 . METHOD_3 ( ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_5 . METHOD_4 ( ) ; } VAR_3 . METHOD_5 ( ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; java.lang.System.out.println ( STRING_2 ) ; java.util.Scanner VAR_3 = new java.util.Scanner ( VAR_4 ) ; VAR_2 . path = VAR_3 . METHOD_2 ( ) ; java.lang.System.out.println ( VAR_2 . path ) ; try { VAR_2 . METHOD_3 ( ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_5 . METHOD_4 ( ) ; } VAR_3 . METHOD_5 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             case CREATE:\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNano(System.nanoTime() - start);\n                 }\n                 cacheRecordStore.createRecordWithExpiry(keyData, value, expiryPolicy, now, false);\n                 break;", "fixed": "             case CREATE:\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 cacheRecordStore.createRecordWithExpiry(keyData, value, expiryPolicy, now, false);\n                 break;", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { try { java.lang.Integer.parseInt ( TYPE_2 . getText ( ) ) ; java.lang.Integer.parseInt ( TYPE_3 . getText ( ) ) ; java.lang.Double . METHOD_2 ( TYPE_4 . getText ( ) ) ; java.lang.Double . METHOD_2 ( TYPE_5 . getText ( ) ) ; METHOD_3 ( VAR_2 ) ; } catch ( TYPE_6 VAR_3 ) { TYPE_7 . METHOD_4 ( this , VAR_3 . METHOD_5 ( ) , STRING_1 , VAR_4 ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { try { java.lang.Integer.parseInt ( TYPE_2 . getText ( ) ) ; java.lang.Double . METHOD_2 ( TYPE_4 . getText ( ) ) ; java.lang.Double . METHOD_2 ( TYPE_5 . getText ( ) ) ; METHOD_3 ( VAR_2 ) ; } catch ( TYPE_6 VAR_3 ) { TYPE_7 . METHOD_4 ( this , VAR_3 . METHOD_5 ( ) , STRING_1 , VAR_4 ) ; } }\n"}
{"problem": "public int METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { int VAR_3 = 0 ; try { TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( ) ; TYPE_2 VAR_6 = VAR_4 . METHOD_3 ( ( ( ( ( STRING_1 + ( VAR_7 ) ) + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; if ( VAR_6 . METHOD_4 ( ) ) { VAR_3 = VAR_6 . getInt ( STRING_3 ) ; } } catch ( TYPE_3 VAR_8 ) { VAR_8 . METHOD_5 ( ) ; } return VAR_3 ; }\n", "fixed": "public int METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { int VAR_3 = 0 ; try { TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( ) ; TYPE_2 VAR_6 = VAR_4 . METHOD_3 ( ( ( ( ( STRING_1 + ( VAR_7 ) ) + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; if ( VAR_6 . METHOD_4 ( ) ) { VAR_3 = VAR_6 . getInt ( STRING_3 ) ; } } catch ( TYPE_3 VAR_8 ) { } return VAR_3 ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( int index ) { if ( index <= ( VAR_1 . size ( ) ) ) { METHOD_2 ( STRING_1 , STRING_2 ) ; return VAR_1 . get ( index ) . getName ( ) ; } else { METHOD_2 ( STRING_3 , STRING_4 ) ; return null ; } }\n", "fixed": "public java.lang.String METHOD_1 ( int index ) { if ( index <= ( VAR_1 . size ( ) ) ) { METHOD_2 ( STRING_1 , STRING_2 ) ; return VAR_1 . get ( ( index - 1 ) ) . getName ( ) ; } else { METHOD_2 ( STRING_3 , STRING_4 ) ; return null ; } }\n"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "fixed": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic abstract boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"problem": "public boolean METHOD_1 ( ) { final TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) ; final TYPE_2 VAR_2 = VAR_1 . METHOD_5 ( VAR_3 class ) ; final boolean VAR_4 = VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ; return ( ( VAR_2 . value ( ) ) == ( VAR_5 ) ) && VAR_4 ; }\n", "fixed": "public boolean METHOD_1 ( ) { final TYPE_1 VAR_1 = METHOD_3 ( ) ; final TYPE_2 VAR_2 = VAR_1 . METHOD_5 ( VAR_3 class ) ; final boolean VAR_4 = VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ; return ( ( VAR_2 . value ( ) ) == ( VAR_5 ) ) && VAR_4 ; }\n"}
{"problem": "private boolean METHOD_1 ( TYPE_1 key , TYPE_2 buffer ) throws java.io.IOException { TYPE_3 VAR_1 = ( ( TYPE_3 ) ( key . METHOD_2 ( ) ) ) ; int VAR_2 = VAR_1 . METHOD_3 ( buffer ) ; if ( VAR_2 < 0 ) { VAR_1 . METHOD_4 ( ) ; key . METHOD_5 ( ) ; return false ; } return ! ( VAR_3 . METHOD_6 ( ) ) ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 key , TYPE_2 buffer ) throws java.io.IOException { TYPE_3 VAR_1 = ( ( TYPE_3 ) ( key . METHOD_2 ( ) ) ) ; int VAR_2 = VAR_1 . METHOD_3 ( buffer ) ; if ( VAR_2 < 0 ) { VAR_1 . METHOD_4 ( ) ; key . METHOD_5 ( ) ; return false ; } return ! ( buffer . METHOD_6 ( ) ) ; }\n"}
{"problem": "public TYPE_1 [ ] keys ( ) { int index = 0 ; TYPE_1 [ ] keys = ( ( TYPE_1 [ ] ) ( new java.lang.Object [ size ( ) ] ) ) ; for ( int i = 0 ; i < ( VAR_1 ) ; i ++ ) if ( ( ( VAR_2 [ i ] ) != null ) && ( ( VAR_2 [ i ] ) != ( VAR_3 ) ) ) keys [ ( index ++ ) ] = VAR_2 [ i ] ; return keys ; }\n", "fixed": "public java.util.List < TYPE_1 > keys ( ) { java.util.List < TYPE_1 > keys = new java.util.ArrayList < > ( size ( ) ) ; for ( int i = 0 ; i < ( VAR_1 ) ; i ++ ) if ( ( ( VAR_2 [ i ] ) != null ) && ( ( VAR_2 [ i ] ) != ( VAR_3 ) ) ) keys . add ( VAR_2 [ i ] ) ; return keys ; }\n"}
{"problem": "public boolean equals ( java.lang.Object obj ) { if ( this . getClass ( ) . equals ( obj . getClass ( ) ) ) { return ( ( TYPE_1 ) ( obj ) ) . VAR_1 . equals ( this . VAR_1 ) ; } return false ; }\n", "fixed": "public boolean equals ( java.lang.Object obj ) { if ( obj == null ) { return false ; } if ( this . getClass ( ) . equals ( obj . getClass ( ) ) ) { return ( ( TYPE_1 ) ( obj ) ) . VAR_1 . equals ( this . VAR_1 ) ; } return false ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( VAR_1 . equals ( STRING_1 ) ) ) { VAR_2 = new TYPE_1 ( this , TYPE_2 . METHOD_2 ( this ) . METHOD_3 ( VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( VAR_1 . equals ( STRING_1 ) ) ) { VAR_2 = new TYPE_1 ( this , TYPE_2 . METHOD_2 ( this ) . METHOD_3 ( VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; } else { VAR_3 . METHOD_4 ( null ) ; } return false ; }\n"}
{"problem": "public void METHOD_1 ( ) { try { VAR_1 . delete ( VAR_2 . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( STRING_1 ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_6 ( ) ; VAR_5 . METHOD_7 ( ) ; VAR_1 . METHOD_4 ( ) ; VAR_3 . error ( STRING_2 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { VAR_1 . delete ( VAR_2 . METHOD_2 ( ) ) ; VAR_3 . METHOD_5 ( STRING_1 ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_6 ( ) ; VAR_5 . METHOD_7 ( ) ; VAR_1 . METHOD_4 ( ) ; VAR_3 . error ( STRING_2 ) ; } }\n"}
{"fixCommitSHA1": "c3cdefcf979188c68a8d9fc923f077f21497b5ab", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n        TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()), \"In Memory\",\n        testUser, tUri.getPath());\n   }\n   @Test", "fixed": "   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n        CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()),\n        \"In Memory\", testUser, tUri.getPath());\n   }\n   @Test", "sourceBeforeFix": "TfsShell.convertMsToDate(files[3].getCreationTimeMs())", "sourceAfterFix": "CommandUtils.convertMsToDate(files[3].getCreationTimeMs())"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = new TYPE_2 ( ) ; VAR_4 = new TYPE_3 ( this ) ; if ( ( ! ( METHOD_3 ( ) ) ) || ( VAR_3 . METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else { METHOD_6 ( ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = new TYPE_2 ( ) ; VAR_4 = new TYPE_3 ( this ) ; if ( VAR_3 . METHOD_4 ( ) ) { METHOD_5 ( ) ; } else { METHOD_6 ( ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { try { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) VAR_1 . METHOD_1 ( ) ; VAR_1 = null ; if ( ( VAR_2 ) != null ) VAR_2 . METHOD_1 ( ) ; VAR_2 = null ; } catch ( java.lang.Exception VAR_3 ) { throw new TYPE_1 ( VAR_3 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) VAR_1 . METHOD_1 ( ) ; VAR_1 = null ; VAR_2 = null ; } catch ( java.lang.Exception VAR_3 ) { throw new TYPE_1 ( VAR_3 ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { if ( METHOD_2 ( VAR_1 , VAR_2 ) ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; try { return ( ( TYPE_1 ) ( VAR_3 . METHOD_3 ( VAR_4 class , new java.io.FileReader ( this . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 ) ) ) ) ) ; } catch ( TYPE_4 VAR_5 ) { VAR_5 . METHOD_6 ( ) ; } } return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { if ( METHOD_2 ( VAR_1 , VAR_2 ) ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; try { return VAR_3 . METHOD_3 ( VAR_4 class , new java.io.FileReader ( this . METHOD_4 ( VAR_1 , VAR_2 ) ) ) ; } catch ( TYPE_4 VAR_5 ) { VAR_5 . METHOD_6 ( ) ; } } return null ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String path ) { if ( TYPE_2 . isEmpty ( path ) ) throw new TYPE_3 ( STRING_1 ) ; java.io.File filePath = new java.io.File ( path ) ; if ( ! ( filePath . METHOD_2 ( ) ) ) if ( ! ( filePath . METHOD_3 ( ) ) ) TYPE_4 . METHOD_4 ( ) . VAR_1 . error ( VAR_2 , STRING_2 ) ; this . VAR_3 = path ; return this ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String path ) { if ( TYPE_2 . isEmpty ( path ) ) throw new TYPE_3 ( STRING_1 ) ; java.io.File filePath = new java.io.File ( path ) ; if ( ( ! ( filePath . METHOD_2 ( ) ) ) && ( ! ( filePath . METHOD_3 ( ) ) ) ) TYPE_4 . METHOD_4 ( ) . VAR_1 . error ( VAR_2 , STRING_2 ) ; this . VAR_3 = path ; return this ; }\n"}
{"problem": "public TYPE_1 < byte [ ] > METHOD_1 ( java.lang.String param , TYPE_2 VAR_1 ) throws java.io.IOException { long id = TYPE_3 . METHOD_2 ( param ) ; if ( id < 0 ) return new TYPE_1 < byte [ ] > ( VAR_2 ) ; TYPE_4 VAR_3 = VAR_4 . METHOD_3 ( id ) ; java.lang.String VAR_5 = VAR_3 . METHOD_4 ( ) ; return TYPE_5 . METHOD_5 ( VAR_5 ) ; }\n", "fixed": "public TYPE_1 < byte [ ] > METHOD_1 ( java.lang.String param , TYPE_2 VAR_1 ) throws java.io.IOException { long id = TYPE_3 . METHOD_2 ( param ) ; if ( id < 0 ) return new TYPE_1 < byte [ ] > ( VAR_2 ) ; TYPE_4 VAR_3 = VAR_4 . METHOD_3 ( id ) ; if ( VAR_3 != null ) { java.lang.String VAR_5 = VAR_3 . METHOD_4 ( ) ; return TYPE_5 . METHOD_5 ( VAR_5 ) ; } else return new TYPE_1 < byte [ ] > ( VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 , int j ) { android.content.Intent i = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; i . METHOD_3 ( STRING_1 , j ) ; if ( j == 0 ) { VAR_1 = VAR_3 . get ( VAR_1 ) . METHOD_4 ( ) ; } i . METHOD_3 ( STRING_2 , VAR_1 ) ; METHOD_5 ( i ) ; METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 , int j ) { android.content.Intent i = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; i . METHOD_3 ( STRING_1 , j ) ; if ( j == 0 ) { VAR_1 = VAR_3 . get ( VAR_1 ) . METHOD_4 ( ) ; } i . METHOD_3 ( STRING_2 , VAR_1 ) ; METHOD_5 ( i ) ; }\n"}
{"problem": "public static void METHOD_1 ( TYPE_1 VAR_1 , java.util.Map < java.lang.String , java.lang.String > params ) throws java.io.IOException { java.lang.String label ; try { label = params . get ( VAR_2 ) ; } catch ( TYPE_2 VAR_3 ) { throw new java.io.IOException ( STRING_1 ) ; } java.lang.String [ ] VAR_4 = TYPE_3 . METHOD_2 ( label ) ; if ( VAR_4 == null ) { java.lang.System.out.println ( ( STRING_2 + label ) ) ; return ; } else { TYPE_4 . METHOD_3 ( VAR_1 , params , VAR_4 ) ; } }\n", "fixed": "public static void METHOD_1 ( TYPE_1 VAR_1 , java.util.Map < java.lang.String , java.lang.String > params ) throws java.io.IOException { java.lang.String label ; try { label = params . get ( VAR_2 ) ; } catch ( TYPE_2 VAR_3 ) { throw new java.io.IOException ( STRING_1 ) ; } java.lang.String [ ] VAR_4 = TYPE_3 . METHOD_2 ( label ) ; if ( VAR_4 == null ) return ; TYPE_4 . METHOD_3 ( VAR_1 , params , VAR_4 ) ; }\n"}
{"fixCommitSHA1": "7369734ba2477dc5f208c9bcdbf438d42e92ac25", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": "  * {@link Table} with a single cell but is more lightweight.\n  * @author Nathan Sweet */\n public class Container<T extends Actor> extends WidgetGroup {\n\tprivate Actor actor;\n \tprivate Value minWidth = Value.minWidth, minHeight = Value.minHeight;\n \tprivate Value prefWidth = Value.prefWidth, prefHeight = Value.prefHeight;\n \tprivate Value maxWidth = Value.zero, maxHeight = Value.zero;", "fixed": "  * {@link Table} with a single cell but is more lightweight.\n  * @author Nathan Sweet */\n public class Container<T extends Actor> extends WidgetGroup {\n\tprivate T actor;\n \tprivate Value minWidth = Value.minWidth, minHeight = Value.minHeight;\n \tprivate Value prefWidth = Value.prefWidth, prefHeight = Value.prefHeight;\n \tprivate Value maxWidth = Value.zero, maxHeight = Value.zero;", "sourceBeforeFix": "private Actor actor; ", "sourceAfterFix": "private T actor; "}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 == null ) { TYPE_2 . METHOD_3 ( this , STRING_1 , VAR_3 ) . show ( ) ; } else { TYPE_3 VAR_4 = new TYPE_3 ( this ) ; VAR_4 . METHOD_4 ( STRING_2 ) ; VAR_4 . METHOD_5 ( STRING_3 ) ; VAR_4 . METHOD_6 ( VAR_5 , null ) ; TYPE_4 VAR_6 = VAR_4 . METHOD_7 ( ) ; VAR_6 . show ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { TYPE_2 . METHOD_3 ( this , STRING_1 , VAR_3 ) . show ( ) ; } else { TYPE_3 VAR_4 = new TYPE_3 ( this ) ; VAR_4 . METHOD_4 ( STRING_2 ) ; VAR_4 . METHOD_5 ( STRING_3 ) ; VAR_4 . METHOD_6 ( VAR_5 , null ) ; TYPE_4 VAR_6 = VAR_4 . METHOD_7 ( ) ; VAR_6 . show ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; int VAR_3 = INT_1 ; java.util.List < TYPE_2 > result = VAR_2 . METHOD_4 ( ) ; TYPE_3 . assertEquals ( VAR_3 , result . size ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; int VAR_3 = INT_1 ; java.util.List < TYPE_2 > result = VAR_2 . METHOD_4 ( ) ; TYPE_3 . assertTrue ( ( VAR_3 <= ( result . size ( ) ) ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSolrEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SolrEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSolrEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SolrEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . put ( VAR_4 , VAR_1 ) ; VAR_3 . put ( VAR_5 , VAR_1 ) ; TYPE_1 response = TYPE_2 . METHOD_4 ( VAR_3 , VAR_6 ) ; VAR_2 . METHOD_5 ( response . getString ( VAR_7 ) ) ; VAR_8 = VAR_9 . METHOD_6 ( ) . METHOD_7 ( ) ; TYPE_3 . METHOD_8 ( ) ; VAR_10 = VAR_8 . METHOD_9 ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; TYPE_1 response = TYPE_2 . METHOD_4 ( VAR_1 , VAR_1 , VAR_6 ) ; VAR_2 . METHOD_5 ( response . getString ( VAR_7 ) ) ; VAR_8 = VAR_9 . METHOD_6 ( ) . METHOD_7 ( ) ; TYPE_3 . METHOD_8 ( ) ; VAR_10 = VAR_8 . METHOD_9 ( VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View view ) { java.lang.String VAR_1 = VAR_2 . getText ( ) . toString ( ) ; boolean VAR_3 = false ; for ( int i = 0 ; i < ( VAR_4 ) ; i ++ ) { if ( ! VAR_3 ) { android.widget.Button VAR_5 = ( ( android.widget.Button ) ( METHOD_2 ( i ) ) ) ; if ( VAR_5 . getText ( ) . equals ( STRING_1 ) ) { VAR_5 . setText ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_6 ) ; VAR_3 = true ; } } } }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { java.lang.String VAR_1 = VAR_2 . getText ( ) . toString ( ) ; boolean VAR_3 = false ; for ( int i = 0 ; i < VAR_4 ; i ++ ) { if ( ! VAR_3 ) { android.widget.Button VAR_5 = ( ( android.widget.Button ) ( METHOD_2 ( i ) ) ) ; if ( VAR_5 . getText ( ) . equals ( STRING_1 ) ) { VAR_5 . setText ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_6 ) ; VAR_3 = true ; } } } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( INT_1 ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; java.util.List < TYPE_1 > list = new java.util.ArrayList < > ( ) ; list . add ( VAR_1 ) ; VAR_2 . METHOD_5 ( list ) ; assertEquals ( list , VAR_2 . METHOD_6 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; java.util.List < TYPE_1 > list = new java.util.ArrayList < > ( ) ; list . add ( VAR_1 ) ; VAR_2 . METHOD_5 ( list ) ; assertEquals ( list , VAR_2 . METHOD_6 ( ) ) ; }\n"}
{"problem": "void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . add ( new TYPE_1 ( 1 , STRING_1 ) ) ; VAR_1 . add ( new TYPE_1 ( INT_1 , STRING_2 ) ) ; VAR_1 . add ( new TYPE_1 ( INT_2 , TYPE_2 . METHOD_2 ( ) . toString ( ) ) ) ; VAR_2 . update ( new TYPE_3 ( VAR_3 , VAR_1 ) ) ; }\n", "fixed": "void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . add ( new TYPE_1 ( 1 , STRING_1 ) ) ; VAR_1 . add ( new TYPE_1 ( INT_1 , STRING_2 ) ) ; VAR_1 . add ( new TYPE_1 ( INT_2 , TYPE_2 . METHOD_2 ( ) . toString ( ) ) ) ; VAR_2 . update ( VAR_1 , new TYPE_3 ( VAR_3 , VAR_1 ) ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CxfRsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCxfRsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CxfRsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCxfRsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void handle ( TYPE_1 VAR_1 , java.lang.Object data ) { if ( VAR_1 . equals ( VAR_2 ) ) { if ( ( ( ( VAR_3 ) != null ) && ( ( VAR_3 . METHOD_1 ( ) ) != null ) ) && ( ( VAR_4 ) != null ) ) { METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; METHOD_4 ( ) ; } } }\n", "fixed": "public void handle ( TYPE_1 VAR_1 , java.lang.Object data ) { if ( VAR_1 . equals ( VAR_2 ) ) { if ( ( ( ( VAR_3 ) != null ) && ( ( VAR_3 . METHOD_1 ( ) ) != null ) ) && ( ( VAR_4 ) != null ) ) { VAR_3 . METHOD_3 ( ) ; METHOD_4 ( ) ; } } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { VAR_2 . setText ( VAR_3 . get ( i ) . name ) ; VAR_4 . setText ( VAR_3 . get ( i ) . VAR_5 ) ; VAR_6 . METHOD_2 ( VAR_3 . get ( i ) . VAR_7 ) ; VAR_8 . METHOD_3 ( VAR_3 . get ( i ) . VAR_9 ) ; TYPE_2 . METHOD_4 ( VAR_10 , ( STRING_1 + i ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { VAR_2 . setText ( VAR_3 . get ( i ) . name ) ; VAR_4 . setText ( VAR_3 . get ( i ) . VAR_5 ) ; VAR_6 . METHOD_2 ( VAR_3 . get ( i ) . VAR_7 ) ; VAR_8 . METHOD_2 ( VAR_3 . get ( i ) . VAR_7 ) ; TYPE_2 . METHOD_4 ( VAR_10 , ( STRING_1 + i ) ) ; }\n"}
{"fixCommitSHA1": "007ea4a7f2ba64fad78f78c1b798ca45455719e4", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final JsonFactory jsonFactory = new YAMLFactory();\n         final ObjectMapper mapper = factory.build(jsonFactory);\n        assertThat(mapper.getJsonFactory())\n                 .isSameAs(jsonFactory);\n     }", "fixed": "         final JsonFactory jsonFactory = new YAMLFactory();\n         final ObjectMapper mapper = factory.build(jsonFactory);\n        assertThat(mapper.getFactory())\n                 .isSameAs(jsonFactory);\n     }", "sourceBeforeFix": "mapper.getJsonFactory()", "sourceAfterFix": "mapper.getFactory()"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item ) { boolean VAR_1 = true ; switch ( item . METHOD_2 ( ) ) { case VAR_2 : final android.content.Intent VAR_3 = new android.content.Intent ( this , VAR_4 class ) ; this . METHOD_3 ( VAR_3 ) ; break ; case VAR_5 : if ( METHOD_4 ( ) ) { TYPE_2 . METHOD_5 ( VAR_6 , METHOD_6 ( ) ) ; } else { METHOD_7 ( ) ; } break ; default : VAR_1 = super . METHOD_1 ( item ) ; break ; } return VAR_1 ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 item ) { boolean VAR_1 = true ; switch ( item . METHOD_2 ( ) ) { case VAR_2 : final android.content.Intent VAR_3 = new android.content.Intent ( this , VAR_4 class ) ; this . METHOD_3 ( VAR_3 ) ; break ; case VAR_5 : METHOD_7 ( ) ; break ; default : VAR_1 = super . METHOD_1 ( item ) ; break ; } return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( ( VAR_2 . METHOD_3 ( ) ) || ( VAR_2 . METHOD_4 ( ) ) ) ) { METHOD_5 ( VAR_2 , VAR_2 . METHOD_6 ( ) , null ) ; } VAR_1 . METHOD_1 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_2 != null ) { if ( ( VAR_2 . METHOD_3 ( ) ) || ( VAR_2 . METHOD_4 ( ) ) ) { METHOD_5 ( VAR_2 , VAR_2 . METHOD_6 ( ) , null ) ; } } VAR_1 . METHOD_1 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( STRING_1 , VAR_1 . get ( ) ) ; TYPE_2 . METHOD_4 ( STRING_2 , VAR_2 . get ( ) ) ; TYPE_2 . METHOD_4 ( STRING_3 , VAR_3 . METHOD_5 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( STRING_1 , VAR_1 . METHOD_5 ( ) ) ; TYPE_2 . METHOD_4 ( STRING_2 , VAR_2 . METHOD_5 ( ) ) ; TYPE_2 . METHOD_4 ( STRING_3 , VAR_3 . METHOD_5 ( ) ) ; }\n"}
{"problem": "public int METHOD_1 ( int a , int b ) { if ( a == 0 ) return b ; while ( b != 0 ) { if ( a > b ) a = a - b ; else b = b - a ; } return a ; }\n", "fixed": "public int METHOD_1 ( int a , int b ) { if ( a < 0 ) { a = - a ; } if ( b < 0 ) { b = - b ; } if ( a == 0 ) return b ; while ( b != 0 ) { if ( a > b ) a = a - b ; else b = b - a ; } return a ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; if ( VAR_1 != null ) { TYPE_2 data = new TYPE_2 ( ) ; data . METHOD_2 ( VAR_1 ) ; METHOD_3 ( data . getView ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; if ( VAR_2 || ( VAR_1 == null ) ) { METHOD_3 ( null ) ; setText ( null ) ; } else if ( VAR_1 != null ) { TYPE_2 data = new TYPE_2 ( ) ; data . METHOD_2 ( VAR_1 ) ; METHOD_3 ( data . getView ( ) ) ; } }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( url , VAR_3 , VAR_4 ) ; TYPE_3 VAR_5 = VAR_2 . METHOD_3 ( ) ; java.lang.String query = ( STRING_1 + VAR_1 ) + STRING_2 ; TYPE_4 VAR_6 = VAR_2 . METHOD_4 ( query ) ; VAR_6 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( ) ; VAR_2 . METHOD_6 ( ) ; } catch ( TYPE_5 VAR_7 ) { } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { try { VAR_2 = TYPE_2 . METHOD_2 ( url , VAR_3 , VAR_4 ) ; VAR_5 = VAR_2 . METHOD_3 ( ) ; java.lang.String query = ( STRING_1 + VAR_1 ) + STRING_2 ; TYPE_4 VAR_6 = VAR_2 . METHOD_4 ( query ) ; VAR_6 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( ) ; VAR_2 . METHOD_6 ( ) ; } catch ( TYPE_5 VAR_7 ) { } }\n"}
{"problem": "public synchronized TYPE_1 query ( final java.lang.String VAR_1 , final java.lang.Object [ ] parameters ) { final TYPE_2 VAR_2 = METHOD_1 ( VAR_1 , parameters , false ) ; if ( VAR_2 != null ) { try { final TYPE_1 result = VAR_2 . METHOD_2 ( ) ; result . METHOD_3 ( ) ; VAR_3 . commit ( ) ; return result ; } catch ( TYPE_3 VAR_4 ) { VAR_4 . METHOD_4 ( ) ; METHOD_5 ( ) ; } } return null ; }\n", "fixed": "public synchronized TYPE_1 query ( final java.lang.String VAR_1 , final java.lang.Object [ ] parameters ) { final TYPE_2 VAR_2 = METHOD_1 ( VAR_1 , parameters , false ) ; if ( VAR_2 != null ) { try { final TYPE_1 result = VAR_2 . METHOD_2 ( ) ; VAR_3 . commit ( ) ; return result ; } catch ( TYPE_3 VAR_4 ) { VAR_4 . METHOD_4 ( ) ; METHOD_5 ( ) ; } } return null ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( view . METHOD_2 ( ) ) != null ) && ( view . METHOD_2 ( ) . equals ( STRING_1 ) ) ) { view . METHOD_3 ( null ) ; return ; } TYPE_2 VAR_2 = ( ( TYPE_2 ) ( view . METHOD_4 ( ) ) ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_5 ( view ) ; } if ( VAR_3 != null ) { VAR_3 . METHOD_1 ( VAR_1 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( view . METHOD_2 ( ) ) != null ) && ( view . METHOD_2 ( ) . equals ( STRING_1 ) ) ) { return ; } TYPE_2 VAR_2 = ( ( TYPE_2 ) ( view . METHOD_4 ( ) ) ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_5 ( view ) ; } if ( VAR_3 != null ) { VAR_3 . METHOD_1 ( VAR_1 ) ; } }\n"}
{"fixCommitSHA1": "febea8d12b9e1df1e9239101d23fa0f8c5dd6dfd", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": "   @Deployment\n   public void testParallelSubProcessCompletionCondition() {\n     String procId = runtimeService.startProcessInstanceByKey(\"miParallelSubprocessCompletionCondition\").getId();\n    List<Task> tasks = taskService.createTaskQuery().orderByTaskId().asc().list();\n     assertEquals(4, tasks.size());\n     for (int i=0; i<2; i++) {", "fixed": "   @Deployment\n   public void testParallelSubProcessCompletionCondition() {\n     String procId = runtimeService.startProcessInstanceByKey(\"miParallelSubprocessCompletionCondition\").getId();\n    List<Task> tasks = taskService.createTaskQuery().orderByExecutionId().asc().list();\n     assertEquals(4, tasks.size());\n     for (int i=0; i<2; i++) {", "sourceBeforeFix": "taskService.createTaskQuery().orderByTaskId()", "sourceAfterFix": "taskService.createTaskQuery().orderByExecutionId()"}
{"problem": "private boolean remove ( java.util.ArrayList < TYPE_1 > VAR_1 , java.lang.String VAR_2 ) { boolean VAR_3 = false ; for ( TYPE_1 event : VAR_1 ) { if ( event . METHOD_1 ( ) . equals ( VAR_2 ) ) { VAR_1 . remove ( event ) ; event . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ) ; VAR_3 = true ; } } return VAR_3 ; }\n", "fixed": "private boolean remove ( java.util.ArrayList < TYPE_1 > VAR_1 , java.lang.String VAR_2 ) { boolean VAR_3 = false ; for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( VAR_1 . get ( i ) . METHOD_1 ( ) . equals ( VAR_2 ) ) { VAR_1 . get ( i ) . METHOD_2 ( ) ; VAR_1 . remove ( i ) ; VAR_3 = true ; i -- ; } } VAR_4 . METHOD_3 ( ) ; return VAR_3 ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4 = VAR_5 . METHOD_3 ( ) ; if ( ! ( VAR_5 . METHOD_4 ( VAR_6 , VAR_1 ) ) ) { return VAR_7 . METHOD_5 ( VAR_2 . METHOD_2 ( VAR_3 ) ) ; } else { return VAR_7 . METHOD_6 ( VAR_1 , VAR_4 ) ; } }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4 = VAR_5 . METHOD_3 ( ) ; if ( VAR_5 . METHOD_4 ( VAR_6 , VAR_1 ) ) { return VAR_7 . METHOD_5 ( VAR_2 . METHOD_2 ( VAR_3 ) ) ; } else { return VAR_7 . METHOD_6 ( VAR_1 , VAR_4 ) ; } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 ) ; if ( ! ( VAR_2 . METHOD_3 ( ) ) ) { VAR_3 . METHOD_4 ( ) ; } else { VAR_4 . METHOD_4 ( ) ; } if ( ! ( VAR_5 . METHOD_5 ( ) ) ) { METHOD_6 ( ) ; } else { METHOD_7 ( VAR_1 ) ; } TYPE_2 . METHOD_8 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 ) ; if ( ! ( VAR_2 . METHOD_3 ( ) ) ) { VAR_3 . METHOD_4 ( ) ; } else { VAR_4 . METHOD_4 ( ) ; } if ( ! ( VAR_5 . METHOD_5 ( ) ) ) { METHOD_6 ( ) ; } else { METHOD_7 ( VAR_1 ) ; } TYPE_2 . METHOD_8 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_5 . METHOD_3 ( ) ; TYPE_2 VAR_6 = new TYPE_2 ( ) ; VAR_6 . METHOD_4 ( STRING_1 , VAR_7 ) ; TYPE_3 VAR_8 = new TYPE_3 ( ) ; VAR_8 . METHOD_5 ( VAR_6 ) ; TYPE_4 VAR_9 = METHOD_6 ( ) . METHOD_7 ( ) ; VAR_9 . replace ( VAR_10 , VAR_8 ) ; VAR_9 . METHOD_8 ( null ) ; VAR_9 . commit ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_5 . METHOD_3 ( ) ; TYPE_2 VAR_6 = new TYPE_2 ( ) ; VAR_6 . METHOD_4 ( STRING_1 , VAR_7 ) ; TYPE_3 VAR_8 = new TYPE_3 ( ) ; VAR_8 . METHOD_5 ( VAR_6 ) ; TYPE_4 VAR_9 = METHOD_6 ( ) . METHOD_7 ( ) ; VAR_9 . replace ( VAR_10 , VAR_8 ) ; VAR_9 . commit ( ) ; }\n"}
{"problem": "public void add ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == 0 ) return ; if ( VAR_1 instanceof TYPE_2 ) { VAR_3 . add ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ; } else if ( VAR_1 instanceof TYPE_3 ) { VAR_4 . add ( ( ( TYPE_3 ) ( VAR_1 ) ) ) ; } VAR_5 . add ( VAR_1 ) ; }\n", "fixed": "public void add ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == 0 ) return ; if ( VAR_1 instanceof TYPE_2 ) { VAR_3 . add ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ; } else if ( VAR_1 instanceof TYPE_3 ) { VAR_4 . add ( ( ( TYPE_3 ) ( VAR_1 ) ) ) ; } else { VAR_5 . add ( VAR_1 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 { VAR_1 . METHOD_2 ( ) ; for ( int i = 1 ; i < INT_1 ; i ++ ) { java.lang.Thread . METHOD_3 ( INT_2 ) ; java.lang.System.out.println ( ( ( ( VAR_1 . METHOD_4 ( ) . VAR_2 ) + STRING_1 ) + ( VAR_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) ) ) ; } VAR_1 . METHOD_7 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) throws TYPE_1 { VAR_1 . METHOD_2 ( ) ; for ( int i = 1 ; i < INT_1 ; i ++ ) { java.lang.Thread . METHOD_3 ( INT_2 ) ; java.lang.System.out.println ( ( ( ( java.lang.Long . toString ( VAR_1 . METHOD_4 ( ) ) ) + STRING_1 ) + ( VAR_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) ) ) ; } VAR_1 . METHOD_7 ( ) ; }\n"}
{"problem": "public void remove ( TYPE_1 p ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { if ( VAR_1 [ i ] . equals ( p ) ) { VAR_1 [ i ] = null ; } } }\n", "fixed": "public void remove ( TYPE_1 p ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { if ( ( VAR_1 [ i ] ) != null ) { if ( VAR_1 [ i ] . equals ( p ) ) { VAR_1 [ i ] = null ; } } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( int start , int end ) { int VAR_1 = length ( ) ; TYPE_2 . METHOD_2 ( ( start >= 0 ) ) ; TYPE_2 . METHOD_2 ( ( end <= VAR_1 ) ) ; if ( ( ( this . start ) == 0 ) && ( ( this . end ) == VAR_1 ) ) { return this ; } return new TYPE_1 ( VAR_2 , ( ( this . start ) + start ) , ( ( this . start ) + end ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int start , int end ) { int VAR_1 = length ( ) ; TYPE_2 . METHOD_2 ( ( start >= 0 ) ) ; TYPE_2 . METHOD_2 ( ( end <= VAR_1 ) ) ; if ( ( start == 0 ) && ( end == VAR_1 ) ) { return this ; } return new TYPE_1 ( VAR_2 , ( ( this . start ) + start ) , ( ( this . start ) + end ) ) ; }\n"}
{"problem": "private int METHOD_1 ( ) { if ( ( ( getView ( ) ) == null ) || ( ( VAR_1 . METHOD_2 ( ) ) <= 0 ) ) { return VAR_2 ; } return TYPE_1 . METHOD_3 ( VAR_3 , ( ( VAR_1 . METHOD_2 ( ) ) / ( getView ( ) . METHOD_4 ( ) ) ) ) ; }\n", "fixed": "private int METHOD_1 ( ) { if ( ( ( ( getView ( ) ) == null ) || ( ( VAR_1 . METHOD_2 ( ) ) <= 0 ) ) || ( ( getView ( ) . METHOD_4 ( ) ) == 0 ) ) { return VAR_2 ; } return TYPE_1 . METHOD_3 ( VAR_3 , ( ( VAR_1 . METHOD_2 ( ) ) / ( getView ( ) . METHOD_4 ( ) ) ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { TYPE_1 VAR_2 ; TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( ) ; try ( TYPE_3 VAR_5 = new TYPE_3 ( VAR_1 ) ) { VAR_2 = VAR_3 . METHOD_3 ( VAR_5 , VAR_6 class ) ; VAR_5 . METHOD_4 ( ) ; } catch ( java.lang.Exception VAR_7 ) { VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_5 ( new TYPE_4 ( new java.lang.String ( VAR_1 ) ) , false , null , false ) ; } VAR_4 . METHOD_6 ( VAR_3 ) ; return VAR_2 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { TYPE_1 VAR_2 ; TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( ) ; try ( TYPE_3 VAR_5 = new TYPE_3 ( VAR_1 ) ) { VAR_2 = VAR_3 . METHOD_3 ( VAR_5 , VAR_6 class ) ; VAR_5 . METHOD_4 ( ) ; } catch ( java.lang.Exception VAR_7 ) { VAR_2 = new TYPE_1 ( ) ; } VAR_4 . METHOD_6 ( VAR_3 ) ; return VAR_2 ; }\n"}
{"fixCommitSHA1": "9a1ba2926a59ce9fd80e6355fabdeccdec6ad19f", "projectName": "apache.hbase", "bugType": "Same Function More Args", "problem": "       setupServer();\n       tserver.serve();\n     } catch (Exception e) {\n      LOG.fatal(\"Cannot run ThriftServer\");\n       System.exit(-1);\n     }", "fixed": "       setupServer();\n       tserver.serve();\n     } catch (Exception e) {\n      LOG.fatal(\"Cannot run ThriftServer\", e);\n       System.exit(-1);\n     }", "sourceBeforeFix": "LOG.fatal(\"Cannot run ThriftServer\")", "sourceAfterFix": "LOG.fatal(\"Cannot run ThriftServer\",e)"}
{"problem": "protected java.lang.Object METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , byte VAR_3 , byte VAR_4 , byte VAR_5 , byte VAR_6 , byte VAR_7 , byte VAR_8 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , false ) ; }\n", "fixed": "protected java.lang.Object METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , boolean VAR_3 , boolean VAR_4 , boolean VAR_5 , boolean VAR_6 , boolean VAR_7 , boolean VAR_8 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , false ) ; }\n"}
{"problem": "public void start ( ) { if ( VAR_1 . METHOD_1 ( false , true ) ) { METHOD_2 ( VAR_2 , null ) ; METHOD_3 ( ) ; METHOD_2 ( VAR_3 , null ) ; } else { VAR_4 . error ( ( STRING_1 + ( this . getClass ( ) . METHOD_4 ( ) ) ) ) ; } }\n", "fixed": "public void start ( ) { if ( VAR_1 . METHOD_1 ( false , true ) ) { METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_2 ( VAR_3 ) ; } else { VAR_4 . error ( ( STRING_1 + ( this . getClass ( ) . METHOD_4 ( ) ) ) ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void addBlock(int fileId, int blockIndex, long blockLength) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void addBlock(int fileId, int blockIndex, long blockLength) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"problem": "private void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { TYPE_1 . METHOD_3 ( this , true ) ; TYPE_2 VAR_1 = METHOD_4 ( ) . METHOD_5 ( ) ; if ( VAR_1 != null ) { VAR_2 = VAR_1 . METHOD_6 ( ) . length ; } METHOD_4 ( ) . METHOD_7 ( ) ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { METHOD_3 ( true ) ; TYPE_2 VAR_1 = METHOD_4 ( ) . METHOD_5 ( ) ; if ( VAR_1 != null ) { VAR_2 = VAR_1 . METHOD_6 ( ) . length ; } METHOD_4 ( ) . METHOD_7 ( ) ; } }\n"}
{"problem": "private static java.util.LinkedList < TYPE_1 > METHOD_1 ( TYPE_2 end ) { java.util.LinkedList < TYPE_1 > path = new java.util.LinkedList < TYPE_1 > ( ) ; while ( ( VAR_1 ) != null ) { path . METHOD_2 ( VAR_2 ) ; end = VAR_1 ; } return path ; }\n", "fixed": "private static java.util.LinkedList < TYPE_1 > METHOD_1 ( TYPE_2 end ) { java.util.LinkedList < TYPE_1 > path = new java.util.LinkedList < TYPE_1 > ( ) ; do { path . METHOD_2 ( VAR_2 ) ; end = VAR_1 ; } while ( ( VAR_1 ) != null ) ; return path ; }\n"}
{"problem": "public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = VAR_4 . METHOD_2 ( ) ; for ( TYPE_4 VAR_5 : VAR_1 . METHOD_3 ( ) ) { TYPE_5 element = ( ( TYPE_5 ) ( METHOD_4 ( VAR_5 ) ) ) ; VAR_2 . METHOD_5 ( new TYPE_6 ( element . getName ( ) , element . METHOD_6 ( ) ) ) ; VAR_3 . METHOD_7 ( ) . add ( element ) ; } VAR_3 . METHOD_8 ( VAR_2 ) ; return VAR_3 ; }\n", "fixed": "public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = VAR_4 . METHOD_2 ( ) ; for ( TYPE_4 VAR_5 : VAR_1 . METHOD_3 ( ) ) { TYPE_5 element = ( ( TYPE_5 ) ( METHOD_4 ( VAR_5 ) ) ) ; VAR_2 . METHOD_5 ( new TYPE_6 ( element . getName ( ) , element . getType ( ) . METHOD_6 ( ) ) ) ; VAR_3 . METHOD_7 ( ) . add ( element ) ; } VAR_3 . METHOD_8 ( VAR_2 ) ; return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( ) { final int VAR_1 = INT_1 ; final int VAR_2 = INT_2 ; final int VAR_3 = 1 ; METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; int [ ] [ ] VAR_4 = VAR_5 ; TYPE_1 . assertEquals ( VAR_4 [ 0 ] [ 0 ] , VAR_1 ) ; TYPE_1 . assertEquals ( VAR_4 [ 1 ] [ 0 ] , VAR_2 ) ; TYPE_1 . assertEquals ( VAR_4 [ INT_3 ] [ 0 ] , VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( ) { final int VAR_1 = INT_1 ; final int VAR_2 = 1 ; final int VAR_3 = INT_2 ; METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; int [ ] [ ] VAR_4 = VAR_5 ; TYPE_1 . assertEquals ( VAR_4 [ 0 ] [ 0 ] , VAR_1 ) ; TYPE_1 . assertEquals ( VAR_4 [ 1 ] [ 0 ] , VAR_3 ) ; TYPE_1 . assertEquals ( VAR_4 [ INT_3 ] [ 0 ] , VAR_2 ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item ) { int id = item . METHOD_2 ( ) ; if ( id == ( VAR_1 ) ) { METHOD_3 ( new android.content.Intent ( this , VAR_2 class ) ) ; return true ; } else if ( id == ( VAR_3 ) ) { METHOD_4 ( ) ; return true ; } return super . METHOD_1 ( item ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 item ) { int id = item . METHOD_2 ( ) ; if ( id == ( VAR_1 ) ) { METHOD_3 ( new android.content.Intent ( this , VAR_2 class ) ) ; return true ; } return super . METHOD_1 ( item ) ; }\n"}
{"problem": "protected void METHOD_1 ( ) { switch ( state ) { case VAR_1 : if ( ( VAR_2 . METHOD_2 ( ) ) >= ( VAR_3 ) ) VAR_4 . set ( 0 ) ; break ; case VAR_5 : if ( ( VAR_2 . METHOD_2 ( ) ) >= ( VAR_3 ) ) { METHOD_3 ( ) ; } break ; } }\n", "fixed": "protected void METHOD_1 ( ) { switch ( state ) { case VAR_1 : if ( ( VAR_2 . METHOD_2 ( ) ) >= ( VAR_3 ) ) { VAR_4 . set ( 0 ) ; VAR_2 . set ( 0 ) ; } break ; case VAR_5 : if ( ( VAR_2 . METHOD_2 ( ) ) >= ( VAR_3 ) ) { METHOD_3 ( ) ; } break ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( int a ) { a = java.lang.Math.abs ( a ) ; if ( a == 0 ) { return new TYPE_1 ( 0 ) ; } TYPE_1 result = new TYPE_1 ( this ) ; while ( a > 1 ) { result = result . METHOD_2 ( result ) ; a -- ; } return result ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int a ) { a = java.lang.Math.abs ( a ) ; if ( a == 0 ) { return new TYPE_1 ( 0 ) ; } TYPE_1 result = new TYPE_1 ( this ) ; while ( a > 1 ) { result = result . METHOD_2 ( this ) ; a -- ; } return result ; }\n"}
{"problem": "public void METHOD_1 ( ) { while ( VAR_1 . METHOD_2 ( ) ) { METHOD_3 ( ) ; try { java.lang.Thread . METHOD_4 ( INT_1 ) ; } catch ( TYPE_1 VAR_2 ) { } } VAR_3 . remove ( VAR_4 ) ; VAR_5 = VAR_6 ; java.lang.System.out.println ( STRING_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { while ( VAR_1 . METHOD_2 ( ) ) { METHOD_3 ( ) ; try { java.lang.Thread . METHOD_4 ( INT_1 ) ; } catch ( TYPE_1 VAR_2 ) { } } VAR_3 . remove ( VAR_4 ) ; VAR_5 = VAR_6 ; java.lang.System.out.println ( STRING_1 ) ; VAR_4 = null ; }\n"}
{"project": "Closure", "bugId": 65, "problem": " static String strEscape(String s, char quote,\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n        case '\\0': sb.append(\"\\\\0\"); break;\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;", "fixed": " static String strEscape(String s, char quote,\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n        case '\\0': sb.append(\"\\\\000\"); break;\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;", "observations": "", "repairActions": ["mcParValChange"], "repairPatterns": ["constChange", "singleLine"]}
{"problem": "public static void METHOD_1 ( java.lang.String message , double VAR_1 , double VAR_2 , double VAR_3 ) { TYPE_1 . METHOD_2 ( ) ; java.lang.System.out.println ( ( ( ( ( ( ( ( STRING_1 + message ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) + STRING_4 ) + VAR_3 ) ) ; double VAR_4 = VAR_1 - VAR_2 ; TYPE_1 . METHOD_3 ( ( VAR_1 < ( VAR_2 - ( java.lang.Math.abs ( VAR_4 ) ) ) ) ) ; }\n", "fixed": "public static void METHOD_1 ( java.lang.String message , float VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 . METHOD_2 ( ) ; java.lang.System.out.println ( ( ( ( ( ( ( ( STRING_1 + message ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) + STRING_4 ) + VAR_3 ) ) ; TYPE_1 . METHOD_3 ( ( VAR_1 < ( VAR_2 - ( java.lang.Math.abs ( VAR_3 ) ) ) ) ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"problem": "private int METHOD_1 ( int min , int VAR_1 , int VAR_2 ) { int VAR_3 = ( VAR_1 - min ) + 1 ; int VAR_4 = ( ( int ) ( ( java.lang.Math.random ( ) ) * VAR_3 ) ) + min ; if ( VAR_4 != VAR_2 ) return VAR_4 ; else { while ( VAR_4 == VAR_2 ) { VAR_4 = ( ( int ) ( ( java.lang.Math.random ( ) ) * VAR_3 ) ) ; } return VAR_4 ; } }\n", "fixed": "private int METHOD_1 ( int min , int VAR_1 , int VAR_2 ) { int VAR_3 = ( VAR_1 - min ) + 1 ; int VAR_4 = ( ( int ) ( ( java.lang.Math.random ( ) ) * VAR_3 ) ) ; if ( VAR_4 != VAR_2 ) return VAR_4 ; else { while ( VAR_4 == VAR_2 ) { VAR_4 = ( ( int ) ( ( java.lang.Math.random ( ) ) * VAR_3 ) ) ; } return VAR_4 ; } }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = METHOD_3 ( ) ; if ( ( null == VAR_2 ) || ( null == VAR_1 ) ) { return ; } TYPE_3 VAR_3 = VAR_4 ; VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ; METHOD_5 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = METHOD_3 ( ) ; if ( ( null == VAR_2 ) || ( null == VAR_1 ) ) { return ; } VAR_1 . METHOD_4 ( VAR_2 , null ) ; METHOD_5 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . put ( \"type\" , STRING_1 ) ; VAR_3 . put ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ; out . METHOD_3 ( VAR_3 ) ; VAR_4 . get ( VAR_5 ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . put ( \"type\" , STRING_1 ) ; VAR_3 . put ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ; out . METHOD_3 ( VAR_3 ) ; VAR_4 . get ( VAR_5 ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"problem": "private boolean METHOD_1 ( TYPE_1 msg ) { int count = 0 ; java.util.Set < TYPE_2 > VAR_1 = VAR_2 . get ( msg . METHOD_2 ( ) . METHOD_3 ( ) ) ; for ( TYPE_2 obj : VAR_1 ) { if ( obj . METHOD_4 ( ) ) { count ++ ; } } if ( count < ( VAR_3 ) ) { return true ; } else { return false ; } }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 msg ) { int count = 0 ; java.util.Set < TYPE_2 > VAR_1 = VAR_2 . get ( msg . METHOD_2 ( ) . METHOD_3 ( ) ) ; for ( TYPE_2 obj : VAR_1 ) { if ( obj . METHOD_4 ( ) ) { count ++ ; } } if ( count < ( VAR_3 ) ) { return true ; } else { if ( msg . METHOD_2 ( ) . METHOD_4 ( ) ) return false ; else { return true ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( int height ) { super . METHOD_1 ( height ) ; VAR_1 = ( ( int ) ( TYPE_1 . METHOD_2 ( ( ( VAR_2 ) * ( VAR_3 ) ) ) ) ) ; VAR_4 = ( ( int ) ( TYPE_1 . METHOD_2 ( ( ( VAR_2 ) * ( VAR_5 ) ) ) ) ) ; }\n", "fixed": "public void METHOD_1 ( int height ) { super . METHOD_1 ( height ) ; VAR_1 = ( ( int ) ( ( VAR_2 ) * ( VAR_3 ) ) ) ; VAR_4 = ( ( int ) ( ( VAR_2 ) * ( VAR_5 ) ) ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = new java.util.ArrayList < TYPE_2 > ( ) ; VAR_4 = null ; VAR_5 = false ; VAR_6 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_7 ) ) ) ; TYPE_4 VAR_8 = TYPE_4 . METHOD_4 ( METHOD_5 ( ) , STRING_1 ) ; VAR_6 . METHOD_6 ( VAR_8 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = new java.util.ArrayList < TYPE_2 > ( ) ; VAR_4 = null ; VAR_6 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_7 ) ) ) ; TYPE_4 VAR_8 = TYPE_4 . METHOD_4 ( METHOD_5 ( ) , STRING_1 ) ; VAR_6 . METHOD_6 ( VAR_8 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 < ? > METHOD_1 ( java.lang.String VAR_1 , java.lang.String token , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; java.util.Map < java.lang.String , java.lang.String > VAR_5 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; TYPE_3 VAR_6 = new TYPE_3 ( STRING_1 ) ; VAR_5 . put ( STRING_2 , VAR_6 . format ( VAR_3 . METHOD_2 ( ) ) ) ; if ( VAR_3 != null ) { return TYPE_1 . METHOD_3 ( VAR_5 ) ; } return TYPE_1 . METHOD_3 ( VAR_7 ) ; }\n", "fixed": "public TYPE_1 < ? > METHOD_1 ( java.lang.String VAR_1 , java.lang.String token , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; java.util.Map < java.lang.String , java.lang.String > VAR_5 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; TYPE_3 VAR_6 = new TYPE_3 ( STRING_1 ) ; if ( VAR_3 != null ) { VAR_5 . put ( STRING_2 , VAR_6 . format ( VAR_3 . METHOD_2 ( ) ) ) ; return TYPE_1 . METHOD_3 ( VAR_5 ) ; } return TYPE_1 . METHOD_3 ( VAR_7 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { try { try { java.lang.String result = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , TYPE_2 . toString ( ) , VAR_2 ) ; TYPE_3 . METHOD_4 ( ( ( STRING_1 + result ) + STRING_2 ) ) ; } catch ( TYPE_4 VAR_4 ) { } } catch ( java.lang.Exception VAR_4 ) { TYPE_3 . METHOD_4 ( ( STRING_3 + VAR_4 ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { try { try { java.lang.String result = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , TYPE_2 . toString ( ) , VAR_2 ) ; TYPE_3 . METHOD_4 ( ( ( STRING_1 + result ) + STRING_2 ) ) ; } catch ( TYPE_4 VAR_4 ) { } } catch ( java.lang.Exception VAR_4 ) { TYPE_3 . METHOD_4 ( STRING_3 , VAR_4 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( ) { VAR_1 = java.util.Calendar.getInstance ( ) ; if ( METHOD_2 ( VAR_2 ) ) { METHOD_3 ( VAR_2 , new TYPE_1 ( VAR_1 ) ) ; } if ( ( VAR_3 . METHOD_4 ( ) ) == ( VAR_4 ) ) { METHOD_5 ( VAR_5 ) ; if ( METHOD_6 ( ) . METHOD_7 ( ) ) { METHOD_8 ( ) ; } } }\n", "fixed": "protected void METHOD_1 ( ) { VAR_1 = java.util.Calendar.getInstance ( ) ; if ( METHOD_2 ( VAR_2 ) ) { METHOD_3 ( VAR_2 , new TYPE_1 ( VAR_1 ) ) ; } if ( ( VAR_3 . METHOD_4 ( ) ) == ( VAR_4 ) ) { METHOD_5 ( VAR_5 ) ; } }\n"}
{"fixCommitSHA1": "4281cc1c5d3aa51b56db9d9e251c761c52a855e3", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * before growing the backing table. */\r\n \tpublic IntMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "fixed": " \t * before growing the backing table. */\r\n \tpublic IntMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(LLOAD, context.var(\"long\"));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n         _seperator(mw, context);", "fixed": "         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n         _seperator(mw, context);", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"problem": "public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_1 VAR_1 = null ; if ( ( VAR_2 . METHOD_2 ( ) ) < INT_1 ) VAR_1 = VAR_3 . METHOD_3 ( ) ; else VAR_1 = VAR_3 . METHOD_4 ( ) ; VAR_4 = VAR_1 ; VAR_5 . format ( STRING_1 , VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ; return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_1 VAR_1 = null ; if ( ( VAR_2 . METHOD_2 ( ) ) < INT_1 ) VAR_1 = VAR_3 . METHOD_3 ( ) ; else VAR_1 = VAR_3 . METHOD_4 ( ) ; VAR_4 = VAR_1 ; VAR_5 . format ( STRING_1 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_5 ( ) ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String path , java.lang.String key , java.lang.String value ) throws java.io.IOException { TYPE_3 VAR_1 = new TYPE_3 ( path ) ; VAR_1 . METHOD_2 ( METHOD_3 ( VAR_2 ) , null ) ; VAR_1 . METHOD_2 ( VAR_3 , key ) ; VAR_1 . METHOD_2 ( VAR_4 , value ) ; return this . VAR_5 . METHOD_4 ( VAR_1 . build ( ) , null ) ; }\n", "fixed": "public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String path , java.lang.String key , java.lang.String value ) throws java.io.IOException { TYPE_3 VAR_1 = new TYPE_3 ( path ) ; VAR_1 . METHOD_2 ( METHOD_3 ( VAR_2 ) ) ; VAR_1 . METHOD_2 ( VAR_3 , key ) ; VAR_1 . METHOD_2 ( VAR_4 , value ) ; return this . VAR_5 . METHOD_4 ( VAR_1 . build ( ) , null ) ; }\n"}
{"problem": "private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( STRING_1 ) ; for ( java.lang.String value : VAR_2 . get ( VAR_1 ) ) { VAR_3 . append ( value ) . append ( STRING_2 ) ; } VAR_3 = new java.lang.StringBuilder ( ( ( VAR_3 . substring ( 0 , ( ( VAR_3 . length ( ) ) - 1 ) ) ) + STRING_3 ) ) ; return VAR_3 . toString ( ) ; } else { return STRING_4 ; } }\n", "fixed": "private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( STRING_1 ) ; for ( java.lang.String value : VAR_2 . get ( VAR_1 ) ) { VAR_3 . append ( value ) . append ( STRING_2 ) ; } VAR_3 = new java.lang.StringBuilder ( ( ( VAR_3 . substring ( 0 , ( ( VAR_3 . length ( ) ) - 1 ) ) ) + STRING_3 ) ) ; return VAR_3 . toString ( ) ; } return STRING_4 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_3 < TYPE_2 > response ) { TYPE_4 . METHOD_2 ( VAR_2 , STRING_1 ) ; if ( ! ( response . METHOD_3 ( ) ) ) { TYPE_4 . METHOD_2 ( VAR_2 , STRING_2 ) ; return ; } TYPE_2 data = response . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( data . METHOD_6 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_3 < TYPE_2 > response ) { TYPE_4 . METHOD_2 ( VAR_2 , STRING_1 ) ; if ( ! ( response . METHOD_3 ( ) ) ) { TYPE_4 . METHOD_2 ( VAR_2 , STRING_2 ) ; return ; } TYPE_2 data = response . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( ( ( TYPE_2 [ ] ) ( data . getData ( ) ) ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ( ( int ) ( ( VAR_1 . x ) + ( INT_1 * ( TYPE_2 . METHOD_2 ( VAR_2 ) ) ) ) ) , ( ( int ) ( ( VAR_1 . y ) - ( INT_1 * ( TYPE_2 . METHOD_3 ( VAR_2 ) ) ) ) ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ( ( int ) ( ( VAR_1 . x ) + ( INT_1 * ( TYPE_2 . METHOD_2 ( VAR_2 ) ) ) ) ) , ( ( int ) ( ( VAR_1 . y ) + ( INT_1 * ( TYPE_2 . METHOD_3 ( VAR_2 ) ) ) ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { int VAR_1 = 0 ; double VAR_2 = FLOAT_1 / ( METHOD_2 ( VAR_3 ) ) ; double result = VAR_4 . METHOD_3 ( VAR_3 , VAR_1 ) ; assertEquals ( VAR_2 , result , 0.0 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_2 *= FLOAT_2 ; result = VAR_4 . METHOD_3 ( VAR_3 , VAR_1 ) ; assertEquals ( VAR_2 , result , 0.0 ) ; }\n", "fixed": "public void METHOD_1 ( ) { int VAR_1 = 0 ; double VAR_2 = FLOAT_1 / ( METHOD_2 ( VAR_3 ) ) ; double result = VAR_4 . METHOD_3 ( VAR_3 ) ; assertEquals ( VAR_2 , result , 0.0 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_2 *= FLOAT_2 ; result = VAR_4 . METHOD_3 ( VAR_3 ) ; assertEquals ( VAR_2 , result , 0.0 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( VAR_1 >= 1.0F ) { float VAR_2 = VAR_3 . METHOD_2 ( false ) ; float VAR_4 = TYPE_1 . METHOD_3 ( FLOAT_1 , ( ( float ) ( ( ( TYPE_1 . METHOD_4 ( VAR_1 ) ) / ( TYPE_1 . METHOD_4 ( FLOAT_2 ) ) ) + VAR_2 ) ) ) ; VAR_3 . METHOD_5 ( VAR_4 ) ; } VAR_3 . METHOD_6 ( ) . METHOD_7 ( ) ; VAR_5 = false ; }\n", "fixed": "public void METHOD_1 ( ) { if ( VAR_1 > 0.0F ) { float VAR_2 = VAR_3 . METHOD_2 ( false ) ; float VAR_4 = TYPE_1 . METHOD_3 ( FLOAT_1 , ( ( float ) ( ( ( TYPE_1 . METHOD_4 ( VAR_1 ) ) / ( TYPE_1 . METHOD_4 ( FLOAT_2 ) ) ) + VAR_2 ) ) ) ; VAR_3 . METHOD_5 ( VAR_4 ) ; } VAR_3 . METHOD_6 ( ) . METHOD_7 ( ) ; VAR_5 = false ; }\n"}
{"fixCommitSHA1": "2b27f6006b63686c9e8f1ff03b411ab2a6d1c791", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         template.sendBody(serverUri + \"?one=einz&two=twei\", \"Hello World\");\n        assertMockEndpointsSatisifed();\n     }\n     public void testHttpGetWithParamsViaHeader() throws Exception {", "fixed": "         template.sendBody(serverUri + \"?one=einz&two=twei\", \"Hello World\");\n        assertMockEndpointsSatisfied();\n     }\n     public void testHttpGetWithParamsViaHeader() throws Exception {", "sourceBeforeFix": "assertMockEndpointsSatisifed()", "sourceAfterFix": "assertMockEndpointsSatisfied()"}
{"problem": "public int METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( VAR_1 ) ; int VAR_3 = METHOD_3 ( VAR_1 . size ( ) ) ; if ( VAR_3 > 0 ) { METHOD_4 ( VAR_1 . get ( VAR_3 ) , VAR_2 ) ; return 1 ; } else { return - 1 ; } }\n", "fixed": "public int METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { if ( ! ( METHOD_2 ( VAR_1 ) ) ) return - 1 ; int VAR_3 = METHOD_3 ( VAR_1 . size ( ) ) ; if ( VAR_3 > 0 ) { METHOD_4 ( VAR_1 . get ( VAR_3 ) , VAR_2 ) ; return 1 ; } else { return - 1 ; } }\n"}
{"problem": "public int [ ] METHOD_1 ( TYPE_1 [ ] VAR_1 , boolean VAR_2 ) { TYPE_2 [ ] VAR_3 = new TYPE_2 [ ( VAR_1 . length ) + 1 ] ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { VAR_3 [ i ] = new TYPE_2 ( null ) ; VAR_3 [ i ] . METHOD_2 ( VAR_1 [ i ] ) ; } return METHOD_1 ( VAR_3 , VAR_2 ) ; }\n", "fixed": "public int [ ] METHOD_1 ( TYPE_1 [ ] VAR_1 , boolean VAR_2 ) { TYPE_2 [ ] VAR_3 = new TYPE_2 [ ( VAR_1 . length ) + 1 ] ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { VAR_3 [ i ] . METHOD_2 ( VAR_1 [ i ] ) ; } return METHOD_1 ( VAR_3 , VAR_2 ) ; }\n"}
{"problem": "public java.lang.String toString ( ) { return ( ( ( ( ( ( STRING_1 + ( TYPE_1 . METHOD_1 ( new java.awt.Color ( METHOD_2 ( 0 ) ) ) ) ) + STRING_2 ) + ( TYPE_1 . METHOD_1 ( new java.awt.Color ( METHOD_2 ( INT_1 ) ) ) ) ) + STRING_3 ) + ( java.lang.String.format ( STRING_4 , min ) ) ) + STRING_5 ) + ( java.lang.String.format ( STRING_6 , VAR_1 ) ) ; }\n", "fixed": "public java.lang.String toString ( ) { return ( ( ( ( ( ( STRING_1 + ( TYPE_1 . METHOD_1 ( new java.awt.Color ( METHOD_2 ( 0 ) ) ) ) ) + STRING_2 ) + ( TYPE_1 . METHOD_1 ( new java.awt.Color ( METHOD_2 ( INT_1 ) ) ) ) ) + STRING_3 ) + ( java.lang.String.format ( STRING_4 , min ) ) ) + STRING_5 ) + ( java.lang.String.format ( STRING_4 , VAR_1 ) ) ; }\n"}
{"problem": "private void METHOD_1 ( int VAR_1 , int VAR_2 ) { int VAR_3 = 0 ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { VAR_4 [ VAR_3 ] += VAR_5 [ VAR_3 ] ; double VAR_6 = METHOD_2 ( VAR_2 ) ; if ( VAR_6 > ( VAR_7 ) ) { VAR_7 = VAR_6 ; } else { VAR_4 [ VAR_3 ] -= VAR_5 [ VAR_3 ] ; } VAR_3 = ( VAR_3 + 1 ) % ( ( VAR_8 ) - 1 ) ; } }\n", "fixed": "private void METHOD_1 ( int VAR_1 , int VAR_2 ) { int VAR_3 = 0 ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { VAR_4 [ VAR_3 ] += VAR_5 [ VAR_3 ] ; double VAR_6 = METHOD_2 ( VAR_2 ) ; if ( VAR_6 > ( VAR_7 ) ) { VAR_7 = VAR_6 ; } else { VAR_4 [ VAR_3 ] -= VAR_5 [ VAR_3 ] ; } VAR_3 = ( VAR_3 + 1 ) % ( VAR_8 ) ; } }\n"}
{"problem": "private void METHOD_1 ( java.util.List < ? > VAR_1 ) { if ( VAR_1 == null ) { VAR_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_3 ) ; } else { METHOD_5 ( VAR_1 ) ; boolean VAR_4 = METHOD_6 ( VAR_1 . size ( ) ) ; VAR_2 . METHOD_7 ( ( ! VAR_4 ) ) ; VAR_2 . METHOD_8 ( VAR_4 ) ; VAR_2 . METHOD_2 ( ) ; } }\n", "fixed": "private void METHOD_1 ( java.util.List < ? > VAR_1 ) { if ( VAR_1 == null ) { VAR_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_3 ) ; } else { METHOD_5 ( VAR_1 ) ; VAR_2 . METHOD_8 ( METHOD_6 ( VAR_1 . size ( ) ) ) ; VAR_2 . METHOD_2 ( ) ; } }\n"}
{"problem": "public int METHOD_1 ( java.lang.String VAR_1 ) { if ( ( METHOD_2 ( ) ) != 0 ) { java.lang.System.err.println ( STRING_1 ) ; return - 1 ; } else { try { VAR_2 = VAR_3 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( ) ; METHOD_6 ( ) ; } catch ( java.lang.Exception VAR_4 ) { METHOD_6 ( ) ; return - 1 ; } } return 0 ; }\n", "fixed": "public int METHOD_1 ( java.lang.String VAR_1 ) { if ( ( METHOD_2 ( ) ) != 0 ) { java.lang.System.err.println ( STRING_1 ) ; return - 1 ; } else { try { VAR_2 = VAR_3 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( ) ; VAR_3 . commit ( ) ; METHOD_6 ( ) ; } catch ( java.lang.Exception VAR_4 ) { METHOD_6 ( ) ; return - 1 ; } } return 0 ; }\n"}
{"problem": "public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 VAR_2 , java.lang.String VAR_3 ) { long VAR_4 = INT_1 ; TYPE_5 VAR_5 = TYPE_5 . METHOD_2 ( VAR_3 ) ; long id = VAR_5 . METHOD_3 ( STRING_1 ) ; java.lang.String result = TYPE_6 . METHOD_4 ( id ) ; TYPE_5 VAR_6 = TYPE_5 . METHOD_2 ( result ) ; TYPE_2 VAR_7 = VAR_6 . METHOD_5 ( STRING_2 ) ; return new TYPE_1 ( VAR_7 ) ; }\n", "fixed": "public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 VAR_2 , java.lang.String VAR_3 ) { TYPE_5 VAR_5 = TYPE_5 . METHOD_2 ( VAR_3 ) ; long id = VAR_5 . METHOD_3 ( STRING_1 ) ; java.lang.String result = TYPE_6 . METHOD_4 ( id ) ; TYPE_5 VAR_6 = TYPE_5 . METHOD_2 ( result ) ; TYPE_2 VAR_7 = VAR_6 . METHOD_5 ( STRING_2 ) ; return new TYPE_1 ( VAR_7 ) ; }\n"}
{"fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "projectName": "google.guava", "bugType": "Change Caller in Function Call", "problem": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(littleEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "fixed": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}
{"problem": "private java.lang.String [ ] METHOD_1 ( java.lang.String VAR_1 , int count ) { java.lang.String [ ] result = new java.lang.String [ count ] ; for ( int i = 0 ; i < count ; i ++ ) { result [ i ] = VAR_1 + count ; } return result ; }\n", "fixed": "private java.lang.String [ ] METHOD_1 ( java.lang.String VAR_1 , int count ) { java.lang.String [ ] result = new java.lang.String [ count ] ; for ( int i = 0 ; i < count ; i ++ ) { result [ i ] = VAR_1 + ( i + 1 ) ; } return result ; }\n"}
{"problem": "protected void METHOD_1 ( java.lang.Void VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( context , VAR_4 ) ; VAR_5 . METHOD_3 ( new TYPE_2 ( context ) ) ; VAR_5 . METHOD_4 ( VAR_3 ) ; super . METHOD_1 ( VAR_1 ) ; }\n", "fixed": "protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( context , VAR_4 ) ; VAR_5 . METHOD_3 ( new TYPE_2 ( context ) ) ; VAR_5 . METHOD_4 ( VAR_3 ) ; }\n"}
{"problem": "public static java.util.Collection < TYPE_1 > METHOD_1 ( ) { VAR_1 = TYPE_2 . get ( ) . METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_3 ( VAR_3 class ) ; try { java.util.Collection < TYPE_1 > VAR_4 = ( ( java.util.Collection < TYPE_1 > ) ( VAR_2 . execute ( ) ) ) ; return VAR_4 ; } finally { VAR_2 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; } }\n", "fixed": "public static java.util.Collection < TYPE_1 > METHOD_1 ( ) { VAR_1 = TYPE_2 . get ( ) . METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_3 ( VAR_3 class ) ; try { java.util.Collection < TYPE_1 > VAR_4 = ( ( java.util.Collection < TYPE_1 > ) ( VAR_2 . execute ( ) ) ) ; VAR_4 . size ( ) ; return VAR_4 ; } finally { VAR_2 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; } }\n"}
{"problem": "protected void execute ( ) { int VAR_1 = VAR_2 . METHOD_1 ( ) ; int VAR_3 = VAR_2 . METHOD_2 ( ) ; if ( ( VAR_1 > ( VAR_4 ) ) || ( VAR_3 > ( VAR_4 ) ) ) { VAR_5 . METHOD_3 ( VAR_6 ) ; VAR_7 = true ; } }\n", "fixed": "protected void execute ( ) { int VAR_1 = java.lang.Math.abs ( VAR_2 . METHOD_1 ( ) ) ; int VAR_3 = java.lang.Math.abs ( VAR_2 . METHOD_2 ( ) ) ; if ( ( VAR_1 > ( VAR_4 ) ) || ( VAR_3 > ( VAR_4 ) ) ) { VAR_5 . METHOD_3 ( VAR_6 ) ; VAR_7 = true ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_1 position ) { if ( ( ( position . METHOD_2 ( ) ) > 0 ) && ( ( position . METHOD_3 ( ) ) > 0 ) ) { int VAR_1 = ( position . METHOD_2 ( ) ) - 1 ; int VAR_2 = ( position . METHOD_3 ( ) ) - INT_1 ; return new TYPE_1 ( VAR_1 , VAR_2 ) ; } else { return position ; } }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_1 position ) { if ( ( ( position . METHOD_2 ( ) ) > 0 ) && ( ( position . METHOD_3 ( ) ) > 0 ) ) { int VAR_1 = ( position . METHOD_2 ( ) ) - 1 ; int VAR_2 = ( position . METHOD_3 ( ) ) - INT_1 ; if ( ( VAR_1 < 0 ) || ( VAR_2 < 0 ) ) { return position ; } else { return new TYPE_1 ( VAR_1 , VAR_2 ) ; } } else { return position ; } }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 ; TYPE_2 . METHOD_2 ( STRING_1 , TYPE_1 . METHOD_3 ( ) ) ; TYPE_3 VAR_3 = METHOD_4 ( ) ; TYPE_4 VAR_4 = VAR_3 . METHOD_5 ( ) ; TYPE_5 VAR_5 = new TYPE_5 ( ) ; VAR_4 . replace ( VAR_6 , VAR_5 ) ; VAR_4 . commit ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) ) ; TYPE_3 VAR_3 = METHOD_4 ( ) ; TYPE_4 VAR_4 = VAR_3 . METHOD_5 ( ) ; TYPE_5 VAR_5 = new TYPE_5 ( ) ; VAR_4 . replace ( VAR_6 , VAR_5 ) ; VAR_4 . commit ( ) ; }\n"}
{"problem": "public static void METHOD_1 ( int i ) { if ( VAR_1 . get ( i ) . METHOD_2 ( ) ) { java.lang.System.out.println ( ( ( STRING_1 + ( VAR_1 . get ( i ) . name ) ) + STRING_2 ) ) ; VAR_1 . remove ( i ) ; ( VAR_2 ) -- ; } }\n", "fixed": "private static void METHOD_1 ( int i ) { if ( VAR_1 . get ( i ) . METHOD_2 ( ) ) { java.lang.System.out.println ( ( ( STRING_1 + ( VAR_1 . get ( i ) . name ) ) + STRING_2 ) ) ; VAR_1 . remove ( i ) ; ( VAR_2 ) -- ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { TYPE_1 response = METHOD_2 ( METHOD_3 ( ) ) . path ( VAR_3 ) . METHOD_4 ( VAR_4 , java.lang.String . METHOD_5 ( VAR_1 ) ) . METHOD_4 ( VAR_5 , java.lang.Integer . METHOD_5 ( VAR_2 ) ) . METHOD_6 ( ) . METHOD_7 ( VAR_6 ) . get ( ) ; return METHOD_8 ( TYPE_2 . METHOD_9 ( ) ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { METHOD_2 ( METHOD_3 ( ) ) . path ( VAR_3 ) . METHOD_4 ( VAR_4 , java.lang.String . METHOD_5 ( VAR_1 ) ) . METHOD_4 ( VAR_5 , java.lang.Integer . METHOD_5 ( VAR_2 ) ) . METHOD_6 ( ) . METHOD_7 ( VAR_6 ) . get ( ) ; return METHOD_8 ( TYPE_2 . METHOD_9 ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 ( ) { public void METHOD_3 ( ) { VAR_1 . METHOD_4 ( ) ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_4 ( ) ; java.util.List < TYPE_2 > VAR_3 = METHOD_5 ( ) ; TYPE_3 . assertNotNull ( VAR_3 ) ; TYPE_3 . assertThat ( VAR_3 . size ( ) , TYPE_4 . METHOD_6 ( 1 ) ) ; TYPE_3 . assertThat ( VAR_3 . get ( 0 ) . getId ( ) , TYPE_4 . METHOD_6 ( STRING_1 ) ) ; } } ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . METHOD_4 ( ) ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_4 ( ) ; java.util.List < TYPE_2 > VAR_3 = METHOD_5 ( ) ; TYPE_3 . assertNotNull ( VAR_3 ) ; TYPE_3 . assertThat ( VAR_3 . size ( ) , TYPE_4 . METHOD_6 ( 1 ) ) ; TYPE_3 . assertThat ( VAR_3 . get ( 0 ) . getId ( ) , TYPE_4 . METHOD_6 ( STRING_1 ) ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) throws java.lang.ClassNotFoundException { TYPE_3 node = VAR_1 . METHOD_2 ( VAR_2 ) . item ( 0 ) ; java.lang.String pattern = STRING_1 ; if ( node != null ) { pattern = this . METHOD_1 ( ( ( TYPE_2 ) ( node ) ) ) ; } VAR_3 . METHOD_3 ( ( STRING_2 + pattern ) ) ; java.lang.System.out.println ( pattern ) ; return new TYPE_1 ( pattern ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) throws java.lang.ClassNotFoundException { TYPE_3 node = VAR_1 . METHOD_2 ( VAR_2 ) . item ( 0 ) ; java.lang.String pattern = STRING_1 ; if ( node != null ) { pattern = this . METHOD_1 ( ( ( TYPE_2 ) ( node ) ) ) ; } VAR_3 . METHOD_3 ( ( STRING_2 + pattern ) ) ; return new TYPE_1 ( pattern ) ; }\n"}
{"fixCommitSHA1": "cb937d34c8bba4cac4cee727931dddc8371bd38f", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t}\r\n \t\tif (!outcomesConcept.getAnswers().isEmpty()) {\r\n \t\t\tfor (ConceptAnswer conceptAnswer : outcomesConcept.getAnswers()) {\r\n\t\t\t\tpossibleOutcomes.add(conceptAnswer.getConcept());\r\n \t\t\t}\r\n \t\t\treturn possibleOutcomes;\r\n \t\t}\r", "fixed": " \t\t}\r\n \t\tif (!outcomesConcept.getAnswers().isEmpty()) {\r\n \t\t\tfor (ConceptAnswer conceptAnswer : outcomesConcept.getAnswers()) {\r\n\t\t\t\tpossibleOutcomes.add(conceptAnswer.getAnswerConcept());\r\n \t\t\t}\r\n \t\t\treturn possibleOutcomes;\r\n \t\t}\r", "sourceBeforeFix": "conceptAnswer.getConcept()", "sourceAfterFix": "conceptAnswer.getAnswerConcept()"}
{"problem": "public synchronized void METHOD_1 ( TYPE_1 VAR_1 , java.util.Collection < java.lang.String > VAR_2 , int VAR_3 ) throws TYPE_2 { TYPE_3 VAR_4 = METHOD_2 ( ) ; TYPE_3 VAR_5 = TYPE_4 . METHOD_3 ( VAR_4 ) ; try { TYPE_5 VAR_6 = new TYPE_6 ( this . VAR_7 , VAR_1 , VAR_1 . METHOD_4 ( VAR_8 , VAR_5 ) , VAR_2 , VAR_3 ) ; VAR_6 . METHOD_5 ( ) ; this . VAR_9 . METHOD_6 ( VAR_6 . METHOD_7 ( ) ) ; } catch ( java.lang.Exception VAR_10 ) { throw new TYPE_7 ( VAR_10 ) ; } }\n", "fixed": "public synchronized void METHOD_1 ( TYPE_1 VAR_1 , java.util.Collection < java.lang.String > VAR_2 , int VAR_3 ) throws TYPE_2 { TYPE_3 VAR_4 = METHOD_2 ( ) ; TYPE_3 VAR_5 = TYPE_4 . METHOD_3 ( VAR_4 ) ; try { TYPE_5 VAR_6 = new TYPE_6 ( this . VAR_7 , VAR_1 , VAR_1 . METHOD_4 ( VAR_8 , VAR_5 ) , VAR_2 , VAR_3 ) ; VAR_6 . METHOD_5 ( ) ; } catch ( java.lang.Exception VAR_10 ) { throw new TYPE_7 ( VAR_10 ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String key , int value ) { boolean result = this . VAR_1 . METHOD_2 ( ) . METHOD_3 ( key , value . toString ( ) ) . commit ( ) ; if ( result == false ) { throw new TYPE_1 ( ( ( STRING_1 + key ) + STRING_2 ) ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String key , int value ) { boolean result = this . VAR_1 . METHOD_2 ( ) . METHOD_3 ( key , java.lang.Integer.toString ( value ) ) . commit ( ) ; if ( result == false ) { throw new TYPE_1 ( ( ( STRING_1 + key ) + STRING_2 ) ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 b , TYPE_3 TYPE_4 ) { if ( b == null ) { return this ; } boolean VAR_1 = TYPE_4 . METHOD_2 ( ) ; return this . METHOD_3 ( TYPE_4 . METHOD_4 ( b ) , VAR_1 ) . METHOD_5 ( TYPE_4 . getName ( ) , VAR_1 ) . METHOD_6 ( TYPE_4 . METHOD_7 ( ) , VAR_1 ) . METHOD_8 ( TYPE_4 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 b , TYPE_3 TYPE_4 ) { if ( b == null ) { return this ; } boolean VAR_1 = TYPE_4 . METHOD_2 ( ) ; return this . METHOD_3 ( TYPE_4 . METHOD_4 ( b ) , VAR_1 ) . METHOD_5 ( TYPE_4 . getName ( ) , VAR_1 ) . METHOD_6 ( TYPE_4 . METHOD_7 ( ) , VAR_1 ) . METHOD_8 ( b , TYPE_4 ) ; }\n"}
{"problem": "public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 ) ) + STRING_3 ) + STRING_4 ) + ( VAR_3 ) ) + STRING_4 ) + STRING_5 ) + ( VAR_4 ) ) + STRING_6 ) + ( VAR_5 ) ) + STRING_7 ) + ( VAR_6 ) ) + STRING_8 ; }\n", "fixed": "public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_1 + STRING_4 ) + ( VAR_1 ) ) + STRING_4 ) + STRING_2 ) + ( VAR_2 ) ) + STRING_3 ) + STRING_4 ) + ( VAR_3 ) ) + STRING_4 ) + STRING_5 ) + ( VAR_4 ) ) + STRING_6 ) + STRING_4 ) + ( VAR_5 ) ) + STRING_4 ) + STRING_7 ) + ( VAR_6 ) ) + STRING_8 ; }\n"}
{"problem": "private void METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_1 , TYPE_2 , TYPE_3 { java.lang.System.out.println ( STRING_1 ) ; if ( VAR_1 == null ) throw new TYPE_1 ( STRING_2 ) ; java.lang.String result = TYPE_4 . METHOD_2 ( VAR_1 ) ; java.lang.Thread . METHOD_3 ( INT_1 ) ; java.lang.System.out.println ( STRING_3 ) ; if ( ( result != null ) && ( ! ( VAR_1 . equals ( this . id ) ) ) ) throw new TYPE_1 ( STRING_4 ) ; return ; }\n", "fixed": "private boolean METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_1 , TYPE_3 { java.lang.System.out.println ( STRING_1 ) ; if ( VAR_1 == null ) return false ; boolean result = TYPE_4 . METHOD_2 ( VAR_1 ) ; java.lang.System.out.println ( STRING_3 ) ; if ( ( result == true ) && ( ! ( VAR_1 . equals ( this . id ) ) ) ) return false ; return true ; }\n"}
{"problem": "public void METHOD_1 ( ) { while ( true ) { try { TYPE_1 msg = VAR_1 . METHOD_2 ( ) ; if ( msg instanceof TYPE_2 ) { java.lang.System.out.println ( ( ( ( ( name ) + STRING_1 ) + ( ( ( TYPE_2 ) ( msg ) ) . getText ( ) ) ) + STRING_2 ) ) ; } else { java.lang.System.out.println ( ( STRING_3 + msg ) ) ; } } catch ( TYPE_3 VAR_2 ) { VAR_2 . METHOD_3 ( ) ; } } }\n", "fixed": "public void METHOD_2 ( ) { try { TYPE_1 msg = VAR_1 . METHOD_2 ( ) ; if ( msg instanceof TYPE_2 ) { java.lang.System.out.println ( ( ( ( ( name ) + STRING_1 ) + ( ( ( TYPE_2 ) ( msg ) ) . getText ( ) ) ) + STRING_2 ) ) ; } else { java.lang.System.out.println ( ( STRING_3 + msg ) ) ; } } catch ( TYPE_3 VAR_2 ) { VAR_2 . METHOD_3 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { super . METHOD_1 ( VAR_1 , VAR_2 , data ) ; if ( ( VAR_1 == ( VAR_3 ) ) || ( ( VAR_1 == ( VAR_4 ) ) && ( VAR_2 == ( VAR_5 ) ) ) ) { TYPE_1 VAR_6 = data . getData ( ) ; VAR_7 . METHOD_2 ( VAR_6 ) ; VAR_7 . METHOD_3 ( VAR_6 ) ; } }\n", "fixed": "public void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { super . METHOD_1 ( VAR_1 , VAR_2 , data ) ; if ( ( VAR_1 == ( VAR_3 ) ) || ( ( VAR_1 == ( VAR_4 ) ) && ( VAR_2 == ( VAR_5 ) ) ) ) { VAR_6 = data . getData ( ) ; VAR_7 . METHOD_2 ( VAR_6 ) ; } }\n"}
{"problem": "static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_5 class ) . METHOD_3 ( STRING_1 , VAR_1 , VAR_6 ) . METHOD_3 ( STRING_2 , VAR_2 ) . METHOD_4 ( ) ; VAR_7 = VAR_4 . METHOD_5 ( VAR_3 ) ; }\n", "fixed": "static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_5 class ) . METHOD_3 ( STRING_1 , VAR_1 , VAR_6 ) . METHOD_3 ( STRING_2 , VAR_2 ) . METHOD_4 ( ) ; if ( VAR_3 != null ) { VAR_7 = VAR_4 . METHOD_5 ( VAR_3 ) ; } else { VAR_7 = null ; } }\n"}
{"problem": "public java.lang.String toString ( ) { java.lang.String VAR_1 = ( STRING_1 + ( VAR_2 ) ) + STRING_2 ; if ( ( VAR_3 ) < 0 ) VAR_1 += STRING_3 ; VAR_1 += VAR_3 ; VAR_1 += STRING_2 ; if ( ( VAR_4 ) < 0 ) VAR_1 += STRING_3 ; VAR_1 += VAR_4 ; VAR_1 += STRING_2 ; VAR_1 += VAR_5 ; VAR_1 += STRING_2 ; VAR_1 += ( VAR_6 ) * INT_1 ; return TYPE_1 . add ( VAR_1 ) ; }\n", "fixed": "public java.lang.String toString ( ) { java.lang.String VAR_1 = ( STRING_1 + ( VAR_2 ) ) + STRING_2 ; if ( ( VAR_3 ) < 0 ) VAR_1 += STRING_3 ; VAR_1 += VAR_3 ; VAR_1 += STRING_2 ; if ( ( VAR_4 ) < 0 ) VAR_1 += STRING_3 ; VAR_1 += VAR_4 ; VAR_1 += STRING_2 ; VAR_1 += VAR_5 ; VAR_1 += STRING_2 ; VAR_1 += VAR_6 ; return TYPE_1 . add ( VAR_1 ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { TYPE_3 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 . getName ( ) ) ; java.util.Map < java.lang.String , java.lang.Object > VAR_5 = new java.util.HashMap < > ( ) ; VAR_5 . put ( STRING_1 , METHOD_3 ( VAR_3 , ( STRING_2 + VAR_2 ) , STRING_3 , VAR_6 ) ) ; return METHOD_4 ( VAR_2 , VAR_5 , VAR_3 , null ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { TYPE_3 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 . getName ( ) ) ; java.util.Map < java.lang.String , java.lang.Object > VAR_5 = new java.util.HashMap < > ( ) ; VAR_5 . put ( STRING_1 , METHOD_3 ( VAR_3 , VAR_2 , VAR_6 ) ) ; return METHOD_4 ( VAR_2 , VAR_5 , VAR_3 , null ) ; }\n"}
{"problem": "private void METHOD_1 ( int VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( java.lang.String node : VAR_3 . METHOD_2 ( ) ) { VAR_2 . add ( new TYPE_1 ( node , VAR_1 ) ) ; } TYPE_2 VAR_4 = new TYPE_2 ( VAR_2 ) ; VAR_4 . METHOD_1 ( VAR_1 ) ; }\n", "fixed": "private void METHOD_1 ( int VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( java.lang.String node : VAR_3 . METHOD_2 ( ) ) { VAR_2 . add ( new TYPE_1 ( node , VAR_1 ) ) ; } this . VAR_4 = new TYPE_2 ( VAR_2 ) ; VAR_4 . METHOD_1 ( VAR_1 ) ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "9a7cd4fedbaa2cf02c3cb37e2618ad72409e4745", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         context.stop();\n         List<MessagePayload> events = nagios.getMessagePayloadList();\n        assertEquals(10, events.size());\n     }\n     @Test", "fixed": "         context.stop();\n         List<MessagePayload> events = nagios.getMessagePayloadList();\n        assertEquals(12, events.size());\n     }\n     @Test", "sourceBeforeFix": "assertEquals(10,events.size())", "sourceAfterFix": "assertEquals(12,events.size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_3 . getSelection ( ) ; TYPE_2 . METHOD_2 ( VAR_4 , VAR_2 ) ; METHOD_3 ( ( ! ( VAR_2 ) ) ) ; TYPE_2 . METHOD_2 ( VAR_5 , VAR_2 ) ; TYPE_2 . METHOD_2 ( VAR_6 , VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_3 . getSelection ( ) ; TYPE_2 . METHOD_2 ( VAR_4 , VAR_2 ) ; METHOD_3 ( ( ! ( VAR_2 ) ) ) ; TYPE_2 . METHOD_2 ( VAR_5 , VAR_2 ) ; TYPE_2 . METHOD_2 ( VAR_6 , ( ( VAR_2 ) && ( VAR_5 . getSelection ( ) ) ) ) ; }\n"}
{"fixCommitSHA1": "9d46108b66684d82750a5ad01460ab5bc1c16720", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      *\n      * @param index the n'th received message\n      */\n    public void assertOnIndex(int index);\n }", "fixed": "      *\n      * @param index the n'th received message\n      */\n    void assertOnIndex(int index);\n }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"problem": "public static int METHOD_1 ( int number ) { int x = INT_1 * ( TYPE_1 . METHOD_2 ( INT_2 , INT_3 ) ) ; int n ; while ( true ) { n = ( x + ( number / x ) ) / INT_3 ; if ( n == x ) { break ; } if ( n > x ) { break ; } x = n ; } return x ; }\n", "fixed": "public static int METHOD_1 ( int number ) { int x = ( java.lang.Integer.toString ( number ) . length ( ) ) * ( TYPE_1 . METHOD_2 ( INT_2 , INT_3 ) ) ; int n ; while ( true ) { n = ( x + ( number / x ) ) / INT_3 ; if ( n == x ) { break ; } if ( n > x ) { break ; } x = n ; } return x ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_3 ; if ( ( ( VAR_4 ) != null ) && ( VAR_4 . isEmpty ( ) ) ) { VAR_5 = VAR_6 . METHOD_2 ( ) ; VAR_7 = VAR_6 . METHOD_3 ( ) ; } VAR_8 = false ; VAR_9 = true ; TYPE_2 VAR_10 = TYPE_3 . METHOD_4 ( context ) ; VAR_11 = VAR_12 ; VAR_13 = VAR_14 ; VAR_15 = VAR_16 ; return VAR_1 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_3 ; VAR_5 = VAR_6 . METHOD_2 ( ) ; VAR_7 = VAR_6 . METHOD_3 ( ) ; VAR_8 = false ; VAR_9 = true ; TYPE_2 VAR_10 = TYPE_3 . METHOD_4 ( context ) ; VAR_11 = VAR_12 ; VAR_13 = VAR_14 ; VAR_15 = VAR_16 ; return VAR_1 ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_2 out = VAR_3 . get ( VAR_1 ) ; if ( ! ( out . METHOD_2 ( VAR_2 ) ) ) { this . VAR_4 |= true ; VAR_3 . put ( VAR_1 , VAR_2 ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_2 out = VAR_3 . get ( VAR_1 ) ; if ( ! ( out . equals ( VAR_2 ) ) ) { this . VAR_4 |= true ; VAR_3 . put ( VAR_1 , VAR_2 ) ; } }\n"}
{"fixCommitSHA1": "f0cd1c2accadd71cdfb6300c34bc0587b16d4c69", "projectName": "wildfly.wildfly", "bugType": "Change Caller in Function Call", "problem": "             attr.addOperationParameterDescription(resources, \"infinispan.container\", op);\n         }\n        ALIAS.addOperationParameterDescription(resources, \"infinispan.container\", op).\n                 get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.STRING);\n         return op;\n     }", "fixed": "             attr.addOperationParameterDescription(resources, \"infinispan.container\", op);\n         }\n        ALIASES.addOperationParameterDescription(resources, \"infinispan.container\", op).\n                 get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.STRING);\n         return op;\n     }", "sourceBeforeFix": "ALIAS.addResourceAttributeDescription(resources,keyPrefix,container)", "sourceAfterFix": "ALIASES.addResourceAttributeDescription(resources,keyPrefix,container)"}
{"problem": "public static TYPE_1 getConfig ( TYPE_2 p ) { if ( VAR_1 . contains ( p ) ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( VAR_1 . get ( i ) . METHOD_1 ( ) . equals ( p ) ) { return VAR_1 . get ( i ) ; } } } return new TYPE_1 ( p ) ; }\n", "fixed": "public static TYPE_1 getConfig ( TYPE_2 p ) { if ( ( VAR_1 ) != null ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( VAR_1 . get ( i ) . METHOD_1 ( ) . equals ( p ) ) { return VAR_1 . get ( i ) ; } } } return new TYPE_1 ( p ) ; }\n"}
{"problem": "public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { VAR_2 . info ( STRING_1 ) ; try { if ( ( VAR_3 ) == true ) { VAR_4 = TYPE_2 . METHOD_2 ( VAR_5 ) ; } if ( ( VAR_3 ) == false ) { VAR_4 = TYPE_2 . METHOD_2 ( VAR_6 ) ; } } catch ( TYPE_3 VAR_7 ) { VAR_7 . METHOD_3 ( ) ; } try { VAR_4 . METHOD_4 ( VAR_1 , VAR_8 ) ; } catch ( java.io.IOException VAR_7 ) { VAR_7 . METHOD_3 ( ) ; } }\n", "fixed": "public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { VAR_2 . info ( STRING_1 ) ; try { if ( ( VAR_3 ) == true ) { VAR_4 = TYPE_2 . METHOD_2 ( VAR_5 ) ; } else if ( ( VAR_3 ) == false ) { VAR_4 = TYPE_2 . METHOD_2 ( VAR_6 ) ; } } catch ( TYPE_3 VAR_7 ) { VAR_7 . METHOD_3 ( ) ; } try { VAR_4 . METHOD_4 ( VAR_1 , VAR_8 ) ; } catch ( java.io.IOException VAR_7 ) { VAR_7 . METHOD_3 ( ) ; } }\n"}
{"problem": "public static void METHOD_1 ( final TYPE_1 VAR_1 ) { java.lang.String query = ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ) + ( VAR_7 ) ) + STRING_6 ) + ( VAR_8 ) ) + STRING_7 ) + STRING_8 ; VAR_1 . METHOD_2 ( query ) ; }\n", "fixed": "public static void METHOD_1 ( final TYPE_1 VAR_1 ) { java.lang.String query = ( ( ( ( ( ( ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_7 ) + STRING_8 ; VAR_1 . METHOD_2 ( query ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 != null ) && ( ( VAR_1 . toString ( ) . length ( ) ) > 0 ) ) { if ( ! ( VAR_1 . toString ( ) . equals ( VAR_2 ) ) ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; new TYPE_3 ( ) . execute ( VAR_1 . toString ( ) ) ; VAR_2 = VAR_1 . toString ( ) ; } } else { VAR_3 . METHOD_3 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 != null ) && ( ( VAR_1 . toString ( ) . length ( ) ) > 0 ) ) { if ( ! ( VAR_1 . toString ( ) . equals ( VAR_2 ) ) ) { new TYPE_3 ( ) . execute ( VAR_1 . toString ( ) ) ; VAR_2 = VAR_1 . toString ( ) ; } } else { VAR_3 . METHOD_3 ( ) ; } }\n"}
{"problem": "public java.util.List < java.lang.String > METHOD_1 ( ) { final TYPE_1 < java.lang.String > VAR_1 = new TYPE_1 < > ( ) ; VAR_2 . METHOD_2 ( new TYPE_2 < TYPE_3 > ( ) { public void METHOD_3 ( TYPE_3 VAR_3 ) { VAR_1 . add ( VAR_3 . getName ( ) ) ; } } ) ; return new java.util.ArrayList < > ( VAR_1 ) ; }\n", "fixed": "public java.util.List < java.lang.String > METHOD_1 ( ) { final java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_2 . METHOD_2 ( new TYPE_2 < TYPE_3 > ( ) { public void METHOD_3 ( TYPE_3 VAR_3 ) { VAR_1 . add ( VAR_3 . getName ( ) ) ; } } ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "    * \n    * @param schedulingInfo\n    */\n  protected void setSchedulingInfo(String schedulingInfo) {\n     super.setSchedulingInfo(schedulingInfo);\n   }", "fixed": "    * \n    * @param schedulingInfo\n    */\n  @InterfaceAudience.Private\n  public void setSchedulingInfo(String schedulingInfo) {\n     super.setSchedulingInfo(schedulingInfo);\n   }", "sourceBeforeFix": "4", "sourceAfterFix": "1"}
{"problem": "private static void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { } } ) ; } catch ( TYPE_3 VAR_1 ) { throw new TYPE_4 ( VAR_1 ) ; } catch ( TYPE_5 VAR_1 ) { throw new TYPE_4 ( VAR_1 ) ; } }\n", "fixed": "public static void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { } } ) ; } catch ( TYPE_3 VAR_1 ) { throw new TYPE_4 ( VAR_1 ) ; } catch ( TYPE_5 VAR_1 ) { throw new TYPE_4 ( VAR_1 ) ; } }\n"}
{"problem": "public java.lang.Object execute ( ) throws TYPE_1 { java.util.List < TYPE_2 > VAR_1 = new java.util.LinkedList < TYPE_2 > ( ) ; VAR_1 . add ( new TYPE_2 ( \"type\" , STRING_1 ) ) ; VAR_1 . add ( new TYPE_2 ( \"name\" , name ) ) ; TYPE_3 VAR_2 = TYPE_4 . METHOD_1 ( VAR_1 , STRING_2 ) ; TYPE_4 . METHOD_2 ( VAR_3 , VAR_2 , VAR_2 . METHOD_3 ( VAR_4 ) , VAR_5 ) ; return null ; }\n", "fixed": "public java.lang.Object execute ( ) throws TYPE_1 { java.util.List < TYPE_2 > VAR_1 = new java.util.LinkedList < TYPE_2 > ( ) ; VAR_1 . add ( new TYPE_2 ( \"type\" , STRING_1 ) ) ; VAR_1 . add ( new TYPE_2 ( \"name\" , name ) ) ; TYPE_3 VAR_2 = TYPE_4 . METHOD_1 ( STRING_1 , VAR_1 , STRING_2 ) ; TYPE_4 . METHOD_2 ( VAR_3 , VAR_2 , VAR_2 . METHOD_3 ( VAR_4 ) , VAR_5 ) ; return null ; }\n"}
{"fixCommitSHA1": "addd22c9cfa473eecf99779227f1952d52ad7af5", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath, ufsPath);\n     try {\n       mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);", "fixed": "     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient)\n        .mount(alluxioPath, ufsPath, mountOptions);\n     try {\n       mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);", "sourceBeforeFix": "Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath,ufsPath)", "sourceAfterFix": "Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)"}
{"project": "Math", "bugId": 83, "problem": " private void copyArray(final double[] src, final double[] dest,\n      */\n     protected RealPointValuePair getSolution() {\n       double[] coefficients = new double[getOriginalNumDecisionVariables()];\n      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());\n       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n       Set<Integer> basicRows = new HashSet<Integer>();\n       for (int i = 0; i < coefficients.length; i++) {\n          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n           if (basicRows.contains(basicRow)) {", "fixed": " private void copyArray(final double[] src, final double[] dest,\n      */\n     protected RealPointValuePair getSolution() {\n       double[] coefficients = new double[getOriginalNumDecisionVariables()];\n      Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());\n       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n       Set<Integer> basicRows = new HashSet<Integer>();\n       for (int i = 0; i < coefficients.length; i++) {\n          Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);\n           if (basicRows.contains(basicRow)) {", "observations": "The added \"WrapWith\" uses \"exp?a:b\" format.", "repairActions": ["assignExpChange", "condBranIfElseAdd", "mcRepl"], "repairPatterns": ["wrapsIfElse", "wrongMethodRef"]}
{"problem": "public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( operation ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_4 ) ; VAR_1 . METHOD_6 ( VAR_5 ) ; VAR_1 . METHOD_7 ( VAR_6 ) ; VAR_1 . METHOD_8 ( new TYPE_2 ( VAR_7 ) ) ; VAR_1 . METHOD_9 ( VAR_8 ) ; VAR_1 . METHOD_10 ( METHOD_11 ( ) ) ; VAR_1 . METHOD_12 ( VAR_9 ) ; return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_4 ) ; VAR_1 . METHOD_6 ( VAR_5 ) ; VAR_1 . METHOD_7 ( VAR_6 ) ; VAR_1 . METHOD_8 ( new TYPE_2 ( VAR_7 ) ) ; VAR_1 . METHOD_9 ( VAR_8 ) ; VAR_1 . METHOD_10 ( METHOD_11 ( ) ) ; VAR_1 . METHOD_12 ( VAR_9 ) ; return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 ; for ( int i = 0 ; i < ( VAR_4 . size ( ) ) ; i ++ ) { VAR_3 = VAR_4 . get ( i ) ; VAR_3 . METHOD_2 ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) ) , VAR_2 ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String name , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 ; for ( int i = 0 ; i < ( VAR_4 . size ( ) ) ; i ++ ) { VAR_3 = VAR_4 . get ( i ) ; VAR_3 . METHOD_2 ( name , VAR_2 ) ; } }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( java.lang.String ... VAR_1 ) { java.util.List < TYPE_1 > results = new TYPE_2 ( ) . METHOD_2 ( new TYPE_3 < java.util.ArrayList < TYPE_1 > > ( ) { } . getType ( ) , new TYPE_4 ( ) ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 [ 0 ] , new TYPE_3 < java.util.ArrayList < TYPE_1 > > ( ) { } . getType ( ) ) ; return results . isEmpty ( ) ? null : results . get ( 0 ) ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( java.lang.String ... VAR_1 ) { java.util.List < TYPE_1 > results = new TYPE_2 ( ) . METHOD_2 ( new TYPE_3 < java.util.ArrayList < TYPE_1 > > ( ) { } . getType ( ) , new TYPE_4 ( ) ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 [ 0 ] , new TYPE_3 < java.util.ArrayList < TYPE_1 > > ( ) { } . getType ( ) ) ; return ( results == null ) || ( results . isEmpty ( ) ) ? null : results . get ( 0 ) ; }\n"}
{"problem": "public static int METHOD_1 ( java.lang.String time ) { java.lang.String [ ] VAR_1 = time . split ( STRING_1 ) ; int VAR_2 = ( ( java.lang.Integer.parseInt ( VAR_1 [ 0 ] ) ) * INT_1 ) + ( java.lang.Integer.parseInt ( VAR_1 [ 1 ] ) ) ; return VAR_2 ; }\n", "fixed": "public static long METHOD_1 ( java.lang.String time ) { java.lang.String [ ] VAR_1 = time . split ( STRING_1 ) ; long VAR_2 = ( ( java.lang.Long.parseLong ( VAR_1 [ 0 ] ) ) * INT_1 ) + ( java.lang.Long.parseLong ( VAR_1 [ 1 ] ) ) ; return VAR_2 ; }\n"}
{"problem": "public static void main ( ) { java.lang.System.out.println ( ( STRING_1 + STRING_2 ) ) ; final TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( STRING_2 , INT_1 , INT_2 ) ; TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 , INT_3 , INT_4 ) ; java.lang.System.out.println ( STRING_4 ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] arg ) { java.lang.System.out.println ( ( STRING_1 + STRING_2 ) ) ; final TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( STRING_2 , INT_1 , INT_2 ) ; TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 , INT_3 , INT_4 ) ; java.lang.System.out.println ( STRING_4 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 data = new TYPE_2 ( 0 ) ; METHOD_2 ( VAR_1 , data ) ; data . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; data . METHOD_5 ( ) ; TYPE_3 . METHOD_6 ( listener , TYPE_3 . METHOD_7 ( 1 ) ) . METHOD_8 ( METHOD_9 ( VAR_1 ) , 0 ) ; TYPE_3 . METHOD_10 ( listener ) ; }\n", "fixed": "public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 data = new TYPE_2 ( 0 ) ; METHOD_2 ( VAR_1 , data ) ; data . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; data . METHOD_5 ( ) ; TYPE_3 . METHOD_10 ( listener ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedThriftEndpointBuilder\n             extends\n                 AdvancedThriftEndpointConsumerBuilder, AdvancedThriftEndpointProducerBuilder {\n         default ThriftEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedThriftEndpointBuilder\n             extends\n                 AdvancedThriftEndpointConsumerBuilder, AdvancedThriftEndpointProducerBuilder {\n         default ThriftEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public static java.util.List < java.lang.String > METHOD_1 ( int VAR_1 , int VAR_2 ) { java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; try { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_3 = TYPE_1 . METHOD_4 ( VAR_1 ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_5 ( ) ; } return VAR_3 ; }\n", "fixed": "public static java.util.List < java.lang.String > METHOD_1 ( int VAR_1 , int VAR_2 ) { java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; try { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_3 = TYPE_1 . METHOD_4 ( VAR_1 ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_5 ( ) ; } java.lang.System.out.println ( ) ; return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 ) { if ( VAR_1 == null ) { VAR_7 . METHOD_2 ( false ) ; VAR_8 . METHOD_3 ( VAR_8 . METHOD_4 ( ) , 0 ) ; } else { VAR_7 . METHOD_2 ( true ) ; VAR_7 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; VAR_8 . METHOD_3 ( VAR_8 . METHOD_4 ( ) , VAR_7 . METHOD_5 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 ) { if ( VAR_1 == null ) { VAR_7 . METHOD_2 ( false ) ; } else { VAR_7 . METHOD_2 ( true ) ; VAR_7 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . getValue ( VAR_3 class ) ; if ( VAR_2 != null ) { VAR_4 . METHOD_2 ( TYPE_3 . getColor ( getContext ( ) , VAR_5 ) ) ; VAR_4 . setText ( STRING_1 ) ; VAR_6 . METHOD_3 ( VAR_7 ) ; VAR_8 . METHOD_3 ( VAR_9 ) ; VAR_10 = true ; } else { VAR_10 = false ; VAR_6 . METHOD_3 ( VAR_7 ) ; VAR_8 . METHOD_3 ( VAR_9 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . getValue ( VAR_3 class ) ; if ( VAR_2 != null ) { VAR_4 . METHOD_2 ( TYPE_3 . getColor ( getContext ( ) , VAR_5 ) ) ; VAR_4 . setText ( STRING_1 ) ; VAR_10 = true ; } else { VAR_10 = false ; } }\n"}
{"problem": "public void METHOD_1 ( int b ) throws java.io.IOException { if ( ( buffer ) == null ) { buffer = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; METHOD_4 ( buffer ) ; } if ( buffer . METHOD_5 ( ) ) { buffer . put ( ( ( byte ) ( b ) ) ) ; } else { buffer = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; METHOD_4 ( buffer ) ; buffer . put ( ( ( byte ) ( b ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( int b ) throws java.io.IOException { if ( ( buffer ) == null ) { buffer = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; } if ( buffer . METHOD_5 ( ) ) { buffer . put ( ( ( byte ) ( b ) ) ) ; } else { METHOD_4 ( buffer ) ; buffer = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; buffer . put ( ( ( byte ) ( b ) ) ) ; } }\n"}
{"problem": "private void METHOD_1 ( boolean VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ; try { if ( ( VAR_4 ) instanceof TYPE_3 ) { ( ( TYPE_3 ) ( VAR_4 ) ) . METHOD_5 ( ) ; } else { VAR_4 . METHOD_6 ( VAR_1 , context ) ; } } finally { TYPE_2 . METHOD_2 ( VAR_2 ) ; } }\n", "fixed": "private void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ; try { if ( ( VAR_4 ) instanceof TYPE_3 ) { ( ( TYPE_3 ) ( VAR_4 ) ) . METHOD_5 ( ) ; } else { VAR_4 . METHOD_6 ( VAR_1 , context ) ; } } finally { TYPE_2 . METHOD_2 ( VAR_2 ) ; } }\n"}
{"problem": "private void METHOD_1 ( java.io.File VAR_1 , java.lang.String fileName , java.util.Map < java.lang.String , java.lang.String > VAR_2 ) throws java.io.IOException { java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( ) ; VAR_3 . append ( STRING_1 ) ; for ( java.lang.String k : VAR_2 . METHOD_2 ( ) ) { VAR_3 . append ( ( ( ( k + \"\\t\" ) + ( VAR_2 . get ( k ) ) ) + \"\\n\" ) ) ; } TYPE_1 . METHOD_3 ( new java.io.File ( VAR_1 , fileName ) , VAR_3 . toString ( ) , STRING_2 , true ) ; }\n", "fixed": "private void METHOD_1 ( java.io.File VAR_1 , java.lang.String fileName , java.util.Map < java.lang.String , java.lang.String > VAR_2 ) throws java.io.IOException { java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( ) ; VAR_3 . append ( STRING_1 ) ; for ( java.lang.String k : VAR_2 . METHOD_2 ( ) ) { VAR_3 . append ( ( ( ( k + \"\\t\" ) + ( VAR_2 . get ( k ) ) ) + \"\\n\" ) ) ; } TYPE_1 . METHOD_3 ( new java.io.File ( VAR_1 , fileName ) , VAR_3 . toString ( ) , STRING_2 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.CharSequence message , java.lang.Object ... params ) { if ( METHOD_2 ( VAR_1 ) ) { java.lang.String str = ( message == null ) ? null : message . toString ( ) ; if ( ( str != null ) && ( ( params . length ) > 0 ) ) { str = java.lang.String.format ( str , params ) ; } java.lang.System.out.println ( java.lang.String.format ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + str ) ) ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.CharSequence message , java.lang.Object ... params ) { if ( METHOD_2 ( VAR_1 ) ) { java.lang.String str = ( message == null ) ? null : message . toString ( ) ; if ( ( str != null ) && ( ( params . length ) > 0 ) ) { str = java.lang.String.format ( str , params ) ; } java.lang.System.out.println ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + str ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; int VAR_2 = VAR_1 . METHOD_4 ( ) ; int VAR_3 = VAR_2 % INT_1 ; TYPE_1 VAR_4 = ( VAR_3 == 1 ) ? VAR_1 : VAR_1 . METHOD_5 ( ( VAR_3 - 1 ) ) ; TYPE_3 VAR_5 = TYPE_3 . METHOD_6 ( VAR_6 . METHOD_7 ( VAR_7 ) ) ; assertEquals ( VAR_4 , VAR_5 . METHOD_8 ( VAR_1 ) . get ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; int VAR_2 = VAR_1 . METHOD_4 ( ) ; int VAR_3 = VAR_2 % INT_1 ; TYPE_1 VAR_4 = ( VAR_3 == 1 ) ? VAR_1 . METHOD_5 ( INT_1 ) : VAR_1 . METHOD_5 ( ( VAR_3 - 1 ) ) ; TYPE_3 VAR_5 = TYPE_3 . METHOD_6 ( VAR_6 . METHOD_7 ( VAR_7 ) ) ; assertEquals ( VAR_4 , VAR_5 . METHOD_8 ( VAR_1 ) . get ( ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( final TYPE_1 b ) { if ( ( ( this . keys ) != null ) && ( ! ( this . keys . isEmpty ( ) ) ) ) { if ( ( this . VAR_1 ) == null ) { throw new TYPE_2 ( STRING_1 ) ; } b . METHOD_2 ( this . VAR_1 ) ; b . METHOD_3 ( VAR_2 , this . keys ) ; b . METHOD_4 ( VAR_3 , 1 ) ; } }\n", "fixed": "protected void METHOD_1 ( final TYPE_1 b ) { if ( ( ( this . keys ) != null ) && ( ! ( this . keys . isEmpty ( ) ) ) ) { if ( ( this . VAR_1 ) == null ) { throw new TYPE_2 ( STRING_1 ) ; } b . METHOD_2 ( this . VAR_1 ) ; b . METHOD_3 ( VAR_2 , this . keys ) ; } b . METHOD_4 ( VAR_3 , 1 ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 list = new TYPE_1 ( ) ; for ( TYPE_2 VAR_1 : VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 . getName ( ) , VAR_1 . METHOD_4 ( ) ) ; list . METHOD_5 ( VAR_3 ) ; } VAR_4 = list ; }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 list = new TYPE_1 ( ) ; for ( TYPE_2 VAR_1 : VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 . getName ( ) , VAR_1 . METHOD_4 ( ) ) ; VAR_3 . setValue ( VAR_1 . getValue ( ) ) ; list . METHOD_5 ( VAR_3 ) ; } VAR_4 = list ; }\n"}
{"problem": "protected void METHOD_1 ( boolean VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 ) { super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; if ( VAR_1 ) { VAR_6 . METHOD_2 ( ( VAR_4 - VAR_2 ) , ( VAR_5 - VAR_3 ) , true ) ; } }\n", "fixed": "protected void METHOD_1 ( boolean VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 ) { super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; VAR_6 . METHOD_2 ( ( VAR_4 - VAR_2 ) , ( VAR_5 - VAR_3 ) , true ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n \t/**\n \t * Completely remove the given global property from the database", "fixed": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t/**\n \t * Completely remove the given global property from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"problem": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( 1 , STRING_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( INT_1 , STRING_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 , VAR_2 , STRING_3 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_3 ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( 1 , STRING_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( INT_1 , STRING_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 , VAR_2 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_3 ) ; }\n"}
{"problem": "private boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { for ( TYPE_2 x : VAR_1 . METHOD_2 ( ) ) { if ( ( ( ( ! ( x instanceof TYPE_3 ) ) && ( ( x . METHOD_3 ( ) ) != null ) ) && ( ( x . getId ( ) ) != null ) ) && ( x . METHOD_3 ( ) . toLowerCase ( ) . startsWith ( VAR_2 ) ) ) { return true ; } } return false ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { VAR_2 = VAR_2 . toLowerCase ( ) ; for ( TYPE_2 x : VAR_1 . METHOD_2 ( ) ) { if ( ( ( ( ! ( x instanceof TYPE_3 ) ) && ( ( x . METHOD_3 ( ) ) != null ) ) && ( ( x . getId ( ) ) != null ) ) && ( x . METHOD_3 ( ) . toLowerCase ( ) . startsWith ( VAR_2 ) ) ) { return true ; } } return false ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( java.io.File VAR_1 , java.lang.String fileName , TYPE_1 VAR_2 ) { java.io.File VAR_3 = new java.io.File ( VAR_1 , fileName ) ; if ( ! ( VAR_3 . METHOD_2 ( ) ) ) { try { VAR_3 . METHOD_3 ( ) ; return TYPE_2 . METHOD_4 ( VAR_3 ) ; } catch ( java.io.IOException VAR_4 ) { return new TYPE_2 ( ) ; } } else { return TYPE_2 . METHOD_4 ( VAR_3 ) ; } }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.io.File VAR_1 , java.lang.String fileName ) { java.io.File VAR_3 = new java.io.File ( VAR_1 , fileName ) ; if ( ! ( VAR_3 . METHOD_2 ( ) ) ) { try { VAR_3 . METHOD_3 ( ) ; return TYPE_2 . METHOD_4 ( VAR_3 ) ; } catch ( java.io.IOException VAR_4 ) { return new TYPE_2 ( ) ; } } else { return TYPE_2 . METHOD_4 ( VAR_3 ) ; } }\n"}
{"problem": "public TYPE_1 element ( ) throws java.lang.Exception { java.lang.Object VAR_1 = null ; final TYPE_2 VAR_2 = this . VAR_2 ; VAR_2 . METHOD_1 ( ) ; try { if ( ( count ) <= 0 ) throw new java.lang.Exception ( ) ; VAR_1 = VAR_3 [ VAR_4 ] ; } finally { VAR_2 . METHOD_2 ( ) ; } return ( ( TYPE_1 ) ( VAR_1 ) ) ; }\n", "fixed": "public TYPE_1 element ( ) throws java.lang.Exception { java.lang.Object VAR_1 = null ; final java.lang.Object [ ] VAR_3 = this . VAR_3 ; final TYPE_2 VAR_2 = this . VAR_2 ; VAR_2 . METHOD_1 ( ) ; try { if ( ( count ) <= 0 ) throw new java.lang.Exception ( ) ; VAR_1 = VAR_3 [ VAR_4 ] ; } finally { VAR_2 . METHOD_2 ( ) ; } return ( ( TYPE_1 ) ( VAR_1 ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( int VAR_1 ) { android.widget.LinearLayout VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_1 < ( VAR_3 ) ) { TYPE_1 VAR_4 = ( ( TYPE_1 ) ( VAR_2 . METHOD_3 ( VAR_5 ) ) ) ; VAR_4 . METHOD_4 ( VAR_6 . get ( VAR_1 ) ) ; } else { METHOD_5 ( VAR_2 ) ; } METHOD_6 ( VAR_2 ) ; }\n", "fixed": "protected void METHOD_1 ( int VAR_1 ) { android.widget.LinearLayout VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_1 < ( VAR_3 ) ) { TYPE_1 VAR_4 = ( ( TYPE_1 ) ( VAR_2 . METHOD_3 ( VAR_5 ) ) ) ; VAR_4 . METHOD_4 ( VAR_6 . get ( VAR_1 ) ) ; } METHOD_6 ( VAR_2 ) ; }\n"}
{"problem": "public int METHOD_1 ( int position ) { if ( ( METHOD_2 ( ( - 1 ) , ( - 1 ) , ( - 1 ) ) ) == ( - 1 ) ) { VAR_1 = true ; return METHOD_3 ( position ) ; } return position == ( METHOD_4 ( ) ) ? INT_1 : METHOD_3 ( position ) ; }\n", "fixed": "public int METHOD_1 ( int position ) { if ( ( METHOD_2 ( 0 , 0 , 1 ) ) == ( - 1 ) ) { VAR_1 = true ; return METHOD_3 ( position ) ; } return position == ( METHOD_4 ( ) ) ? INT_1 : METHOD_3 ( position ) ; }\n"}
{"problem": "public double METHOD_1 ( ) { TYPE_1 < TYPE_2 , TYPE_3 > TYPE_4 = this . METHOD_2 ( ) ; TYPE_3 VAR_1 = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) . min ( TYPE_5 . METHOD_5 ( TYPE_4 : : METHOD_6 ) ) . METHOD_7 ( ( ) - > new TYPE_6 ( STRING_1 ) ) ; VAR_2 = TYPE_4 . METHOD_8 ( VAR_1 ) ; VAR_3 = TYPE_4 . METHOD_9 ( VAR_1 ) ; VAR_4 = null ; return TYPE_4 . METHOD_6 ( VAR_1 ) ; }\n", "fixed": "public double METHOD_1 ( ) { if ( ( this . TYPE_4 ) == null ) this . TYPE_4 = this . METHOD_2 ( ) ; TYPE_3 VAR_1 = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) . min ( TYPE_5 . METHOD_5 ( TYPE_4 : : METHOD_6 ) ) . METHOD_7 ( ( ) - > new TYPE_6 ( STRING_1 ) ) ; VAR_2 = TYPE_4 . METHOD_8 ( VAR_1 ) ; VAR_3 = TYPE_4 . METHOD_9 ( VAR_1 ) ; VAR_4 = null ; return TYPE_4 . METHOD_6 ( VAR_1 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"problem": "public static final double METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_1 VAR_2 ) { assert ( VAR_3 . length ) == ( VAR_4 . length ) : STRING_1 ; double sum = 0.0 ; for ( int i = 0 ; i < ( VAR_5 . length ) ; ++ i ) { final double VAR_6 = ( VAR_5 [ i ] ) - ( VAR_7 [ i ] ) ; sum += VAR_6 * VAR_6 ; } return sum ; }\n", "fixed": "public static final double METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_1 VAR_2 ) { assert ( VAR_5 . length ) == ( VAR_7 . length ) : STRING_1 ; double sum = 0.0 ; for ( int i = 0 ; i < ( VAR_5 . length ) ; ++ i ) { final double VAR_6 = ( VAR_5 [ i ] ) - ( VAR_7 [ i ] ) ; sum += VAR_6 * VAR_6 ; } return sum ; }\n"}
{"problem": "public boolean METHOD_1 ( float x , float y ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( ( VAR_1 ) == null ) return false ; METHOD_3 ( ) ; VAR_3 = VAR_2 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ( ( int ) ( ( VAR_5 ) * INT_1 ) ) ) ; VAR_4 . METHOD_6 ( size ) ; METHOD_7 ( ) ; path . METHOD_8 ( ) ; path . METHOD_9 ( x , y ) ; VAR_6 = x ; VAR_7 = y ; return true ; }\n", "fixed": "public boolean METHOD_1 ( float x , float y ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( ( VAR_1 ) == null ) return false ; METHOD_3 ( ) ; VAR_3 = VAR_2 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ( ( int ) ( ( VAR_5 ) * INT_1 ) ) ) ; VAR_4 . METHOD_6 ( size ) ; METHOD_7 ( ) ; path . METHOD_8 ( ) ; path . METHOD_9 ( x , y ) ; VAR_6 = - 1 ; VAR_7 = - 1 ; return true ; }\n"}
{"problem": "private void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ( VAR_2 ) == 0 ) { VAR_2 = TYPE_1 . METHOD_2 ( ) ; } else { VAR_3 += ( TYPE_1 . METHOD_2 ( ) ) - ( VAR_2 ) ; VAR_2 = 0 ; } VAR_1 . METHOD_3 ( ) ; } }\n", "fixed": "private void METHOD_1 ( ) { synchronized ( this ) { if ( ( VAR_2 ) == 0 ) { VAR_2 = TYPE_1 . METHOD_2 ( ) ; } else { VAR_3 += ( TYPE_1 . METHOD_2 ( ) ) - ( VAR_2 ) ; VAR_2 = 0 ; } METHOD_3 ( ) ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGuavaEventBusEndpointBuilder\n             extends\n                 AdvancedGuavaEventBusEndpointConsumerBuilder, AdvancedGuavaEventBusEndpointProducerBuilder {\n         default GuavaEventBusEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGuavaEventBusEndpointBuilder\n             extends\n                 AdvancedGuavaEventBusEndpointConsumerBuilder, AdvancedGuavaEventBusEndpointProducerBuilder {\n         default GuavaEventBusEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { float VAR_2 = ( VAR_3 ) / VAR_1 ; new java.lang.Thread ( ( ) - > { while ( ( VAR_3 ) > 0.0F ) { METHOD_2 ( ( ( VAR_3 ) - VAR_2 ) ) ; try { java.lang.Thread . METHOD_3 ( 1 ) ; } catch ( TYPE_1 VAR_4 ) { VAR_4 . METHOD_4 ( ) ; } } METHOD_5 ( VAR_5 . get ( 0 ) ) ; } ) . start ( ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { float VAR_2 = ( VAR_3 ) / VAR_1 ; new java.lang.Thread ( ( ) - > { while ( ( VAR_3 ) > 0.0F ) { METHOD_2 ( ( ( VAR_3 ) - VAR_2 ) ) ; try { java.lang.Thread . METHOD_3 ( 1 ) ; } catch ( TYPE_1 VAR_4 ) { VAR_4 . METHOD_4 ( ) ; } } METHOD_5 ( VAR_5 ) ; } ) . start ( ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { VAR_3 . METHOD_2 ( STRING_1 ) ; try { TYPE_1 info = new TYPE_1 ( ) ; VAR_4 = VAR_5 ; VAR_6 = INT_1 ; VAR_7 = STRING_2 ; VAR_8 = STRING_3 ; VAR_9 = VAR_10 . METHOD_3 ( ) ; return info ; } catch ( java.lang.Exception VAR_11 ) { VAR_3 . error ( STRING_4 , VAR_11 ) ; throw new TYPE_3 ( VAR_12 ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { VAR_3 . info ( STRING_1 ) ; try { TYPE_1 info = new TYPE_1 ( ) ; VAR_4 = VAR_5 ; VAR_6 = INT_1 ; VAR_7 = STRING_2 ; VAR_8 = STRING_3 ; VAR_9 = VAR_10 . METHOD_3 ( ) ; return info ; } catch ( java.lang.Exception VAR_11 ) { VAR_3 . error ( STRING_4 , VAR_11 ) ; throw new TYPE_3 ( VAR_12 ) ; } }\n"}
{"problem": "public void METHOD_1 ( final java.awt.Font VAR_1 ) { try { final int VAR_2 = this . METHOD_2 ( ) ; this . METHOD_1 ( VAR_1 , VAR_2 ) ; VAR_3 [ VAR_2 ] = false ; VAR_4 . METHOD_3 ( ) ; } catch ( TYPE_1 VAR_5 ) { VAR_5 . METHOD_4 ( ) ; } }\n", "fixed": "public void METHOD_1 ( final java.awt.Font VAR_1 ) { try { final int VAR_2 = this . METHOD_2 ( ) ; this . METHOD_1 ( VAR_1 , VAR_2 , 0 ) ; VAR_3 [ VAR_2 ] = false ; VAR_4 . METHOD_3 ( ) ; } catch ( TYPE_1 VAR_5 ) { VAR_5 . METHOD_4 ( ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( ) { java.lang.StringBuffer VAR_1 = new java.lang.StringBuffer ( ) ; for ( int a = 0 ; a < INT_1 ; a ++ ) for ( int b = 0 ; b < ( INT_1 - a ) ; b ++ ) { VAR_1 . append ( a ) ; VAR_1 . append ( b ) ; } VAR_2 = VAR_1 . toString ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { java.lang.StringBuffer VAR_1 = new java.lang.StringBuffer ( ) ; for ( int a = 0 ; a < INT_1 ; a ++ ) for ( int b = 0 ; b < ( INT_1 - a ) ; b ++ ) { append ( VAR_1 , a ) ; append ( VAR_1 , b ) ; } VAR_2 = VAR_1 . toString ( ) ; }\n"}
{"fixCommitSHA1": "3b9698ecac75326d0cd88929189eaed782b9b8b2", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "       + \"intermediate-data-encryption.enable\";\n   @Private\n  public static final Boolean DEFAULT_YARN_INTERMEDIATE_DATA_ENCRYPTION = false;\n   \n   public static final String RM_ADMIN_ADDRESS = ", "fixed": "       + \"intermediate-data-encryption.enable\";\n   @Private\n  public static final boolean DEFAULT_YARN_INTERMEDIATE_DATA_ENCRYPTION = false;\n   \n   public static final String RM_ADMIN_ADDRESS = ", "sourceBeforeFix": "9", "sourceAfterFix": "25"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "* @see\n* @see NormalizableKey\n \t */\n\tpublic void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "fixed": "* @see\n* @see NormalizableKey\n \t */\n\tpublic abstract void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_5 ) ; VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( ) ; VAR_6 = null ; VAR_7 [ 0 ] = false ; VAR_8 . METHOD_5 ( ) ; TYPE_1 . METHOD_6 ( getContext ( ) , ( ( filename [ 0 ] ) + STRING_1 ) , VAR_9 ) . show ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_5 ) ; VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( ) ; VAR_6 = null ; VAR_7 [ 0 ] = false ; TYPE_1 . METHOD_6 ( getContext ( ) , ( ( filename [ 0 ] ) + STRING_1 ) , VAR_9 ) . show ( ) ; VAR_8 . METHOD_5 ( ) ; }\n"}
{"problem": "protected TYPE_1 [ ] METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , double VAR_3 , double VAR_4 ) { if ( ( VAR_5 ) == null ) { VAR_5 = TYPE_1 . METHOD_2 ( ) ; } VAR_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; VAR_5 . METHOD_4 ( VAR_5 , VAR_1 ) ; VAR_5 . METHOD_5 ( 0 ) ; return METHOD_6 ( VAR_5 ) ; }\n", "fixed": "protected TYPE_1 [ ] METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , double VAR_3 , double VAR_4 ) { if ( ( VAR_5 ) == null ) { VAR_5 = TYPE_1 . METHOD_2 ( ) ; } VAR_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; VAR_5 . METHOD_4 ( VAR_5 , VAR_1 ) ; VAR_5 . METHOD_5 ( 1 ) ; return METHOD_6 ( VAR_5 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; VAR_1 . METHOD_2 ( STRING_6 ) ; VAR_1 . METHOD_2 ( STRING_7 ) ; VAR_1 . METHOD_2 ( STRING_8 ) ; VAR_1 . METHOD_2 ( STRING_9 ) ; VAR_1 . METHOD_2 ( STRING_10 ) ; VAR_1 . METHOD_2 ( STRING_11 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; VAR_1 . METHOD_2 ( STRING_6 ) ; VAR_1 . METHOD_2 ( STRING_7 ) ; VAR_1 . METHOD_2 ( STRING_8 ) ; VAR_1 . METHOD_2 ( STRING_9 ) ; VAR_1 . METHOD_2 ( STRING_10 ) ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { list . add ( new TYPE_3 ( ( STRING_3 + i ) , ( STRING_4 + i ) ) ) ; } for ( int i = 0 ; i < ( list . size ( ) ) ; i ++ ) { VAR_2 . add ( false ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { list . add ( new TYPE_3 ( ( STRING_3 + i ) , ( STRING_4 + i ) ) ) ; } for ( int i = 0 ; i < ( list . size ( ) ) ; i ++ ) { VAR_2 . add ( false ) ; } }\n"}
{"problem": "public < TYPE_1 > boolean METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 , long id ) { TYPE_2 VAR_2 = METHOD_2 ( METHOD_3 ( VAR_1 . METHOD_4 ( ) , id ) ) ; if ( ( VAR_2 != null ) && ( ( VAR_2 . METHOD_5 ( ) ) >= 0 ) ) { return true ; } else { return false ; } }\n", "fixed": "public < TYPE_1 > boolean METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 , long id ) { TYPE_2 VAR_2 = METHOD_2 ( METHOD_3 ( VAR_1 . METHOD_4 ( ) , id ) ) ; if ( ( VAR_2 != null ) && ( ( VAR_2 . METHOD_5 ( ) ) > 0 ) ) { return true ; } else { return false ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; return VAR_2 ; }\n", "fixed": "java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) ; return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) ; VAR_4 . METHOD_3 ( VAR_2 . getText ( ) . toString ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( view . METHOD_2 ( VAR_3 ) ) ) ; VAR_4 . METHOD_3 ( VAR_2 . getText ( ) . toString ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( 1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( INT_1 ) ; TYPE_1 VAR_4 = new TYPE_4 ( VAR_2 , VAR_3 ) ; assertEquals ( VAR_1 , VAR_4 ) ; assertEquals ( VAR_1 . METHOD_3 ( new TYPE_5 ( ) ) , VAR_4 . METHOD_3 ( new TYPE_5 ( ) ) ) ; assertEquals ( VAR_1 . METHOD_3 ( new TYPE_5 ( ) ) , new TYPE_6 ( true ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( 1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( INT_1 ) ; TYPE_1 VAR_4 = new TYPE_4 ( VAR_2 , VAR_3 ) ; assertEquals ( VAR_1 . METHOD_3 ( new TYPE_5 ( ) ) , new TYPE_6 ( true ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( ) ; for ( java.util.HashMap < java.lang.String , java.lang.String > VAR_1 : VAR_2 ) { for ( java.lang.String key : VAR_1 . METHOD_3 ( ) ) { if ( ! ( keys . contains ( key ) ) ) { keys . METHOD_4 ( key ) ; } } } }\n", "fixed": "private void METHOD_1 ( ) { keys = new java.util.Vector < java.lang.String > ( ) ; METHOD_2 ( ) ; for ( java.util.HashMap < java.lang.String , java.lang.String > VAR_1 : VAR_2 ) { for ( java.lang.String key : VAR_1 . METHOD_3 ( ) ) { if ( ! ( keys . contains ( key ) ) ) { keys . METHOD_4 ( key ) ; java.lang.System.out.println ( key ) ; } } } }\n"}
{"problem": "protected void METHOD_1 ( java.lang.String ... data ) { switch ( ( ( int ) ( VAR_1 ) ) ) { case 1 : VAR_2 . setText ( data [ 0 ] ) ; VAR_3 = java.lang.Double . METHOD_2 ( data [ 0 ] ) ; break ; case INT_1 : VAR_4 . setText ( data [ 0 ] ) ; VAR_5 = java.lang.Double . METHOD_2 ( data [ 0 ] ) ; break ; } }\n", "fixed": "protected void METHOD_1 ( java.lang.String ... data ) { switch ( ( ( int ) ( VAR_1 ) ) ) { case 1 : VAR_4 . setText ( data [ 0 ] ) ; VAR_5 = java.lang.Double . METHOD_2 ( data [ 0 ] ) ; break ; case INT_1 : VAR_2 . setText ( data [ 0 ] ) ; VAR_3 = java.lang.Double . METHOD_2 ( data [ 0 ] ) ; break ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ( ( ( int ) ( VAR_3 . METHOD_3 ( ) ) ) / INT_1 ) ) ; int VAR_4 = ( ( VAR_2 . METHOD_4 ( ) ) - ( VAR_2 . getSelection ( ) ) ) + ( VAR_2 . METHOD_5 ( ) ) ; java.lang.System.out.println ( VAR_4 ) ; VAR_3 . METHOD_6 ( ( VAR_4 * INT_1 ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ( ( ( int ) ( VAR_3 . METHOD_3 ( ) ) ) / INT_1 ) ) ; int VAR_4 = VAR_2 . getSelection ( ) ; java.lang.System.out.println ( VAR_4 ) ; VAR_3 . METHOD_6 ( ( VAR_4 * INT_1 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = getActivity ( ) . METHOD_2 ( STRING_1 , VAR_3 ) ; TYPE_2 VAR_4 = VAR_2 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( STRING_2 , true ) ; VAR_4 . METHOD_4 ( STRING_3 , false ) ; VAR_4 . METHOD_5 ( STRING_4 , VAR_1 ) ; VAR_4 . commit ( ) ; android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_5 class ) ; getActivity ( ) . METHOD_6 ( intent ) ; getActivity ( ) . METHOD_7 ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = getActivity ( ) . METHOD_2 ( STRING_1 , VAR_3 ) ; TYPE_2 VAR_4 = VAR_2 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( STRING_2 , true ) ; VAR_4 . METHOD_5 ( STRING_4 , VAR_1 ) ; VAR_4 . commit ( ) ; android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_5 class ) ; getActivity ( ) . METHOD_6 ( intent ) ; getActivity ( ) . METHOD_7 ( ) ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_2 ( ) ; TYPE_3 VAR_4 = VAR_3 . select ( VAR_1 ) ; if ( ( VAR_1 . equals ( VAR_4 . METHOD_2 ( ) ) ) && ( VAR_2 . equals ( TYPE_4 . METHOD_3 ( VAR_4 . METHOD_2 ( ) , VAR_4 . METHOD_4 ( ) ) ) ) ) { return true ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_2 ( ) ; TYPE_3 VAR_4 = VAR_3 . select ( VAR_1 ) ; if ( ( ( VAR_4 != null ) && ( VAR_1 . equals ( VAR_4 . METHOD_2 ( ) ) ) ) && ( VAR_2 . equals ( TYPE_4 . METHOD_3 ( VAR_4 . METHOD_2 ( ) , VAR_4 . METHOD_4 ( ) ) ) ) ) { return true ; } return false ; }\n"}
{"problem": "public short METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 [ VAR_1 . METHOD_2 ( ) ] [ VAR_1 . METHOD_3 ( ) ] = VAR_3 . METHOD_4 ( this . VAR_4 , VAR_1 , this . step ) ; short VAR_5 = this . METHOD_5 ( ) ; if ( VAR_5 == ( VAR_6 ) ) { this . METHOD_6 ( ) ; ( step ) ++ ; } return VAR_5 ; }\n", "fixed": "public short METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 [ VAR_1 . METHOD_2 ( ) ] [ VAR_1 . METHOD_3 ( ) ] = VAR_3 . METHOD_4 ( this . VAR_4 , VAR_1 , this . step ) ; short VAR_5 = this . METHOD_5 ( ) ; if ( VAR_5 == ( VAR_6 ) ) { ( step ) ++ ; } return VAR_5 ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( ) { final int num = VAR_1 . size ( ) ; java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ( num - 1 ) ) ; for ( int i = 1 ; i < num ; i ++ ) { VAR_2 . add ( new TYPE_1 ( VAR_1 . get ( ( i - 1 ) ) , VAR_1 . get ( i ) ) ) ; } return VAR_2 ; }\n", "fixed": "public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { final int num = VAR_1 . size ( ) ; java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ( num - 1 ) ) ; for ( int i = 1 ; i < num ; i ++ ) { VAR_2 . add ( new TYPE_1 ( VAR_1 . get ( ( i - 1 ) ) , VAR_1 . get ( i ) ) ) ; } return VAR_2 ; }\n"}
{"problem": "protected TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < TYPE_2 > VAR_1 , int VAR_2 , int VAR_3 ) { try { int VAR_4 = ( VAR_2 - 1 ) * VAR_3 ; VAR_4 = ( VAR_4 >= 0 ) ? VAR_4 : 0 ; return VAR_5 . METHOD_2 ( VAR_1 , VAR_4 , VAR_3 ) ; } catch ( TYPE_4 VAR_6 ) { this . VAR_7 = 1 ; return METHOD_1 ( VAR_1 , VAR_7 , VAR_3 ) ; } }\n", "fixed": "protected TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < TYPE_2 > VAR_1 , int VAR_2 , int VAR_3 ) { try { if ( ( this . VAR_7 ) < 1 ) { this . VAR_7 = 1 ; } int VAR_4 = ( VAR_2 - 1 ) * VAR_3 ; VAR_4 = ( VAR_4 >= 0 ) ? VAR_4 : 0 ; return VAR_5 . METHOD_2 ( VAR_1 , VAR_4 , VAR_3 ) ; } catch ( TYPE_4 VAR_6 ) { this . VAR_7 = 1 ; return METHOD_1 ( VAR_1 , VAR_7 , VAR_3 ) ; } }\n"}
{"problem": "public int METHOD_1 ( char [ ] VAR_1 , int VAR_2 , int VAR_3 ) throws java.io.IOException { int n = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; for ( int i = VAR_2 ; i < VAR_3 ; i ++ ) { VAR_1 [ i ] = METHOD_2 ( VAR_1 [ i ] ) ; } return n ; }\n", "fixed": "public int METHOD_1 ( char [ ] VAR_1 , int VAR_2 , int VAR_3 ) throws java.io.IOException { int n = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; for ( int i = VAR_2 ; i < ( VAR_2 + VAR_3 ) ; i ++ ) { VAR_1 [ i ] = METHOD_2 ( VAR_1 [ i ] ) ; } return n ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }", "fixed": "                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }", "sourceBeforeFix": "invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation)", "sourceAfterFix": "invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation)"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = VAR_3 class . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; java.io.File VAR_4 = new java.io.File ( VAR_2 ) ; java.lang.String VAR_5 = new java.io.File ( ( ( VAR_4 . METHOD_4 ( ) ) + STRING_2 ) ) . METHOD_5 ( ) ; VAR_1 . METHOD_6 ( VAR_4 . METHOD_5 ( ) , VAR_5 , VAR_6 ) ; }\n", "fixed": "void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = VAR_3 class . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; java.io.File VAR_4 = new java.io.File ( VAR_2 ) ; java.lang.String VAR_5 = new java.io.File ( ( ( VAR_4 . METHOD_4 ( ) ) + STRING_2 ) ) . METHOD_5 ( ) ; VAR_1 . METHOD_6 ( VAR_4 . METHOD_5 ( ) , VAR_5 , VAR_6 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( ( VAR_2 ) == null ) || ( VAR_2 . isEmpty ( ) ) ) || ( ( VAR_3 ) == null ) ) { return ; } METHOD_1 ( METHOD_2 ( VAR_2 , VAR_3 ) , VAR_3 . METHOD_3 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( ( VAR_2 ) == null ) || ( VAR_2 . isEmpty ( ) ) ) || ( ( VAR_3 ) == null ) ) { return ; } METHOD_1 ( METHOD_2 ( VAR_2 , VAR_3 ) , VAR_3 . METHOD_3 ( ) ) ; VAR_2 = null ; }\n"}
{"problem": "private java.lang.String format ( java.lang.String message , java.lang.String VAR_1 , java.lang.Integer VAR_2 , TYPE_1 VAR_3 ) { message . replace ( CHAR_1 , CHAR_2 ) . replace ( STRING_1 , STRING_2 ) . replace ( STRING_3 , VAR_1 ) . replace ( STRING_4 , VAR_2 . toString ( ) ) . replace ( STRING_5 , VAR_3 . METHOD_1 ( ) ) ; return message ; }\n", "fixed": "private java.lang.String format ( java.lang.String message , java.lang.String VAR_1 , java.lang.Integer VAR_2 , TYPE_1 VAR_3 ) { return message . replace ( CHAR_1 , CHAR_2 ) . replace ( STRING_1 , STRING_2 ) . replace ( STRING_3 , VAR_1 ) . replace ( STRING_4 , VAR_2 . toString ( ) ) . replace ( STRING_5 , VAR_3 . METHOD_1 ( ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == ( TYPE_2 ) ) { return new TYPE_3 ( ) ; } else if ( ( VAR_1 ) == ( TYPE_4 ) ) { return new TYPE_5 ( ) ; } else if ( ( VAR_1 ) == ( TYPE_6 ) ) { return new TYPE_7 ( ) ; } else { throw new TYPE_8 ( ( STRING_1 + ( VAR_1 ) ) ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { if ( TYPE_2 . equals ( VAR_1 ) ) { return new TYPE_3 ( ) ; } else if ( TYPE_4 . equals ( VAR_1 ) ) { return new TYPE_5 ( ) ; } else if ( TYPE_6 . equals ( VAR_1 ) ) { return new TYPE_7 ( ) ; } else { throw new TYPE_8 ( ( STRING_1 + ( VAR_1 ) ) ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . getName ( ) ; java.lang.Long VAR_3 = 0L ; try { VAR_3 = java.lang.Long.parseLong ( VAR_2 ) ; } catch ( TYPE_3 VAR_4 ) { java.lang.System.out.println ( VAR_4 ) ; return null ; } TYPE_1 VAR_5 = METHOD_1 ( VAR_3 ) ; return VAR_5 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 == null ) return null ; java.lang.String VAR_2 = VAR_1 . getName ( ) ; if ( VAR_2 == null ) return null ; java.lang.Long VAR_3 = 0L ; try { VAR_3 = java.lang.Long.parseLong ( VAR_2 ) ; } catch ( TYPE_3 VAR_4 ) { java.lang.System.out.println ( VAR_4 ) ; return null ; } TYPE_1 VAR_5 = METHOD_1 ( VAR_3 ) ; return VAR_5 ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( final TYPE_1 source , final TYPE_2 < ? extends TYPE_1 > VAR_1 ) { final TYPE_1 result = new TYPE_1 ( ) ; if ( ( source . getValue ( ) ) instanceof java.util.Date ) { final TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( ( ( java.util.Date ) ( source . getValue ( ) ) ) ) ; result . METHOD_3 ( ) . add ( VAR_2 ) ; } else { result . METHOD_3 ( ) . add ( source . getValue ( ) ) ; } return result ; }\n", "fixed": "public TYPE_1 METHOD_1 ( final TYPE_1 source , final TYPE_2 < ? extends TYPE_1 > VAR_1 ) { final TYPE_1 result = new TYPE_1 ( ) ; if ( ( source . getValue ( ) ) instanceof java.util.Date ) { result . METHOD_3 ( ) . add ( TYPE_4 . METHOD_2 ( ( ( java.util.Date ) ( source . getValue ( ) ) ) ) ) ; } else { result . METHOD_3 ( ) . add ( source . getValue ( ) ) ; } return result ; }\n"}
{"problem": "protected void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ) ; if ( ( ( VAR_4 ) != null ) && ( VAR_5 ) ) { METHOD_2 ( new TYPE_2 ( ) { protected void METHOD_3 ( ) { METHOD_4 ( VAR_6 class ) ; if ( VAR_7 ) { METHOD_4 ( VAR_8 class ) . METHOD_5 ( VAR_9 ) ; METHOD_6 ( STRING_1 ) . METHOD_7 ( VAR_8 class ) ; } } } ) ; } }\n", "fixed": "protected void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ) ; if ( ( VAR_4 ) != null ) { METHOD_2 ( new TYPE_2 ( ) { protected void METHOD_3 ( ) { METHOD_4 ( VAR_6 class ) ; if ( ( VAR_5 ) && ( VAR_7 ) ) { METHOD_4 ( VAR_8 class ) . METHOD_5 ( VAR_9 ) ; METHOD_6 ( STRING_1 ) . METHOD_7 ( VAR_8 class ) ; } } } ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : if ( ( VAR_2 . METHOD_3 ( ) ) == null ) { TYPE_2 intent = new TYPE_2 ( this , VAR_3 class ) ; intent . METHOD_4 ( VAR_4 ) ; METHOD_5 ( intent ) ; } this . METHOD_6 ( ) ; default : return super . METHOD_1 ( item ) ; } }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : if ( ( VAR_2 . METHOD_3 ( ) ) == null ) { android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; intent . METHOD_4 ( VAR_4 ) ; METHOD_5 ( intent ) ; } this . METHOD_6 ( ) ; default : return super . METHOD_1 ( item ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 ) . add ( new TYPE_2 ( ( - 1 ) , ( - 1 ) , ( - 1 ) ) ) , TYPE_2 . METHOD_5 ( VAR_2 , VAR_3 ) . add ( new TYPE_2 ( 1 , 1 , 1 ) ) ) ) && ( VAR_1 . METHOD_6 ( ) . getName ( ) . equals ( VAR_4 ) ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 ) , TYPE_2 . METHOD_5 ( VAR_2 , VAR_3 ) . add ( new TYPE_2 ( 1 , 1 , 1 ) ) ) ) && ( VAR_1 . METHOD_6 ( ) . getName ( ) . equals ( VAR_4 ) ) ; }\n"}
{"problem": "public synchronized void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , int VAR_3 , java.util.Set < TYPE_2 > VAR_4 ) throws TYPE_3 { if ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) { throw new TYPE_4 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; } else { VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_5 ( VAR_4 ) ; VAR_1 . METHOD_6 ( ) . METHOD_7 ( VAR_5 , VAR_6 ) ; VAR_7 . METHOD_8 ( VAR_1 ) ; } }\n", "fixed": "public synchronized void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , int VAR_3 , java.util.Set < TYPE_2 > VAR_4 ) throws TYPE_3 { if ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) { throw new TYPE_4 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; } else { VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_5 ( VAR_4 ) ; VAR_7 . METHOD_8 ( VAR_1 ) ; VAR_1 . METHOD_6 ( ) . METHOD_7 ( VAR_5 , VAR_6 ) ; } }\n"}
{"problem": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_4 VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; if ( ( VAR_2 == null ) || ( ! ( VAR_2 instanceof TYPE_1 ) ) ) { throw new TYPE_3 ( STRING_1 ) ; } return ( ( TYPE_1 ) ( VAR_2 ) ) ; }\n", "fixed": "private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_3 { TYPE_4 VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; if ( ( VAR_2 == null ) || ( ! ( VAR_2 instanceof TYPE_1 ) ) ) { throw new TYPE_3 ( STRING_1 ) ; } return ( ( TYPE_1 ) ( VAR_2 ) ) ; }\n"}
{"problem": "private static java.lang.String METHOD_1 ( java.io.File file ) { java.lang.String VAR_1 = STRING_1 ; int i = file . METHOD_2 ( ) . METHOD_3 ( CHAR_1 ) ; int p = TYPE_1 . METHOD_4 ( file . METHOD_2 ( ) . METHOD_3 ( CHAR_2 ) , file . METHOD_2 ( ) . METHOD_3 ( CHAR_3 ) ) ; if ( ( i > 0 ) && ( i > p ) ) { VAR_1 = VAR_2 . METHOD_5 ( ) . METHOD_2 ( ) . substring ( ( i + 1 ) ) ; } return VAR_1 ; }\n", "fixed": "private static java.lang.String METHOD_1 ( java.io.File file ) { java.lang.String VAR_1 = STRING_1 ; int i = file . METHOD_2 ( ) . METHOD_3 ( CHAR_1 ) ; int p = TYPE_1 . METHOD_4 ( file . METHOD_2 ( ) . METHOD_3 ( CHAR_2 ) , file . METHOD_2 ( ) . METHOD_3 ( CHAR_3 ) ) ; if ( ( i > 0 ) && ( i > p ) ) { VAR_1 = file . METHOD_2 ( ) . substring ( ( i + 1 ) ) ; } return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( ) { try { VAR_1 = new java.io.BufferedReader ( new java.io.FileReader ( fileName ) ) ; } catch ( java.io.IOException VAR_2 ) { java.lang.System.out.println ( STRING_1 ) ; } java.util.Scanner VAR_3 = new java.util.Scanner ( VAR_4 ) ; java.lang.System.out.println ( STRING_2 ) ; while ( true ) { java.lang.System.out.print ( STRING_3 ) ; java.lang.String VAR_5 = VAR_3 . METHOD_2 ( ) ; TYPE_1 result = METHOD_3 ( VAR_5 , METHOD_4 ( ) ) ; if ( result != null ) java.lang.System.out.println ( METHOD_5 ( result ) ) ; else java.lang.System.out.println ( STRING_4 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { java.util.Scanner VAR_3 = new java.util.Scanner ( VAR_4 ) ; java.lang.System.out.println ( STRING_2 ) ; while ( true ) { try { VAR_1 = new java.io.BufferedReader ( new java.io.FileReader ( fileName ) ) ; } catch ( java.io.IOException VAR_2 ) { java.lang.System.out.println ( STRING_1 ) ; } java.lang.System.out.print ( STRING_3 ) ; java.lang.String VAR_5 = VAR_3 . METHOD_2 ( ) ; TYPE_1 result ; do { result = METHOD_3 ( VAR_5 , METHOD_4 ( ) ) ; } while ( result == null ) ; java.lang.System.out.println ( METHOD_5 ( result ) ) ; } }\n"}
{"fixCommitSHA1": "54fc510a45928b0f76eec4ec4f3e9e14db0dfb2a", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \tpublic static final Color BLACK = new Color(0, 0, 0, 1);\n \tpublic static final Color WHITE = new Color(0xffffffff);\n\tpublic static final Color LIGHT_GRAY = new Color(0x696969ff);\n \tpublic static final Color GRAY = new Color(0x7f7f7fff);\n \tpublic static final Color DARK_GRAY = new Color(0x3f3f3fff);\n \tpublic static final Color SLATE = new Color(0x708090ff);", "fixed": " \tpublic static final Color BLACK = new Color(0, 0, 0, 1);\n \tpublic static final Color WHITE = new Color(0xffffffff);\n\tpublic static final Color LIGHT_GRAY = new Color(0xbfbfbfff);\n \tpublic static final Color GRAY = new Color(0x7f7f7fff);\n \tpublic static final Color DARK_GRAY = new Color(0x3f3f3fff);\n \tpublic static final Color SLATE = new Color(0x708090ff);", "sourceBeforeFix": "new Color(0x696969ff)", "sourceAfterFix": "new Color(0xbfbfbfff)"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new TYPE_2 ( VAR_1 ) , STRING_1 , STRING_2 , STRING_1 , CHAR_1 , VAR_2 , CHAR_2 , VAR_3 ) ; TYPE_1 . METHOD_1 ( new TYPE_2 ( VAR_1 , INT_1 ) , STRING_3 , STRING_4 , STRING_3 , CHAR_3 , VAR_4 , CHAR_2 , VAR_3 ) ; if ( VAR_5 ) TYPE_1 . METHOD_2 ( VAR_6 , new TYPE_2 ( VAR_7 , INT_1 ) , 0 ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new TYPE_2 ( VAR_1 , INT_1 ) , STRING_1 , STRING_2 , STRING_1 , CHAR_1 , VAR_2 , CHAR_2 , VAR_3 ) ; TYPE_1 . METHOD_1 ( new TYPE_2 ( VAR_1 ) , STRING_3 , STRING_4 , STRING_3 , CHAR_3 , VAR_4 , CHAR_2 , VAR_3 ) ; if ( VAR_5 ) TYPE_1 . METHOD_2 ( VAR_6 , new TYPE_2 ( VAR_7 , INT_1 ) , 0 ) ; }\n"}
{"fixCommitSHA1": "d1cb70710f70a129598e92a638d536b9207aa01f", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "  * Created by russellb337 on 7/9/15.\n  */\n public interface Response {\n    ResponseImpl schema(Property property);\n    ResponseImpl description(String description);\n    ResponseImpl example(String type, Object example);\n    ResponseImpl header(String name, Property property);\n    ResponseImpl headers(Map<String, Property> headers);\n     String getDescription();", "fixed": "  * Created by russellb337 on 7/9/15.\n  */\n public interface Response {\n    Response schema(Property property);\n    Response description(String description);\n    Response example(String type, Object example);\n    Response header(String name, Property property);\n    Response headers(Map<String, Property> headers);\n     String getDescription();", "sourceBeforeFix": "ResponseImpl example(String type,Object example); ", "sourceAfterFix": "Response example(String type,Object example); "}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; METHOD_2 ( VAR_3 , VAR_1 ) ; if ( ( VAR_4 ) != null ) { TYPE_2 . METHOD_3 ( VAR_5 , STRING_1 ) ; try { METHOD_4 ( VAR_4 ) ; if ( ( VAR_6 ) != null ) VAR_6 . commit ( ) ; } catch ( TYPE_3 VAR_7 ) { TYPE_2 . METHOD_3 ( VAR_5 , VAR_7 , STRING_2 ) ; METHOD_5 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; METHOD_2 ( VAR_3 , VAR_1 ) ; if ( ( VAR_4 ) != null ) { TYPE_2 . METHOD_3 ( VAR_5 , STRING_1 ) ; try { METHOD_4 ( VAR_4 ) ; if ( ( VAR_6 ) != null ) { VAR_6 . commit ( ) ; VAR_6 = null ; } } catch ( TYPE_3 VAR_7 ) { TYPE_2 . METHOD_3 ( VAR_5 , VAR_7 , STRING_2 ) ; METHOD_5 ( ) ; } } }\n"}
{"problem": "void METHOD_1 ( java.lang.String src , java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { TYPE_1 VAR_3 = METHOD_2 ( ) . METHOD_3 ( src , true ) ; if ( VAR_3 == null ) { throw new TYPE_2 ( ( STRING_1 + src ) ) ; } if ( VAR_1 != null ) { VAR_3 . METHOD_4 ( VAR_1 ) ; } if ( VAR_2 != null ) { VAR_3 . METHOD_5 ( VAR_2 ) ; } TYPE_3 . METHOD_6 ( VAR_1 , VAR_2 ) ; }\n", "fixed": "void METHOD_1 ( java.lang.String src , java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { TYPE_1 VAR_3 = METHOD_2 ( ) . METHOD_3 ( src , true ) ; if ( VAR_3 == null ) { throw new TYPE_2 ( ( STRING_1 + src ) ) ; } TYPE_3 . METHOD_6 ( VAR_1 , VAR_2 ) ; if ( VAR_1 != null ) { VAR_3 . METHOD_4 ( VAR_1 ) ; } if ( VAR_2 != null ) { VAR_3 . METHOD_5 ( VAR_2 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\tif (!Context.isRefreshingContext())\n \t\t\t\tmementos.put(key, Context.getSchedulerService().saveToMemento());\n \t\t}\n\t\tcatch (Throwable t) {\n \t\t}\n \t}", "fixed": " \t\t\tif (!Context.isRefreshingContext())\n \t\t\t\tmementos.put(key, Context.getSchedulerService().saveToMemento());\n \t\t}\n\t\tcatch (Exception t) {\n \t\t}\n \t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"problem": "public void METHOD_1 ( java.lang.String query ) { if ( ( query . length ( ) ) >= INT_1 ) { VAR_1 = ( ( java.util.List < TYPE_1 > ) ( TYPE_2 . METHOD_1 ( VAR_1 , new TYPE_3 ( query ) ) ) ) ; METHOD_2 ( ) ; } else { VAR_1 = new java.util.ArrayList ( VAR_2 ) ; METHOD_2 ( ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String query ) { if ( ( query . length ( ) ) >= INT_1 ) { VAR_1 = ( ( java.util.List < TYPE_1 > ) ( TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( query ) ) ) ) ; METHOD_2 ( ) ; } else { VAR_1 = new java.util.ArrayList ( VAR_2 ) ; METHOD_2 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { java.util.List < TYPE_2 > VAR_1 = event . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( ( STRING_1 + ( VAR_1 . size ( ) ) ) ) ; VAR_2 = false ; java.util.List < TYPE_4 > VAR_3 = new java.util.ArrayList ( VAR_1 . size ( ) ) ; for ( TYPE_2 VAR_4 : VAR_1 ) { VAR_3 . add ( VAR_4 ) ; } METHOD_4 ( VAR_3 , VAR_5 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { java.util.List < TYPE_2 > VAR_1 = event . METHOD_2 ( ) ; VAR_2 = false ; java.util.List < TYPE_4 > VAR_3 = new java.util.ArrayList ( VAR_1 . size ( ) ) ; for ( TYPE_2 VAR_4 : VAR_1 ) { VAR_3 . add ( VAR_4 ) ; } METHOD_4 ( VAR_3 , VAR_5 ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { if ( ( ( VAR_1 . size ( ) ) > 0 ) && ( ( VAR_2 . size ( ) ) > 0 ) ) { VAR_3 . METHOD_2 ( ) ; for ( TYPE_1 item : VAR_1 ) { for ( TYPE_2 VAR_4 : VAR_2 ) { if ( ( VAR_4 . getId ( ) ) == ( item . METHOD_3 ( ) ) ) { VAR_3 . put ( item , VAR_4 ) ; } } } METHOD_4 ( ) ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( ( ( VAR_1 . size ( ) ) > 0 ) && ( ( VAR_2 . size ( ) ) > 0 ) ) { VAR_3 . METHOD_2 ( ) ; for ( TYPE_1 item : VAR_1 ) { for ( TYPE_2 VAR_4 : VAR_2 ) { if ( ( VAR_4 . getId ( ) ) == ( item . METHOD_3 ( ) ) ) { VAR_3 . put ( item , VAR_4 ) ; } } } } METHOD_4 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 context ) throws TYPE_3 { VAR_2 = ( ( TYPE_4 ) ( context . METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) ) ) ; VAR_4 = ( ( TYPE_5 ) ( context . METHOD_2 ( ) . METHOD_3 ( VAR_5 class ) ) ) ; return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 context ) throws TYPE_3 { VAR_2 = ( ( TYPE_4 ) ( context . METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) ) ) ; VAR_4 = ( ( TYPE_5 ) ( context . METHOD_2 ( ) . METHOD_3 ( VAR_5 class ) ) ) ; return super . METHOD_1 ( VAR_1 , context ) ; }\n"}
{"problem": "public java.util.Collection < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { java.util.Collection < TYPE_1 > VAR_1 = null ; try { java.util.Collection < TYPE_3 > VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 != null ) { VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 VAR_4 : VAR_2 ) VAR_1 . add ( VAR_5 . METHOD_4 ( VAR_4 , VAR_6 class ) ) ; } } catch ( TYPE_4 VAR_7 ) { throw new TYPE_2 ( ) ; } return VAR_1 ; }\n", "fixed": "public java.util.Collection < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { java.util.Collection < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; try { java.util.Collection < TYPE_3 > VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 != null ) { VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 VAR_4 : VAR_2 ) VAR_1 . add ( VAR_5 . METHOD_4 ( VAR_4 , VAR_6 class ) ) ; } } catch ( TYPE_4 VAR_7 ) { throw new TYPE_2 ( ) ; } return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_1 VAR_2 = METHOD_3 ( ) ; java.util.List < TYPE_2 > VAR_3 = new TYPE_3 ( null ) . METHOD_4 ( java.util.Arrays.asList ( VAR_1 , VAR_2 ) ) ; TYPE_4 . assertThat ( VAR_3 . get ( 0 ) . METHOD_5 ( ) ) . METHOD_6 ( VAR_4 ) ; TYPE_4 . assertThat ( VAR_3 . get ( 1 ) . METHOD_5 ( ) ) . METHOD_6 ( VAR_5 ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_1 VAR_2 = METHOD_3 ( ) ; java.util.List < TYPE_2 > VAR_3 = new TYPE_3 ( ) . METHOD_4 ( java.util.Arrays.asList ( VAR_1 , VAR_2 ) ) ; TYPE_4 . assertThat ( VAR_3 . get ( 0 ) . METHOD_5 ( ) ) . METHOD_6 ( VAR_4 ) ; TYPE_4 . assertThat ( VAR_3 . get ( 1 ) . METHOD_5 ( ) ) . METHOD_6 ( VAR_5 ) ; }\n"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"problem": "public void METHOD_1 ( ) { java.lang.System.out.println ( ( STRING_1 + ( VAR_1 ) ) ) ; VAR_1 = new java.util.Date ( ( ( new java.util.Date ( ) . getTime ( ) ) + ( ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) * ( VAR_2 [ VAR_3 ] ) ) ) ) ; if ( ( VAR_3 ) < ( ( VAR_2 . length ) - 1 ) ) ( VAR_3 ) ++ ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = new java.util.Date ( ( ( new java.util.Date ( ) . getTime ( ) ) + ( ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) * ( VAR_2 [ VAR_3 ] ) ) ) ) ; if ( ( VAR_3 ) < ( ( VAR_2 . length ) - 1 ) ) ( VAR_3 ) ++ ; }\n"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).toString();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "fixed": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "sourceBeforeFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").toString()", "sourceAfterFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").getPath()"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; TYPE_2 b = new TYPE_2 ( ) ; b . METHOD_4 ( METHOD_5 ( ) . getString ( VAR_4 ) , METHOD_5 ( ) . getString ( VAR_5 ) ) ; VAR_3 . METHOD_6 ( b ) ; VAR_3 . show ( METHOD_7 ( ) , VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_2 != null ) VAR_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; TYPE_2 b = new TYPE_2 ( ) ; b . METHOD_4 ( METHOD_5 ( ) . getString ( VAR_4 ) , METHOD_5 ( ) . getString ( VAR_5 ) ) ; VAR_3 . METHOD_6 ( b ) ; VAR_3 . show ( METHOD_7 ( ) , VAR_6 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TimerEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedTimerEndpointBuilder advanced() {\n             return (AdvancedTimerEndpointBuilder) this;\n         }", "fixed": "     \n    public interface TimerEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedTimerEndpointBuilder advanced() {\n             return (AdvancedTimerEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public int METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 ; switch ( VAR_1 ) { case STRING_1 : VAR_2 = INT_1 ; break ; case STRING_2 : VAR_2 = INT_1 ; break ; case STRING_3 : VAR_2 = 1 ; break ; case STRING_4 : VAR_2 = INT_2 ; break ; case STRING_5 : VAR_2 = INT_3 ; break ; case STRING_6 : VAR_2 = INT_4 ; break ; case STRING_7 : VAR_2 = INT_5 ; break ; default : VAR_2 = 0 ; } return VAR_2 ; }\n", "fixed": "public int METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 ; switch ( VAR_1 ) { case STRING_1 : VAR_2 = INT_1 ; break ; case STRING_2 : VAR_2 = INT_1 ; break ; case STRING_3 : VAR_2 = 1 ; break ; case STRING_4 : VAR_2 = INT_2 ; break ; case STRING_5 : VAR_2 = INT_3 ; break ; case STRING_6 : VAR_2 = INT_4 ; break ; case STRING_7 : VAR_2 = INT_5 ; break ; default : VAR_2 = - 1 ; } return VAR_2 ; }\n"}
{"problem": "public int METHOD_1 ( java.lang.String name , TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 , long value , java.lang.String VAR_4 ) { if ( value == 0L ) { return 1 ; } if ( value < 0L ) { return INT_1 ; } int i = METHOD_2 ( name , VAR_1 , VAR_2 , VAR_3 , value , VAR_4 , STRING_1 ) ; return 0 ; }\n", "fixed": "public int METHOD_1 ( java.lang.String name , TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 , long value , java.lang.String VAR_4 ) { if ( value == 0L ) { return 1 ; } if ( value < 0L ) { return INT_1 ; } METHOD_2 ( name , VAR_1 , VAR_2 , VAR_3 , value , VAR_4 , STRING_1 ) ; return 0 ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 TYPE_2 ) { boolean VAR_1 = VAR_2 . METHOD_1 ( TYPE_2 ) ; if ( VAR_1 ) { this . METHOD_2 ( TYPE_2 . getValue ( ) ) ; VAR_3 . remove ( TYPE_2 ) ; java.lang.System.out.println ( STRING_1 ) ; return true ; } else { return false ; } }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 TYPE_2 ) { boolean VAR_1 ; if ( this . METHOD_2 ( TYPE_2 . getValue ( ) ) ) { VAR_1 = VAR_2 . METHOD_1 ( TYPE_2 ) ; if ( VAR_1 ) { VAR_3 . remove ( TYPE_2 ) ; java.lang.System.out.println ( STRING_1 ) ; return VAR_1 ; } return false ; } return false ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_1 ) { if ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_2 . METHOD_3 ( ) ) ) { return VAR_3 ; } } throw new TYPE_3 ( ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_1 ) { if ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_2 . METHOD_3 ( ) ) ) { return VAR_3 ; } } throw new TYPE_3 ( VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_1 . METHOD_2 ( null ) ; try { if ( VAR_1 instanceof TYPE_2 ) { VAR_3 . remove ( VAR_1 ) ; } if ( VAR_1 instanceof TYPE_3 ) { VAR_4 . remove ( VAR_1 ) ; } if ( VAR_1 instanceof TYPE_4 ) { VAR_4 . remove ( VAR_1 ) ; } } catch ( java.lang.Exception VAR_5 ) { VAR_1 . METHOD_2 ( this ) ; } METHOD_3 ( ( ( METHOD_4 ( ) ) + VAR_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_1 . METHOD_2 ( null ) ; try { if ( VAR_1 instanceof TYPE_2 ) { VAR_3 . remove ( VAR_1 ) ; } if ( VAR_1 instanceof TYPE_3 ) { VAR_4 . remove ( VAR_1 ) ; } if ( VAR_1 instanceof TYPE_4 ) { VAR_4 . remove ( VAR_1 ) ; } } catch ( java.lang.Exception VAR_5 ) { } METHOD_3 ( ( ( METHOD_4 ( ) ) + VAR_2 ) ) ; }\n"}
{"fixCommitSHA1": "97b8bc59615d4da0c51a91fef22ab462a8d69766", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         final Object child = parseTree.getChild(tree, 1);\n         Assert.assertTrue(\"Invalid child type\", child instanceof DetailAST);\n         Assert.assertEquals(\"Invalid child token type\",\n                TokenTypes.BLOCK_COMMENT_BEGIN, ((AST) child).getType());\n     }\n     @Test", "fixed": "         final Object child = parseTree.getChild(tree, 1);\n         Assert.assertTrue(\"Invalid child type\", child instanceof DetailAST);\n         Assert.assertEquals(\"Invalid child token type\",\n                TokenTypes.BLOCK_COMMENT_BEGIN, ((DetailAST) child).getType());\n     }\n     @Test", "sourceBeforeFix": "(AST)child", "sourceAfterFix": "(DetailAST)child"}
{"problem": "public void METHOD_1 ( final java.lang.Long VAR_1 ) { if ( VAR_1 == null ) { this . VAR_1 = VAR_1 ; } else if ( VAR_1 >= ( this . VAR_1 ) ) { this . VAR_1 = VAR_1 ; } else { throw new TYPE_1 ( ( ( ( STRING_1 + ( this . VAR_1 ) ) + STRING_2 ) + VAR_1 ) ) ; } }\n", "fixed": "public void METHOD_1 ( final java.lang.Long VAR_1 ) { if ( ( this . VAR_1 ) == null ) { this . VAR_1 = VAR_1 ; } else if ( VAR_1 >= ( this . VAR_1 ) ) { this . VAR_1 = VAR_1 ; } else { throw new TYPE_1 ( ( ( ( STRING_1 + ( this . VAR_1 ) ) + STRING_2 ) + VAR_1 ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 . METHOD_2 ( ) ) { if ( VAR_1 . METHOD_3 ( ) ) { VAR_1 . setEnabled ( false ) ; VAR_3 . add ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { this . VAR_3 = new java.util.HashSet < TYPE_2 > ( ) ; for ( TYPE_1 VAR_1 : VAR_2 . METHOD_2 ( ) ) { if ( VAR_1 . METHOD_3 ( ) ) { VAR_1 . setEnabled ( false ) ; VAR_3 . add ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ; } } }\n"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String text = VAR_2 . getText ( ) ; int VAR_3 = text . METHOD_2 ( VAR_4 ) ; int VAR_5 = ( VAR_3 != ( - 1 ) ) ? VAR_3 + 1 : 0 ; METHOD_3 ( ( ( text . substring ( 0 , VAR_5 ) ) + VAR_1 ) ) ; }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String text = VAR_2 . getText ( ) ; int VAR_3 = text . METHOD_2 ( VAR_4 ) ; int VAR_5 = ( VAR_3 == ( - 1 ) ) ? 0 : VAR_3 + 1 ; METHOD_3 ( ( ( text . substring ( 0 , VAR_5 ) ) + VAR_1 ) ) ; }\n"}
{"problem": "public synchronized TYPE_1 METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) != null ) { java.util.ArrayList < TYPE_1 > VAR_3 = VAR_4 ; if ( ( VAR_1 < 0 ) || ( VAR_1 >= ( VAR_3 . size ( ) ) ) ) { return null ; } return VAR_3 . get ( VAR_1 ) ; } return null ; }\n", "fixed": "public synchronized TYPE_1 METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) != null ) { java.util.ArrayList < TYPE_1 > VAR_3 = VAR_4 ; if ( ( ( VAR_3 == null ) || ( VAR_1 < 0 ) ) || ( VAR_1 >= ( VAR_3 . size ( ) ) ) ) { return null ; } return VAR_3 . get ( VAR_1 ) ; } return null ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { if ( ! ( VAR_1 ) ) { VAR_2 . METHOD_2 ( 1L , VAR_3 ) ; status = VAR_2 . METHOD_3 ( ) ; error = ( TYPE_2 . METHOD_4 ( VAR_4 ) ) ? TYPE_3 . METHOD_5 ( VAR_4 ) : STRING_1 ; TYPE_2 . METHOD_6 ( VAR_5 , VAR_6 , VAR_7 ) ; TYPE_2 . METHOD_7 ( VAR_5 ) ; TYPE_2 . METHOD_7 ( VAR_4 ) ; VAR_1 = true ; } }\n", "fixed": "private void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { if ( ! ( VAR_1 ) ) { VAR_2 . METHOD_2 ( 1L , VAR_3 ) ; status = VAR_2 . METHOD_3 ( ) ; error = ( TYPE_2 . METHOD_4 ( VAR_4 ) ) ? TYPE_3 . METHOD_5 ( VAR_4 ) : STRING_1 ; if ( ( status ) == 0 ) { TYPE_2 . METHOD_6 ( VAR_5 , VAR_6 , VAR_7 ) ; } TYPE_2 . METHOD_7 ( VAR_5 ) ; TYPE_2 . METHOD_7 ( VAR_4 ) ; VAR_1 = true ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; TYPE_3 VAR_3 = TYPE_2 . METHOD_2 ( VAR_4 class ) ; TYPE_4 VAR_5 = new TYPE_4 ( VAR_1 , VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; METHOD_5 ( true ) ; assertEquals ( VAR_5 . METHOD_6 ( STRING_1 ) , 1 ) ; assertEquals ( VAR_5 . METHOD_6 ( STRING_2 ) , 1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; TYPE_3 VAR_3 = TYPE_2 . METHOD_2 ( VAR_4 class ) ; TYPE_4 VAR_5 = new TYPE_4 ( VAR_1 , VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( true ) ; assertEquals ( VAR_5 . METHOD_6 ( STRING_1 ) , 1 ) ; assertEquals ( VAR_5 . METHOD_6 ( STRING_2 ) , 1 ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"problem": "public void METHOD_1 ( ) { VAR_1 = new java.util.ArrayList ( ) ; VAR_2 = new java.util.ArrayList ( ) ; if ( type . equals ( STRING_1 ) ) { VAR_1 = VAR_3 . METHOD_2 ( VAR_4 ) ; } else { VAR_2 = VAR_3 . METHOD_3 ( VAR_4 , 0 , null , null , STRING_2 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = new java.util.ArrayList ( ) ; VAR_2 = new java.util.ArrayList ( ) ; if ( type . equals ( STRING_1 ) ) { VAR_1 = VAR_3 . METHOD_2 ( VAR_4 ) ; } else { VAR_2 = VAR_3 . METHOD_3 ( VAR_4 , 0 , null , null , STRING_2 ) ; } message = null ; }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { this . VAR_2 = VAR_1 ; if ( ( this . METHOD_2 ( ) . size ( ) ) > 0 ) { this . METHOD_2 ( ) . get ( 0 ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_1 ( VAR_1 ) ; } }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { if ( ( this . METHOD_2 ( ) . size ( ) ) > 0 ) { this . METHOD_2 ( ) . get ( 0 ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_1 ( VAR_1 ) ; } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 ) ; if ( VAR_1 == null ) { VAR_2 = TYPE_3 . METHOD_3 ( ) ; return ; } if ( ( ( VAR_3 ) == ( VAR_4 ) ) || ( ( VAR_3 ) == ( VAR_5 ) ) ) { METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; } else { METHOD_6 ( VAR_1 ) ; } METHOD_7 ( VAR_1 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { VAR_2 = TYPE_3 . METHOD_3 ( ) ; return ; } if ( ( ( VAR_3 ) == ( VAR_4 ) ) || ( ( VAR_3 ) == ( VAR_5 ) ) ) { METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; } else { METHOD_6 ( VAR_1 ) ; } METHOD_7 ( VAR_1 ) ; }\n"}
{"problem": "private boolean METHOD_1 ( int VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; boolean VAR_3 = false ; if ( VAR_1 == ( VAR_4 ) ) { VAR_5 = VAR_6 . getText ( ) . toString ( ) ; if ( ( VAR_5 . trim ( ) . length ( ) ) > 0 ) { METHOD_3 ( VAR_5 ) ; VAR_3 = true ; METHOD_4 ( ) ; } else { VAR_6 . setText ( STRING_2 ) ; } } return VAR_3 ; }\n", "fixed": "private boolean METHOD_1 ( int VAR_1 ) { boolean VAR_3 = false ; if ( VAR_1 == ( VAR_4 ) ) { VAR_5 = VAR_6 . getText ( ) . toString ( ) ; if ( ( VAR_5 . trim ( ) . length ( ) ) > 0 ) { METHOD_3 ( VAR_5 ) ; VAR_3 = true ; METHOD_4 ( ) ; } else { VAR_6 . setText ( STRING_2 ) ; } } return VAR_3 ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = false ; if ( METHOD_2 ( VAR_1 ) ) { TYPE_2 VAR_3 = VAR_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_3 VAR_5 = VAR_6 . METHOD_5 ( VAR_3 ) ; VAR_4 . METHOD_6 ( VAR_3 , VAR_5 ) ; VAR_6 . METHOD_7 ( VAR_4 ) ; VAR_2 = true ; METHOD_8 ( ) ; METHOD_9 ( ) ; } else if ( ! ( VAR_7 ) ) VAR_8 . add ( STRING_1 ) ; return VAR_2 ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = false ; if ( METHOD_2 ( VAR_1 ) ) { TYPE_2 VAR_3 = VAR_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_3 VAR_5 = VAR_6 . METHOD_5 ( VAR_3 ) ; VAR_4 . METHOD_6 ( VAR_3 , VAR_5 ) ; VAR_6 . METHOD_7 ( VAR_4 ) ; VAR_2 = true ; METHOD_8 ( ) ; } else if ( ! ( VAR_7 ) ) VAR_8 . add ( STRING_1 ) ; return VAR_2 ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = this . VAR_2 . METHOD_2 ( this . VAR_3 ) ; VAR_1 . METHOD_1 ( ) ; try { while ( true ) { try { while ( ! ( this . METHOD_3 ( ) ) ) { java.lang.Thread . METHOD_4 ( INT_1 ) ; } break ; } catch ( TYPE_2 VAR_4 ) { } } } catch ( java.lang.Exception VAR_4 ) { VAR_1 . METHOD_5 ( ) ; METHOD_6 ( VAR_4 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = this . VAR_2 . METHOD_2 ( this . VAR_3 ) ; VAR_1 . METHOD_1 ( ) ; while ( true ) { try { while ( ! ( this . METHOD_3 ( ) ) ) { java.lang.Thread . METHOD_4 ( INT_1 ) ; } break ; } catch ( TYPE_2 VAR_4 ) { } catch ( java.lang.Exception VAR_4 ) { VAR_1 . METHOD_5 ( ) ; METHOD_6 ( VAR_4 ) ; } } }\n"}
{"problem": "private int METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { int VAR_3 ; if ( VAR_2 == null ) { return y ; } VAR_3 = METHOD_1 ( VAR_1 , VAR_4 ) ; VAR_2 . METHOD_2 ( VAR_1 , x , VAR_3 ) ; if ( ( ( METHOD_3 ( ) ) != null ) && ( VAR_2 == ( METHOD_3 ( ) . METHOD_4 ( ) ) ) ) { METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; } return VAR_3 + INT_1 ; }\n", "fixed": "private int METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { int VAR_3 ; if ( VAR_2 == null ) { return y ; } VAR_3 = METHOD_1 ( VAR_1 , VAR_4 ) ; VAR_2 . METHOD_2 ( VAR_1 , x , VAR_3 ) ; return VAR_3 + INT_1 ; }\n"}
{"problem": "private void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ! ( VAR_2 ) ) ) { VAR_3 = ( VAR_1 . METHOD_2 ( ) ) == ( ( VAR_4 ) * ( VAR_1 . METHOD_3 ( ) ) ) ; VAR_2 = true ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ! ( VAR_2 ) ) ) { VAR_3 = ( VAR_1 . METHOD_2 ( ) ) - ( ( VAR_4 ) * ( VAR_1 . METHOD_3 ( ) ) ) ; VAR_2 = true ; } }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; java.lang.String url = getIntent ( ) . METHOD_3 ( VAR_3 ) ; TYPE_2 VAR_4 = ( ( TYPE_2 ) ( METHOD_4 ( VAR_5 ) ) ) ; VAR_4 . METHOD_5 ( new TYPE_3 ( ) ) ; TYPE_4 VAR_6 = VAR_4 . METHOD_6 ( ) ; VAR_6 . METHOD_7 ( true ) ; METHOD_8 ( url ) ; METHOD_9 ( ) . METHOD_10 ( true ) ; VAR_4 . METHOD_11 ( url ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; java.lang.String url = getIntent ( ) . METHOD_3 ( VAR_3 ) ; TYPE_2 VAR_4 = ( ( TYPE_2 ) ( METHOD_4 ( VAR_5 ) ) ) ; VAR_4 . METHOD_5 ( new TYPE_3 ( ) ) ; TYPE_4 VAR_6 = VAR_4 . METHOD_6 ( ) ; VAR_6 . METHOD_7 ( true ) ; METHOD_8 ( url ) ; METHOD_9 ( ) ; VAR_4 . METHOD_11 ( url ) ; }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) return ; if ( ( METHOD_3 ( ) ) && ( METHOD_4 ( ) ) ) { METHOD_5 ( VAR_1 , false ) ; return ; } METHOD_6 ( VAR_1 , false ) ; }\n", "fixed": "public boolean METHOD_1 ( int VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) return false ; if ( ( METHOD_3 ( ) ) && ( METHOD_4 ( ) ) ) { METHOD_5 ( VAR_1 , false ) ; return true ; } METHOD_6 ( VAR_1 , false ) ; return true ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );", "fixed": "                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"problem": "public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { if ( ( METHOD_3 ( ) ) == ( VAR_1 ) ) { METHOD_4 ( ) ; } else { METHOD_5 ( ) ; VAR_2 . METHOD_6 ( VAR_3 , VAR_4 ) ; VAR_5 = true ; } } else { METHOD_7 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { if ( ( METHOD_3 ( ) ) == ( VAR_1 ) ) { METHOD_4 ( ) ; } else { VAR_5 = true ; METHOD_5 ( ) ; VAR_2 . METHOD_6 ( VAR_3 , VAR_4 ) ; } } else { METHOD_7 ( ) ; } }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 . i ( VAR_3 , STRING_1 ) ; boolean VAR_4 = false ; if ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_5 ) ) { VAR_4 = true ; } else { VAR_6 = false ; } for ( TYPE_4 listener : VAR_7 ) { ( ( TYPE_5 ) ( listener ) ) . METHOD_3 ( VAR_8 , VAR_4 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { boolean VAR_4 = false ; if ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_5 ) ) { VAR_4 = true ; } else { VAR_6 = false ; } for ( TYPE_4 listener : VAR_7 ) { ( ( TYPE_5 ) ( listener ) ) . METHOD_3 ( VAR_8 , VAR_4 ) ; } }\n"}
{"problem": "private int [ ] METHOD_1 ( android.content.Context context , int VAR_1 ) { TYPE_1 array = context . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; int [ ] result = new int [ array . length ( ) ] ; for ( int i = 0 ; i < ( result . length ) ; i ++ ) result [ i ] = array . METHOD_4 ( i , 0 ) ; array . METHOD_5 ( ) ; return result ; }\n", "fixed": "private int [ ] METHOD_1 ( android.content.Context context , int VAR_1 ) { if ( context == null ) return null ; TYPE_1 array = context . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; int [ ] result = new int [ array . length ( ) ] ; for ( int i = 0 ; i < ( result . length ) ; i ++ ) result [ i ] = array . METHOD_4 ( i , 0 ) ; array . METHOD_5 ( ) ; return result ; }\n"}
{"fixCommitSHA1": "358697a54dd0ac6743f84084a8138f1c8d7f2a21", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\t\tLOG.debug(\"Initializing sortmerger...\");\n \t\t\tSorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,\n\t\t\t\tthis.parentTask, this.serializer, this.comparator, 32 * 1024 * 1024);\n\t\t\trunPartialSorter(sorter, NUM_RECORDS, 28);\n \t\t}\n \t\tcatch (Exception t) {\n \t\t\tt.printStackTrace();", "fixed": " \t\t\tLOG.debug(\"Initializing sortmerger...\");\n \t\t\tSorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,\n\t\t\t\tthis.parentTask, this.serializer, this.comparator, 10 * 1024 * 1024);\n\t\t\trunPartialSorter(sorter, NUM_RECORDS, 25);\n \t\t}\n \t\tcatch (Exception t) {\n \t\t\tt.printStackTrace();", "sourceBeforeFix": "32 * 1024 * 1024", "sourceAfterFix": "10 * 1024 * 1024"}
{"problem": "public static java.lang.Object METHOD_1 ( java.lang.String VAR_1 ) { synchronized ( TYPE_1 ) { java.lang.Object VAR_2 = TYPE_1 . get ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_2 = new java.lang.Object ( ) ; TYPE_1 . put ( VAR_1 , VAR_2 ) ; } return VAR_2 ; } }\n", "fixed": "public static java.lang.Object METHOD_1 ( java.lang.String VAR_1 ) { VAR_1 = VAR_1 . toLowerCase ( ) ; synchronized ( TYPE_1 ) { java.lang.Object VAR_2 = TYPE_1 . get ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_2 = new java.lang.Object ( ) ; TYPE_1 . put ( VAR_1 , VAR_2 ) ; } return VAR_2 ; } }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { if ( this . METHOD_2 ( ) ) { if ( this . METHOD_3 ( ) ) { if ( ( VAR_1 < 0 ) || ( VAR_1 >= ( this . VAR_2 . length ) ) ) { java.lang.System.out.println ( STRING_1 ) ; return ; } this . VAR_2 [ ( VAR_1 - 1 ) ] . METHOD_4 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { if ( this . METHOD_2 ( ) ) { if ( this . METHOD_3 ( ) ) { if ( ( VAR_1 <= 0 ) || ( VAR_1 > ( this . VAR_2 . length ) ) ) { java.lang.System.out.println ( STRING_1 ) ; return ; } this . VAR_2 [ ( VAR_1 - 1 ) ] . METHOD_4 ( ) ; } } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; try { VAR_3 = VAR_4 . get ( VAR_5 . METHOD_5 ( ) ) ; VAR_6 = VAR_5 . METHOD_5 ( ) ; } catch ( java.lang.Exception VAR_7 ) { } TYPE_2 VAR_8 = VAR_2 . METHOD_2 ( ) ; VAR_8 . METHOD_6 ( getString ( VAR_9 ) , VAR_6 ) ; VAR_8 . METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { try { VAR_3 = VAR_4 . get ( VAR_5 . METHOD_5 ( ) ) ; VAR_6 = VAR_5 . METHOD_5 ( ) ; } catch ( java.lang.Exception VAR_7 ) { } TYPE_2 VAR_8 = VAR_2 . METHOD_2 ( ) ; VAR_8 . METHOD_6 ( getString ( VAR_9 ) , VAR_6 ) ; VAR_8 . METHOD_4 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( ) ; this . VAR_1 = METHOD_3 ( VAR_3 ) ; view . METHOD_4 ( METHOD_5 ( VAR_3 ) ) ; view . METHOD_6 ( VAR_1 ) ; METHOD_7 ( VAR_5 , id , listener ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( ) ; this . VAR_1 = METHOD_3 ( VAR_3 ) ; view . METHOD_4 ( METHOD_5 ( VAR_3 ) ) ; view . METHOD_6 ( this . VAR_1 ) ; METHOD_7 ( VAR_5 , id , listener ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 p , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( FLOAT_1 , FLOAT_1 ) ; VAR_2 . position ( new TYPE_4 ( java.lang.Double . METHOD_4 ( p . METHOD_5 ( ) ) , java.lang.Double . METHOD_4 ( p . METHOD_6 ( ) ) ) ) ; VAR_2 . title ( p . getName ( ) ) ; TYPE_5 VAR_3 = VAR_4 . METHOD_1 ( VAR_2 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 p , TYPE_2 VAR_1 ) { if ( ( VAR_4 ) != null ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( FLOAT_1 , FLOAT_1 ) ; VAR_2 . position ( new TYPE_4 ( java.lang.Double . METHOD_4 ( p . METHOD_5 ( ) ) , java.lang.Double . METHOD_4 ( p . METHOD_6 ( ) ) ) ) ; VAR_2 . title ( p . getName ( ) ) ; TYPE_5 VAR_3 = VAR_4 . METHOD_1 ( VAR_2 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.io.InputStream VAR_2 = VAR_3 class . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; VAR_4 = new TYPE_1 ( VAR_2 ) . build ( ) ; TYPE_2 . METHOD_4 ( VAR_5 , \"true\" ) ; TYPE_2 . METHOD_4 ( STRING_2 , \"true\" ) ; VAR_6 = METHOD_5 ( INT_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.io.InputStream VAR_2 = VAR_3 class . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; VAR_4 = new TYPE_1 ( VAR_2 ) . build ( ) ; TYPE_2 . METHOD_4 ( VAR_5 , \"true\" ) ; TYPE_2 . METHOD_4 ( STRING_2 , \"true\" ) ; }\n"}
{"problem": "public void METHOD_1 ( int n ) { VAR_1 . METHOD_2 ( n ) ; VAR_2 = new TYPE_1 [ n ] ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { VAR_2 [ i ] = new TYPE_1 ( VAR_1 , i ) ; if ( ( ( VAR_1 . getType ( ) ) != ( VAR_3 ) ) || ( i > 0 ) ) VAR_2 [ i ] . start ( ) ; } }\n", "fixed": "public void METHOD_1 ( int n ) { VAR_1 . METHOD_2 ( n ) ; VAR_2 = new TYPE_1 [ n ] ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { VAR_2 [ i ] = new TYPE_1 ( VAR_1 , i ) ; if ( ( ( VAR_1 . getType ( ) ) != ( VAR_3 ) ) || ( i > 0 ) ) new java.lang.Thread ( VAR_2 [ i ] ) . start ( ) ; } }\n"}
{"problem": "void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) . iterator ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; for ( TYPE_2 VAR_3 : VAR_2 . METHOD_2 ( ) ) { VAR_3 . METHOD_5 ( ( VAR_1 == ( VAR_4 ) ? VAR_5 : VAR_4 ) ) ; } }\n", "fixed": "void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) . iterator ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_1 == null ) { VAR_1 = VAR_4 ; } for ( TYPE_2 VAR_3 : VAR_2 . METHOD_2 ( ) ) { VAR_3 . METHOD_5 ( ( VAR_1 == ( VAR_4 ) ? VAR_5 : VAR_4 ) ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 response ) { TYPE_4 VAR_3 = VAR_2 . METHOD_2 ( ) ; TYPE_5 VAR_4 = ( ( TYPE_5 ) ( VAR_3 . METHOD_3 ( VAR_5 ) ) ) ; if ( VAR_4 == null ) { VAR_3 . METHOD_4 ( ) ; return STRING_1 ; } else { return VAR_6 ; } }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_4 VAR_3 = VAR_2 . METHOD_2 ( ) ; TYPE_5 VAR_4 = ( ( TYPE_5 ) ( VAR_3 . METHOD_3 ( VAR_5 ) ) ) ; if ( VAR_4 == null ) { return STRING_1 ; } else { return VAR_6 ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"problem": "private synchronized void METHOD_1 ( final TYPE_1 msg ) { if ( VAR_1 ) { METHOD_2 ( value , msg ) ; } else { if ( VAR_2 ) { return ; } if ( ( VAR_3 ) == null ) { VAR_3 = new java.util.ArrayList < > ( 1 ) ; } VAR_3 . add ( msg ) ; } }\n", "fixed": "public synchronized void METHOD_1 ( final TYPE_1 msg ) { if ( VAR_1 ) { METHOD_2 ( value , msg ) ; } else { if ( VAR_2 ) { return ; } if ( ( VAR_3 ) == null ) { VAR_3 = new java.util.ArrayList < > ( 1 ) ; } VAR_3 . add ( msg ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 event ) { try { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_2 ( event ) ; VAR_2 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) . add ( event ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; VAR_2 . METHOD_6 ( ) . commit ( ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_4 . error ( VAR_3 ) ; return false ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 event ) { try { VAR_2 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) . add ( event ) ; VAR_2 . METHOD_6 ( ) . commit ( ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_4 . error ( VAR_3 ) ; return false ; } return true ; }\n"}
{"problem": "public static java.lang.String METHOD_1 ( java.lang.String text ) { int VAR_1 = INT_1 ; if ( ( text . length ( ) ) <= VAR_1 ) { return text ; } else { return ( text . substring ( 0 , ( VAR_1 + 1 ) ) ) + STRING_1 ; } }\n", "fixed": "public static java.lang.String METHOD_1 ( java.lang.String text ) { int VAR_1 = INT_1 ; if ( ( text == null ) || ( ( text . length ( ) ) <= VAR_1 ) ) { return text ; } else { return ( text . substring ( 0 , ( VAR_1 + 1 ) ) ) + STRING_1 ; } }\n"}
{"problem": "public long METHOD_1 ( TYPE_1 source ) throws java.io.IOException { long VAR_1 = source . METHOD_2 ( ) ; if ( VAR_1 == 0 ) return 0 ; METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; try { if ( ( VAR_3 ) || ( VAR_4 ) ) { throw new TYPE_2 ( ) ; } return METHOD_5 ( source ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }\n", "fixed": "public long METHOD_1 ( TYPE_1 source ) throws java.io.IOException { METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; try { if ( ( VAR_3 ) || ( VAR_4 ) ) { throw new TYPE_2 ( ) ; } return METHOD_5 ( source ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }\n"}
{"problem": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; TYPE_4 VAR_6 = ( ( TYPE_4 ) ( VAR_4 . METHOD_3 ( VAR_7 ) ) ) ; VAR_6 . METHOD_4 ( new TYPE_5 ( getContext ( ) ) ) ; TYPE_6 VAR_8 = new TYPE_6 ( METHOD_5 ( INT_1 ) ) ; VAR_6 . METHOD_6 ( VAR_8 ) ; VAR_6 . METHOD_7 ( VAR_9 ) ; return VAR_4 ; }\n", "fixed": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; TYPE_4 VAR_6 = ( ( TYPE_4 ) ( VAR_4 . METHOD_3 ( VAR_7 ) ) ) ; VAR_6 . METHOD_4 ( new TYPE_5 ( getContext ( ) ) ) ; TYPE_6 VAR_8 = new TYPE_6 ( METHOD_5 ( INT_1 ) , null ) ; VAR_6 . METHOD_6 ( VAR_8 ) ; VAR_6 . METHOD_7 ( VAR_9 ) ; return VAR_4 ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 ) ) { VAR_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_4 . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ; VAR_3 . METHOD_2 ( METHOD_6 ( ) . METHOD_3 ( ) ) ; VAR_1 = VAR_3 ; VAR_5 = false ; VAR_3 . METHOD_7 ( ) ; } else { VAR_4 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; VAR_1 = VAR_2 ; VAR_5 = true ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 ) ) { VAR_4 . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ; VAR_1 = VAR_3 ; VAR_5 = false ; } else { VAR_4 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; VAR_1 = VAR_2 ; VAR_5 = true ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { VAR_1 = VAR_1 . replace ( STRING_1 , STRING_2 ) ; TYPE_1 VAR_4 = METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) VAR_4 = new TYPE_1 ( ) . METHOD_3 ( VAR_1 ) ; VAR_4 . METHOD_4 ( VAR_2 ) . METHOD_5 ( VAR_3 ) ; TYPE_2 . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( VAR_4 ) . METHOD_9 ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { TYPE_1 VAR_4 = METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) VAR_4 = new TYPE_1 ( ) . METHOD_3 ( VAR_1 ) ; VAR_4 . METHOD_4 ( VAR_2 ) . METHOD_5 ( VAR_3 ) ; TYPE_2 . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( VAR_4 ) . METHOD_9 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( boolean VAR_1 ) { int VAR_2 = 1 < < 0 ; int VAR_3 = VAR_4 . METHOD_2 ( ( ( VAR_5 ) + ( offset ) ) ) ; if ( VAR_1 ) { VAR_3 |= VAR_2 ; } else { VAR_2 = ~ VAR_2 ; VAR_2 &= INT_1 ; VAR_3 &= VAR_2 ; } VAR_4 . METHOD_3 ( ( ( VAR_5 ) + ( offset ) ) , VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( boolean VAR_1 ) { final int VAR_2 = 1 < < 0 ; int VAR_3 = VAR_4 . METHOD_2 ( ( ( VAR_5 ) + ( offset ) ) ) ; if ( VAR_1 ) { VAR_3 |= VAR_2 ; } else { VAR_3 &= ~ VAR_2 ; } VAR_4 . METHOD_3 ( ( ( VAR_5 ) + ( offset ) ) , VAR_3 ) ; }\n"}
{"problem": "private static void METHOD_1 ( ) { TYPE_1 [ ] VAR_1 = TYPE_2 . METHOD_2 ( ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { if ( ! ( TYPE_3 . METHOD_2 ( ) . contains ( VAR_2 ) ) ) TYPE_3 . METHOD_3 ( VAR_2 ) ; } }\n", "fixed": "public static void METHOD_1 ( ) { TYPE_1 [ ] VAR_1 = TYPE_2 . METHOD_2 ( ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { if ( ! ( TYPE_3 . METHOD_2 ( ) . contains ( VAR_2 ) ) ) TYPE_3 . METHOD_3 ( VAR_2 ) ; } }\n"}
{"problem": "private static int METHOD_1 ( java.io.InputStream VAR_1 , byte [ ] buffer , int offset ) throws java.io.IOException { final int length = ( buffer . length ) - offset ; int VAR_2 ; for ( VAR_2 = 0 ; VAR_2 < length ; ) { int n = VAR_1 . METHOD_1 ( buffer , ( offset + VAR_2 ) , ( length - VAR_2 ) ) ; if ( 0 > n ) { if ( 0 == VAR_2 ) { return n ; } break ; } VAR_2 += n ; } return VAR_2 ; }\n", "fixed": "private static int METHOD_1 ( java.io.InputStream VAR_1 , byte [ ] buffer , int size , int offset ) throws java.io.IOException { final int length = size - offset ; int VAR_2 ; for ( VAR_2 = 0 ; VAR_2 < length ; ) { int n = VAR_1 . METHOD_1 ( buffer , ( offset + VAR_2 ) , ( length - VAR_2 ) ) ; if ( 0 > n ) { if ( 0 == VAR_2 ) { return n ; } break ; } VAR_2 += n ; } return VAR_2 ; }\n"}
