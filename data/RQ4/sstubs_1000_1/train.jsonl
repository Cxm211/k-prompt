{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    private static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "0d35621b5c32f5d64ba2056c143d4bc351615c81", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    */\n   private transient Predicate<JSType> validator;\n  \n  private List<PropertyContinuation> propertyContinuations = null;\n   /**\n    * Template types defined on a named, not yet resolved type, or {@code null} if none. These are", "fixed": "    */\n   private transient Predicate<JSType> validator;\n  \n  private transient List<PropertyContinuation> propertyContinuations = null;\n   /**\n    * Template types defined on a named, not yet resolved type, or {@code null} if none. These are", "sourceBeforeFix": "2", "sourceAfterFix": "130"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "a833198dd3994b8496f9a42bc1034a961399e596", "projectName": "stanfordnlp.CoreNLP", "bugType": "Same Function More Args", "problem": "     put(STANFORD_DEPENDENCIES,             new LinkedHashSet<>(Arrays.asList(STANFORD_TOKENIZE, STANFORD_SSPLIT, STANFORD_POS)));\n     put(STANFORD_NATLOG,                   new LinkedHashSet<>(Arrays.asList(STANFORD_TOKENIZE, STANFORD_SSPLIT, STANFORD_POS, STANFORD_LEMMA, STANFORD_DEPENDENCIES)));\n     put(STANFORD_OPENIE,                   new LinkedHashSet<>(Arrays.asList(STANFORD_TOKENIZE, STANFORD_SSPLIT, STANFORD_POS, STANFORD_LEMMA, STANFORD_DEPENDENCIES, STANFORD_NATLOG)));\n    put(STANFORD_QUOTE,                    new LinkedHashSet<>(Arrays.asList(STANFORD_TOKENIZE, STANFORD_SSPLIT)));\n     put(STANFORD_QUOTE_ATTRIBUTION,        new LinkedHashSet<>(Arrays.asList(STANFORD_TOKENIZE, STANFORD_SSPLIT, STANFORD_POS, STANFORD_LEMMA, STANFORD_NER, STANFORD_COREF_MENTION, STANFORD_DEPENDENCIES, STANFORD_QUOTE)));\n     put(STANFORD_UD_FEATURES,              new LinkedHashSet<>(Arrays.asList(STANFORD_TOKENIZE, STANFORD_SSPLIT, STANFORD_POS, STANFORD_DEPENDENCIES)));\n     put(STANFORD_LINK,                     new LinkedHashSet<>(Arrays.asList(STANFORD_TOKENIZE, STANFORD_SSPLIT, STANFORD_POS, STANFORD_DEPENDENCIES, STANFORD_LEMMA, STANFORD_NER, STANFORD_ENTITY_MENTIONS)));", "fixed": "     put(STANFORD_DEPENDENCIES,             new LinkedHashSet<>(Arrays.asList(STANFORD_TOKENIZE, STANFORD_SSPLIT, STANFORD_POS)));\n     put(STANFORD_NATLOG,                   new LinkedHashSet<>(Arrays.asList(STANFORD_TOKENIZE, STANFORD_SSPLIT, STANFORD_POS, STANFORD_LEMMA, STANFORD_DEPENDENCIES)));\n     put(STANFORD_OPENIE,                   new LinkedHashSet<>(Arrays.asList(STANFORD_TOKENIZE, STANFORD_SSPLIT, STANFORD_POS, STANFORD_LEMMA, STANFORD_DEPENDENCIES, STANFORD_NATLOG)));\n    put(STANFORD_QUOTE,                    new LinkedHashSet<>(Arrays.asList(STANFORD_TOKENIZE, STANFORD_SSPLIT, STANFORD_POS, STANFORD_LEMMA, STANFORD_NER)));\n     put(STANFORD_QUOTE_ATTRIBUTION,        new LinkedHashSet<>(Arrays.asList(STANFORD_TOKENIZE, STANFORD_SSPLIT, STANFORD_POS, STANFORD_LEMMA, STANFORD_NER, STANFORD_COREF_MENTION, STANFORD_DEPENDENCIES, STANFORD_QUOTE)));\n     put(STANFORD_UD_FEATURES,              new LinkedHashSet<>(Arrays.asList(STANFORD_TOKENIZE, STANFORD_SSPLIT, STANFORD_POS, STANFORD_DEPENDENCIES)));\n     put(STANFORD_LINK,                     new LinkedHashSet<>(Arrays.asList(STANFORD_TOKENIZE, STANFORD_SSPLIT, STANFORD_POS, STANFORD_DEPENDENCIES, STANFORD_LEMMA, STANFORD_NER, STANFORD_ENTITY_MENTIONS)));", "sourceBeforeFix": "Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT)", "sourceAfterFix": "Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT,STANFORD_POS,STANFORD_LEMMA,STANFORD_NER)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1ec8e822a17c37826b0a5df3b79ca03b4b528f1c", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t\t@Bean\n \t\t@ConditionalOnMissingBean\n\t\tRestClientBuilder restClientBuilder(RestClientProperties properties,\n \t\t\t\tObjectProvider<RestClientBuilderCustomizer> builderCustomizers) {\n \t\t\tHttpHost[] hosts = properties.getUris().stream().map(HttpHost::create).toArray(HttpHost[]::new);\n \t\t\tRestClientBuilder builder = RestClient.builder(hosts);", "fixed": " \t\t@Bean\n \t\t@ConditionalOnMissingBean\n\t\tpublic RestClientBuilder restClientBuilder(RestClientProperties properties,\n \t\t\t\tObjectProvider<RestClientBuilderCustomizer> builderCustomizers) {\n \t\t\tHttpHost[] hosts = properties.getUris().stream().map(HttpHost::create).toArray(HttpHost[]::new);\n \t\t\tRestClientBuilder builder = RestClient.builder(hosts);", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5221c15e183cb7029a305766d137d909f77e8941", "projectName": "google.guice", "bugType": "Change Identifier Used", "problem": "     this.source = checkNotNull(source, \"source\");\n     this.classMatcher = checkNotNull(classMatcher, \"classMatcher\");\n     this.methodMatcher = checkNotNull(methodMatcher, \"methodMatcher\");\n    this.interceptors = ImmutableList.of(interceptors);\n   }\n   public Object getSource() {", "fixed": "     this.source = checkNotNull(source, \"source\");\n     this.classMatcher = checkNotNull(classMatcher, \"classMatcher\");\n     this.methodMatcher = checkNotNull(methodMatcher, \"methodMatcher\");\n    this.interceptors = ImmutableList.copyOf(interceptors);\n   }\n   public Object getSource() {", "sourceBeforeFix": "ImmutableList.of(interceptors)", "sourceAfterFix": "ImmutableList.copyOf(interceptors)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1addbe163ae49ab0b942496713471c735422e638", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "                       .put(\"created_date\", new DateTime().toString())\n                       .put(\"start\", segment.getInterval().getStart().toString())\n                       .put(\"end\", segment.getInterval().getEnd().toString())\n                      .put(\"partitioned\", (segment.getShardSpec() instanceof NoneShardSpec) ? 0 : 1)\n                       .put(\"version\", segment.getVersion())\n                       .put(\"used\", true)\n                      .put(\"payload\", mapper.writeValueAsString(segment))\n                       .build()\n               );", "fixed": "                       .put(\"created_date\", new DateTime().toString())\n                       .put(\"start\", segment.getInterval().getStart().toString())\n                       .put(\"end\", segment.getInterval().getEnd().toString())\n                      .put(\"partitioned\", (segment.getShardSpec() instanceof NoneShardSpec) ? false : true)\n                       .put(\"version\", segment.getVersion())\n                       .put(\"used\", true)\n                      .put(\"payload\", mapper.writeValueAsBytes(segment))\n                       .build()\n               );", "sourceBeforeFix": "mapper.writeValueAsString(segment)", "sourceAfterFix": "mapper.writeValueAsBytes(segment)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ThriftEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedThriftEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ThriftEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedThriftEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "e3eb6f09ecc61830a2dc018871ddeca2c53c4cbc", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "static String FAILOVER_ON_INITIAL_CONNECTION_METHOD = \"failoverOnInitialConnection\";\nstatic String FAILOVER_ON_SERVER_SHUTDOWN_METHOD = \"failoverOnServerShutdown\";\n     static String GROUP_ID_METHOD = \"groupId\";\n    static String LOAD_BALANCE_POLICY_CLASS_NAME_METHOD = \"loadBalancePolicyClassName\";\nstatic String MAX_RETRY_INTERVAL_METHOD = \"maxRetryInterval\";\n     static String MIN_LARGE_MESSAGE_SIZE_METHOD = \"minLargeMessageSize\";\n     static String PRE_ACK_METHOD = \"preAcknowledge\";", "fixed": "static String FAILOVER_ON_INITIAL_CONNECTION_METHOD = \"failoverOnInitialConnection\";\nstatic String FAILOVER_ON_SERVER_SHUTDOWN_METHOD = \"failoverOnServerShutdown\";\n     static String GROUP_ID_METHOD = \"groupId\";\n    static String LOAD_BALANCING_POLICY_CLASS_NAME_METHOD = \"loadBalancingPolicyClassName\";\nstatic String MAX_RETRY_INTERVAL_METHOD = \"maxRetryInterval\";\n     static String MIN_LARGE_MESSAGE_SIZE_METHOD = \"minLargeMessageSize\";\n     static String PRE_ACK_METHOD = \"preAcknowledge\";", "sourceBeforeFix": "new PooledCFAttribute(LOAD_BALANCING_CLASS_NAME,LOAD_BALANCE_POLICY_CLASS_NAME_METHOD)", "sourceAfterFix": "new PooledCFAttribute(LOAD_BALANCING_CLASS_NAME,LOAD_BALANCING_POLICY_CLASS_NAME_METHOD)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2b0752b688e6f27129f344050787e9546adc004a", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 5000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "fixed": "     @Test\n     public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 10000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedLinkedInEndpointBuilder\n             extends\n                 AdvancedLinkedInEndpointConsumerBuilder, AdvancedLinkedInEndpointProducerBuilder {\n         default LinkedInEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedLinkedInEndpointBuilder\n             extends\n                 AdvancedLinkedInEndpointConsumerBuilder, AdvancedLinkedInEndpointProducerBuilder {\n         default LinkedInEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",", "fixed": "                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glGetShader(shader,pname,params)", "sourceAfterFix": "GL20.glGetShaderiv(shader,pname,params)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BeanstalkEndpointBuilder\n             extends\n                 BeanstalkEndpointConsumerBuilder, BeanstalkEndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointBuilder advanced() {", "fixed": "     \n    public interface BeanstalkEndpointBuilder\n             extends\n                 BeanstalkEndpointConsumerBuilder, BeanstalkEndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a536b4a6a33b85f40af44fca53b33d8c0d8656a1", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();", "fixed": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();", "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0", "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"}
{"fixCommitSHA1": "ea2aedf398263a18ebda9343e97127686a2f61d9", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     mThriftServer = createThriftServer();\n     mWorkerNetAddress =\n         new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()\n            .getCanonicalHostName(), thriftServerPort, mDataServer.getPort());\n     int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);", "fixed": "     mThriftServer = createThriftServer();\n     mWorkerNetAddress =\n         new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()\n            .getHostAddress(), thriftServerPort, mDataServer.getPort());\n     int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);", "sourceBeforeFix": "BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName()", "sourceAfterFix": "BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Olingo4EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOlingo4EndpointProducerBuilder advanced() {", "fixed": "     \n    public interface Olingo4EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOlingo4EndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "20e6e9afcad4cf6ba8ac455becbcddd7f9e36284", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param currentContents\n      *            content of checked file.\n      **/\n    public CommentSuppressor(FileContents currentContents) {\n         this.currentContents = currentContents;\n     }", "fixed": "      * @param currentContents\n      *            content of checked file.\n      **/\n    CommentSuppressor(FileContents currentContents) {\n         this.currentContents = currentContents;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8ad270d80cf8e4743af883b5a7c863cc638bff48", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "             }\n         }).start();\n         latch.await();\n        assertTrue(lock.tryLock(3, TimeUnit.SECONDS));\n         assertTrue(lock.isLocked());\n         assertTrue(lock.isLockedByCurrentThread());", "fixed": "             }\n         }).start();\n         latch.await();\n        assertTrue(lock.tryLock(30, TimeUnit.SECONDS));\n         assertTrue(lock.isLocked());\n         assertTrue(lock.isLockedByCurrentThread());", "sourceBeforeFix": "lock.tryLock(3,TimeUnit.SECONDS)", "sourceAfterFix": "lock.tryLock(30,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "eafa92d908c571ad0d3c9432583a318cc86733bb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Wrong Function Name", "problem": "         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n        assertEquals(resp.getHeader(\"target\"), target);\n         client.close();\n     }", "fixed": "         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n        assertEquals(resp.getHeader(\"target\"), \"/\");\n         client.close();\n     }", "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "fixed": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic abstract int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KinesisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKinesisEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KinesisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKinesisEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "fixed": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = this.response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         populateNearCache(clientMap, 1000);\n        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();", "fixed": "         populateNearCache(clientMap, 1000);\n        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();", "sourceBeforeFix": "hazelcastFactory.newHazelcastInstance()", "sourceAfterFix": "hazelcastFactory.newHazelcastInstance(newConfig())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MsvEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedMsvEndpointBuilder advanced() {\n             return (AdvancedMsvEndpointBuilder) this;\n         }", "fixed": "     \n    public interface MsvEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedMsvEndpointBuilder advanced() {\n             return (AdvancedMsvEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void compact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    compact(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void compact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    compact(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableOrRegionName)"}
{"fixCommitSHA1": "ae59e41fb8dfd5e672edc822fe16f3306ca87002", "projectName": "neo4j.neo4j", "bugType": "Change Modifier", "problem": "         this.base = base.getAbsoluteFile();\n     }\n    private void recursiveDelete( File file )\n     {\n         File[] files = file.listFiles();\n         if ( files != null ) for ( File each : files )", "fixed": "         this.base = base.getAbsoluteFile();\n     }\n    public static void recursiveDelete( File file )\n     {\n         File[] files = file.listFiles();\n         if ( files != null ) for ( File each : files )", "sourceBeforeFix": "2", "sourceAfterFix": "9"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "5ba6ded7e01cc902e75403dac6cb5c5f9d74f74d", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "fixed": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCoAPEndpointBuilder\n             extends\n                 AdvancedCoAPEndpointConsumerBuilder, AdvancedCoAPEndpointProducerBuilder {\n         default CoAPEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCoAPEndpointBuilder\n             extends\n                 AdvancedCoAPEndpointConsumerBuilder, AdvancedCoAPEndpointProducerBuilder {\n         default CoAPEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "7f4ede5a12b6a6056d545edcbcba8754e7d05624", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         LdapContext ctx = getWiredContext(ldapServer);\n         SimpleRegistry reg = new SimpleRegistry();\n        reg.put(\"localhost:\" + port, ctx);\n         camel = new DefaultCamelContext(reg);\n         template = camel.createProducerTemplate();\n     }", "fixed": "         LdapContext ctx = getWiredContext(ldapServer);\n         SimpleRegistry reg = new SimpleRegistry();\n        reg.bind(\"localhost:\" + port, ctx);\n         camel = new DefaultCamelContext(reg);\n         template = camel.createProducerTemplate();\n     }", "sourceBeforeFix": "reg.put(\"localhost:\" + port,ctx)", "sourceAfterFix": "reg.bind(\"localhost:\" + port,ctx)"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\ngetResponse(\"http:", "fixed": " \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\ngetResponse(\"http:", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JooqEndpointBuilder\n             extends\n                 JooqEndpointConsumerBuilder, JooqEndpointProducerBuilder {\n         default AdvancedJooqEndpointBuilder advanced() {", "fixed": "     \n    public interface JooqEndpointBuilder\n             extends\n                 JooqEndpointConsumerBuilder, JooqEndpointProducerBuilder {\n         default AdvancedJooqEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JGroupsRaftEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJGroupsRaftEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface JGroupsRaftEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJGroupsRaftEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ed67a827cb18cf93047bac111b4f22aa0b307a9b", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         template.sendBodyAndHeader(\"direct:start\", \"A\", \"id\", 123);\n         template.sendBodyAndHeader(\"direct:start\", \"B\", \"id\", 123);\n        Thread.sleep(3000);\n         mock.assertIsSatisfied();", "fixed": "         template.sendBodyAndHeader(\"direct:start\", \"A\", \"id\", 123);\n         template.sendBodyAndHeader(\"direct:start\", \"B\", \"id\", 123);\n        Thread.sleep(4000);\n         mock.assertIsSatisfied();", "sourceBeforeFix": "Thread.sleep(3000)", "sourceAfterFix": "Thread.sleep(4000)"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         \n        int getTotal() {\n             return total;\n         }\n     }", "fixed": "         \n        private int getTotal() {\n             return total;\n         }\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface InfluxDbEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedInfluxDbEndpointBuilder advanced() {\n             return (AdvancedInfluxDbEndpointBuilder) this;\n         }", "fixed": "     \n    public interface InfluxDbEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedInfluxDbEndpointBuilder advanced() {\n             return (AdvancedInfluxDbEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "bc42c31387e272b70f2418debbb1601519b44d0f", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": " public final class QuartzHelper {\n    public static final Logger LOG = LoggerFactory.getLogger(QuartzEndpoint.class);\n     private QuartzHelper() {\n     }\n     public static String getQuartzContextName(CamelContext camelContext) {", "fixed": " public final class QuartzHelper {\n    public static final Logger LOG = LoggerFactory.getLogger(QuartzHelper.class);\n     private QuartzHelper() {\n     }\n     public static String getQuartzContextName(CamelContext camelContext) {", "sourceBeforeFix": "QuartzEndpoint.class", "sourceAfterFix": "QuartzHelper.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param methodDef method definition token.\n      * @return true if a method has a javadoc comment.\n      */\n    private boolean hasJavadocComment(DetailAST methodDef) {\n         final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);\n         return modifiers.branchContains(TokenTypes.BLOCK_COMMENT_BEGIN);\n     }", "fixed": "      * @param methodDef method definition token.\n      * @return true if a method has a javadoc comment.\n      */\n    private static boolean hasJavadocComment(DetailAST methodDef) {\n         final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);\n         return modifiers.branchContains(TokenTypes.BLOCK_COMMENT_BEGIN);\n     }", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "031bc6f277b7b3f7160b2877db8005a79d5a3371", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": " public class FileLengthCheck extends Check\n {\n     \n    int mMaxFileLength = 2000;\n     \n     public int[] getDefaultTokens()", "fixed": " public class FileLengthCheck extends Check\n {\n     \n    private int mMaxFileLength = 2000;\n     \n     public int[] getDefaultTokens()", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "d665948a146abc494f84ee16f9a1ba9af1b5f339", "projectName": "neo4j.neo4j", "bugType": "Same Function More Args", "problem": "                     {\n                         throw new WebApplicationException( badRequest( e ) );\n                     }\n                    throw new WebApplicationException( serverError( e ) );\n                 }\n                 finally\n                 {", "fixed": "                     {\n                         throw new WebApplicationException( badRequest( e ) );\n                     }\n                    throw new WebApplicationException( e, serverError( e ) );\n                 }\n                 finally\n                 {", "sourceBeforeFix": "new WebApplicationException(serverError(e))", "sourceAfterFix": "new WebApplicationException(e,serverError(e))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body);\n }", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.set(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "fixed": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.get(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void rename(int fileId, String dstPath) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void rename(int fileId, String dstPath) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9be644847ecd6c621d8267acebc7c0aa0f13063b", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "     return Arrays.<Module>asList(\n         new SimpleModule(\"KafkaEightFirehoseModule\")\n             .registerSubtypes(\n                new NamedType(KafkaEightDruidModule.class, \"kafka-0.8\")\n             )\n     );\n   }", "fixed": "     return Arrays.<Module>asList(\n         new SimpleModule(\"KafkaEightFirehoseModule\")\n             .registerSubtypes(\n                new NamedType(KafkaEightFirehoseFactory.class, \"kafka-0.8\")\n             )\n     );\n   }", "sourceBeforeFix": "KafkaEightDruidModule.class", "sourceAfterFix": "KafkaEightFirehoseFactory.class"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "1fa1669dbb0e9f63856074e1691985fa476166f9", "projectName": "libgdx.libgdx", "bugType": "Same Function Swap Args", "problem": " \t\tif (region.rotate) {\n \t\t\tBufferedImage srcImage = page.getSubimage(region.left, region.top, region.height, region.width);\n\t\t\tsplitImage = new BufferedImage(region.height, region.width, page.getType());\n \t\t\tAffineTransform transform = new AffineTransform();\n \t\t\ttransform.rotate(Math.toRadians(90.0));", "fixed": " \t\tif (region.rotate) {\n \t\t\tBufferedImage srcImage = page.getSubimage(region.left, region.top, region.height, region.width);\n\t\t\tsplitImage = new BufferedImage(region.width, region.height, page.getType());\n \t\t\tAffineTransform transform = new AffineTransform();\n \t\t\ttransform.rotate(Math.toRadians(90.0));", "sourceBeforeFix": "new BufferedImage(region.height,region.width,page.getType())", "sourceAfterFix": "new BufferedImage(region.width,region.height,page.getType())"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback);\n     @GET\n     @Consumes({ \"*/*\" })", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback) throws Exception;\n     @GET\n     @Consumes({ \"*/*\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fb5ffe6bfddb8dda8a2b1a1a25e48abe0a853e30", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "     OriginalType annotation = type.getOriginalType();\n     if (annotation == OriginalType.LIST) {\n       return HiveCollectionConverter.forList(type, parent, index);\n    } else if (annotation == OriginalType.MAP) {\n       return HiveCollectionConverter.forMap(type, parent, index);\n     }", "fixed": "     OriginalType annotation = type.getOriginalType();\n     if (annotation == OriginalType.LIST) {\n       return HiveCollectionConverter.forList(type, parent, index);\n    } else if (annotation == OriginalType.MAP || annotation == OriginalType.MAP_KEY_VALUE) {\n       return HiveCollectionConverter.forMap(type, parent, index);\n     }", "sourceBeforeFix": "annotation == OriginalType.MAP", "sourceAfterFix": "annotation == OriginalType.MAP || annotation == OriginalType.MAP_KEY_VALUE"}
{"fixCommitSHA1": "dd80647fbf218880e5f8d72441d080b6c92778fa", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\t\t\tthrow new GdxRuntimeException(\"Error during Vorbis decoding.\");\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t} else {\r\n \t\t\t\t\t\tbytes = 0;\r", "fixed": " \t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\t\t\tthrow new GdxRuntimeException(\"Error during Vorbis decoding.\", e);\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t} else {\r\n \t\t\t\t\t\tbytes = 0;\r", "sourceBeforeFix": "new GdxRuntimeException(\"Failure reading Vorbis.\")", "sourceAfterFix": "new GdxRuntimeException(\"Failure reading Vorbis.\",e)"}
{"fixCommitSHA1": "e0c041b68103957cb758859ff0799bbb6c15d5db", "projectName": "jersey.jersey", "bugType": "Change Identifier Used", "problem": " \t\tappend(sb, \"algorithm\", digest_algorithm.toString(), false);\n \t\tappend(sb, \"qop\", digest_qop.toString(), false);\n\t\tString uri = requestContext.getUri().getPath();\n \t\tappend(sb, \"uri\", uri);\n \t\tString ha1;", "fixed": " \t\tappend(sb, \"algorithm\", digest_algorithm.toString(), false);\n \t\tappend(sb, \"qop\", digest_qop.toString(), false);\n\t\tString uri = requestContext.getUri().getRawPath();\n \t\tappend(sb, \"uri\", uri);\n \t\tString ha1;", "sourceBeforeFix": "requestContext.getUri().getPath()", "sourceAfterFix": "requestContext.getUri().getRawPath()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "97dc0ab1bd49e5d7644b91bc07c56d759aa84cfa", "projectName": "openmrs.openmrs-core", "bugType": "Change Binary Operator", "problem": " \t */\r\n \t@Override\r\n \tpublic String getName() {\r\n\t\tif (getConcept() != null || getConcept().getName() != null) {\r\n \t\t\treturn getConcept().getName().toString();\r\n \t\t}\r\n \t\treturn null;\r", "fixed": " \t */\r\n \t@Override\r\n \tpublic String getName() {\r\n\t\tif (getConcept() != null && getConcept().getName() != null) {\r\n \t\t\treturn getConcept().getName().toString();\r\n \t\t}\r\n \t\treturn null;\r", "sourceBeforeFix": "getConcept() != null || getConcept().getDescription() != null", "sourceAfterFix": "getConcept() != null && getConcept().getDescription() != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.", "fixed": " \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MockEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedMockEndpointBuilder advanced() {\n             return (AdvancedMockEndpointBuilder) this;\n         }", "fixed": "     \n    public interface MockEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedMockEndpointBuilder advanced() {\n             return (AdvancedMockEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "34a77d610669e59e9d5ab77c47908f907806e05f", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),", "fixed": "         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),", "sourceBeforeFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)", "sourceAfterFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"}
{"fixCommitSHA1": "ade2ef1e23fecc7211fb450ca852bc94fe565e0e", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "               .setParentId(currentInodeDirectory.getId()).setPersisted(options.isPersisted())\n               .build();\n       if (options.isPersisted()) {\n        String ufsPath = mMountTable.resolve(getPath(lastInode)).getPath();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }", "fixed": "               .setParentId(currentInodeDirectory.getId()).setPersisted(options.isPersisted())\n               .build();\n       if (options.isPersisted()) {\n        String ufsPath = mMountTable.resolve(getPath(lastInode)).toString();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }", "sourceBeforeFix": "mMountTable.resolve(getPath(lastInode)).getPath()", "sourceAfterFix": "mMountTable.resolve(getPath(lastInode)).toString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "2b27f6006b63686c9e8f1ff03b411ab2a6d1c791", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         template.sendBodyAndHeader(serverUri, \"Hello World\", HttpProducer.QUERY, \"one=uno&two=dos\");\n        assertMockEndpointsSatisifed();\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "fixed": "         template.sendBodyAndHeader(serverUri, \"Hello World\", HttpProducer.QUERY, \"one=uno&two=dos\");\n        assertMockEndpointsSatisfied();\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "sourceBeforeFix": "assertMockEndpointsSatisifed()", "sourceAfterFix": "assertMockEndpointsSatisfied()"}
{"fixCommitSHA1": "f3a55f30abec0d1445ef65a89b16e49e3a8e2a2d", "projectName": "swagger-api.swagger-core", "bugType": "Wrong Function Name", "problem": "                 if (getter != null) {\n                     if (paramType == null) {\n                        paramType = getter.getRawReturnType();\n                     }\n                     for (final Annotation fieldAnnotation : getter.annotations()) {", "fixed": "                 if (getter != null) {\n                     if (paramType == null) {\n                        paramType = getter.getType();\n                     }\n                     for (final Annotation fieldAnnotation : getter.annotations()) {", "sourceBeforeFix": "field.getRawType()", "sourceAfterFix": "field.getType()"}
{"fixCommitSHA1": "8616612734924c0a8a9781aed94669c866b12981", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         try {\n             final String echo = localEcho.echo(message);\n             Assert.fail(\"Remote invocation on a local view \" + LocalEcho.class.getName() + \" was expected to fail\");\n        } catch (EJBException nsee) {\n             logger.trace(\"Got the expected exception on invoking on a local view, remotely\", nsee);\n         }", "fixed": "         try {\n             final String echo = localEcho.echo(message);\n             Assert.fail(\"Remote invocation on a local view \" + LocalEcho.class.getName() + \" was expected to fail\");\n        } catch (IllegalStateException nsee) {\n             logger.trace(\"Got the expected exception on invoking on a local view, remotely\", nsee);\n         }", "sourceBeforeFix": "EJBException nsee", "sourceAfterFix": "IllegalStateException nsee"}
{"fixCommitSHA1": "35cea152ff0eebc0dbcefb4873155962c8fb960a", "projectName": "Graylog2.graylog2-server", "bugType": "Same Function More Args", "problem": "                 }\n             } else {\n                 log.debug(\"Could not handle netty message {}, sending further upstream.\", e);\n                fireMessageReceived(ctx, message);\n             }\n         }\n     }", "fixed": "                 }\n             } else {\n                 log.debug(\"Could not handle netty message {}, sending further upstream.\", e);\n                fireMessageReceived(ctx, message, e.getRemoteAddress());\n             }\n         }\n     }", "sourceBeforeFix": "fireMessageReceived(ctx,completeMessage)", "sourceAfterFix": "fireMessageReceived(ctx,completeMessage,e.getRemoteAddress())"}
{"fixCommitSHA1": "6618cef776cf1c9ce67ff8ee461412110ca5ada7", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\t\t\ttaskManagerQueryServiceGatewaysFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.warn(\"Requesting TaskManager's path for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tList<String> taskManagersToRetain = queryServiceGateways\n \t\t\t\t\t\t\t\t.stream()", "fixed": " \t\t\t\ttaskManagerQueryServiceGatewaysFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.debug(\"Requesting TaskManager's path for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tList<String> taskManagersToRetain = queryServiceGateways\n \t\t\t\t\t\t\t\t.stream()", "sourceBeforeFix": "LOG.warn(\"Requesting TaskManager's path for query services failed.\",throwable)", "sourceAfterFix": "LOG.debug(\"Requesting TaskManager's path for query services failed.\",throwable)"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Caller in Function Call", "problem": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "fixed": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externsRoot,mainRoot)", "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externsRoot,mainRoot)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SWFEndpointBuilder\n             extends\n                 SWFEndpointConsumerBuilder, SWFEndpointProducerBuilder {\n         default AdvancedSWFEndpointBuilder advanced() {", "fixed": "     \n    public interface SWFEndpointBuilder\n             extends\n                 SWFEndpointConsumerBuilder, SWFEndpointProducerBuilder {\n         default AdvancedSWFEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "fixed": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId);\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtmosphereWebsocketEndpointBuilder\n             extends\n                 AdvancedAtmosphereWebsocketEndpointConsumerBuilder, AdvancedAtmosphereWebsocketEndpointProducerBuilder {\n         default AtmosphereWebsocketEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtmosphereWebsocketEndpointBuilder\n             extends\n                 AdvancedAtmosphereWebsocketEndpointConsumerBuilder, AdvancedAtmosphereWebsocketEndpointProducerBuilder {\n         default AtmosphereWebsocketEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n\t\tcatch (Throwable e) {\r\n \t\t\tSystem.err.println(\"Listener.contextDestroyed: Failed to cleanup drivers in webapp\");\r\n \t\t\te.printStackTrace();\r\n \t\t}\r", "fixed": " \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n\t\tcatch (Exception e) {\r\n \t\t\tSystem.err.println(\"Listener.contextDestroyed: Failed to cleanup drivers in webapp\");\r\n \t\t\te.printStackTrace();\r\n \t\t}\r", "sourceBeforeFix": "Throwable e", "sourceAfterFix": "Exception e"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tAssert.assertEquals(1L, statuses.length);\n \t\tAssert.assertTrue(\n \t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).toString())\n \t\t);\n \t}", "fixed": " \t\tAssert.assertEquals(1L, statuses.length);\n \t\tAssert.assertTrue(\n \t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).getPath())\n \t\t);\n \t}", "sourceBeforeFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").toString()", "sourceAfterFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").getPath()"}
{"fixCommitSHA1": "5f78aa9c52a2f28419a5fa646ab28ee273e17e6a", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public Connection getOrConnect(Address address, boolean silent) {\n         return getOrConnect(address);\n     }\n    public void block(Address address) {\n         blockedAddresses.add(address);\n         Connection connection = getConnection(address);\n         if (connection != null) {", "fixed": "     }\n     @Override\n    public synchronized Connection getOrConnect(Address address, boolean silent) {\n         return getOrConnect(address);\n     }\n    public synchronized void block(Address address) {\n         blockedAddresses.add(address);\n         Connection connection = getConnection(address);\n         if (connection != null) {", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "e0617be01454b663de5e21ae73f0f1d61b504da0", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t\treturn this;\n \t}\n\tpublic ResultPartitionBuilder setBoundedBlockingSubpartitionType(BoundedBlockingSubpartitionType blockingSubpartitionType) {\n \t\tthis.blockingSubpartitionType = blockingSubpartitionType;\n \t\treturn this;\n \t}", "fixed": " \t\treturn this;\n \t}\n\tResultPartitionBuilder setBoundedBlockingSubpartitionType(\n\t\t\t@SuppressWarnings(\"SameParameterValue\") BoundedBlockingSubpartitionType blockingSubpartitionType) {\n \t\tthis.blockingSubpartitionType = blockingSubpartitionType;\n \t\treturn this;\n \t}", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "225c805e0416ad90aa2d71a978de8be697949ecf", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             if (!file.exists()) {\n                 return null;\n             }\n            return new VFSEntryResource(file, root.toURL());\n         } catch (MalformedURLException e) {\n             return null;", "fixed": "             if (!file.exists()) {\n                 return null;\n             }\n            return new VFSEntryResource(file, file.toURL());\n         } catch (MalformedURLException e) {\n             return null;", "sourceBeforeFix": "root.toURL()", "sourceAfterFix": "file.toURL()"}
{"fixCommitSHA1": "5825d83fc69047c2b821beca9d27f69f49533e84", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   @Test\n   public void equalsTest() throws Exception {\n    CommonTestUtils.testEquals(CreateOptions.class);\n   }\n }", "fixed": "   @Test\n   public void equalsTest() throws Exception {\n    CommonTestUtils.testEquals(MkdirsOptions.class);\n   }\n }", "sourceBeforeFix": "CreateOptions.class", "sourceAfterFix": "MkdirsOptions.class"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}", "fixed": " \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.datatype : cp.baseType);\n     }\n     private String getJSDocTypeWithBraces(CodegenParameter cp) {\n         return \"{\" + getJSDocType(cp) + \"}\";\n     }\n     private String getJSDocType(CodegenParameter cp) {\n         String dataType = trimBrackets(cp.dataType);", "fixed": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.datatype : cp.baseType);\n     }\n    \n     private String getJSDocType(CodegenParameter cp) {\n         String dataType = trimBrackets(cp.dataType);", "sourceBeforeFix": "getJSDocTypeWithBraces(cm,var)", "sourceAfterFix": "getJSDocType(cm,var)"}
{"fixCommitSHA1": "fc319b0ad3b3163f7c20be7900d975fa7b9d59a0", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "                     final TransactionalMap<Object, Object> txMap = context.getMap(\"default\");\n                     txMap.put(\"5\", \"5\");\n                     assertEquals(3, txMap.keySet().size());\n                    assertEquals(3, map2.keySet().size());\n                     throw new DummyUncheckedHazelcastTestException();\n                 }", "fixed": "                     final TransactionalMap<Object, Object> txMap = context.getMap(\"default\");\n                     txMap.put(\"5\", \"5\");\n                     assertEquals(3, txMap.keySet().size());\n                    assertEquals(2, map2.keySet().size());\n                     throw new DummyUncheckedHazelcastTestException();\n                 }", "sourceBeforeFix": "assertEquals(3,map2.keySet().size())", "sourceAfterFix": "assertEquals(2,map2.keySet().size())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "      * @param timestamp the timestamp of the file\n      */\n     void put(String fileName, long timestamp) {\n        details.put(fileName, Long.toString(timestamp));\n     }\n     /**", "fixed": "      * @param timestamp the timestamp of the file\n      */\n     void put(String fileName, long timestamp) {\n        details.setProperty(fileName, Long.toString(timestamp));\n     }\n     /**", "sourceBeforeFix": "details.put(CONFIG_HASH_KEY,currentConfigHash)", "sourceAfterFix": "details.setProperty(CONFIG_HASH_KEY,currentConfigHash)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "cde65024a20d660e586494ec6a443f8732fee068", "projectName": "apache.hadoop", "bugType": "Same Function Less Args", "problem": "     status.setHealthReport(\"sick\");\n     status.setIsNodeHealthy(false);\n     node.handle(new RMNodeStatusEvent(node.getNodeID(), status,\n        new ArrayList<ContainerStatus>(), null, null, null));\n     Assert.assertEquals(NodeState.UNHEALTHY, node.getState());\n     return node;\n   }", "fixed": "     status.setHealthReport(\"sick\");\n     status.setIsNodeHealthy(false);\n     node.handle(new RMNodeStatusEvent(node.getNodeID(), status,\n        new ArrayList<ContainerStatus>(), null, null));\n     Assert.assertEquals(NodeState.UNHEALTHY, node.getState());\n     return node;\n   }", "sourceBeforeFix": "new RMNodeImpl(nodeId,rmContext,null,0,0,null,null,null)", "sourceAfterFix": "new RMNodeImpl(nodeId,rmContext,null,0,0,null,null)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "261f178a7b371d33b0c00c887821e8587534c32a", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (target == this) {\n             task.run();\n         } else {\n            target.addTask(task);\n         }\n     }", "fixed": "         if (target == this) {\n             task.run();\n         } else {\n            target.addTaskAndWakeup(task);\n         }\n     }", "sourceBeforeFix": "target.addTask(task)", "sourceAfterFix": "target.addTaskAndWakeup(task)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedNetWeaverEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default NetWeaverEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedNetWeaverEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default NetWeaverEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "d9fdfaf3134f4a1968f3d643369b76dae9c55560", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tlogger.error(\"NODE {}: AssignReturnRoute command failed.\", nodeId);\n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssignReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));\n\t\t\tincomingMessage.setTransActionCanceled(true);\n \t\t}\n \t\treturn true;", "fixed": " \t\t\tlogger.error(\"NODE {}: AssignReturnRoute command failed.\", nodeId);\n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssignReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));\n\t\t\tincomingMessage.setTransactionCanceled(true);\n \t\t}\n \t\treturn true;", "sourceBeforeFix": "incomingMessage.setTransActionCanceled(true)", "sourceAfterFix": "incomingMessage.setTransactionCanceled(true)"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean touchDown (int screenX, int screenY, int pointer, int button) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].touchDown(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean touchDown (int screenX, int screenY, int pointer, int button) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).touchDown(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "d8d9e5711a908603f73f92872b127fe4d7ab4a15", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         MBeanServer mbeanServer = getMBeanServer();\n         Set<ObjectName> set = mbeanServer.queryNames(new ObjectName(\"*:type=services,*\"), null);\n        assertEquals(9, set.size());\n     }\n     public void testNonManagedService() throws Exception {", "fixed": "         MBeanServer mbeanServer = getMBeanServer();\n         Set<ObjectName> set = mbeanServer.queryNames(new ObjectName(\"*:type=services,*\"), null);\n        assertEquals(10, set.size());\n     }\n     public void testNonManagedService() throws Exception {", "sourceBeforeFix": "assertEquals(8,set.size())", "sourceAfterFix": "assertEquals(9,set.size())"}
{"fixCommitSHA1": "afb86b272431b41ee7360af0f40f504ba3aeebc9", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Binary Operator", "problem": "       }\n     }\n     boolean overwriteOriginalNer = false;\n    if (prevNerEndIndex != (start-1) && nextNerStartIndex != end) {\n     } else if (startNer == null) {", "fixed": "       }\n     }\n     boolean overwriteOriginalNer = false;\n    if (prevNerEndIndex != (start-1) || nextNerStartIndex != end) {\n     } else if (startNer == null) {", "sourceBeforeFix": "prevNerEndIndex != (start - 1) && nextNerStartIndex != end", "sourceAfterFix": "prevNerEndIndex != (start - 1) || nextNerStartIndex != end"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n \t/**\n \t * Save the given global property to the database. If the global property already exists,", "fixed": " \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t/**\n \t * Save the given global property to the database. If the global property already exists,", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "28cabcde96679f2e2f29ad56983f2e51d5b838cd", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         MapConfig writeBehindBackupConfig = config.getMapConfig(name);\n         MapStoreConfig mapStoreConfig = new MapStoreConfig();\n         mapStoreConfig.setWriteDelaySeconds(5);\n        final MapStoreWithStoreCount mapStore = new MapStoreWithStoreCount(expectedStoreCount, 300, 100);\n         mapStoreConfig.setImplementation(mapStore);\n         writeBehindBackupConfig.setMapStoreConfig(mapStoreConfig);", "fixed": "         MapConfig writeBehindBackupConfig = config.getMapConfig(name);\n         MapStoreConfig mapStoreConfig = new MapStoreConfig();\n         mapStoreConfig.setWriteDelaySeconds(5);\n        final MapStoreWithStoreCount mapStore = new MapStoreWithStoreCount(expectedStoreCount, 300, 50);\n         mapStoreConfig.setImplementation(mapStore);\n         writeBehindBackupConfig.setMapStoreConfig(mapStoreConfig);", "sourceBeforeFix": "new MapStoreWithStoreCount(expectedStoreCount,300,100)", "sourceAfterFix": "new MapStoreWithStoreCount(expectedStoreCount,300,50)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "ed13d3007bbe9cb7df8641d2e287bf94c314fb86", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 }\n             });\n         }\n        long newReservation = memoryReservation.getAndAdd(bytes);\n         if (newReservation > maxMemoryReservation) {\n             memoryReservation.getAndAdd(-bytes);\n             throw new ExceededMemoryLimitException(getMaxMemorySize());", "fixed": "                 }\n             });\n         }\n        long newReservation = memoryReservation.addAndGet(bytes);\n         if (newReservation > maxMemoryReservation) {\n             memoryReservation.getAndAdd(-bytes);\n             throw new ExceededMemoryLimitException(getMaxMemorySize());", "sourceBeforeFix": "memoryReservation.getAndAdd(bytes)", "sourceAfterFix": "memoryReservation.addAndGet(bytes)"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "fixed": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "419fb4a4dee3cd001631daa06fe6b8c30095b468", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "     public long renew(Token<?> token, \n                       Configuration conf) throws IOException {\n      UserGroupInformation.getLoginUser().reloginFromKeytab();\n       InetSocketAddress serviceAddr = SecurityUtil.getTokenServiceAddr(token);\n       return ", "fixed": "     public long renew(Token<?> token, \n                       Configuration conf) throws IOException {\n      UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab();\n       InetSocketAddress serviceAddr = SecurityUtil.getTokenServiceAddr(token);\n       return ", "sourceBeforeFix": "UserGroupInformation.getLoginUser().reloginFromKeytab()", "sourceAfterFix": "UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab()"}
{"fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request);\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         BroadcasterFactory.getDefault().lookup(\"/*\").broadcast(\"yoBroadcast\").get();", "fixed": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         BroadcasterFactory.getDefault().lookup(\"/*\").broadcast(\"yoBroadcast\").get();", "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f4fc27fb0ef1d23230c1f1c55a1234fba1c0acf7", "projectName": "jfeinstein10.SlidingMenu", "bugType": "Change Identifier Used", "problem": " \t\tTypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.SlidingMenu);\n \t\tint mode = ta.getInt(R.styleable.SlidingMenu_mode, LEFT);\n\t\tsetMode(mode);\n \t\tint viewAbove = ta.getResourceId(R.styleable.SlidingMenu_viewAbove, -1);\n \t\tif (viewAbove != -1)\n \t\t\tsetContent(viewAbove);", "fixed": " \t\tTypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.SlidingMenu);\n \t\tint mode = ta.getInt(R.styleable.SlidingMenu_mode, LEFT);\n\t\tsetMode(RIGHT);\n \t\tint viewAbove = ta.getResourceId(R.styleable.SlidingMenu_viewAbove, -1);\n \t\tif (viewAbove != -1)\n \t\t\tsetContent(viewAbove);", "sourceBeforeFix": "setMode(mode)", "sourceAfterFix": "setMode(RIGHT)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJiraEndpointBuilder\n             extends\n                 AdvancedJiraEndpointConsumerBuilder, AdvancedJiraEndpointProducerBuilder {\n         default JiraEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJiraEndpointBuilder\n             extends\n                 AdvancedJiraEndpointConsumerBuilder, AdvancedJiraEndpointProducerBuilder {\n         default JiraEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "040343b917a3989fe6fba30a6deddb8974a68bb5", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "         url = url.setPath(RegistryService.class.getName())\r\n                 .addParameter(Constants.INTERFACE_KEY, RegistryService.class.getName())\r\n                 .removeParameters(Constants.EXPORT_KEY, Constants.REFER_KEY);\r\n        String key = url.toServiceString();\r\n         LOCK.lock();\r\n         try {\r", "fixed": "         url = url.setPath(RegistryService.class.getName())\r\n                 .addParameter(Constants.INTERFACE_KEY, RegistryService.class.getName())\r\n                 .removeParameters(Constants.EXPORT_KEY, Constants.REFER_KEY);\r\n        String key = url.toServiceStringWithoutResolving();\r\n         LOCK.lock();\r\n         try {\r", "sourceBeforeFix": "url.toServiceString()", "sourceAfterFix": "url.toServiceStringWithoutResolving()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastSetEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastSetEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HazelcastSetEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastSetEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "da3a1f61ac1f89795ba22321a2ae77f0927941c6", "projectName": "druid-io.druid", "bugType": "Change Binary Operator", "problem": "             AppenderatorDriverAddResult addResult = driver.add(inputRow, sequenceName, committerSupplier);\n             if (addResult.isOk()) {\n              if (addResult.getNumRowsInSegment() > tuningConfig.getMaxRowsPerSegment()) {\n                 publishSegments(driver, publisher, committerSupplier, sequenceName);\n                 sequenceNumber++;", "fixed": "             AppenderatorDriverAddResult addResult = driver.add(inputRow, sequenceName, committerSupplier);\n             if (addResult.isOk()) {\n              if (addResult.getNumRowsInSegment() >= tuningConfig.getMaxRowsPerSegment()) {\n                 publishSegments(driver, publisher, committerSupplier, sequenceName);\n                 sequenceNumber++;", "sourceBeforeFix": "addResult.getNumRowsInSegment() > tuningConfig.getMaxRowsPerSegment()", "sourceAfterFix": "addResult.getNumRowsInSegment() >= tuningConfig.getMaxRowsPerSegment()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FlatpackEndpointBuilder\n             extends\n                 FlatpackEndpointConsumerBuilder, FlatpackEndpointProducerBuilder {\n         default AdvancedFlatpackEndpointBuilder advanced() {", "fixed": "     \n    public interface FlatpackEndpointBuilder\n             extends\n                 FlatpackEndpointConsumerBuilder, FlatpackEndpointProducerBuilder {\n         default AdvancedFlatpackEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "406d52b271b8669c5461c97e88a17480cfd8a674", "projectName": "xetorthio.jedis", "bugType": "Change Numeric Literal", "problem": "         long bttl = jedis.ttl(bfoo);\n        assertEquals(-1, bttl);\n         jedis.set(bfoo, bbar);\n         bttl = jedis.ttl(bfoo);", "fixed": "         long bttl = jedis.ttl(bfoo);\n        assertEquals(-2, bttl);\n         jedis.set(bfoo, bbar);\n         bttl = jedis.ttl(bfoo);", "sourceBeforeFix": "-1", "sourceAfterFix": "-2"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSjmsBatchEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default SjmsBatchEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSjmsBatchEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default SjmsBatchEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMSKEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MSKEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMSKEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MSKEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "b614342e519c1499a7abc2b88121773db6bc2b35", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Caller in Function Call", "problem": "           Transition transition = parser.transitionIndex.get(predictedTransition.object());\n           State newState = transition.apply(state, predictedTransition.score());\n          if (bestState == null || newState.score() < bestState.score()) {\n             bestState = newState;\n           }\n           beam.add(newState);", "fixed": "           Transition transition = parser.transitionIndex.get(predictedTransition.object());\n           State newState = transition.apply(state, predictedTransition.score());\n          if (bestState == null || bestState.score() < newState.score()) {\n             bestState = newState;\n           }\n           beam.add(newState);", "sourceBeforeFix": "newState.score()", "sourceAfterFix": "bestState.score()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.info(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "fixed": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "sourceBeforeFix": "logger.info(\"Creating extern file for exports\")", "sourceAfterFix": "logger.fine(\"Creating extern file for exports\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "c4babda4bab878adeec4d534a1e62c8ddf5c5c06", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             this.name = \"/\";\n             this.value = \"\";\n             this.isLeaf = false;\n            this.seperator = \"\";\n         }\n         /**\n          * Constructor for generic folder where resource=*.", "fixed": "             this.name = \"/\";\n             this.value = \"\";\n             this.isLeaf = false;\n            this.separator = \"\";\n         }\n         /**\n          * Constructor for generic folder where resource=*.", "sourceBeforeFix": "this.seperator", "sourceAfterFix": "this.separator"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3a45f84e3ea25e96bd89d48b8e5ddb145e4a3815", "projectName": "apache.flink", "bugType": "Change Caller in Function Call", "problem": " \t\t\t}\n \t\t}\n\t\tAssert.assertTrue(\"Resultset size was \"+aggMap.size()+\". Expected was \"+keyCnt, outList.size() == keyCnt);\n \t\tfor (PactInteger integer : aggMap.values()) {\n \t\t\tAssert.assertTrue(\"Incorrect result\", integer.getValue() == expSum);", "fixed": " \t\t\t}\n \t\t}\n\t\tAssert.assertTrue(\"Resultset size was \"+aggMap.size()+\". Expected was \"+keyCnt, aggMap.size() == keyCnt);\n \t\tfor (PactInteger integer : aggMap.values()) {\n \t\t\tAssert.assertTrue(\"Incorrect result\", integer.getValue() == expSum);", "sourceBeforeFix": "outList.size()", "sourceAfterFix": "aggMap.size()"}
{"fixCommitSHA1": "c9a1cc9df3dc4fe2eef78ad6090a9b1d95a02557", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             .setMeasurementUnit(MeasurementUnit.MILLISECONDS)\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(10))\n             .build();\n     static final SimpleAttributeDefinition QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.QUEUE_SIZE, ModelType.INT, true)", "fixed": "             .setMeasurementUnit(MeasurementUnit.MILLISECONDS)\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(10L))\n             .build();\n     static final SimpleAttributeDefinition QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.QUEUE_SIZE, ModelType.INT, true)", "sourceBeforeFix": "new ModelNode().set(17500)", "sourceAfterFix": "new ModelNode().set(17500L)"}
{"fixCommitSHA1": "cdf09affa490e617190060402eade8daa292f812", "projectName": "Alluxio.alluxio", "bugType": "Change Binary Operator", "problem": "         int tLen = len;\n         int tOff = off;\n         while (tLen > 0) {\n          if (mCurrentBlockLeftByte == 0) {\n             getNextBlock();\n           }\n          if (mCurrentBlockLeftByte > tLen) {\n             mCurrentBlockOutStream.write(b, tOff, tLen);\n             mCurrentBlockLeftByte -= tLen;\n             mCachedBytes += tLen;", "fixed": "         int tLen = len;\n         int tOff = off;\n         while (tLen > 0) {\n          if (mCurrentBlockLeftByte <= 0 || mCurrentBlockOutStream == null ) {\n             getNextBlock();\n           }\n          if (mCurrentBlockLeftByte >= tLen) {\n             mCurrentBlockOutStream.write(b, tOff, tLen);\n             mCurrentBlockLeftByte -= tLen;\n             mCachedBytes += tLen;", "sourceBeforeFix": "mCurrentBlockLeftByte > tLen", "sourceAfterFix": "mCurrentBlockLeftByte >= tLen"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e8b752a7a95cef40b21e8ecb1e37f3577fa70441", "projectName": "square.okhttp", "bugType": "Change Identifier Used", "problem": "       }\n       try {\n        X509Certificate certificate = generator.generateX509Certificate(\n            signedByKeyPair.getPrivate());\n         return new HeldCertificate(heldKeyPair, certificate);\n       } catch (GeneralSecurityException e) {\n         throw new AssertionError(e);", "fixed": "       }\n       try {\n        X509Certificate certificate = generator.generate(signedByKeyPair.getPrivate());\n         return new HeldCertificate(heldKeyPair, certificate);\n       } catch (GeneralSecurityException e) {\n         throw new AssertionError(e);", "sourceBeforeFix": "generator.generateX509Certificate(signedByKeyPair.getPrivate())", "sourceAfterFix": "generator.generate(signedByKeyPair.getPrivate())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "97b8bc59615d4da0c51a91fef22ab462a8d69766", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         final Object child = new ParseTreeTablePresentation(null).getChild(tree, 1);\n         Assert.assertTrue(\"Invalid child type\", child instanceof DetailAST);\n         Assert.assertEquals(\"Invalid child token type\",\n                TokenTypes.BLOCK_COMMENT_BEGIN, ((AST) child).getType());\n     }\n     @Test", "fixed": "         final Object child = new ParseTreeTablePresentation(null).getChild(tree, 1);\n         Assert.assertTrue(\"Invalid child type\", child instanceof DetailAST);\n         Assert.assertEquals(\"Invalid child token type\",\n                TokenTypes.BLOCK_COMMENT_BEGIN, ((DetailAST) child).getType());\n     }\n     @Test", "sourceBeforeFix": "(AST)child", "sourceAfterFix": "(DetailAST)child"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "cb08061242a6ddb8fd3ee293000b8c19be82b37a", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "        return false;\n     }\n     @Test", "fixed": "        return true;\n     }\n     @Test", "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "fixed": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic abstract void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "projectName": "eclipse.vert.x", "bugType": "Same Function More Args", "problem": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException();\n   }\n }", "fixed": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n }", "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: failed\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "e04a3bf7703544cf5012eb2f55626af8e0a2cb8c", "projectName": "apache.flink", "bugType": "Delete Throws Exception", "problem": " \t\t}\n \t\t@Override\n\t\tpublic List<Long> snapshotState(long checkpointId, long timestamp) throws Exception {\n \t\t\treturn Collections.singletonList(ms);\n \t\t}\n \t\t@Override\n\t\tpublic void restoreState(List<Long> state) throws Exception {\n \t\t\tfor (Long l : state) {\n \t\t\t\tms += l;\n \t\t\t}", "fixed": " \t\t}\n \t\t@Override\n\t\tpublic List<Long> snapshotState(long checkpointId, long timestamp) {\n \t\t\treturn Collections.singletonList(ms);\n \t\t}\n \t\t@Override\n\t\tpublic void restoreState(List<Long> state) {\n \t\t\tfor (Long l : state) {\n \t\t\t\tms += l;\n \t\t\t}", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "de8f91ad67b9881afc9f5af9cf9736b341bc3fbf", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "     @Test\n     public void testCoverage() {\n        assertEquals(JavadocTagInfo.VERSION.getType(), JavadocTagInfo.Type.BLOCK);\n         assertEquals(\"text [@version] name [version] type [BLOCK]\", JavadocTagInfo.VERSION.toString());", "fixed": "     @Test\n     public void testCoverage() {\n        assertEquals(JavadocTagInfo.Type.BLOCK, JavadocTagInfo.VERSION.getType());\n         assertEquals(\"text [@version] name [version] type [BLOCK]\", JavadocTagInfo.VERSION.toString());", "sourceBeforeFix": "assertEquals(JavadocTagInfo.VERSION.getType(),JavadocTagInfo.Type.BLOCK)", "sourceAfterFix": "assertEquals(JavadocTagInfo.Type.BLOCK,JavadocTagInfo.VERSION.getType())"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.debug(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "fixed": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "sourceBeforeFix": "logger.debug(\"MyQ binding received command '{}' for item '{}'\",command,itemName)", "sourceAfterFix": "logger.trace(\"MyQ binding received command '{}' for item '{}'\",command,itemName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "7369734ba2477dc5f208c9bcdbf438d42e92ac25", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \t\n\tpublic void setActor (Actor actor) {\n \t\tif (actor == this) throw new IllegalArgumentException(\"actor cannot be the Container.\");\n \t\tif (this.actor != null) super.removeActor(this.actor);\n \t\tthis.actor = actor;", "fixed": " \t}\n \t\n\tpublic void setActor (T actor) {\n \t\tif (actor == this) throw new IllegalArgumentException(\"actor cannot be the Container.\");\n \t\tif (this.actor != null) super.removeActor(this.actor);\n \t\tthis.actor = actor;", "sourceBeforeFix": "private Actor actor; ", "sourceAfterFix": "private T actor; "}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytesBinary(tableNameOrRegionName), Bytes.toBytesBinary(splitPoint));\n   }\n   /**", "fixed": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytes(tableNameOrRegionName), Bytes.toBytes(splitPoint));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "4f002d28bb8061ff5eb5ce3b1f41c2e7c1ae69fc", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "                 long total = Runtime.getRuntime().totalMemory();\n                 long used = (total - Runtime.getRuntime().freeMemory());\n                 if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {\n                    return maxSize > (used / 1024 / 1024);\n                 } else {\n                    return maxSize > (used / total);\n                 }\n             }\n             return false;", "fixed": "                 long total = Runtime.getRuntime().totalMemory();\n                 long used = (total - Runtime.getRuntime().freeMemory());\n                 if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {\n                    return maxSize < (used / 1024 / 1024);\n                 } else {\n                    return maxSize < (used / total);\n                 }\n             }\n             return false;", "sourceBeforeFix": "maxSize > (used / 1024 / 1024)", "sourceAfterFix": "maxSize < (used / 1024 / 1024)"}
{"fixCommitSHA1": "48b99e43fca1306ba54dad61bdacd4259673552b", "projectName": "druid-io.druid", "bugType": "Change Caller in Function Call", "problem": "     synchronized (lock) {\n       if (segmentsToLoad.contains(holder)) {\n         if ((callback != null)) {\n          currentlyProcessing.addCallback(callback);\n         }\n         return;\n       }", "fixed": "     synchronized (lock) {\n       if (segmentsToLoad.contains(holder)) {\n         if ((callback != null)) {\n          holder.addCallback(callback);\n         }\n         return;\n       }", "sourceBeforeFix": "currentlyProcessing.addCallback(callback)", "sourceAfterFix": "holder.addCallback(callback)"}
{"fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "  * Created by Per Wendel on 2014-05-10.\n  */\n @FunctionalInterface\npublic interface ExceptionHandler {\n     /**\n      * Invoked when an exception that is mapped to this handler occurs during routing", "fixed": "  * Created by Per Wendel on 2014-05-10.\n  */\n @FunctionalInterface\npublic interface ExceptionHandler<T extends Exception> {\n     /**\n      * Invoked when an exception that is mapped to this handler occurs during routing", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "T exception"}
{"fixCommitSHA1": "01d18f2c3db799d144cc8e3308da3fb2ade19417", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     private final Condition delegate;\n     @SuppressWarnings(\"unused\")\n    private final Object strongReference;\n    WeakSafeCondition(Condition delegate, Object strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }", "fixed": "     private final Condition delegate;\n     @SuppressWarnings(\"unused\")\n    private final WeakSafeReadWriteLock strongReference;\n    WeakSafeCondition(Condition delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }", "sourceBeforeFix": "Object strongReference", "sourceAfterFix": "WeakSafeReadWriteLock strongReference"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JBPMEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJBPMEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface JBPMEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJBPMEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSqlEndpointBuilder\n             extends\n                 AdvancedSqlEndpointConsumerBuilder, AdvancedSqlEndpointProducerBuilder {\n         default SqlEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSqlEndpointBuilder\n             extends\n                 AdvancedSqlEndpointConsumerBuilder, AdvancedSqlEndpointProducerBuilder {\n         default SqlEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     private static final String DELTA= \"void delta()\";\n     private static final String EPSILON= \"void epsilon()\";\n    private static class Dummy {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     private static final String DELTA= \"void delta()\";\n     private static final String EPSILON= \"void epsilon()\";\n    static class Dummy {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0c4f7988dc8c947eb7bda3afa8c58ace04d4d1d8", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\t\t\t\tbreak;\n \t\t\t\t} else {\n\t\t\t\t\tThread.sleep(500);\n \t\t\t\t}\n \t\t\t}\n\t\t\tassertTrue(\"Producer thread is not blocked: \" + Arrays.toString(ASYNC_CONSUMER_THREAD.getStackTrace()), producerBlocked);\n \t\t\tboolean consumerWaiting = false;\n \t\t\tfor (int i = 0; i < 50; i++) {", "fixed": " \t\t\t\t\tbreak;\n \t\t\t\t} else {\n\t\t\t\t\tThread.sleep(500L);\n \t\t\t\t}\n \t\t\t}\n\t\t\tassertTrue(\"Producer thread is not blocked: \" + Arrays.toString(ASYNC_PRODUCER_THREAD.getStackTrace()), producerBlocked);\n \t\t\tboolean consumerWaiting = false;\n \t\t\tfor (int i = 0; i < 50; i++) {", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(500L)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedActiveMQEndpointBuilder\n             extends\n                 AdvancedActiveMQEndpointConsumerBuilder, AdvancedActiveMQEndpointProducerBuilder {\n         default ActiveMQEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedActiveMQEndpointBuilder\n             extends\n                 AdvancedActiveMQEndpointConsumerBuilder, AdvancedActiveMQEndpointProducerBuilder {\n         default ActiveMQEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "697a5ff366eccf069fa933a25323839a8aa4abd2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         mock.assertIsSatisfied();\n        Thread.sleep(100);\n        String content = IOConverter.toString(new File(\"./target/done/paris.txt\"));\n         assertEquals(\"The file should have been renamed\", \"Hello Paris\", content);\n     }", "fixed": "         mock.assertIsSatisfied();\n        Thread.sleep(500);\n        String content = IOConverter.toString(new File(\"./target/done/paris.txt\").getAbsoluteFile());\n         assertEquals(\"The file should have been renamed\", \"Hello Paris\", content);\n     }", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResponseWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2a9203f8bfcc8e7425f9fb94ce04b2dd2c4c0577", "projectName": "square.dagger", "bugType": "Change Unary Operator\t", "problem": "           classLoader = (classLoader != null) ? classLoader : ClassLoader.getSystemClassLoader();\n           Class<?> type = classLoader.loadClass(className);\n          if (!type.isInterface()) {\nreturn null;\n           }\n           return ReflectiveAtInjectBinding.create(type, mustHaveInjections);", "fixed": "           classLoader = (classLoader != null) ? classLoader : ClassLoader.getSystemClassLoader();\n           Class<?> type = classLoader.loadClass(className);\n          if (type.isInterface()) {\nreturn null;\n           }\n           return ReflectiveAtInjectBinding.create(type, mustHaveInjections);", "sourceBeforeFix": "!type.isInterface()", "sourceAfterFix": "type.isInterface()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generateHashRowMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes)\n     {\n         Parameter position = arg(\"position\", int.class);\n         Parameter blocks = arg(\"blocks\", Block[].class);", "fixed": "                 .retInt();\n     }\n    private static void generateHashRowMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes)\n     {\n         Parameter position = arg(\"position\", int.class);\n         Parameter blocks = arg(\"blocks\", Block[].class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EjbEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedEjbEndpointBuilder advanced() {\n             return (AdvancedEjbEndpointBuilder) this;\n         }", "fixed": "     \n    public interface EjbEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedEjbEndpointBuilder advanced() {\n             return (AdvancedEjbEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9ad66ccebc3547d555ec747fa3b3939ca1a9f876", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "         s = sc.getInitParameter(ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR);\n         if (s == null) {\n             for (Class<? extends AtmosphereInterceptor> a : defaultInterceptors) {\n                interceptors.addFirst(newAInterceptor(a));\n             }\n             logger.info(\"Set {} to disable them.\", ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR, interceptors);\n         }", "fixed": "         s = sc.getInitParameter(ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR);\n         if (s == null) {\n             for (Class<? extends AtmosphereInterceptor> a : defaultInterceptors) {\n                interceptors.addLast(newAInterceptor(a));\n             }\n             logger.info(\"Set {} to disable them.\", ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR, interceptors);\n         }", "sourceBeforeFix": "interceptors.addFirst(newAInterceptor(a))", "sourceAfterFix": "interceptors.addLast(newAInterceptor(a))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t * @throws ModuleMustStartException if the context cannot restart due to a\r\n \t *             {@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}\r\n \t */\r\n\tpublic static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Throwable {\r\n \t\tLog log = LogFactory.getLog(Listener.class);\r\n \t\tList<Module> startedModules = new ArrayList<Module>();\r", "fixed": " \t * @throws ModuleMustStartException if the context cannot restart due to a\r\n \t *             {@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}\r\n \t */\r\n\tpublic static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Exception {\r\n \t\tLog log = LogFactory.getLog(Listener.class);\r\n \t\tList<Module> startedModules = new ArrayList<Module>();\r", "sourceBeforeFix": "Throwable t3", "sourceAfterFix": "Exception t3"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "fixed": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "524d763d995df84a9c1ca4992ced1e2d62405261", "projectName": "eclipse.vert.x", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  public AsyncFile write(Buffer buffer) {\n     int length = buffer.length();\n     doWrite(buffer, writePos, null);\n     writePos += length;", "fixed": "   }\n   @Override\n  public synchronized AsyncFile write(Buffer buffer) {\n     int length = buffer.length();\n     doWrite(buffer, writePos, null);\n     writePos += length;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "e3c87cba0bbed00c739e01599e29a5621c9ef3b3", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n\t\t\t\t\tmessageHandler.serverResponder());\n \t\t}\n \t}", "fixed": " \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n\t\t\t\t\tmessageHandler.responder());\n \t\t}\n \t}", "sourceBeforeFix": "rSocketMessageHandler.serverResponder()", "sourceAfterFix": "rSocketMessageHandler.responder()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BonitaEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedBonitaEndpointBuilder advanced() {\n             return (AdvancedBonitaEndpointBuilder) this;\n         }", "fixed": "     \n    public interface BonitaEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedBonitaEndpointBuilder advanced() {\n             return (AdvancedBonitaEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "fixed": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "sourceBeforeFix": "factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fBodyClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "3b1d91e0105be86ffa011c5ca9ebbba49e3fcd5d", "projectName": "antlr.antlr4", "bugType": "Change Identifier Used", "problem": "tokens.LT(i++);\n         tokens.LT(i++);\n        String result = tokens.toString();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }", "fixed": "tokens.LT(i++);\n         tokens.LT(i++);\n        String result = tokens.getText();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }", "sourceBeforeFix": "tokens.toString()", "sourceAfterFix": "tokens.getText()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertFalse(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "fixed": "         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "fd6c6fa57f73fcbf3472b66a648648a710f1f050", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "     BuilderWithCopyingSetters<Integer> a = builder.setThings(ImmutableSet.of(1, 2)).build();\n     assertEquals(ImmutableSet.of(1, 2), a.things());\n    assertEquals(ImmutableList.of(\"foo\", \"bar\"), a.strings());\n     assertEquals(ImmutableMap.of(\"foo\", 23), a.map());\n     BuilderWithCopyingSetters<Integer> b = builder.setThings(Arrays.asList(1, 2)).build();", "fixed": "     BuilderWithCopyingSetters<Integer> a = builder.setThings(ImmutableSet.of(1, 2)).build();\n     assertEquals(ImmutableSet.of(1, 2), a.things());\n    assertEquals(ImmutableList.of(17, 23.0), a.numbers());\n     assertEquals(ImmutableMap.of(\"foo\", 23), a.map());\n     BuilderWithCopyingSetters<Integer> b = builder.setThings(Arrays.asList(1, 2)).build();", "sourceBeforeFix": "ImmutableList<String>", "sourceAfterFix": "ImmutableList<Number>"}
{"fixCommitSHA1": "099bf2014a8cd43c270c5900ce9d34689287d0ef", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "     expected += \"WARNING: lsr is deprecated. Please use ls -R instead.\\n\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY);", "fixed": "     expected += \"WARNING: lsr is deprecated. Please use ls -R instead.\\n\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY);", "sourceBeforeFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)", "sourceAfterFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"}
{"fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         final Map<String, Object> antProps = this.getProject().getProperties();\n         for (Map.Entry<String, Object> entry : antProps.entrySet()) {\n             final String value = String.valueOf(entry.getValue());\n            retVal.put(entry.getKey(), value);\n         }\n         for (Property p : overrideProps) {\n            retVal.put(p.getKey(), p.getValue());\n         }\n         return retVal;", "fixed": "         final Map<String, Object> antProps = this.getProject().getProperties();\n         for (Map.Entry<String, Object> entry : antProps.entrySet()) {\n             final String value = String.valueOf(entry.getValue());\n            retVal.setProperty(entry.getKey(), value);\n         }\n         for (Property p : overrideProps) {\n            retVal.setProperty(p.getKey(), p.getValue());\n         }\n         return retVal;", "sourceBeforeFix": "retVal.put(entry.getKey(),value)", "sourceAfterFix": "retVal.setProperty(entry.getKey(),value)"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<NodeModel> getSelectedNodes() {\n         List<NodeModel> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<NodeModel> getSelectedNodes() {\n         List<NodeModel> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CouchbaseEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCouchbaseEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CouchbaseEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCouchbaseEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "bd0ff5e4fdb97904fca84d57792fddc3f7d96862", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     lockAndUnlockNested(detectingLocks, reps);\n   }\n  private void lockAndUnlockNested(Lock[] locks, int reps) {\n     for (int i = 0; i < reps; i++) {\n       for (int j = 0; j < locks.length; j++) {\n         locks[j].lock();", "fixed": "     lockAndUnlockNested(detectingLocks, reps);\n   }\n  private static void lockAndUnlockNested(Lock[] locks, int reps) {\n     for (int i = 0; i < reps; i++) {\n       for (int j = 0; j < locks.length; j++) {\n         locks[j].lock();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Caller in Function Call", "problem": "     }\n     compiler.setFeatureSet(compiler.getFeatureSet().without(MODULES));\n    GatherGettersAndSetterProperties.update(compiler, externs, root);\n   }\n   @Override", "fixed": "     }\n     compiler.setFeatureSet(compiler.getFeatureSet().without(MODULES));\n    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n   @Override", "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)", "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "     }\n     if (LOG.isDebugEnabled()) {\n      LOG.debug(split.getRegionName().toString()\n          +\" no longer has references to \" + parent.toString());\n     }\n     BatchUpdate b = new BatchUpdate(parent);", "fixed": "     }\n     if (LOG.isDebugEnabled()) {\n      LOG.debug(split.getRegionNameAsString() +\n        \" no longer has references to \" + parent.toString());\n     }\n     BatchUpdate b = new BatchUpdate(parent);", "sourceBeforeFix": "parent.getRegionName()", "sourceAfterFix": "parent.getRegionNameAsString()"}
{"fixCommitSHA1": "ac9d639779e5c0c1482f1abc50c71551c9ca09c1", "projectName": "dropwizard.metrics", "bugType": "Change Binary Operator", "problem": "         final ThreadInfo[] threads = this.threads.dumpAllThreads(true, true);\n         final PrintWriter writer = new PrintWriter(out, true);\n        for (int ti = threads.length - 1; ti > 0; ti--) {\n             final ThreadInfo t = threads[ti];\n             writer.printf(\"%s id=%d state=%s\",\n                           t.getThreadName(),", "fixed": "         final ThreadInfo[] threads = this.threads.dumpAllThreads(true, true);\n         final PrintWriter writer = new PrintWriter(out, true);\n        for (int ti = threads.length - 1; ti >= 0; ti--) {\n             final ThreadInfo t = threads[ti];\n             writer.printf(\"%s id=%d state=%s\",\n                           t.getThreadName(),", "sourceBeforeFix": "ti > 0", "sourceAfterFix": "ti >= 0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "0397639dc6f21b1336674d1fe72c9b3b06578570", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         assertNotNull(transferMessage.getBody(SerializableRequestDto.class));\n         assertNotNull(transferMessage.getHeader(\"requestObject\", SerializableRequestDto.class));\n         assertEquals(Boolean.TRUE, transferMessage.getHeader(\"boolean\", Boolean.class));\n        assertEquals((Long) 123l, transferMessage.getHeader(\"long\", Long.class));\n         assertEquals((Double) 1.23, transferMessage.getHeader(\"double\", Double.class));\n         assertEquals(\"hello\", transferMessage.getHeader(\"string\", String.class));\n         assertNotNull(transferExchange.getProperty(\"requestObjectProperty\", SerializableRequestDto.class));", "fixed": "         assertNotNull(transferMessage.getBody(SerializableRequestDto.class));\n         assertNotNull(transferMessage.getHeader(\"requestObject\", SerializableRequestDto.class));\n         assertEquals(Boolean.TRUE, transferMessage.getHeader(\"boolean\", Boolean.class));\n        assertEquals((Long) 123L, transferMessage.getHeader(\"long\", Long.class));\n         assertEquals((Double) 1.23, transferMessage.getHeader(\"double\", Double.class));\n         assertEquals(\"hello\", transferMessage.getHeader(\"string\", String.class));\n         assertNotNull(transferExchange.getProperty(\"requestObjectProperty\", SerializableRequestDto.class));", "sourceBeforeFix": "(Long)123l", "sourceAfterFix": "(Long)123L"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "   public Set<Tuple> zrangeByScoreWithScores(final byte[] key, final double min, final double max) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "   public Set<Tuple> zrangeByScoreWithScores(final byte[] key, final double min, final double max) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8264af051e753ff408e860607575178a2d892b7d", "projectName": "AsyncHttpClient.async-http-client", "bugType": "More Specific If", "problem": "                     int length = lengthWrapper[0];\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(length));\n                     nettyRequest.setContent(ChannelBuffers.wrappedBuffer(bytes, 0, length));\n                } else if (request.getParams() != null) {\n                     StringBuilder sb = new StringBuilder();\n                     for (final Entry<String, List<String>> paramEntry : request.getParams()) {\n                         final String key = paramEntry.getKey();", "fixed": "                     int length = lengthWrapper[0];\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(length));\n                     nettyRequest.setContent(ChannelBuffers.wrappedBuffer(bytes, 0, length));\n                } else if (request.getParams() != null && !request.getParams().isEmpty()) {\n                     StringBuilder sb = new StringBuilder();\n                     for (final Entry<String, List<String>> paramEntry : request.getParams()) {\n                         final String key = paramEntry.getKey();", "sourceBeforeFix": "request.getParams() != null", "sourceAfterFix": "request.getParams() != null && !request.getParams().isEmpty()"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n    void deleteOrder(@PathParam(\"order_id\") @ApiParam(\"ID of the order that needs to be deleted\") String orderId);\n     @GET\n     @Path(\"/inventory\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n    void deleteOrder(@PathParam(\"order_id\") @ApiParam(\"ID of the order that needs to be deleted\") String orderId) throws Exception;\n     @GET\n     @Path(\"/inventory\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tif (!nsDictionary.writeToFileAtomically(file.getAbsolutePath(), false)) {\r\n \t\t\tGdx.app.debug(\"IOSPreferences\", \"Failed to write NSDictionary to file \" + file);\r\n \t\t}\r\n\t\tpool.dealloc();\r\n \t}\r\n }\r", "fixed": " \t\tif (!nsDictionary.writeToFileAtomically(file.getAbsolutePath(), false)) {\r\n \t\t\tGdx.app.debug(\"IOSPreferences\", \"Failed to write NSDictionary to file \" + file);\r\n \t\t}\r\n\t\tpool.drain();\r\n \t}\r\n }\r", "sourceBeforeFix": "NSNumber.numberWithLong(val)", "sourceAfterFix": "NSNumber.numberWithLongLong(val)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GuavaEventBusEndpointBuilder\n             extends\n                 GuavaEventBusEndpointConsumerBuilder, GuavaEventBusEndpointProducerBuilder {\n         default AdvancedGuavaEventBusEndpointBuilder advanced() {", "fixed": "     \n    public interface GuavaEventBusEndpointBuilder\n             extends\n                 GuavaEventBusEndpointConsumerBuilder, GuavaEventBusEndpointProducerBuilder {\n         default AdvancedGuavaEventBusEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b282b8181d18ddfd3ba30089e65114696995462f", "projectName": "alibaba.druid", "bugType": "Wrong Function Name", "problem": "                     mbeanServer.registerMBean(instance, objectName);\r\n                 }\r\n             } catch (Exception ex) {\r\n                getLog().error(\"register druid-driver mbean error\", ex);\r\n             }\r\n             return true;\r", "fixed": "                     mbeanServer.registerMBean(instance, objectName);\r\n                 }\r\n             } catch (Exception ex) {\r\n                getLog().warn(\"register druid-driver mbean error\", ex);\r\n             }\r\n             return true;\r", "sourceBeforeFix": "getLog().error(\"register druid-driver mbean error\",ex)", "sourceAfterFix": "getLog().warn(\"register druid-driver mbean error\",ex)"}
{"fixCommitSHA1": "09f2dfd9a7d6ff6ef6ba810de47da813ba11081d", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                 continue;\n             }\n             if (toUpper) {\n                char upper = Character.toLowerCase(ch);\n                 sb.append(upper);\n                 toUpper = false;", "fixed": "                 continue;\n             }\n             if (toUpper) {\n                char upper = Character.toUpperCase(ch);\n                 sb.append(upper);\n                 toUpper = false;", "sourceBeforeFix": "Character.toLowerCase(ch)", "sourceAfterFix": "Character.toUpperCase(ch)"}
{"fixCommitSHA1": "5d32900cdc433ee792808356695773ca24a4b94c", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     \n    public static final short VERSION = 0;\n     /**\n      * Begin Flag", "fixed": "     \n    public static final short VERSION = 1;\n     /**\n      * Begin Flag", "sourceBeforeFix": "VERSION=0", "sourceAfterFix": "VERSION=1"}
{"fixCommitSHA1": "b614342e519c1499a7abc2b88121773db6bc2b35", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "           Transition transition = parser.transitionIndex.get(predictedTransition.object());\n           State newState = transition.apply(state, predictedTransition.score());\n          if (bestState == null || newState.score() < bestState.score()) {\n             bestState = newState;\n           }\n           beam.add(newState);", "fixed": "           Transition transition = parser.transitionIndex.get(predictedTransition.object());\n           State newState = transition.apply(state, predictedTransition.score());\n          if (bestState == null || bestState.score() < newState.score()) {\n             bestState = newState;\n           }\n           beam.add(newState);", "sourceBeforeFix": "newState.score()", "sourceAfterFix": "bestState.score()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 9:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 9:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "daba0256b7cf360824aebb3ff176d5937c862e46", "projectName": "openmrs.openmrs-core", "bugType": "Change Numeric Literal", "problem": " \t@Verifies(value = \"should return all global properties in the database\", method = \"getAllGlobalProperties()\")\n \tpublic void getAllGlobalProperties_shouldReturnAllGlobalPropertiesInTheDatabase() throws Exception {\n \t\texecuteDataSet(ADMIN_INITIAL_DATA_XML);\n\t\tAssert.assertEquals(20, Context.getAdministrationService().getAllGlobalProperties().size());\n \t}\n \t/**", "fixed": " \t@Verifies(value = \"should return all global properties in the database\", method = \"getAllGlobalProperties()\")\n \tpublic void getAllGlobalProperties_shouldReturnAllGlobalPropertiesInTheDatabase() throws Exception {\n \t\texecuteDataSet(ADMIN_INITIAL_DATA_XML);\n\t\tAssert.assertEquals(21, Context.getAdministrationService().getAllGlobalProperties().size());\n \t}\n \t/**", "sourceBeforeFix": "Assert.assertEquals(20,as.getAllGlobalProperties().size())", "sourceAfterFix": "Assert.assertEquals(21,as.getAllGlobalProperties().size())"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "         @ApiResponse(code = 200, message = \"successful operation\", response = Order.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n    Order getOrderById(@PathParam(\"order_id\") @Min(1) @Max(5) @ApiParam(\"ID of pet that needs to be fetched\") Long orderId);\n     @POST\n     @Path(\"/order\")", "fixed": "         @ApiResponse(code = 200, message = \"successful operation\", response = Order.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n    Order getOrderById(@PathParam(\"order_id\") @Min(1) @Max(5) @ApiParam(\"ID of pet that needs to be fetched\") Long orderId) throws Exception;\n     @POST\n     @Path(\"/order\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "fixed": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "sourceBeforeFix": "GL.glBindTextureEXT(target,texture)", "sourceAfterFix": "GL.glBindTexture(target,texture)"}
{"fixCommitSHA1": "6190e5a019d5009864d47bf4b08ceef4ac52cf91", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   @Test\n   public void doubleFlush() throws Exception {\n     mTestStream.write(INCREASING_BYTES, 1, 10);\n    Assert.assertEquals(0, mTestStream.getBytesFlushed());\n     mTestStream.flush();\n    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n     mTestStream.flush();\n    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n   }\n }", "fixed": "   @Test\n   public void doubleFlush() throws Exception {\n     mTestStream.write(INCREASING_BYTES, 1, 10);\n    Assert.assertEquals(0, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n   }\n }", "sourceBeforeFix": "mTestStream.getBytesFlushed()", "sourceAfterFix": "mTestStream.getFlushedBytes()"}
{"fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         processor.registerWebSocketHandler(\"/*\", new EchoHandler());\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request);\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         assertEquals(b.toString(), \"yoWebSocket\");", "fixed": "         processor.registerWebSocketHandler(\"/*\", new EchoHandler());\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         assertEquals(b.toString(), \"yoWebSocket\");", "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0d843780fc3dbe96fa513166a18a192d969dc232", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "  * @author Rick Giles\n  * @author lkuehne\n  */\nclass PackageObjectFactory implements ModuleFactory {\n     \n     private static final Log LOG = LogFactory.getLog(PackageObjectFactory.class);", "fixed": "  * @author Rick Giles\n  * @author lkuehne\n  */\npublic class PackageObjectFactory implements ModuleFactory {\n     \n     private static final Log LOG = LogFactory.getLog(PackageObjectFactory.class);", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10950-10974 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15800", "sourceAfterFix": "id=10800"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\treturn style;\r\n \t}\r\n\tpublic void setText (String text) {\r\n \t\tif (text == null) throw new IllegalArgumentException(\"text cannot be null.\");\r\n \t\tif (text.equals(this.text)) return;\r\n \t\tthis.text = text;\r", "fixed": " \t\treturn style;\r\n \t}\r\n\tpublic void setText (CharSequence text) {\r\n \t\tif (text == null) throw new IllegalArgumentException(\"text cannot be null.\");\r\n \t\tif (text.equals(this.text)) return;\r\n \t\tthis.text = text;\r", "sourceBeforeFix": "String text", "sourceAfterFix": "CharSequence text"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2d0eeff752d0d83b0d34b40bb67ed9329be3a708", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     public void testRouteStartupOrder() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(0);\n         template.sendBody(\"direct:start\", \"Hello World\");", "fixed": "     public void testRouteStartupOrder() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(1);\n         template.sendBody(\"direct:start\", \"Hello World\");", "sourceBeforeFix": "mock.expectedMessageCount(0)", "sourceAfterFix": "mock.expectedMessageCount(1)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesDeploymentsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesDeploymentsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KubernetesDeploymentsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesDeploymentsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "93b0ac77e59d936e91684ba016978a315d50d055", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \tpublic Item getItem(String name) throws ItemNotFoundException {\n \t\tfor(Collection<Item> items : itemMap.values()) {\n \t\t\tfor(Item item : items) {\n\t\t\t\tif(item.getName().matches(name)) {\n \t\t\t\t\treturn item;\n \t\t\t\t}\n \t\t\t}", "fixed": " \tpublic Item getItem(String name) throws ItemNotFoundException {\n \t\tfor(Collection<Item> items : itemMap.values()) {\n \t\t\tfor(Item item : items) {\n\t\t\t\tif(item.getName().equals(name)) {\n \t\t\t\t\treturn item;\n \t\t\t\t}\n \t\t\t}", "sourceBeforeFix": "item.getName().matches(name)", "sourceAfterFix": "item.getName().equals(name)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n         }\n         return record;\n     }", "fixed": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2111905af362bab4ac7c786787f79764aac90c9d", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                     receivedMessages.offer(msg);\n                     JGroupsBroadcaster.BroadcastMessage b = JGroupsBroadcaster.BroadcastMessage.class.cast(msg);\n                     if (b.getTopicId().equalsIgnoreCase(bc.getID())) {\n                        bc.broadcast(b.getTopicId());\n                     }\n                 }\n             }", "fixed": "                     receivedMessages.offer(msg);\n                     JGroupsBroadcaster.BroadcastMessage b = JGroupsBroadcaster.BroadcastMessage.class.cast(msg);\n                     if (b.getTopicId().equalsIgnoreCase(bc.getID())) {\n                        bc.broadcast(b.getMessage());\n                     }\n                 }\n             }", "sourceBeforeFix": "b.getTopicId()", "sourceAfterFix": "b.getMessage()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "f1f4c0fbfc0c36363a3751f942071199eb3dbeeb", "projectName": "Alluxio.alluxio", "bugType": "Change Unary Operator\t", "problem": "     for (FileStatus status : files) {\n       UfsStatus retStatus;\n      if (status.isDir()) {\n         retStatus = new UfsFileStatus(status.getPath().getName(), status.getLen(),\n             status.getModificationTime(), status.getOwner(), status.getGroup(),\n             status.getPermission().toShort());", "fixed": "     for (FileStatus status : files) {\n       UfsStatus retStatus;\n      if (!status.isDir()) {\n         retStatus = new UfsFileStatus(status.getPath().getName(), status.getLen(),\n             status.getModificationTime(), status.getOwner(), status.getGroup(),\n             status.getPermission().toShort());", "sourceBeforeFix": "status.isDir()", "sourceAfterFix": "!status.isDir()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "d0a169978942736556fd0af1b8e4306c0291e107", "projectName": "apache.storm", "bugType": "Change Unary Operator\t", "problem": "      * @return nullToZero\n      */\n     private static Long nullToZero(Long value) {\n        return Objects.isNull(value) ? value : 0;\n     }\n     /**", "fixed": "      * @return nullToZero\n      */\n     private static Long nullToZero(Long value) {\n        return !Objects.isNull(value) ? value : 0;\n     }\n     /**", "sourceBeforeFix": "Objects.isNull(value)", "sourceAfterFix": "!Objects.isNull(value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "798beed7a84ec00cfb0835cf41b7988e27898e22", "projectName": "alibaba.druid", "bugType": "More Specific If", "problem": "         }\n         SQLSelectItem selectItem = new SQLSelectItem(expr, alias, connectByRoot);\n        if (lexer.token == Token.HINT) {\n             String comment = \"\";\n             selectItem.addAfterComment(comment);\n             lexer.nextToken();", "fixed": "         }\n         SQLSelectItem selectItem = new SQLSelectItem(expr, alias, connectByRoot);\n        if (lexer.token == Token.HINT && !lexer.isEnabled(SQLParserFeature.StrictForWall)) {\n             String comment = \"\";\n             selectItem.addAfterComment(comment);\n             lexer.nextToken();", "sourceBeforeFix": "lexer.token == Token.HINT", "sourceAfterFix": "lexer.token == Token.HINT && !lexer.isEnabled(SQLParserFeature.StrictForWall)"}
{"fixCommitSHA1": "01760ff324bfe4218c34d648c53af46d782f14c1", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       LOG.debug(\"Internal Alluxio error when running rpc\", e);\n       throw e.toThrift();\n     } catch (IOException e) {\n      LOG.error(\"I/O error when running rpc\", e);\n       throw new ThriftIOException(e.getMessage());\n     } catch (Exception e) {\n       LOG.error(\"Unexpected error running rpc\", e);", "fixed": "       LOG.debug(\"Internal Alluxio error when running rpc\", e);\n       throw e.toThrift();\n     } catch (IOException e) {\n      LOG.warn(\"I/O error when running rpc\", e);\n       throw new ThriftIOException(e.getMessage());\n     } catch (Exception e) {\n       LOG.error(\"Unexpected error running rpc\", e);", "sourceBeforeFix": "LOG.error(\"I/O error when running rpc\",e)", "sourceAfterFix": "LOG.warn(\"I/O error when running rpc\",e)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74f9a84ea9679e743f44a5a743b235c3266958e3", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": "  * Abstract base class for nested conditions.\n  *\n  * @author Phillip Webb\n  */\nabstract class AbstractNestedCondition extends SpringBootCondition\n \t\timplements ConfigurationCondition {\n \tprivate final ConfigurationPhase configurationPhase;", "fixed": "  * Abstract base class for nested conditions.\n  *\n  * @author Phillip Webb\n * @since 2.0.1\n  */\npublic abstract class AbstractNestedCondition extends SpringBootCondition\n \t\timplements ConfigurationCondition {\n \tprivate final ConfigurationPhase configurationPhase;", "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "cffa2d9c2a33800708e8835ac6be9ccdbcfdc7ae", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": " public class ClientConnectionManagerImpl extends MembershipAdapter implements ClientConnectionManager, MembershipListener {\n    static final int BUFFER_SIZE = 16 << 10;\n     static final int KILO_BYTE = 1024;", "fixed": " public class ClientConnectionManagerImpl extends MembershipAdapter implements ClientConnectionManager, MembershipListener {\n    static final int BUFFER_SIZE = 32 << 10;\n     static final int KILO_BYTE = 1024;", "sourceBeforeFix": "16 << 10", "sourceAfterFix": "32 << 10"}
{"fixCommitSHA1": "9e383f401a22ab6c7085d7cb2e949ad11f020e8b", "projectName": "apache.camel", "bugType": "Change Unary Operator\t", "problem": "                                                           DataFormat.class);\n         boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class));\n        if (cxfMessage.getAttachments() != null && !(DataFormat.POJO.equals(dataFormat) && !isXop)) {\n             for (Attachment attachment : cxfMessage.getAttachments()) {\n                 camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler());", "fixed": "                                                           DataFormat.class);\n         boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class));\n        if (cxfMessage.getAttachments() != null && !(DataFormat.POJO.equals(dataFormat) && isXop)) {\n             for (Attachment attachment : cxfMessage.getAttachments()) {\n                 camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler());", "sourceBeforeFix": "!isXop", "sourceAfterFix": "isXop"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Before\n     @Override\n     public void setUp() throws Exception {\n        nagios = new NagiosNscaStub(25667, \"password\");\n         nagios.start();\n         super.setUp();", "fixed": "     @Before\n     @Override\n     public void setUp() throws Exception {\n        nagios = new NagiosNscaStub(25669, \"password\");\n         nagios.start();\n         super.setUp();", "sourceBeforeFix": "notifier.getConfiguration().setPort(25667)", "sourceAfterFix": "notifier.getConfiguration().setPort(25669)"}
{"fixCommitSHA1": "1ab4426ed60aec7fbc643db7d66f85e53e9c5619", "projectName": "Activiti.Activiti", "bugType": "Change Boolean Literal", "problem": "   }\n   public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames) {\n    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, false));\n   }\n   public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames, String locale, boolean withLocalizationFallback) {\n    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, false, locale, withLocalizationFallback));\n   }\n   public Object getVariable(String executionId, String variableName) {", "fixed": "   }\n   public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames) {\n    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, true));\n   }\n   public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames, String locale, boolean withLocalizationFallback) {\n    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, true, locale, withLocalizationFallback));\n   }\n   public Object getVariable(String executionId, String variableName) {", "sourceBeforeFix": "new GetExecutionVariableInstancesCmd(executionId,variableNames,false)", "sourceAfterFix": "new GetExecutionVariableInstancesCmd(executionId,variableNames,true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e36c4c77bfbbf18ce8e46fa8efe2a809df891345", "projectName": "netty.netty", "bugType": "Change Caller in Function Call", "problem": "         if (maskPayload) {\n             int random = (int) (Math.random() * Integer.MAX_VALUE);\n             mask = ByteBuffer.allocate(4).putInt(random).array();\n            header.writeBytes(mask);\n             int counter = 0;\n             for (int i = data.readerIndex(); i < data.writerIndex(); i ++) {", "fixed": "         if (maskPayload) {\n             int random = (int) (Math.random() * Integer.MAX_VALUE);\n             mask = ByteBuffer.allocate(4).putInt(random).array();\n            out.writeBytes(mask);\n             int counter = 0;\n             for (int i = data.readerIndex(); i < data.writerIndex(); i ++) {", "sourceBeforeFix": "header.writeBytes(mask)", "sourceAfterFix": "out.writeBytes(mask)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "202197ee128df154528c5c27077185f679f48cfb", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   private final String sortKey;\n  public CodeReplacement(int startPosition, int length, String newContent) {\n     this(startPosition, length, newContent, \"\");\n   }", "fixed": "   private final String sortKey;\n  CodeReplacement(int startPosition, int length, String newContent) {\n     this(startPosition, length, newContent, \"\");\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         populateNearCache(clientMap, 1000);\n        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();", "fixed": "         populateNearCache(clientMap, 1000);\n        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();", "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "7aea38118e7af7d2c5e1ce54ca135b8c0261a2df", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "           .addCounter(Interns.info(MOB_FILE_CACHE_ACCESS_COUNT, MOB_FILE_CACHE_ACCESS_COUNT_DESC),\n               rsWrap.getMobFileCacheAccessCount())\n           .addCounter(Interns.info(MOB_FILE_CACHE_MISS_COUNT, MOB_FILE_CACHE_MISS_COUNT_DESC),\n              rsWrap.getMobFileCacheAccessCount())\n           .addCounter(\n               Interns.info(MOB_FILE_CACHE_EVICTED_COUNT, MOB_FILE_CACHE_EVICTED_COUNT_DESC),\n               rsWrap.getMobFileCacheEvictedCount())", "fixed": "           .addCounter(Interns.info(MOB_FILE_CACHE_ACCESS_COUNT, MOB_FILE_CACHE_ACCESS_COUNT_DESC),\n               rsWrap.getMobFileCacheAccessCount())\n           .addCounter(Interns.info(MOB_FILE_CACHE_MISS_COUNT, MOB_FILE_CACHE_MISS_COUNT_DESC),\n              rsWrap.getMobFileCacheMissCount())\n           .addCounter(\n               Interns.info(MOB_FILE_CACHE_EVICTED_COUNT, MOB_FILE_CACHE_EVICTED_COUNT_DESC),\n               rsWrap.getMobFileCacheEvictedCount())", "sourceBeforeFix": "rsWrap.getMobFileCacheAccessCount()", "sourceAfterFix": "rsWrap.getMobFileCacheMissCount()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "fe992fa69dd155ed3a98c0848026d0fd35aa6e57", "projectName": "antlr.antlr4", "bugType": "Change Identifier Used", "problem": " \t\t\thaveOutputDir = true;\n \t\t\tif (outDir.exists() && !outDir.isDirectory()) {\n \t\t\t\terrMgr.toolError(ErrorType.OUTPUT_DIR_IS_FILE, outputDirectory);\n\t\t\t\tlibDirectory = \".\";\n \t\t\t}\n \t\t}\n \t\telse {", "fixed": " \t\t\thaveOutputDir = true;\n \t\t\tif (outDir.exists() && !outDir.isDirectory()) {\n \t\t\t\terrMgr.toolError(ErrorType.OUTPUT_DIR_IS_FILE, outputDirectory);\n\t\t\t\toutputDirectory = \".\";\n \t\t\t}\n \t\t}\n \t\telse {", "sourceBeforeFix": "libDirectory=\".\"", "sourceAfterFix": "outputDirectory=\".\""}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTextureEXT(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "fixed": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTexture(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "sourceBeforeFix": "GL.glPolygonOffsetEXT(factor,units)", "sourceAfterFix": "GL.glPolygonOffset(factor,units)"}
{"fixCommitSHA1": "3ae343b768bae5973a5634c8e287ae1173e30248", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "             assert amt > 0;\n             prioritizableForTree -= amt;\n             if (parent != null) {\n                parent.decrementPrioritizableForTree(amt);\n             }\n         }", "fixed": "             assert amt > 0;\n             prioritizableForTree -= amt;\n             if (parent != null) {\n                parent.decrementPrioritizableForTree0(amt);\n             }\n         }", "sourceBeforeFix": "parent.incrementPrioritizableForTree(amt,oldParent)", "sourceAfterFix": "parent.incrementPrioritizableForTree0(amt,oldParent)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "fixed": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedTwitterTimelineEndpointBuilder\n             extends\n                 AdvancedTwitterTimelineEndpointConsumerBuilder, AdvancedTwitterTimelineEndpointProducerBuilder {\n         default TwitterTimelineEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedTwitterTimelineEndpointBuilder\n             extends\n                 AdvancedTwitterTimelineEndpointConsumerBuilder, AdvancedTwitterTimelineEndpointProducerBuilder {\n         default TwitterTimelineEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a7f54a539a4c8f92f4895934480061a2ccbcd499", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsElement(attribute.getDefinition(), model, false, writer);\n     }\n }", "fixed": "     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsElement(attribute.getDefinition(), model, false, writer);\n     }\n }", "sourceBeforeFix": "attribute.getDefinition().getAttributeMarshaller()", "sourceAfterFix": "attribute.getDefinition().getMarshaller()"}
{"fixCommitSHA1": "3ae343b768bae5973a5634c8e287ae1173e30248", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "             assert amt > 0;\n             prioritizableForTree += amt;\n             if (parent != null && parent != oldParent) {\n                parent.incrementPrioritizableForTree(amt, oldParent);\n             }\n         }", "fixed": "             assert amt > 0;\n             prioritizableForTree += amt;\n             if (parent != null && parent != oldParent) {\n                parent.incrementPrioritizableForTree0(amt, oldParent);\n             }\n         }", "sourceBeforeFix": "parent.decrementPrioritizableForTree(amt)", "sourceAfterFix": "parent.decrementPrioritizableForTree0(amt)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3f4a9ba669c165dbc21319854a13916f25644147", "projectName": "thinkaurelius.titan", "bugType": "Change Identifier Used", "problem": " public abstract class KeyColumnValueStoreTest {\n    private Logger log = LoggerFactory.getLogger(KeyValueStoreTest.class);\n     int numKeys = 500;\n     int numColumns = 50;", "fixed": " public abstract class KeyColumnValueStoreTest {\n    private Logger log = LoggerFactory.getLogger(KeyColumnValueStoreTest.class);\n     int numKeys = 500;\n     int numColumns = 50;", "sourceBeforeFix": "KeyValueStoreTest.class", "sourceAfterFix": "KeyColumnValueStoreTest.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bee7a939ade6ee0b42f00ea8727996986e31d6db", "projectName": "eclipse.vert.x", "bugType": "Change Binary Operator", "problem": "     @Override\n     public ByteBuf buffer(int initialCapacity) {\n      if (initialCapacity < capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();", "fixed": "     @Override\n     public ByteBuf buffer(int initialCapacity) {\n      if (initialCapacity <= capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();", "sourceBeforeFix": "initialCapacity < capacity", "sourceAfterFix": "initialCapacity <= capacity"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DataSetTestEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDataSetTestEndpointBuilder advanced() {", "fixed": "     \n    public interface DataSetTestEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDataSetTestEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastMultimapEndpointBuilder\n             extends\n                 HazelcastMultimapEndpointConsumerBuilder, HazelcastMultimapEndpointProducerBuilder {\n         default AdvancedHazelcastMultimapEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastMultimapEndpointBuilder\n             extends\n                 HazelcastMultimapEndpointConsumerBuilder, HazelcastMultimapEndpointProducerBuilder {\n         default AdvancedHazelcastMultimapEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Builder for endpoint producers for the Azure Storage Blob Service\n      * component.\n      */\n    public static interface BlobServiceEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBlobServiceEndpointProducerBuilder advanced() {", "fixed": "      * Builder for endpoint producers for the Azure Storage Blob Service\n      * component.\n      */\n    public interface BlobServiceEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBlobServiceEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixQueueEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtomixQueueEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AtomixQueueEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtomixQueueEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d9762ac9bd5c578bc9b975dd1233cfea917134b2", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "     log.info(\"Stopping job\");\n     for (final Map.Entry<Long, Sink> entry : getSinks().entrySet()) {\n      flushAfterDuration(entry.getKey(), entry.getValue());\n     }\n     shutdownExecutors();", "fixed": "     log.info(\"Stopping job\");\n     for (final Map.Entry<Long, Sink> entry : getSinks().entrySet()) {\n      abandonSegment(entry.getKey(), entry.getValue());\n     }\n     shutdownExecutors();", "sourceBeforeFix": "flushAfterDuration(entry.getKey(),entry.getValue())", "sourceAfterFix": "abandonSegment(entry.getKey(),entry.getValue())"}
{"fixCommitSHA1": "1d577b1b8bd3f51bcf8d9d89bb4598a28020af07", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                 new GenericFutureListener<Future<Channel>>() {\n             @Override\n             public void operationComplete(Future<Channel> future) throws Exception {\n                ctx.write(\n                         \"Welcome to \" + InetAddress.getLocalHost().getHostName() +\n                         \" secure chat service!\\n\");\n                ctx.write(\n                         \"Your session is protected by \" +\n                         ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() +\n                         \" cipher suite.\\n\");", "fixed": "                 new GenericFutureListener<Future<Channel>>() {\n             @Override\n             public void operationComplete(Future<Channel> future) throws Exception {\n                ctx.writeAndFlush(\n                         \"Welcome to \" + InetAddress.getLocalHost().getHostName() +\n                         \" secure chat service!\\n\");\n                ctx.writeAndFlush(\n                         \"Your session is protected by \" +\n                         ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() +\n                         \" cipher suite.\\n\");", "sourceBeforeFix": "c.write(\"[you] \" + msg + '\\n')", "sourceAfterFix": "c.writeAndFlush(\"[you] \" + msg + '\\n')"}
{"fixCommitSHA1": "ae6599c6ec02c7973209010991a23fde5db8217f", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     }\n     @Converter\n    public static String toIso(Country country) {\n         return country.getIso();\n     }\n }", "fixed": "     }\n     @Converter\n    public String toIso(Country country) {\n         return country.getIso();\n     }\n }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *  Is class declared as abstract.\n          *  @return true if class is declared as final\n          */\n        boolean isDeclaredAsAbstract() {\n             return declaredAsAbstract;\n         }\n     }", "fixed": "          *  Is class declared as abstract.\n          *  @return true if class is declared as final\n          */\n        private boolean isDeclaredAsAbstract() {\n             return declaredAsAbstract;\n         }\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "fixed": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "sourceBeforeFix": "logger.debug(\"rapidRefreshFuture scheduleing for {} millis\",millis)", "sourceAfterFix": "logger.trace(\"rapidRefreshFuture scheduleing for {} millis\",millis)"}
{"fixCommitSHA1": "8cb66861957089a03000c71b66f1e66e8e66d4c1", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n                createQueryResultSnippet( engine.execute( query  ).toString() ) ) );\n         fw.append( \"\\nNext up we will add filtering to set more parts \"\n                    + \"in motion:\\n\\nIn this next example, we take a list of users \"", "fixed": "                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n                createQueryResultSnippet( engine.execute( query  ).dumpToString() ) ) );\n         fw.append( \"\\nNext up we will add filtering to set more parts \"\n                    + \"in motion:\\n\\nIn this next example, we take a list of users \"", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ba98d83f598bbf2e9f5c41eeb51d36369a088fa6", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "         }\n         \n        protected int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "fixed": "         }\n         \n        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "51e6c8c8b6e847e2600420252160e331c85bd46a", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Override\n \tpublic boolean matches(ClassNode classNode) {\n\t\treturn AstUtils.hasLeastOneAnnotation(classNode, \"Controller\", \"EnableWebMvc\");\n \t}\n \t@Override", "fixed": " \t@Override\n \tpublic boolean matches(ClassNode classNode) {\n\t\treturn AstUtils.hasAtLeastOneAnnotation(classNode, \"Controller\", \"EnableWebMvc\");\n \t}\n \t@Override", "sourceBeforeFix": "AstUtils.hasLeastOneAnnotation(classNode,\"Controller\",\"EnableWebMvc\")", "sourceAfterFix": "AstUtils.hasAtLeastOneAnnotation(classNode,\"Controller\",\"EnableWebMvc\")"}
{"fixCommitSHA1": "2b0752b688e6f27129f344050787e9546adc004a", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void async_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 5000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "fixed": "     @Test\n     public void async_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 10000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7c7309b5fb6276e4098921915a8e0c39a5cd3450", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n     Assert.assertTrue(BlockStoreContext.INSTANCE.hasLocalWorker());", "fixed": "     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n    RetryHandlingBlockMasterClient masterClientMock =\n        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n     Assert.assertTrue(BlockStoreContext.INSTANCE.hasLocalWorker());", "sourceBeforeFix": "BlockMasterClient.class", "sourceAfterFix": "RetryHandlingBlockMasterClient.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Farewell World\", Exchange.FILE_NAME, \"mysub/mysubsub/farewell.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/mysub/mysubsub/farewell.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Farewell World\", Exchange.FILE_NAME, \"mysub/mysubsub/farewell.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/mysub/mysubsub/farewell.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "bb65a918bef30c50a093e57cdd6ca8c332615ea4", "projectName": "facebook.presto", "bugType": "Same Function More Args", "problem": "             throw new PrestoException(HIVE_FILE_NOT_FOUND, \"Partition location does not exist: \" + path);\n         }\n         catch (IOException e) {\n            throw new PrestoException(HIVE_FILESYSTEM_ERROR, e);\n         }\n     }", "fixed": "             throw new PrestoException(HIVE_FILE_NOT_FOUND, \"Partition location does not exist: \" + path);\n         }\n         catch (IOException e) {\n            throw new PrestoException(HIVE_FILESYSTEM_ERROR, \"Failed to list directory: \" + path, e);\n         }\n     }", "sourceBeforeFix": "new PrestoException(HIVE_FILESYSTEM_ERROR,e)", "sourceAfterFix": "new PrestoException(HIVE_FILESYSTEM_ERROR,\"Failed to list directory: \" + path,e)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "2897c425577be5d5b3ed10ce5f01e0fcb8ba1975", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "* @see FileSystemPermission\n    */\n   public PermissionStatus applyUMask(FileSystemPermission umask, Configuration configuration) {\n    if (!SecurityUtils.isSecurityEnabled(configuration)) {\n       return new PermissionStatus(mUserName, mGroupName, mPermission);\n     }\n     FileSystemPermission newFileSystemPermission = mPermission.applyUMask(umask);", "fixed": "* @see FileSystemPermission\n    */\n   public PermissionStatus applyUMask(FileSystemPermission umask, Configuration configuration) {\n    if (!SecurityUtils.isAuthorizationEnabled(configuration)) {\n       return new PermissionStatus(mUserName, mGroupName, mPermission);\n     }\n     FileSystemPermission newFileSystemPermission = mPermission.applyUMask(umask);", "sourceBeforeFix": "SecurityUtils.isSecurityEnabled(configuration)", "sourceAfterFix": "SecurityUtils.isAuthorizationEnabled(configuration)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BrowseEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBrowseEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface BrowseEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBrowseEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDataSetTestEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DataSetTestEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDataSetTestEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DataSetTestEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c39ce11b105be36238be1cc5b406dd0037c8284c", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   \n  protected class ResourceInternal<T> {\n     \n    private T mResource;\n     \n     private long mLastAccessTimeMs;", "fixed": "   \n  protected class ResourceInternal<R> {\n     \n    private R mResource;\n     \n     private long mLastAccessTimeMs;", "sourceBeforeFix": "/**   * The resource.   */ private T mResource; ", "sourceAfterFix": "/**   * The resource.   */ private R mResource; "}
{"fixCommitSHA1": "204c2156da54922cb0bfc9d944036e3503056a2f", "projectName": "pardom.ActiveAndroid", "bugType": "Change Identifier Used", "problem": " \t\t\t\t}\n \t\t\t\telse if (ReflectionUtils.isTypeSerializer(discoveredClass)) {\n \t\t\t\t\tTypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();\n\t\t\t\t\tmTypeSerializers.put(typeSerializer.getClass(), typeSerializer);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassNotFoundException e) {", "fixed": " \t\t\t\t}\n \t\t\t\telse if (ReflectionUtils.isTypeSerializer(discoveredClass)) {\n \t\t\t\t\tTypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();\n\t\t\t\t\tmTypeSerializers.put(typeSerializer.getDeserializedType(), typeSerializer);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassNotFoundException e) {", "sourceBeforeFix": "typeSerializer.getClass()", "sourceAfterFix": "typeSerializer.getDeserializedType()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedServerEndpointBuilder\n             extends\n                 AdvancedServerEndpointConsumerBuilder, AdvancedServerEndpointProducerBuilder {\n         default ServerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedServerEndpointBuilder\n             extends\n                 AdvancedServerEndpointConsumerBuilder, AdvancedServerEndpointProducerBuilder {\n         default ServerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c6f898a116427906702afb349275331494ecaeef", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public URL loadResourceAsURL(String uri) {\n         ObjectHelper.notEmpty(uri, \"uri\");\n        return bundleContext.getBundle().getEntry(uri);\n     }\n     protected Class<?> doLoadClass(String name, Bundle loader) {", "fixed": "     public URL loadResourceAsURL(String uri) {\n         ObjectHelper.notEmpty(uri, \"uri\");\n        return bundleContext.getBundle().getResource(uri);\n     }\n     protected Class<?> doLoadClass(String name, Bundle loader) {", "sourceBeforeFix": "bundleContext.getBundle().getEntry(uri)", "sourceAfterFix": "bundleContext.getBundle().getResource(uri)"}
{"fixCommitSHA1": "d4394e3727c822cd62e1e916335493df61ee409d", "projectName": "alibaba.fastjson", "bugType": "More Specific If", "problem": "                 mw.visitVarInsn(ASTORE, context.var(\"fied_ser\"));\n                 Label instanceOfElse_ = new Label(), instanceOfEnd_ = new Label();\n                if (context.writeDirect) {\n                     mw.visitVarInsn(ALOAD, context.var(\"fied_ser\"));\n                     mw.visitTypeInsn(INSTANCEOF, type(JavaBeanSerializer.class));\n                     mw.visitJumpInsn(IFEQ, instanceOfElse_);", "fixed": "                 mw.visitVarInsn(ASTORE, context.var(\"fied_ser\"));\n                 Label instanceOfElse_ = new Label(), instanceOfEnd_ = new Label();\n                if (context.writeDirect && Modifier.isPublic(fieldClass.getModifiers())) {\n                     mw.visitVarInsn(ALOAD, context.var(\"fied_ser\"));\n                     mw.visitTypeInsn(INSTANCEOF, type(JavaBeanSerializer.class));\n                     mw.visitJumpInsn(IFEQ, instanceOfElse_);", "sourceBeforeFix": "elementClass != null", "sourceAfterFix": "elementClass != null && Modifier.isPublic(elementClass.getModifiers())"}
{"fixCommitSHA1": "ea06b2fb96f2120ceee04a998021c1dc752e25d3", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     \n    static class Details {\n         \n         private DetailAST rcurly;\n         ", "fixed": "     \n    private static class Details {\n         \n         private DetailAST rcurly;\n         ", "sourceBeforeFix": "8", "sourceAfterFix": "10"}
{"fixCommitSHA1": "5a58a4ac4be0bee7c3ab573f6bf325f68cb3df85", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n\tpublic Set<Class<? extends CustomDatatype<?>>> getAllDatatypeClasses() {\r\n \t\tif (datatypeClasses == null) {\r\n \t\t\tpopulateBeanListsFromContext();\r\n \t\t}\r", "fixed": " \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n\tpublic synchronized Set<Class<? extends CustomDatatype<?>>> getAllDatatypeClasses() {\r\n \t\tif (datatypeClasses == null) {\r\n \t\t\tpopulateBeanListsFromContext();\r\n \t\t}\r", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ZooKeeperEndpointBuilder\n             extends\n                 ZooKeeperEndpointConsumerBuilder, ZooKeeperEndpointProducerBuilder {\n         default AdvancedZooKeeperEndpointBuilder advanced() {", "fixed": "     \n    public interface ZooKeeperEndpointBuilder\n             extends\n                 ZooKeeperEndpointConsumerBuilder, ZooKeeperEndpointProducerBuilder {\n         default AdvancedZooKeeperEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSjmsEndpointBuilder\n             extends\n                 AdvancedSjmsEndpointConsumerBuilder, AdvancedSjmsEndpointProducerBuilder {\n         default SjmsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSjmsEndpointBuilder\n             extends\n                 AdvancedSjmsEndpointConsumerBuilder, AdvancedSjmsEndpointProducerBuilder {\n         default SjmsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d725e4c654270636bc7de92cc6d74683b1de29fe", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         ImmutableMap.Builder<Symbol, Expression> newTranslations = ImmutableMap.builder();\n         for (Expression expression : expressions) {\n            Symbol symbol = symbolAllocator.newSymbol(expression, analysis.getType(expression));\n             projections.put(symbol, translations.rewrite(expression));\n             newTranslations.put(symbol, expression);", "fixed": "         ImmutableMap.Builder<Symbol, Expression> newTranslations = ImmutableMap.builder();\n         for (Expression expression : expressions) {\n            Symbol symbol = symbolAllocator.newSymbol(expression, analysis.getTypeWithCoercions(expression));\n             projections.put(symbol, translations.rewrite(expression));\n             newTranslations.put(symbol, expression);", "sourceBeforeFix": "analysis.getType(windowFunction)", "sourceAfterFix": "analysis.getTypeWithCoercions(windowFunction)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "fa46c498affee1608fbf952d576c7cf9a554e314", "projectName": "antlr.antlr4", "bugType": "Change Boolean Literal", "problem": " \t}\n \tpublic boolean wantsBaseListener() {\n\t\treturn false;\n \t}\n \tpublic boolean wantsBaseVisitor() {\n\t\treturn false;\n \t}\n \tpublic boolean supportsOverloadedMethods() {", "fixed": " \t}\n \tpublic boolean wantsBaseListener() {\n\t\treturn true;\n \t}\n \tpublic boolean wantsBaseVisitor() {\n\t\treturn true;\n \t}\n \tpublic boolean supportsOverloadedMethods() {", "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "0d3c78b6f28fb3cad00c12605209c524702adb0a", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "fixed": "             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "59116c60b91cc0bd2d7a52a3a6ff7cf8674527d7", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "     }\n     @Override\n    public List multiUpdate(List<List<Object>> keys, List<ValueUpdater> updaters) {\n         List<T> vals = _delegate.multiUpdate(keys, updaters);\n         cache(keys, vals);\n         return vals;", "fixed": "     }\n     @Override\n    public List<T> multiUpdate(List<List<Object>> keys, List<ValueUpdater> updaters) {\n         List<T> vals = _delegate.multiUpdate(keys, updaters);\n         cache(keys, vals);\n         return vals;", "sourceBeforeFix": "Map<List<Object>,Object>", "sourceAfterFix": "Map<List<Object>,T>"}
{"fixCommitSHA1": "2b27f6006b63686c9e8f1ff03b411ab2a6d1c791", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         template.sendBody(serverUri + \"?one=uno&two=dos\", \"Hello World\");\n        assertMockEndpointsSatisifed();\n     }\n     public void testHttpGetWithParamsViaHeader() throws Exception {", "fixed": "         template.sendBody(serverUri + \"?one=uno&two=dos\", \"Hello World\");\n        assertMockEndpointsSatisfied();\n     }\n     public void testHttpGetWithParamsViaHeader() throws Exception {", "sourceBeforeFix": "assertMockEndpointsSatisifed()", "sourceAfterFix": "assertMockEndpointsSatisfied()"}
{"fixCommitSHA1": "d52950fe7a7a7dd5dc1262d5a6833f726f012dc8", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         return new RouteBuilder() {\n             @Override\n             public void configure() throws Exception {\n                context.setDelayer(1000);\n                from(\"seda:a\").delayer(500).to(\"mock:result\");\n                 from(\"seda:b\").noDelayer().to(\"mock:result\");", "fixed": "         return new RouteBuilder() {\n             @Override\n             public void configure() throws Exception {\n                context.setDelayer(2000);\n                from(\"seda:a\").delayer(1000).to(\"mock:result\");\n                 from(\"seda:b\").noDelayer().to(\"mock:result\");", "sourceBeforeFix": "context.setDelayer(1000)", "sourceAfterFix": "context.setDelayer(2000)"}
{"fixCommitSHA1": "49f1caa69fb438d1fc9c8413da4a5bb517a63600", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "                 new ExponentialBackoffRetry(1000, 3));\n         client.start();\n        testConsumerConfig();", "fixed": "                 new ExponentialBackoffRetry(1000, 3));\n         client.start();\n        testProviderConfig();", "sourceBeforeFix": "testConsumerConfig()", "sourceAfterFix": "testProviderConfig()"}
{"fixCommitSHA1": "ac2202236983a4676572e6d984dcf5678b133599", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         return new RouteBuilder() {\n             @Override\n             public void configure() throws Exception {\n                context.setDelayer(2000);\n                 from(\"seda:a\").delayer(1000).to(\"mock:result\");", "fixed": "         return new RouteBuilder() {\n             @Override\n             public void configure() throws Exception {\n                context.setDelayer(2000L);\n                 from(\"seda:a\").delayer(1000).to(\"mock:result\");", "sourceBeforeFix": "context.setDelayer(2000)", "sourceAfterFix": "context.setDelayer(2000L)"}
{"fixCommitSHA1": "c465bf58aa9b067eacab42b336530638f63ad420", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 return group.id();\n             }\n            String msg = group.getId() + \" already exists with a different size: \" + group.memberCount();\n             logger.severe(msg);\n             throw new IllegalStateException(msg);\n         }", "fixed": "                 return group.id();\n             }\n            String msg = group.id() + \" already exists with a different size: \" + group.memberCount();\n             logger.severe(msg);\n             throw new IllegalStateException(msg);\n         }", "sourceBeforeFix": "group.getId()", "sourceAfterFix": "group.id()"}
{"fixCommitSHA1": "8c69c5f4aece3330100e4ad9d4d98887db691141", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     protected RouteBuilder createRouteBuilder() throws Exception {\n         return new RouteBuilder() {\n             public void configure() throws Exception {\n                from(\"rss:file:src/test/data/rss20.xml?splitEntries=false&consumer.delay=100\").to(\"mock:result\");\n             }\n         };\n     }", "fixed": "     protected RouteBuilder createRouteBuilder() throws Exception {\n         return new RouteBuilder() {\n             public void configure() throws Exception {\n                from(\"rss:file:src/test/data/rss20.xml?splitEntries=false\").to(\"mock:result\");\n             }\n         };\n     }", "sourceBeforeFix": "mock.expectedMessageCount(1)", "sourceAfterFix": "mock.expectedMinimumMessageCount(1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b186ed3519d4627f3352aa65db3d8283d1e8beda", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         void processCall(Packet packet, SemaphoreProxy semaphoreProxy, Integer permits, boolean detach) {\n             if (detach) {\n                 semaphoreProxy.releaseDetach(permits);\n                getClientEndpoint(packet.conn).attachDetachPermits(packet.name, -permits);\n             } else {\n                 semaphoreProxy.release(permits);\n             }", "fixed": "         void processCall(Packet packet, SemaphoreProxy semaphoreProxy, Integer permits, boolean detach) {\n             if (detach) {\n                 semaphoreProxy.releaseDetach(permits);\n                getClientEndpoint(packet.conn).attachDetachPermits(semaphoreProxy.getName(), -permits);\n             } else {\n                 semaphoreProxy.release(permits);\n             }", "sourceBeforeFix": "factory.getSemaphore(packet.name)", "sourceAfterFix": "factory.getOrCreateProxyByName(packet.name)"}
{"fixCommitSHA1": "3d46b36b001130b80769714ad3c2856db14603d2", "projectName": "JakeWharton.NineOldAndroids", "bugType": "Less Specific If", "problem": "      */\n     public static AnimatorProxy wrap(View view) {\n         AnimatorProxy proxy = PROXIES.get(view);\n        if (proxy == null) {\n             proxy = new AnimatorProxy(view);\n             PROXIES.put(view, proxy);\n         }", "fixed": "      */\n     public static AnimatorProxy wrap(View view) {\n         AnimatorProxy proxy = PROXIES.get(view);\n        if (proxy == null || proxy != view.getAnimation()) {\n             proxy = new AnimatorProxy(view);\n             PROXIES.put(view, proxy);\n         }", "sourceBeforeFix": "proxy == null", "sourceAfterFix": "proxy == null || proxy != view.getAnimation()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "3e3515f2af47dc0c1f9c080a257edb56f5eb72a7", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         if (node.getNodeType() == Node.ELEMENT_NODE) {\n             Document doc = node.getOwnerDocument();\n             if (((Element) node).getNamespaceURI().equals(BLUEPRINT_NS)) {\n                doc.renameNode(node, SPRING_NS, node.getNodeName());\n             }\n         }\n         NodeList list = node.getChildNodes();", "fixed": "         if (node.getNodeType() == Node.ELEMENT_NODE) {\n             Document doc = node.getOwnerDocument();\n             if (((Element) node).getNamespaceURI().equals(BLUEPRINT_NS)) {\n                doc.renameNode(node, SPRING_NS, node.getLocalName());\n             }\n         }\n         NodeList list = node.getChildNodes();", "sourceBeforeFix": "node.getNodeName()", "sourceAfterFix": "node.getLocalName()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "578bd281f8cb12f46ca902cd2b87b0838a831a90", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "         if (msg.getDate() == null) {\n             if (config.getBoolean(SyslogInputBase.CK_ALLOW_OVERRIDE_DATE)) {\n                LOG.info(\"Date could not be parsed. Was set to NOW because {} is true.\", SyslogInputBase.CK_ALLOW_OVERRIDE_DATE);\n                 return Tools.iso8601();\n             } else {\n                LOG.info(\"Syslog message is missing date or date could not be parsed. (Possibly set {} to true) \"\n                         + \"Not further handling. Message was: {}\", SyslogInputBase.CK_ALLOW_OVERRIDE_DATE, new String(msg.getRaw()));\n                 throw new IllegalStateException();\n             }", "fixed": "         if (msg.getDate() == null) {\n             if (config.getBoolean(SyslogInputBase.CK_ALLOW_OVERRIDE_DATE)) {\n                LOG.debug(\"Date could not be parsed. Was set to NOW because {} is true.\", SyslogInputBase.CK_ALLOW_OVERRIDE_DATE);\n                 return Tools.iso8601();\n             } else {\n                LOG.warn(\"Syslog message is missing date or date could not be parsed. (Possibly set {} to true) \"\n                         + \"Not further handling. Message was: {}\", SyslogInputBase.CK_ALLOW_OVERRIDE_DATE, new String(msg.getRaw()));\n                 throw new IllegalStateException();\n             }", "sourceBeforeFix": "LOG.error(\"Could not parse syslog message. Not further handling.\",e)", "sourceAfterFix": "LOG.warn(\"Could not parse syslog message. Not further handling.\",e)"}
{"fixCommitSHA1": "22d5241b5f75631e9cfda82a6912a2555eecb165", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         if (channel == null) {\n             initializeChannel();\n             if (endpoint.isSynchronous()) {\n                LOG.info(\"Getting synchronous method stub from channel\");\n                 grpcStub = GrpcUtils.constructGrpcBlockingStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());\n             } else {\n                LOG.info(\"Getting asynchronous method stub from channel\");\n                 grpcStub = GrpcUtils.constructGrpcAsyncStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());\n             }\n         }", "fixed": "         if (channel == null) {\n             initializeChannel();\n             if (endpoint.isSynchronous()) {\n                LOG.debug(\"Getting synchronous method stub from channel\");\n                 grpcStub = GrpcUtils.constructGrpcBlockingStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());\n             } else {\n                LOG.debug(\"Getting asynchronous method stub from channel\");\n                 grpcStub = GrpcUtils.constructGrpcAsyncStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());\n             }\n         }", "sourceBeforeFix": "LOG.trace(\"Terminating channel to the remote gRPC server\")", "sourceAfterFix": "LOG.debug(\"Terminating channel to the remote gRPC server\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 15809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n }", "fixed": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 10809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n }", "sourceBeforeFix": "id=15801", "sourceAfterFix": "id=10801"}
{"fixCommitSHA1": "c7fd539c43b8e027a74d0f9118e9f3d48bc930d1", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 entry.value = value;\n                 entry.dirty = true;\n             } else {\n                getClusterMap().put(buildAttributeName(name), value);\n             }\n         }", "fixed": "                 entry.value = value;\n                 entry.dirty = true;\n             } else {\n                getClusterMap().set(buildAttributeName(name), value);\n             }\n         }", "sourceBeforeFix": "clusterMap.put(buildAttributeName(entry.getKey()),cacheEntry.value)", "sourceAfterFix": "clusterMap.set(buildAttributeName(entry.getKey()),cacheEntry.value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6ec426667bbf19be4fca84eec48e03152e2cfffe", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Wrong Function Name", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Creates a configuration that is functionally close to that in the docs.\n      * @param verbose verbose mode\n      */\n    private DefaultConfiguration createConfig(boolean verbose) {\n         final DefaultConfiguration checkConfig =\n             createCheckConfig(FileTabCharacterCheck.class);\n         checkConfig.addAttribute(\"eachLine\", Boolean.toString(verbose));", "fixed": "      * Creates a configuration that is functionally close to that in the docs.\n      * @param verbose verbose mode\n      */\n    private static DefaultConfiguration createConfig(boolean verbose) {\n         final DefaultConfiguration checkConfig =\n             createCheckConfig(FileTabCharacterCheck.class);\n         checkConfig.addAttribute(\"eachLine\", Boolean.toString(verbose));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SqlEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSqlEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SqlEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSqlEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "5d9193eb8fcb699722980d5e5680557553c3ee39", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     @Before\n     public void setup() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.put(\"firehoseClient\", amazonKinesisFirehoseClient);\n         camelContext = new DefaultCamelContext(registry);\n     }", "fixed": "     @Before\n     public void setup() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.bind(\"firehoseClient\", amazonKinesisFirehoseClient);\n         camelContext = new DefaultCamelContext(registry);\n     }", "sourceBeforeFix": "registry.put(\"firehoseClient\",amazonKinesisFirehoseClient)", "sourceAfterFix": "registry.bind(\"firehoseClient\",amazonKinesisFirehoseClient)"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "88a1c1de41e145d7c39abe4d6dc4f3fd51545748", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": "  * Externalized configuration for server properties\n  * \n  * @author Dave Syer\n * \n  */\n public class ServerPropertiesTests {", "fixed": "  * Externalized configuration for server properties\n  * \n  * @author Dave Syer\n  */\n public class ServerPropertiesTests {", "sourceBeforeFix": "InetAddress.getLocalHost()", "sourceAfterFix": "InetAddress.getByName(\"127.0.0.1\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "a18c3d7297c81147d0fdf619ba0d4a85fc408726", "projectName": "thinkaurelius.titan", "bugType": "Less Specific If", "problem": "                 throw new TemporaryStorageException(ee);\n             }\n} else {\n            if (cf.getCompressionType() == null) {\n                 try {\n                     adm.disableTable(tableName);", "fixed": "                 throw new TemporaryStorageException(ee);\n             }\n} else {\n            if (cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE) {\n                 try {\n                     adm.disableTable(tableName);", "sourceBeforeFix": "cf.getCompressionType() == null", "sourceAfterFix": "cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bae2a6dee9b9ef115e45180bfc5663a6bca14225", "projectName": "mybatis.mybatis-3", "bugType": "Change Boolean Literal", "problem": "     if (!closed) {\r\n       try {\r\n         clearLocalCache();\r\n        flushStatements(false);\r\n       } finally {\r\n         if (required) {\r\n           transaction.rollback();\r", "fixed": "     if (!closed) {\r\n       try {\r\n         clearLocalCache();\r\n        flushStatements(true);\r\n       } finally {\r\n         if (required) {\r\n           transaction.rollback();\r", "sourceBeforeFix": "flushStatements(false)", "sourceAfterFix": "flushStatements(true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3e1c4d53a4730e2660c191def7615501a6fe982f", "projectName": "swagger-api.swagger-core", "bugType": "Same Function Less Args", "problem": "             final AnnotatedMember member = propDef.getPrimaryMember();\n             if (member != null && !ignore(member, xmlAccessorTypeAnnotation, propName, propertiesToIgnore)) {\n                JavaType propType = member.getType(beanDesc.bindingsForBeanType());\n                 property = resolveAnnotatedType(propType, member, propName, context, model, (t, a) -> {\n                     JsonUnwrapped uw = member.getAnnotation(JsonUnwrapped.class);\n                     if (uw != null && uw.enabled()) {", "fixed": "             final AnnotatedMember member = propDef.getPrimaryMember();\n             if (member != null && !ignore(member, xmlAccessorTypeAnnotation, propName, propertiesToIgnore)) {\n                JavaType propType = member.getType();\n                 property = resolveAnnotatedType(propType, member, propName, context, model, (t, a) -> {\n                     JsonUnwrapped uw = member.getAnnotation(JsonUnwrapped.class);\n                     if (uw != null && uw.enabled()) {", "sourceBeforeFix": "propMember.getType(beanDesc.bindingsForBeanType())", "sourceAfterFix": "propMember.getType()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fcea9dfeb6b2e12cb04602baac67b3a1c3cb58c9", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "     SimpleAttributeDefinition TARGET = SimpleAttributeDefinitionBuilder.create(\"target\", ModelType.STRING, true).\n             setDefaultValue(new ModelNode().set(Target.SYSTEM_OUT.toString())).\n            setValidator(EnumValidator.create(Target.class, false, false)).\n             build();\n     SimpleAttributeDefinition USE_PARENT_HANDLERS = SimpleAttributeDefinitionBuilder.create(\"use-parent-handlers\", ModelType.BOOLEAN, true).", "fixed": "     SimpleAttributeDefinition TARGET = SimpleAttributeDefinitionBuilder.create(\"target\", ModelType.STRING, true).\n             setDefaultValue(new ModelNode().set(Target.SYSTEM_OUT.toString())).\n            setValidator(EnumValidator.create(Target.class, true, false)).\n             build();\n     SimpleAttributeDefinition USE_PARENT_HANDLERS = SimpleAttributeDefinitionBuilder.create(\"use-parent-handlers\", ModelType.BOOLEAN, true).", "sourceBeforeFix": "SimpleAttributeDefinitionBuilder.create(\"max-backup-index\",ModelType.INT)", "sourceAfterFix": "SimpleAttributeDefinitionBuilder.create(\"max-backup-index\",ModelType.INT,true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 15808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n     /**", "fixed": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 10808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n     /**", "sourceBeforeFix": "id=15806", "sourceAfterFix": "id=10806"}
{"fixCommitSHA1": "21c7fa9a80fb34c514b8d44a80c4455e8cd2c28b", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tfor(int i=0;i<allowedIdentifiers.length;i++){\n\t\t\tassertEquals(validator.getValidIdentifier(allowedIdentifiers[i]), allowedIdentifiers[i] + \"-\" + allowedIdentifiersCheckDigits[i]);\n \t\t}", "fixed": " \t\tfor(int i=0;i<allowedIdentifiers.length;i++){\n\t\t\tassertEquals(validator.getValidIdentifier(allowedIdentifiers[i]), allowedIdentifiers[i] + \"-\" + allowedIdentifiersCheckDigitsInts[i]);\n \t\t}", "sourceBeforeFix": "allowedIdentifiersCheckDigits[i]", "sourceAfterFix": "allowedIdentifiersCheckDigitsInts[i]"}
{"fixCommitSHA1": "c6f898a116427906702afb349275331494ecaeef", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public URL loadResourceAsURL(String uri) {\n         ObjectHelper.notEmpty(uri, \"uri\");\n        return bundleContext.getBundle().getEntry(uri);\n     }\n     protected Class<?> doLoadClass(String name, Bundle loader) {", "fixed": "     public URL loadResourceAsURL(String uri) {\n         ObjectHelper.notEmpty(uri, \"uri\");\n        return bundleContext.getBundle().getResource(uri);\n     }\n     protected Class<?> doLoadClass(String name, Bundle loader) {", "sourceBeforeFix": "bundleContext.getBundle().getEntry(uri)", "sourceAfterFix": "bundleContext.getBundle().getResource(uri)"}
{"fixCommitSHA1": "720619e271e68d5848185c2a7e45175b18e98f90", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 }\n                 Exception lastFailureException = task.getStats().getLastFailureException();\n                if (lastFailureException instanceof SocketTimeoutException || lastFailureException instanceof UnknownHostException) {\n                     return GONE;\n                 }\n                if (lastFailureException instanceof ConnectException) {\n                     return UNRESPONSIVE;\n                 }", "fixed": "                 }\n                 Exception lastFailureException = task.getStats().getLastFailureException();\n                if (lastFailureException instanceof ConnectException) {\n                     return GONE;\n                 }\n                if (lastFailureException instanceof SocketTimeoutException) {\n                     return UNRESPONSIVE;\n                 }", "sourceBeforeFix": "lastFailureException instanceof ConnectException", "sourceAfterFix": "lastFailureException instanceof SocketTimeoutException"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "22a7ee9be3f6a027215775195111fe5f00727be0", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       }\n     }\n     if (selectedDirView == null) {\n      LOG.error(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",\n           availableBytes);\n       return null;\n     }", "fixed": "       }\n     }\n     if (selectedDirView == null) {\n      LOG.warn(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",\n           availableBytes);\n       return null;\n     }", "sourceBeforeFix": "LOG.error(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",availableBytes)", "sourceAfterFix": "LOG.warn(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",availableBytes)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(-1, rc);\n     assertTrue(outContent.toString().contains(\"key1 has not been created.\"));\n   }", "fixed": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(1, rc);\n     assertTrue(outContent.toString().contains(\"key1 has not been created.\"));\n   }", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "203b3e338e1941cfee5df5a431cd82e44d2c1a66", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   private static final SortedMap<Integer, Integer> SORTED_EMPTY = Maps.newTreeMap();\n  private static final SortedMap<Integer, Integer> SORTED_SINGLETON =\n       ImmutableSortedMap.of(1, 2);\n   public void testMapDifferenceOfSortedMapIsSorted() {", "fixed": "   }\n   private static final SortedMap<Integer, Integer> SORTED_EMPTY = Maps.newTreeMap();\n  private static final ImmutableSortedMap<Integer, Integer> SORTED_SINGLETON =\n       ImmutableSortedMap.of(1, 2);\n   public void testMapDifferenceOfSortedMapIsSorted() {", "sourceBeforeFix": "SortedMap<Integer,Integer>", "sourceAfterFix": "ImmutableSortedMap<Integer,Integer>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dfe8d520fbb77ffaa6d907a6db025928240153fb", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": " \t\tlogger.debug(\"NODE {}: Got DeleteReturnRoute request.\", nodeId);\n \t\tif(incomingMessage.getMessagePayloadByte(1) != 0x00) {\n\t\t\tlogger.error(\"NODE {}: Delete return routes failed with error 0x{}.\", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(0)));\n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.DeleteReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));", "fixed": " \t\tlogger.debug(\"NODE {}: Got DeleteReturnRoute request.\", nodeId);\n \t\tif(incomingMessage.getMessagePayloadByte(1) != 0x00) {\n\t\t\tlogger.error(\"NODE {}: Delete return routes failed with error 0x{}.\", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(1)));\n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.DeleteReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));", "sourceBeforeFix": "incomingMessage.getMessagePayloadByte(0)", "sourceAfterFix": "incomingMessage.getMessagePayloadByte(1)"}
{"fixCommitSHA1": "55afb8268fa23107749ab8fc0feac49724afe751", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "      *\n      * @param resource the resource\n      */\n    public ResourceInternal(T resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }", "fixed": "      *\n      * @param resource the resource\n      */\n    public ResourceInternal(R resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }", "sourceBeforeFix": "T", "sourceAfterFix": "R"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SftpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSftpEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SftpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSftpEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedBraintreeEndpointBuilder\n             extends\n                 AdvancedBraintreeEndpointConsumerBuilder, AdvancedBraintreeEndpointProducerBuilder {\n         default BraintreeEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedBraintreeEndpointBuilder\n             extends\n                 AdvancedBraintreeEndpointConsumerBuilder, AdvancedBraintreeEndpointProducerBuilder {\n         default BraintreeEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "89b6af6a05d3c7820afac94137ae105cf800c457", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Less Args", "problem": "     @Override\n     public void beginTree(DetailAST rootAST)\n     {\n        currentFrame = new FieldFrame(null, true, null, null);\n     }\n     @Override", "fixed": "     @Override\n     public void beginTree(DetailAST rootAST)\n     {\n        currentFrame = new FieldFrame(null, true, null);\n     }\n     @Override", "sourceBeforeFix": "new FieldFrame(null,true,null,null)", "sourceAfterFix": "new FieldFrame(null,true,null)"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 obj = null;\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "fixed": "                 obj = null;\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     return seed;\n   }\n  private void insertRandomly(ArrayList<Integer> elements, MinMaxPriorityQueue<Integer> q,\n      Random random) {\n     while (!elements.isEmpty()) {\n       int selectedIndex = random.nextInt(elements.size());\n       q.offer(elements.remove(selectedIndex));", "fixed": "     return seed;\n   }\n  private static void insertRandomly(\n      ArrayList<Integer> elements, MinMaxPriorityQueue<Integer> q, Random random) {\n     while (!elements.isEmpty()) {\n       int selectedIndex = random.nextInt(elements.size());\n       q.offer(elements.remove(selectedIndex));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "77e17fdb6dabe786f970f44602e297a5e0089e8c", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "         } catch (Throwable t) {\n             try {\n                 return Class.forName(className);\n            } catch (Throwable t2) {\n                 if (thisClass != null) {\n                     return thisClass.getClassLoader().loadClass(className);\n                 }", "fixed": "         } catch (Throwable t) {\n             try {\n                 return Class.forName(className);\n            } catch (Exception t2) {\n                 if (thisClass != null) {\n                     return thisClass.getClassLoader().loadClass(className);\n                 }", "sourceBeforeFix": "Throwable t2", "sourceAfterFix": "Exception t2"}
{"fixCommitSHA1": "f467d695be2ae4ee7d5c2978191e1415aef37a9e", "projectName": "netty.netty", "bugType": "Change Boolean Literal", "problem": "      * Creates a builder for new client-side {@link SslContext}.\n      */\n     public static SslContextBuilder forClient() {\n        return new SslContextBuilder(true);\n     }\n     /**", "fixed": "      * Creates a builder for new client-side {@link SslContext}.\n      */\n     public static SslContextBuilder forClient() {\n        return new SslContextBuilder(false);\n     }\n     /**", "sourceBeforeFix": "new SslContextBuilder(false)", "sourceAfterFix": "new SslContextBuilder(true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "615135aaa2ec18ea6c0b4785749079df4db5fd7a", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Wrong Function Name", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "facd8dc5ca08d45214b47e394b78e59f71d588f5", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         ModelNode request = (ModelNode) ctx.get(\"OP_REQ\");\n         if(request == null) {\n            throw new CommandFormatException(\"Parsed request isn't available.\");\n         }\n         if(ctx.getConfig().isValidateOperationRequests()) {", "fixed": "         ModelNode request = (ModelNode) ctx.get(\"OP_REQ\");\n         if(request == null) {\n            throw new CommandLineException(\"Parsed request isn't available.\");\n         }\n         if(ctx.getConfig().isValidateOperationRequests()) {", "sourceBeforeFix": "new CommandFormatException(\"Communication error\",e)", "sourceAfterFix": "new CommandLineException(\"Communication error\",e)"}
{"fixCommitSHA1": "7388b4b76881e97b9e80396c847aae4f6f72c4f3", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tpublic Mono<Health> health() {\n \t\treturn Flux.fromIterable(this.indicators.entrySet())\n \t\t\t\t.flatMap((entry) -> Mono.just(entry.getKey())\n\t\t\t\t\t\t.and(entry.getValue().health().compose(this.timeoutCompose)))\n \t\t\t\t.collectMap(Tuple2::getT1, Tuple2::getT2)\n \t\t\t\t.map(this.healthAggregator::aggregate);\n \t}", "fixed": " \tpublic Mono<Health> health() {\n \t\treturn Flux.fromIterable(this.indicators.entrySet())\n \t\t\t\t.flatMap((entry) -> Mono.just(entry.getKey())\n\t\t\t\t\t\t.zipWith(entry.getValue().health().compose(this.timeoutCompose)))\n \t\t\t\t.collectMap(Tuple2::getT1, Tuple2::getT2)\n \t\t\t\t.map(this.healthAggregator::aggregate);\n \t}", "sourceBeforeFix": "Mono.just(entry.getKey()).and(entry.getValue().health().compose(this.timeoutCompose))", "sourceAfterFix": "Mono.just(entry.getKey()).zipWith(entry.getValue().health().compose(this.timeoutCompose))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "75d3a0dec751780b96b1941fc00fbb8e47e34665", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "             localMember.setStringAttribute(\"key\" + i, HazelcastTestSupport.randomString());\n         }\n        assertOpenEventually(countDownLatch, 30);\n     }\n     @Test(timeout = 120000)", "fixed": "             localMember.setStringAttribute(\"key\" + i, HazelcastTestSupport.randomString());\n         }\n        assertOpenEventually(countDownLatch);\n     }\n     @Test(timeout = 120000)", "sourceBeforeFix": "assertOpenEventually(countDownLatch,30)", "sourceAfterFix": "assertOpenEventually(countDownLatch)"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "         parent.getRegionName(), rowContent, COL_SPLITB);\n     if (!hasReferencesA && !hasReferencesB) {\n      LOG.info(\"Deleting region \" + parent.getRegionName() +\n         \" because daughter splits no longer hold references\");\n       HRegion.deleteRegion(master.fs, master.rootdir, parent);", "fixed": "         parent.getRegionName(), rowContent, COL_SPLITB);\n     if (!hasReferencesA && !hasReferencesB) {\n      LOG.info(\"Deleting region \" + parent.getRegionNameAsString() +\n         \" because daughter splits no longer hold references\");\n       HRegion.deleteRegion(master.fs, master.rootdir, parent);", "sourceBeforeFix": "parent.getRegionName()", "sourceAfterFix": "parent.getRegionNameAsString()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffsetEXT(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "fixed": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffset(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "sourceBeforeFix": "GL.glCopyTexImage2DEXT(target,level,internalformat,x,y,width,height,border)", "sourceAfterFix": "GL.glCopyTexImage2D(target,level,internalformat,x,y,width,height,border)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6ec426667bbf19be4fca84eec48e03152e2cfffe", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Change Identifier Used", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n\t\tthis.container = factory.getEmbdeddedServletContainer();\nassertThat(getResponse(\"http:\n \t}", "fixed": " \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n\t\tthis.container = factory.getEmbeddedServletContainer();\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "6f981f77e5bd9e2eecbd851a2a02933cdb9af0d8", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   public void testGoogIsArray2() throws Exception {\n     testClosureFunction(\"goog.isArray\",\n         ALL_TYPE,\nALL_TYPE,\n         ALL_TYPE);\n   }", "fixed": "   public void testGoogIsArray2() throws Exception {\n     testClosureFunction(\"goog.isArray\",\n         ALL_TYPE,\n        ARRAY_TYPE,\n         ALL_TYPE);\n   }", "sourceBeforeFix": "testClosureFunction(\"goog.isArray\",ALL_TYPE,ALL_TYPE,ALL_TYPE)", "sourceAfterFix": "testClosureFunction(\"goog.isArray\",ALL_TYPE,ARRAY_TYPE,ALL_TYPE)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKubernetesServicesEndpointBuilder\n             extends\n                 AdvancedKubernetesServicesEndpointConsumerBuilder, AdvancedKubernetesServicesEndpointProducerBuilder {\n         default KubernetesServicesEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKubernetesServicesEndpointBuilder\n             extends\n                 AdvancedKubernetesServicesEndpointConsumerBuilder, AdvancedKubernetesServicesEndpointProducerBuilder {\n         default KubernetesServicesEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d82c094be09d50811339a1d0524b3a2ad35ebefa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             .setXmlName(Attribute.FLUSH_LOCK_TIMEOUT.getLocalName())\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(1L))\n             .build();\n     static final SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.MODIFICATION_QUEUE_SIZE, ModelType.INT, true)", "fixed": "             .setXmlName(Attribute.FLUSH_LOCK_TIMEOUT.getLocalName())\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(5000L))\n             .build();\n     static final SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.MODIFICATION_QUEUE_SIZE, ModelType.INT, true)", "sourceBeforeFix": "new ModelNode().set(1L)", "sourceAfterFix": "new ModelNode().set(5000L)"}
{"fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t    \t\t\t\tsendAllowed.release();\n \t    \t\t\t}\n \t\t\t\t\trecvMessage = recvQueue.take();\n\t\t\t\t\tlogger.trace(\"Receive queue TAKE: Length={}\", recvQueue.size());\n \t\t\t\t\tlogger.debug(\"Process Message = {}\", SerialMessage.bb2hex(recvMessage.getMessageBuffer()));\n \t\t    \t\thandleIncomingMessage(recvMessage);", "fixed": " \t    \t\t\t\tsendAllowed.release();\n \t    \t\t\t}\n \t\t\t\t\trecvMessage = recvQueue.take();\n\t\t\t\t\tlogger.debug(\"Receive queue TAKE: Length={}\", recvQueue.size());\n \t\t\t\t\tlogger.debug(\"Process Message = {}\", SerialMessage.bb2hex(recvMessage.getMessageBuffer()));\n \t\t    \t\thandleIncomingMessage(recvMessage);", "sourceBeforeFix": "logger.trace(\"Receive queue ADD: Length={}\",recvQueue.size())", "sourceAfterFix": "logger.debug(\"Receive queue ADD: Length={}\",recvQueue.size())"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result1\");\n        mock.expectedBodiesReceived(\"Hello World\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result1\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World 2\",\"Hello World 4\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\",\"Hello World 4\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "f1024ba0e7d5f1276a285a4218f26c70252719b5", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t *        the job configuration that has been attached to the original job graph\n \t * @param environment\n \t *        the environment of the task to be registered\n\t * @param initialCheckpointState\n\t *        the task's initial checkpoint state\n \t * @param activeOutputChannels\n \t *        the set of initially active output channels\n \t * @return the task to be started or <code>null</code> if a task with the same ID was already running", "fixed": " \t *        the job configuration that has been attached to the original job graph\n \t * @param environment\n \t *        the environment of the task to be registered\n \t * @param activeOutputChannels\n \t *        the set of initially active output channels\n \t * @return the task to be started or <code>null</code> if a task with the same ID was already running", "sourceBeforeFix": "LOG.error(result.getDescription())", "sourceAfterFix": "LOG.error(result.getDescription(),e)"}
{"fixCommitSHA1": "1e7ae5866daead0d81be2bfcf7febbd1ca0fcbd8", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * Creates new frame.\n          * @param parent parent frame.\n          */\n        public FieldFrame(FieldFrame parent) {\n             this.parent = parent;\n         }", "fixed": "          * Creates new frame.\n          * @param parent parent frame.\n          */\n        FieldFrame(FieldFrame parent) {\n             this.parent = parent;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "04a010c8499fbc96b1e5a99bdbebaf0b38d24586", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": "* @return {@link\n \tpublic int[] ensureCapacity (int additionalCapacity) {\r\n \t\tint sizeNeeded = size + additionalCapacity;\r\n\t\tif (sizeNeeded >= items.length) resize(Math.max(8, sizeNeeded));\r\n \t\treturn items;\r\n \t}\r", "fixed": "* @return {@link\n \tpublic int[] ensureCapacity (int additionalCapacity) {\r\n \t\tint sizeNeeded = size + additionalCapacity;\r\n\t\tif (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));\r\n \t\treturn items;\r\n \t}\r", "sourceBeforeFix": "sizeNeeded >= items.length", "sourceAfterFix": "sizeNeeded > items.length"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "fixed": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MiloClientEndpointBuilder\n             extends\n                 MiloClientEndpointConsumerBuilder, MiloClientEndpointProducerBuilder {\n         default AdvancedMiloClientEndpointBuilder advanced() {", "fixed": "     \n    public interface MiloClientEndpointBuilder\n             extends\n                 MiloClientEndpointConsumerBuilder, MiloClientEndpointProducerBuilder {\n         default AdvancedMiloClientEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "7d00231a60e91b988ecea2a1d53a1d04c60f19c1", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": "         unterminatableExecutor = null;\n     }\n    public Executor getChannelFactoryExecutor() {\n         return unterminatableExecutor;\n     }\n }", "fixed": "         unterminatableExecutor = null;\n     }\n    public synchronized Executor getChannelFactoryExecutor() {\n         return unterminatableExecutor;\n     }\n }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArraysEXT(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "fixed": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArrays(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "sourceBeforeFix": "GL.glBindTextureEXT(target,texture)", "sourceAfterFix": "GL.glBindTexture(target,texture)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "315a7ab26e5b9cbe1aba47ed1c574c0630be8248", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "                 }\n             }\n             if (requiredMessageListener == null) {\n                throw MESSAGES.unknownMessageListenerType(resourceAdapterName, messageListenerInterface.getName());\n             }\n             final Activation activation = requiredMessageListener.getActivation();", "fixed": "                 }\n             }\n             if (requiredMessageListener == null) {\n                throw MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(), resourceAdapterName);\n             }\n             final Activation activation = requiredMessageListener.getActivation();", "sourceBeforeFix": "MESSAGES.unknownMessageListenerType(resourceAdapterName,messageListenerInterface.getName())", "sourceAfterFix": "MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(),resourceAdapterName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "17de6689ab43b6d8fc8b60b87eb1155ba55b26f6", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": "  * ...\n  * </pre>\n  * \n  * @author Dave Syer\n  */\n public class VcapApplicationContextInitializer implements", "fixed": "  * ...\n  * </pre>\n  * \n * N.B. this initializer is mainly intended for informational use (the application and\n * instance ids are particularly useful). For service binding you might find that Spring\n * Cloud is more convenient and more robust against potential changes in Cloud Foundry.\n * \n  * @author Dave Syer\n  */\n public class VcapApplicationContextInitializer implements", "sourceBeforeFix": "Integer.MIN_VALUE + 11", "sourceAfterFix": "Integer.MIN_VALUE + 9"}
{"fixCommitSHA1": "0d843780fc3dbe96fa513166a18a192d969dc232", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "  * @author Rick Giles\n  * @author lkuehne\n  */\nclass PackageObjectFactory implements ModuleFactory {\n     \n     private static final Log LOG = LogFactory.getLog(PackageObjectFactory.class);", "fixed": "  * @author Rick Giles\n  * @author lkuehne\n  */\npublic class PackageObjectFactory implements ModuleFactory {\n     \n     private static final Log LOG = LogFactory.getLog(PackageObjectFactory.class);", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4f952dac30892ce9458bee0403d908ee642c4481", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "                     .setXmlName(Attribute.MODE.getLocalName())\n                     .setAllowExpression(true)\n                     .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n                    .setValidator(new EnumValidator<Mode>(Mode.class, true, false))\n                     .build();\n     ClusteredCacheAdd(CacheMode mode) {", "fixed": "                     .setXmlName(Attribute.MODE.getLocalName())\n                     .setAllowExpression(true)\n                     .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n                    .setValidator(new EnumValidator<Mode>(Mode.class, false, true))\n                     .build();\n     ClusteredCacheAdd(CacheMode mode) {", "sourceBeforeFix": "new EnumValidator<Mode>(Mode.class,true,false)", "sourceAfterFix": "new EnumValidator<Mode>(Mode.class,false,true)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStream<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStream<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "fixed": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStreamSink<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "8489cbc64e450aea0a05cf2bca4d6e04285d1459", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "  * Configuration property keys. This class provides a set of pre-defined property keys.\n  */\n @ThreadSafe\npublic class PropertyKey implements Comparable<PropertyKey> {\n   \n   private static final Map<String, PropertyKey> DEFAULT_KEYS_MAP = new HashMap<>();", "fixed": "  * Configuration property keys. This class provides a set of pre-defined property keys.\n  */\n @ThreadSafe\npublic final class PropertyKey implements Comparable<PropertyKey> {\n   \n   private static final Map<String, PropertyKey> DEFAULT_KEYS_MAP = new HashMap<>();", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RefEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRefEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface RefEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRefEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9968eea08bf15cf42c41da717923967d606b3c1c", "projectName": "dropwizard.metrics", "bugType": "Wrong Function Name", "problem": "     }\n     private void printDoubleField(String name, double value, long epoch) {\n        sendToGraphite(String.format(\"%s%s %2.2f %d\\n\", prefix, sanitizedName(name), value, epoch));\n     }\n     private void printLongField(String name, long value, long epoch) {\n        sendToGraphite(String.format(\"%s%s %d %d\\n\", prefix, sanitizedName(name), value, epoch));\n     }\n     private void printVmMetrics(long epoch) throws IOException {", "fixed": "     }\n     private void printDoubleField(String name, double value, long epoch) {\n        sendToGraphite(String.format(\"%s%s %2.2f %d\\n\", prefix, sanitizeName(name), value, epoch));\n     }\n     private void printLongField(String name, long value, long epoch) {\n        sendToGraphite(String.format(\"%s%s %d %d\\n\", prefix, sanitizeName(name), value, epoch));\n     }\n     private void printVmMetrics(long epoch) throws IOException {", "sourceBeforeFix": "sanitizedName(name)", "sourceAfterFix": "sanitizeName(name)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0aaa94462bb08336d43b9c8becbbd538108fa318", "projectName": "Atmosphere.atmosphere", "bugType": "Change Caller in Function Call", "problem": "         if (!wasResumed && isAtmosphereResourceValid(r)) {\n             logger.trace(\"Associating AtmosphereResource {} with Broadcaster {}\", r.uuid(), getID());\n            String parentUUID = (String) r.getRequest().getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);\n             if (!backwardCompatible && parentUUID != null) {\n                 AtmosphereResource p = AtmosphereResourceFactory.getDefault().find(parentUUID);\n                 if (p != null && !resources.contains(p)) {", "fixed": "         if (!wasResumed && isAtmosphereResourceValid(r)) {\n             logger.trace(\"Associating AtmosphereResource {} with Broadcaster {}\", r.uuid(), getID());\n            String parentUUID = (String) AtmosphereResourceImpl.class.cast(r).getRequest(false).getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);\n             if (!backwardCompatible && parentUUID != null) {\n                 AtmosphereResource p = AtmosphereResourceFactory.getDefault().find(parentUUID);\n                 if (p != null && !resources.contains(p)) {", "sourceBeforeFix": "r.getRequest()", "sourceAfterFix": "rImpl.getRequest()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ZooKeeperEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedZooKeeperEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ZooKeeperEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedZooKeeperEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesResourcesQuotaEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesResourcesQuotaEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesResourcesQuotaEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesResourcesQuotaEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "fixed": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean keyDown (int keycode) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].keyDown(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean keyDown (int keycode) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).keyDown(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "4a9d7457934350576e9e37a7f253066f4a5d3cce", "projectName": "stanfordnlp.CoreNLP", "bugType": "Wrong Function Name", "problem": "   }\n   public static TwoDimensionalMap<String, String, SimpleMatrix> averageBinaryMatrices(List<TwoDimensionalMap<String, String, SimpleMatrix>> maps) {\n    TwoDimensionalMap<String, String, SimpleMatrix> averages = new TwoDimensionalMap<String, String, SimpleMatrix>();\n     for (Pair<String, String> binary : getBinaryMatrixNames(maps)) {\n       int count = 0;\n       SimpleMatrix matrix = null;", "fixed": "   }\n   public static TwoDimensionalMap<String, String, SimpleMatrix> averageBinaryMatrices(List<TwoDimensionalMap<String, String, SimpleMatrix>> maps) {\n    TwoDimensionalMap<String, String, SimpleMatrix> averages = TwoDimensionalMap.treeMap();\n     for (Pair<String, String> binary : getBinaryMatrixNames(maps)) {\n       int count = 0;\n       SimpleMatrix matrix = null;", "sourceBeforeFix": "Generics.newHashMap()", "sourceAfterFix": "Generics.newTreeMap()"}
{"fixCommitSHA1": "8a4f25a6dcaae2b704bce5794e007131236cb0d7", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                 String text = simple.evaluate(exchange, String.class);\n                Constructor<?> constructor = type.getDeclaredConstructor(String.class);\n                 cause = (Exception) constructor.newInstance(text);\n                 exchange.setException(cause);\n             } else if (cause == null && type != null) {", "fixed": "                 String text = simple.evaluate(exchange, String.class);\n                Constructor<?> constructor = type.getConstructor(String.class);\n                 cause = (Exception) constructor.newInstance(text);\n                 exchange.setException(cause);\n             } else if (cause == null && type != null) {", "sourceBeforeFix": "type.getDeclaredConstructor(String.class)", "sourceAfterFix": "type.getConstructor(String.class)"}
{"fixCommitSHA1": "bafb1f877934f826d5f74f9f33e824dd1aa30432", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         return getInputFactory().createXMLStreamReader(in);\n     }\n    @Converter\n     public XMLEventReader createXMLEventReader(InputStream in) throws XMLStreamException {\n         return getInputFactory().createXMLEventReader(in);\n     }", "fixed": "         return getInputFactory().createXMLStreamReader(in);\n     }\n    @Deprecated\n     public XMLEventReader createXMLEventReader(InputStream in) throws XMLStreamException {\n         return getInputFactory().createXMLEventReader(in);\n     }", "sourceBeforeFix": "@Converter", "sourceAfterFix": "@Deprecated"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytesBinary(tableNameOrRegionName), Bytes.toBytesBinary(splitPoint));\n   }\n   /**", "fixed": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytes(tableNameOrRegionName), Bytes.toBytes(splitPoint));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(regionname)", "sourceAfterFix": "Bytes.toBytes(regionname)"}
{"fixCommitSHA1": "d38eb966db524987cb154e39e7377c18bb5b2569", "projectName": "eclipse.vert.x", "bugType": "Same Function More Args", "problem": "   private void testCookies(String cookieHeader, Consumer<HttpServerRequest> serverChecker, Consumer<HttpClientResponse> clientChecker) throws Exception {\n     server.requestHandler(serverChecker::accept);\n    startServer();\n     client.request(\n       HttpMethod.GET,\n       testAddress,", "fixed": "   private void testCookies(String cookieHeader, Consumer<HttpServerRequest> serverChecker, Consumer<HttpClientResponse> clientChecker) throws Exception {\n     server.requestHandler(serverChecker::accept);\n    startServer(testAddress);\n     client.request(\n       HttpMethod.GET,\n       testAddress,", "sourceBeforeFix": "startServer()", "sourceAfterFix": "startServer(testAddress)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ZendeskEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedZendeskEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ZendeskEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedZendeskEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ZendeskEndpointBuilder\n             extends\n                 ZendeskEndpointConsumerBuilder, ZendeskEndpointProducerBuilder {\n         default AdvancedZendeskEndpointBuilder advanced() {", "fixed": "     \n    public interface ZendeskEndpointBuilder\n             extends\n                 ZendeskEndpointConsumerBuilder, ZendeskEndpointProducerBuilder {\n         default AdvancedZendeskEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a4045eb6bd919f79b17ea9bf778b975e74e777e6", "projectName": "alibaba.druid", "bugType": "Change Binary Operator", "problem": "         public String getFullName() {\r\n             if (fullName == null) {\r\n                if (table != null) {\r\n                     fullName = name;\r\n                 } else {\r\n                     fullName = table + '.' + name;\r", "fixed": "         public String getFullName() {\r\n             if (fullName == null) {\r\n                if (table == null) {\r\n                     fullName = name;\r\n                 } else {\r\n                     fullName = table + '.' + name;\r", "sourceBeforeFix": "table != null", "sourceAfterFix": "table == null"}
{"fixCommitSHA1": "2d21e297b35059a577f6e111614bbebef3505632", "projectName": "openmrs.openmrs-core", "bugType": "Change Boolean Literal", "problem": " \t@ModelAttribute(\"providerAttributeTypes\")\r\n \tpublic List<ProviderAttributeType> getProviderAttributeTypes() throws Exception {\r\n\t\treturn Context.getProviderService().getAllProviderAttributeTypes(false);\r\n \t}\r\n \t@RequestMapping(method = RequestMethod.GET)\r", "fixed": " \t@ModelAttribute(\"providerAttributeTypes\")\r\n \tpublic List<ProviderAttributeType> getProviderAttributeTypes() throws Exception {\r\n\t\treturn Context.getProviderService().getAllProviderAttributeTypes(true);\r\n \t}\r\n \t@RequestMapping(method = RequestMethod.GET)\r", "sourceBeforeFix": "Context.getProviderService().getAllProviderAttributeTypes(false)", "sourceAfterFix": "Context.getProviderService().getAllProviderAttributeTypes(true)"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param column column index.\n      * @return value at specified column.\n      */\n    private Object getValueAtDetailNode(DetailNode node, int column) {\n         final Object value;\n         switch (column) {", "fixed": "      * @param column column index.\n      * @return value at specified column.\n      */\n    private static Object getValueAtDetailNode(DetailNode node, int column) {\n         final Object value;\n         switch (column) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * @param nameToFind the name we're looking for\n          * @return whether it was found\n          */\n        LexicalFrame getIfContains(String nameToFind) {\n             LexicalFrame frame = null;\n             if (contains(nameToFind)) {", "fixed": "          * @param nameToFind the name we're looking for\n          * @return whether it was found\n          */\n        private LexicalFrame getIfContains(String nameToFind) {\n             LexicalFrame frame = null;\n             if (contains(nameToFind)) {", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "2897c425577be5d5b3ed10ce5f01e0fcb8ba1975", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "* @see FileSystemPermission\n    */\n   public PermissionStatus applyUMask(FileSystemPermission umask, Configuration configuration) {\n    if (!SecurityUtils.isSecurityEnabled(configuration)) {\n       return new PermissionStatus(mUserName, mGroupName, mPermission);\n     }\n     FileSystemPermission newFileSystemPermission = mPermission.applyUMask(umask);", "fixed": "* @see FileSystemPermission\n    */\n   public PermissionStatus applyUMask(FileSystemPermission umask, Configuration configuration) {\n    if (!SecurityUtils.isAuthorizationEnabled(configuration)) {\n       return new PermissionStatus(mUserName, mGroupName, mPermission);\n     }\n     FileSystemPermission newFileSystemPermission = mPermission.applyUMask(umask);", "sourceBeforeFix": "SecurityUtils.isSecurityEnabled(configuration)", "sourceAfterFix": "SecurityUtils.isAuthorizationEnabled(configuration)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(2000L)\r\n                     .batchSize(100)\r", "fixed": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(500L)\r\n                     .batchSize(100)\r", "sourceBeforeFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(2000L)", "sourceAfterFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(500L)"}
{"fixCommitSHA1": "f521ac79d4dfc08f8ef542e06ce0bbc3e9ac833b", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "   }\n   public double[] initial(boolean useRandomSeed) {\n     Random randToUse = useRandomSeed ? new Random() : rand;\n    return initial(rand);\n   }\n   public double[] initial(Random randGen) {", "fixed": "   }\n   public double[] initial(boolean useRandomSeed) {\n     Random randToUse = useRandomSeed ? new Random() : rand;\n    return initial(randToUse);\n   }\n   public double[] initial(Random randGen) {", "sourceBeforeFix": "initial(rand)", "sourceAfterFix": "initial(randToUse)"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Configuration\n\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "fixed": " \t}\n \t@Configuration\n\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"}
{"fixCommitSHA1": "54e74976040f09efb4a645107f6963ddc5b344ec", "projectName": "neo4j.neo4j", "bugType": "Change Numeric Literal", "problem": "         translationTableLocks = new StampedLock[translationTableStripeLevel];\n         for ( int i = 0; i < translationTableStripeLevel; i++ )\n         {\n            translationTables[i] = Primitive.longObjectMap( 32 );\n             translationTableLocks[i] = new StampedLock();\n         }\n         PageEvictionCallback onEviction = new MuninnPageEvictionCallback(", "fixed": "         translationTableLocks = new StampedLock[translationTableStripeLevel];\n         for ( int i = 0; i < translationTableStripeLevel; i++ )\n         {\n            translationTables[i] = Primitive.longObjectMap( 8 );\n             translationTableLocks[i] = new StampedLock();\n         }\n         PageEvictionCallback onEviction = new MuninnPageEvictionCallback(", "sourceBeforeFix": "Integer.getInteger(\"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor\",8)", "sourceAfterFix": "Integer.getInteger(\"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor\",10)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dfb59a9e68b9bb0863b1397ddd0df1fa15eccdb8", "projectName": "openmrs.openmrs-core", "bugType": "Less Specific If", "problem": " \t\t\t\tif (!patient.getVoided()) {\r\n\t\t\t\t\tMap<String, Relationship> relationships = getRelationshipsMap(patientModel, request);\r\n \t\t\t\t\tfor (Relationship relationship : relationships.values()) {\r", "fixed": " \t\t\t\tif (!patient.getVoided()) {\r\n\t\t\t\t\tMap<String, Relationship> relationships = getRelationshipsMap(patientModel, result, request);\r\n \t\t\t\t\tfor (Relationship relationship : relationships.values()) {\r", "sourceBeforeFix": "\"false\".equals(showRelationships)", "sourceAfterFix": "\"false\".equals(showRelationships) || result.hasErrors()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EventAdminEndpointBuilder\n             extends\n                 EventAdminEndpointConsumerBuilder, EventAdminEndpointProducerBuilder {\n         default AdvancedEventAdminEndpointBuilder advanced() {", "fixed": "     \n    public interface EventAdminEndpointBuilder\n             extends\n                 EventAdminEndpointConsumerBuilder, EventAdminEndpointProducerBuilder {\n         default AdvancedEventAdminEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "    * User can override this method if there is a better way to perform bulk reverse lookup\n    */\n  Map<String, List<String>> unapplyAll(Iterable<String> values)\n   {\n     if (values == null) {\n       return Collections.emptyMap();", "fixed": "    * User can override this method if there is a better way to perform bulk reverse lookup\n    */\n  public Map<String, List<String>> unapplyAll(Iterable<String> values)\n   {\n     if (values == null) {\n       return Collections.emptyMap();", "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fb1a1ca0d397301efc3cc702e4836b9bca169251", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n\t\tps.createRelationship(rel);\r\n \t}\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r", "fixed": " \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n\t\tps.saveRelationship(rel);\r\n \t}\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r", "sourceBeforeFix": "Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))", "sourceAfterFix": "Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ddb09b32a93354cb9baebf8e85a815c18dfc0320", "projectName": "aws.aws-sdk-java", "bugType": "Same Function More Args", "problem": "         int indexOf = buffer.indexOf( partToMatch );\n         while ( indexOf != -1 ) {\n             buffer = buffer.replace( indexOf, indexOf + partToMatch.length(), replacement );\n            indexOf = buffer.indexOf( partToMatch );\n         }\n         return buffer.toString();", "fixed": "         int indexOf = buffer.indexOf( partToMatch );\n         while ( indexOf != -1 ) {\n             buffer = buffer.replace( indexOf, indexOf + partToMatch.length(), replacement );\n            indexOf = buffer.indexOf( partToMatch, indexOf + replacement.length() );\n         }\n         return buffer.toString();", "sourceBeforeFix": "buffer.indexOf(partToMatch)", "sourceAfterFix": "buffer.indexOf(partToMatch,indexOf + replacement.length())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "c9f41fa744d6520f5f44be1a8a16e6a32a8fa83d", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "     \n    void failTask(Throwable cause)\n     {\n         TaskStatus taskStatus = getTaskStatus();\n         if (!taskStatus.getState().isDone()) {", "fixed": "     \n    private void failTask(Throwable cause)\n     {\n         TaskStatus taskStatus = getTaskStatus();\n         if (!taskStatus.getState().isDone()) {", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "fixed": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "f877cc6742ba3c75739edd9debae662d834d191d", "projectName": "mybatis.mybatis-3", "bugType": "Change Identifier Used", "problem": "   Map<Integer, User<String>> getAMapOfUsers();\n   @Select(\"select id, name from users where id=1\")\n  Map<Integer, Object> getUserAsAMap();\n   @Select(\"select id, name from users\")\n  List<Map<Integer, Object>> getAListOfMaps();\n }", "fixed": "   Map<Integer, User<String>> getAMapOfUsers();\n   @Select(\"select id, name from users where id=1\")\n  Map<String, Object> getUserAsAMap();\n   @Select(\"select id, name from users\")\n  List<Map<String, Object>> getAListOfMaps();\n }", "sourceBeforeFix": "Map<Integer,Object>", "sourceAfterFix": "Map<String,Object>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f7505224102a3d9f3119d2685ba2d03cb594dd19", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": " public interface Serializer<T> extends Serializable {\n     byte[] serialize(T obj);\n    Object deserialize(byte[] b);\n }", "fixed": " public interface Serializer<T> extends Serializable {\n     byte[] serialize(T obj);\n    T deserialize(byte[] b);\n }", "sourceBeforeFix": "Object deserialize(byte[] b); ", "sourceAfterFix": "T deserialize(byte[] b); "}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedStreamEndpointBuilder\n             extends\n                 AdvancedStreamEndpointConsumerBuilder, AdvancedStreamEndpointProducerBuilder {\n         default StreamEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedStreamEndpointBuilder\n             extends\n                 AdvancedStreamEndpointConsumerBuilder, AdvancedStreamEndpointProducerBuilder {\n         default StreamEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "cade2271924f42b35da72efa4ad6b2eebc9875cd", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Caller in Function Call", "problem": "    *\n    * @param dictPath the path to the dictionary file\n    */\n  private HashMap<String, String> setupDictionary(String dictPath) {\n     HashMap<String, String> dictionary = new HashMap<>();\n     BufferedReader br = null;\n     try {", "fixed": "    *\n    * @param dictPath the path to the dictionary file\n    */\n  private static HashMap<String, String> setupDictionary(String dictPath) {\n     HashMap<String, String> dictionary = new HashMap<>();\n     BufferedReader br = null;\n     try {", "sourceBeforeFix": "dict.put(words[0],words[2])", "sourceAfterFix": "dictionary.put(words[0],words[2])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJBPMEndpointBuilder\n             extends\n                 AdvancedJBPMEndpointConsumerBuilder, AdvancedJBPMEndpointProducerBuilder {\n         default JBPMEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJBPMEndpointBuilder\n             extends\n                 AdvancedJBPMEndpointConsumerBuilder, AdvancedJBPMEndpointProducerBuilder {\n         default JBPMEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d222fc981c938bd3543ee61f22422d20efcdcd94", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(800);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(800)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "732ad17a05a1ba8008952e7607f9dae1aca5eacc", "projectName": "wildfly.wildfly", "bugType": "Change Binary Operator", "problem": "     public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n         DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        if (deploymentUnit.getParent() == null) {\n             return;\n         }", "fixed": "     public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n         DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        if (deploymentUnit.getParent() != null) {\n             return;\n         }", "sourceBeforeFix": "deploymentUnit.getParent() == null", "sourceAfterFix": "deploymentUnit.getParent() != null"}
{"fixCommitSHA1": "9a7cd4fedbaa2cf02c3cb37e2618ad72409e4745", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         context.stop();\n         List<MessagePayload> events = nagios.getMessagePayloadList();\n        assertEquals(10, events.size());\n     }\n     @Override", "fixed": "         context.stop();\n         List<MessagePayload> events = nagios.getMessagePayloadList();\n        assertEquals(11, events.size());\n     }\n     @Override", "sourceBeforeFix": "assertEquals(10,events.size())", "sourceAfterFix": "assertEquals(12,events.size())"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public boolean updateWorld() {\n         boolean repositioned = octree.repositionNodes();\n         boolean updated = dataBridge.updateWorld();", "fixed": "     }\n     @Override\n    public synchronized boolean updateWorld() {\n         boolean repositioned = octree.repositionNodes();\n         boolean updated = dataBridge.updateWorld();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "31113bf0d908a8fc194f078dae57b81494db7126", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Identifier Used", "problem": "          config.validate();\n          Assert.fail();\n       }\n      catch (IllegalStateException ise) {\n          Assert.assertTrue(ise.getMessage().contains(\"together\"));\n       }\n    }", "fixed": "          config.validate();\n          Assert.fail();\n       }\n      catch (IllegalArgumentException ise) {\n          Assert.assertTrue(ise.getMessage().contains(\"together\"));\n       }\n    }", "sourceBeforeFix": "IllegalStateException ise", "sourceAfterFix": "IllegalArgumentException ise"}
{"fixCommitSHA1": "5fd6669348c19dc24ef1ba51c2ca0a64cbedef20", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "fixed": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "                 linesToPositionTemp.add(0);\n                final StringBuilder sb = new StringBuilder();\n                 for (final String element : sourceLines) {\n                     linesToPositionTemp.add(sb.length());", "fixed": "                 linesToPositionTemp.add(0);\n                final StringBuilder sb = new StringBuilder(1024);\n                 for (final String element : sourceLines) {\n                     linesToPositionTemp.add(sb.length());", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesConfigMapsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesConfigMapsEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesConfigMapsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesConfigMapsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "         void delta() {}\n         void epsilon() {}\n     }\n    private static class Super {\n         void testOne() {}\n     }\n    private static class Sub extends Super {\n         void testTwo() {}\n     }", "fixed": "         void delta() {}\n         void epsilon() {}\n     }\n    static class Super {\n         void testOne() {}\n     }\n    static class Sub extends Super {\n         void testTwo() {}\n     }", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see java.lang.Object\n \t */\n\tpublic int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "fixed": " \t * \n* @see java.lang.Object\n \t */\n\tpublic abstract int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "         }\n     );\n    log.info(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n     return retVal;\n   }", "fixed": "         }\n     );\n    log.debug(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n     return retVal;\n   }", "sourceBeforeFix": "log.info(\"Performing lookup: %s --> %s\",nodeIds,retVal)", "sourceAfterFix": "log.debug(\"Performing lookup: %s --> %s\",nodeIds,retVal)"}
{"fixCommitSHA1": "bb94905af696c5c2d4a748a2cafef937999a07ee", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "         }\n     }\n    private class EmptyIterator implements Iterator {\n         @Override\n         public boolean hasNext() {", "fixed": "         }\n     }\n    private static class EmptyIterator implements Iterator {\n         @Override\n         public boolean hasNext() {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "313d81ca2fb88a734f46e0e144d5a1a44ee1c4cd", "projectName": "druid-io.druid", "bugType": "Same Function Less Args", "problem": "         )\n     );\n    Assert.assertTrue(\"Operation must complete within 100ms\", queryNotifyLatch.await(100, TimeUnit.MILLISECONDS));\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "fixed": "         )\n     );\n    queryNotifyLatch.await();\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "sourceBeforeFix": "waitLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "waitLatch.await()"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "5e22e43ab5b4e6d43fc3ae7400f5860363428937", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Wrong Function Name", "problem": "             if (abortOnRemoteCloseException(cause)){\n                log.error(currentThread() + String.format(\"Trying to recover from dead Channel: %s \", channel));\n                 remotelyClosed(channel, null);\n                 return;\n             }", "fixed": "             if (abortOnRemoteCloseException(cause)){\n                log.debug(currentThread() + String.format(\"Trying to recover from dead Channel: %s \", channel));\n                 remotelyClosed(channel, null);\n                 return;\n             }", "sourceBeforeFix": "log.error(currentThread() + String.format(\"Trying to recover from dead Channel: %s \",channel))", "sourceAfterFix": "log.debug(currentThread() + String.format(\"Trying to recover from dead Channel: %s \",channel))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "16b799dae56b54f82a14dc0e0ad24977f06df6f6", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "   @Test\n   public void testJobConfigurationsWithTsvImporterTextMapper() throws Exception {\n     String table = \"test-\" + UUID.randomUUID();\n    Path bulkOutputPath = new Path(util.getDataTestDir(table),\"hfiles\");\n     String INPUT_FILE = \"InputFile1.csv\";\n     String[] args =", "fixed": "   @Test\n   public void testJobConfigurationsWithTsvImporterTextMapper() throws Exception {\n     String table = \"test-\" + UUID.randomUUID();\n    Path bulkOutputPath = new Path(util.getDataTestDirOnTestFS(table),\"hfiles\");\n     String INPUT_FILE = \"InputFile1.csv\";\n     String[] args =", "sourceBeforeFix": "util.getDataTestDir(table)", "sourceAfterFix": "util.getDataTestDirOnTestFS(table)"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).toString();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "fixed": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "sourceBeforeFix": "new Path(bucketPath,\"test-\" + i + '-'+ j).toString()", "sourceAfterFix": "new Path(bucketPath,\"test-\" + i + '-'+ j).getPath()"}
{"fixCommitSHA1": "9704f6049c41315c3de3fa6be6faf01e62c67863", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     new HTable(conf, \".META.\");\n     int port = cluster.getMaster().getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"Master\");\n     port = cluster.getRegionThreads().get(0).getRegionServer().\n       getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"Region Server\");\n   }\n   private void assertHasExpectedContent(final URL u, final String expected)", "fixed": "     new HTable(conf, \".META.\");\n     int port = cluster.getMaster().getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"master\");\n     port = cluster.getRegionThreads().get(0).getRegionServer().\n       getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"regionserver\");\n   }\n   private void assertHasExpectedContent(final URL u, final String expected)", "sourceBeforeFix": "content.matches(expected)", "sourceAfterFix": "content.contains(expected)"}
{"fixCommitSHA1": "23efcad891c91fc131ed4729c734ff6b122197df", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnExecution() throws Exception {\n\t\tString processDefinitionId = deployOneTaskProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal CyclicBarrier startBarrier = new CyclicBarrier(2);", "fixed": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnExecution() throws Exception {\n\t\tString processDefinitionId = deployOneTaskTestProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal CyclicBarrier startBarrier = new CyclicBarrier(2);", "sourceBeforeFix": "deployOneTaskProcess()", "sourceAfterFix": "deployOneTaskTestProcess()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.error(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "fixed": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "sourceBeforeFix": "LOG.error(\"Failed to find \" + baseDirectory.getAbsolutePath())", "sourceAfterFix": "LOG.warn(\"Failed to find \" + baseDirectory.getAbsolutePath())"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\t\twithInputs(difference);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\t\twithInputs(difference);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "4aef130f60044f375980c6c1aea465da264e133e", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "  */\n public interface StreamCache {\n    public static final long DEFAULT_SPOOL_THRESHOLD = 128 * 1024;\n     /**\n      * Resets the StreamCache for a new stream consumption.", "fixed": "  */\n public interface StreamCache {\n    long DEFAULT_SPOOL_THRESHOLD = 128 * 1024;\n     /**\n      * Resets the StreamCache for a new stream consumption.", "sourceBeforeFix": "25", "sourceAfterFix": "0"}
{"fixCommitSHA1": "898206f81cbb4ead0fc0f2cf60125d6fd8255ccc", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Modifier", "problem": "    abstract protected void loadProperties(String propertyFileName);\n   void copyState(AbstractHikariConfig other)\n    {\n       for (Field field : AbstractHikariConfig.class.getDeclaredFields()) {\n          if (!Modifier.isFinal(field.getModifiers())) {", "fixed": "    abstract protected void loadProperties(String propertyFileName);\n   public void copyState(AbstractHikariConfig other)\n    {\n       for (Field field : AbstractHikariConfig.class.getDeclaredFields()) {\n          if (!Modifier.isFinal(field.getModifiers())) {", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "fixed": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "sourceBeforeFix": "mock.expectedMessageCount(3)", "sourceAfterFix": "mock.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "1cb815170a2fd69558f737d92f5665c9d64cebd1", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t\t\t\t\t+ \" with this method. Use ByteBuffer and one of GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT or GL_FLOAT for type. Blame LWJGL\");\r\n \t\t} else if (buffer instanceof FloatBuffer) {\r\n \t\t\tif (type == GL_FLOAT)\r\n\t\t\t\tGL20.glVertexAttribPointer(indx, size, normalized, stride, (FloatBuffer)buffer);\r\n \t\t\telse\r\n \t\t\t\tthrow new GdxRuntimeException(\"Can't use \" + buffer.getClass().getName() + \" with type \" + type\r\n \t\t\t\t\t+ \" with this method.\");\r", "fixed": " \t\t\t\t\t\t+ \" with this method. Use ByteBuffer and one of GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT or GL_FLOAT for type. Blame LWJGL\");\r\n \t\t} else if (buffer instanceof FloatBuffer) {\r\n \t\t\tif (type == GL_FLOAT)\r\n\t\t\t\tGL20.glVertexAttribPointer(indx, size, type, normalized, stride, (FloatBuffer)buffer);\r\n \t\t\telse\r\n \t\t\t\tthrow new GdxRuntimeException(\"Can't use \" + buffer.getClass().getName() + \" with type \" + type\r\n \t\t\t\t\t+ \" with this method.\");\r", "sourceBeforeFix": "GL20.glVertexAttribPointer(indx,size,normalized,stride,(FloatBuffer)buffer)", "sourceAfterFix": "GL20.glVertexAttribPointer(indx,size,type,normalized,stride,(FloatBuffer)buffer)"}
{"fixCommitSHA1": "811f7b2271556befe5b0e74c3881d34fe1531252", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "                         }\n                     }\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sb.length()));\n                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset)));\n                     if (!request.getHeaders().containsKey(HttpHeaders.Names.CONTENT_TYPE)) {\n                         nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, \"application/x-www-form-urlencoded\");", "fixed": "                         }\n                     }\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sb.length()));\n                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset)));\n                     if (!request.getHeaders().containsKey(HttpHeaders.Names.CONTENT_TYPE)) {\n                         nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, \"application/x-www-form-urlencoded\");", "sourceBeforeFix": "ChannelBuffers.copiedBuffer(request.getByteData())", "sourceAfterFix": "ChannelBuffers.wrappedBuffer(request.getByteData())"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "fixed": "     }\n     @Override\n    public synchronized void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "c4a5cd208aef54ae5b292fa41c4880017315e553", "projectName": "clojure.clojure", "bugType": "More Specific If", "problem": " \tpublic void emitAssign(C context, FnExpr fn, GeneratorAdapter gen,\n \t                       Expr val){\n \t\tgen.visitLineNumber(line, gen.mark());\n\t\tif(targetClass != null)\n \t\t\t{\n \t\t\ttarget.emit(C.EXPRESSION, fn, gen);\n \t\t\tgen.checkCast(Type.getType(targetClass));", "fixed": " \tpublic void emitAssign(C context, FnExpr fn, GeneratorAdapter gen,\n \t                       Expr val){\n \t\tgen.visitLineNumber(line, gen.mark());\n\t\tif(targetClass != null && field != null)\n \t\t\t{\n \t\t\ttarget.emit(C.EXPRESSION, fn, gen);\n \t\t\tgen.checkCast(Type.getType(targetClass));", "sourceBeforeFix": "targetClass != null", "sourceAfterFix": "targetClass != null && field != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "fixed": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FlinkEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedFlinkEndpointBuilder advanced() {\n             return (AdvancedFlinkEndpointBuilder) this;\n         }", "fixed": "     \n    public interface FlinkEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedFlinkEndpointBuilder advanced() {\n             return (AdvancedFlinkEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "     DomainControllerLogger HOST_CONTROLLER_LOGGER = Logger.getMessageLogger(DomainControllerLogger.class, \"org.jboss.as.host.controller\");\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15800, value = \"Ignoring 'include' child of 'socket-binding-group' %s\")\n     void warnIgnoringSocketBindingGroupInclude(Location location);\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15801, value = \"Ignoring 'include' child of 'profile' %s\")\n     void warnIgnoringProfileInclude(Location location);\n     /**", "fixed": "     DomainControllerLogger HOST_CONTROLLER_LOGGER = Logger.getMessageLogger(DomainControllerLogger.class, \"org.jboss.as.host.controller\");\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10800, value = \"Ignoring 'include' child of 'socket-binding-group' %s\")\n     void warnIgnoringSocketBindingGroupInclude(Location location);\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10801, value = \"Ignoring 'include' child of 'profile' %s\")\n     void warnIgnoringProfileInclude(Location location);\n     /**", "sourceBeforeFix": "id=15803", "sourceAfterFix": "id=10803"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 20:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 20:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),args.rest())"}
{"fixCommitSHA1": "4281cc1c5d3aa51b56db9d9e251c761c52a855e3", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * before growing the backing table. */\r\n \tpublic IntMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "fixed": " \t * before growing the backing table. */\r\n \tpublic IntMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tAssert.assertEquals(1L, statuses.length);\n \t\tAssert.assertTrue(\n \t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).toString())\n \t\t);\n \t}", "fixed": " \t\tAssert.assertEquals(1L, statuses.length);\n \t\tAssert.assertTrue(\n \t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).getPath())\n \t\t);\n \t}", "sourceBeforeFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").toString()", "sourceAfterFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").getPath()"}
{"fixCommitSHA1": "dcf3833b3be2415c729d6699692c83d0475e3d23", "projectName": "xetorthio.jedis", "bugType": "Wrong Function Name", "problem": "     return new JedisClusterCommand<Set<byte[]>>(connectionHandler, maxRedirections) {\n       @Override\n       public Set<byte[]> execute(Jedis connection) {\n        return connection.zrangeByLex(key, max, min);\n       }\n     }.runBinary(key);\n   }", "fixed": "     return new JedisClusterCommand<Set<byte[]>>(connectionHandler, maxRedirections) {\n       @Override\n       public Set<byte[]> execute(Jedis connection) {\n        return connection.zrevrangeByLex(key, max, min);\n       }\n     }.runBinary(key);\n   }", "sourceBeforeFix": "connection.zrangeByLex(key,max,min)", "sourceAfterFix": "connection.zrevrangeByLex(key,max,min)"}
{"fixCommitSHA1": "734c7a8318f516e4825fd72ab53699f96fabbe68", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void testConcurrentProducers() throws Exception {\n        Thread.sleep(1000);\n         doSendMessages(10, 5);\n     }", "fixed": "     @Test\n     public void testConcurrentProducers() throws Exception {\n        Thread.sleep(2000);\n         doSendMessages(10, 5);\n     }", "sourceBeforeFix": "Thread.sleep(1000)", "sourceAfterFix": "Thread.sleep(2000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = ModelApiResponse.class) })\n     ModelApiResponse uploadFile(@PathParam(\"petId\") @ApiParam(\"ID of pet to update\") Long petId,@FormParam(value = \"additionalMetadata\")  String additionalMetadata, @FormParam(value = \"file\") InputStream fileInputStream,\n   @FormParam(value = \"file\") Attachment fileDetail);\n }", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = ModelApiResponse.class) })\n     ModelApiResponse uploadFile(@PathParam(\"petId\") @ApiParam(\"ID of pet to update\") Long petId,@FormParam(value = \"additionalMetadata\")  String additionalMetadata, @FormParam(value = \"file\") InputStream fileInputStream,\n   @FormParam(value = \"file\") Attachment fileDetail) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "afa6f7a8df0dcac1bc942a4d98a63707b12764e6", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                 result = catalog.validateLanguagePredicate(null, \"simple\", detail.getSimple());\n             } else {\n                 getLog().debug(\"Validating simple expression: \" + detail.getSimple());\n                result = catalog.validateLanguagePredicate(null, \"simple\", detail.getSimple());\n             }\n             if (!result.isSuccess()) {\n                 simpleErrors++;", "fixed": "                 result = catalog.validateLanguagePredicate(null, \"simple\", detail.getSimple());\n             } else {\n                 getLog().debug(\"Validating simple expression: \" + detail.getSimple());\n                result = catalog.validateLanguageExpression(null, \"simple\", detail.getSimple());\n             }\n             if (!result.isSuccess()) {\n                 simpleErrors++;", "sourceBeforeFix": "catalog.validateLanguagePredicate(null,\"simple\",detail.getSimple())", "sourceAfterFix": "catalog.validateLanguageExpression(null,\"simple\",detail.getSimple())"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "098119281bf9b903d71a333a0d2bcf087282bbf8", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "    * TODO: pass this in rather than create it here if we wind up using\n    * this in more place.  Right now it's only used in testOnTreebank.\n    */\n  protected Function<List<? extends HasWord>, ArrayList<TaggedWord>> tagger;\n   public EvaluateTreebank(LexicalizedParser parser) {\n     this(parser.getOp(), parser.lex, parser);", "fixed": "    * TODO: pass this in rather than create it here if we wind up using\n    * this in more place.  Right now it's only used in testOnTreebank.\n    */\n  protected Function<List<? extends HasWord>, List<TaggedWord>> tagger;\n   public EvaluateTreebank(LexicalizedParser parser) {\n     this(parser.getOp(), parser.lex, parser);", "sourceBeforeFix": "ArrayList<TaggedWord>", "sourceAfterFix": "List<TaggedWord>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.loadAll(true);", "fixed": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.loadAll(true);", "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "fa5635c39e3000406103657977b98efa79bd4512", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "fixed": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "sourceBeforeFix": "conf.getSearchBaseURL()", "sourceAfterFix": "conf.getRestBaseURL()"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.set(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "fixed": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.get(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glGetShader(shader,pname,params)", "sourceAfterFix": "GL20.glGetShaderiv(shader,pname,params)"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0b4934d140f64feb7a8a995ab4e66d990dbbf931", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t@GetMapping(\"/commit\")\n \t\t\tpublic Mono<Void> commit(ServerWebExchange exchange) {\n\t\t\t\treturn exchange.getResponse().writeWith(Mono.empty()).then(\n \t\t\t\t\t\tMono.error(new IllegalStateException(\"already committed!\")));\n \t\t\t}", "fixed": " \t\t\t@GetMapping(\"/commit\")\n \t\t\tpublic Mono<Void> commit(ServerWebExchange exchange) {\n\t\t\t\treturn exchange.getResponse().setComplete().then(\n \t\t\t\t\t\tMono.error(new IllegalStateException(\"already committed!\")));\n \t\t\t}", "sourceBeforeFix": "exchange.getResponse().writeWith(Mono.empty())", "sourceAfterFix": "exchange.getResponse().setComplete()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "a536b4a6a33b85f40af44fca53b33d8c0d8656a1", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": "if (itemMap.getSoapValueParser() == null) {\n             NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());\n            if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n                 value = nlDataOutNodes.item(0).getTextContent();\n             } else {", "fixed": "if (itemMap.getSoapValueParser() == null) {\n             NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());\n            if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                 value = nlDataOutNodes.item(0).getTextContent();\n             } else {", "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0", "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      *\n      * @return Type of exception\n      */\n    public Class<? extends Exception> exceptionClass() {\n         return this.exceptionClass;\n     }", "fixed": "      *\n      * @return Type of exception\n      */\n    public Class<? extends T> exceptionClass() {\n         return this.exceptionClass;\n     }", "sourceBeforeFix": "? extends Exception", "sourceAfterFix": "? extends T"}
{"fixCommitSHA1": "fd2bf7d972c703a603f7ec043b96649347f7e184", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "         httpClientBinder(binder).bindHttpClient(\"scheduler\", ForScheduler.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(2, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                     config.setMaxConnectionsPerServer(250);\n                 });", "fixed": "         httpClientBinder(binder).bindHttpClient(\"scheduler\", ForScheduler.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(30, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                     config.setMaxConnectionsPerServer(250);\n                 });", "sourceBeforeFix": "new Duration(2,SECONDS)", "sourceAfterFix": "new Duration(30,SECONDS)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0757d24d91bfe9ea2256c19aa798a5fa10bb6692", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": " \t\tMap<String, Object> map = (Map<String, Object>) nestedProperties\n \t\t\t\t.get(\"properties\");\n \t\tassertNotNull(map);\n\t\tassertEquals(2, map.size());\n \t\tassertEquals(null, (map.get(\"map\")));\n \t}", "fixed": " \t\tMap<String, Object> map = (Map<String, Object>) nestedProperties\n \t\t\t\t.get(\"properties\");\n \t\tassertNotNull(map);\n\t\tassertEquals(3, map.size());\n \t\tassertEquals(null, (map.get(\"map\")));\n \t}", "sourceBeforeFix": "assertEquals(2,map.size())", "sourceAfterFix": "assertEquals(1,map.size())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username);\n     @GET\n     @Path(\"/{username}\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username) throws Exception;\n     @GET\n     @Path(\"/{username}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "fixed": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "sourceBeforeFix": "GL.glPolygonOffsetEXT(factor,units)", "sourceAfterFix": "GL.glPolygonOffset(factor,units)"}
{"fixCommitSHA1": "3f3bab10b9ca68eb31a7ef5a31e49145b51006fd", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tserializedValue = new SerializedValue<>(null);\n \t\t\t\t} else {\n \t\t\t\t\tbyte[] serializedData = new byte[length];\n\t\t\t\t\tdis.read(serializedData, 0, length);\n \t\t\t\t\tserializedValue = SerializedValue.fromBytes(serializedData);\n \t\t\t\t}", "fixed": " \t\t\t\t\tserializedValue = new SerializedValue<>(null);\n \t\t\t\t} else {\n \t\t\t\t\tbyte[] serializedData = new byte[length];\n\t\t\t\t\tdis.readFully(serializedData, 0, length);\n \t\t\t\t\tserializedValue = SerializedValue.fromBytes(serializedData);\n \t\t\t\t}", "sourceBeforeFix": "dis.read(serializedData,0,length)", "sourceAfterFix": "dis.readFully(serializedData,0,length)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "08119404453c2caafcff29de60ea1e523bc60616", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     double p = scanner.nextDouble();\n     Assert.assertEquals(\"Precision outside target range\", 0.8364, p, 0.001);\n     double r = scanner.nextDouble();\n    Assert.assertEquals(\"Recall outside target range\", 0.6924, r, 0.001);\n     double f1 = scanner.nextDouble();\n     Assert.assertEquals(\"Precision outside target range\", 0.7576, f1, 0.001);\n   }", "fixed": "     double p = scanner.nextDouble();\n     Assert.assertEquals(\"Precision outside target range\", 0.8364, p, 0.001);\n     double r = scanner.nextDouble();\n    Assert.assertEquals(\"Recall outside target range\", 0.691, r, 0.001);\n     double f1 = scanner.nextDouble();\n     Assert.assertEquals(\"Precision outside target range\", 0.7576, f1, 0.001);\n   }", "sourceBeforeFix": "Assert.assertEquals(\"Recall outside target range\",0.6924,r,0.001)", "sourceAfterFix": "Assert.assertEquals(\"Recall outside target range\",0.691,r,0.001)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "69b950bf50cc482a7bac2631a0d4d5afae964a94", "projectName": "swagger-api.swagger-core", "bugType": "Same Function More Args", "problem": "         BASE_CLASSES = Collections.unmodifiableMap(baseClasses);\n         final Map<String, PrimitiveType> externalClasses = new HashMap<String, PrimitiveType>();\n        addKeys(externalClasses, DATE, \"org.joda.time.LocalDate\");\n         addKeys(externalClasses, DATE_TIME, \"org.joda.time.DateTime\", \"org.joda.time.ReadableDateTime\",\n                \"javax.xml.datatype.XMLGregorianCalendar\");\n         EXTERNAL_CLASSES = Collections.unmodifiableMap(externalClasses);\n         final Map<String, PrimitiveType> names = new TreeMap<String, PrimitiveType>(String.CASE_INSENSITIVE_ORDER);", "fixed": "         BASE_CLASSES = Collections.unmodifiableMap(baseClasses);\n         final Map<String, PrimitiveType> externalClasses = new HashMap<String, PrimitiveType>();\n        addKeys(externalClasses, DATE, \"org.joda.time.LocalDate\", \"java.time.LocalDate\");\n         addKeys(externalClasses, DATE_TIME, \"org.joda.time.DateTime\", \"org.joda.time.ReadableDateTime\",\n                \"javax.xml.datatype.XMLGregorianCalendar\", \"java.time.LocalDateTime\");\n         EXTERNAL_CLASSES = Collections.unmodifiableMap(externalClasses);\n         final Map<String, PrimitiveType> names = new TreeMap<String, PrimitiveType>(String.CASE_INSENSITIVE_ORDER);", "sourceBeforeFix": "addKeys(externalClasses,DATE,\"org.joda.time.LocalDate\")", "sourceAfterFix": "addKeys(externalClasses,DATE,\"org.joda.time.LocalDate\",\"java.time.LocalDate\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL11.glGetFloat(pname,params)", "sourceAfterFix": "GL11.glGetFloatv(pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "       try {\n         statsObj = getMS().getTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"get_column_statistics_by_table: \", statsObj != null);\n       }\n       return statsObj;\n     }", "fixed": "       try {\n         statsObj = getMS().getTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"get_column_statistics_by_table: \", statsObj != null, null);\n       }\n       return statsObj;\n     }", "sourceBeforeFix": "endFunction(\"write_column_statistics: \",ret != false)", "sourceAfterFix": "endFunction(\"write_column_statistics: \",ret != false,null)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "     return list;\n   }\n  protected void setProperties(Properties props) {\n     super.setProperties(props);\n   }", "fixed": "     return list;\n   }\n  @InterfaceAudience.Private\n  public void setProperties(Properties props) {\n     super.setProperties(props);\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0656040933973f55afa8b6e8f53140b6f76b7446", "projectName": "apache.hive", "bugType": "Change Unary Operator\t", "problem": "             break;\n           }\n           switch (schemeField.id) {\ncase -1:\n               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                 struct.rqst = new WriteNotificationLogRequest();\n                 struct.rqst.read(iprot);", "fixed": "             break;\n           }\n           switch (schemeField.id) {\ncase 1:\n               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                 struct.rqst = new WriteNotificationLogRequest();\n                 struct.rqst.read(iprot);", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "df883a9823b4c1b84a2e5543fcbea121cdaeddb5", "projectName": "druid-io.druid", "bugType": "Change Caller in Function Call", "problem": "           {\n             int retVal = -Ints.compare(zkWorker.getCurrCapacityUsed(), zkWorker2.getCurrCapacityUsed());\n             if (retVal == 0) {\n              retVal = zkWorker.getWorker().getHost().compareTo(zkWorker.getWorker().getHost());\n             }\n             return retVal;", "fixed": "           {\n             int retVal = -Ints.compare(zkWorker.getCurrCapacityUsed(), zkWorker2.getCurrCapacityUsed());\n             if (retVal == 0) {\n              retVal = zkWorker.getWorker().getHost().compareTo(zkWorker2.getWorker().getHost());\n             }\n             return retVal;", "sourceBeforeFix": "zkWorker.getWorker()", "sourceAfterFix": "zkWorker2.getWorker()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "5ef9fe421732a256519e0dbac06f73f728f12564", "projectName": "Alluxio.alluxio", "bugType": "Missing Throws Exception", "problem": "   }\n  public TachyonFile getPartition(int pId, boolean cachedMetadata) {\n     return TFS.getFile(RAW_TABLE.getPath() + Constants.PATH_SEPARATOR + MasterInfo.COL +\n         COLUMN_INDEX + Constants.PATH_SEPARATOR + pId, cachedMetadata);\n   }", "fixed": "   }\n  public TachyonFile getPartition(int pId, boolean cachedMetadata) throws IOException {\n     return TFS.getFile(RAW_TABLE.getPath() + Constants.PATH_SEPARATOR + MasterInfo.COL +\n         COLUMN_INDEX + Constants.PATH_SEPARATOR + pId, cachedMetadata);\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(-1, rc);\n     assertTrue(outContent.toString().contains(\"key1 has not been created.\"));\n   }", "fixed": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(1, rc);\n     assertTrue(outContent.toString().contains(\"key1 has not been created.\"));\n   }", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "fixed": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId);\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "df0e14359abd61ff3a5713e5e12e116b3fb1c3ed", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " \tprivate static Log log = LogFactory.getLog(ModuleFactory.class);\n\tprotected static Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n\tprotected static Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n\tprotected static Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n\tprotected static Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n \tprivate static Map<String, Set<ModuleClassLoader>> providedPackages = new ConcurrentHashMap<String, Set<ModuleClassLoader>>();", "fixed": " \tprivate static Log log = LogFactory.getLog(ModuleFactory.class);\n\tprotected static volatile Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n\tprotected static volatile Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n\tprotected static volatile Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n\tprotected static volatile Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n \tprivate static Map<String, Set<ModuleClassLoader>> providedPackages = new ConcurrentHashMap<String, Set<ModuleClassLoader>>();", "sourceBeforeFix": "12", "sourceAfterFix": "76"}
{"fixCommitSHA1": "81a280e48f171b6862257853ff9ac97b7da9e7af", "projectName": "gephi.gephi", "bugType": "More Specific If", "problem": "     private void attributesEdgeColumns(AttributeModel attributeModel) {\n         List<AttributeColumn> cols = new ArrayList<AttributeColumn>();\n        if (attributeModel != null) {\n             for (AttributeColumn column : attributeModel.getEdgeTable().getColumns()) {\n                 if (!isEdgeDefaultColumn(column.getId())) {\n                     cols.add(column);", "fixed": "     private void attributesEdgeColumns(AttributeModel attributeModel) {\n         List<AttributeColumn> cols = new ArrayList<AttributeColumn>();\n        if (exportAttributes && attributeModel != null) {\n             for (AttributeColumn column : attributeModel.getEdgeTable().getColumns()) {\n                 if (!isEdgeDefaultColumn(column.getId())) {\n                     cols.add(column);", "sourceBeforeFix": "attributeModel != null", "sourceAfterFix": "exportAttributes && attributeModel != null"}
{"fixCommitSHA1": "f3e85df8a467608047ac463ed30d6843d9effc27", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "      */\n     @Deprecated\n     public static String getCharsetName(Exchange exchange, boolean useDefault) {\n        return IOHelper.getCharsetName(exchange);\n     }\n     /**", "fixed": "      */\n     @Deprecated\n     public static String getCharsetName(Exchange exchange, boolean useDefault) {\n        return IOHelper.getCharsetName(exchange, useDefault);\n     }\n     /**", "sourceBeforeFix": "IOHelper.getCharsetName(exchange)", "sourceAfterFix": "IOHelper.getCharsetName(exchange,useDefault)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithArrayInput(@Valid List<User> body);\n     @POST\n     @Path(\"/createWithList\")", "fixed": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithArrayInput(@Valid List<User> body) throws Exception;\n     @POST\n     @Path(\"/createWithList\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   private void externExports() {\n    logger.info(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n     ExternExportsPass pass = new ExternExportsPass(this);", "fixed": "   }\n   private void externExports() {\n    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n     ExternExportsPass pass = new ExternExportsPass(this);", "sourceBeforeFix": "logger.info(\"Remove try/catch/finally\")", "sourceAfterFix": "logger.fine(\"Remove try/catch/finally\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dd6dbd5cf29795ac5bd8f76b76c562d4737917b8", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     mWorkerId = workerId;\n     mFileId = fileId;\n     mLength = length;\n    mCheckpointPath = checkpointPath.getPath();\n     mOpTimeMs = opTimeMs;\n   }", "fixed": "     mWorkerId = workerId;\n     mFileId = fileId;\n     mLength = length;\n    mCheckpointPath = checkpointPath.toString();\n     mOpTimeMs = opTimeMs;\n   }", "sourceBeforeFix": "checkpointPath.getPath()", "sourceAfterFix": "checkpointPath.toString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "823bfb98fed1336c299c463e74bb8c9b63a956c7", "projectName": "naver.pinpoint", "bugType": "Change Numeric Literal", "problem": "     public static StreamPongPacket readBuffer(short packetType, ChannelBuffer buffer) {\r\n         assert packetType == PACKET_TYPE;\r\n        if (buffer.readableBytes() < 4) {\r\n             buffer.resetReaderIndex();\r\n             return null;\r\n         }\r", "fixed": "     public static StreamPongPacket readBuffer(short packetType, ChannelBuffer buffer) {\r\n         assert packetType == PACKET_TYPE;\r\n        if (buffer.readableBytes() < 8) {\r\n             buffer.resetReaderIndex();\r\n             return null;\r\n         }\r", "sourceBeforeFix": "buffer.readableBytes() < 4", "sourceAfterFix": "buffer.readableBytes() < 8"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales() throws APIException;\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "fixed": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales();\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9031a4c20455ba16a63233f10783a55915afcd9b", "projectName": "alibaba.dubbo", "bugType": "Change Unary Operator\t", "problem": "                                             }\r\njedis.psubscribe(new NotifySub(jedisPool), service);\n                                         } else {\r\n                                            if (!first) {\r\n                                                 first = false;\r\n                                                 doNotify(jedis, service);\r\n                                                 resetSkip();\r", "fixed": "                                             }\r\njedis.psubscribe(new NotifySub(jedisPool), service);\n                                         } else {\r\n                                            if (first) {\r\n                                                 first = false;\r\n                                                 doNotify(jedis, service);\r\n                                                 resetSkip();\r", "sourceBeforeFix": "!first", "sourceAfterFix": "first"}
{"fixCommitSHA1": "e981384cc21ca3c1958acd4b494a6ddd147c0a60", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             config.setProxyList(modelconf.get(CommonAttributes.PROXY_LIST).asString());\n         }\n         if (modelconf.hasDefined(CommonAttributes.PROXY_URL))\n            config.setProxyList(modelconf.get(CommonAttributes.PROXY_URL).asString());\n         if (modelconf.has(CommonAttributes.ADVERTISE_SECURITY_KEY))\n            config.setProxyList(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString());\n         if (modelconf.hasDefined(CommonAttributes.EXCLUDED_CONTEXTS)) {", "fixed": "             config.setProxyList(modelconf.get(CommonAttributes.PROXY_LIST).asString());\n         }\n         if (modelconf.hasDefined(CommonAttributes.PROXY_URL))\n            config.setProxyURL(modelconf.get(CommonAttributes.PROXY_URL).asString());\n         if (modelconf.has(CommonAttributes.ADVERTISE_SECURITY_KEY))\n            config.setAdvertiseSecurityKey(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString());\n         if (modelconf.hasDefined(CommonAttributes.EXCLUDED_CONTEXTS)) {", "sourceBeforeFix": "config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString())", "sourceAfterFix": "config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString())"}
{"fixCommitSHA1": "79bb6f686409644ca32052cb0aa33d4749be6619", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         });\n     }\n    @Test\n     public void changeClusterState_shouldFail_withoutBackup_whenInitiatorDies_afterPrepare() throws Exception {\n         final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(3);\n         final HazelcastInstance[] instances = factory.newInstances();", "fixed": "         });\n     }\n    @Test(timeout = 60000)\n     public void changeClusterState_shouldFail_withoutBackup_whenInitiatorDies_afterPrepare() throws Exception {\n         final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(3);\n         final HazelcastInstance[] instances = factory.newInstances();", "sourceBeforeFix": "new TransactionOptions().setDurability(0).setTimeout(10,TimeUnit.SECONDS)", "sourceAfterFix": "new TransactionOptions().setDurability(0).setTimeout(30,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "projectName": "eclipse.vert.x", "bugType": "Same Function More Args", "problem": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException();\n   }\n }", "fixed": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n }", "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: failed\")"}
{"fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     public static JavadocTagInfo fromText(final String text)\n     {\n         if (text == null) {\n            throw new NullPointerException(\"the text is null\");\n         }\n         final JavadocTagInfo tag = TEXT_TO_TAG.get(text);", "fixed": "     public static JavadocTagInfo fromText(final String text)\n     {\n         if (text == null) {\n            throw new IllegalArgumentException(\"the text is null\");\n         }\n         final JavadocTagInfo tag = TEXT_TO_TAG.get(text);", "sourceBeforeFix": "new NullPointerException(\"the text is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the text is null\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "127108d1005124b8d33651569780b08fa2b5d5b8", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "      * use OS environment variables if present, and override any existing\n      * properties.\n      */\n    private Integer environmentVariableMode = 1;\n     /**\n      * Whether the component should resolve property placeholders on itself when\n      * starting. Only properties which are of String type can use property", "fixed": "      * use OS environment variables if present, and override any existing\n      * properties.\n      */\n    private Integer environmentVariableMode = 2;\n     /**\n      * Whether the component should resolve property placeholders on itself when\n      * starting. Only properties which are of String type can use property", "sourceBeforeFix": "environmentVariableMode=1", "sourceAfterFix": "environmentVariableMode=2"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FacebookEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFacebookEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface FacebookEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFacebookEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedIrcEndpointBuilder\n             extends\n                 AdvancedIrcEndpointConsumerBuilder, AdvancedIrcEndpointProducerBuilder {\n         default IrcEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedIrcEndpointBuilder\n             extends\n                 AdvancedIrcEndpointConsumerBuilder, AdvancedIrcEndpointProducerBuilder {\n         default IrcEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "85d8d2fce8253c065ccaa9b02d8a30a58bbea67b", "projectName": "swagger-api.swagger-core", "bugType": "Wrong Function Name", "problem": "                 if (setter != null) {\n                     if (paramType == null) {\n                        paramType = setter.getRawParameterTypes() != null ? setter.getRawParameterTypes()[0] : null;\n                     }\n                     for (final Annotation fieldAnnotation : setter.annotations()) {", "fixed": "                 if (setter != null) {\n                     if (paramType == null) {\n                    \tparamType = setter.getParameterType(0); \n                     }\n                     for (final Annotation fieldAnnotation : setter.annotations()) {", "sourceBeforeFix": "field.getRawType()", "sourceAfterFix": "field.getType()"}
{"fixCommitSHA1": "25c95d8dd9ec2d4e712aaeccedec306be41a3c8a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       try {\n         regionLocation = reverseDNS(regionAddress);\n       } catch (NamingException e) {\n        LOG.error(\"Cannot resolve the host name for \" + regionAddress + \" because of \" + e);\n         regionLocation = location.getHostname();\n       }", "fixed": "       try {\n         regionLocation = reverseDNS(regionAddress);\n       } catch (NamingException e) {\n        LOG.warn(\"Cannot resolve the host name for \" + regionAddress + \" because of \" + e);\n         regionLocation = location.getHostname();\n       }", "sourceBeforeFix": "LOG.error(\"Cannot resolve the host name for \" + regionAddress + \" because of \"+ e)", "sourceAfterFix": "LOG.warn(\"Cannot resolve the host name for \" + regionAddress + \" because of \"+ e)"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedApnsEndpointBuilder\n             extends\n                 AdvancedApnsEndpointConsumerBuilder, AdvancedApnsEndpointProducerBuilder {\n         default ApnsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedApnsEndpointBuilder\n             extends\n                 AdvancedApnsEndpointConsumerBuilder, AdvancedApnsEndpointProducerBuilder {\n         default ApnsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c5f6760c6804b5f0dfbec1ddd2953b3c58db58ce", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         void fail(Throwable cause) {\n             ReferenceCountUtil.release(msg);\n             if (promise != null) {\n                promise.setFailure(cause);\n             }\n         }", "fixed": "         void fail(Throwable cause) {\n             ReferenceCountUtil.release(msg);\n             if (promise != null) {\n                promise.tryFailure(cause);\n             }\n         }", "sourceBeforeFix": "promise.setFailure(cause)", "sourceAfterFix": "promise.tryFailure(cause)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8097cb4e299f056973c04abeaad879eb55f44775", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "615135aaa2ec18ea6c0b4785749079df4db5fd7a", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Wrong Function Name", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SalesforceEndpointBuilder\n             extends\n                 SalesforceEndpointConsumerBuilder, SalesforceEndpointProducerBuilder {\n         default AdvancedSalesforceEndpointBuilder advanced() {", "fixed": "     \n    public interface SalesforceEndpointBuilder\n             extends\n                 SalesforceEndpointConsumerBuilder, SalesforceEndpointProducerBuilder {\n         default AdvancedSalesforceEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6165b3db5587170bed1a40bb1e5f2f3613f24e3f", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t}\n \t@VisibleForTesting\n\tpublic boolean isWaitingForFloatingBuffers() {\n \t\treturn isWaitingForFloatingBuffers;\n \t}", "fixed": " \t}\n \t@VisibleForTesting\n\tboolean isWaitingForFloatingBuffers() {\n \t\treturn isWaitingForFloatingBuffers;\n \t}", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "e9b52691580bdf77a68f07ee178c5df6859b644f", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "             ArrayList<Route> list = new ArrayList<Route>();\n             RouteDefinition route = new RouteDefinition();\n             route.setCamelContext(first.getBuilder().getProcessBuilder().getContext());\n            RouteContext routeContext = new DefaultRouteContext(route, null, list);\n             overdueAction = overdueProcessors.createOutputsProcessor(routeContext);\n         }", "fixed": "             ArrayList<Route> list = new ArrayList<Route>();\n             RouteDefinition route = new RouteDefinition();\n             route.setCamelContext(first.getBuilder().getProcessBuilder().getContext());\n            RouteContext routeContext = new DefaultRouteContext(first.getBuilder().getProcessBuilder().getContext(), route, null, list);\n             overdueAction = overdueProcessors.createOutputsProcessor(routeContext);\n         }", "sourceBeforeFix": "new DefaultRouteContext(route,null,list)", "sourceAfterFix": "new DefaultRouteContext(first.getBuilder().getProcessBuilder().getContext(),route,null,list)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "73bf3c02af3ea75b6d1a0afc780841091b1691ee", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "         TwitterAPIMonitor monitor = TwitterAPIMonitor.getInstance();\n         assertEquals(0, monitor.getStatistics().getCallCount());\n        twitter.getHomeTimeline();\n         assertEquals(1, monitor.getStatistics().getCallCount());\n     }\n }", "fixed": "         TwitterAPIMonitor monitor = TwitterAPIMonitor.getInstance();\n         assertEquals(0, monitor.getStatistics().getCallCount());\n        twitter.getDailyTrends();\n         assertEquals(1, monitor.getStatistics().getCallCount());\n     }\n }", "sourceBeforeFix": "twitter.getHomeTimeline()", "sourceAfterFix": "twitter.getDailyTrends()"}
{"fixCommitSHA1": "7f16b343eb4bdffd477aa5a8fb3c80b9b54e5602", "projectName": "facebook.presto", "bugType": "Same Function More Args", "problem": "             return format(\"RowBlock{SingleRowBlockWriter=%d, fieldBlockBuilderReturned=false, positionCount=%d}\", numFields, getPositionCount());\n         }\n         else {\n            return format(\"RowBlock{SingleRowBlockWriter=%d, fieldBlockBuilderReturned=true}\");\n         }\n     }", "fixed": "             return format(\"RowBlock{SingleRowBlockWriter=%d, fieldBlockBuilderReturned=false, positionCount=%d}\", numFields, getPositionCount());\n         }\n         else {\n            return format(\"RowBlock{SingleRowBlockWriter=%d, fieldBlockBuilderReturned=true}\", numFields);\n         }\n     }", "sourceBeforeFix": "format(\"RowBlock{SingleRowBlockWriter=%d, fieldBlockBuilderReturned=true}\")", "sourceAfterFix": "format(\"RowBlock{SingleRowBlockWriter=%d, fieldBlockBuilderReturned=true}\",numFields)"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResponseWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "789f4be50f7ca95f2fb824bdffd170c1731c681a", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                 return false;\n             }\n            EndpointOption that = (EndpointOption) o;\n             if (!name.equals(that.name)) {\n                 return false;", "fixed": "                 return false;\n             }\n            ComponentOption that = (ComponentOption) o;\n             if (!name.equals(that.name)) {\n                 return false;", "sourceBeforeFix": "EndpointOption that=(EndpointOption)o; ", "sourceAfterFix": "ComponentOption that=(ComponentOption)o; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a13c4373a5e57d322b143516b493e84f14909fec", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(12, tokens.size());\n     List<CoreLabel> sentenceTwoTokens = sentences.get(1).get(CoreAnnotations.TokensAnnotation.class);\n     String sentenceTwo = SentenceUtils.listToString(sentenceTwoTokens);", "fixed": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(9, tokens.size());\n     List<CoreLabel> sentenceTwoTokens = sentences.get(1).get(CoreAnnotations.TokensAnnotation.class);\n     String sentenceTwo = SentenceUtils.listToString(sentenceTwoTokens);", "sourceBeforeFix": "assertEquals(12,tokens.size())", "sourceAfterFix": "assertEquals(9,tokens.size())"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.debug(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "fixed": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "sourceBeforeFix": "logger.debug(\"rapidRefreshFutureEnd stopping\")", "sourceAfterFix": "logger.trace(\"rapidRefreshFutureEnd stopping\")"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     addNameMap(out, originalNameMap);\n   }\n  private void addNameMap(Appendable out, Map<String, Integer> map)\n       throws IOException {\n     int i = 0;\n     for (Entry<String, Integer> entry : map.entrySet()) {", "fixed": "     addNameMap(out, originalNameMap);\n   }\n  private static void addNameMap(Appendable out, Map<String, Integer> map)\n       throws IOException {\n     int i = 0;\n     for (Entry<String, Integer> entry : map.entrySet()) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "291e15e330c9b71a0d0238e9d56d4b2a473356af", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             @Override\n             public void configure() throws Exception {\n                 from(\"direct:start\")\n                    .transform(to(\"direct:foo\")).to(\"mock:result\");\n                 from(\"direct:foo\").process(new Processor() {\n                     public void process(Exchange exchange) throws Exception {", "fixed": "             @Override\n             public void configure() throws Exception {\n                 from(\"direct:start\")\n                    .transform(sendTo(\"direct:foo\")).to(\"mock:result\");\n                 from(\"direct:foo\").process(new Processor() {\n                     public void process(Exchange exchange) throws Exception {", "sourceBeforeFix": "to(\"direct:foo\")", "sourceAfterFix": "sendTo(\"direct:foo\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "13dc20d21b6b2e186cd7825fbf854e00810ba873", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         DefaultCamelContext defaultCamelContext = (DefaultCamelContext)getCamelContext();\n         defaultCamelContext.stopRoute(id);\n        defaultCamelContext.removeRouteDefinition(id);\n         defaultCamelContext.addRoutes(builder);", "fixed": "         DefaultCamelContext defaultCamelContext = (DefaultCamelContext)getCamelContext();\n         defaultCamelContext.stopRoute(id);\n        defaultCamelContext.removeRoute(id);\n         defaultCamelContext.addRoutes(builder);", "sourceBeforeFix": "defaultCamelContext.removeRouteDefinition(id)", "sourceAfterFix": "defaultCamelContext.removeRoute(id)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "c38ee7371ffee08671b886ff9eb74a4cb35b92e7", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         MaterializedResult expectedTables = MaterializedResult.resultBuilder(queryRunner.getDefaultSession(), VARCHAR)\n                 .row(\"orders\")\n                 .build();\n        assertEquals(actualTables, expectedTables);\n     }\n     @Test", "fixed": "         MaterializedResult expectedTables = MaterializedResult.resultBuilder(queryRunner.getDefaultSession(), VARCHAR)\n                 .row(\"orders\")\n                 .build();\n        assertContains(actualTables, expectedTables);\n     }\n     @Test", "sourceBeforeFix": "assertEquals(actualTables,expectedTables)", "sourceAfterFix": "assertContains(actualTables,expectedTables)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface StompEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedStompEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface StompEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedStompEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7c7309b5fb6276e4098921915a8e0c39a5cd3450", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n     Assert.assertTrue(BlockStoreContext.INSTANCE.hasLocalWorker());", "fixed": "     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n    RetryHandlingBlockMasterClient masterClientMock =\n        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n     Assert.assertTrue(BlockStoreContext.INSTANCE.hasLocalWorker());", "sourceBeforeFix": "BlockMasterClient.class", "sourceAfterFix": "RetryHandlingBlockMasterClient.class"}
{"fixCommitSHA1": "64bc69ef4c547771f44f6b6b103cda7be2f0922b", "projectName": "dropwizard.metrics", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic SortedMap<String, Timer> getTimers(MetricFilter filter) {\n\t\treturn adaptMetrics(Timer.class, reg.getCounters(transformFilter(filter)));\n \t}\n \tprivate io.dropwizard.metrics.MetricFilter transformFilter(final MetricFilter filter) {", "fixed": " \t}\n \tpublic SortedMap<String, Timer> getTimers(MetricFilter filter) {\n\t\treturn adaptMetrics(Timer.class, reg.getTimers(transformFilter(filter)));\n \t}\n \tprivate io.dropwizard.metrics.MetricFilter transformFilter(final MetricFilter filter) {", "sourceBeforeFix": "reg.getCounters(transformFilter(filter))", "sourceAfterFix": "reg.getMeters(transformFilter(filter))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6ed3c275fc3f67ecc814a1cb838915661f782f22", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void testNoAuthSingleSignOn(@ArquillianResource URL baseURLNoAuth) throws Exception {\n         log.info(\"+++ testNoAuthSingleSignOn\");\n        SSOBaseCase.executeNoAuthSingleSignOnTest(baseURLNoAuth, baseURLNoAuth, log);\n     }\n }", "fixed": "     @Test\n     public void testNoAuthSingleSignOn(@ArquillianResource URL baseURLNoAuth) throws Exception {\n         log.info(\"+++ testNoAuthSingleSignOn\");\n        SSOTestBase.executeNoAuthSingleSignOnTest(baseURLNoAuth, baseURLNoAuth, log);\n     }\n }", "sourceBeforeFix": "SSOBaseCase.executeNoAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)", "sourceAfterFix": "SSOTestBase.executeNoAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "979ce2a33924be23a6343640ed0c038af5a33740", "projectName": "libgdx.libgdx", "bugType": "Change Caller in Function Call", "problem": " \tpublic boolean act (float delta) {\n \t\tActor actor = (targetActor != null ? targetActor : this.actor);\n \t\tif (capture)\n\t\t\ttargetActor.addCaptureListener(listener);\n \t\telse\n\t\t\ttargetActor.addListener(listener);\n \t\treturn true;\n \t}", "fixed": " \tpublic boolean act (float delta) {\n \t\tActor actor = (targetActor != null ? targetActor : this.actor);\n \t\tif (capture)\n\t\t\tactor.addCaptureListener(listener);\n \t\telse\n\t\t\tactor.addListener(listener);\n \t\treturn true;\n \t}", "sourceBeforeFix": "targetActor.addListener(listener)", "sourceAfterFix": "actor.addListener(listener)"}
{"fixCommitSHA1": "04a010c8499fbc96b1e5a99bdbebaf0b38d24586", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": "* @return {@link\n \tpublic char[] ensureCapacity (int additionalCapacity) {\r\n \t\tint sizeNeeded = size + additionalCapacity;\r\n\t\tif (sizeNeeded >= items.length) resize(Math.max(8, sizeNeeded));\r\n \t\treturn items;\r\n \t}\r", "fixed": "* @return {@link\n \tpublic char[] ensureCapacity (int additionalCapacity) {\r\n \t\tint sizeNeeded = size + additionalCapacity;\r\n\t\tif (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));\r\n \t\treturn items;\r\n \t}\r", "sourceBeforeFix": "sizeNeeded >= items.length", "sourceAfterFix": "sizeNeeded > items.length"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSpringLdapEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SpringLdapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSpringLdapEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SpringLdapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "fixed": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic abstract boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedThriftEndpointBuilder\n             extends\n                 AdvancedThriftEndpointConsumerBuilder, AdvancedThriftEndpointProducerBuilder {\n         default ThriftEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedThriftEndpointBuilder\n             extends\n                 AdvancedThriftEndpointConsumerBuilder, AdvancedThriftEndpointProducerBuilder {\n         default ThriftEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d5f8dbfc487cc66a50f7bfbbf03b4a0a8f9cdec3", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                         throw e;\n                     }\n                 }\n                if (attempt >= maxRetryAttempts || Duration.nanosSince(startTime).compareTo(maxRetryTime) >= 0) {\n                     throw e;\n                 }\n                 log.debug(\"Failed on executing %s with attempt %d, will retry. Exception: %s\", callableName, attempt, e.getMessage());", "fixed": "                         throw e;\n                     }\n                 }\n                if (attempt >= maxAttempts || Duration.nanosSince(startTime).compareTo(maxRetryTime) >= 0) {\n                     throw e;\n                 }\n                 log.debug(\"Failed on executing %s with attempt %d, will retry. Exception: %s\", callableName, attempt, e.getMessage());", "sourceBeforeFix": "new RetryDriver(maxRetryAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptions)", "sourceAfterFix": "new RetryDriver(maxAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptions)"}
{"fixCommitSHA1": "26d97d9b4d5428b695de89ad729b8ef20e93fab1", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             if (ErrorHandlerBuilderRef.isErrorHandlerBuilderConfigured(ref)) {\n                 LOG.debug(\"Looking up ErrorHandlerBuilder with ref: {}\", ref);\n                builder = ErrorHandlerBuilderRef.lookupErrorHandlerBuilder(routeContext, ref);\n             }\n         }", "fixed": "             if (ErrorHandlerBuilderRef.isErrorHandlerBuilderConfigured(ref)) {\n                 LOG.debug(\"Looking up ErrorHandlerBuilder with ref: {}\", ref);\n                builder = (ErrorHandlerBuilder)ErrorHandlerBuilderRef.lookupErrorHandlerBuilder(routeContext, ref);\n             }\n         }", "sourceBeforeFix": "ErrorHandlerFactory builder=routeContext.getRoute().getErrorHandlerBuilder(); ", "sourceAfterFix": "ErrorHandlerBuilder builder=(ErrorHandlerBuilder)routeContext.getRoute().getErrorHandlerBuilder(); "}
{"fixCommitSHA1": "4e184a37363ce309c7419d2fa64d98ebf3df375f", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             selectedKeysField.set(selector, set);\n             publicSelectedKeysField.set(selector, set);\n            logger.info(\"Optimized Selector: \" + selector.getClass().getName());\n             return set;\n         } catch (Throwable t) {", "fixed": "             selectedKeysField.set(selector, set);\n             publicSelectedKeysField.set(selector, set);\n            logger.finest(\"Optimized Selector: \" + selector.getClass().getName());\n             return set;\n         } catch (Throwable t) {", "sourceBeforeFix": "logger.info(\"Optimized Selector: \" + selector.getClass().getName())", "sourceAfterFix": "logger.finest(\"Optimized Selector: \" + selector.getClass().getName())"}
{"fixCommitSHA1": "38782cdd828011b64db92c95bb231e80a303c28b", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "     }\n     public void setCountDirect(String name, int count) {\n        if (count <= 0) {\n             latches.remove(name);\n         } else {\n             CountDownLatchInfo latch = latches.get(name);", "fixed": "     }\n     public void setCountDirect(String name, int count) {\n        if (count < 0) {\n             latches.remove(name);\n         } else {\n             CountDownLatchInfo latch = latches.get(name);", "sourceBeforeFix": "count <= 0", "sourceAfterFix": "count < 0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "93732941ac3e2f40c6a807c4b11577646b5668d4", "projectName": "Bukkit.Bukkit", "bugType": "Change Identifier Used", "problem": "         if (args.length == 1) {\n             List<String> completions = new ArrayList<String>();\n            for (OfflinePlayer player : Bukkit.getOfflinePlayers()) {\n                 String playerName = player.getName();\n                if (player.isOp() && StringUtil.startsWithIgnoreCase(playerName, args[0])) {\n                     completions.add(playerName);\n                 }\n             }", "fixed": "         if (args.length == 1) {\n             List<String> completions = new ArrayList<String>();\n            for (OfflinePlayer player : Bukkit.getOperators()) {\n                 String playerName = player.getName();\n                if (StringUtil.startsWithIgnoreCase(playerName, args[0])) {\n                     completions.add(playerName);\n                 }\n             }", "sourceBeforeFix": "Bukkit.getOfflinePlayers()", "sourceAfterFix": "Bukkit.getOperators()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fe9347ccf26084928d9bb4367c03a44953a3934", "projectName": "dropwizard.metrics", "bugType": "Change Modifier", "problem": "     private void setMax(long potentialMax) {\n         boolean done = false;\n         while (!done) {\n            long currentMax = _max.get();\n             done = currentMax >= potentialMax || _max.compareAndSet(currentMax, potentialMax);\n         }\n     }", "fixed": "     private void setMax(long potentialMax) {\n         boolean done = false;\n         while (!done) {\n            final long currentMax = _max.get();\n             done = currentMax >= potentialMax || _max.compareAndSet(currentMax, potentialMax);\n         }\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c32df371abcbee7ebbb77e6bf6a429d3f3f4134b", "projectName": "netty.netty", "bugType": "Change Caller in Function Call", "problem": "             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + bytesToCopy) + \", maximum is \" + data.limit());\n         }\n         dst.put(tmpBuf);\n     }", "fixed": "             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + bytesToCopy) + \", maximum is \" + buffer.limit());\n         }\n         dst.put(tmpBuf);\n     }", "sourceBeforeFix": "data.limit()", "sourceAfterFix": "buffer.limit()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface XQueryEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedXQueryEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface XQueryEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedXQueryEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "96a66b27711d68c934bb2a6cd094f2be3039600b", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "             this.atmosphereHandler = atmosphereHandler;\n             try {\n                 if (BroadcasterFactory.getDefault() != null) {\n                    this.broadcaster = BroadcasterFactory.getDefault().get(mapping);\n                 } else {\n                     this.mapping = mapping;\n                 }", "fixed": "             this.atmosphereHandler = atmosphereHandler;\n             try {\n                 if (BroadcasterFactory.getDefault() != null) {\n                    this.broadcaster = BroadcasterFactory.getDefault().lookup(mapping, true);\n                 } else {\n                     this.mapping = mapping;\n                 }", "sourceBeforeFix": "BroadcasterFactory.getDefault().get(mapping)", "sourceAfterFix": "BroadcasterFactory.getDefault().lookup(mapping,true)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n \t/**\n \t * @param aClass class of object getting length for", "fixed": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t/**\n \t * @param aClass class of object getting length for", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "af4319015e0c1ab6da03083d793e465b7ca58def", "projectName": "swagger-api.swagger-codegen", "bugType": "Same Function More Args", "problem": "             if (is == null) {\nis = new FileInputStream(new File(name));\n             }\n            return new InputStreamReader(is);\n         } catch (Exception e) {\n             LOGGER.error(e.getMessage());\n         }", "fixed": "             if (is == null) {\nis = new FileInputStream(new File(name));\n             }\n            return new InputStreamReader(is, \"UTF-8\");\n         } catch (Exception e) {\n             LOGGER.error(e.getMessage());\n         }", "sourceBeforeFix": "new InputStreamReader(is)", "sourceAfterFix": "new InputStreamReader(is,\"UTF-8\")"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUser(@Valid User body);\n     @POST\n     @Path(\"/createWithArray\")", "fixed": "     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUser(@Valid User body) throws Exception;\n     @POST\n     @Path(\"/createWithArray\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "3691be4c1f9974b445e682c6d290306700eab602", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "      * @throws javax.servlet.ServletException\n      */\n     protected AtmosphereHandlerWrapper map(HttpServletRequest req) throws ServletException {\n        String path = req.getRequestURI();\n         if (path == null || path.length() == 0) {\n             path = \"/*\";\n         }", "fixed": "      * @throws javax.servlet.ServletException\n      */\n     protected AtmosphereHandlerWrapper map(HttpServletRequest req) throws ServletException {\n        String path = req.getServletPath() + req.getPathInfo();\n         if (path == null || path.length() == 0) {\n             path = \"/*\";\n         }", "sourceBeforeFix": "logger.trace(\"Trying to map {} to {}\",t,path)", "sourceAfterFix": "logger.debug(\"Trying to map {} to {}\",t,path)"}
{"fixCommitSHA1": "d1cb70710f70a129598e92a638d536b9207aa01f", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "  * Created by russellb337 on 7/9/15.\n  */\n public interface Response {\n    ResponseImpl schema(Property property);\n    ResponseImpl description(String description);\n    ResponseImpl example(String type, Object example);\n    ResponseImpl header(String name, Property property);\n    ResponseImpl headers(Map<String, Property> headers);\n     String getDescription();", "fixed": "  * Created by russellb337 on 7/9/15.\n  */\n public interface Response {\n    Response schema(Property property);\n    Response description(String description);\n    Response example(String type, Object example);\n    Response header(String name, Property property);\n    Response headers(Map<String, Property> headers);\n     String getDescription();", "sourceBeforeFix": "ResponseImpl schema(Property property); ", "sourceAfterFix": "Response schema(Property property); "}
{"fixCommitSHA1": "b1aa0100b3f37551bcd8507d168449d8b03c5c57", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "             expand(view, absNode);\n         }\n        graphVersion.incNodeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "fixed": "             expand(view, absNode);\n         }\n        graphVersion.incNodeAndEdgeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "sourceBeforeFix": "graphVersion.incNodeVersion()", "sourceAfterFix": "graphVersion.incNodeAndEdgeVersion()"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n          intBuf = buf.DATA.asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {", "fixed": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResponseWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "65f815b3aaa4ca2aff782b35c1fa0d318f10387c", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String, U> e : handlers.entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.debug(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     handler = e.getValue();\n                    logger.debug(\"Mapped {} to {}\", t, e.getValue());\n                     break;\n                 }\n             }", "fixed": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String, U> e : handlers.entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.trace(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     handler = e.getValue();\n                    logger.trace(\"Mapped {} to {}\", t, e.getValue());\n                     break;\n                 }\n             }", "sourceBeforeFix": "logger.debug(\"Trying to map {} to {}\",t,path)", "sourceAfterFix": "logger.trace(\"Trying to map {} to {}\",t,path)"}
{"fixCommitSHA1": "83f58a38a06e424cc74c9d4035bf552df731fe65", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "     @Override\n     public boolean isSingleton() {\n        return false;\n     }\n }", "fixed": "     @Override\n     public boolean isSingleton() {\n        return true;\n     }\n }", "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "4c90dbd67d581b2c7f105c09e47aac9667bbdf35", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       throw new FileNotFoundException(\n           ExceptionMessage.CANNOT_READ_DIRECTORY.getMessage(status.getName()));\n     }\n    return FileInStream.create(status, options.toInStreamOptions(), mContext);\n   }\n   @Override", "fixed": "       throw new FileNotFoundException(\n           ExceptionMessage.CANNOT_READ_DIRECTORY.getMessage(status.getName()));\n     }\n    return FileInStream.create(status, options.toInStreamOptions(), mFileSystemContext);\n   }\n   @Override", "sourceBeforeFix": "FileInStream.create(status,options.toInStreamOptions(),mContext)", "sourceAfterFix": "FileInStream.create(status,options.toInStreamOptions(),mFileSystemContext)"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          */\n         private static final long serialVersionUID = -1926935338069418119L;\n        public FileSelectionAction() {\n             super(\"Select Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_S);\n         }", "fixed": "          */\n         private static final long serialVersionUID = -1926935338069418119L;\n        FileSelectionAction() {\n             super(\"Select Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_S);\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9a582720939c1b4098430d1ab439b9ce045eaf06", "projectName": "checkstyle.checkstyle", "bugType": "Delete Throws Exception", "problem": "     public void startElement(String namespaceURI,\n                              String localName,\n                              String qName,\n                             Attributes atts)\n        throws SAXException {\n         if (\"package\".equals(qName)) {\n             final String name = atts.getValue(\"name\");", "fixed": "     public void startElement(String namespaceURI,\n                              String localName,\n                              String qName,\n                             Attributes atts) {\n         if (\"package\".equals(qName)) {\n             final String name = atts.getValue(\"name\");", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "52ae94eb6fe9e481c8c6df3557257b352dd7d92f", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t\tmergeJavaAndCMethod(buffer, javaMethods.get(i), cMethods.get(i));\r\n \t\t\tbuffer.append(\"\\n\");\r\n \t\t}\r\n\t\tcppFile.writeString(buffer.toString(), false);\r\n \t}\r\n \tprivate void mergeJavaAndCMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) {\r", "fixed": " \t\t\tmergeJavaAndCMethod(buffer, javaMethods.get(i), cMethods.get(i));\r\n \t\t\tbuffer.append(\"\\n\");\r\n \t\t}\r\n\t\tcppFile.writeString(buffer.toString(), false, \"UTF-8\");\r\n \t}\r\n \tprivate void mergeJavaAndCMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) {\r", "sourceBeforeFix": "cppFile.writeString(buffer.toString(),false)", "sourceAfterFix": "cppFile.writeString(buffer.toString(),false,\"UTF-8\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "c39ce11b105be36238be1cc5b406dd0037c8284c", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   \n  protected class ResourceInternal<T> {\n     \n    private T mResource;\n     \n     private long mLastAccessTimeMs;", "fixed": "   \n  protected class ResourceInternal<R> {\n     \n    private R mResource;\n     \n     private long mLastAccessTimeMs;", "sourceBeforeFix": "T resource", "sourceAfterFix": "R resource"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"}
{"fixCommitSHA1": "4da179382de208b5d63ca0b017cb2aa25ba4461b", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t\tint localtid = tileElement.getIntAttribute(\"id\", 0);\n \t\t\t\tTiledMapTile tile = tileset.getTile(firstgid + localtid);\n \t\t\t\tif (tile!= null) {\n\t\t\t\t\tElement properties = element.getChildByName(\"properties\");\n \t\t\t\t\tif (properties != null) {\n \t\t\t\t\t\tloadProperties(tile.getProperties(), properties);\n \t\t\t\t\t}", "fixed": " \t\t\t\tint localtid = tileElement.getIntAttribute(\"id\", 0);\n \t\t\t\tTiledMapTile tile = tileset.getTile(firstgid + localtid);\n \t\t\t\tif (tile!= null) {\n\t\t\t\t\tElement properties = tileElement.getChildByName(\"properties\");\n \t\t\t\t\tif (properties != null) {\n \t\t\t\t\t\tloadProperties(tile.getProperties(), properties);\n \t\t\t\t\t}", "sourceBeforeFix": "element.getChildByName(\"properties\")", "sourceAfterFix": "tileElement.getChildByName(\"properties\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleSheetsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GoogleSheetsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "9b9d9cb2297165ec4159efa35322f1b149908f9f", "projectName": "gephi.gephi", "bugType": "Less Specific If", "problem": "     private void setLanguage(Language language) {\n         String homePath;\n        if (Utilities.isMac()) {\n             homePath = System.getProperty(\"netbeans.home\");\n         } else {\n             homePath = System.getProperty(\"user.dir\");", "fixed": "     private void setLanguage(Language language) {\n         String homePath;\n        if (Utilities.isMac() || Utilities.isUnix()) {\n             homePath = System.getProperty(\"netbeans.home\");\n         } else {\n             homePath = System.getProperty(\"user.dir\");", "sourceBeforeFix": "Utilities.isMac()", "sourceAfterFix": "Utilities.isMac() || Utilities.isUnix()"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @Override\n     protected void doPost(HttpServletRequest req,\n                           HttpServletResponse resp) throws ServletException, IOException {\n        final Task task = tasks.get(req.getServletPath());\n         if (task != null) {\n             try {\n                 resp.setContentType(MediaType.TEXT_PLAIN);", "fixed": "     @Override\n     protected void doPost(HttpServletRequest req,\n                           HttpServletResponse resp) throws ServletException, IOException {\n        final Task task = tasks.get(req.getPathInfo());\n         if (task != null) {\n             try {\n                 resp.setContentType(MediaType.TEXT_PLAIN);", "sourceBeforeFix": "req.getServletPath()", "sourceAfterFix": "req.getPathInfo()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "04ad420f594bedd8cd5c40160d67585f70686a9c", "projectName": "aws.aws-sdk-java", "bugType": "Change Identifier Used", "problem": "             try {\n                 return MAPPER.readTree(rawJsonContent);\n             } catch (Exception e) {\n                LOG.error(\"Unable to parse HTTP response content\", e);\n                 return null;\n             }\n         }", "fixed": "             try {\n                 return MAPPER.readTree(rawJsonContent);\n             } catch (Exception e) {\n                LOG.info(\"Unable to parse HTTP response content\", e);\n                 return null;\n             }\n         }", "sourceBeforeFix": "LOG.error(\"Unable to unmarshall exception content\",e)", "sourceAfterFix": "LOG.info(\"Unable to unmarshall exception content\",e)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "66c325e004dc7d1ffb6b97e8af093a8455756d53", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n\t\tContext.setLocale(Context.getLocale());\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r", "fixed": " \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see java.lang.Object\n \t */\n\tpublic int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "fixed": " \t * \n* @see java.lang.Object\n \t */\n\tpublic abstract int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "18c46487add2b1c32060bb9c1fc8e6e36a3d44b0", "projectName": "Bukkit.Bukkit", "bugType": "Change Numeric Literal", "problem": "                         noTeam.add(sender.getName());\n                     }\n                 } else {\n                    for (int i = 3; i < args.length; i++) {\n                         String playerName = args[i];\n                         OfflinePlayer offlinePlayer;\n                         Player player = Bukkit.getPlayerExact(playerName);", "fixed": "                         noTeam.add(sender.getName());\n                     }\n                 } else {\n                    for (int i = 2; i < args.length; i++) {\n                         String playerName = args[i];\n                         OfflinePlayer offlinePlayer;\n                         Player player = Bukkit.getPlayerExact(playerName);", "sourceBeforeFix": "i=3", "sourceAfterFix": "i=2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d6ddbb7981b9e5b5c07231f8895bcda133019c63", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "       if (super.cancel(mayInterruptIfRunning)) {\n         ListenableFuture<? extends I> localInputFuture = inputFuture;\n         if (localInputFuture != null) {\n          inputFuture.cancel(mayInterruptIfRunning);\n         }\n         return true;\n       }", "fixed": "       if (super.cancel(mayInterruptIfRunning)) {\n         ListenableFuture<? extends I> localInputFuture = inputFuture;\n         if (localInputFuture != null) {\n          localInputFuture.cancel(mayInterruptIfRunning);\n         }\n         return true;\n       }", "sourceBeforeFix": "inputFuture.cancel(mayInterruptIfRunning)", "sourceAfterFix": "localInputFuture.cancel(mayInterruptIfRunning)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.debug(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "fixed": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "sourceBeforeFix": "logger.debug(\"Requsting URL {}\",url)", "sourceAfterFix": "logger.trace(\"Requsting URL {}\",url)"}
{"fixCommitSHA1": "e0db0f19bd1aa3c7ce48ed02ed99b3ea950e1cee", "projectName": "gephi.gephi", "bugType": "Change Numeric Literal", "problem": "             Double[] toAdd = new Double[]{toRemove[0], excludingPoint};\n            return new TimeInterval(source, toAdd[0], toAdd[1], toRemove[0], toRemove[0]);\n         }\n         return source;", "fixed": "             Double[] toAdd = new Double[]{toRemove[0], excludingPoint};\n            return new TimeInterval(source, toAdd[0], toAdd[1], toRemove[0], toRemove[1]);\n         }\n         return source;", "sourceBeforeFix": "toRemove[0]", "sourceAfterFix": "toRemove[1]"}
{"fixCommitSHA1": "c81cb94226a8381f512b8293659c82338a4626c3", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "   public Response getTasks(\n       @QueryParam(\"state\") final String state,\n       @QueryParam(\"datasource\") final String dataSource,\n      @PathParam(\"createdTimeInterval\") final String createdTimeInterval,\n       @QueryParam(\"max\") final Integer maxCompletedTasks,\n       @QueryParam(\"type\") final String type,\n       @Context final HttpServletRequest req", "fixed": "   public Response getTasks(\n       @QueryParam(\"state\") final String state,\n       @QueryParam(\"datasource\") final String dataSource,\n      @QueryParam(\"createdTimeInterval\") final String createdTimeInterval,\n       @QueryParam(\"max\") final Integer maxCompletedTasks,\n       @QueryParam(\"type\") final String type,\n       @Context final HttpServletRequest req", "sourceBeforeFix": "@PathParam(\"createdTimeInterval\")", "sourceAfterFix": "@QueryParam(\"createdTimeInterval\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Farewell World\", Exchange.FILE_NAME, \"mysub/mysubsub/farewell.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/mysub/mysubsub/farewell.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Farewell World\", Exchange.FILE_NAME, \"mysub/mysubsub/farewell.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/mysub/mysubsub/farewell.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "7340590ceb9549eb3fe8bc443ba9576260d337cc", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": " import java.io.IOException;\n public class JsonRecordHiveMapper implements HiveMapper {\n    private static final Logger LOG = LoggerFactory.getLogger(DelimitedRecordHiveMapper.class);\n     private Fields columnFields;\n     private Fields partitionFields;\n     private String timeFormat;", "fixed": " import java.io.IOException;\n public class JsonRecordHiveMapper implements HiveMapper {\n    private static final Logger LOG = LoggerFactory.getLogger(JsonRecordHiveMapper.class);\n     private Fields columnFields;\n     private Fields partitionFields;\n     private String timeFormat;", "sourceBeforeFix": "DelimitedRecordHiveMapper.class", "sourceAfterFix": "JsonRecordHiveMapper.class"}
{"fixCommitSHA1": "a558f6310502c9db5bdda7f63fd0c7357706cdd6", "projectName": "apache.hadoop", "bugType": "Change Numeric Literal", "problem": "static final long TIMEOUT = 40000L;\nstatic final double CAPACITY_ALLOWED_VARIANCE = 0.005;\nstatic final double BALANCE_ALLOWED_VARIANCE = 0.11;\n  static final int DEFAULT_BLOCK_SIZE = 10;\n   static {\n     Balancer.setBlockMoveWaitTime(1000L) ;", "fixed": "static final long TIMEOUT = 40000L;\nstatic final double CAPACITY_ALLOWED_VARIANCE = 0.005;\nstatic final double BALANCE_ALLOWED_VARIANCE = 0.11;\n  static final int DEFAULT_BLOCK_SIZE = 100;\n   static {\n     Balancer.setBlockMoveWaitTime(1000L) ;", "sourceBeforeFix": "DEFAULT_BLOCK_SIZE=10", "sourceAfterFix": "DEFAULT_BLOCK_SIZE=100"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "5bbaa3482d2bad347cd5f3199f457050ab60a8ce", "projectName": "apache.camel", "bugType": "Change Operand ", "problem": "             getContext().addInterceptStrategy(delayer);\n         }\n         InflightRepository inflightRepository = getBeanForType(InflightRepository.class);\n        if (delayer != null) {\n             LOG.info(\"Using custom InflightRepository: \" + inflightRepository);\n             getContext().setInflightRepository(inflightRepository);\n         }", "fixed": "             getContext().addInterceptStrategy(delayer);\n         }\n         InflightRepository inflightRepository = getBeanForType(InflightRepository.class);\n        if (inflightRepository != null) {\n             LOG.info(\"Using custom InflightRepository: \" + inflightRepository);\n             getContext().setInflightRepository(inflightRepository);\n         }", "sourceBeforeFix": "delayer != null", "sourceAfterFix": "inflightRepository != null"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "         ret = getMS().deletePartitionColumnStatistics(dbName, tableName,\n                                                       convertedPartName, partVals, colName);\n       } finally {\n        endFunction(\"delete_column_statistics_by_partition: \", ret != false);\n       }\n       return ret;\n     }", "fixed": "         ret = getMS().deletePartitionColumnStatistics(dbName, tableName,\n                                                       convertedPartName, partVals, colName);\n       } finally {\n        endFunction(\"delete_column_statistics_by_partition: \", ret != false, null);\n       }\n       return ret;\n     }", "sourceBeforeFix": "endFunction(\"get_column_statistics_by_partition: \",statsObj != null)", "sourceAfterFix": "endFunction(\"get_column_statistics_by_partition: \",statsObj != null,null)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "cd750463fa622ca2ba5c60e3b54aeceb8d29e4f8", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "           {\n             binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/indexer\");\n             binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(8091);\n            binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8091);\n             IndexingServiceModuleHelper.configureTaskRunnerConfigs(binder);", "fixed": "           {\n             binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/indexer\");\n             binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(8091);\n            binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8291);\n             IndexingServiceModuleHelper.configureTaskRunnerConfigs(binder);", "sourceBeforeFix": "binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8091)", "sourceAfterFix": "binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8291)"}
{"fixCommitSHA1": "7012976421d9e593d8b276697b2fbbc9328b6fa5", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\n \tpublic Container<T> prefSize (float width, float height) {\n\t\tprefSize(new Fixed(width));\n \t\treturn this;\n \t}", "fixed": " \t\n \tpublic Container<T> prefSize (float width, float height) {\n\t\tprefSize(new Fixed(width), new Fixed(height));\n \t\treturn this;\n \t}", "sourceBeforeFix": "prefSize(new Fixed(width))", "sourceAfterFix": "prefSize(new Fixed(width),new Fixed(height))"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Heartbeat_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         byte[] request = getRequestBytes(null, header);\n         Request obj = (Request) decode(request);\n         Assert.assertEquals(null, obj.getData());", "fixed": "     @Test\n     public void test_Decode_Return_Request_Heartbeat_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         byte[] request = getRequestBytes(null, header);\n         Request obj = (Request) decode(request);\n         Assert.assertEquals(null, obj.getData());", "sourceBeforeFix": "(byte)0xff", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JettyHttpEndpointBuilder9\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedJettyHttpEndpointBuilder9 advanced() {", "fixed": "     \n    public interface JettyHttpEndpointBuilder9\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedJettyHttpEndpointBuilder9 advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 190);\n     }\n     public void testStopWatchRestart() throws Exception {", "fixed": "         taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 150);\n     }\n     public void testStopWatchRestart() throws Exception {", "sourceBeforeFix": "taken > 90", "sourceAfterFix": "taken > 50"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "fixed": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "sourceBeforeFix": "GL.glBindTextureEXT(target,texture)", "sourceAfterFix": "GL.glBindTexture(target,texture)"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "67e8cb0706ece341bb993ab1f0364d5a904a716c", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     mWorkerId = workerId;\n     mFileId = fileId;\n     mLength = length;\n    mCheckpointPath = checkpointPath.getPath();\n     mOpTimeMs = opTimeMs;\n   }", "fixed": "     mWorkerId = workerId;\n     mFileId = fileId;\n     mLength = length;\n    mCheckpointPath = checkpointPath.toString();\n     mOpTimeMs = opTimeMs;\n   }", "sourceBeforeFix": "checkpointPath.getPath()", "sourceAfterFix": "checkpointPath.toString()"}
{"fixCommitSHA1": "64bc69ef4c547771f44f6b6b103cda7be2f0922b", "projectName": "dropwizard.metrics", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic SortedMap<String, Meter> getMeters(MetricFilter filter) {\n\t\treturn adaptMetrics(Meter.class, reg.getCounters(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Timer> getTimers() {", "fixed": " \t}\n \tpublic SortedMap<String, Meter> getMeters(MetricFilter filter) {\n\t\treturn adaptMetrics(Meter.class, reg.getMeters(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Timer> getTimers() {", "sourceBeforeFix": "reg.getCounters(transformFilter(filter))", "sourceAfterFix": "reg.getTimers(transformFilter(filter))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "3b47b9b23bf3f10d124f26f37dff3245fe09ec56", "projectName": "wildfly.wildfly", "bugType": "Change Caller in Function Call", "problem": "             if (queueLength.isDefined() && queueLength.asInt() == 0) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(coreThreads.asString());\n                 }\n             }", "fixed": "             if (queueLength.isDefined() && queueLength.asInt() == 0) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(queueLength.asString());\n                 }\n             }", "sourceBeforeFix": "coreThreads.asString()", "sourceAfterFix": "queueLength.asString()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "b7538f86b1c74b5a3931f8913408ec01fa5bff9a", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n              + \" will not be in TachyonStorage\", ioe);\n           mShouldCacheCurrentBlock = false;\n         }\n       }", "fixed": "           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n              + \" will not be in TachyonStorage. Exception:\" + ioe.getMessage());\n           mShouldCacheCurrentBlock = false;\n         }\n       }", "sourceBeforeFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\",ioe)", "sourceAfterFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\")"}
{"fixCommitSHA1": "e04a3bf7703544cf5012eb2f55626af8e0a2cb8c", "projectName": "apache.flink", "bugType": "Delete Throws Exception", "problem": "  *\n  * <p>The stream is bounded and will complete after about a minute.\n  * The result is always constant.\n * The job is killed on the first attemped and restarted.\n  *\n  * <p>Parameters:\n  * -outputPath Sets the path to where the result data is written.", "fixed": "  *\n  * <p>The stream is bounded and will complete after about a minute.\n  * The result is always constant.\n * The job is killed on the first attempt and restarted.\n  *\n  * <p>Parameters:\n  * -outputPath Sets the path to where the result data is written.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SipEndpointBuilder\n             extends\n                 SipEndpointConsumerBuilder, SipEndpointProducerBuilder {\n         default AdvancedSipEndpointBuilder advanced() {", "fixed": "     \n    public interface SipEndpointBuilder\n             extends\n                 SipEndpointConsumerBuilder, SipEndpointProducerBuilder {\n         default AdvancedSipEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f8d9a3b19b8a69e20c4469b541a5ae96b07e7cc8", "projectName": "druid-io.druid", "bugType": "Change Binary Operator", "problem": "         @Override\n         public long increment(long timeMillis)\n         {\n          return timeMillis - MILLIS_IN;\n         }\n         @Override", "fixed": "         @Override\n         public long increment(long timeMillis)\n         {\n          return timeMillis + MILLIS_IN;\n         }\n         @Override", "sourceBeforeFix": "timeMillis - MILLIS_IN", "sourceAfterFix": "timeMillis + MILLIS_IN"}
{"fixCommitSHA1": "4e1cc538aaa75a9d0e9514effa6e3f3beeab3985", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tfor (int i = 0, n = relativePaths.length; i < n; i++) {\r\n \t\t\tString path = relativePaths[i];\r\n \t\t\tif (!path.endsWith(suffix)) continue;\r\n\t\t\thandles[i] = child(path);\r\n \t\t\tcount++;\r\n \t\t}\r\n \t\tif (count < relativePaths.length) {\r", "fixed": " \t\tfor (int i = 0, n = relativePaths.length; i < n; i++) {\r\n \t\t\tString path = relativePaths[i];\r\n \t\t\tif (!path.endsWith(suffix)) continue;\r\n\t\t\thandles[count] = child(path);\r\n \t\t\tcount++;\r\n \t\t}\r\n \t\tif (count < relativePaths.length) {\r", "sourceBeforeFix": "handles[i]", "sourceAfterFix": "handles[count]"}
{"fixCommitSHA1": "be46bcbdc1b71801e798e0d1ed0102fd1ff5d678", "projectName": "swagger-api.swagger-core", "bugType": "Same Function More Args", "problem": "         BASE_CLASSES = Collections.unmodifiableMap(baseClasses);\n         final Map<String, PrimitiveType> externalClasses = new HashMap<String, PrimitiveType>();\n        addKeys(externalClasses, DATE, \"org.joda.time.LocalDate\");\n         addKeys(externalClasses, DATE_TIME, \"org.joda.time.DateTime\", \"org.joda.time.ReadableDateTime\",\n                \"javax.xml.datatype.XMLGregorianCalendar\");\n         EXTERNAL_CLASSES = Collections.unmodifiableMap(externalClasses);\n         final Map<String, PrimitiveType> names = new TreeMap<String, PrimitiveType>(String.CASE_INSENSITIVE_ORDER);", "fixed": "         BASE_CLASSES = Collections.unmodifiableMap(baseClasses);\n         final Map<String, PrimitiveType> externalClasses = new HashMap<String, PrimitiveType>();\n        addKeys(externalClasses, DATE, \"org.joda.time.LocalDate\", \"java.time.LocalDate\");\n         addKeys(externalClasses, DATE_TIME, \"org.joda.time.DateTime\", \"org.joda.time.ReadableDateTime\",\n                \"javax.xml.datatype.XMLGregorianCalendar\", \"java.time.LocalDateTime\");\n         EXTERNAL_CLASSES = Collections.unmodifiableMap(externalClasses);\n         final Map<String, PrimitiveType> names = new TreeMap<String, PrimitiveType>(String.CASE_INSENSITIVE_ORDER);", "sourceBeforeFix": "addKeys(externalClasses,DATE,\"org.joda.time.LocalDate\")", "sourceAfterFix": "addKeys(externalClasses,DATE,\"org.joda.time.LocalDate\",\"java.time.LocalDate\")"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "fixed": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "ec9c05f4cd668deb502768bb4a3c8511a5becffc", "projectName": "wildfly.wildfly", "bugType": "Change Modifier", "problem": " \npublic class BasicTests {\n     protected EndpointIface proxy;", "fixed": " \npublic abstract class BasicTests {\n     protected EndpointIface proxy;", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page2 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 2, 2);\n         assertThat(page2.pagination().getCount()).isEqualTo(2);\n        assertThat(page2.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page2.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello4\", \"hello5\");", "fixed": "         final PaginatedList<TestDTO> page2 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 2, 2);\n         assertThat(page2.pagination().getCount()).isEqualTo(2);\n        assertThat(page2.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page2.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello4\", \"hello5\");", "sourceBeforeFix": "assertThat(page2.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page2.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DrillEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedDrillEndpointBuilder advanced() {\n             return (AdvancedDrillEndpointBuilder) this;\n         }", "fixed": "     \n    public interface DrillEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedDrillEndpointBuilder advanced() {\n             return (AdvancedDrillEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9968eea08bf15cf42c41da717923967d606b3c1c", "projectName": "dropwizard.metrics", "bugType": "Change Identifier Used", "problem": "     }\n     private void printDoubleField(String name, double value, long epoch) {\n        sendToGraphite(String.format(\"%s%s %2.2f %d\\n\", prefix, sanitizedName(name), value, epoch));\n     }\n     private void printLongField(String name, long value, long epoch) {\n        sendToGraphite(String.format(\"%s%s %d %d\\n\", prefix, sanitizedName(name), value, epoch));\n     }\n     private void printVmMetrics(long epoch) throws IOException {", "fixed": "     }\n     private void printDoubleField(String name, double value, long epoch) {\n        sendToGraphite(String.format(\"%s%s %2.2f %d\\n\", prefix, sanitizeName(name), value, epoch));\n     }\n     private void printLongField(String name, long value, long epoch) {\n        sendToGraphite(String.format(\"%s%s %d %d\\n\", prefix, sanitizeName(name), value, epoch));\n     }\n     private void printVmMetrics(long epoch) throws IOException {", "sourceBeforeFix": "sanitizedName(name)", "sourceAfterFix": "sanitizeName(name)"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "fixed": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "sourceBeforeFix": "factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "de4c207aafb924e5a104e7f1b9e3b37c0f05bebb", "projectName": "yusuke.twitter4j", "bugType": "Same Function Swap Args", "problem": "         try {\n            user = twitter1.checkUserListSubscription(id1.screenName, id2.id, userList.getId());\n             fail(\"id2 shouldn't be a subscriber the userList. expecting a TwitterException\");\n         } catch (TwitterException ignore) {\n             assertEquals(404, ignore.getStatusCode());", "fixed": "         try {\n            user = twitter1.checkUserListSubscription(id1.screenName, userList.getId(), id2.id);\n             fail(\"id2 shouldn't be a subscriber the userList. expecting a TwitterException\");\n         } catch (TwitterException ignore) {\n             assertEquals(404, ignore.getStatusCode());", "sourceBeforeFix": "twitter1.checkUserListMembership(id1.screenName,id2.id,userList.getId())", "sourceAfterFix": "twitter1.checkUserListMembership(id1.screenName,userList.getId(),id2.id)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "    * \n    * @param schedulingInfo\n    */\n  protected void setSchedulingInfo(String schedulingInfo) {\n     super.setSchedulingInfo(schedulingInfo);\n   }", "fixed": "    * \n    * @param schedulingInfo\n    */\n  @InterfaceAudience.Private\n  public void setSchedulingInfo(String schedulingInfo) {\n     super.setSchedulingInfo(schedulingInfo);\n   }", "sourceBeforeFix": "4", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0ffdc3246d1bd202e6cef4b486ffb4e9257b0311", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (target == this) {\n             task.run();\n         } else {\n            target.addTask(task);\n         }\n     }", "fixed": "         if (target == this) {\n             task.run();\n         } else {\n            target.addTaskAndWakeup(task);\n         }\n     }", "sourceBeforeFix": "target.addTask(task)", "sourceAfterFix": "target.addTaskAndWakeup(task)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "fixed": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic abstract boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTextureEXT(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "fixed": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTexture(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)", "sourceAfterFix": "GL.glGenTextures(n,toBuffer(textures,offset),0)"}
{"fixCommitSHA1": "0559e4a6a1c956394bf3ce184be7bf4f9a91108e", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \tprivate static final String TEST_DATA_FILE = \"/testdata.avro\";\n \tstatic {\n\t\tLogUtils.initializeDefaultConsoleLogger();\n \t}\n \t@Test", "fixed": " \tprivate static final String TEST_DATA_FILE = \"/testdata.avro\";\n \tstatic {\n\t\tLogUtils.initializeDefaultTestConsoleLogger();\n \t}\n \t@Test", "sourceBeforeFix": "LogUtils.initializeDefaultConsoleLogger()", "sourceAfterFix": "LogUtils.initializeDefaultTestConsoleLogger()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "65c15a0c969d964875b2b988ff5f63d419e6a832", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    private class CompoundEventPredicate implements EventPredicate {\n         private List<EventPredicate> predicates = new ArrayList<EventPredicate>();", "fixed": "     \n    private final class CompoundEventPredicate implements EventPredicate {\n         private List<EventPredicate> predicates = new ArrayList<EventPredicate>();", "sourceBeforeFix": "2", "sourceAfterFix": "18"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the\n \t *                     input view, which may have an underlying I/O channel from which it reads.\n \t */\n\tpublic void deserialize(T target, DataInputView source) throws IOException;\n \t/**\n \t * Copies exactly one record from the source input view to the target output view. Whether this operation", "fixed": " \t * @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the\n \t *                     input view, which may have an underlying I/O channel from which it reads.\n \t */\n\tpublic abstract void deserialize(T target, DataInputView source) throws IOException;\n \t/**\n \t * Copies exactly one record from the source input view to the target output view. Whether this operation", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );", "fixed": "                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),args.rest())"}
{"fixCommitSHA1": "a161d8d1924d1fb49a4d229370d998be1493957c", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "                 loggerForCleaner.debug(\"Beginning log cleanup\");\n                 int total = 0;\n                 final Timer.Context ctx = new Timer().time();\n                for (final Log kafkaLog : JavaConversions.asIterable(logManager.allLogs())) {\n                     if (kafkaLog.config().compact()) continue;\n                     loggerForCleaner.debug(\"Garbage collecting {}\", kafkaLog.name());\n                     total += cleanupExpiredSegments(kafkaLog) +", "fixed": "                 loggerForCleaner.debug(\"Beginning log cleanup\");\n                 int total = 0;\n                 final Timer.Context ctx = new Timer().time();\n                for (final Log kafkaLog : JavaConversions.asJavaIterable(logManager.allLogs())) {\n                     if (kafkaLog.config().compact()) continue;\n                     loggerForCleaner.debug(\"Garbage collecting {}\", kafkaLog.name());\n                     total += cleanupExpiredSegments(kafkaLog) +", "sourceBeforeFix": "JavaConversions.asIterable(logManager.allLogs())", "sourceAfterFix": "JavaConversions.asJavaIterable(logManager.allLogs())"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   final Hpack.Reader hpackReader;\n   \n  public Http2Reader(BufferedSource source, boolean client) {\n     this.source = source;\n     this.client = client;\n     this.continuation = new ContinuationSource(this.source);", "fixed": "   final Hpack.Reader hpackReader;\n   \n  Http2Reader(BufferedSource source, boolean client) {\n     this.source = source;\n     this.client = client;\n     this.continuation = new ContinuationSource(this.source);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": "  */\n class OnEnabledHealthIndicatorCondition extends SpringBootCondition {\n\tprivate static final String ANNOTATION_CLASS = ConditionalOnEnablednHealthIndicator.class\n \t\t\t.getName();\n \t@Override", "fixed": "  */\n class OnEnabledHealthIndicatorCondition extends SpringBootCondition {\n\tprivate static final String ANNOTATION_CLASS = ConditionalOnEnabledHealthIndicator.class\n \t\t\t.getName();\n \t@Override", "sourceBeforeFix": "ConditionalOnEnablednHealthIndicator.class", "sourceAfterFix": "ConditionalOnEnabledHealthIndicator.class"}
{"fixCommitSHA1": "1aaffaf8df78d17e71243df6d94d687893802bb5", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     result.setFileId(fileInfo.getFileId());\n     result.setName(fileInfo.getName());\n     result.setPath(fileInfo.getPath());\n    result.setUfsPath(fileInfo.getPath());\n     result.setLength(fileInfo.getLength());\n     result.setBlockSizeBytes(fileInfo.getBlockSizeBytes());\n     result.setCreationTimeMs(fileInfo.getCreationTimeMs());", "fixed": "     result.setFileId(fileInfo.getFileId());\n     result.setName(fileInfo.getName());\n     result.setPath(fileInfo.getPath());\n    result.setUfsPath(fileInfo.getUfsPath());\n     result.setLength(fileInfo.getLength());\n     result.setBlockSizeBytes(fileInfo.getBlockSizeBytes());\n     result.setCreationTimeMs(fileInfo.getCreationTimeMs());", "sourceBeforeFix": "lineageInfo.getParents()", "sourceAfterFix": "lineageInfo.getChildren()"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffsetEXT(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "fixed": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffset(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)", "sourceAfterFix": "GL.glGenTextures(n,toBuffer(textures,offset),0)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "fixed": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesNamespacesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesNamespacesEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KubernetesNamespacesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesNamespacesEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d9cee23da79c7368a47a894f1bf861f04fdb6f00", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             out.writeDouble((Double) obj);\n         } else if (obj instanceof Float) {\n             out.writeByte(5);\n            out.writeDouble((Float) obj);\n         } else if (obj instanceof Boolean) {\n             out.writeByte(6);\n             out.writeBoolean((Boolean) obj);", "fixed": "             out.writeDouble((Double) obj);\n         } else if (obj instanceof Float) {\n             out.writeByte(5);\n            out.writeFloat((Float) obj);\n         } else if (obj instanceof Boolean) {\n             out.writeByte(6);\n             out.writeBoolean((Boolean) obj);", "sourceBeforeFix": "out.writeDouble((Float)obj)", "sourceAfterFix": "out.writeFloat((Float)obj)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "4409ba741c1e9edc6a7b9e47829343417a339f9c", "projectName": "apache.hbase", "bugType": "Change Caller in Function Call", "problem": "     conf.set(\"hadoop.policy.file\", \"hbase-policy.xml\");\n     if (conf.getBoolean(\n           ServiceAuthorizationManager.SERVICE_AUTHORIZATION_CONFIG, false)) {\n      ServiceAuthorizationManager.refresh(conf, new HBasePolicyProvider());\n     }\n   }\n }", "fixed": "     conf.set(\"hadoop.policy.file\", \"hbase-policy.xml\");\n     if (conf.getBoolean(\n           ServiceAuthorizationManager.SERVICE_AUTHORIZATION_CONFIG, false)) {\n      authManager.refresh(conf, new HBasePolicyProvider());\n     }\n   }\n }", "sourceBeforeFix": "ServiceAuthorizationManager.refresh(conf,new HBasePolicyProvider())", "sourceAfterFix": "authManager.refresh(conf,new HBasePolicyProvider())"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "3884ebbc3ea4a04fb6f90973c383a201726b7aeb", "projectName": "druid-io.druid", "bugType": "Change Caller in Function Call", "problem": "                                     String.format(\n                                         \"-D%s=%s\",\n                                         propName.substring(CHILD_PROPERTY_PREFIX.length()),\n                                        System.getProperty(propName)\n                                     )\n                                 );\n                               }", "fixed": "                                     String.format(\n                                         \"-D%s=%s\",\n                                         propName.substring(CHILD_PROPERTY_PREFIX.length()),\n                                        props.getProperty(propName)\n                                     )\n                                 );\n                               }", "sourceBeforeFix": "System.getProperty(propName)", "sourceAfterFix": "props.getProperty(propName)"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "fixed": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "ae376bd69f5d5ee6d0461abd00b7870d8e26960b", "projectName": "facebook.presto", "bugType": "Change Binary Operator", "problem": "             switch (declaredIntentionToWrite.getMode()) {\n                 case STAGE_AND_MOVE_TO_TARGET_DIRECTORY:\n                 case DIRECT_TO_TARGET_NEW_DIRECTORY: {\n                    if (skipTargetCleanupOnRollback && declaredIntentionToWrite.getMode() != DIRECT_TO_TARGET_NEW_DIRECTORY) {\n                         break;\n                     }", "fixed": "             switch (declaredIntentionToWrite.getMode()) {\n                 case STAGE_AND_MOVE_TO_TARGET_DIRECTORY:\n                 case DIRECT_TO_TARGET_NEW_DIRECTORY: {\n                    if (skipTargetCleanupOnRollback && declaredIntentionToWrite.getMode() == DIRECT_TO_TARGET_NEW_DIRECTORY) {\n                         break;\n                     }", "sourceBeforeFix": "declaredIntentionToWrite.getMode() != DIRECT_TO_TARGET_NEW_DIRECTORY", "sourceAfterFix": "declaredIntentionToWrite.getMode() == DIRECT_TO_TARGET_NEW_DIRECTORY"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MongoDbEndpointBuilder\n             extends\n                 MongoDbEndpointConsumerBuilder, MongoDbEndpointProducerBuilder {\n         default AdvancedMongoDbEndpointBuilder advanced() {", "fixed": "     \n    public interface MongoDbEndpointBuilder\n             extends\n                 MongoDbEndpointConsumerBuilder, MongoDbEndpointProducerBuilder {\n         default AdvancedMongoDbEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n \t/**\n \t * Save the given list of global properties to the database.", "fixed": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t/**\n \t * Save the given list of global properties to the database.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testBurstySampling() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "fixed": "     public void testBurstySampling() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "sourceBeforeFix": "mock.expectedMessageCount(10)", "sourceAfterFix": "mock.expectedMinimumMessageCount(10)"}
{"fixCommitSHA1": "99ed41cc78fe7dbc36ea17d9a6a1a56b51bcb12d", "projectName": "gephi.gephi", "bugType": "Change Numeric Literal", "problem": "         assertEquals(inDegree3, 1.0);\r\n         assertEquals(degree1, 2.0);\r\n         assertEquals(outDegree5, 1.0);\r\n        assertEquals(avDegree, 2.0);\r\n     }\r\n     @Test\r", "fixed": "         assertEquals(inDegree3, 1.0);\r\n         assertEquals(degree1, 2.0);\r\n         assertEquals(outDegree5, 1.0);\r\n        assertEquals(avDegree, 1.0);\r\n     }\r\n     @Test\r", "sourceBeforeFix": "assertEquals(avDegree,2.0)", "sourceAfterFix": "assertEquals(avDegree,1.0)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "00617d3c125c64c8f7b4e7550bad32f1678bd061", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\ttaskDefinition.setStarted(false);\n\t\t\tsaveTask(taskDefinition);\n \t\t}\n \t}", "fixed": " \t\t\ttaskDefinition.setStarted(false);\n\t\t\tsaveTaskDefinition(taskDefinition);\n \t\t}\n \t}", "sourceBeforeFix": "saveTask(taskDefinition)", "sourceAfterFix": "saveTaskDefinition(taskDefinition)"}
{"fixCommitSHA1": "0095d1d5839085cb2d299a0956a22e7b2958688f", "projectName": "facebook.presto", "bugType": "Change Binary Operator", "problem": "         public boolean process()\n         {\n             int positionCount = page.getPositionCount();\n            checkState(lastPosition < positionCount, \"position count out of bound\");\n             checkState(!finished);", "fixed": "         public boolean process()\n         {\n             int positionCount = page.getPositionCount();\n            checkState(lastPosition <= positionCount, \"position count out of bound\");\n             checkState(!finished);", "sourceBeforeFix": "lastPosition < positionCount", "sourceAfterFix": "lastPosition <= positionCount"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void mouseClick() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection && !customSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "fixed": "     }\n     @Override\n    public synchronized void mouseClick() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection && !customSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\trpcEndpoint.start();\n\t\t\tCompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\t\trpcService.stopService();", "fixed": " \t\t\trpcEndpoint.start();\n\t\t\tCompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\t\trpcService.stopService();", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "8659914038f88e67dc9bd80c4e0c57bb341e07c0", "projectName": "perwendel.spark", "bugType": "Change Modifier", "problem": "     \n    public void internalServerError(Route route) {\n         CustomErrorPages.add(500, route);\n     }", "fixed": "     \n    public synchronized void internalServerError(Route route) {\n         CustomErrorPages.add(500, route);\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffsetEXT(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "fixed": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffset(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "sourceBeforeFix": "GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)", "sourceAfterFix": "GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "0d3c78b6f28fb3cad00c12605209c524702adb0a", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;", "fixed": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "003f97168c87fc350b6ea63405dbe98885a102bc", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "     private void cleanup() {\n         if (decoder != null) {\n             if (decoder.finish()) {\n                 for (;;) {\n                    ByteBuf buf = decoder.readOutbound();\n                     if (buf == null) {\n                         break;\n                     }", "fixed": "     private void cleanup() {\n         if (decoder != null) {\n             if (decoder.finish()) {\n                 for (;;) {\n                    ByteBuf buf = decoder.readInbound();\n                     if (buf == null) {\n                         break;\n                     }", "sourceBeforeFix": "decoder.readOutbound()", "sourceAfterFix": "decoder.readInbound()"}
{"fixCommitSHA1": "1779a3cb8963c0fafbb61fbf8c0d61313166697f", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "     @RequestMapping(value = \"/member\", method = RequestMethod.POST)\n     @ResponseBody\n     public Map<String, String> insertUserGroupMember(@RequestBody UserGroupMember userGroupMember) {\n        if (StringUtils.isEmpty(userGroupMember.getMemberId()) || StringUtils.isEmpty(userGroupMember.getMemberId())) {\n             Map<String, String> result = new HashMap<>();\n             result.put(\"errorCode\", \"500\");\n             result.put(\"errorMessage\", \"there is not userGroupId or memberId in params to insert user group member\");", "fixed": "     @RequestMapping(value = \"/member\", method = RequestMethod.POST)\n     @ResponseBody\n     public Map<String, String> insertUserGroupMember(@RequestBody UserGroupMember userGroupMember) {\n        if (StringUtils.isEmpty(userGroupMember.getMemberId()) || StringUtils.isEmpty(userGroupMember.getUserGroupId())) {\n             Map<String, String> result = new HashMap<>();\n             result.put(\"errorCode\", \"500\");\n             result.put(\"errorMessage\", \"there is not userGroupId or memberId in params to insert user group member\");", "sourceBeforeFix": "userGroupMember.getMemberId()", "sourceAfterFix": "userGroupMember.getUserGroupId()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "f08db599028efb40590226e5feda39dc5e410a9e", "projectName": "wildfly.wildfly", "bugType": "Change Operand ", "problem": "         final String bundlePath = config.getBundlePath();\n         final File bundlesDir = new File(bundlePath);\n         if (!bundlesDir.isDirectory()) {\n            throw new IllegalStateException(\"Invalid modules directory: \" + modulesDir);\n         }\n         SecurityActions.setSystemProperty(SYSPROP_KEY_BUNDLE_PATH, bundlePath);", "fixed": "         final String bundlePath = config.getBundlePath();\n         final File bundlesDir = new File(bundlePath);\n         if (!bundlesDir.isDirectory()) {\n            throw new IllegalStateException(\"Invalid modules directory: \" + bundlesDir);\n         }\n         SecurityActions.setSystemProperty(SYSPROP_KEY_BUNDLE_PATH, bundlePath);", "sourceBeforeFix": "\"Invalid modules directory: \" + modulesDir", "sourceAfterFix": "\"Invalid modules directory: \" + bundlesDir"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCouchDbEndpointBuilder\n             extends\n                 AdvancedCouchDbEndpointConsumerBuilder, AdvancedCouchDbEndpointProducerBuilder {\n         default CouchDbEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCouchDbEndpointBuilder\n             extends\n                 AdvancedCouchDbEndpointConsumerBuilder, AdvancedCouchDbEndpointProducerBuilder {\n         default CouchDbEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d3df587543605323d2a3432e896ea49a81bc8306", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tif (currentLocalTransform != renderable.localTransform)\n \t\t\tset(u_localTrans, (currentLocalTransform = renderable.localTransform) == null ? idtMatrix : renderable.localTransform);\n \t\tif (currentModelTransform != renderable.modelTransform)\n\t\t\tset(u_modelTrans, (currentWorldTransform = renderable.modelTransform) == null ? idtMatrix : renderable.modelTransform);\n \t\tif (currentLocalTransform == null && currentModelTransform == null)\n \t\t\tsetWorldTransform(idtMatrix, false);\n \t\telse if (currentLocalTransform == null)", "fixed": " \t\tif (currentLocalTransform != renderable.localTransform)\n \t\t\tset(u_localTrans, (currentLocalTransform = renderable.localTransform) == null ? idtMatrix : renderable.localTransform);\n \t\tif (currentModelTransform != renderable.modelTransform)\n\t\t\tset(u_modelTrans, (currentModelTransform = renderable.modelTransform) == null ? idtMatrix : renderable.modelTransform);\n \t\tif (currentLocalTransform == null && currentModelTransform == null)\n \t\t\tsetWorldTransform(idtMatrix, false);\n \t\telse if (currentLocalTransform == null)", "sourceBeforeFix": "currentWorldTransform=renderable.modelTransform", "sourceAfterFix": "currentModelTransform=renderable.modelTransform"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.debug(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "fixed": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "sourceBeforeFix": "logger.debug(\"Received MyQ  JSON: {}\",dataString)", "sourceAfterFix": "logger.trace(\"Received MyQ  JSON: {}\",dataString)"}
{"fixCommitSHA1": "6618cef776cf1c9ce67ff8ee461412110ca5ada7", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\t\t\tqueryServiceAddressesFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<String> queryServiceAddresses, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.warn(\"Requesting paths for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tfor (String queryServiceAddress : queryServiceAddresses) {\n \t\t\t\t\t\t\t\tretrieveAndQueryMetrics(queryServiceAddress);", "fixed": " \t\t\t\tqueryServiceAddressesFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<String> queryServiceAddresses, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.debug(\"Requesting paths for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tfor (String queryServiceAddress : queryServiceAddresses) {\n \t\t\t\t\t\t\t\tretrieveAndQueryMetrics(queryServiceAddress);", "sourceBeforeFix": "LOG.warn(\"Exception while fetching metrics.\",e)", "sourceAfterFix": "LOG.debug(\"Exception while fetching metrics.\",e)"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic long getLong (String key) {\r\n \t\tNSNumber value = (NSNumber)nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return 0L;\r\n\t\treturn value.longValue();\r\n \t}\r\n \t@Override\r", "fixed": " \tpublic long getLong (String key) {\r\n \t\tNSNumber value = (NSNumber)nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return 0L;\r\n\t\treturn value.longLongValue();\r\n \t}\r\n \t@Override\r", "sourceBeforeFix": "NSNumber.numberWithLong(val)", "sourceAfterFix": "NSNumber.numberWithLongLong(val)"}
{"fixCommitSHA1": "c9046d9486f461df06dc49483571b6977f93a265", "projectName": "openmrs.openmrs-core", "bugType": "Less Specific If", "problem": " \t\t\t\t\t\tsetIdToUse = \"*\";\r\n \t\t\t\t\tif (setIdToUse != null) {\r\n \t\t\t\t\t\thelper(patientDrugOrderSets, setIdToUse, order);\r\n\t\t\t\t\t\tif (order.isCurrent())\r\n \t\t\t\t\t\t\thelper(currentDrugOrderSets, setIdToUse, order);\r\n \t\t\t\t\t\telse\r\n \t\t\t\t\t\t\thelper(completedDrugOrderSets, setIdToUse, order);\r", "fixed": " \t\t\t\t\t\tsetIdToUse = \"*\";\r\n \t\t\t\t\tif (setIdToUse != null) {\r\n \t\t\t\t\t\thelper(patientDrugOrderSets, setIdToUse, order);\r\n\t\t\t\t\t\tif (order.isCurrent() || order.isFuture())\r\n \t\t\t\t\t\t\thelper(currentDrugOrderSets, setIdToUse, order);\r\n \t\t\t\t\t\telse\r\n \t\t\t\t\t\t\thelper(completedDrugOrderSets, setIdToUse, order);\r", "sourceBeforeFix": "order.isCurrent()", "sourceAfterFix": "order.isCurrent() || order.isFuture()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fcda34896499d9f0c29ea5f000aee28854bdbfe2", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t\tfinal float b = vector.y - y;\r\n \t\tfinal float c = vector.z - z;\r\n\t\treturn (float)Math.sqrt(a * a + b * b + c * b);\r\n \t}\r\n \t/** Normalizes this vector to unit length\r", "fixed": " \t\tfinal float b = vector.y - y;\r\n \t\tfinal float c = vector.z - z;\r\n\t\treturn (float)Math.sqrt(a * a + b * b + c * c);\r\n \t}\r\n \t/** Normalizes this vector to unit length\r", "sourceBeforeFix": "c * b", "sourceAfterFix": "c * c"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CoAPEndpointBuilder\n             extends\n                 CoAPEndpointConsumerBuilder, CoAPEndpointProducerBuilder {\n         default AdvancedCoAPEndpointBuilder advanced() {", "fixed": "     \n    public interface CoAPEndpointBuilder\n             extends\n                 CoAPEndpointConsumerBuilder, CoAPEndpointProducerBuilder {\n         default AdvancedCoAPEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3b4ff661c53e36133d3d287908592029d97d66f1", "projectName": "jersey.jersey", "bugType": "Change Numeric Literal", "problem": "         @Path(\"timeout\")\n         public String getTimeout() {\n             try {\n                Thread.sleep(2000);\n             } catch (InterruptedException e) {\n                 e.printStackTrace();\n             }", "fixed": "         @Path(\"timeout\")\n         public String getTimeout() {\n             try {\n                Thread.sleep(5000);\n             } catch (InterruptedException e) {\n                 e.printStackTrace();\n             }", "sourceBeforeFix": "Thread.sleep(2000)", "sourceAfterFix": "Thread.sleep(5000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "100b094aeabeda76bb5d69e3e279727147e7443e", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n        instance2.getLifecycleService().terminate();\n         mapStore.awaitStores();\n     }", "fixed": "         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n        instance2.getLifecycleService().shutdown();\n         mapStore.awaitStores();\n     }", "sourceBeforeFix": "instance2.getLifecycleService().terminate()", "sourceAfterFix": "instance2.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " public class Label extends Widget {\r\n \tprivate LabelStyle style;\r\n \tprivate final TextBounds bounds = new TextBounds();\r\n\tprivate String text;\r\n \tprivate BitmapFontCache cache;\r\n \tprivate float prefWidth, prefHeight;\r\n \tprivate int labelAlign = Align.LEFT;\r", "fixed": " public class Label extends Widget {\r\n \tprivate LabelStyle style;\r\n \tprivate final TextBounds bounds = new TextBounds();\r\n\tprivate CharSequence text;\r\n \tprivate BitmapFontCache cache;\r\n \tprivate float prefWidth, prefHeight;\r\n \tprivate int labelAlign = Align.LEFT;\r", "sourceBeforeFix": "String text", "sourceAfterFix": "CharSequence text"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DirectVmEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDirectVmEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DirectVmEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDirectVmEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "01d18f2c3db799d144cc8e3308da3fb2ade19417", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     private final Condition delegate;\n     @SuppressWarnings(\"unused\")\n    private final Object strongReference;\n    WeakSafeCondition(Condition delegate, Object strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }", "fixed": "     private final Condition delegate;\n     @SuppressWarnings(\"unused\")\n    private final WeakSafeReadWriteLock strongReference;\n    WeakSafeCondition(Condition delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }", "sourceBeforeFix": "@SuppressWarnings(\"unused\") private final Object strongReference; ", "sourceAfterFix": "@SuppressWarnings(\"unused\") private final WeakSafeReadWriteLock strongReference; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwitterTimelineEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterTimelineEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface TwitterTimelineEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterTimelineEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDataSetEndpointBuilder\n             extends\n                 AdvancedDataSetEndpointConsumerBuilder, AdvancedDataSetEndpointProducerBuilder {\n         default DataSetEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDataSetEndpointBuilder\n             extends\n                 AdvancedDataSetEndpointConsumerBuilder, AdvancedDataSetEndpointProducerBuilder {\n         default DataSetEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Advanced builder for endpoint for the Azure Storage Blob Service\n      * component.\n      */\n    public static interface AdvancedBlobServiceEndpointBuilder\n             extends\n                 AdvancedBlobServiceEndpointConsumerBuilder, AdvancedBlobServiceEndpointProducerBuilder {\n         default BlobServiceEndpointBuilder basic() {", "fixed": "      * Advanced builder for endpoint for the Azure Storage Blob Service\n      * component.\n      */\n    public interface AdvancedBlobServiceEndpointBuilder\n             extends\n                 AdvancedBlobServiceEndpointConsumerBuilder, AdvancedBlobServiceEndpointProducerBuilder {\n         default BlobServiceEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BlobServiceEndpointBuilder\n             extends\n                 BlobServiceEndpointConsumerBuilder, BlobServiceEndpointProducerBuilder {\n         default AdvancedBlobServiceEndpointBuilder advanced() {", "fixed": "     \n    public interface BlobServiceEndpointBuilder\n             extends\n                 BlobServiceEndpointConsumerBuilder, BlobServiceEndpointProducerBuilder {\n         default AdvancedBlobServiceEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                         flags.add(Flag.CANCELLED);\n                         response.get(OUTCOME).set(CANCELLED);\n                         response.get(FAILURE_DESCRIPTION).set(\"Operation cancelled\");\n                        response.set(ROLLED_BACK).set(true);\n                         return ResultAction.ROLLBACK;\n                     }\n                 }", "fixed": "                         flags.add(Flag.CANCELLED);\n                         response.get(OUTCOME).set(CANCELLED);\n                         response.get(FAILURE_DESCRIPTION).set(\"Operation cancelled\");\n                        response.get(ROLLED_BACK).set(true);\n                         return ResultAction.ROLLBACK;\n                     }\n                 }", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean touchDown (int screenX, int screenY, int pointer, int button) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].touchDown(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean touchDown (int screenX, int screenY, int pointer, int button) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).touchDown(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}", "fixed": " \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
