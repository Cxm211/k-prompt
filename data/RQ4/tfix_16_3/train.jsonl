{"id": "/data/all/data/kort/kort", "bugType": "no-undef", "problem": "\t},\n\tcreateIcon: function () {\n\t\tvar div = document.createElement('div'),\n\t\t    options = this.options;", "fixed": "\t},\n\tcreateIcon: function (oldIcon) {\n\t\tvar div = (oldIcon && oldIcon.tagName === 'DIV') ? oldIcon : document.createElement('div'),\n\t\t    options = this.options;", "message": "Undefined variable."}
{"id": "/data/all/data/nasa-gibs/worldview", "bugType": "no-undef", "problem": "            var pruned = [];\n            _.each( self.data.events, function( event ) {\n                ", "fixed": "            var pruned = [];\n            _.each( model.data.events, function( event ) {\n                ", "message": "Undefined variable."}
{"id": "/data/all/data/TheSench/SIMSpellstone", "bugType": "no-undef", "problem": "        \n        var attr = document.createAttribute(\"data-id\");\n        attr.value = card.id;\n        htmlCard.attributes.setNamedItem(attr);\n        ", "fixed": "        \n        htmlCard.setAttribute(\"data-id\", card.id);\n        ", "message": "Undefined variable."}
{"id": "/data/all/data/zaggino/z-schema", "bugType": "guard-for-in", "problem": "            delete schema.__$refResolved;\n            for (var key in from) {\n                to[key] = from[key];\n            }\n        }", "fixed": "            delete schema.__$refResolved;\n            for (key in from) {\n                if (from.hasOwnProperty(key)) {\n                    to[key] = from[key];\n                }", "message": "The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype."}
{"id": "/data/all/data/CodeDotJS/instavim", "bugType": "no-process-exit", "problem": "\tspinner.stop();\n\tprocess.exit(1);\n};", "fixed": "\tspinner.stop();\n\tend(1);\n};", "message": "Don't use process.exit(); throw an error instead."}
{"id": "/data/all/data/segmentio/facade", "bugType": "comma-style", "problem": "  , isEnabled = component('./is-enabled')\n  , objCase   = component('obj-case')\n  , uaParser  = component('ua-parser-js');\nmodule.exports = Facade;", "fixed": "  , isEnabled = component('./is-enabled')\n  , objCase   = component('obj-case');\nmodule.exports = Facade;", "message": "',' should be placed last."}
{"id": "/data/all/data/oskariorg/oskari-frontend", "bugType": "no-debugger", "problem": "        _createControlAdapter: function (el) {\n            debugger;\n            ", "fixed": "        _createControlAdapter: function (el) {\n            ", "message": "Unexpected 'debugger' statement."}
{"id": "/data/all/data/DeuxHuitHuit/algolia-webcrawler", "bugType": "no-extra-boolean-cast", "problem": "\t\t\t\t\t\t\trecord[key] = trim(content($, selector));\n\t\t\t\t\t\t\tif (!!config.formatters[key]) {\n\t\t\t\t\t\t\t\tif (!_.isArray(config.formatters[key])) {", "fixed": "\t\t\t\t\t\t\trecord[key] = trim(content($, selector));\n\t\t\t\t\t\t\tif (!!record[key] && !!config.formatters[key]) {\n\t\t\t\t\t\t\t\tif (!_.isArray(config.formatters[key])) {", "message": "Redundant double negation."}
{"id": "/data/all/data/toaarnio/webcl-firefox", "bugType": "no-unsafe-negation", "problem": "{\n  if (!this instanceof Image) return new Image ();\n  MemoryObject.apply(this);", "fixed": "{\n  if (!(this instanceof Image)) return new Image ();\n  MemoryObject.apply(this);", "message": "Unexpected negating the left operand of 'instanceof' operator."}
{"id": "/data/all/data/CleverStack/cleverstack-cli", "bugType": "comma-style", "problem": "  , async   = require( 'async' )\n  , spawn   = require( 'child_process' ).spawn\n  , exec    = require( 'child_process' ).exec\n  , fs      = Promise.promisifyAll( require( 'fs' ) )", "fixed": "  , async   = require( 'async' )\n  , exec    = require( 'child_process' ).exec\n  , fs      = Promise.promisifyAll( require( 'fs' ) )", "message": "',' should be placed last."}
{"id": "/data/all/data/scaphold-io/react-apollo-starter-kit", "bugType": "no-debugger", "problem": "        if (!data.errors) {\n          debugger;\n          localStorage.setItem('token', data.createUser.token);", "fixed": "        if (!data.errors) {\n          localStorage.setItem('token', data.createUser.token);", "message": "Unexpected 'debugger' statement."}
{"id": "/data/all/data/JasonPuglisi/descent", "bugType": "guard-for-in", "problem": "  \n  for (let i in colors) {\n    ", "fixed": "  \n  for (let i = 0; i < colors.length; i++) {\n    ", "message": "The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype."}
{"id": "/data/all/data/sveltejs/svelte", "bugType": "no-unused-vars", "problem": "import { SvelteComponent as SvelteComponent_1, append, createElement, createText, detachNode, init, insert, noop, safe_not_equal } from \"svelte/internal\";\nfunction create_fragment($$, ctx) {\n\tvar b, text_value = get_answer(), text;", "fixed": "import { SvelteComponent as SvelteComponent_1, append, createElement, createText, detachNode, init, insert, noop, safe_not_equal } from \"svelte/internal\";\nfunction create_fragment(ctx) {\n\tvar b, text_value = get_answer(), text;", "message": "Unused variable."}
{"id": "/data/all/data/openplannerteam/planner.js", "bugType": "no-console", "problem": "      if (!elem) {\n        console.warn(\"Wut\");\n        return;", "fixed": "      if (!elem) {\n        return;", "message": "Unexpected console statement."}
{"id": "/data/all/data/artwells/meteor-queue", "bugType": "no-redeclare", "problem": "Queue.purgeOldLocks = function (before) {\n  if(typeof before === \"undefined\" || before === null){\n    var before = new Date();\n    before.setMinutes(before.getMinutes() - Queue.lockLife);", "fixed": "Queue.purgeOldLocks = function (before) {\n  if (typeof before === \"undefined\" || before === null) {\n    before = new Date();\n    before.setMinutes(before.getMinutes() - Queue.lockLife);", "message": "Redeclaring variable."}
{"id": "/data/all/data/laurent22/joplin", "bugType": "no-inner-declarations", "problem": "\t\t\tfunction selection_mouseMove(event) {\n\t\t\t\tif (!isDragging) return;", "fixed": "\t\t\tconst selection_mouseMove = function(event) {\n\t\t\t\tif (!isDragging) return;", "message": "Move function declaration to function body root."}
