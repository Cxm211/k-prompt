{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "69170f58df0250e43066e4b56e038fced05f2268", "projectName": "alibaba.canal", "bugType": "Change Numeric Literal", "problem": "private int                dumpErrorCount                    = 0;\nprivate int                dumpErrorCountThreshold           = 3;\n     protected ErosaConnection buildErosaConnection() {\n         return buildMysqlConnection(this.runningInfo);", "fixed": "private int                dumpErrorCount                    = 0;\nprivate int                dumpErrorCountThreshold           = 2;\n     protected ErosaConnection buildErosaConnection() {\n         return buildMysqlConnection(this.runningInfo);", "sourceBeforeFix": "dumpErrorCountThreshold=3", "sourceAfterFix": "dumpErrorCountThreshold=2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "a207330fb2009b7e9b273d9a0b18518c9da7eea6", "projectName": "hazelcast.hazelcast", "bugType": "Delete Throws Exception", "problem": "         Collection values = map.values(new SqlPredicate(\"active\"));\n        assertEquals(activeEmployees, values.size());\n         assertOpenEventually(latch);", "fixed": "         Collection values = map.values(new SqlPredicate(\"active\"));\n        assertEquals(String.format(\"Expected %s results but got %s. Number of evicted entries: %s.\",\n                activeEmployees, values.size(), allEmployees - latch.getCount()),\n                activeEmployees, values.size());\n         assertOpenEventually(latch);", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
