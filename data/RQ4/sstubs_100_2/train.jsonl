{"fixCommitSHA1": "4d3362aa0a967882f43185cbee3ec82339106f6e", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                         from(\"direct:joinBrothers\").aggregator(header(TYPE_HEADER),\n                                 brothersAggregator);\n                agg.setBatchTimeout(1000L);\n                 agg.removeHeader(SURNAME_HEADER)\n                         .removeHeader(TYPE_HEADER)\n                         .to(\"mock:result\");", "fixed": "                         from(\"direct:joinBrothers\").aggregator(header(TYPE_HEADER),\n                                 brothersAggregator);\n                agg.setBatchTimeout(2000L);\n                 agg.removeHeader(SURNAME_HEADER)\n                         .removeHeader(TYPE_HEADER)\n                         .to(\"mock:result\");", "sourceBeforeFix": "agg.setBatchTimeout(1000L)", "sourceAfterFix": "agg.setBatchTimeout(2000L)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMongoDbEndpointBuilder\n             extends\n                 AdvancedMongoDbEndpointConsumerBuilder, AdvancedMongoDbEndpointProducerBuilder {\n         default MongoDbEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMongoDbEndpointBuilder\n             extends\n                 AdvancedMongoDbEndpointConsumerBuilder, AdvancedMongoDbEndpointProducerBuilder {\n         default MongoDbEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "sourceBeforeFix": "result.expectedMessageCount(3)", "sourceAfterFix": "result.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9d87dbad9f0c649c8244586cfea3ca25731da893", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       traverseBranch(root, null);\n       popScope();\n    } catch (Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }", "fixed": "       traverseBranch(root, null);\n       popScope();\n    } catch (Error | Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }", "sourceBeforeFix": "Exception unexpectedException", "sourceAfterFix": "Throwable unexpectedException"}
{"fixCommitSHA1": "ff34b04700d0417df1049e4d749fdf430076965b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         }\n     }\n    private static boolean shouldAppendSpace(StringBuffer text, char firstCharToAppend) {\n         final boolean result;\n         if (text.length() == 0) {", "fixed": "         }\n     }\n    private static boolean shouldAppendSpace(StringBuilder text, char firstCharToAppend) {\n         final boolean result;\n         if (text.length() == 0) {", "sourceBeforeFix": "StringBuffer text", "sourceAfterFix": "StringBuilder text"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "fixed": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "sourceBeforeFix": "id=15806", "sourceAfterFix": "id=10806"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomixValueEndpointBuilder\n             extends\n                 AdvancedAtomixValueEndpointConsumerBuilder, AdvancedAtomixValueEndpointProducerBuilder {\n         default AtomixValueEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomixValueEndpointBuilder\n             extends\n                 AdvancedAtomixValueEndpointConsumerBuilder, AdvancedAtomixValueEndpointProducerBuilder {\n         default AtomixValueEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "c78eb0d522e97cc00136b46e1188ba08a5ca9d9c", "projectName": "apache.storm", "bugType": "Change Modifier", "problem": "     public static final String HBASE_KEYTAB_FILE_KEY = \"hbase.keytab.file\";\n     public static final String HBASE_PRINCIPAL_KEY = \"hbase.kerberos.principal\";\n    private static UserProvider legacyProvider = null;\n     private HBaseSecurityUtil() {\n     }", "fixed": "     public static final String HBASE_KEYTAB_FILE_KEY = \"hbase.keytab.file\";\n     public static final String HBASE_PRINCIPAL_KEY = \"hbase.kerberos.principal\";\n    private static volatile UserProvider legacyProvider = null;\n     private HBaseSecurityUtil() {\n     }", "sourceBeforeFix": "10", "sourceAfterFix": "74"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "0e2a0eede5bf85f3c1f64e5752501eddf9ab7202", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     LONG_MANY_VALUES_STATS_SNAPSHOT = accumulator.snapshot();\n   }\n  static final List<Stats> ALL_STATS =\n       ImmutableList.of(\n           EMPTY_STATS_VARARGS,\n           EMPTY_STATS_ITERABLE,", "fixed": "     LONG_MANY_VALUES_STATS_SNAPSHOT = accumulator.snapshot();\n   }\n  static final ImmutableList<Stats> ALL_STATS =\n       ImmutableList.of(\n           EMPTY_STATS_VARARGS,\n           EMPTY_STATS_ITERABLE,", "sourceBeforeFix": "List<PairedStats>", "sourceAfterFix": "ImmutableList<PairedStats>"}
{"fixCommitSHA1": "e6faf188e28b2ee83d5715d28c9a047301ff9a4b", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     }\n     @SuppressWarnings(\"unused\")\n    public class TestBean extends AutomaticBean {\n         private String privateField;", "fixed": "     }\n     @SuppressWarnings(\"unused\")\n    public static class TestBean extends AutomaticBean {\n         private String privateField;", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tlog.info(\"onShutdown Stopping thread: \" + thread.getName());\r\n \t\t\t\t\tthread.stop();\r\n \t\t\t\t}\r\n\t\t\t\tcatch (Throwable ex) {\r\n \t\t\t\t\tlog.error(ex.getMessage(), ex);\r\n \t\t\t\t}\r\n \t\t\t}\r", "fixed": " \t\t\t\t\tlog.info(\"onShutdown Stopping thread: \" + thread.getName());\r\n \t\t\t\t\tthread.stop();\r\n \t\t\t\t}\r\n\t\t\t\tcatch (Exception ex) {\r\n \t\t\t\t\tlog.error(ex.getMessage(), ex);\r\n \t\t\t\t}\r\n \t\t\t}\r", "sourceBeforeFix": "Throwable ex", "sourceAfterFix": "Exception ex"}
{"fixCommitSHA1": "22d5241b5f75631e9cfda82a6912a2555eecb165", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         }\n         if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.info(\"Building gRPC server on \" + configuration.getHost() + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));\n         } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.info(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forPort(configuration.getPort());\n         } else {\n             throw new IllegalArgumentException(\"No server start properties (host, port) specified\");", "fixed": "         }\n         if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.debug(\"Building gRPC server on \" + configuration.getHost() + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));\n         } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.debug(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forPort(configuration.getPort());\n         } else {\n             throw new IllegalArgumentException(\"No server start properties (host, port) specified\");", "sourceBeforeFix": "LOG.trace(\"Terminating gRPC server\")", "sourceAfterFix": "LOG.debug(\"Terminating gRPC server\")"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         }\n     }\n    private void checkFile(String filename) throws Exception {\n         final FileText text = new FileText(new File(filename),\n                            System.getProperty(\"file.encoding\", \"UTF-8\"));\n         final FileContents contents = new FileContents(text);", "fixed": "         }\n     }\n    private static void checkFile(String filename) throws Exception {\n         final FileText text = new FileText(new File(filename),\n                            System.getProperty(\"file.encoding\", \"UTF-8\"));\n         final FileContents contents = new FileContents(text);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "93ec35952feb5bdcd58a7ac6ad0f07307ed0d367", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                 prop.getField().getJavaDoc().setFullText(option.getDescription());\n             }\n             if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getType())) {\n                     prop.getField().setStringInitializer(option.getDefaultValue());\n                 } else if (\"long\".equals(option.getJavaType()) || \"java.lang.Long\".equals(option.getJavaType())) {", "fixed": "                 prop.getField().getJavaDoc().setFullText(option.getDescription());\n             }\n             if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getJavaType())) {\n                     prop.getField().setStringInitializer(option.getDefaultValue());\n                 } else if (\"long\".equals(option.getJavaType()) || \"java.lang.Long\".equals(option.getJavaType())) {", "sourceBeforeFix": "option.getType()", "sourceAfterFix": "option.getJavaType()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "26f1133593498a87216f0dd4954ff7c07313b740", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    * Expects the JS to generate one bad-read error.\n    */\n   private void assertRedeclare(String js) {\n    testWarning(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n   /**", "fixed": "    * Expects the JS to generate one bad-read error.\n    */\n   private void assertRedeclare(String js) {\n    testError(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n   /**", "sourceBeforeFix": "testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)", "sourceAfterFix": "testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),args.rest())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedNsqEndpointBuilder\n             extends\n                 AdvancedNsqEndpointConsumerBuilder, AdvancedNsqEndpointProducerBuilder {\n         default NsqEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedNsqEndpointBuilder\n             extends\n                 AdvancedNsqEndpointConsumerBuilder, AdvancedNsqEndpointProducerBuilder {\n         default NsqEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result2\");\n        mock.expectedBodiesReceived(\"Hello World 2\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result2\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World 2\",\"Hello World 4\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\",\"Hello World 4\")"}
{"fixCommitSHA1": "7d7b17cc1b52caca38aa270cc67b97d8c08358c0", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                     .end()\n                     .to(\"mock:result\");\n                from(\"direct:a\").delay(500).to(\"mock:A\").setBody(constant(\"A\"));\n                 from(\"direct:b\").to(\"mock:B\").setBody(constant(\"B\"));", "fixed": "                     .end()\n                     .to(\"mock:result\");\n                from(\"direct:a\").delay(1000).to(\"mock:A\").setBody(constant(\"A\"));\n                 from(\"direct:b\").to(\"mock:B\").setBody(constant(\"B\"));", "sourceBeforeFix": "from(\"direct:a\").delay(500)", "sourceAfterFix": "from(\"direct:a\").delay(1000)"}
{"fixCommitSHA1": "dbc0ca8d1cb03f2da2c8fc0062e5d4b681fef11a", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "         final DummyOperation operation = new DummyOperation(Operation.GENERIC_PARTITION_ID);\n         Data data = serializationService.toData(operation);\n        final Packet packet = new Packet(data, operation.getPartitionId(), serializationService.getPortableContext());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);", "fixed": "         final DummyOperation operation = new DummyOperation(Operation.GENERIC_PARTITION_ID);\n         Data data = serializationService.toData(operation);\n        final Packet packet = new Packet(data, operation.getPartitionId());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);", "sourceBeforeFix": "new Packet(data,0,serializationService.getPortableContext())", "sourceAfterFix": "new Packet(data,0)"}
{"fixCommitSHA1": "287327fefa4c3393270a30a9ed3797752bb05b54", "projectName": "hazelcast.hazelcast", "bugType": "Change Boolean Literal", "problem": " public class ClearOperation extends AbstractMapOperation implements BackupAwareOperation, PartitionAwareOperation {\n    boolean shouldBackup = false;\n     public ClearOperation() {\n     }", "fixed": " public class ClearOperation extends AbstractMapOperation implements BackupAwareOperation, PartitionAwareOperation {\n    boolean shouldBackup = true;\n     public ClearOperation() {\n     }", "sourceBeforeFix": "shouldBackup=false", "sourceAfterFix": "shouldBackup=true"}
{"fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "         }\n     );\n    log.info(\"Performing lookup: %s --> %s\", ips, retVal);\n     return retVal;\n   }", "fixed": "         }\n     );\n    log.debug(\"Performing lookup: %s --> %s\", ips, retVal);\n     return retVal;\n   }", "sourceBeforeFix": "log.info(\"Performing lookup: %s --> %s\",ips,retVal)", "sourceAfterFix": "log.debug(\"Performing lookup: %s --> %s\",ips,retVal)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JcloudsEndpointBuilder\n             extends\n                 JcloudsEndpointConsumerBuilder, JcloudsEndpointProducerBuilder {\n         default AdvancedJcloudsEndpointBuilder advanced() {", "fixed": "     \n    public interface JcloudsEndpointBuilder\n             extends\n                 JcloudsEndpointConsumerBuilder, JcloudsEndpointProducerBuilder {\n         default AdvancedJcloudsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a7f54a539a4c8f92f4895934480061a2ccbcd499", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeThreadPoolElements(XMLElement element, ThreadPoolResourceDefinition pool, XMLExtendedStreamWriter writer, ModelNode container) throws XMLStreamException {", "fixed": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeThreadPoolElements(XMLElement element, ThreadPoolResourceDefinition pool, XMLExtendedStreamWriter writer, ModelNode container) throws XMLStreamException {", "sourceBeforeFix": "attribute.getDefinition().getAttributeMarshaller()", "sourceAfterFix": "attribute.getDefinition().getMarshaller()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "d83dd417fff4ae2407e04a21056f331a773d970b", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         private boolean fallback;\n        public SampleDataFormat(boolean fallback) {\n             this.fallback = fallback;\n         }", "fixed": "         private boolean fallback;\n        SampleDataFormat(boolean fallback) {\n             this.fallback = fallback;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "886096e8fc457546dd4071295b7c5cce2d722ecc", "projectName": "javaee-samples.javaee7-samples", "bugType": "Wrong Function Name", "problem": "                 MyManagedScheduledBatchBean.class,\n                 MyManagedScheduledBatchAlternative.class)\n             .addAsWebInfResource(\n                new StringAsset(beansXml.createAlternatives().clazz(\n                     MyManagedScheduledBatchAlternative.class.getName()).up().exportAsString()),\n                 beansXml.getDescriptorName())\n             .addAsResource(\"META-INF/batch-jobs/myJob.xml\");", "fixed": "                 MyManagedScheduledBatchBean.class,\n                 MyManagedScheduledBatchAlternative.class)\n             .addAsWebInfResource(\n                new StringAsset(beansXml.getOrCreateAlternatives().clazz(\n                     MyManagedScheduledBatchAlternative.class.getName()).up().exportAsString()),\n                 beansXml.getDescriptorName())\n             .addAsResource(\"META-INF/batch-jobs/myJob.xml\");", "sourceBeforeFix": "beansXml.createAlternatives()", "sourceAfterFix": "beansXml.getOrCreateAlternatives()"}
{"fixCommitSHA1": "9704f6049c41315c3de3fa6be6faf01e62c67863", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "     new HTable(conf, \".META.\");\n     int port = cluster.getMaster().getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"Master\");\n     port = cluster.getRegionThreads().get(0).getRegionServer().\n       getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"Region Server\");\n   }\n   private void assertHasExpectedContent(final URL u, final String expected)", "fixed": "     new HTable(conf, \".META.\");\n     int port = cluster.getMaster().getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"master\");\n     port = cluster.getRegionThreads().get(0).getRegionServer().\n       getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"regionserver\");\n   }\n   private void assertHasExpectedContent(final URL u, final String expected)", "sourceBeforeFix": "content.matches(expected)", "sourceAfterFix": "content.contains(expected)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "528e9c7b86b9ba432221ae3164e5faa09c55cef0", "projectName": "antlr.antlr4", "bugType": "Wrong Function Name", "problem": " \tpublic V get(ParseTree node) { return annotations.get(node); }\n \tpublic void put(ParseTree node, V value) { annotations.put(node, value); }\n\tpublic V removeFrom(ParseTree node) { return annotations.get(node); }\n }", "fixed": " \tpublic V get(ParseTree node) { return annotations.get(node); }\n \tpublic void put(ParseTree node, V value) { annotations.put(node, value); }\n\tpublic V removeFrom(ParseTree node) { return annotations.remove(node); }\n }", "sourceBeforeFix": "annotations.get(node)", "sourceAfterFix": "annotations.remove(node)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "3dfd27af41174f918e19e449e40f873689d539fa", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": " \tfinal Object lock = new Object();\n \tlong startTime = now();\n \tlong endTime = Long.MAX_VALUE;\n\ttransient T published = null;\n \tfinal List listOfSubCounters = new ArrayList();", "fixed": " \tfinal Object lock = new Object();\n \tlong startTime = now();\n \tlong endTime = Long.MAX_VALUE;\n\ttransient volatile T published = null;\n \tfinal List listOfSubCounters = new ArrayList();", "sourceBeforeFix": "128", "sourceAfterFix": "192"}
{"fixCommitSHA1": "97dc0ab1bd49e5d7644b91bc07c56d759aa84cfa", "projectName": "openmrs.openmrs-core", "bugType": "Change Binary Operator", "problem": " \t */\r\n \t@Override\r\n \tpublic String getDescription() {\r\n\t\tif (getConcept() != null || getConcept().getDescription() != null) {\r\n \t\t\treturn getConcept().getDescription().getDescription();\r\n \t\t}\r\n \t\treturn null;\r", "fixed": " \t */\r\n \t@Override\r\n \tpublic String getDescription() {\r\n\t\tif (getConcept() != null && getConcept().getDescription() != null) {\r\n \t\t\treturn getConcept().getDescription().getDescription();\r\n \t\t}\r\n \t\treturn null;\r", "sourceBeforeFix": "getConcept() != null || getConcept().getDescription() != null", "sourceAfterFix": "getConcept() != null && getConcept().getDescription() != null"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedOlingo2EndpointBuilder\n             extends\n                 AdvancedOlingo2EndpointConsumerBuilder, AdvancedOlingo2EndpointProducerBuilder {\n         default Olingo2EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedOlingo2EndpointBuilder\n             extends\n                 AdvancedOlingo2EndpointConsumerBuilder, AdvancedOlingo2EndpointProducerBuilder {\n         default Olingo2EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastSedaEndpointBuilder\n             extends\n                 AdvancedHazelcastSedaEndpointConsumerBuilder, AdvancedHazelcastSedaEndpointProducerBuilder {\n         default HazelcastSedaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastSedaEndpointBuilder\n             extends\n                 AdvancedHazelcastSedaEndpointConsumerBuilder, AdvancedHazelcastSedaEndpointProducerBuilder {\n         default HazelcastSedaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6b144252ba7a992878a09ce09c0b37b88efbb8bd", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         controller.setFilters(filters);\n         controller.addFilter(new ClusteredRouteFilters.IsAutoStartup());\n        if (ObjectHelper.isEmpty(configuration.getClusterService())) {\n             controller.setClusterService(configuration.getClusterService());\n         }", "fixed": "         controller.setFilters(filters);\n         controller.addFilter(new ClusteredRouteFilters.IsAutoStartup());\n        if (ObjectHelper.isNotEmpty(configuration.getClusterService())) {\n             controller.setClusterService(configuration.getClusterService());\n         }", "sourceBeforeFix": "ObjectHelper.isEmpty(configuration.getClusterService())", "sourceAfterFix": "ObjectHelper.isNotEmpty(configuration.getClusterService())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "2155f66a2a44fa9057bed99e91e8ccded7a006f4", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 entryListeners.put(name, new HashMap<Object, List<EntryListener<?, ?>>>());\n             }\n             if (!entryListeners.get(name).containsKey(key)) {\n                entryListeners.get(name).put(key, new ArrayList<EntryListener<?, ?>>());\n             }\n             entryListeners.get(name).get(key).add(entryListener);\n         }", "fixed": "                 entryListeners.put(name, new HashMap<Object, List<EntryListener<?, ?>>>());\n             }\n             if (!entryListeners.get(name).containsKey(key)) {\n                entryListeners.get(name).put(key, new CopyOnWriteArrayList<EntryListener<?, ?>>());\n             }\n             entryListeners.get(name).get(key).add(entryListener);\n         }", "sourceBeforeFix": "ArrayList<MessageListener<Object>>", "sourceAfterFix": "CopyOnWriteArrayList<MessageListener<Object>>"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "         assertNull(url.getUsername());\r\n         assertNull(url.getPassword());\r\n         assertNull(url.getHost());\r\n        assertEquals(12, url.getPort());\r\n         assertEquals(\"context/path\", url.getPath());\r\n         assertEquals(2, url.getParameters().size());\r\n         assertEquals(\"1.0.0\", url.getParameter(\"version\"));\r", "fixed": "         assertNull(url.getUsername());\r\n         assertNull(url.getPassword());\r\n         assertNull(url.getHost());\r\n        assertEquals(0, url.getPort());\r\n         assertEquals(\"context/path\", url.getPath());\r\n         assertEquals(2, url.getParameters().size());\r\n         assertEquals(\"1.0.0\", url.getParameter(\"version\"));\r", "sourceBeforeFix": "assertEquals(12,url.getPort())", "sourceAfterFix": "assertEquals(0,url.getPort())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ZendeskEndpointBuilder\n             extends\n                 ZendeskEndpointConsumerBuilder, ZendeskEndpointProducerBuilder {\n         default AdvancedZendeskEndpointBuilder advanced() {", "fixed": "     \n    public interface ZendeskEndpointBuilder\n             extends\n                 ZendeskEndpointConsumerBuilder, ZendeskEndpointProducerBuilder {\n         default AdvancedZendeskEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "00fd4ad499a5f2461226dd9696fdad0a5ddda398", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "             }\n             throw new NoSuchElementException(element.toString());\n         } else {\n            return delegate.getChild(element);\n         }\n     }", "fixed": "             }\n             throw new NoSuchElementException(element.toString());\n         } else {\n            return delegate.requireChild(element);\n         }\n     }", "sourceBeforeFix": "delegate.getChild(element)", "sourceAfterFix": "delegate.requireChild(element)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "1b93a2f8d9a40a28615c3acc0c6415d678e26466", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         failureCause.compareAndSet(null, toFailure(throwable));\n         boolean failed = queryState.setIf(FAILED, currentState -> !currentState.isDone());\n         if (failed) {\n            log.error(throwable, \"Query %s failed\", queryId);\n         }\n         else {\n             log.debug(throwable, \"Failure after query %s finished\", queryId);", "fixed": "         failureCause.compareAndSet(null, toFailure(throwable));\n         boolean failed = queryState.setIf(FAILED, currentState -> !currentState.isDone());\n         if (failed) {\n            log.debug(throwable, \"Query %s failed\", queryId);\n         }\n         else {\n             log.debug(throwable, \"Failure after query %s finished\", queryId);", "sourceBeforeFix": "log.error(throwable,\"Query %s failed\",queryId)", "sourceAfterFix": "log.debug(throwable,\"Query %s failed\",queryId)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtmosEndpointBuilder\n             extends\n                 AdvancedAtmosEndpointConsumerBuilder, AdvancedAtmosEndpointProducerBuilder {\n         default AtmosEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtmosEndpointBuilder\n             extends\n                 AdvancedAtmosEndpointConsumerBuilder, AdvancedAtmosEndpointProducerBuilder {\n         default AtmosEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "c2d5b41fb48cc2b913a2a04d2b68aa4369acac6a", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Sets parse tree.\n      * @param parseTree DetailAST parse tree.\n      */\n    final void setParseTree(DetailAST parseTree) {\n         pModel.setParseTree(parseTree);\n         final Object[] path = {pModel.getRoot()};", "fixed": "      * Sets parse tree.\n      * @param parseTree DetailAST parse tree.\n      */\n    protected final void setParseTree(DetailAST parseTree) {\n         pModel.setParseTree(parseTree);\n         final Object[] path = {pModel.getRoot()};", "sourceBeforeFix": "16", "sourceAfterFix": "20"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "7692923b6fe8b8ef72ebd628e28fa1aeaf11861d", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "         @Override\n         public Broadcaster create() {\n            logger.info(\"Creating Object {}\", count.getAndIncrement());\n             return PoolableBroadcasterFactory.class.cast(config.getBroadcasterFactory()).createBroadcaster();\n         }", "fixed": "         @Override\n         public Broadcaster create() {\n            logger.trace(\"Creating Object {}\", count.getAndIncrement());\n             return PoolableBroadcasterFactory.class.cast(config.getBroadcasterFactory()).createBroadcaster();\n         }", "sourceBeforeFix": "logger.info(\"Creating Object {}\",count.getAndIncrement())", "sourceAfterFix": "logger.trace(\"Creating Object {}\",count.getAndIncrement())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "fixed": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2ecd6fd07c9c2bb437463cca31a7f18e525675f", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     }\n     @Override\n    protected BlockBuilder getBlock()\n     {\n         return blockBuilder;\n     }", "fixed": "     }\n     @Override\n    protected Block getBlock()\n     {\n         return blockBuilder;\n     }", "sourceBeforeFix": "@Override protected BlockBuilder getBlock(){   return blockBuilder; } ", "sourceAfterFix": "@Override protected Block getBlock(){   return blockBuilder; } "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     return CLIENT.user_getNumberOfFiles(folderPath);\n   }\n  public int user_mkdir(String path) \n       throws FileAlreadyExistException, InvalidPathException, TException {\n     return CLIENT.user_mkdir(path);\n   }", "fixed": "     return CLIENT.user_getNumberOfFiles(folderPath);\n   }\n  public synchronized int user_mkdir(String path) \n       throws FileAlreadyExistException, InvalidPathException, TException {\n     return CLIENT.user_mkdir(path);\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "bd1e046a1936703ac62a693a0e44fbb88398a927", "projectName": "dropwizard.dropwizard", "bugType": "Change Modifier", "problem": "     }\n     @VisibleForTesting\n    static void setLog(Logger newLog) {\n        log = newLog;\n     }\n }", "fixed": "     }\n     @VisibleForTesting\n    static synchronized void setLog(Logger newLog) {\n        log = newLog;\n     }\n }", "sourceBeforeFix": "8", "sourceAfterFix": "40"}
{"fixCommitSHA1": "cbf00f998d8bced87361e7a68cb3dcc3ed4b7350", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": " public class GroovyBackend implements Backend {\n    static GroovyBackend instance;\n     private final Set<Class> scripts = new HashSet<Class>();\n     private final SnippetGenerator snippetGenerator = new SnippetGenerator(new GroovySnippet());\n     private final ResourceLoader resourceLoader;", "fixed": " public class GroovyBackend implements Backend {\n    public static GroovyBackend instance;\n     private final Set<Class> scripts = new HashSet<Class>();\n     private final SnippetGenerator snippetGenerator = new SnippetGenerator(new GroovySnippet());\n     private final ResourceLoader resourceLoader;", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"fixCommitSHA1": "a4662237bc467310f0dc1c28aa621f84571225b1", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "     processEngineConfiguration.setClock(testClock);\n    testClock.setCurrentTime(new Date(0));\n     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"testRepetitionJobEvents\");\n     Job theJob = managementService.createJobQuery().processInstanceId(processInstance.getId()).singleResult();\n     assertNotNull(theJob);", "fixed": "     processEngineConfiguration.setClock(testClock);\n    testClock.setCurrentTime(new Date(1));\n     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"testRepetitionJobEvents\");\n     Job theJob = managementService.createJobQuery().processInstanceId(processInstance.getId()).singleResult();\n     assertNotNull(theJob);", "sourceBeforeFix": "new Date(0)", "sourceAfterFix": "new Date(1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "5f959c557973923b797770cac7e01032e89d63c9", "projectName": "spring-projects.spring-boot", "bugType": "Same Function More Args", "problem": " \t\t\tthrows Exception {\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(getSsl(ClientAuth.NEED, \"password\", \"src/test/resources/test.jks\"));\n \t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tthis.container.start();\n \t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());", "fixed": " \t\t\tthrows Exception {\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(getSsl(ClientAuth.NEED, \"password\", \"src/test/resources/test.jks\",\n\t\t\t\t\"src/test/resources/test.jks\"));\n \t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tthis.container.start();\n \t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());", "sourceBeforeFix": "getSsl(ClientAuth.NEED,\"password\",\"src/test/resources/test.jks\")", "sourceAfterFix": "getSsl(ClientAuth.NEED,\"password\",\"src/test/resources/test.jks\",\"src/test/resources/test.jks\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "720619e271e68d5848185c2a7e45175b18e98f90", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 }\n                 Exception lastFailureException = task.getStats().getLastFailureException();\n                if (lastFailureException instanceof SocketTimeoutException || lastFailureException instanceof UnknownHostException) {\n                     return GONE;\n                 }\n                if (lastFailureException instanceof ConnectException) {\n                     return UNRESPONSIVE;\n                 }", "fixed": "                 }\n                 Exception lastFailureException = task.getStats().getLastFailureException();\n                if (lastFailureException instanceof ConnectException) {\n                     return GONE;\n                 }\n                if (lastFailureException instanceof SocketTimeoutException) {\n                     return UNRESPONSIVE;\n                 }", "sourceBeforeFix": "lastFailureException instanceof ConnectException", "sourceAfterFix": "lastFailureException instanceof SocketTimeoutException"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "fixed": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.valueOf(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "fixed": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "e78398ed32106c1c71bc47a1d5058fe3c8e5b9dd", "projectName": "pxb1988.dex2jar", "bugType": "Change Identifier Used", "problem": "         Type t2 = LocalType.type(e2.op1.value);\r\n         if (t2 == null && e2.op1.value.vt == VT.ARRAY) {\r\n             Type t3 = detectArray((E2Expr) e2.op1.value);\r\n            if (t3 != null && t3.getSize() == Type.ARRAY) {\r\n                 Type t4 = Type.getType(t3.getDescriptor().substring(1));\r\n                 LocalType.type(e2, t4);\r\n                 return t4;\r", "fixed": "         Type t2 = LocalType.type(e2.op1.value);\r\n         if (t2 == null && e2.op1.value.vt == VT.ARRAY) {\r\n             Type t3 = detectArray((E2Expr) e2.op1.value);\r\n            if (t3 != null && t3.getSort() == Type.ARRAY) {\r\n                 Type t4 = Type.getType(t3.getDescriptor().substring(1));\r\n                 LocalType.type(e2, t4);\r\n                 return t4;\r", "sourceBeforeFix": "t3.getSize()", "sourceAfterFix": "t3.getSort()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixValueEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtomixValueEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AtomixValueEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtomixValueEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "aafd0373be686a3111cfbb0d487529c276772264", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "         public ClientResponse<InputStream> done(ClientResponse<InputStream> clientResponse)\n         {\n           long stopTimeNs = System.nanoTime();\n          long nodeTimeNs = stopTimeNs - responseStartTimeNs;\n           final long nodeTimeMs = TimeUnit.NANOSECONDS.toMillis(nodeTimeNs);\n           log.debug(\n               \"Completed queryId[%s] request to url[%s] with %,d bytes returned in %,d millis [%,f b/s].\",", "fixed": "         public ClientResponse<InputStream> done(ClientResponse<InputStream> clientResponse)\n         {\n           long stopTimeNs = System.nanoTime();\n          long nodeTimeNs = stopTimeNs - requestStartTimeNs;\n           final long nodeTimeMs = TimeUnit.NANOSECONDS.toMillis(nodeTimeNs);\n           log.debug(\n               \"Completed queryId[%s] request to url[%s] with %,d bytes returned in %,d millis [%,f b/s].\",", "sourceBeforeFix": "stopTimeNs - responseStartTimeNs", "sourceAfterFix": "stopTimeNs - requestStartTimeNs"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
