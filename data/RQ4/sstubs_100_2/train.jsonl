{"fixCommitSHA1": "9a3c1894123322a90e5d2e002d7ae417349bfeed", "projectName": "google.guice", "bugType": "Change Identifier Used", "problem": "   }\n   public void testRelatedTypeVariables() {\n    TypeResolver resolver = new TypeResolver(arrayListOfString);\n     assertEquals(String.class, resolver.getParameterTypes(echo).get(0));\n     assertEquals(String.class, resolver.getReturnType(echo));\n   }", "fixed": "   }\n   public void testRelatedTypeVariables() {\n    TypeResolver resolver = new TypeResolver(hasRelatedOfString);\n     assertEquals(String.class, resolver.getParameterTypes(echo).get(0));\n     assertEquals(String.class, resolver.getReturnType(echo));\n   }", "sourceBeforeFix": "new TypeResolver(arrayListOfString)", "sourceAfterFix": "new TypeResolver(hasRelatedOfString)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Builder for endpoint producers for the Kubernetes Replication Controller\n      * component.\n      */\n    public static interface KubernetesReplicationControllersEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesReplicationControllersEndpointProducerBuilder advanced() {", "fixed": "      * Builder for endpoint producers for the Kubernetes Replication Controller\n      * component.\n      */\n    public interface KubernetesReplicationControllersEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesReplicationControllersEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "4e5679100979b451b8ced187c19fa53f92536e6f", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     sClientMetrics = new ClientMetrics();\n     if (sExecutorService != null) {\n      sExecutorService.shutdown();\n     }\n     sExecutorService = Executors.newFixedThreadPool(\n         sTachyonConf.getInt(Constants.USER_BLOCK_WORKER_CLIENT_THREADS),", "fixed": "     sClientMetrics = new ClientMetrics();\n     if (sExecutorService != null) {\n      sExecutorService.shutdownNow();\n     }\n     sExecutorService = Executors.newFixedThreadPool(\n         sTachyonConf.getInt(Constants.USER_BLOCK_WORKER_CLIENT_THREADS),", "sourceBeforeFix": "sExecutorService.shutdown()", "sourceAfterFix": "sExecutorService.shutdownNow()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "65f815b3aaa4ca2aff782b35c1fa0d318f10387c", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String, U> e : handlers.entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.debug(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     handler = e.getValue();\n                    logger.debug(\"Mapped {} to {}\", t, e.getValue());\n                     break;\n                 }\n             }", "fixed": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String, U> e : handlers.entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.trace(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     handler = e.getValue();\n                    logger.trace(\"Mapped {} to {}\", t, e.getValue());\n                     break;\n                 }\n             }", "sourceBeforeFix": "logger.debug(\"Trying to map {} to {}\",t,path)", "sourceAfterFix": "logger.trace(\"Trying to map {} to {}\",t,path)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "619ff2bc073d1b8859c8c8e1fa351b7858529670", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                     @Override\n                     public AsyncIOWriter write(String data) throws IOException {\n                        response.write(data + END);\n                         return this;\n                     }", "fixed": "                     @Override\n                     public AsyncIOWriter write(String data) throws IOException {\n                        response.write(data + end);\n                         return this;\n                     }", "sourceBeforeFix": "END + \" End Message Interceptor\"", "sourceAfterFix": "end + \" End Message Interceptor\""}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n        return Double.valueOf(value.toString());\n     }\n }", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n        return Double.parseDouble(value.toString());\n     }\n }", "sourceBeforeFix": "Double.valueOf(value.toString())", "sourceAfterFix": "Double.parseDouble(value.toString())"}
{"fixCommitSHA1": "509beae1e2d9a01e952f9eaf0c4a88037076fc63", "projectName": "apache.hbase", "bugType": "Missing Throws Exception", "problem": "   }\n   @Override\n  public void openRegions(List<HRegionInfo> regions) {\n     LOG.info(\"Received request to open \" + regions.size() + \" region(s)\");\n     for (HRegionInfo region: regions) openRegion(region);\n   }", "fixed": "   }\n   @Override\n  public void openRegions(List<HRegionInfo> regions)\n  throws RegionServerStoppedException {\n     LOG.info(\"Received request to open \" + regions.size() + \" region(s)\");\n     for (HRegionInfo region: regions) openRegion(region);\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "         if (!inputFile.exists()) {\n             throw new FileNotFoundException(inputFile.getPath() + \" (No such file or directory)\");\n         }\n        final StringBuilder buf = new StringBuilder();\n         final FileInputStream stream = new FileInputStream(inputFile);\n         final Reader reader = new InputStreamReader(stream, decoder);\n         try {", "fixed": "         if (!inputFile.exists()) {\n             throw new FileNotFoundException(inputFile.getPath() + \" (No such file or directory)\");\n         }\n        final StringBuilder buf = new StringBuilder(1024);\n         final FileInputStream stream = new FileInputStream(inputFile);\n         final Reader reader = new InputStreamReader(stream, decoder);\n         try {", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "     private final Request request;\n     private final Response response;\n    public CacheHttpURLConnection(Response response) {\n       super(response.request().url().url());\n       this.request = response.request();\n       this.response = response;", "fixed": "     private final Request request;\n     private final Response response;\n    CacheHttpURLConnection(Response response) {\n       super(response.request().url().url());\n       this.request = response.request();\n       this.response = response;", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "34885ed03b47910ebad992504c0f1f6bc699b52f", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         }\n         else {\n            task.cancel();\n         }\n         return task;", "fixed": "         }\n         else {\n            task.abort();\n         }\n         return task;", "sourceBeforeFix": "task.cancel()", "sourceAfterFix": "task.abort()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NatsEndpointBuilder\n             extends\n                 NatsEndpointConsumerBuilder, NatsEndpointProducerBuilder {\n         default AdvancedNatsEndpointBuilder advanced() {", "fixed": "     \n    public interface NatsEndpointBuilder\n             extends\n                 NatsEndpointConsumerBuilder, NatsEndpointProducerBuilder {\n         default AdvancedNatsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);", "fixed": " \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Caller in Function Call", "problem": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "fixed": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,externsRoot)", "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,externsRoot)"}
{"fixCommitSHA1": "9b87c3358ccd2f6681f79d8da033c20f72197e6f", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         }\n     }\n    void incrementServiceUsage(ServiceReference<?> sr) {\n         AtomicLong serviceUsageCount = this.serviceReferenceUsageMap.get(sr);\n         if (serviceUsageCount != null) {\n             serviceUsageCount.incrementAndGet();", "fixed": "         }\n     }\n    private void incrementServiceUsage(ServiceReference<?> sr) {\n         AtomicLong serviceUsageCount = this.serviceReferenceUsageMap.get(sr);\n         if (serviceUsageCount != null) {\n             serviceUsageCount.incrementAndGet();", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "19dac46f389eff0af027d9d11176db6eec0cdbc3", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "         MBeanServerPlugin delegate = null;\n         final boolean readOnly = false;\n         try {\n            delegate = findDelegate(name);\n             if (delegate.shouldAuthorize()) {\n                 authorizeSensitiveOperation(CREATE_MBEAN, readOnly, true);\n             }", "fixed": "         MBeanServerPlugin delegate = null;\n         final boolean readOnly = false;\n         try {\n            delegate = findDelegateForNewObject(name);\n             if (delegate.shouldAuthorize()) {\n                 authorizeSensitiveOperation(CREATE_MBEAN, readOnly, true);\n             }", "sourceBeforeFix": "findDelegate(name)", "sourceAfterFix": "findDelegateForNewObject(name)"}
{"fixCommitSHA1": "dea7ef0e0aae5ba4aef9d104cd10af986be9fc53", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     static class ConstantReader extends Reader {\n         private char[] constant;\n        public ConstantReader(char[] constant) {\n             this.constant = constant;\n         }", "fixed": "     static class ConstantReader extends Reader {\n         private char[] constant;\n        ConstantReader(char[] constant) {\n             this.constant = constant;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d737cae77778780237425d41e24966ace83e0766", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   public BlockMeta(TempBlockMeta tempBlock) {\n     super(tempBlock.getBlockId(), tempBlock.getParentDir());\n    mBlockSize = new File(tempBlock.getCommitPath()).length();\n   }\n   @Override", "fixed": "   public BlockMeta(TempBlockMeta tempBlock) {\n     super(tempBlock.getBlockId(), tempBlock.getParentDir());\n    mBlockSize = new File(tempBlock.getPath()).length();\n   }\n   @Override", "sourceBeforeFix": "tempBlock.getCommitPath()", "sourceAfterFix": "tempBlock.getPath()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JpaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJpaEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface JpaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJpaEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tthrow new MandatoryModuleException(ex.getModuleId(), \"Got an error while starting a mandatory module: \"\r\n \t\t\t\t\t        + e.getMessage() + \". Check the server logs for more information\");\r\n \t\t\t\t}\r\n\t\t\t\tcatch (Throwable t2) {\r\n \t\t\t\t\tlog.warn(\"caught another error: \", t2);\r", "fixed": " \t\t\t\t\tthrow new MandatoryModuleException(ex.getModuleId(), \"Got an error while starting a mandatory module: \"\r\n \t\t\t\t\t        + e.getMessage() + \". Check the server logs for more information\");\r\n \t\t\t\t}\r\n\t\t\t\tcatch (Exception t2) {\r\n \t\t\t\t\tlog.warn(\"caught another error: \", t2);\r", "sourceBeforeFix": "Throwable t2", "sourceAfterFix": "Exception t2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3c8d3e908b01f47c69600a235fb7e5173f4f0d7b", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   \n  public final Iterable<ObjectType> getOwnImplementedInterfaces() {\n     return implementedInterfaces;\n   }", "fixed": "   }\n   \n  public final ImmutableList<ObjectType> getOwnImplementedInterfaces() {\n     return implementedInterfaces;\n   }", "sourceBeforeFix": "Iterable<ObjectType>", "sourceAfterFix": "ImmutableList<ObjectType>"}
{"fixCommitSHA1": "028700818ccf660a02586a19fc31399684cb1b2e", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "     public void testToInputStreamFileWithCharsetUTF8() throws Exception {\n         File file = new File(\"src/test/resources/org/apache/camel/converter/german.utf-8.txt\");\n         InputStream in = IOConverter.toInputStream(file, \"UTF-8\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n         BufferedReader naiveReader = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"UTF-8\"));\n         try {   \n             String line = reader.readLine();", "fixed": "     public void testToInputStreamFileWithCharsetUTF8() throws Exception {\n         File file = new File(\"src/test/resources/org/apache/camel/converter/german.utf-8.txt\");\n         InputStream in = IOConverter.toInputStream(file, \"UTF-8\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"));\n         BufferedReader naiveReader = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"UTF-8\"));\n         try {   \n             String line = reader.readLine();", "sourceBeforeFix": "new InputStreamReader(in)", "sourceAfterFix": "new InputStreamReader(in,\"UTF-8\")"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void compact(String tableOrRegionName, String columnFamily)\n     throws IOException,  InterruptedException {\n    compact(Bytes.toBytesBinary(tableOrRegionName), Bytes.toBytes(columnFamily));\n   }\n   /**", "fixed": "    */\n   public void compact(String tableOrRegionName, String columnFamily)\n     throws IOException,  InterruptedException {\n    compact(Bytes.toBytes(tableOrRegionName), Bytes.toBytes(columnFamily));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "0f8c0e4ff5f80aab6ab653c9aaa5a97812d2ec7c", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     \n    @Resource(name=\"java:comp/ds\")\n     private DataSource dataSource2;\n     @Resource(lookup = \"java:app/DataSource\")\n     private DataSource dataSource3;\n    @Resource(name=\"org.jboss.as.test.integration.ee.datasourcedefinition.DataSourceBean/dataSource3\")\n     private DataSource dataSource4;", "fixed": "     \n    @Resource(lookup=\"java:comp/ds\")\n     private DataSource dataSource2;\n     @Resource(lookup = \"java:app/DataSource\")\n     private DataSource dataSource3;\n    @Resource(lookup=\"org.jboss.as.test.integration.ee.datasourcedefinition.DataSourceBean/dataSource3\")\n     private DataSource dataSource4;", "sourceBeforeFix": "name=\"org.jboss.as.test.integration.ee.datasourcedefinition.DataSourceBean/dataSource3\"", "sourceAfterFix": "lookup=\"org.jboss.as.test.integration.ee.datasourcedefinition.DataSourceBean/dataSource3\""}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDrillEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DrillEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDrillEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DrillEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGuavaEventBusEndpointBuilder\n             extends\n                 AdvancedGuavaEventBusEndpointConsumerBuilder, AdvancedGuavaEventBusEndpointProducerBuilder {\n         default GuavaEventBusEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGuavaEventBusEndpointBuilder\n             extends\n                 AdvancedGuavaEventBusEndpointConsumerBuilder, AdvancedGuavaEventBusEndpointProducerBuilder {\n         default GuavaEventBusEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "         }\n     );\n    log.info(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n     return retVal;\n   }", "fixed": "         }\n     );\n    log.debug(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n     return retVal;\n   }", "sourceBeforeFix": "log.info(\"Performing lookup: %s --> %s\",ips,retVal)", "sourceAfterFix": "log.debug(\"Performing lookup: %s --> %s\",ips,retVal)"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "d2418b99ef96450104f978d8e50c7ca762235080", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate static class MockPrincipalServerWebExchangeDecorator\n \t\t\textends ServerWebExchangeDecorator {\n\t\tprotected MockPrincipalServerWebExchangeDecorator(ServerWebExchange delegate) {\n \t\t\tsuper(delegate);\n \t\t}", "fixed": " \tprivate static class MockPrincipalServerWebExchangeDecorator\n \t\t\textends ServerWebExchangeDecorator {\n\t\tMockPrincipalServerWebExchangeDecorator(ServerWebExchange delegate) {\n \t\t\tsuper(delegate);\n \t\t}", "sourceBeforeFix": "4", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "60ee9460a931ceecf9fee8412d2b1955607c5838", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         }\n         ChannelOperationHandler handler = (ChannelOperationHandler) handler();\n        if (handler instanceof ChannelInboundHandler) {\n             flushOutboundBridge();\n         }", "fixed": "         }\n         ChannelOperationHandler handler = (ChannelOperationHandler) handler();\n        if (handler instanceof ChannelOutboundHandler) {\n             flushOutboundBridge();\n         }", "sourceBeforeFix": "handler instanceof ChannelInboundHandler", "sourceAfterFix": "handler instanceof ChannelOutboundHandler"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d83dd417fff4ae2407e04a21056f331a773d970b", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         private boolean fallback;\n        public SampleComponent(boolean fallback) {\n             this.fallback = fallback;\n         }", "fixed": "         private boolean fallback;\n        SampleComponent(boolean fallback) {\n             this.fallback = fallback;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResponseClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSparkEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default SparkEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSparkEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default SparkEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e9ee050bc804e672e21576bed722942973e6c3fb", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testConnectionFactoryRef() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n         ConnectionFactory connectionFactoryMock = Mockito.mock(ConnectionFactory.class);\n        registry.put(\"connectionFactoryMock\", connectionFactoryMock);\n         CamelContext defaultContext = new DefaultCamelContext(registry);", "fixed": "     public void testConnectionFactoryRef() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n         ConnectionFactory connectionFactoryMock = Mockito.mock(ConnectionFactory.class);\n        registry.bind(\"connectionFactoryMock\", connectionFactoryMock);\n         CamelContext defaultContext = new DefaultCamelContext(registry);", "sourceBeforeFix": "registry.put(\"connectionFactoryMock\",connectionFactoryMock)", "sourceAfterFix": "registry.bind(\"connectionFactoryMock\",connectionFactoryMock)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "220a7265cb4eafdd5fc40895b5822715b4f4461f", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             final CacheWanEventPublisher publisher = service.getCacheWanEventPublisher();\n             final CacheEntryView<Data, Data> view = CacheEntryViews.createDefaultEntryView(\n                     key, toData(record.getValue()), record);\n            publisher.publishWanReplicationUpdate(name, view);\n         }\n     }", "fixed": "             final CacheWanEventPublisher publisher = service.getCacheWanEventPublisher();\n             final CacheEntryView<Data, Data> view = CacheEntryViews.createDefaultEntryView(\n                     key, toData(record.getValue()), record);\n            publisher.publishWanReplicationUpdateBackup(name, view);\n         }\n     }", "sourceBeforeFix": "publisher.publishWanReplicationUpdate(name,view)", "sourceAfterFix": "publisher.publishWanReplicationUpdateBackup(name,view)"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ChatScriptEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedChatScriptEndpointBuilder advanced() {", "fixed": "     \n    public interface ChatScriptEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedChatScriptEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "72f5dff8178df46a1e66114701dc9e9f30151fde", "projectName": "brianfrankcooper.YCSB", "bugType": "Change Numeric Literal", "problem": "     exporter.write(getName(), \"AverageLatency(us)\", totalHistogram.getMean());\n     exporter.write(getName(), \"MinLatency(us)\", totalHistogram.getMinValue());\n     exporter.write(getName(), \"MaxLatency(us)\", totalHistogram.getMaxValue());\n    exporter.write(getName(), \"95thPercentileLatency(us)\", totalHistogram.getValueAtPercentile(90));\n     exporter.write(getName(), \"99thPercentileLatency(us)\", totalHistogram.getValueAtPercentile(99));\n     exportReturnCodes(exporter);", "fixed": "     exporter.write(getName(), \"AverageLatency(us)\", totalHistogram.getMean());\n     exporter.write(getName(), \"MinLatency(us)\", totalHistogram.getMinValue());\n     exporter.write(getName(), \"MaxLatency(us)\", totalHistogram.getMaxValue());\n    exporter.write(getName(), \"95thPercentileLatency(us)\", totalHistogram.getValueAtPercentile(95));\n     exporter.write(getName(), \"99thPercentileLatency(us)\", totalHistogram.getValueAtPercentile(99));\n     exportReturnCodes(exporter);", "sourceBeforeFix": "totalHistogram.getValueAtPercentile(90)", "sourceAfterFix": "totalHistogram.getValueAtPercentile(95)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "             return this;\n         }\n        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }", "fixed": "             return this;\n         }\n        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }", "sourceBeforeFix": "public DerivedBuilder setProxyPort(int port){   this.proxyPort=port;   return this; } ", "sourceAfterFix": "public Builder setProxyPort(int port){   this.proxyPort=port;   return this; } "}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "df40e74265a3bdc4797efb30f49cd35733bde902", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t\t\tString atlasFilePath = map.getProperties().get(\"atlas\", String.class);\n \t\t\tif (atlasFilePath == null) {\n \t\t\t\tFileHandle atlasFile = tmxFile.sibling(tmxFile.nameWithoutExtension() + \".atlas\");\n\t\t\t\tif (atlasFile.exists()) atlasFilePath = atlasFile.path();\n \t\t\t}\n \t\t\tif (atlasFilePath == null) {\n \t\t\t\tthrow new GdxRuntimeException(\"The map is missing the 'atlas' property\");", "fixed": " \t\t\tString atlasFilePath = map.getProperties().get(\"atlas\", String.class);\n \t\t\tif (atlasFilePath == null) {\n \t\t\t\tFileHandle atlasFile = tmxFile.sibling(tmxFile.nameWithoutExtension() + \".atlas\");\n\t\t\t\tif (atlasFile.exists()) atlasFilePath = atlasFile.name();\n \t\t\t}\n \t\t\tif (atlasFilePath == null) {\n \t\t\t\tthrow new GdxRuntimeException(\"The map is missing the 'atlas' property\");", "sourceBeforeFix": "atlasFile.path()", "sourceAfterFix": "atlasFile.name()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\tif (OpenmrsUtil.compareWithNullAsLatest(patientState.getEndDate(), patientState.getStartDate()) < 0) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.endDateCannotBeBeforeStartDate\");\r\n \t\t\t\t\t\treturn;\r\n\t\t\t\t\t} else if (statesAndStartDates.contains(patientState.getState().getId() + \"\"\r\n \t\t\t\t\t        + patientState.getStartDate())) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.duplicatePatientStates\");\r", "fixed": " \t\t\t\t\tif (OpenmrsUtil.compareWithNullAsLatest(patientState.getEndDate(), patientState.getStartDate()) < 0) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.endDateCannotBeBeforeStartDate\");\r\n \t\t\t\t\t\treturn;\r\n\t\t\t\t\t} else if (statesAndStartDates.contains(patientState.getState().getUuid() + \"\"\r\n \t\t\t\t\t        + patientState.getStartDate())) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.duplicatePatientStates\");\r", "sourceBeforeFix": "patientState.getState().getId()", "sourceAfterFix": "patientState.getState().getUuid()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e8a74c8ad07bbf497026a6b8bde532cd61f79f17", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getPath() == null && c.getPath() != null) {\n             return -1;\n        } else if (c.getPath() == null) {\n             return 1;\n         }\n         v = getPath().compareTo(c.getPath());", "fixed": "         if (getPath() == null && c.getPath() != null) {\n             return -1;\n        } else if (c.getPath() == null && getPath() != null) {\n             return 1;\n         }\n         v = getPath().compareTo(c.getPath());", "sourceBeforeFix": "that.getPath() == null", "sourceAfterFix": "that.getPath() == null && getPath() != null"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCwEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default CwEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCwEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default CwEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0258fcc52329833429a7c745c610f3b8aaf57ce7", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         public FastStringCreator(Constructor<String> constructor) {\n             this.constructor = constructor;\n            this.useOldStringConstructor = constructor.getTypeParameters().length == 3;\n         }\n         @Override", "fixed": "         public FastStringCreator(Constructor<String> constructor) {\n             this.constructor = constructor;\n            this.useOldStringConstructor = constructor.getParameterTypes().length == 3;\n         }\n         @Override", "sourceBeforeFix": "constructor.getTypeParameters()", "sourceAfterFix": "constructor.getParameterTypes()"}
{"fixCommitSHA1": "fb707d86ec1fec06b2c43fd4fd7df38aea776053", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                 boolean skip = false;\n                 for (ParamValueMetaData prop : md.getContextParams()) {\n                     if (prop.getParamName().equals(ENABLE_PROPERTY)) {\n                        boolean explicitEnable = Boolean.parseBoolean(prop.getParamName());\n                         if(explicitEnable) {\n                             found = true;\n                         } else {", "fixed": "                 boolean skip = false;\n                 for (ParamValueMetaData prop : md.getContextParams()) {\n                     if (prop.getParamName().equals(ENABLE_PROPERTY)) {\n                        boolean explicitEnable = Boolean.parseBoolean(prop.getParamValue());\n                         if(explicitEnable) {\n                             found = true;\n                         } else {", "sourceBeforeFix": "prop.getParamName()", "sourceAfterFix": "prop.getParamValue()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DockerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDockerEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DockerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDockerEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "32942def7634511d8dd8fb5c5040e4168521bfb5", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "       } else {\n         Set<String> metricsSet = new HashSet<>();\n         for (TimelineObjectHolder<String, DataSegment> timelineObjectHolder : timeLineSegments) {\n          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions());\n         }\n         metricsList = Lists.newArrayList(metricsSet);\n       }", "fixed": "       } else {\n         Set<String> metricsSet = new HashSet<>();\n         for (TimelineObjectHolder<String, DataSegment> timelineObjectHolder : timeLineSegments) {\n          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics());\n         }\n         metricsList = Lists.newArrayList(metricsSet);\n       }", "sourceBeforeFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions()", "sourceAfterFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "64140b52a44ae7ea10721b22fe72c4eb32847a0e", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Numeric Literal", "problem": "         try {\nResponse response = c.prepareGet(\"http:\n             assertNotNull(response);\n            assertEquals(response.getStatusCode(), 301);\n         } finally {\n             c.close();\n         }", "fixed": "         try {\nResponse response = c.prepareGet(\"http:\n             assertNotNull(response);\n            assertEquals(response.getStatusCode(), 302);\n         } finally {\n             c.close();\n         }", "sourceBeforeFix": "assertEquals(response.getStatusCode(),301)", "sourceAfterFix": "assertEquals(response.getStatusCode(),302)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cd70b8db19db4a22136c8411fd0b72252b2f975a", "projectName": "AsyncHttpClient.async-http-client", "bugType": "More Specific If", "problem": "     public String getResponseBody(String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "fixed": "     public String getResponseBody(String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "sourceBeforeFix": "contentType != null", "sourceAfterFix": "contentType != null && charset == null"}
{"fixCommitSHA1": "9e6f96dbfc8bf1ae1ffbe0115f53f1de0fc86ffc", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "fixed": "             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "6efaa261a643a8ed1059b1adb4a6f902789a462e", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     }\n     @Override\n    public Map<String, List<ColumnStatisticsObj>> getPartitionColumnStatistics(String databaseName, String tableName, List<String> columnNames, List<String> partitionValues)\n             throws TException\n     {\n        PartitionsStatsRequest partitionsStatsRequest = new PartitionsStatsRequest(databaseName, tableName, columnNames, partitionValues);\n         return client.get_partitions_statistics_req(partitionsStatsRequest).getPartStats();\n     }", "fixed": "     }\n     @Override\n    public Map<String, List<ColumnStatisticsObj>> getPartitionColumnStatistics(String databaseName, String tableName, List<String> partitionNames, List<String> columnNames)\n             throws TException\n     {\n        PartitionsStatsRequest partitionsStatsRequest = new PartitionsStatsRequest(databaseName, tableName, columnNames, partitionNames);\n         return client.get_partitions_statistics_req(partitionsStatsRequest).getPartStats();\n     }", "sourceBeforeFix": "new PartitionsStatsRequest(databaseName,tableName,columnNames,partitionValues)", "sourceAfterFix": "new PartitionsStatsRequest(databaseName,tableName,columnNames,partitionNames)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e05622578fa2cb335f4beee3496758aea43ddd29", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         pausingLoader.awaitPause();\n         hz3.getLifecycleService().terminate();\n        assertClusterSize(2, nodes[0]);\n         pausingLoader.resume();", "fixed": "         pausingLoader.awaitPause();\n         hz3.getLifecycleService().terminate();\n        assertClusterSizeEventually(2, nodes[0]);\n         pausingLoader.resume();", "sourceBeforeFix": "assertClusterSize(2,nodes[0])", "sourceAfterFix": "assertClusterSizeEventually(2,nodes[0])"}
{"fixCommitSHA1": "aebe2ca06a3fb220c7211b174c85250f36afae25", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForNone\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForNone\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedRestletEndpointBuilder\n             extends\n                 AdvancedRestletEndpointConsumerBuilder, AdvancedRestletEndpointProducerBuilder {\n         default RestletEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedRestletEndpointBuilder\n             extends\n                 AdvancedRestletEndpointConsumerBuilder, AdvancedRestletEndpointProducerBuilder {\n         default RestletEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "03c25ca7060c0f072d22f27789e485eda732ea55", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         ZipOutputStream zos = new ZipOutputStream(stream);\n         zos.putNextEntry(new ZipEntry(filename));\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n         try {\n             IOHelper.copy(is, zos);", "fixed": "         ZipOutputStream zos = new ZipOutputStream(stream);\n         zos.putNextEntry(new ZipEntry(filename));\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n         try {\n             IOHelper.copy(is, zos);", "sourceBeforeFix": "exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,graph)", "sourceAfterFix": "exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,exchange,graph)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "a7ce2738959a8efc7ace2e5e467ea09a1e4b7755", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "     private void updateNodes(MemoryPoolAssignmentsRequest assignments)\n     {\n        ImmutableSet.Builder builder = new ImmutableSet.Builder();\n         Set<Node> aliveNodes = builder\n                 .addAll(nodeManager.getNodes(ACTIVE))\n                 .addAll(nodeManager.getNodes(SHUTTING_DOWN))", "fixed": "     private void updateNodes(MemoryPoolAssignmentsRequest assignments)\n     {\n        ImmutableSet.Builder<Node> builder = ImmutableSet.builder();\n         Set<Node> aliveNodes = builder\n                 .addAll(nodeManager.getNodes(ACTIVE))\n                 .addAll(nodeManager.getNodes(SHUTTING_DOWN))", "sourceBeforeFix": "2", "sourceAfterFix": "34"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MllpEndpointBuilder\n             extends\n                 MllpEndpointConsumerBuilder, MllpEndpointProducerBuilder {\n         default AdvancedMllpEndpointBuilder advanced() {", "fixed": "     \n    public interface MllpEndpointBuilder\n             extends\n                 MllpEndpointConsumerBuilder, MllpEndpointProducerBuilder {\n         default AdvancedMllpEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CxfRsEndpointBuilder\n             extends\n                 CxfRsEndpointConsumerBuilder, CxfRsEndpointProducerBuilder {\n         default AdvancedCxfRsEndpointBuilder advanced() {", "fixed": "     \n    public interface CxfRsEndpointBuilder\n             extends\n                 CxfRsEndpointConsumerBuilder, CxfRsEndpointProducerBuilder {\n         default AdvancedCxfRsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "    * User can override this method if there is a better way to perform bulk reverse lookup\n    */\n  Map<String, List<String>> unapplyAll(Iterable<String> values)\n   {\n     if (values == null) {\n       return Collections.emptyMap();", "fixed": "    * User can override this method if there is a better way to perform bulk reverse lookup\n    */\n  public Map<String, List<String>> unapplyAll(Iterable<String> values)\n   {\n     if (values == null) {\n       return Collections.emptyMap();", "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "     }\n     if (!isProperlyConfigured) {\n      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n     if (!isConnected()) {\n      logger.error(\"InfluxDB is not yet connected\");\n       return;\n     }", "fixed": "     }\n     if (!isProperlyConfigured) {\n      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n     if (!isConnected()) {\n      logger.warn(\"InfluxDB is not yet connected\");\n       return;\n     }", "sourceBeforeFix": "logger.error(\"InfluxDB is not yet connected\")", "sourceAfterFix": "logger.warn(\"InfluxDB is not yet connected\")"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testVarArgs1() {", "fixed": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testVarArgs1() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
