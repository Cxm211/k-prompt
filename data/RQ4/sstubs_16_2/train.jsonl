{"fixCommitSHA1": "6fb0428103ae6b75100a32aadffca730d663dbd5", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "   }\n   public final static long FIXED_OVERHEAD = ClassSize.align(\n      ClassSize.OBJECT + (11 * ClassSize.REFERENCE));\n   public final static long DEEP_OVERHEAD = ClassSize.align(FIXED_OVERHEAD +\n       ClassSize.REENTRANT_LOCK + ClassSize.ATOMIC_LONG +", "fixed": "   }\n   public final static long FIXED_OVERHEAD = ClassSize.align(\n      ClassSize.OBJECT + (12 * ClassSize.REFERENCE));\n   public final static long DEEP_OVERHEAD = ClassSize.align(FIXED_OVERHEAD +\n       ClassSize.REENTRANT_LOCK + ClassSize.ATOMIC_LONG +", "sourceBeforeFix": "11 * ClassSize.REFERENCE", "sourceAfterFix": "12 * ClassSize.REFERENCE"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResponseWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7388b4b76881e97b9e80396c847aae4f6f72c4f3", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \tpublic Mono<Health> health() {\n \t\treturn Flux.fromIterable(this.indicators.entrySet())\n \t\t\t\t.flatMap((entry) -> Mono.just(entry.getKey())\n\t\t\t\t\t\t.and(entry.getValue().health().compose(this.timeoutCompose)))\n \t\t\t\t.collectMap(Tuple2::getT1, Tuple2::getT2)\n \t\t\t\t.map(this.healthAggregator::aggregate);\n \t}", "fixed": " \tpublic Mono<Health> health() {\n \t\treturn Flux.fromIterable(this.indicators.entrySet())\n \t\t\t\t.flatMap((entry) -> Mono.just(entry.getKey())\n\t\t\t\t\t\t.zipWith(entry.getValue().health().compose(this.timeoutCompose)))\n \t\t\t\t.collectMap(Tuple2::getT1, Tuple2::getT2)\n \t\t\t\t.map(this.healthAggregator::aggregate);\n \t}", "sourceBeforeFix": "Mono.just(entry.getKey()).and(entry.getValue().health().compose(this.timeoutCompose))", "sourceAfterFix": "Mono.just(entry.getKey()).zipWith(entry.getValue().health().compose(this.timeoutCompose))"}
{"fixCommitSHA1": "c799126efce58248261e9c993680798d2ed3eeb1", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     String filePath = PathUtils.concatPath(homeDir, CSV_FILE_DIR);\n     writeCSVFile(defaultKeys, filePath);\n    filePath = PathUtils.concatPath(filePath, YML_FILE_DIR);\n     writeYMLFile(defaultKeys, filePath);\n   }\n }", "fixed": "     String filePath = PathUtils.concatPath(homeDir, CSV_FILE_DIR);\n     writeCSVFile(defaultKeys, filePath);\n    filePath = PathUtils.concatPath(homeDir, YML_FILE_DIR);\n     writeYMLFile(defaultKeys, filePath);\n   }\n }", "sourceBeforeFix": "PathUtils.concatPath(filePath,YML_FILE_DIR)", "sourceAfterFix": "PathUtils.concatPath(homeDir,YML_FILE_DIR)"}
{"fixCommitSHA1": "dea7ef0e0aae5ba4aef9d104cd10af986be9fc53", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     static class ConstantReader extends Reader {\n         private char[] constant;\n        public ConstantReader(char[] constant) {\n             this.constant = constant;\n         }", "fixed": "     static class ConstantReader extends Reader {\n         private char[] constant;\n        ConstantReader(char[] constant) {\n             this.constant = constant;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "fe569ea7a31f2a85393eea1bb4fd0b648a0d5a97", "projectName": "netty.netty", "bugType": "Same Function More Args", "problem": "             ByteBuf buffer = allocator.directBuffer(content.readableBytes());\n             try {\n                buffer.writeBytes(content);\n                 return newBIO(buffer.retainedSlice());\n             } finally {\n                 try {", "fixed": "             ByteBuf buffer = allocator.directBuffer(content.readableBytes());\n             try {\n                buffer.writeBytes(content, content.readerIndex(), content.readableBytes());\n                 return newBIO(buffer.retainedSlice());\n             } finally {\n                 try {", "sourceBeforeFix": "buffer.writeBytes(content)", "sourceAfterFix": "buffer.writeBytes(content,content.readerIndex(),content.readableBytes())"}
{"fixCommitSHA1": "f1024ba0e7d5f1276a285a4218f26c70252719b5", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t\t}\n\t\tTask task = null;\n \t\tsynchronized (this) {\n \t\t\tfinal Task runningTask = this.runningTasks.get(id);", "fixed": " \t\t}\n\t\tTask task;\n \t\tsynchronized (this) {\n \t\t\tfinal Task runningTask = this.runningTasks.get(id);", "sourceBeforeFix": "LOG.error(result.getDescription())", "sourceAfterFix": "LOG.error(result.getDescription(),t)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "d33c0ebf8f8f52fb6fb82d615cec50a10627d267", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n\t\t\tthis.port = port.toString();\n \t\t}\n\t\tpublic String getPort() {\n \t\t\treturn this.port;\n \t\t}", "fixed": " \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n\t\t\tthis.port = port;\n \t\t}\n\t\tpublic Integer getPort() {\n \t\t\treturn this.port;\n \t\t}", "sourceBeforeFix": "public String getPort(){   return this.port; } ", "sourceAfterFix": "public Integer getPort(){   return this.port; } "}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResultClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n          mBuf.array()[0] = (byte) (k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();", "fixed": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "95a13b51ee052eb73882682e8f009bfa1e914866", "projectName": "apache.hbase", "bugType": "Change Modifier", "problem": "         && getTimeBetweenRuns() > getMaximumAllowedTimeBetweenRuns();\n   }\n  private synchronized double getMaximumAllowedTimeBetweenRuns() {\n     return 1.5 * period;\n   }", "fixed": "         && getTimeBetweenRuns() > getMaximumAllowedTimeBetweenRuns();\n   }\n  private double getMaximumAllowedTimeBetweenRuns() {\n     return 1.5 * period;\n   }", "sourceBeforeFix": "33", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAhcEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AhcEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAhcEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AhcEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
