{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "         statsObj = getMS().getPartitionColumnStatistics(dbName, tableName, convertedPartName,\n                                                             partVals, colName);\n       } finally {\n        endFunction(\"get_column_statistics_by_partition: \", statsObj != null);\n       }\n       return statsObj;\n    }", "fixed": "         statsObj = getMS().getPartitionColumnStatistics(dbName, tableName, convertedPartName,\n                                                             partVals, colName);\n       } finally {\n        endFunction(\"get_column_statistics_by_partition: \", statsObj != null, null);\n       }\n       return statsObj;\n    }", "sourceBeforeFix": "endFunction(\"delete_column_statistics_by_partition: \",ret != false)", "sourceAfterFix": "endFunction(\"delete_column_statistics_by_partition: \",ret != false,null)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "48a6e99829e47be28498f8dffc32e823a5efc648", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "      */\n     @Test\n     public void async_whenMultipleAndThenOnSameFuture() throws Exception {\n        int callTimeout = 1000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);", "fixed": "      */\n     @Test\n     public void async_whenMultipleAndThenOnSameFuture() throws Exception {\n        int callTimeout = 5000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);", "sourceBeforeFix": "callTimeout=1000", "sourceAfterFix": "callTimeout=5000"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "fixed": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SshEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSshEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SshEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSshEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "08299be15b3f8e2082af0b5f6cda284140a65e33", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Boolean Literal", "problem": "     private final NettyAsyncHttpProviderConfig asyncHttpProviderConfig;\n    private boolean executeConnectAsync = false;\n     public static final ThreadLocal<Boolean> IN_IO_THREAD = new ThreadLocalBoolean();", "fixed": "     private final NettyAsyncHttpProviderConfig asyncHttpProviderConfig;\n    private boolean executeConnectAsync = true;\n     public static final ThreadLocal<Boolean> IN_IO_THREAD = new ThreadLocalBoolean();", "sourceBeforeFix": "executeConnectAsync=false", "sourceAfterFix": "executeConnectAsync=true"}
{"fixCommitSHA1": "80ae0c0b7908424e7f6fef38d3dd5aa3a173347a", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     private void peekMessage(Message mail) {\n        if (mail.getClass().getName().startsWith(\"IMAP\")) {\n             try {\n                 LOG.trace(\"Calling setPeek(true) on mail message {}\", mail);\n                 IntrospectionSupport.setProperty(mail, \"peek\", true);", "fixed": "     private void peekMessage(Message mail) {\n        if (mail.getClass().getSimpleName().startsWith(\"IMAP\")) {\n             try {\n                 LOG.trace(\"Calling setPeek(true) on mail message {}\", mail);\n                 IntrospectionSupport.setProperty(mail, \"peek\", true);", "sourceBeforeFix": "mail.getClass().getName()", "sourceAfterFix": "mail.getClass().getSimpleName()"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "14aab373515230255ec3a77b31f28573ee430f69", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         }\n     }\n    private static interface Column {\n         String getName();", "fixed": "         }\n     }\n    private interface Column {\n         String getName();", "sourceBeforeFix": "10", "sourceAfterFix": "2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         \n        void addName(String nameToAdd) {\n             varNames.add(nameToAdd);\n         }", "fixed": "         \n        private void addName(String nameToAdd) {\n             varNames.add(nameToAdd);\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ControlBusEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedControlBusEndpointBuilder advanced() {", "fixed": "     \n    public interface ControlBusEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedControlBusEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "bae2a6dee9b9ef115e45180bfc5663a6bca14225", "projectName": "mybatis.mybatis-3", "bugType": "Change Boolean Literal", "problem": "     if (!closed) {\r\n       try {\r\n         clearLocalCache();\r\n        flushStatements(false);\r\n       } finally {\r\n         if (required) {\r\n           transaction.rollback();\r", "fixed": "     if (!closed) {\r\n       try {\r\n         clearLocalCache();\r\n        flushStatements(true);\r\n       } finally {\r\n         if (required) {\r\n           transaction.rollback();\r", "sourceBeforeFix": "flushStatements(false)", "sourceAfterFix": "flushStatements(true)"}
{"fixCommitSHA1": "31113bf0d908a8fc194f078dae57b81494db7126", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Identifier Used", "problem": "          config.validate();\n          Assert.fail();\n       }\n      catch (IllegalStateException ise) {\n          Assert.assertTrue(ise.getMessage().contains(\"together\"));\n       }\n    }", "fixed": "          config.validate();\n          Assert.fail();\n       }\n      catch (IllegalArgumentException ise) {\n          Assert.assertTrue(ise.getMessage().contains(\"together\"));\n       }\n    }", "sourceBeforeFix": "IllegalStateException ise", "sourceAfterFix": "IllegalArgumentException ise"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedLogEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LogEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedLogEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LogEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleMailEndpointBuilder\n             extends\n                 GoogleMailEndpointConsumerBuilder, GoogleMailEndpointProducerBuilder {\n         default AdvancedGoogleMailEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleMailEndpointBuilder\n             extends\n                 GoogleMailEndpointConsumerBuilder, GoogleMailEndpointProducerBuilder {\n         default AdvancedGoogleMailEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "6cc0fdc67c2c6f12131ed252473d3c7d77d90cb5", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "         }\n         if (model == null) {\n            model = new EdgeDataTableModel(graph.getEdges().toArray(), columns.toArray(new EdgeDataColumn[0]));\n             table.setModel(model);\n         } else {\n            model.setEdges(graph.getEdges().toArray());\n             model.setColumns(columns.toArray(new EdgeDataColumn[0]));\n         }", "fixed": "         }\n         if (model == null) {\n            model = new EdgeDataTableModel(graph.getEdgesAndMetaEdges().toArray(), columns.toArray(new EdgeDataColumn[0]));\n             table.setModel(model);\n         } else {\n            model.setEdges(graph.getEdgesAndMetaEdges().toArray());\n             model.setColumns(columns.toArray(new EdgeDataColumn[0]));\n         }", "sourceBeforeFix": "graph.getEdges()", "sourceAfterFix": "graph.getEdgesAndMetaEdges()"}
{"fixCommitSHA1": "93a9fb352d11fb796964cbe4650b4a247d908b58", "projectName": "naver.pinpoint", "bugType": "Change Modifier", "problem": "         return 0;\n     }\n    private class ConnectorsArgumentValidator implements ArgumentValidator {\n         @Override\n         public boolean validate(Object[] args) {\n             if (args == null) {", "fixed": "         return 0;\n     }\n    private static class ConnectorsArgumentValidator implements ArgumentValidator {\n         @Override\n         public boolean validate(Object[] args) {\n             if (args == null) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "9aa49c8f6d2b30577565f87984819e1df0d62d0f", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "                         .getLastColumn() >= column;\n             final boolean nameMatches =\n                 ALL_WARNING_MATCHING_ID.equals(entry.getCheckName())\n                    || entry.getCheckName().equals(checkAlias);\n             if (afterStart && beforeEnd && nameMatches) {\n                 return true;\n             }", "fixed": "                         .getLastColumn() >= column;\n             final boolean nameMatches =\n                 ALL_WARNING_MATCHING_ID.equals(entry.getCheckName())\n                    || entry.getCheckName().equalsIgnoreCase(checkAlias);\n             if (afterStart && beforeEnd && nameMatches) {\n                 return true;\n             }", "sourceBeforeFix": "entry.getCheckName().equals(checkAlias)", "sourceAfterFix": "entry.getCheckName().equalsIgnoreCase(checkAlias)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic interface TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "fixed": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic abstract class TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "ec6f0cffe68e0736c04783b61f980f1271064dd9", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n   @Override\n  public boolean equals(@Nullable Object obj) {\n     if (obj == this) {\n       return true;\n     }", "fixed": "   @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n   @Override\n  public final boolean equals(@Nullable Object obj) {\n     if (obj == this) {\n       return true;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedStreamEndpointBuilder\n             extends\n                 AdvancedStreamEndpointConsumerBuilder, AdvancedStreamEndpointProducerBuilder {\n         default StreamEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedStreamEndpointBuilder\n             extends\n                 AdvancedStreamEndpointConsumerBuilder, AdvancedStreamEndpointProducerBuilder {\n         default StreamEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "de8f91ad67b9881afc9f5af9cf9736b341bc3fbf", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "         final String[] fileExtensions = {\"java\", \"xml\", \"properties\"};\n         c.setFileExtensions(fileExtensions);\n         final int counter = c.process(files);\nassertEquals(counter, 1);\n     }\n     @SuppressWarnings(\"deprecation\")", "fixed": "         final String[] fileExtensions = {\"java\", \"xml\", \"properties\"};\n         c.setFileExtensions(fileExtensions);\n         final int counter = c.process(files);\nassertEquals(1, counter);\n     }\n     @SuppressWarnings(\"deprecation\")", "sourceBeforeFix": "assertEquals(counter,1)", "sourceAfterFix": "assertEquals(1,counter)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Wrong Function Name", "problem": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fBodyWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "22d5241b5f75631e9cfda82a6912a2555eecb165", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     @Override\n     protected void doStop() throws Exception {\n         if (server != null) {\n            LOG.trace(\"Terminating gRPC server\");\n             server.shutdown().shutdownNow();\n             server = null;\n         }", "fixed": "     @Override\n     protected void doStop() throws Exception {\n         if (server != null) {\n            LOG.debug(\"Terminating gRPC server\");\n             server.shutdown().shutdownNow();\n             server = null;\n         }", "sourceBeforeFix": "LOG.info(\"Building gRPC server on \" + configuration.getHost() + \":\"+ configuration.getPort())", "sourceAfterFix": "LOG.debug(\"Building gRPC server on \" + configuration.getHost() + \":\"+ configuration.getPort())"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void mouseClick() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection && !customSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "fixed": "     }\n     @Override\n    public synchronized void mouseClick() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection && !customSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "fixed": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "fixed": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "f3a55f30abec0d1445ef65a89b16e49e3a8e2a2d", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "                 if (getter != null) {\n                     if (paramType == null) {\n                        paramType = getter.getRawReturnType();\n                     }\n                     for (final Annotation fieldAnnotation : getter.annotations()) {", "fixed": "                 if (getter != null) {\n                     if (paramType == null) {\n                        paramType = getter.getType();\n                     }\n                     for (final Annotation fieldAnnotation : getter.annotations()) {", "sourceBeforeFix": "field.getRawType()", "sourceAfterFix": "field.getType()"}
{"fixCommitSHA1": "e94badc917f7343820e4c40e1654f4c4b2c1901a", "projectName": "druid-io.druid", "bugType": "Less Specific If", "problem": "         final DimensionSelector dimSelector = dims.get(0);\n         final IndexedInts row = dimSelector.getRow();\n        if (row.size() == 0) {\n           ByteBuffer newKey = key.duplicate();\n           newKey.putInt(dimSelector.getValueCardinality());\n           unaggregatedBuffers = updateValues(newKey, dims.subList(1, dims.size()));", "fixed": "         final DimensionSelector dimSelector = dims.get(0);\n         final IndexedInts row = dimSelector.getRow();\n        if (row == null || row.size() == 0) {\n           ByteBuffer newKey = key.duplicate();\n           newKey.putInt(dimSelector.getValueCardinality());\n           unaggregatedBuffers = updateValues(newKey, dims.subList(1, dims.size()));", "sourceBeforeFix": "row.size() == 0", "sourceAfterFix": "row == null || row.size() == 0"}
{"fixCommitSHA1": "51e6c8c8b6e847e2600420252160e331c85bd46a", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t@Override\n \tpublic boolean matches(ClassNode classNode) {\n\t\treturn AstUtils.hasLeastOneAnnotation(classNode, \"Controller\", \"EnableWebMvc\");\n \t}\n \t@Override", "fixed": " \t@Override\n \tpublic boolean matches(ClassNode classNode) {\n\t\treturn AstUtils.hasAtLeastOneAnnotation(classNode, \"Controller\", \"EnableWebMvc\");\n \t}\n \t@Override", "sourceBeforeFix": "AstUtils.hasLeastOneAnnotation(classNode,\"Controller\",\"EnableWebMvc\")", "sourceAfterFix": "AstUtils.hasAtLeastOneAnnotation(classNode,\"Controller\",\"EnableWebMvc\")"}
{"fixCommitSHA1": "5ef9fe421732a256519e0dbac06f73f728f12564", "projectName": "Alluxio.alluxio", "bugType": "Missing Throws Exception", "problem": "     }\n   }\n  private synchronized ClientFileInfo getClientFileInfo(String path, boolean useCachedMetadata) { \n     connect();\n     if (!mConnected) {\n       return null;", "fixed": "     }\n   }\n  private synchronized ClientFileInfo getClientFileInfo(String path, boolean useCachedMetadata)\n      throws IOException { \n     connect();\n     if (!mConnected) {\n       return null;", "sourceBeforeFix": "34", "sourceAfterFix": "34"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );", "fixed": "         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e5f5decf8c607db5ce59b007200ce17c71f414f9", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                     if(file.startsWith(\"/\")) {\n                         d.addWelcomePages(file.substring(1));\n                     } else {\n                        d.addWelcomePages(welcomeFiles);\n                     }\n                 }\n             } else {", "fixed": "                     if(file.startsWith(\"/\")) {\n                         d.addWelcomePages(file.substring(1));\n                     } else {\n                        d.addWelcomePages(file);\n                     }\n                 }\n             } else {", "sourceBeforeFix": "d.addWelcomePages(welcomeFiles)", "sourceAfterFix": "d.addWelcomePages(file)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           DefaultAtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler,", "fixed": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler,", "sourceBeforeFix": "DefaultAtmosphereRequest request", "sourceAfterFix": "AtmosphereRequest request"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCouchDbEndpointBuilder\n             extends\n                 AdvancedCouchDbEndpointConsumerBuilder, AdvancedCouchDbEndpointProducerBuilder {\n         default CouchDbEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCouchDbEndpointBuilder\n             extends\n                 AdvancedCouchDbEndpointConsumerBuilder, AdvancedCouchDbEndpointProducerBuilder {\n         default CouchDbEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "30315bc85fc46b6fa08ededecdf1b9ebc781c7d1", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "         this.sampledNewGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_SAMPLED_NEW, UNSUPPORTED_GAUGE);\r\n         this.sampledContinuationGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_SAMPLED_CONTINUATION, UNSUPPORTED_GAUGE);\r\n         this.unsampledNewGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_UNSAMPLED_NEW, UNSUPPORTED_GAUGE);\r\n        this.unsampledContinuationGuage = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_UNSAMPLED_NEW, UNSUPPORTED_GAUGE);\r\n     }\r\n     @Override\r", "fixed": "         this.sampledNewGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_SAMPLED_NEW, UNSUPPORTED_GAUGE);\r\n         this.sampledContinuationGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_SAMPLED_CONTINUATION, UNSUPPORTED_GAUGE);\r\n         this.unsampledNewGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_UNSAMPLED_NEW, UNSUPPORTED_GAUGE);\r\n        this.unsampledContinuationGuage = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_UNSAMPLED_CONTINUATION, UNSUPPORTED_GAUGE);\r\n     }\r\n     @Override\r", "sourceBeforeFix": "MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_NEW,UNSUPPORTED_GAUGE)", "sourceAfterFix": "MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_CONTINUATION,UNSUPPORTED_GAUGE)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Advanced builder for endpoint for the Azure Storage Queue Service\n      * component.\n      */\n    public static interface AdvancedQueueServiceEndpointBuilder\n             extends\n                 AdvancedQueueServiceEndpointConsumerBuilder, AdvancedQueueServiceEndpointProducerBuilder {\n         default QueueServiceEndpointBuilder basic() {", "fixed": "      * Advanced builder for endpoint for the Azure Storage Queue Service\n      * component.\n      */\n    public interface AdvancedQueueServiceEndpointBuilder\n             extends\n                 AdvancedQueueServiceEndpointConsumerBuilder, AdvancedQueueServiceEndpointProducerBuilder {\n         default QueueServiceEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "   public Set<Tuple> zrangeByScoreWithScores(final byte[] key, final double min, final double max) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "   public Set<Tuple> zrangeByScoreWithScores(final byte[] key, final double min, final double max) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "1697ba6074aea80fe341dd07baac4fd85165dd74", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void sendIn() throws Exception {\n        result.expectedMessageCount(0);\n         template.send(\"direct:getObject\", new Processor() {", "fixed": "     @Test\n     public void sendIn() throws Exception {\n        result.expectedMessageCount(1);\n         template.send(\"direct:getObject\", new Processor() {", "sourceBeforeFix": "result.expectedMessageCount(0)", "sourceAfterFix": "result.expectedMessageCount(1)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CassandraEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCassandraEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CassandraEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCassandraEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6ca7d1534779e93064f0dda88c7a0d999c068ecf", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "       mAdditionalWorkers = Lists.newArrayList();\n       List<? extends Worker> workers = Lists.newArrayList(mBlockWorker, mFileSystemWorker);\n       ServiceLoader<WorkerFactory> discoveredMasterFactories =\n          ServiceLoader.load(WorkerFactory.class);\n       for (WorkerFactory factory : discoveredMasterFactories) {\n         Worker worker = factory.create(workers);\n         if (worker != null) {", "fixed": "       mAdditionalWorkers = Lists.newArrayList();\n       List<? extends Worker> workers = Lists.newArrayList(mBlockWorker, mFileSystemWorker);\n       ServiceLoader<WorkerFactory> discoveredMasterFactories =\n          ServiceLoader.load(WorkerFactory.class, WorkerFactory.class.getClassLoader());\n       for (WorkerFactory factory : discoveredMasterFactories) {\n         Worker worker = factory.create(workers);\n         if (worker != null) {", "sourceBeforeFix": "ServiceLoader.load(WorkerFactory.class)", "sourceAfterFix": "ServiceLoader.load(WorkerFactory.class,WorkerFactory.class.getClassLoader())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FileEndpointBuilder\n             extends\n                 FileEndpointConsumerBuilder, FileEndpointProducerBuilder {\n         default AdvancedFileEndpointBuilder advanced() {", "fixed": "     \n    public interface FileEndpointBuilder\n             extends\n                 FileEndpointConsumerBuilder, FileEndpointProducerBuilder {\n         default AdvancedFileEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "         )\n     );\n    queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "fixed": "         )\n     );\n    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "sourceBeforeFix": "queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "cad6e4d396e7b901b8c83257312860021f01c060", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t@Override\n \tpublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n \t\tfinal String msg = \"Exception in server pipeline. Caused by: \" + ExceptionUtils.stringifyException(cause);\n\t\tfinal ByteBuf err = serializer.serializeServerFailure(ctx.alloc(), new RuntimeException(msg));\n \t\tLOG.debug(msg);\n \t\tctx.writeAndFlush(err).addListener(ChannelFutureListener.CLOSE);", "fixed": " \t@Override\n \tpublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n \t\tfinal String msg = \"Exception in server pipeline. Caused by: \" + ExceptionUtils.stringifyException(cause);\n\t\tfinal ByteBuf err = MessageSerializer.serializeServerFailure(ctx.alloc(), new RuntimeException(msg));\n \t\tLOG.debug(msg);\n \t\tctx.writeAndFlush(err).addListener(ChannelFutureListener.CLOSE);", "sourceBeforeFix": "serializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))", "sourceAfterFix": "MessageSerializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))"}
{"fixCommitSHA1": "d83dd417fff4ae2407e04a21056f331a773d970b", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         private boolean fallback;\n        public SampleComponent(boolean fallback) {\n             this.fallback = fallback;\n         }", "fixed": "         private boolean fallback;\n        SampleComponent(boolean fallback) {\n             this.fallback = fallback;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "df43a7a353d1f56e6996170bd74f7a6267eb2bb8", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\n \tpublic Container<T> minSize (float width, float height) {\n\t\tminSize(new Fixed(width));\n \t\treturn this;\n \t}", "fixed": " \t\n \tpublic Container<T> minSize (float width, float height) {\n\t\tminSize(new Fixed(width), new Fixed(height));\n \t\treturn this;\n \t}", "sourceBeforeFix": "maxSize(new Fixed(width))", "sourceAfterFix": "maxSize(new Fixed(width),new Fixed(height))"}
{"fixCommitSHA1": "24bc88e4ccc3f2e3e8419acb5a5084f5dd26634d", "projectName": "naver.pinpoint", "bugType": "Less Specific If", "problem": "     }\n     private boolean validate(Object[] args) {\n        if (args.length == 0) {\n             return false;\n         }", "fixed": "     }\n     private boolean validate(Object[] args) {\n        if (args == null || args.length == 0) {\n             return false;\n         }", "sourceBeforeFix": "args.length == 0", "sourceAfterFix": "args == null || args.length == 0"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see NormalizableKey\n \t */\n\tpublic void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "fixed": " \t * \n* @see NormalizableKey\n \t */\n\tpublic abstract void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ServletEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedServletEndpointBuilder advanced() {\n             return (AdvancedServletEndpointBuilder) this;\n         }", "fixed": "     \n    public interface ServletEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedServletEndpointBuilder advanced() {\n             return (AdvancedServletEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "70f070f7158f18eb1396fedc8ae63b3827627219", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     public void write(PortableWriter writer)\n             throws IOException {\n        writer.writeBoolean(\"c\", create);\n         writer.writeInt(\"p\", partitionId);\n         final ObjectDataOutput out = writer.getRawDataOutput();\n         out.writeObject(cacheConfig);", "fixed": "     public void write(PortableWriter writer)\n             throws IOException {\n        writer.writeBoolean(\"c\", createAlsoOnOthers);\n         writer.writeInt(\"p\", partitionId);\n         final ObjectDataOutput out = writer.getRawDataOutput();\n         out.writeObject(cacheConfig);", "sourceBeforeFix": "new CacheCreateConfigOperation(cacheConfig,create,false)", "sourceAfterFix": "new CacheCreateConfigOperation(cacheConfig,createAlsoOnOthers,false)"}
{"fixCommitSHA1": "1ec0bbefda8dfe8cb0c5a11005b62c17ab61c121", "projectName": "eclipse.vert.x", "bugType": "Same Function Less Args", "problem": "     long now = System.currentTimeMillis();\n     StringBuilder acc = new StringBuilder(get());\n     while (!predicate.test(acc.toString())) {\n      Assert.assertTrue(\"Was not expecting this output \" + acc, System.currentTimeMillis() - now < 5000);\n       try {\n         Thread.sleep(1);\n       } catch (InterruptedException e) {", "fixed": "     long now = System.currentTimeMillis();\n     StringBuilder acc = new StringBuilder(get());\n     while (!predicate.test(acc.toString())) {\n      Assert.assertTrue(System.currentTimeMillis() - now < 5000);\n       try {\n         Thread.sleep(1);\n       } catch (InterruptedException e) {", "sourceBeforeFix": "Assert.assertTrue(\"Was not expecting this output \" + acc,System.currentTimeMillis() - now < 5000)", "sourceAfterFix": "Assert.assertTrue(System.currentTimeMillis() - now < 5000)"}
{"fixCommitSHA1": "4e51ec2ef2692466be178bc8f49c4bf2692cb984", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         requireNonNull(type, \"type is null\");\n         this.expression = expression;\n        this.type = type.toUpperCase(ENGLISH);\n         this.safe = safe;\n         this.typeOnly = typeOnly;\n     }", "fixed": "         requireNonNull(type, \"type is null\");\n         this.expression = expression;\n        this.type = type.toLowerCase(ENGLISH);\n         this.safe = safe;\n         this.typeOnly = typeOnly;\n     }", "sourceBeforeFix": "type.toUpperCase(ENGLISH)", "sourceAfterFix": "type.toLowerCase(ENGLISH)"}
{"fixCommitSHA1": "cdc3ec178ca63ba1cb063986cba2c7b78209aa45", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     }\n     public HazelcastInstance[] newInstances(Config config, int nodeCount) {\n        final HazelcastInstance[] instances = new HazelcastInstance[count];\n         for (int i = 0; i < nodeCount; i++) {\n             instances[i] = newHazelcastInstance(config);\n         }", "fixed": "     }\n     public HazelcastInstance[] newInstances(Config config, int nodeCount) {\n        final HazelcastInstance[] instances = new HazelcastInstance[nodeCount];\n         for (int i = 0; i < nodeCount; i++) {\n             instances[i] = newHazelcastInstance(config);\n         }", "sourceBeforeFix": "new HazelcastInstance[count]", "sourceAfterFix": "new HazelcastInstance[nodeCount]"}
{"fixCommitSHA1": "a7ea864d23e4b47cef8056a446ea4e7344c62ee7", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "         DatagramSocket socket = new DatagramSocket();\n         try {\n            InetAddress address = InetAddress.getByName(\"127.0.0.1\");\n             for (int i = 0; i < messageCount; i++) {\n                 byte[] data = message.getBytes();", "fixed": "         DatagramSocket socket = new DatagramSocket();\n         try {\n            InetAddress address = InetAddress.getByName(\"localhost\");\n             for (int i = 0; i < messageCount; i++) {\n                 byte[] data = message.getBytes();", "sourceBeforeFix": "AvailablePortFinder.getNextAvailable()", "sourceAfterFix": "AvailablePortFinder.getNextAvailable(3000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0b70c36eb0dff06c81010d1569797c727712bddd", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "       switch (castTo) {\n         case DOUBLE:\n           if (value == null) {\n            return ExprEval.of(null);\n           } else {\n             return ExprEval.of(asDouble());\n           }", "fixed": "       switch (castTo) {\n         case DOUBLE:\n           if (value == null) {\n            return ExprEval.ofDouble(null);\n           } else {\n             return ExprEval.of(asDouble());\n           }", "sourceBeforeFix": "ExprEval.of(null)", "sourceAfterFix": "ExprEval.ofDouble(null)"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\tActorRef rpcEndpoint,\n \t\t\tTime timeout,\n \t\t\tlong maximumFramesize,\n\t\t\t@Nullable CompletableFuture<Boolean> terminationFuture,\n \t\t\tSupplier<F> fencingTokenSupplier) {\n \t\tsuper(address, hostname, rpcEndpoint, timeout, maximumFramesize, terminationFuture);", "fixed": " \t\t\tActorRef rpcEndpoint,\n \t\t\tTime timeout,\n \t\t\tlong maximumFramesize,\n\t\t\t@Nullable CompletableFuture<Void> terminationFuture,\n \t\t\tSupplier<F> fencingTokenSupplier) {\n \t\tsuper(address, hostname, rpcEndpoint, timeout, maximumFramesize, terminationFuture);", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SqlStoredEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedSqlStoredEndpointBuilder advanced() {\n             return (AdvancedSqlStoredEndpointBuilder) this;\n         }", "fixed": "     \n    public interface SqlStoredEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedSqlStoredEndpointBuilder advanced() {\n             return (AdvancedSqlStoredEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n            invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }", "fixed": "         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n            invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }", "sourceBeforeFix": "invocation.logger.warning(\"'is-executing': \" + executing + \" -> \"+ invocation)", "sourceAfterFix": "invocation.logger.finest(\"'is-executing': \" + executing + \" -> \"+ invocation)"}
{"fixCommitSHA1": "65d51bdf063a479fa1b6e303ec91687f0c920823", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @param fileSystemMaster the {@link FileSystemMaster} the handler uses internally\n    */\n   FileSystemMasterClientServiceHandler(FileSystemMaster fileSystemMaster) {\n    Preconditions.checkNotNull(fileSystemMaster);\n     mFileSystemMaster = fileSystemMaster;\n   }", "fixed": "    * @param fileSystemMaster the {@link FileSystemMaster} the handler uses internally\n    */\n   FileSystemMasterClientServiceHandler(FileSystemMaster fileSystemMaster) {\n    Preconditions.checkNotNull(fileSystemMaster, \"fileSystemMaster\");\n     mFileSystemMaster = fileSystemMaster;\n   }", "sourceBeforeFix": "Preconditions.checkNotNull(fileSystemMaster)", "sourceAfterFix": "Preconditions.checkNotNull(fileSystemMaster,\"fileSystemMaster\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Configuration\n\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "fixed": " \t}\n \t@Configuration\n\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 15809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n }", "fixed": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 10809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n }", "sourceBeforeFix": "id=15804", "sourceAfterFix": "id=10804"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9e756fefbb053926754108335e3ad78b586439ac", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                 WebsocketComponent websocketComponent = getContext().getComponent(\"websocket\", WebsocketComponent.class);\n                 websocketComponent.setPort(port);\n                 websocketComponent.setMinThreads(1);\n                websocketComponent.setMaxThreads(11);\nfrom(\"websocket:\n                         .log(\">>> Message received from WebSocket Client : ${body}\")", "fixed": "                 WebsocketComponent websocketComponent = getContext().getComponent(\"websocket\", WebsocketComponent.class);\n                 websocketComponent.setPort(port);\n                 websocketComponent.setMinThreads(1);\n                websocketComponent.setMaxThreads(20);\nfrom(\"websocket:\n                         .log(\">>> Message received from WebSocket Client : ${body}\")", "sourceBeforeFix": "websocketComponent.setMaxThreads(11)", "sourceAfterFix": "websocketComponent.setMaxThreads(20)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CxfRsEndpointBuilder\n             extends\n                 CxfRsEndpointConsumerBuilder, CxfRsEndpointProducerBuilder {\n         default AdvancedCxfRsEndpointBuilder advanced() {", "fixed": "     \n    public interface CxfRsEndpointBuilder\n             extends\n                 CxfRsEndpointConsumerBuilder, CxfRsEndpointProducerBuilder {\n         default AdvancedCxfRsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "270185aba54cef1d8ce59ec347b5623f2e502afe", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \telse\n \t\t{\n \t\tISeq s = RT.seq(sizeOrSeq);\n\t\tint size = s.count();\n \t\tdouble[] ret = new double[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\tret[i] = ((Number) s.first()).doubleValue();", "fixed": " \telse\n \t\t{\n \t\tISeq s = RT.seq(sizeOrSeq);\n\t\tint size = RT.count(s);\n \t\tdouble[] ret = new double[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\tret[i] = ((Number) s.first()).doubleValue();", "sourceBeforeFix": "s.count()", "sourceAfterFix": "RT.count(s)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "92b9986bd0c48759694a83cac77858f293801a11", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             JSONArray array = new JSONArray(collection.size());\n             for (Object item : collection) {\n                Object jsonValue = toJSON(item);\n                 array.add(jsonValue);\n             }", "fixed": "             JSONArray array = new JSONArray(collection.size());\n             for (Object item : collection) {\n                Object jsonValue = toJSON(item, config);\n                 array.add(jsonValue);\n             }", "sourceBeforeFix": "toJSON(item)", "sourceAfterFix": "toJSON(item,config)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "53c0cde20042683e48266819a47099612e69d5bd", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         TabularData data = (TabularData) mbeanServer.invoke(on, \"explain\", new Object[]{true}, new String[]{\"boolean\"});\n         assertNotNull(data);\n        assertEquals(2, data.size());\n         data = (TabularData) mbeanServer.invoke(on, \"explain\", new Object[]{false}, new String[]{\"boolean\"});\n         assertNotNull(data);", "fixed": "         TabularData data = (TabularData) mbeanServer.invoke(on, \"explain\", new Object[]{true}, new String[]{\"boolean\"});\n         assertNotNull(data);\n        assertEquals(3, data.size());\n         data = (TabularData) mbeanServer.invoke(on, \"explain\", new Object[]{false}, new String[]{\"boolean\"});\n         assertNotNull(data);", "sourceBeforeFix": "assertEquals(2,data.size())", "sourceAfterFix": "assertEquals(3,data.size())"}
{"fixCommitSHA1": "35c519ad4da6e47b858e89f6378b5d626e41b2cf", "projectName": "NLPchina.ansj_seg", "bugType": "Change Identifier Used", "problem": " \t\tif (args != null && args.length == 2) {\n \t\t\tinputPath = args[0];\n\t\t\tinputPath = args[1];\n \t\t}\n \t\tif (StringUtil.isBlank(inputPath) || StringUtil.isBlank(outputPath)) {", "fixed": " \t\tif (args != null && args.length == 2) {\n \t\t\tinputPath = args[0];\n\t\t\toutputPath = args[1];\n \t\t}\n \t\tif (StringUtil.isBlank(inputPath) || StringUtil.isBlank(outputPath)) {", "sourceBeforeFix": "inputPath=args[1]", "sourceAfterFix": "outputPath=args[1]"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      *\n      * @param basenameSeparator the basename separator\n      */\n    public void setBasenameSeparator(String basenameSeparator) {\n         this.basenameSeparator = basenameSeparator;\n     }", "fixed": "      *\n      * @param basenameSeparator the basename separator\n      */\n    public final void setBasenameSeparator(String basenameSeparator) {\n         this.basenameSeparator = basenameSeparator;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "e6c1586717135f4d22f0a03177a1b7b994d5da95", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t\treturn Outcome.match(\"found database driver \" + driverClassName);\n \t\t\t}\n\t\t\treturn Outcome.match(\"missing database driver \" + driverClassName);\n \t\t}\n \t\tprivate String getDriverClassName(Environment environment, ClassLoader classLoader) {", "fixed": " \t\t\t\treturn Outcome.match(\"found database driver \" + driverClassName);\n \t\t\t}\n\t\t\treturn Outcome.noMatch(\"missing database driver \" + driverClassName);\n \t\t}\n \t\tprivate String getDriverClassName(Environment environment, ClassLoader classLoader) {", "sourceBeforeFix": "Outcome.match(\"missing database driver \" + driverClassName)", "sourceAfterFix": "Outcome.noMatch(\"missing database driver \" + driverClassName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTextureEXT(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "fixed": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTexture(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.valueOf(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "fixed": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "06a93403d737f57014d6357ac4792187e490f20b", "projectName": "Graylog2.graylog2-server", "bugType": "Less Specific If", "problem": "             configuration.setIsMaster(false);\n         }\n        if (commandLineArguments.isLocal()) {\n             LOG.info(\"Running in local mode\");\n             server.setLocalMode(true);", "fixed": "             configuration.setIsMaster(false);\n         }\n        if (commandLineArguments.isLocal() || commandLineArguments.isDebug()) {\n             LOG.info(\"Running in local mode\");\n             server.setLocalMode(true);", "sourceBeforeFix": "commandLineArguments.isLocal()", "sourceAfterFix": "commandLineArguments.isLocal() || commandLineArguments.isDebug()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastMapEndpointBuilder\n             extends\n                 HazelcastMapEndpointConsumerBuilder, HazelcastMapEndpointProducerBuilder {\n         default AdvancedHazelcastMapEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastMapEndpointBuilder\n             extends\n                 HazelcastMapEndpointConsumerBuilder, HazelcastMapEndpointProducerBuilder {\n         default AdvancedHazelcastMapEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f79a34aa3ab947603330680019cab43a23a29b17", "projectName": "antlr.antlr4", "bugType": "Same Function More Args", "problem": " \t\t@Override\n \t\tpublic boolean ignore(String targetName) {\n\t\t\treturn !Arrays.asList(\"Java\", \"CSharp\", \"Python2\", \"Python3\", \"Node\").contains(targetName);\n \t\t}\n \t}", "fixed": " \t\t@Override\n \t\tpublic boolean ignore(String targetName) {\n\t\t\treturn !Arrays.asList(\"Java\", \"CSharp\", \"Python2\", \"Python3\", \"Node\", \"Cpp\").contains(targetName);\n \t\t}\n \t}", "sourceBeforeFix": "Arrays.asList(\"Java\",\"CSharp\")", "sourceAfterFix": "Arrays.asList(\"Java\",\"CSharp\",\"Cpp\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FhirEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFhirEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface FhirEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFhirEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6fe8de61d192f14262b455497dc5cc174d88659c", "projectName": "naver.pinpoint", "bugType": "Change Numeric Literal", "problem": "         LinkDataDuplexMap select = bfsLinkSelector.select(APP_A, range, option);\n        Assert.assertEquals(select.size(), 1);\n     }", "fixed": "         LinkDataDuplexMap select = bfsLinkSelector.select(APP_A, range, option);\n        Assert.assertEquals(select.size(), 0);\n     }", "sourceBeforeFix": "Assert.assertEquals(select.size(),1)", "sourceAfterFix": "Assert.assertEquals(select.size(),0)"}
{"fixCommitSHA1": "ae6599c6ec02c7973209010991a23fde5db8217f", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     }\n     @Converter\n    public static String toIso(Country country) {\n         return country.getIso();\n     }\n }", "fixed": "     }\n     @Converter\n    public String toIso(Country country) {\n         return country.getIso();\n     }\n }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.error(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "fixed": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "sourceBeforeFix": "LOG.error(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)", "sourceAfterFix": "LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "007ea4a7f2ba64fad78f78c1b798ca45455719e4", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final JsonFactory jsonFactory = new YAMLFactory();\n         final ObjectMapper mapper = factory.build(jsonFactory);\n        assertThat(mapper.getJsonFactory())\n                 .isSameAs(jsonFactory);\n     }", "fixed": "         final JsonFactory jsonFactory = new YAMLFactory();\n         final ObjectMapper mapper = factory.build(jsonFactory);\n        assertThat(mapper.getFactory())\n                 .isSameAs(jsonFactory);\n     }", "sourceBeforeFix": "mapper.getJsonFactory()", "sourceAfterFix": "mapper.getFactory()"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "fixed": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "e3eb6f09ecc61830a2dc018871ddeca2c53c4cbc", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "static String FAILOVER_ON_INITIAL_CONNECTION_METHOD = \"failoverOnInitialConnection\";\nstatic String FAILOVER_ON_SERVER_SHUTDOWN_METHOD = \"failoverOnServerShutdown\";\n     static String GROUP_ID_METHOD = \"groupId\";\n    static String LOAD_BALANCE_POLICY_CLASS_NAME_METHOD = \"loadBalancePolicyClassName\";\nstatic String MAX_RETRY_INTERVAL_METHOD = \"maxRetryInterval\";\n     static String MIN_LARGE_MESSAGE_SIZE_METHOD = \"minLargeMessageSize\";\n     static String PRE_ACK_METHOD = \"preAcknowledge\";", "fixed": "static String FAILOVER_ON_INITIAL_CONNECTION_METHOD = \"failoverOnInitialConnection\";\nstatic String FAILOVER_ON_SERVER_SHUTDOWN_METHOD = \"failoverOnServerShutdown\";\n     static String GROUP_ID_METHOD = \"groupId\";\n    static String LOAD_BALANCING_POLICY_CLASS_NAME_METHOD = \"loadBalancingPolicyClassName\";\nstatic String MAX_RETRY_INTERVAL_METHOD = \"maxRetryInterval\";\n     static String MIN_LARGE_MESSAGE_SIZE_METHOD = \"minLargeMessageSize\";\n     static String PRE_ACK_METHOD = \"preAcknowledge\";", "sourceBeforeFix": "new PooledCFAttribute(LOAD_BALANCING_CLASS_NAME,LOAD_BALANCE_POLICY_CLASS_NAME_METHOD)", "sourceAfterFix": "new PooledCFAttribute(LOAD_BALANCING_CLASS_NAME,LOAD_BALANCING_POLICY_CLASS_NAME_METHOD)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3691be4c1f9974b445e682c6d290306700eab602", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "      * @throws javax.servlet.ServletException\n      */\n     protected AtmosphereHandlerWrapper map(HttpServletRequest req) throws ServletException {\n        String path = req.getRequestURI();\n         if (path == null || path.length() == 0) {\n             path = \"/*\";\n         }", "fixed": "      * @throws javax.servlet.ServletException\n      */\n     protected AtmosphereHandlerWrapper map(HttpServletRequest req) throws ServletException {\n        String path = req.getServletPath() + req.getPathInfo();\n         if (path == null || path.length() == 0) {\n             path = \"/*\";\n         }", "sourceBeforeFix": "logger.trace(\"Trying to map {} to {}\",t,path)", "sourceAfterFix": "logger.debug(\"Trying to map {} to {}\",t,path)"}
{"fixCommitSHA1": "e68c0e674b22b9d49d402e0151aa15e8c645bd4b", "projectName": "google.guava", "bugType": "Change Modifier", "problem": " \n @GwtCompatible(serializable = true, emulated = true)\npublic class EnumCountHashMap<K extends Enum<K>> extends AbstractObjectCountMap<K> {\n   \n   public static <K extends Enum<K>> EnumCountHashMap<K> create(Class<K> type) {", "fixed": " \n @GwtCompatible(serializable = true, emulated = true)\nclass EnumCountHashMap<K extends Enum<K>> extends AbstractObjectCountMap<K> {\n   \n   public static <K extends Enum<K>> EnumCountHashMap<K> create(Class<K> type) {", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "28a04af5f4b957b75ba7dbf6486999b75547673c", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t\t\tif (koala.velocity.y > 0) {\r\n \t\t\t\t\tkoala.position.y = tile.y - Koala.HEIGHT;\r\n\t\t\t\t\tTiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get(1);\r\n \t\t\t\t\tlayer.setCell((int)tile.x, (int)tile.y, null);\r\n \t\t\t\t} else {\r\n \t\t\t\t\tkoala.position.y = tile.y + tile.height;\r", "fixed": " \t\t\t\tif (koala.velocity.y > 0) {\r\n \t\t\t\t\tkoala.position.y = tile.y - Koala.HEIGHT;\r\n\t\t\t\t\tTiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get(\"walls\");\r\n \t\t\t\t\tlayer.setCell((int)tile.x, (int)tile.y, null);\r\n \t\t\t\t} else {\r\n \t\t\t\t\tkoala.position.y = tile.y + tile.height;\r", "sourceBeforeFix": "Gdx.input.getX()", "sourceAfterFix": "Gdx.input.getX(i)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                         public void process(Exchange exchange) throws Exception {\n                             Random ran = new Random();\n                            int delay = ran.nextInt(500) + 10;\n                             Thread.sleep(delay);\n                         }\n                     }).to(\"mock:result\");", "fixed": "                         public void process(Exchange exchange) throws Exception {\n                             Random ran = new Random();\n                            int delay = ran.nextInt(250) + 10;\n                             Thread.sleep(delay);\n                         }\n                     }).to(\"mock:result\");", "sourceBeforeFix": "ran.nextInt(500)", "sourceAfterFix": "ran.nextInt(250)"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(2);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(2);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\");\r", "sourceBeforeFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(2000L)", "sourceAfterFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(500L)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         validatePackageNames(packageNames);\n     }\n    private void validatePackageNames(Set<String> pkgNames) {\n         final String[] checkstylePackages = {\n             \"com.puppycrawl.tools.checkstyle.\",\n             \"com.puppycrawl.tools.checkstyle.checks.\",", "fixed": "         validatePackageNames(packageNames);\n     }\n    private static void validatePackageNames(Set<String> pkgNames) {\n         final String[] checkstylePackages = {\n             \"com.puppycrawl.tools.checkstyle.\",\n             \"com.puppycrawl.tools.checkstyle.checks.\",", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "619ff2bc073d1b8859c8c8e1fa351b7858529670", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public String toString() {\n        return END + \" End Message Interceptor\";\n     }\n }", "fixed": "     @Override\n     public String toString() {\n        return end + \" End Message Interceptor\";\n     }\n }", "sourceBeforeFix": "data + END", "sourceAfterFix": "data + end"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2071f9b5421f853e8515f309b2874399c895c43a", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "         final SeverityLevelCounter counter = new SeverityLevelCounter(SeverityLevel.ERROR);\n         final AuditEvent event = new AuditEvent(this, \"ATest.java\", null);\n         assertEquals(0, counter.getCount());\n        counter.addException(event, new IllegalStateException());\n         assertEquals(1, counter.getCount());\n     }", "fixed": "         final SeverityLevelCounter counter = new SeverityLevelCounter(SeverityLevel.ERROR);\n         final AuditEvent event = new AuditEvent(this, \"ATest.java\", null);\n         assertEquals(0, counter.getCount());\n        counter.addException(event, new IllegalStateException(\"Test IllegalStateException\"));\n         assertEquals(1, counter.getCount());\n     }", "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Test IllegalStateException\")"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param column column index.\n      * @return value at specified column.\n      */\n    private Object getValueAtDetailAST(DetailAST ast, int column) {\n         final Object value;\n         switch (column) {", "fixed": "      * @param column column index.\n      * @return value at specified column.\n      */\n    private static Object getValueAtDetailAST(DetailAST ast, int column) {\n         final Object value;\n         switch (column) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "0a8713235af5d85e00396cd65fdaef3939e38d60", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   }\n   private void getTestHelper(TachyonFS tfs) throws IOException {\n    int fileId = mTfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n    Assert.assertNotNull(mTfs.getFile(fileId));\n   }\n   @Test", "fixed": "   }\n   private void getTestHelper(TachyonFS tfs) throws IOException {\n    int fileId = tfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n    Assert.assertNotNull(tfs.getFile(fileId));\n   }\n   @Test", "sourceBeforeFix": "mTfs.createFile(new TachyonURI(\"/root/testFile1\"))", "sourceAfterFix": "tfs.createFile(new TachyonURI(\"/root/testFile1\"))"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "             for (CodegenProperty var : cm.vars) {\n                String jsDocType = getJSDocTypeWithBraces(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n                 if (Boolean.TRUE.equals(var.required)) {", "fixed": "             for (CodegenProperty var : cm.vars) {\n                String jsDocType = getJSDocType(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n                 if (Boolean.TRUE.equals(var.required)) {", "sourceBeforeFix": "getJSDocTypeWithBraces(cp)", "sourceAfterFix": "getJSDocType(cp)"}
{"fixCommitSHA1": "574eba95526a7b9e458edd582caace229323164e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         Collection<Class<?>> localBusinessInterfaces = this.getLocalBusinessInterfaces(deploymentUnit, sessionBeanClass);\n         if (localBusinessInterfaces != null && !localBusinessInterfaces.isEmpty()) {\n            verifyViewMethodsNotDeclaredFinal(sessionBeanClass, remoteBusinessInterfaces);\n             sessionBeanComponentDescription.addLocalBusinessInterfaceViews(this.toString(localBusinessInterfaces));\n         }", "fixed": "         Collection<Class<?>> localBusinessInterfaces = this.getLocalBusinessInterfaces(deploymentUnit, sessionBeanClass);\n         if (localBusinessInterfaces != null && !localBusinessInterfaces.isEmpty()) {\n            verifyViewMethodsNotDeclaredFinal(sessionBeanClass, localBusinessInterfaces);\n             sessionBeanComponentDescription.addLocalBusinessInterfaceViews(this.toString(localBusinessInterfaces));\n         }", "sourceBeforeFix": "verifyViewMethodsNotDeclaredFinal(sessionBeanClass,remoteBusinessInterfaces)", "sourceAfterFix": "verifyViewMethodsNotDeclaredFinal(sessionBeanClass,localBusinessInterfaces)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKeystoneEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KeystoneEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKeystoneEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KeystoneEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\tActorRef rpcEndpoint,\n \t\t\tTime timeout,\n \t\t\tlong maximumFramesize,\n\t\t\t@Nullable CompletableFuture<Boolean> terminationFuture) {\n \t\tthis.address = Preconditions.checkNotNull(address);\n \t\tthis.hostname = Preconditions.checkNotNull(hostname);", "fixed": " \t\t\tActorRef rpcEndpoint,\n \t\t\tTime timeout,\n \t\t\tlong maximumFramesize,\n\t\t\t@Nullable CompletableFuture<Void> terminationFuture) {\n \t\tthis.address = Preconditions.checkNotNull(address);\n \t\tthis.hostname = Preconditions.checkNotNull(hostname);", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "376e6647bb5cb36b5dd37d303a5ad7fb1460daa0", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\tcollisionPoints.get(2).set( this.getVertices()[10], this.getVertices()[11]);\n \t\tcollisionPoints.get(3).set( this.getVertices()[15], this.getVertices()[16]);\n\t\tcollisionCenter.set(collisionPoints.get(2)).scl(0.5f).add(collisionPoints.get(0));\n \t\tvelocity.scl( (float) Math.pow(0.97f, delta * 30.f));\n \t\tposition.add(velocity.x * delta, velocity.y * delta);", "fixed": " \t\tcollisionPoints.get(2).set( this.getVertices()[10], this.getVertices()[11]);\n \t\tcollisionPoints.get(3).set( this.getVertices()[15], this.getVertices()[16]);\n\t\tcollisionCenter.set(collisionPoints.get(0)).add(collisionPoints.get(2)).scl(0.5f);\n \t\tvelocity.scl( (float) Math.pow(0.97f, delta * 30.f));\n \t\tposition.add(velocity.x * delta, velocity.y * delta);", "sourceBeforeFix": "collisionPoints.get(2)", "sourceAfterFix": "collisionPoints.get(0)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d3a879a7ed73895620c2dbc6f6ea2b321ecc6574", "projectName": "apache.hive", "bugType": "More Specific If", "problem": "               HiveSemanticAnalyzerHook.class);\n      if (saHooks != null) {\n         HiveSemanticAnalyzerHookContext hookCtx = new HiveSemanticAnalyzerHookContextImpl();\n         hookCtx.setConf(conf);\n         hookCtx.setUserName(userName);", "fixed": "               HiveSemanticAnalyzerHook.class);\n      if (saHooks != null && !saHooks.isEmpty()) {\n         HiveSemanticAnalyzerHookContext hookCtx = new HiveSemanticAnalyzerHookContextImpl();\n         hookCtx.setConf(conf);\n         hookCtx.setUserName(userName);", "sourceBeforeFix": "saHooks != null", "sourceAfterFix": "saHooks != null && !saHooks.isEmpty()"}
{"fixCommitSHA1": "0f8c0e4ff5f80aab6ab653c9aaa5a97812d2ec7c", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     \n    @Resource(name=\"java:comp/ds\")\n     private DataSource dataSource2;\n     @Resource(lookup = \"java:app/DataSource\")\n     private DataSource dataSource3;\n    @Resource(name=\"org.jboss.as.test.integration.ee.datasourcedefinition.DataSourceBean/dataSource3\")\n     private DataSource dataSource4;", "fixed": "     \n    @Resource(lookup=\"java:comp/ds\")\n     private DataSource dataSource2;\n     @Resource(lookup = \"java:app/DataSource\")\n     private DataSource dataSource3;\n    @Resource(lookup=\"org.jboss.as.test.integration.ee.datasourcedefinition.DataSourceBean/dataSource3\")\n     private DataSource dataSource4;", "sourceBeforeFix": "name=\"org.jboss.as.test.integration.ee.datasourcedefinition.DataSourceBean/dataSource3\"", "sourceAfterFix": "lookup=\"org.jboss.as.test.integration.ee.datasourcedefinition.DataSourceBean/dataSource3\""}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2);\n }", "fixed": "     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "359aa1a0740d2b47d6ebdc70377b9fbdfa42c5df", "projectName": "alibaba.canal", "bugType": "Same Function More Args", "problem": "                     System.out.println(\"-------> before\");\n                     parseOneRow(event, buffer, columns, false);\n                    if (!buffer.nextOneRow(changeColumns)) {\n                         break;\n                     }\n                     System.out.println(\"-------> after\");", "fixed": "                     System.out.println(\"-------> before\");\n                     parseOneRow(event, buffer, columns, false);\n                    if (!buffer.nextOneRow(changeColumns, true)) {\n                         break;\n                     }\n                     System.out.println(\"-------> after\");", "sourceBeforeFix": "buffer.nextValue(info.type,info.meta)", "sourceAfterFix": "buffer.nextValue(null,i,info.type,info.meta)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "* @see\n* @see NormalizableKey\n \t */\n\tpublic void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "fixed": "* @see\n* @see NormalizableKey\n \t */\n\tpublic abstract void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "df0e14359abd61ff3a5713e5e12e116b3fb1c3ed", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " \t\n\tprivate static List<String> updateWarnings = null;\n \t/**\n \t * Convenience method to run the changesets using Liquibase to bring the database up to a", "fixed": " \t\n\tprivate static volatile List<String> updateWarnings = null;\n \t/**\n \t * Convenience method to run the changesets using Liquibase to bring the database up to a", "sourceBeforeFix": "10", "sourceAfterFix": "74"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "           sum += mBuf.get(pId % 16);\n           if (DEBUG_MODE) {\n            buf.DATA.flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();", "fixed": "           sum += mBuf.get(pId % 16);\n           if (DEBUG_MODE) {\n            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HttpEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedHttpEndpointBuilder advanced() {\n             return (AdvancedHttpEndpointBuilder) this;\n         }", "fixed": "     \n    public interface HttpEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedHttpEndpointBuilder advanced() {\n             return (AdvancedHttpEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3b75d00dafe4851195ddcd2f8810a18a55e43514", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": " \t\treturn getAnnotatedMethods(Test.class);\n \t}\n\tpublic List<Method> getBefores() {\n \t\treturn getAnnotatedMethods(BeforeClass.class);\n \t}\n\tpublic List<Method> getAfters() {\n \t\treturn getAnnotatedMethods(AfterClass.class);\n \t}", "fixed": " \t\treturn getAnnotatedMethods(Test.class);\n \t}\n\tList<Method> getBefores() {\n \t\treturn getAnnotatedMethods(BeforeClass.class);\n \t}\n\tList<Method> getAfters() {\n \t\treturn getAnnotatedMethods(AfterClass.class);\n \t}", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tAssert.assertTrue(paths.iterator().next().startsWith(\n\t\t\t\t(new Path(testBucket.getParent(), \".test-2.inprogress\").toString())));\n \t}\n \t@Test", "fixed": " \t\tAssert.assertTrue(paths.iterator().next().startsWith(\n\t\t\t\t(new Path(testBucket.getParent(), \".test-2.inprogress\").getPath())));\n \t}\n \t@Test", "sourceBeforeFix": "new Path(bucketPath,\"test-\" + i + '-'+ j).toString()", "sourceAfterFix": "new Path(bucketPath,\"test-\" + i + '-'+ j).getPath()"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.set(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "fixed": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.get(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "c98bab51de22a20990ff8805825e8638e0686464", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "   @Test\n   public void testOnlineConfigChange() throws IOException {\n     LOG.debug(\"Starting the test\");\n    Admin admin = TEST_UTIL.getHBaseAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();\n     admin.updateConfiguration(server);\n   }", "fixed": "   @Test\n   public void testOnlineConfigChange() throws IOException {\n     LOG.debug(\"Starting the test\");\n    Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();\n     admin.updateConfiguration(server);\n   }", "sourceBeforeFix": "TEST_UTIL.getHBaseAdmin()", "sourceAfterFix": "TEST_UTIL.getAdmin()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 190);\n     }\n     public void testStopWatchRestart() throws Exception {", "fixed": "         taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 150);\n     }\n     public void testStopWatchRestart() throws Exception {", "sourceBeforeFix": "taken > 190", "sourceAfterFix": "taken > 150"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastQueueEndpointBuilder\n             extends\n                 HazelcastQueueEndpointConsumerBuilder, HazelcastQueueEndpointProducerBuilder {\n         default AdvancedHazelcastQueueEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastQueueEndpointBuilder\n             extends\n                 HazelcastQueueEndpointConsumerBuilder, HazelcastQueueEndpointProducerBuilder {\n         default AdvancedHazelcastQueueEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixValueEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtomixValueEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AtomixValueEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtomixValueEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "96961c021dc60e796dbf823d29db5f62c70356b7", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "         numberId = p.getProperty(\"numberid.user\");\n         numberPass = p.getProperty(\"numberid.password\");\n        numberIdId = Integer.valueOf(p.getProperty(\"numberid.id\"));\n         twitter1 = new TwitterFactory(conf1).getInstance();", "fixed": "         numberId = p.getProperty(\"numberid.user\");\n         numberPass = p.getProperty(\"numberid.password\");\n        numberIdId = Long.valueOf(p.getProperty(\"numberid.id\"));\n         twitter1 = new TwitterFactory(conf1).getInstance();", "sourceBeforeFix": "Integer.valueOf(p.getProperty(\"numberid.id\"))", "sourceAfterFix": "Long.valueOf(p.getProperty(\"numberid.id\"))"}
{"fixCommitSHA1": "5cc0714840bf8f7797a118e4bac5dabdd20e3f67", "projectName": "apache.hbase", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  protected boolean areSomeRegionReplicasColocated(Cluster c) {\n     regionReplicaHostCostFunction.init(c);\n     if (regionReplicaHostCostFunction.cost() > 0) return true;\n     regionReplicaRackCostFunction.init(c);", "fixed": "   }\n   @Override\n  protected synchronized boolean areSomeRegionReplicasColocated(Cluster c) {\n     regionReplicaHostCostFunction.init(c);\n     if (regionReplicaHostCostFunction.cost() > 0) return true;\n     regionReplicaRackCostFunction.init(c);", "sourceBeforeFix": "4", "sourceAfterFix": "36"}
{"fixCommitSHA1": "9d87dbad9f0c649c8244586cfea3ca25731da893", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       traverseBranch(root, null);\n       popScope();\n    } catch (Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }", "fixed": "       traverseBranch(root, null);\n       popScope();\n    } catch (Error | Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }", "sourceBeforeFix": "Exception unexpectedException", "sourceAfterFix": "Throwable unexpectedException"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedEhcacheEndpointBuilder\n             extends\n                 AdvancedEhcacheEndpointConsumerBuilder, AdvancedEhcacheEndpointProducerBuilder {\n         default EhcacheEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedEhcacheEndpointBuilder\n             extends\n                 AdvancedEhcacheEndpointConsumerBuilder, AdvancedEhcacheEndpointProducerBuilder {\n         default EhcacheEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JcrEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJcrEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface JcrEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJcrEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "ec5961a27122b228cb8adb634ee183eebcefa98c", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "   private LinkedHashMap<String,partitionDesc> pathToPartitionInfo;\n  private HashMap<String,Operator<? extends Serializable>> aliasToWork;", "fixed": "   private LinkedHashMap<String,partitionDesc> pathToPartitionInfo;\n  private LinkedHashMap<String,Operator<? extends Serializable>> aliasToWork;", "sourceBeforeFix": "HashMap<String,Operator<? extends Serializable>>", "sourceAfterFix": "LinkedHashMap<String,Operator<? extends Serializable>>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "53694f29adf8c68992e1b966c86380219f438c14", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(100);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(200)"}
{"fixCommitSHA1": "ccbc0a97414992cb1b7d84a2283d2aaa7278f3a5", "projectName": "Atmosphere.atmosphere", "bugType": "Change Numeric Literal", "problem": "     @Override\n     protected void onSocketClosed(WebSocket socket) throws IOException {\n         logger.trace(\"WebSocket.onSocketClosed.\");\n        webSocketProcessor.close(webSocket, 0);\n     }\n     @Override", "fixed": "     @Override\n     protected void onSocketClosed(WebSocket socket) throws IOException {\n         logger.trace(\"WebSocket.onSocketClosed.\");\n        webSocketProcessor.close(webSocket, 1000);\n     }\n     @Override", "sourceBeforeFix": "webSocketProcessor.close(webSocket,0)", "sourceAfterFix": "webSocketProcessor.close(webSocket,1000)"}
{"fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(littleEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "fixed": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0656040933973f55afa8b6e8f53140b6f76b7446", "projectName": "apache.hive", "bugType": "Change Unary Operator\t", "problem": "   @org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public static class add_write_notification_log_args implements org.apache.thrift.TBase<add_write_notification_log_args, add_write_notification_log_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_write_notification_log_args>   {\n     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"add_write_notification_log_args\");\n    private static final org.apache.thrift.protocol.TField RQST_FIELD_DESC = new org.apache.thrift.protocol.TField(\"rqst\", org.apache.thrift.protocol.TType.STRUCT, (short)-1);\n     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n     static {", "fixed": "   @org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public static class add_write_notification_log_args implements org.apache.thrift.TBase<add_write_notification_log_args, add_write_notification_log_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_write_notification_log_args>   {\n     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"add_write_notification_log_args\");\n    private static final org.apache.thrift.protocol.TField RQST_FIELD_DESC = new org.apache.thrift.protocol.TField(\"rqst\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n     static {", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a421ca3133ddf727a147e87455a5511444d8d4bb", "projectName": "google.auto", "bugType": "Change Caller in Function Call", "problem": "             if (interfaceMethod.getModifiers().contains(Modifier.ABSTRACT)) {\n               ExecutableType methodType = Elements2.getExecutableElementAsMemberOf(\n                   types, interfaceMethod, implementingType);\n              implemetationMethodDescriptors.add(new ImplemetationMethodDescriptor.Builder()\n                   .name(interfaceMethod.getSimpleName().toString())\n                   .returnType(getAnnotatedType(element).getQualifiedName().toString())\n                   .publicMethod()", "fixed": "             if (interfaceMethod.getModifiers().contains(Modifier.ABSTRACT)) {\n               ExecutableType methodType = Elements2.getExecutableElementAsMemberOf(\n                   types, interfaceMethod, implementingType);\n              implementationMethodDescriptors.add(new ImplementationMethodDescriptor.Builder()\n                   .name(interfaceMethod.getSimpleName().toString())\n                   .returnType(getAnnotatedType(element).getQualifiedName().toString())\n                   .publicMethod()", "sourceBeforeFix": "implemetationMethodDescriptors.build()", "sourceAfterFix": "implementationMethodDescriptors.build()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void display(GL2 gl, GLU glu) {\n         markTime++;\n         VizModel vizModel = VizController.getInstance().getVizModel();", "fixed": "     }\n     @Override\n    public synchronized void display(GL2 gl, GLU glu) {\n         markTime++;\n         VizModel vizModel = VizController.getInstance().getVizModel();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see NormalizableKey\n \t */\n\tpublic void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "fixed": " \t * \n* @see NormalizableKey\n \t */\n\tpublic abstract void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "3c136fbd9f79b179f010322aff8ed2b829209db8", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n        assertEquals(fc, fc2);\n     }\n }", "fixed": "         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n        assertEquals(fc2, fc);\n     }\n }", "sourceBeforeFix": "assertEquals(fc,fc2)", "sourceAfterFix": "assertEquals(fc2,fc)"}
{"fixCommitSHA1": "39fe5a830bb4e05a85bef3e52115c708f9409abf", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    TestSuiteEnvironment.getServerAddress(), serverPort);\n         }\n         protected abstract Policy getPolicy();", "fixed": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    CONTAINER_0.equals(containerId) ? TestSuiteEnvironment.getServerAddress() : TestSuiteEnvironment.getServerAddressNode1(),\n                    serverPort);\n         }\n         protected abstract Policy getPolicy();", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales() throws APIException;\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "fixed": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales();\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.debug(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "fixed": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "sourceBeforeFix": "logger.debug(\"myq ReturnCode: {}\",returnCode)", "sourceAfterFix": "logger.trace(\"myq ReturnCode: {}\",returnCode)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WsEndpointBuilder\n             extends\n                 WsEndpointConsumerBuilder, WsEndpointProducerBuilder {\n         default AdvancedWsEndpointBuilder advanced() {", "fixed": "     \n    public interface WsEndpointBuilder\n             extends\n                 WsEndpointConsumerBuilder, WsEndpointProducerBuilder {\n         default AdvancedWsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "28a04af5f4b957b75ba7dbf6486999b75547673c", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t}\r\n \tprivate void getTiles (int startX, int startY, int endX, int endY, Array<Rectangle> tiles) {\r\n\t\tTiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get(1);\r\n \t\trectPool.freeAll(tiles);\r\n \t\ttiles.clear();\r\n \t\tfor (int y = startY; y <= endY; y++) {\r", "fixed": " \t}\r\n \tprivate void getTiles (int startX, int startY, int endX, int endY, Array<Rectangle> tiles) {\r\n\t\tTiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get(\"walls\");\r\n \t\trectPool.freeAll(tiles);\r\n \t\ttiles.clear();\r\n \t\tfor (int y = startY; y <= endY; y++) {\r", "sourceBeforeFix": "isTouched(0.75f,1)", "sourceAfterFix": "isTouched(0.5f,1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"redis\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"redis\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "49203981ee544f1443c40991cc2adcf319345562", "projectName": "thinkaurelius.titan", "bugType": "Same Function More Args", "problem": "     public void testGraphTestSuite() throws Exception {\nthis.stopWatch();\n        doTestSuite(new GraphTestSuite(this), ImmutableSet.of(\"testStringRepresentation\"));\n         printTestPerformance(\"GraphTestSuite\", this.stopWatch());\n     }", "fixed": "     public void testGraphTestSuite() throws Exception {\nthis.stopWatch();\n        doTestSuite(new GraphTestSuite(this), ImmutableSet.of(\"testStringRepresentation\",\"testDataTypeValidationOnProperties\"));\n         printTestPerformance(\"GraphTestSuite\", this.stopWatch());\n     }", "sourceBeforeFix": "ImmutableSet.of(\"testStringRepresentation\")", "sourceAfterFix": "ImmutableSet.of(\"testStringRepresentation\",\"testDataTypeValidationOnProperties\")"}
{"fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "             return this;\n         }\n        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }", "fixed": "             return this;\n         }\n        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }", "sourceBeforeFix": "public DerivedBuilder setRealmDomain(String domain){   realm().setDomain(domain);   return this; } ", "sourceAfterFix": "public Builder setRealmDomain(String domain){   realm().setDomain(domain);   return this; } "}
{"fixCommitSHA1": "0656040933973f55afa8b6e8f53140b6f76b7446", "projectName": "apache.hive", "bugType": "Change Unary Operator\t", "problem": "        */\n       public static _Fields findByThriftId(int fieldId) {\n         switch(fieldId) {\ncase -1:\n             return RQST;\n           default:\n             return null;", "fixed": "        */\n       public static _Fields findByThriftId(int fieldId) {\n         switch(fieldId) {\ncase 1:\n             return RQST;\n           default:\n             return null;", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStream<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStream<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "fixed": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStreamSink<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "e69f5321a7a2a446599b1b8e6a7f3d45dfbfa9eb", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": " \t\tlogger.debug(\"Got RemoveFailedNode response.\");\n \t\tint nodeId = lastSentMessage.getMessagePayloadByte(0);\n\t\tswitch(incomingMessage.getMessagePayloadByte(1)) {\n \t\t\tcase FAILED_NODE_REMOVE_STARTED:\n \t\t\t\tlogger.debug(\"NODE {}: Remove failed node successfully placed on stack.\", nodeId);\n \t\t\t\tbreak;", "fixed": " \t\tlogger.debug(\"Got RemoveFailedNode response.\");\n \t\tint nodeId = lastSentMessage.getMessagePayloadByte(0);\n\t\tswitch(incomingMessage.getMessagePayloadByte(0)) {\n \t\t\tcase FAILED_NODE_REMOVE_STARTED:\n \t\t\t\tlogger.debug(\"NODE {}: Remove failed node successfully placed on stack.\", nodeId);\n \t\t\t\tbreak;", "sourceBeforeFix": "incomingMessage.getMessagePayloadByte(1)", "sourceAfterFix": "incomingMessage.getMessagePayloadByte(0)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9e76b5319ef9790d8bce27eacbc2aff4ba312cac", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         try {\n             InetAddress address = resolver.resolve(\"10.0.0.1\").syncUninterruptibly().getNow();\n            assertEquals(\"10.0.0.1\", address.getHostName());\n         } finally {\n             resolver.close();\n         }", "fixed": "         try {\n             InetAddress address = resolver.resolve(\"10.0.0.1\").syncUninterruptibly().getNow();\n            assertEquals(\"10.0.0.1\", address.getHostAddress());\n         } finally {\n             resolver.close();\n         }", "sourceBeforeFix": "address.getHostName()", "sourceAfterFix": "address.getHostAddress()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d08bf8738680178b111ce07d9b4593464125fe3a", "projectName": "yasserg.crawler4j", "bugType": "Less Specific If", "problem": "               webURL.setDepth((short) (curURL.getDepth() + 1));\n               if ((maxCrawlDepth == -1) || (curURL.getDepth() < maxCrawlDepth)) {\n                 if (shouldVisit(page, webURL)) {\n                  if (robotstxtServer.allows(webURL)) {\n                     webURL.setDocid(docIdServer.getNewDocID(webURL.getURL()));\n                     toSchedule.add(webURL);\n                   } else {", "fixed": "               webURL.setDepth((short) (curURL.getDepth() + 1));\n               if ((maxCrawlDepth == -1) || (curURL.getDepth() < maxCrawlDepth)) {\n                 if (shouldVisit(page, webURL)) {\n                  if (!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)) {\n                     webURL.setDocid(docIdServer.getNewDocID(webURL.getURL()));\n                     toSchedule.add(webURL);\n                   } else {", "sourceBeforeFix": "robotstxtServer.allows(webURL)", "sourceAfterFix": "!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)"}
{"fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "fixed": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "sourceBeforeFix": "final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); ", "sourceAfterFix": "final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); "}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tinvalidateHierarchy();\r\n \t}\r\n\tpublic String getText () {\r\n \t\treturn text;\r\n \t}\r", "fixed": " \t\tinvalidateHierarchy();\r\n \t}\r\n\tpublic CharSequence getText () {\r\n \t\treturn text;\r\n \t}\r", "sourceBeforeFix": "String text", "sourceAfterFix": "CharSequence text"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedTimerEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default TimerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedTimerEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default TimerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FlatpackEndpointBuilder\n             extends\n                 FlatpackEndpointConsumerBuilder, FlatpackEndpointProducerBuilder {\n         default AdvancedFlatpackEndpointBuilder advanced() {", "fixed": "     \n    public interface FlatpackEndpointBuilder\n             extends\n                 FlatpackEndpointConsumerBuilder, FlatpackEndpointProducerBuilder {\n         default AdvancedFlatpackEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5d105e75982c88ffc958ef9de14266ae8522a0f9", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "     final boolean useCache = query.getContextUseCache(true)\n         && strategy != null\n        && cacheConfig.isPopulateCache();\n     final Cache.NamedKey key;\n     if(strategy != null && (useCache || populateCache)) {", "fixed": "     final boolean useCache = query.getContextUseCache(true)\n         && strategy != null\n        && cacheConfig.isUseCache();\n     final Cache.NamedKey key;\n     if(strategy != null && (useCache || populateCache)) {", "sourceBeforeFix": "cacheConfig.isPopulateCache()", "sourceAfterFix": "cacheConfig.isUseCache()"}
{"fixCommitSHA1": "7e69b806137604da52bdded56b711041943a3893", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   static final DiagnosticType NOT_UNIQUE_INSTANTIATION =\n       DiagnosticType.warning(\n           \"JSC_NTI_NOT_UNIQUE_INSTANTIATION\",\n          \"Illegal instantiation in function type {0} for the type variable \"\n          + \"{1}.\\n You can only specify one type. Found {2}.\");\n   static final DiagnosticType FAILED_TO_UNIFY =\n       DiagnosticType.warning(", "fixed": "   static final DiagnosticType NOT_UNIQUE_INSTANTIATION =\n       DiagnosticType.warning(\n           \"JSC_NTI_NOT_UNIQUE_INSTANTIATION\",\n          \"When instantiating a polymorphic function,\"\n          + \" you can only specify one type for each type variable.\\n\"\n          + \" Found {0} types for type variable {1}: {2},\\n\"\n          + \" when instantiating type: {3}\");\n   static final DiagnosticType FAILED_TO_UNIFY =\n       DiagnosticType.warning(", "sourceBeforeFix": "funType.toString()", "sourceAfterFix": "Integer.toString(types.size())"}
{"fixCommitSHA1": "14b91c00dca45c89cac63abe46f38955cdca7b86", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "   @Override\n   public Future<Void> sendBinaryFrame(ByteBuf payload, boolean finalFragment, int rsv) {\n    return channel.writeAndFlush(new BinaryWebSocketFrame(payload));\n   }\n   @Override", "fixed": "   @Override\n   public Future<Void> sendBinaryFrame(ByteBuf payload, boolean finalFragment, int rsv) {\n    return channel.writeAndFlush(new BinaryWebSocketFrame(finalFragment, rsv, payload));\n   }\n   @Override", "sourceBeforeFix": "new BinaryWebSocketFrame(payload)", "sourceAfterFix": "new BinaryWebSocketFrame(finalFragment,rsv,payload)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"redis\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"redis\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface YammerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedYammerEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface YammerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedYammerEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bdd688e74669108b17f7f099ccaa14c3a9b5d333", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\t\t\tedge = new Edge(new PactString(rdfObj), new PactString(rdfSubj));\n \t\t\t}\n\t\t\ttarget.setField(1, edge);\n \t\t\tLOG.debug(\"Read in: \" + edge);\n \t\t\treturn true;", "fixed": " \t\t\t\tedge = new Edge(new PactString(rdfObj), new PactString(rdfSubj));\n \t\t\t}\n\t\t\ttarget.setField(0, edge);\n \t\t\tLOG.debug(\"Read in: \" + edge);\n \t\t\treturn true;", "sourceBeforeFix": "target.setField(1,edge)", "sourceAfterFix": "target.setField(0,edge)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "54b93387eecd50602f9c0e71d446aa5490d6a8fd", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * @return the created processor\n      * @throws Exception is thrown if error creating the processor\n      */\n    public Processor createBeanProcessor(CamelContext camelContext, Object bean, String beanType, Class<?> beanClass, String ref,\n                                          String method, boolean cacheBean) throws Exception;\n }", "fixed": "      * @return the created processor\n      * @throws Exception is thrown if error creating the processor\n      */\n    Processor createBeanProcessor(CamelContext camelContext, Object bean, String beanType, Class<?> beanClass, String ref,\n                                          String method, boolean cacheBean) throws Exception;\n }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "ccbc0a97414992cb1b7d84a2283d2aaa7278f3a5", "projectName": "Atmosphere.atmosphere", "bugType": "Change Numeric Literal", "problem": "             } else if (frame instanceof CloseFrame) {\n                 logger.trace(\"WebSocket.onReceivedFrame (CloseFrame)\");\n                webSocketProcessor.close(webSocket, 0);\n             } else {\n                 logger.trace(\"WebSocket.onReceivedFrame skipping: \" + frame);\n             }", "fixed": "             } else if (frame instanceof CloseFrame) {\n                 logger.trace(\"WebSocket.onReceivedFrame (CloseFrame)\");\n                webSocketProcessor.close(webSocket, 1000);\n             } else {\n                 logger.trace(\"WebSocket.onReceivedFrame skipping: \" + frame);\n             }", "sourceBeforeFix": "webSocketProcessor.close(webSocket,0)", "sourceAfterFix": "webSocketProcessor.close(webSocket,1000)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n \t/**\n \t * Save the given list of global properties to the database.", "fixed": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t/**\n \t * Save the given list of global properties to the database.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "b366b2fb1840d4df542a69a8021a2e5498f7eec2", "projectName": "google.guava", "bugType": "Same Function Swap Args", "problem": "             assertNull(q.peek());\n             assertNull(q.poll());\n             assertNull(q.poll(0, MILLISECONDS));\n            assertEquals(q.toString(), \"[]\");\n             assertTrue(Arrays.equals(q.toArray(), new Object[0]));\n             assertFalse(q.iterator().hasNext());\n             try {", "fixed": "             assertNull(q.peek());\n             assertNull(q.poll());\n             assertNull(q.poll(0, MILLISECONDS));\n      assertEquals(\"[]\", q.toString());\n             assertTrue(Arrays.equals(q.toArray(), new Object[0]));\n             assertFalse(q.iterator().hasNext());\n             try {", "sourceBeforeFix": "assertEquals(q.toString(),\"[]\")", "sourceAfterFix": "assertEquals(\"[]\",q.toString())"}
{"fixCommitSHA1": "a207330fb2009b7e9b273d9a0b18518c9da7eea6", "projectName": "hazelcast.hazelcast", "bugType": "Delete Throws Exception", "problem": "     @Test\n     @SuppressWarnings(\"deprecation\")\n    public void testQueryWithTTL() throws Exception {\n         Config config = getConfig();\n         String mapName = \"default\";\n        config.getMapConfig(mapName).setTimeToLiveSeconds(5);\n         HazelcastInstance instance = createHazelcastInstance(config);", "fixed": "     @Test\n     @SuppressWarnings(\"deprecation\")\n    public void testQueryWithTTL() {\n         Config config = getConfig();\n         String mapName = \"default\";\n        config.getMapConfig(mapName).setTimeToLiveSeconds(10);\n         HazelcastInstance instance = createHazelcastInstance(config);", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedIgniteMessagingEndpointBuilder\n             extends\n                 AdvancedIgniteMessagingEndpointConsumerBuilder, AdvancedIgniteMessagingEndpointProducerBuilder {\n         default IgniteMessagingEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedIgniteMessagingEndpointBuilder\n             extends\n                 AdvancedIgniteMessagingEndpointConsumerBuilder, AdvancedIgniteMessagingEndpointProducerBuilder {\n         default IgniteMessagingEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4633bbc0240015345b63f1ca91afffcb6c727838", "projectName": "apache.hive", "bugType": "Change Numeric Literal", "problem": "   private static String sparkHome = \"/home/xzhang/apache/spark\";\n  private static int reducerCount = 5;\n   private static String execMem = \"1g\";\n   private static String execJvmOpts = \"\";", "fixed": "   private static String sparkHome = \"/home/xzhang/apache/spark\";\n  private static int reducerCount = 1;\n   private static String execMem = \"1g\";\n   private static String execJvmOpts = \"\";", "sourceBeforeFix": "reducerCount=5", "sourceAfterFix": "reducerCount=1"}
{"fixCommitSHA1": "a421ca3133ddf727a147e87455a5511444d8d4bb", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "           if (supertypeMethod.getModifiers().contains(Modifier.ABSTRACT)) {\n             ExecutableType methodType = Elements2.getExecutableElementAsMemberOf(\n                 types, supertypeMethod, extendingType);\n            implemetationMethodDescriptors.add(new ImplemetationMethodDescriptor.Builder()\n                 .name(supertypeMethod.getSimpleName().toString())\n                 .returnType(getAnnotatedType(element).getQualifiedName().toString())\n                 .publicMethod()", "fixed": "           if (supertypeMethod.getModifiers().contains(Modifier.ABSTRACT)) {\n             ExecutableType methodType = Elements2.getExecutableElementAsMemberOf(\n                 types, supertypeMethod, extendingType);\n            implementationMethodDescriptors.add(new ImplementationMethodDescriptor.Builder()\n                 .name(supertypeMethod.getSimpleName().toString())\n                 .returnType(getAnnotatedType(element).getQualifiedName().toString())\n                 .publicMethod()", "sourceBeforeFix": "ImmutableSet.Builder<ImplemetationMethodDescriptor>", "sourceAfterFix": "ImmutableSet.Builder<ImplementationMethodDescriptor>"}
{"fixCommitSHA1": "d08bf8738680178b111ce07d9b4593464125fe3a", "projectName": "yasserg.crawler4j", "bugType": "Less Specific If", "problem": "             webURL.setDocid(-1);\n             webURL.setAnchor(curURL.getAnchor());\n             if (shouldVisit(page, webURL)) {\n              if (robotstxtServer.allows(webURL)) {\n                 webURL.setDocid(docIdServer.getNewDocID(movedToUrl));\n                 frontier.schedule(webURL);\n               } else {", "fixed": "             webURL.setDocid(-1);\n             webURL.setAnchor(curURL.getAnchor());\n             if (shouldVisit(page, webURL)) {\n              if (!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)) {\n                 webURL.setDocid(docIdServer.getNewDocID(movedToUrl));\n                 frontier.schedule(webURL);\n               } else {", "sourceBeforeFix": "robotstxtServer.allows(webURL)", "sourceAfterFix": "!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "b330578175d6cc317cbfea7caf4fab521d66ffaf", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "         }\n     }\n    private class BlockingCallback implements AuthenticationCallback {\n         private final CountDownLatch countDownLatch = new CountDownLatch(1);\n         private Connection connection;", "fixed": "         }\n     }\n    private static class BlockingCallback implements AuthenticationCallback {\n         private final CountDownLatch countDownLatch = new CountDownLatch(1);\n         private Connection connection;", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f5fe5ae0a963ee7db95d1f459280017de281af8f", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     if (blockSizeByte > 0) {\n       return (int) mFSMasterClient.createFile(path.getPath(), blockSizeByte, recursive);\n     } else {\n      return (int) mFSMasterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.getPath(),\n           blockSizeByte, recursive);\n     }\n   }", "fixed": "     if (blockSizeByte > 0) {\n       return (int) mFSMasterClient.createFile(path.getPath(), blockSizeByte, recursive);\n     } else {\n      return (int) mFSMasterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.toString(),\n           blockSizeByte, recursive);\n     }\n   }", "sourceBeforeFix": "ufsPath.getPath()", "sourceAfterFix": "ufsPath.toString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tif (!nsDictionary.writeToFileAtomically(file.getAbsolutePath(), false)) {\r\n \t\t\tGdx.app.debug(\"IOSPreferences\", \"Failed to write NSDictionary to file \" + file);\r\n \t\t}\r\n\t\tpool.dealloc();\r\n \t}\r\n }\r", "fixed": " \t\tif (!nsDictionary.writeToFileAtomically(file.getAbsolutePath(), false)) {\r\n \t\t\tGdx.app.debug(\"IOSPreferences\", \"Failed to write NSDictionary to file \" + file);\r\n \t\t}\r\n\t\tpool.drain();\r\n \t}\r\n }\r", "sourceBeforeFix": "NSString value=(NSString)nsDictionary.get(convertKey(key)); ", "sourceAfterFix": "Object value=nsDictionary.get(convertKey(key)); "}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": "     }\n     if (!isProperlyConfigured) {\n      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n     if (!isConnected()) {\n      logger.error(\"InfluxDB is not yet connected\");\n       return;\n     }", "fixed": "     }\n     if (!isProperlyConfigured) {\n      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n     if (!isConnected()) {\n      logger.warn(\"InfluxDB is not yet connected\");\n       return;\n     }", "sourceBeforeFix": "logger.error(\"Configuration for influxdb not yet loaded or broken.\")", "sourceAfterFix": "logger.warn(\"Configuration for influxdb not yet loaded or broken.\")"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastMapEndpointBuilder\n             extends\n                 AdvancedHazelcastMapEndpointConsumerBuilder, AdvancedHazelcastMapEndpointProducerBuilder {\n         default HazelcastMapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastMapEndpointBuilder\n             extends\n                 AdvancedHazelcastMapEndpointConsumerBuilder, AdvancedHazelcastMapEndpointProducerBuilder {\n         default HazelcastMapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "bd2e348b7cb07ad4e855dac912c550e9799370e4", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         };\n     }\n    private static interface I1 {\n         String m1(@Header(\"foo\")String h1, @Header(\"bar\")String h2);\n         String m2(@Header(\"foo\")String h1, String h2);\n     }\n    private static interface I2 {\n         String m2(String h1, @Header(\"bar\")String h2);\n         String m3(@Header(\"foo\")String h1, String h2);\n         String m4(@Header(\"foo\")String h1, String h2);", "fixed": "         };\n     }\n    private interface I1 {\n         String m1(@Header(\"foo\")String h1, @Header(\"bar\")String h2);\n         String m2(@Header(\"foo\")String h1, String h2);\n     }\n    private interface I2 {\n         String m2(String h1, @Header(\"bar\")String h2);\n         String m3(@Header(\"foo\")String h1, String h2);\n         String m4(@Header(\"foo\")String h1, String h2);", "sourceBeforeFix": "10", "sourceAfterFix": "2"}
{"fixCommitSHA1": "734c7a8318f516e4825fd72ab53699f96fabbe68", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void testNoConcurrentProducers() throws Exception {\n        Thread.sleep(1000);\n         doSendMessages(1, 1);\n     }", "fixed": "     @Test\n     public void testNoConcurrentProducers() throws Exception {\n        Thread.sleep(2000);\n         doSendMessages(1, 1);\n     }", "sourceBeforeFix": "Thread.sleep(1000)", "sourceAfterFix": "Thread.sleep(2000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7a98001b7097bd4b0778e22cc1f9f140013edf16", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     private static final int GRPC_ASYNC_REQUEST_TEST_PORT = AvailablePortFinder.getNextAvailable();\n     private static final int GRPC_HEADERS_TEST_PORT = AvailablePortFinder.getNextAvailable();\n    private static final int CONCURRENT_THREAD_COUNT = 300;\n     private static final int ROUNDS_PER_THREAD_COUNT = 10;\n     private static final String GRPC_TEST_PING_VALUE = \"PING\";\n     private static final String GRPC_TEST_PONG_VALUE = \"PONG\";", "fixed": "     private static final int GRPC_ASYNC_REQUEST_TEST_PORT = AvailablePortFinder.getNextAvailable();\n     private static final int GRPC_HEADERS_TEST_PORT = AvailablePortFinder.getNextAvailable();\n    private static final int CONCURRENT_THREAD_COUNT = 30;\n     private static final int ROUNDS_PER_THREAD_COUNT = 10;\n     private static final String GRPC_TEST_PING_VALUE = \"PING\";\n     private static final String GRPC_TEST_PONG_VALUE = \"PONG\";", "sourceBeforeFix": "CONCURRENT_THREAD_COUNT=300", "sourceAfterFix": "CONCURRENT_THREAD_COUNT=30"}
{"fixCommitSHA1": "5303dec13d7b0336f282e02dce4d169c7acc6fcf", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       int i = 0;\n       for (FileStatus status : files) {\n        rtn[i++] =  new UnderFileStatus(status.getPath().getName(), status.isDirectory());\n       }\n       return rtn;\n     } else {", "fixed": "       int i = 0;\n       for (FileStatus status : files) {\n        rtn[i++] =  new UnderFileStatus(status.getPath().getName(), status.isDir());\n       }\n       return rtn;\n     } else {", "sourceBeforeFix": "status.isDirectory()", "sourceAfterFix": "status.isDir()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n         verify(checkConfig,\n                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n     }\n     @Test", "fixed": "         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n         verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "eb4fd212d3307ddbab60a5acccef6473dfa0490f", "projectName": "springside.springside4", "bugType": "Same Function Less Args", "problem": " \tpublic List<BookDto> listAllBook(Pageable pageable) {\r\n \t\tIterable<Book> books = adminService.findAll(pageable);\r\n\t\treturn BeanMapper.mapList(books, Book.class,BookDto.class);\r\n \t}\r\n \t@RequestMapping(value = \"/api/books/{id}\", produces = MediaTypes.JSON_UTF_8)\r", "fixed": " \tpublic List<BookDto> listAllBook(Pageable pageable) {\r\n \t\tIterable<Book> books = adminService.findAll(pageable);\r\n\t\treturn BeanMapper.mapList(books, BookDto.class);\r\n \t}\r\n \t@RequestMapping(value = \"/api/books/{id}\", produces = MediaTypes.JSON_UTF_8)\r", "sourceBeforeFix": "BeanMapper.mapList(books,Book.class,BookDto.class)", "sourceAfterFix": "BeanMapper.mapList(books,BookDto.class)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedXQueryEndpointBuilder\n             extends\n                 AdvancedXQueryEndpointConsumerBuilder, AdvancedXQueryEndpointProducerBuilder {\n         default XQueryEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedXQueryEndpointBuilder\n             extends\n                 AdvancedXQueryEndpointConsumerBuilder, AdvancedXQueryEndpointProducerBuilder {\n         default XQueryEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n     /**", "fixed": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n     /**", "sourceBeforeFix": "id=15808", "sourceAfterFix": "id=10808"}
{"fixCommitSHA1": "a9b27a843588d61921e7f75182fa737a1402cf05", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "             return;\n         }\n        URL newOverride = oldOverride.removeParameter(\"enabled\");\n         registryService.unregister(oldOverride);\n         registryService.register(newOverride);", "fixed": "             return;\n         }\n        URL newOverride = oldOverride.addParameter(\"enabled\", \"enabled\");\n         registryService.unregister(oldOverride);\n         registryService.register(newOverride);", "sourceBeforeFix": "oldOverride.removeParameter(\"enabled\")", "sourceAfterFix": "oldOverride.addParameter(\"enabled\",\"enabled\")"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();", "fixed": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();", "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"fixCommitSHA1": "b0662ce83b466318ce8dcec13428846b1b190aaf", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n                    ClientConnection current = connections.putIfAbsent(address, clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;", "fixed": "                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n                    ClientConnection current = connections.putIfAbsent(clientConnection.getRemoteEndpoint(), clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;", "sourceBeforeFix": "connections.get(address)", "sourceAfterFix": "connections.get(target)"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService);\n \t\trpcEndpoint.start();\n\t\tCompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\tassertFalse(terminationFuture.isDone());", "fixed": " \t\tfinal DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService);\n \t\trpcEndpoint.start();\n\t\tCompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\tassertFalse(terminationFuture.isDone());", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    private static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "6c922fdae1b08d7dcf2fac9f7b4dd1452a5e1fd4", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": " import io.swagger.codegen.SupportingFile;\n public class TypeScriptJqueryClientCodegen extends AbstractTypeScriptClientCodegen {\n    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptNodeClientCodegen.class);\n     private static final SimpleDateFormat SNAPSHOT_SUFFIX_FORMAT = new SimpleDateFormat(\"yyyyMMddHHmm\");\n     public static final String NPM_NAME = \"npmName\";", "fixed": " import io.swagger.codegen.SupportingFile;\n public class TypeScriptJqueryClientCodegen extends AbstractTypeScriptClientCodegen {\n    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptJqueryClientCodegen.class);\n     private static final SimpleDateFormat SNAPSHOT_SUFFIX_FORMAT = new SimpleDateFormat(\"yyyyMMddHHmm\");\n     public static final String NPM_NAME = \"npmName\";", "sourceBeforeFix": "TypeScriptNodeClientCodegen.class", "sourceAfterFix": "TypeScriptJqueryClientCodegen.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SalesforceEndpointBuilder\n             extends\n                 SalesforceEndpointConsumerBuilder, SalesforceEndpointProducerBuilder {\n         default AdvancedSalesforceEndpointBuilder advanced() {", "fixed": "     \n    public interface SalesforceEndpointBuilder\n             extends\n                 SalesforceEndpointConsumerBuilder, SalesforceEndpointProducerBuilder {\n         default AdvancedSalesforceEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedConsulEndpointBuilder\n             extends\n                 AdvancedConsulEndpointConsumerBuilder, AdvancedConsulEndpointProducerBuilder {\n         default ConsulEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedConsulEndpointBuilder\n             extends\n                 AdvancedConsulEndpointConsumerBuilder, AdvancedConsulEndpointProducerBuilder {\n         default ConsulEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ChunkEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedChunkEndpointBuilder advanced() {\n             return (AdvancedChunkEndpointBuilder) this;\n         }", "fixed": "     \n    public interface ChunkEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedChunkEndpointBuilder advanced() {\n             return (AdvancedChunkEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n    assertEquals(4, stopwatch.elapsedMillis());\n   }\n   public void testElapsedMillis_multipleSegments() {", "fixed": "     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n    assertEquals(4, stopwatch.elapsed(MILLISECONDS));\n   }\n   public void testElapsedMillis_multipleSegments() {", "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "69bf835b58721b263b5ecaca7de2c327e3c29d7f", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     }\n     @Override\n    public void dispatchEvent(ReplicationMessage event, ReplicatedMessageListener listener) {\n         listener.onMessage(event);\n     }", "fixed": "     }\n     @Override\n    public void dispatchEvent(IdentifiedDataSerializable event, ReplicatedMessageListener listener) {\n         listener.onMessage(event);\n     }", "sourceBeforeFix": "ReplicationMessage event", "sourceAfterFix": "IdentifiedDataSerializable event"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t@Override\r\n \tpublic Preferences putLong (String key, long val) {\r\n\t\tnsDictionary.put(convertKey(key), NSNumber.numberWithLong(val));\r\n \t\treturn this;\r\n \t}\r", "fixed": " \t@Override\r\n \tpublic Preferences putLong (String key, long val) {\r\n\t\tnsDictionary.put(convertKey(key), NSNumber.numberWithLongLong(val));\r\n \t\treturn this;\r\n \t}\r", "sourceBeforeFix": "NSString value=(NSString)nsDictionary.get(convertKey(key)); ", "sourceAfterFix": "Object value=nsDictionary.get(convertKey(key)); "}
{"fixCommitSHA1": "f0fa093ebc7f7d1b0b9beb254f6531bb77310853", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "             initEndpointMapper();\n             autoDetectContainer();\n            configureWebDotXmlAtmosphereHandler(sc);\n             asyncSupport.init(scFacade);\n             initAtmosphereHandler(scFacade);\n            configureAtmosphereInterceptor(sc);\n             analytics();\n             if (broadcasterCacheClassName == null) {", "fixed": "             initEndpointMapper();\n             autoDetectContainer();\n            configureWebDotXmlAtmosphereHandler(scFacade);\n             asyncSupport.init(scFacade);\n             initAtmosphereHandler(scFacade);\n            configureAtmosphereInterceptor(scFacade);\n             analytics();\n             if (broadcasterCacheClassName == null) {", "sourceBeforeFix": "configureAtmosphereInterceptor(sc)", "sourceAfterFix": "configureAtmosphereInterceptor(scFacade)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixSetEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtomixSetEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AtomixSetEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtomixSetEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "af87fe0e2580cafb6b563688f119b3d40ae100f2", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "fixed": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddressNode1(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "34a77d610669e59e9d5ab77c47908f907806e05f", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY, testUser, testUser, files[3].getPermission(),", "fixed": "         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY, testUser, testUser, files[3].getPermission(),", "sourceBeforeFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)", "sourceAfterFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface InfinispanEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedInfinispanEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface InfinispanEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedInfinispanEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d2b1bc5c1f0762f06b72792cbf2885b40599d905", "projectName": "naver.pinpoint", "bugType": "Wrong Function Name", "problem": "                 String trace = traceInText.get(i);\n                 String[] tokens = trace.split(\",\");\n                stackTrace[i] = new StackTraceElement(tokens[0], tokens[1], tokens[2], Integer.valueOf(tokens[3]));\n             }\n             return new ChildProcessException(exceptionClass + \": \" + message, stackTrace);", "fixed": "                 String trace = traceInText.get(i);\n                 String[] tokens = trace.split(\",\");\n                stackTrace[i] = new StackTraceElement(tokens[0], tokens[1], tokens[2], Integer.parseInt(tokens[3]));\n             }\n             return new ChildProcessException(exceptionClass + \": \" + message, stackTrace);", "sourceBeforeFix": "Integer.valueOf(tokens[3])", "sourceAfterFix": "Integer.parseInt(tokens[3])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a5b05566ebeb1504da6579b21f424fbb45a56148", "projectName": "apache.flink", "bugType": "Change Boolean Literal", "problem": " \tpublic static InfoOptions parseInfoCommand(String[] args) throws CliArgsException {\n \t\ttry {\n \t\t\tPosixParser parser = new PosixParser();\n\t\t\tCommandLine line = parser.parse(INFO_OPTIONS, args, false);\n \t\t\treturn new InfoOptions(line);\n \t\t}\n \t\tcatch (ParseException e) {", "fixed": " \tpublic static InfoOptions parseInfoCommand(String[] args) throws CliArgsException {\n \t\ttry {\n \t\t\tPosixParser parser = new PosixParser();\n\t\t\tCommandLine line = parser.parse(INFO_OPTIONS, args, true);\n \t\t\treturn new InfoOptions(line);\n \t\t}\n \t\tcatch (ParseException e) {", "sourceBeforeFix": "parser.parse(INFO_OPTIONS,args,false)", "sourceAfterFix": "parser.parse(INFO_OPTIONS,args,true)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NsqEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedNsqEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface NsqEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedNsqEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastMapEndpointBuilder\n             extends\n                 AdvancedHazelcastMapEndpointConsumerBuilder, AdvancedHazelcastMapEndpointProducerBuilder {\n         default HazelcastMapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastMapEndpointBuilder\n             extends\n                 AdvancedHazelcastMapEndpointConsumerBuilder, AdvancedHazelcastMapEndpointProducerBuilder {\n         default HazelcastMapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glGenTextures (int n, int[] textures, int offset) {\n\t\tGL.glGenTexturesEXT(n, toBuffer(textures, offset), 0);\n \t}\n \tpublic void glGetIntegerv (int pname, int[] params, int offset) {", "fixed": " \t}\n \tpublic void glGenTextures (int n, int[] textures, int offset) {\n\t\tGL.glGenTextures(n, toBuffer(textures, offset), 0);\n \t}\n \tpublic void glGetIntegerv (int pname, int[] params, int offset) {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "96fb5a7c7069d08d5bdeac92a8170530cda68407", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                 if (!consumers.isEmpty()) {\n                     Exchange exchange = createExchange();\n                    exchange.getIn().setBody(body.getData());\n                     exchange.setProperty(configuration.getMqttTopicPropertyName(), topic.toString());\n                     for (MQTTConsumer consumer : consumers) {\n                         try {", "fixed": "                 if (!consumers.isEmpty()) {\n                     Exchange exchange = createExchange();\n                    exchange.getIn().setBody(body.toByteArray());\n                     exchange.setProperty(configuration.getMqttTopicPropertyName(), topic.toString());\n                     for (MQTTConsumer consumer : consumers) {\n                         try {", "sourceBeforeFix": "body.getData()", "sourceAfterFix": "body.toByteArray()"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTextureEXT(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "fixed": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTexture(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)", "sourceAfterFix": "GL.glGenTextures(n,toBuffer(textures,offset),0)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformiv(program,location,params)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "5141440bbd267ca954b19b990b77781b7795bd7b", "projectName": "apache.storm", "bugType": "Change Numeric Literal", "problem": "     public void consumeBatchWhenAvailable(EventHandler<Object> handler) {\n         try {\n             final long nextSequence = _consumer.get() + 1;\n            final long availableSequence = _barrier.waitFor(nextSequence, 10, TimeUnit.MILLISECONDS);\n             if(availableSequence >= nextSequence) {\n                 consumeBatchToCursor(availableSequence, handler);\n             }", "fixed": "     public void consumeBatchWhenAvailable(EventHandler<Object> handler) {\n         try {\n             final long nextSequence = _consumer.get() + 1;\n            final long availableSequence = _barrier.waitFor(nextSequence, 1000, TimeUnit.MILLISECONDS);\n             if(availableSequence >= nextSequence) {\n                 consumeBatchToCursor(availableSequence, handler);\n             }", "sourceBeforeFix": "_barrier.waitFor(nextSequence,10,TimeUnit.MILLISECONDS)", "sourceAfterFix": "_barrier.waitFor(nextSequence,1000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "2663f70f687240ee3d4c4c9d54a769ebff12c9ce", "projectName": "openmrs.openmrs-core", "bugType": "More Specific If", "problem": " \t\tif (reasonForExitConcept != null && patient.getPatientId() != null) {\r\n \t\t\tList<Obs> patientExitObs = Context.getObsService().getObservationsByPersonAndConcept(patient, reasonForExitConcept);\r\n\t\t\tif (patientExitObs != null) {\r\n \t\t\t\tlog.debug(\"Exit obs is size \" + patientExitObs.size());\r\n \t\t\t\tif (patientExitObs.size() == 1) {\r\n \t\t\t\t\tObs exitObs = patientExitObs.iterator().next();\r", "fixed": " \t\tif (reasonForExitConcept != null && patient.getPatientId() != null) {\r\n \t\t\tList<Obs> patientExitObs = Context.getObsService().getObservationsByPersonAndConcept(patient, reasonForExitConcept);\r\n\t\t\tif (patientExitObs != null && patientExitObs.size() > 0) {\r\n \t\t\t\tlog.debug(\"Exit obs is size \" + patientExitObs.size());\r\n \t\t\t\tif (patientExitObs.size() == 1) {\r\n \t\t\t\t\tObs exitObs = patientExitObs.iterator().next();\r", "sourceBeforeFix": "patientExitObs != null", "sourceAfterFix": "patientExitObs != null && patientExitObs.size() > 0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomixMultiMapEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AtomixMultiMapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomixMultiMapEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AtomixMultiMapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "9a0a814c76eb7b63376625513c16a8c91c045afb", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "     @Override\r\n     public byte[] decodeMessage() {\r\n        byte[] data = new byte[16];\r\n         data[0] = 0x10;\r\n         data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();\r", "fixed": "     @Override\r\n     public byte[] decodeMessage() {\r\n        byte[] data = new byte[17];\r\n         data[0] = 0x10;\r\n         data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();\r", "sourceBeforeFix": "new byte[16]", "sourceAfterFix": "new byte[17]"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page4 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 2, 4);\n         assertThat(page4.pagination().getCount()).isEqualTo(1);\n        assertThat(page4.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page4.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\");", "fixed": "         final PaginatedList<TestDTO> page4 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 2, 4);\n         assertThat(page4.pagination().getCount()).isEqualTo(1);\n        assertThat(page4.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page4.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\");", "sourceBeforeFix": "assertThat(page4.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page4.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "f408cdd9b3a169c323e90bca58b349f256dbe82d", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     @Override\n     protected MBeanServerConnection getMBeanServer() throws Exception {\n        MBeanServerConnectionProvider provider = new MBeanServerConnectionProvider(InetAddress.getLocalHost(), 1090);\n         return provider.getConnection();\n     }\n }", "fixed": "     @Override\n     protected MBeanServerConnection getMBeanServer() throws Exception {\n        MBeanServerConnectionProvider provider = new MBeanServerConnectionProvider(InetAddress.getByName(\"127.0.0.1\"), 1090);\n         return provider.getConnection();\n     }\n }", "sourceBeforeFix": "InetAddress.getLocalHost()", "sourceAfterFix": "InetAddress.getByName(\"127.0.0.1\")"}
{"fixCommitSHA1": "d33c0ebf8f8f52fb6fb82d615cec50a10627d267", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n\t\t\tthis.port = port.toString();\n \t\t}\n\t\tpublic String getPort() {\n \t\t\treturn this.port;\n \t\t}", "fixed": " \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n\t\t\tthis.port = port;\n \t\t}\n\t\tpublic Integer getPort() {\n \t\t\treturn this.port;\n \t\t}", "sourceBeforeFix": "public String getPort(){   return this.port; } ", "sourceAfterFix": "public Integer getPort(){   return this.port; } "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "032efde651a14f8175861d96a10a26b8948f5a54", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     public void kill() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n            instance.managementService.unregister();\n             instance.node.shutdown(true, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);", "fixed": "     public void kill() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n            instance.managementService.destroy();\n             instance.node.shutdown(true, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);", "sourceBeforeFix": "instance.managementService.unregister()", "sourceAfterFix": "instance.managementService.destroy()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void mouseClick() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection && !customSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "fixed": "     }\n     @Override\n    public synchronized void mouseClick() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection && !customSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "53694f29adf8c68992e1b966c86380219f438c14", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(100);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(200)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAsteriskEndpointBuilder\n             extends\n                 AdvancedAsteriskEndpointConsumerBuilder, AdvancedAsteriskEndpointProducerBuilder {\n         default AsteriskEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAsteriskEndpointBuilder\n             extends\n                 AdvancedAsteriskEndpointConsumerBuilder, AdvancedAsteriskEndpointProducerBuilder {\n         default AsteriskEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDisruptorEndpointBuilder\n             extends\n                 AdvancedDisruptorEndpointConsumerBuilder, AdvancedDisruptorEndpointProducerBuilder {\n         default DisruptorEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDisruptorEndpointBuilder\n             extends\n                 AdvancedDisruptorEndpointConsumerBuilder, AdvancedDisruptorEndpointProducerBuilder {\n         default DisruptorEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "fixed": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "sourceBeforeFix": "final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); ", "sourceAfterFix": "final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); "}
{"fixCommitSHA1": "db5a771e90739dd0e121f45aff09f383a225113b", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Binary Operator", "problem": "       }\n     }\n     boolean overwriteOriginalNer = false;\n    if (prevNerEndIndex != (start-1) || nextNerStartIndex != end) {\n     } else if (startNer == null) {", "fixed": "       }\n     }\n     boolean overwriteOriginalNer = false;\n    if (prevNerEndIndex != (start-1) && nextNerStartIndex != end) {\n     } else if (startNer == null) {", "sourceBeforeFix": "prevNerEndIndex != (start - 1) || nextNerStartIndex != end", "sourceAfterFix": "prevNerEndIndex != (start - 1) && nextNerStartIndex != end"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "fixed": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(timeout)", "sourceAfterFix": "Long.parseLong(timeout)"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(2000L)\r\n                     .batchSize(5)\r", "fixed": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(500L)\r\n                     .batchSize(5)\r", "sourceBeforeFix": "result.expectedMessageCount(3)", "sourceAfterFix": "result.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "a13c4373a5e57d322b143516b493e84f14909fec", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(15, tokens.size());\n   }\n   @Test", "fixed": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(13, tokens.size());\n   }\n   @Test", "sourceBeforeFix": "assertEquals(15,tokens.size())", "sourceAfterFix": "assertEquals(13,tokens.size())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "d97984fe97b0374bc9b4ba271b5aaab08e256fe6", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         assertEquals(\"sample-tag-key\", aws.getTagKey());\n         assertEquals(\"sample-tag-value\", aws.getTagValue());\n        assertFalse(\"reuse-address\", networkConfig.isReuseAddress());\n     }", "fixed": "         assertEquals(\"sample-tag-key\", aws.getTagKey());\n         assertEquals(\"sample-tag-value\", aws.getTagValue());\n        assertTrue(\"reuse-address\", networkConfig.isReuseAddress());\n     }", "sourceBeforeFix": "assertFalse(\"reuse-address\",networkConfig.isReuseAddress())", "sourceAfterFix": "assertTrue(\"reuse-address\",networkConfig.isReuseAddress())"}
{"fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     }\n   }\n  private void removeModel(Map<Integer, Integer> model, Range<Integer> range) {\n     for (int i = MIN_BOUND - 1; i <= MAX_BOUND + 1; i++) {\n       if (range.contains(i)) {\n         model.remove(i);", "fixed": "     }\n   }\n  private static void removeModel(Map<Integer, Integer> model, Range<Integer> range) {\n     for (int i = MIN_BOUND - 1; i <= MAX_BOUND + 1; i++) {\n       if (range.contains(i)) {\n         model.remove(i);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   private void externExports() {\n    logger.info(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n     ExternExportsPass pass = new ExternExportsPass(this);", "fixed": "   }\n   private void externExports() {\n    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n     ExternExportsPass pass = new ExternExportsPass(this);", "sourceBeforeFix": "logger.info(\"Recording function information\")", "sourceAfterFix": "logger.fine(\"Recording function information\")"}
{"fixCommitSHA1": "70f209a2202f1bf5a560c510615d598a4d4d4cc0", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "  * Represents a suppressor for matches.\n  * @author oliver\n  */\ninterface MatchSuppressor {\n     /**\n      * Checks if the specified selection should be suppressed.\n      * @param startLineNo the starting line number", "fixed": "  * Represents a suppressor for matches.\n  * @author oliver\n  */\npublic interface MatchSuppressor {\n     /**\n      * Checks if the specified selection should be suppressed.\n      * @param startLineNo the starting line number", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesDeploymentsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesDeploymentsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KubernetesDeploymentsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesDeploymentsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         context.stop();\n         List<MessagePayload> events = nagios.getMessagePayloadList();\n        assertTrue(\"Should be 12+ events, was: \" + events.size(), events.size() >= 12);\n     }\n     @Test", "fixed": "         context.stop();\n         List<MessagePayload> events = nagios.getMessagePayloadList();\n        assertTrue(\"Should be 11+ events, was: \" + events.size(), events.size() >= 11);\n     }\n     @Test", "sourceBeforeFix": "notifier.getConfiguration().setPort(25667)", "sourceAfterFix": "notifier.getConfiguration().setPort(25669)"}
{"fixCommitSHA1": "00617d3c125c64c8f7b4e7550bad32f1678bd061", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\ttaskDefinition.setStarted(false);\n\t\t\tsaveTask(taskDefinition);\n \t\t}\n \t}", "fixed": " \t\t\ttaskDefinition.setStarted(false);\n\t\t\tsaveTaskDefinition(taskDefinition);\n \t\t}\n \t}", "sourceBeforeFix": "saveTask(taskDefinition)", "sourceAfterFix": "saveTaskDefinition(taskDefinition)"}
{"fixCommitSHA1": "27fd2f243c6ed593596d06ca42e1892059ae6ffc", "projectName": "perwendel.spark", "bugType": "Wrong Function Name", "problem": "     @Test\n     public void wontFindBook() {\n         try {\n            doMethod(\"GET\", \"/books/\" + bookId, null);\n         } catch (Exception e) {\n             if (e instanceof FileNotFoundException) {\n                 assertTrue(true);", "fixed": "     @Test\n     public void wontFindBook() {\n         try {\n            getResponse(\"GET\", \"/books/\" + bookId, null);\n         } catch (Exception e) {\n             if (e instanceof FileNotFoundException) {\n                 assertTrue(true);", "sourceBeforeFix": "doMethod(\"GET\",\"/books/\" + bookId,null)", "sourceAfterFix": "getResponse(\"GET\",\"/books/\" + bookId,null)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedBeanValidatorEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default BeanValidatorEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedBeanValidatorEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default BeanValidatorEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "38782cdd828011b64db92c95bb231e80a303c28b", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "     }\n     public void setCountDirect(String name, int count) {\n        if (count <= 0) {\n             latches.remove(name);\n         } else {\n             CountDownLatchInfo latch = latches.get(name);", "fixed": "     }\n     public void setCountDirect(String name, int count) {\n        if (count < 0) {\n             latches.remove(name);\n         } else {\n             CountDownLatchInfo latch = latches.get(name);", "sourceBeforeFix": "count <= 0", "sourceAfterFix": "count < 0"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "fixed": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "3b0e5ccc430c5ae4187e6139535c32cc17bb2a2b", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 formatDataRate(executionStats.getCompletedDataSize(), elapsedTime, false),\n                 max(0, executionStats.getSplits() - executionStats.getStartedSplits()),\n                max(0, executionStats.getSplits() - executionStats.getCompletedSplits()),\n                 executionStats.getCompletedSplits());\n         reprintLine(stageSummary);", "fixed": "                 formatDataRate(executionStats.getCompletedDataSize(), elapsedTime, false),\n                 max(0, executionStats.getSplits() - executionStats.getStartedSplits()),\n                max(0, executionStats.getStartedSplits() - executionStats.getCompletedSplits()),\n                 executionStats.getCompletedSplits());\n         reprintLine(stageSummary);", "sourceBeforeFix": "globalExecutionStats.getSplits()", "sourceAfterFix": "globalExecutionStats.getStartedSplits()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a2e9823d1c81937fea9a5a72f6ee8c073eeeb100", "projectName": "openhab.openhab", "bugType": "Less Specific If", "problem": " \t\t\t\tList<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();\n\t\t\t\tif(configList.size() == 0) {\n \t\t\t\t\tbreak;\n \t\t\t\t}", "fixed": " \t\t\t\tList<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();\n\t\t\t\tif(configList == null || configList.size() == 0) {\n \t\t\t\t\tbreak;\n \t\t\t\t}", "sourceBeforeFix": "configList.size() == 0", "sourceAfterFix": "configList == null || configList.size() == 0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "40a36841e2ed139a2a8714ccdafcaee49693f48f", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "                 grpbyExpr, new TypeCheckCtx(groupByInputRowResolver));\n             ExprNodeDesc grpbyExprNDesc = astToExprNDescMap.get(grpbyExpr);\n             if (grpbyExprNDesc == null)\n              throw new RuntimeException(\"Invalid Column Reference: \" + grpbyExpr.dump());\n             addToGBExpr(groupByOutputRowResolver, groupByInputRowResolver, grpbyExpr,\n                 grpbyExprNDesc, gbExprNDescLst, outputColumnNames);", "fixed": "                 grpbyExpr, new TypeCheckCtx(groupByInputRowResolver));\n             ExprNodeDesc grpbyExprNDesc = astToExprNDescMap.get(grpbyExpr);\n             if (grpbyExprNDesc == null)\n              throw new OptiqSemanticException(\"Invalid Column Reference: \" + grpbyExpr.dump());\n             addToGBExpr(groupByOutputRowResolver, groupByInputRowResolver, grpbyExpr,\n                 grpbyExprNDesc, gbExprNDescLst, outputColumnNames);", "sourceBeforeFix": "new RuntimeException(\"Invalid Column Reference: \" + grpbyExpr.dump())", "sourceAfterFix": "new OptiqSemanticException(\"Invalid Column Reference: \" + grpbyExpr.dump())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a9bf05f5e1a198ca52e50bdd9280cf53fdbdc728", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Numeric Literal", "problem": "          TestElf.setSlf4jTargetStream(LeakTask.class, ps);\n          Connection connection = ds.getConnection();\n         PoolUtilities.quietlySleep(TimeUnit.SECONDS.toMillis(3));\n          ps.close();\n          connection.close();\n          String s = new String(baos.toByteArray());", "fixed": "          TestElf.setSlf4jTargetStream(LeakTask.class, ps);\n          Connection connection = ds.getConnection();\n         PoolUtilities.quietlySleep(TimeUnit.SECONDS.toMillis(4));\n          ps.close();\n          connection.close();\n          String s = new String(baos.toByteArray());", "sourceBeforeFix": "TimeUnit.SECONDS.toMillis(3)", "sourceAfterFix": "TimeUnit.SECONDS.toMillis(4)"}
{"fixCommitSHA1": "8352100cc39e3bf451341eff335e40db930c2aa7", "projectName": "clojure.clojure", "bugType": "More Specific If", "problem": " \telse if(key instanceof Number && (coll instanceof String || coll.getClass().isArray()))\n \t\t{\n \t\tint n = ((Number) key).intValue();\n\t\tif(n < count(coll))\n \t\t\treturn nth(coll, n);\n \t\treturn null;\n \t\t}", "fixed": " \telse if(key instanceof Number && (coll instanceof String || coll.getClass().isArray()))\n \t\t{\n \t\tint n = ((Number) key).intValue();\n\t\tif(n >= 0 && n < count(coll))\n \t\t\treturn nth(coll, n);\n \t\treturn null;\n \t\t}", "sourceBeforeFix": "n < count(coll)", "sourceAfterFix": "n >= 0 && n < count(coll)"}
{"fixCommitSHA1": "886096e8fc457546dd4071295b7c5cce2d722ecc", "projectName": "javaee-samples.javaee7-samples", "bugType": "Change Identifier Used", "problem": "                 MyManagedScheduledBatchBean.class,\n                 MyManagedScheduledBatchAlternative.class)\n             .addAsWebInfResource(\n                new StringAsset(beansXml.createAlternatives().clazz(\n                     MyManagedScheduledBatchAlternative.class.getName()).up().exportAsString()),\n                 beansXml.getDescriptorName())\n             .addAsResource(\"META-INF/batch-jobs/myJob.xml\");", "fixed": "                 MyManagedScheduledBatchBean.class,\n                 MyManagedScheduledBatchAlternative.class)\n             .addAsWebInfResource(\n                new StringAsset(beansXml.getOrCreateAlternatives().clazz(\n                     MyManagedScheduledBatchAlternative.class.getName()).up().exportAsString()),\n                 beansXml.getDescriptorName())\n             .addAsResource(\"META-INF/batch-jobs/myJob.xml\");", "sourceBeforeFix": "beansXml.createAlternatives()", "sourceAfterFix": "beansXml.getOrCreateAlternatives()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Configuration\n\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "fixed": " \t}\n \t@Configuration\n\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fe992fa69dd155ed3a98c0848026d0fd35aa6e57", "projectName": "antlr.antlr4", "bugType": "Change Identifier Used", "problem": " \t\t\thaveOutputDir = true;\n \t\t\tif (outDir.exists() && !outDir.isDirectory()) {\n \t\t\t\terrMgr.toolError(ErrorType.OUTPUT_DIR_IS_FILE, outputDirectory);\n\t\t\t\tlibDirectory = \".\";\n \t\t\t}\n \t\t}\n \t\telse {", "fixed": " \t\t\thaveOutputDir = true;\n \t\t\tif (outDir.exists() && !outDir.isDirectory()) {\n \t\t\t\terrMgr.toolError(ErrorType.OUTPUT_DIR_IS_FILE, outputDirectory);\n\t\t\t\toutputDirectory = \".\";\n \t\t\t}\n \t\t}\n \t\telse {", "sourceBeforeFix": "libDirectory=\".\"", "sourceAfterFix": "outputDirectory=\".\""}
{"fixCommitSHA1": "0656040933973f55afa8b6e8f53140b6f76b7446", "projectName": "apache.hive", "bugType": "Change Unary Operator\t", "problem": "   @org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public static class add_write_notification_log_args implements org.apache.thrift.TBase<add_write_notification_log_args, add_write_notification_log_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_write_notification_log_args>   {\n     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"add_write_notification_log_args\");\n    private static final org.apache.thrift.protocol.TField RQST_FIELD_DESC = new org.apache.thrift.protocol.TField(\"rqst\", org.apache.thrift.protocol.TType.STRUCT, (short)-1);\n     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n     static {", "fixed": "   @org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public static class add_write_notification_log_args implements org.apache.thrift.TBase<add_write_notification_log_args, add_write_notification_log_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_write_notification_log_args>   {\n     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"add_write_notification_log_args\");\n    private static final org.apache.thrift.protocol.TField RQST_FIELD_DESC = new org.apache.thrift.protocol.TField(\"rqst\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n     static {", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "578bd281f8cb12f46ca902cd2b87b0838a831a90", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "         if (msg.getDate() == null) {\n             if (config.getBoolean(SyslogInputBase.CK_ALLOW_OVERRIDE_DATE)) {\n                LOG.info(\"Date could not be parsed. Was set to NOW because {} is true.\", SyslogInputBase.CK_ALLOW_OVERRIDE_DATE);\n                 return Tools.iso8601();\n             } else {\n                LOG.info(\"Syslog message is missing date or date could not be parsed. (Possibly set {} to true) \"\n                         + \"Not further handling. Message was: {}\", SyslogInputBase.CK_ALLOW_OVERRIDE_DATE, new String(msg.getRaw()));\n                 throw new IllegalStateException();\n             }", "fixed": "         if (msg.getDate() == null) {\n             if (config.getBoolean(SyslogInputBase.CK_ALLOW_OVERRIDE_DATE)) {\n                LOG.debug(\"Date could not be parsed. Was set to NOW because {} is true.\", SyslogInputBase.CK_ALLOW_OVERRIDE_DATE);\n                 return Tools.iso8601();\n             } else {\n                LOG.warn(\"Syslog message is missing date or date could not be parsed. (Possibly set {} to true) \"\n                         + \"Not further handling. Message was: {}\", SyslogInputBase.CK_ALLOW_OVERRIDE_DATE, new String(msg.getRaw()));\n                 throw new IllegalStateException();\n             }", "sourceBeforeFix": "LOG.error(\"Could not parse syslog message. Not further handling.\",e)", "sourceAfterFix": "LOG.warn(\"Could not parse syslog message. Not further handling.\",e)"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 Optional.empty());\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypes()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", \"b\")", "fixed": "                 Optional.empty());\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", \"b\")", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "24be4cdfe2a884863ae01bea386f7927120d88db", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * @param target the target buffer\r\n \t * @param numSamples the number of samples\r\n \t */\r\n\tpublic static native void convertToShort (FloatBuffer source, FloatBuffer target, int numSamples);\r\n \t/**\r\n \t * Converts the samples in source which are assumed to be interleaved left/right stereo samples to mono, writting the converted\r", "fixed": " \t * @param target the target buffer\r\n \t * @param numSamples the number of samples\r\n \t */\r\n\tpublic static native void convertToShort (FloatBuffer source, ShortBuffer target, int numSamples);\r\n \t/**\r\n \t * Converts the samples in source which are assumed to be interleaved left/right stereo samples to mono, writting the converted\r", "sourceBeforeFix": "FloatBuffer target", "sourceAfterFix": "ShortBuffer target"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "e981384cc21ca3c1958acd4b494a6ddd147c0a60", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             if (ssl.has(CommonAttributes.CIPHER_SUITE))\n                 config.setSslCiphers(ssl.get(CommonAttributes.CIPHER_SUITE).asString());\n             if (ssl.has(CommonAttributes.PROTOCOL))\n                config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString());\n             if (ssl.has(CommonAttributes.CA_CERTIFICATE_FILE))\n                 config.setSslTrustStore(ssl.get(CommonAttributes.CA_CERTIFICATE_FILE).asString());\n             if (ssl.has(CommonAttributes.CA_REVOCATION_URL))", "fixed": "             if (ssl.has(CommonAttributes.CIPHER_SUITE))\n                 config.setSslCiphers(ssl.get(CommonAttributes.CIPHER_SUITE).asString());\n             if (ssl.has(CommonAttributes.PROTOCOL))\n                config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString());\n             if (ssl.has(CommonAttributes.CA_CERTIFICATE_FILE))\n                 config.setSslTrustStore(ssl.get(CommonAttributes.CA_CERTIFICATE_FILE).asString());\n             if (ssl.has(CommonAttributes.CA_REVOCATION_URL))", "sourceBeforeFix": "config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString())", "sourceAfterFix": "config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastListEndpointBuilder\n             extends\n                 HazelcastListEndpointConsumerBuilder, HazelcastListEndpointProducerBuilder {\n         default AdvancedHazelcastListEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastListEndpointBuilder\n             extends\n                 HazelcastListEndpointConsumerBuilder, HazelcastListEndpointProducerBuilder {\n         default AdvancedHazelcastListEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "9fcb40a184ebe0dd1eea732b9a493e3e01ea53dc", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": " import com.puppycrawl.tools.checkstyle.api.AuditEvent;\n import com.puppycrawl.tools.checkstyle.api.Configuration;\npublic abstract class BaseCheckTestSupport {\n     ", "fixed": " import com.puppycrawl.tools.checkstyle.api.AuditEvent;\n import com.puppycrawl.tools.checkstyle.api.Configuration;\npublic class BaseCheckTestSupport {\n     ", "sourceBeforeFix": "1025", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "add3d66f29ca8b24efae3399ea84dd74bcac6266", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": " final class RedisProducer extends HeaderSelectorProducer {\n     private final Map<String, Processor> processors = new HashMap<>();\n    public RedisProducer(Endpoint endpoint,\n                          RedisClient redisClient,\n                          String header,\n                          String defaultHeaderValue,", "fixed": " final class RedisProducer extends HeaderSelectorProducer {\n     private final Map<String, Processor> processors = new HashMap<>();\n    RedisProducer(Endpoint endpoint,\n                          RedisClient redisClient,\n                          String header,\n                          String defaultHeaderValue,", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "fixed": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)", "sourceAfterFix": "GL.glGenTextures(n,toBuffer(textures,offset),0)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8616612734924c0a8a9781aed94669c866b12981", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         try {\n             final String echo = localEcho.echo(message);\n             Assert.fail(\"Remote invocation on a local view \" + LocalEcho.class.getName() + \" was expected to fail\");\n        } catch (EJBException nsee) {\n             logger.trace(\"Got the expected exception on invoking on a local view, remotely\", nsee);\n         }", "fixed": "         try {\n             final String echo = localEcho.echo(message);\n             Assert.fail(\"Remote invocation on a local view \" + LocalEcho.class.getName() + \" was expected to fail\");\n        } catch (IllegalStateException nsee) {\n             logger.trace(\"Got the expected exception on invoking on a local view, remotely\", nsee);\n         }", "sourceBeforeFix": "EJBException nsee", "sourceAfterFix": "IllegalStateException nsee"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void compact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    compact(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void compact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    compact(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableOrRegionName)"}
{"fixCommitSHA1": "5ace5adc6290fd840453b6044520ad328f6c9c3f", "projectName": "Bukkit.Bukkit", "bugType": "Change Numeric Literal", "problem": "     \n    BLACK('0', 0x01),\n     ", "fixed": "     \n    BLACK('0', 0x00),\n     ", "sourceBeforeFix": "/**   * Represents black  */ BLACK('0',0x01)", "sourceAfterFix": "/**   * Represents black  */ BLACK('0',0x00)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "03f8d3772fcdcd84ef8b8edd4a8e3cdc1e0c03df", "projectName": "antlr.antlr4", "bugType": "Change Binary Operator", "problem": "         sync(i);\n         int index = p + i - 1;\n         if ( index < 0 ) throw new IndexOutOfBoundsException();\n\t\tif ( index > n ) return IntStream.EOF;\n         char c = data[index];\n         if ( c==(char)IntStream.EOF ) return IntStream.EOF;\n         return c;", "fixed": "         sync(i);\n         int index = p + i - 1;\n         if ( index < 0 ) throw new IndexOutOfBoundsException();\n\t\tif ( index >= n ) return IntStream.EOF;\n         char c = data[index];\n         if ( c==(char)IntStream.EOF ) return IntStream.EOF;\n         return c;", "sourceBeforeFix": "index > n", "sourceAfterFix": "index >= n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0a8470b78e9a173775de0f3ab10fba81e3da106f", "projectName": "google.auto", "bugType": "Same Function Swap Args", "problem": "       for (int j = 0; j < versions.length; j++) {\n         int actual = Integer.signum(versions[i].compareTo(versions[j]));\n         int expected = Integer.signum(i - j);\n        assertEquals(actual, expected);\n       }\n     }\n   }", "fixed": "       for (int j = 0; j < versions.length; j++) {\n         int actual = Integer.signum(versions[i].compareTo(versions[j]));\n         int expected = Integer.signum(i - j);\n        assertEquals(expected, actual);\n       }\n     }\n   }", "sourceBeforeFix": "assertEquals(actual,expected)", "sourceAfterFix": "assertEquals(expected,actual)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedIgniteComputeEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default IgniteComputeEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedIgniteComputeEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default IgniteComputeEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "de8f91ad67b9881afc9f5af9cf9736b341bc3fbf", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "     @Test\n     public void testCoverage() {\n        assertEquals(JavadocTagInfo.VERSION.getType(), JavadocTagInfo.Type.BLOCK);\n         assertEquals(\"text [@version] name [version] type [BLOCK]\", JavadocTagInfo.VERSION.toString());", "fixed": "     @Test\n     public void testCoverage() {\n        assertEquals(JavadocTagInfo.Type.BLOCK, JavadocTagInfo.VERSION.getType());\n         assertEquals(\"text [@version] name [version] type [BLOCK]\", JavadocTagInfo.VERSION.toString());", "sourceBeforeFix": "assertEquals(JavadocTagInfo.VERSION.getType(),JavadocTagInfo.Type.BLOCK)", "sourceAfterFix": "assertEquals(JavadocTagInfo.Type.BLOCK,JavadocTagInfo.VERSION.getType())"}
{"fixCommitSHA1": "5ac2955ff4451c72db1e157dda76786f30511679", "projectName": "eclipse.vert.x", "bugType": "Change Numeric Literal", "problem": "     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n    int trafficClass = TestUtils.randomByte() + 127;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();", "fixed": "     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n    int trafficClass = TestUtils.randomByte() + 128;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();", "sourceBeforeFix": "TestUtils.randomByte() + 127", "sourceAfterFix": "TestUtils.randomByte() + 128"}
{"fixCommitSHA1": "93ec35952feb5bdcd58a7ac6ad0f07307ed0d367", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                 prop.getField().getJavaDoc().setFullText(option.getDescription());\n             }\n             if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getType())) {\n                     prop.getField().setStringInitializer(option.getDefaultValue());\n                 } else if (\"long\".equals(option.getJavaType()) || \"java.lang.Long\".equals(option.getJavaType())) {", "fixed": "                 prop.getField().getJavaDoc().setFullText(option.getDescription());\n             }\n             if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getJavaType())) {\n                     prop.getField().setStringInitializer(option.getDefaultValue());\n                 } else if (\"long\".equals(option.getJavaType()) || \"java.lang.Long\".equals(option.getJavaType())) {", "sourceBeforeFix": "option.getType()", "sourceAfterFix": "option.getJavaType()"}
{"fixCommitSHA1": "7bd1426548ed403be685f65b57179394d17cadcc", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 }\n                 if (plan.isMaterializedExchangeSource()) {\n                    writtenOutputPhysicalDataSize += stageStats.getPhysicalWrittenDataSize().toBytes();\n                 }\n                 else {\n                     writtenOutputPositions += stageInfo.getStageStats().getOperatorSummaries().stream()", "fixed": "                 }\n                 if (plan.isMaterializedExchangeSource()) {\n                    writtenIntermediatePhysicalDataSize += stageStats.getPhysicalWrittenDataSize().toBytes();\n                 }\n                 else {\n                     writtenOutputPositions += stageInfo.getStageStats().getOperatorSummaries().stream()", "sourceBeforeFix": "writtenOutputPhysicalDataSize+=stageStats.getPhysicalWrittenDataSize().toBytes()", "sourceAfterFix": "writtenIntermediatePhysicalDataSize+=stageStats.getPhysicalWrittenDataSize().toBytes()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glGetShader(shader,pname,params)", "sourceAfterFix": "GL20.glGetShaderiv(shader,pname,params)"}
{"fixCommitSHA1": "0b116a1a5ac6a369ab9622dce95c969ee591b809", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tthis.loggingSystem.initialize();\n \t\tjava.util.logging.Logger julLogger = java.util.logging.Logger\n \t\t\t\t.getLogger(getClass().getName());\n\t\tjulLogger.info(\"Hello world\");\n \t\tString output = this.output.toString().trim();\n \t\tassertTrue(\"Wrong output:\\n\" + output, output.contains(\"Hello world\"));\n \t}", "fixed": " \t\tthis.loggingSystem.initialize();\n \t\tjava.util.logging.Logger julLogger = java.util.logging.Logger\n \t\t\t\t.getLogger(getClass().getName());\n\t\tjulLogger.severe(\"Hello world\");\n \t\tString output = this.output.toString().trim();\n \t\tassertTrue(\"Wrong output:\\n\" + output, output.contains(\"Hello world\"));\n \t}", "sourceBeforeFix": "julLogger.info(\"Hello world\")", "sourceAfterFix": "julLogger.severe(\"Hello world\")"}
{"fixCommitSHA1": "e5018cb9442428734c68ec6e90894144be407cc1", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "      */\n     @Override\n     protected PlatformTransactionManager createTransactionManager() {\n        JmsTransactionManager answer = new JmsTransactionManager(getConnectionFactory());\n         answer.afterPropertiesSet();\n         return answer;\n     }", "fixed": "      */\n     @Override\n     protected PlatformTransactionManager createTransactionManager() {\n        JmsTransactionManager answer = new JmsTransactionManager(getOrCreateConnectionFactory());\n         answer.afterPropertiesSet();\n         return answer;\n     }", "sourceBeforeFix": "getConnectionFactory()", "sourceAfterFix": "getOrCreateConnectionFactory()"}
{"fixCommitSHA1": "fbbd169b6e8ac15010ea51ba6debef36299fc696", "projectName": "alibaba.fastjson", "bugType": "Change Identifier Used", "problem": " \t}\n     public boolean put(Object type, Object value) {\n        return put((Type)type, (ObjectDeserializer)value);\n     }\n \tpublic boolean put(Type type, ObjectSerializer value) {", "fixed": " \t}\n     public boolean put(Object type, Object value) {\n        return put((Type)type, (ObjectSerializer)value);\n     }\n \tpublic boolean put(Type type, ObjectSerializer value) {", "sourceBeforeFix": "(ObjectDeserializer)value", "sourceAfterFix": "(ObjectSerializer)value"}
{"fixCommitSHA1": "53b0527a5dd35cd2e36650a6352b882cc32f714f", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    * @throws IOException\n    */\n   public void put(Put put) throws IOException {\n    this.put(put, null, put.writeToWAL());\n   }\n   /**", "fixed": "    * @throws IOException\n    */\n   public void put(Put put) throws IOException {\n    this.put(put, null, put.getWriteToWAL());\n   }\n   /**", "sourceBeforeFix": "put.writeToWAL()", "sourceAfterFix": "put.getWriteToWAL()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "93b0ac77e59d936e91684ba016978a315d50d055", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \tpublic Item getItem(String name) throws ItemNotFoundException {\n \t\tfor(Collection<Item> items : itemMap.values()) {\n \t\t\tfor(Item item : items) {\n\t\t\t\tif(item.getName().matches(name)) {\n \t\t\t\t\treturn item;\n \t\t\t\t}\n \t\t\t}", "fixed": " \tpublic Item getItem(String name) throws ItemNotFoundException {\n \t\tfor(Collection<Item> items : itemMap.values()) {\n \t\t\tfor(Item item : items) {\n\t\t\t\tif(item.getName().equals(name)) {\n \t\t\t\t\treturn item;\n \t\t\t\t}\n \t\t\t}", "sourceBeforeFix": "item.getName().matches(name)", "sourceAfterFix": "item.getName().equals(name)"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface LumberjackEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedLumberjackEndpointBuilder advanced() {", "fixed": "     \n    public interface LumberjackEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedLumberjackEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     return CLIENT.user_getNumberOfFiles(folderPath);\n   }\n  public int user_mkdir(String path) \n       throws FileAlreadyExistException, InvalidPathException, TException {\n     return CLIENT.user_mkdir(path);\n   }", "fixed": "     return CLIENT.user_getNumberOfFiles(folderPath);\n   }\n  public synchronized int user_mkdir(String path) \n       throws FileAlreadyExistException, InvalidPathException, TException {\n     return CLIENT.user_mkdir(path);\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "6164a0cb8522b0bc75e3338364d25175d094937b", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "  */\n @SuppressWarnings(\"serial\")\n public class HConnectionManager {\n  static final int MAX_CACHED_HBASE_INSTANCES = 31;", "fixed": "  */\n @SuppressWarnings(\"serial\")\n public class HConnectionManager {\n  static final int MAX_CACHED_HBASE_INSTANCES = 2001;", "sourceBeforeFix": "MAX_CACHED_HBASE_INSTANCES=31", "sourceAfterFix": "MAX_CACHED_HBASE_INSTANCES=2001"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     AnonymousFunctionNamingCallback namingCallback =\n         new AnonymousFunctionNamingCallback(new MappedFunctionNamer());\n     NodeTraversal.traverse(compiler, root, namingCallback);\n    logger.info(\"Named \" + namedCount + \" anon functions using \" +\n         bytesUsed + \" bytes\");\n     if (namedCount > 0) {\n       compiler.reportCodeChange();", "fixed": "     AnonymousFunctionNamingCallback namingCallback =\n         new AnonymousFunctionNamingCallback(new MappedFunctionNamer());\n     NodeTraversal.traverse(compiler, root, namingCallback);\n    logger.fine(\"Named \" + namedCount + \" anon functions using \" +\n         bytesUsed + \" bytes\");\n     if (namedCount > 0) {\n       compiler.reportCodeChange();", "sourceBeforeFix": "logger.info(\"Named \" + namedCount + \" anon functions using \"+ bytesUsed+ \" bytes\")", "sourceAfterFix": "logger.fine(\"Named \" + namedCount + \" anon functions using \"+ bytesUsed+ \" bytes\")"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generatePositionEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "fixed": "                 .retInt();\n     }\n    private static void generatePositionEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     private class FileDropListener implements FileDrop.Listener {\n         private final JScrollPane scrollPane;\n        public FileDropListener(JScrollPane scrollPane) {\n             this.scrollPane = scrollPane;\n         }", "fixed": "     private class FileDropListener implements FileDrop.Listener {\n         private final JScrollPane scrollPane;\n        FileDropListener(JScrollPane scrollPane) {\n             this.scrollPane = scrollPane;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnablednHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "fixed": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mongo\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mongo\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"}
{"fixCommitSHA1": "4446595a8d326298e7d3ceda6472c84ababfc2ff", "projectName": "eclipse.vert.x", "bugType": "Change Identifier Used", "problem": "                 if (resultHandler != null) {\n                   resultHandler.handle(Future.failedFuture(asyncResult.cause()));\n                 } else {\n                  log.error(ar.cause());\n                 }\n              }\n             });", "fixed": "                 if (resultHandler != null) {\n                   resultHandler.handle(Future.failedFuture(asyncResult.cause()));\n                 } else {\n                  log.error(asyncResult.cause());\n                 }\n              }\n             });", "sourceBeforeFix": "ar.cause()", "sourceAfterFix": "asyncResult.cause()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fddee1afbed00ca766a88798f968d42a7411a34a", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "         double[] gradHidden = new double[config.hiddenSize];\n         for (int nodeIndex : ls) {\n           gradHidden[nodeIndex] = gradHidden3[nodeIndex] * 3 * hidden[nodeIndex] * hidden[nodeIndex];\n          gradb1[nodeIndex] += gradHidden3[nodeIndex];\n         }\n         offset = 0;", "fixed": "         double[] gradHidden = new double[config.hiddenSize];\n         for (int nodeIndex : ls) {\n           gradHidden[nodeIndex] = gradHidden3[nodeIndex] * 3 * hidden[nodeIndex] * hidden[nodeIndex];\n          gradb1[nodeIndex] += gradHidden[nodeIndex];\n         }\n         offset = 0;", "sourceBeforeFix": "gradHidden3[nodeIndex]", "sourceAfterFix": "gradHidden[nodeIndex]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Overridden to pass the new rowHeight to the tree.\n      */\n     @Override\n    public void setRowHeight(int newRowHeight) {\n         super.setRowHeight(newRowHeight);\n         if (tree != null && tree.getRowHeight() != newRowHeight) {\n             tree.setRowHeight(getRowHeight());", "fixed": "      * Overridden to pass the new rowHeight to the tree.\n      */\n     @Override\n    public final void setRowHeight(int newRowHeight) {\n         super.setRowHeight(newRowHeight);\n         if (tree != null && tree.getRowHeight() != newRowHeight) {\n             tree.setRowHeight(getRowHeight());", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "d833421e7191db98224e87b2e322745a4f4d3c80", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected R createRecord(Data key, Object value, long expiryTime,\n                              long now, boolean disableWriteThrough, int completionId, String origin) {\n        R record = createRecord(value, expiryTime);\n         try {\n             doPutRecord(key, record);\n         } catch (Throwable error) {", "fixed": "     protected R createRecord(Data key, Object value, long expiryTime,\n                              long now, boolean disableWriteThrough, int completionId, String origin) {\n        R record = createRecord(value, now, expiryTime);\n         try {\n             doPutRecord(key, record);\n         } catch (Throwable error) {", "sourceBeforeFix": "createRecord(value,expiryTime)", "sourceAfterFix": "createRecord(value,now,expiryTime)"}
{"fixCommitSHA1": "a36966d96196f3d64daa2809b7bc6077eedc5a9d", "projectName": "swagger-api.swagger-codegen", "bugType": "Same Function More Args", "problem": "     typeMapping.put(\"float\", \"Float\");\n     typeMapping.put(\"number\", \"Double\");\n     typeMapping.put(\"double\", \"Double\");\n    typeMapping.put(\"object\", \"String\");\n     typeMapping.put(\"file\", \"NSURL\");", "fixed": "     typeMapping.put(\"float\", \"Float\");\n     typeMapping.put(\"number\", \"Double\");\n     typeMapping.put(\"double\", \"Double\");\n    typeMapping.put(\"object\", \"AnyObject\");\n     typeMapping.put(\"file\", \"NSURL\");", "sourceBeforeFix": "Arrays.asList(\"Int\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\")", "sourceAfterFix": "Arrays.asList(\"Int\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\",\"AnyObject\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "298964dc444ecebcd230db6f6547bf62c9019a95", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     public void testExchangeDone() throws Exception {\n         getMockEndpoint(\"mock:result\").expectedMessageCount(1);\n        getMockEndpoint(\"mock:event\").expectedMessageCount(5);\n         template.sendBody(\"direct:start\", \"Hello World\");", "fixed": "     public void testExchangeDone() throws Exception {\n         getMockEndpoint(\"mock:result\").expectedMessageCount(1);\n        getMockEndpoint(\"mock:event\").expectedMessageCount(6);\n         template.sendBody(\"direct:start\", \"Hello World\");", "sourceBeforeFix": "getMockEndpoint(\"mock:event\").expectedMessageCount(5)", "sourceAfterFix": "getMockEndpoint(\"mock:event\").expectedMessageCount(6)"}
{"fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "projectName": "eclipse.vert.x", "bugType": "Same Function More Args", "problem": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException();\n   }\n }", "fixed": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n }", "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: succeeded\")"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Failed to look for classes in \" + jarFileName + \": \"+ ioEx)", "sourceAfterFix": "LOG.warn(\"Failed to look for classes in \" + jarFileName + \": \"+ ioEx)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n \t/**\n \t * Get a listing or important variables used in openmrs", "fixed": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t/**\n \t * Get a listing or important variables used in openmrs", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(timeout)", "sourceAfterFix": "Long.parseLong(timeout)"}
{"fixCommitSHA1": "2976be58f6062932d6c23e63af3d3b4395ac461a", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\tfor (int i = 0; i < SIZEOFLONG; ++i) {\nfinal int shift = i << 3;\n\t\t\tbyteBuffer.put((SIZEOFLONG - 1) - i, (byte) ((longToSerialize & (0xff << shift)) >>> shift));\n \t\t}\n \t}\n }", "fixed": " \t\tfor (int i = 0; i < SIZEOFLONG; ++i) {\nfinal int shift = i << 3;\n\t\t\tbyteBuffer.put((SIZEOFLONG - 1) - i, (byte) ((longToSerialize & (0xffL << shift)) >>> shift));\n \t\t}\n \t}\n }", "sourceBeforeFix": "0xff << shift", "sourceAfterFix": "0xffL << shift"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f40a8efd0788a6385a62ef5052f71f3e6b7db295", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t * \r\n \t * @return This vector for chaining */\r\n \tpublic Vector3 nor () {\r\n\t\tfloat len2 = this.len2();\r\n \t\tif (len2 == 0f || len2 == 1f)\r\n \t\t\treturn this;\r\n \t\treturn this.div((float)Math.sqrt(len2));\r", "fixed": " \t * \r\n \t * @return This vector for chaining */\r\n \tpublic Vector3 nor () {\r\n\t\tfinal float len2 = this.len2();\r\n \t\tif (len2 == 0f || len2 == 1f)\r\n \t\t\treturn this;\r\n \t\treturn this.div((float)Math.sqrt(len2));\r", "sourceBeforeFix": "y / vz", "sourceAfterFix": "z / vz"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid status value\", response = Void.class, responseContainer = \"List\") })\n    List<List<Pet>> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status);\n     @GET\n     @Path(\"/findByTags\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid status value\", response = Void.class, responseContainer = \"List\") })\n    List<Pet> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status) throws Exception;\n     @GET\n     @Path(\"/findByTags\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "fixed": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "68cd97ff6b0a506c2a2688c966c2a55870d6f466", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final HttpConnectionFactory http11 = buildHttpConnectionFactory(httpConfig);\n         final HTTP2ServerConnectionFactory http2c = new HTTP2CServerConnectionFactory(httpConfig);\n         http2c.setMaxConcurrentStreams(maxConcurrentStreams);\n        http2c.setInitialStreamSendWindow(initialStreamSendWindow);", "fixed": "         final HttpConnectionFactory http11 = buildHttpConnectionFactory(httpConfig);\n         final HTTP2ServerConnectionFactory http2c = new HTTP2CServerConnectionFactory(httpConfig);\n         http2c.setMaxConcurrentStreams(maxConcurrentStreams);\n        http2c.setInitialStreamRecvWindow(initialStreamSendWindow);", "sourceBeforeFix": "http2c.setInitialStreamSendWindow(initialStreamSendWindow)", "sourceAfterFix": "http2c.setInitialStreamRecvWindow(initialStreamSendWindow)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n \t/**\n \t * Get a listing or important variables used in openmrs", "fixed": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t/**\n \t * Get a listing or important variables used in openmrs", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "be46bcbdc1b71801e798e0d1ed0102fd1ff5d678", "projectName": "swagger-api.swagger-core", "bugType": "Same Function More Args", "problem": "         BASE_CLASSES = Collections.unmodifiableMap(baseClasses);\n         final Map<String, PrimitiveType> externalClasses = new HashMap<String, PrimitiveType>();\n        addKeys(externalClasses, DATE, \"org.joda.time.LocalDate\");\n         addKeys(externalClasses, DATE_TIME, \"org.joda.time.DateTime\", \"org.joda.time.ReadableDateTime\",\n                \"javax.xml.datatype.XMLGregorianCalendar\");\n         EXTERNAL_CLASSES = Collections.unmodifiableMap(externalClasses);\n         final Map<String, PrimitiveType> names = new TreeMap<String, PrimitiveType>(String.CASE_INSENSITIVE_ORDER);", "fixed": "         BASE_CLASSES = Collections.unmodifiableMap(baseClasses);\n         final Map<String, PrimitiveType> externalClasses = new HashMap<String, PrimitiveType>();\n        addKeys(externalClasses, DATE, \"org.joda.time.LocalDate\", \"java.time.LocalDate\");\n         addKeys(externalClasses, DATE_TIME, \"org.joda.time.DateTime\", \"org.joda.time.ReadableDateTime\",\n                \"javax.xml.datatype.XMLGregorianCalendar\", \"java.time.LocalDateTime\");\n         EXTERNAL_CLASSES = Collections.unmodifiableMap(externalClasses);\n         final Map<String, PrimitiveType> names = new TreeMap<String, PrimitiveType>(String.CASE_INSENSITIVE_ORDER);", "sourceBeforeFix": "addKeys(externalClasses,DATE,\"org.joda.time.LocalDate\")", "sourceAfterFix": "addKeys(externalClasses,DATE,\"org.joda.time.LocalDate\",\"java.time.LocalDate\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NettyHttpEndpointBuilder\n             extends\n                 NettyHttpEndpointConsumerBuilder, NettyHttpEndpointProducerBuilder {\n         default AdvancedNettyHttpEndpointBuilder advanced() {", "fixed": "     \n    public interface NettyHttpEndpointBuilder\n             extends\n                 NettyHttpEndpointConsumerBuilder, NettyHttpEndpointProducerBuilder {\n         default AdvancedNettyHttpEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGrpcEndpointBuilder\n             extends\n                 AdvancedGrpcEndpointConsumerBuilder, AdvancedGrpcEndpointProducerBuilder {\n         default GrpcEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGrpcEndpointBuilder\n             extends\n                 AdvancedGrpcEndpointConsumerBuilder, AdvancedGrpcEndpointProducerBuilder {\n         default GrpcEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c5edc0976145a61a5551053dfda8a8c3394100ee", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\tif (preferences.containsKey(name)) {\n \t\t\treturn preferences.get(name);\n \t\t} else {\n\t\t\tPreferences prefs = new LwjglPreferences(name);\n \t\t\tpreferences.put(name, prefs);\n \t\t\treturn prefs;\n \t\t}", "fixed": " \t\tif (preferences.containsKey(name)) {\n \t\t\treturn preferences.get(name);\n \t\t} else {\n\t\t\tPreferences prefs = new LwjglPreferences(name, \".prefs/\");\n \t\t\tpreferences.put(name, prefs);\n \t\t\treturn prefs;\n \t\t}", "sourceBeforeFix": "new LwjglPreferences(name)", "sourceAfterFix": "new LwjglPreferences(name,\".prefs/\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "projectName": "Atmosphere.atmosphere", "bugType": "Change Caller in Function Call", "problem": "         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n                 noOps,\n                DefaultAtmosphereRequest.newInstance(),\n                 response,\n                 config.framework().getAsyncSupport(),\n                 noOpsHandler);", "fixed": "         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n                 noOps,\n                AtmosphereRequest.newInstance(),\n                 response,\n                 config.framework().getAsyncSupport(),\n                 noOpsHandler);", "sourceBeforeFix": "DefaultAtmosphereRequest.newInstance()", "sourceAfterFix": "AtmosphereRequest.newInstance()"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @return True, if the given number of bytes for a normalized suffice to determine the order of elements,\n \t *         false otherwise.\n \t */\n\tpublic boolean isNormalizedKeyPrefixOnly(int keyBytes);\n \t/**\n \t * Writes a normalized key for the given record into the target byte array, starting at the specified position", "fixed": " \t * @return True, if the given number of bytes for a normalized suffice to determine the order of elements,\n \t *         false otherwise.\n \t */\n\tpublic abstract boolean isNormalizedKeyPrefixOnly(int keyBytes);\n \t/**\n \t * Writes a normalized key for the given record into the target byte array, starting at the specified position", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "688ef85a12d6cd61f3d7c77a637650255d70f227", "projectName": "Alluxio.alluxio", "bugType": "Change Unary Operator\t", "problem": "      * @return the builder\n      */\n     public Builder addProperty(PropertyKey key, String value) {\n      Preconditions.checkState(key.equals(PropertyKey.ZOOKEEPER_ENABLED),\n\"Enable Zookeeper via\n       mProperties.put(key, value);\n       return this;", "fixed": "      * @return the builder\n      */\n     public Builder addProperty(PropertyKey key, String value) {\n      Preconditions.checkState(!key.equals(PropertyKey.ZOOKEEPER_ENABLED),\n\"Enable Zookeeper via\n       mProperties.put(key, value);\n       return this;", "sourceBeforeFix": "key.equals(PropertyKey.ZOOKEEPER_ENABLED)", "sourceAfterFix": "!key.equals(PropertyKey.ZOOKEEPER_ENABLED)"}
{"fixCommitSHA1": "afa6f7a8df0dcac1bc942a4d98a63707b12764e6", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                 result = catalog.validateLanguagePredicate(null, \"simple\", detail.getSimple());\n             } else {\n                 getLog().debug(\"Validating simple expression: \" + detail.getSimple());\n                result = catalog.validateLanguagePredicate(null, \"simple\", detail.getSimple());\n             }\n             if (!result.isSuccess()) {\n                 simpleErrors++;", "fixed": "                 result = catalog.validateLanguagePredicate(null, \"simple\", detail.getSimple());\n             } else {\n                 getLog().debug(\"Validating simple expression: \" + detail.getSimple());\n                result = catalog.validateLanguageExpression(null, \"simple\", detail.getSimple());\n             }\n             if (!result.isSuccess()) {\n                 simpleErrors++;", "sourceBeforeFix": "catalog.validateLanguagePredicate(null,\"simple\",detail.getSimple())", "sourceAfterFix": "catalog.validateLanguageExpression(null,\"simple\",detail.getSimple())"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RabbitMQEndpointBuilder\n             extends\n                 RabbitMQEndpointConsumerBuilder, RabbitMQEndpointProducerBuilder {\n         default AdvancedRabbitMQEndpointBuilder advanced() {", "fixed": "     \n    public interface RabbitMQEndpointBuilder\n             extends\n                 RabbitMQEndpointConsumerBuilder, RabbitMQEndpointProducerBuilder {\n         default AdvancedRabbitMQEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e9fbd7f493863da1e68776473d8b5d03861daa6f", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\t\tLOG.debug(\"Initializing sortmerger...\");\n \t\t\tSorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,\n\t\t\t\tthis.parentTask, this.serializer, this.comparator, 32 * 1024 * 1024);\n\t\t\trunPartialSorter(sorter, NUM_RECORDS, 28);\n \t\t}\n \t\tcatch (Exception t) {\n \t\t\tt.printStackTrace();", "fixed": " \t\t\tLOG.debug(\"Initializing sortmerger...\");\n \t\t\tSorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,\n\t\t\t\tthis.parentTask, this.serializer, this.comparator, 10 * 1024 * 1024);\n\t\t\trunPartialSorter(sorter, NUM_RECORDS, 25);\n \t\t}\n \t\tcatch (Exception t) {\n \t\t\tt.printStackTrace();", "sourceBeforeFix": "32 * 1024 * 1024", "sourceAfterFix": "10 * 1024 * 1024"}
{"fixCommitSHA1": "dfb39dfaeaafc913d827d42aff17a56fe3f9c535", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private Collection<InetSocketAddress> getConfigAddresses() {\n         final List<InetSocketAddress> socketAddresses = new LinkedList<InetSocketAddress>();\n        for (String address : getClientConfig().getAddressList()) {\n             socketAddresses.addAll(AddressHelper.getSocketAddresses(address));\n         }\n         Collections.shuffle(socketAddresses);", "fixed": "     private Collection<InetSocketAddress> getConfigAddresses() {\n         final List<InetSocketAddress> socketAddresses = new LinkedList<InetSocketAddress>();\n        for (String address : getClientConfig().getAddresses()) {\n             socketAddresses.addAll(AddressHelper.getSocketAddresses(address));\n         }\n         Collections.shuffle(socketAddresses);", "sourceBeforeFix": "getClientConfig().getAddressList()", "sourceAfterFix": "getClientConfig().getAddresses()"}
{"fixCommitSHA1": "24d4f1a7133defb3bf9a8726cfb864004a5876ca", "projectName": "google.closure-compiler", "bugType": "Same Function More Args", "problem": "     try {\n       Files.write(\"\", new File(reportPath), UTF_8);\n     } catch (IOException e) {\n      compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath));\n     }\n   }", "fixed": "     try {\n       Files.write(\"\", new File(reportPath), UTF_8);\n     } catch (IOException e) {\n      compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath, e.getMessage()));\n     }\n   }", "sourceBeforeFix": "JSError.make(REPORT_PATH_IO_ERROR,reportPath)", "sourceAfterFix": "JSError.make(REPORT_PATH_IO_ERROR,reportPath,e.getMessage())"}
{"fixCommitSHA1": "586c8eda959300c12504bda3c404b117dace13bd", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t   if (Gdx.app.getType() == ApplicationType.iOS) {\r\n \t\t     IntBuffer intbuf = ByteBuffer.allocateDirect(16 * Integer.SIZE / 8).order(ByteOrder.nativeOrder()).asIntBuffer();\r\n \t\t     gl.glGetIntegerv(GL20.GL_FRAMEBUFFER_BINDING, intbuf);\r\n\t\t     defaultFramebufferHandle = intbuf.get();\r\n \t\t   }\r\n \t\t   else {\r\n \t\t     defaultFramebufferHandle = 0;\r", "fixed": " \t\t   if (Gdx.app.getType() == ApplicationType.iOS) {\r\n \t\t     IntBuffer intbuf = ByteBuffer.allocateDirect(16 * Integer.SIZE / 8).order(ByteOrder.nativeOrder()).asIntBuffer();\r\n \t\t     gl.glGetIntegerv(GL20.GL_FRAMEBUFFER_BINDING, intbuf);\r\n\t\t     defaultFramebufferHandle = intbuf.get(0);\r\n \t\t   }\r\n \t\t   else {\r\n \t\t     defaultFramebufferHandle = 0;\r", "sourceBeforeFix": "intbuf.get()", "sourceAfterFix": "intbuf.get(0)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)\n     {\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getSizeInBytes\", type(long.class));", "fixed": "                 .retInt();\n     }\n    private static void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)\n     {\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getSizeInBytes\", type(long.class));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MiloClientEndpointBuilder\n             extends\n                 MiloClientEndpointConsumerBuilder, MiloClientEndpointProducerBuilder {\n         default AdvancedMiloClientEndpointBuilder advanced() {", "fixed": "     \n    public interface MiloClientEndpointBuilder\n             extends\n                 MiloClientEndpointConsumerBuilder, MiloClientEndpointProducerBuilder {\n         default AdvancedMiloClientEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n            invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }", "fixed": "         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n            invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }", "sourceBeforeFix": "invocation.logger.warning(\"'is-executing': \" + executing + \" -> \"+ invocation)", "sourceAfterFix": "invocation.logger.finest(\"'is-executing': \" + executing + \" -> \"+ invocation)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "0ed957ba961cb7b4057fe1372cfc363afead4f1e", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         Map<String, Object> params = new HashMap<>();\n         params.put(\"custName\", \"${body}\");\n        registry.put(\"params\", params);\n         camelContext.setRegistry(registry);\n         camelContext.addRoutes(new RouteBuilder() {", "fixed": "         Map<String, Object> params = new HashMap<>();\n         params.put(\"custName\", \"${body}\");\n        registry.bind(\"params\", params);\n         camelContext.setRegistry(registry);\n         camelContext.addRoutes(new RouteBuilder() {", "sourceBeforeFix": "registry.put(\"params\",params)", "sourceAfterFix": "registry.bind(\"params\",params)"}
{"fixCommitSHA1": "8e94cd6e2655a4e1c4efc5a41b700e24bd1f96cf", "projectName": "b3log.solo", "bugType": "Change Numeric Literal", "problem": "      * <p>\n      * A valid user name:\n      * <ul>\n     * <li>length [1, 20]</li>\n     * <li>content {a-z, A-Z, 0-9}</li>\n      * <li>Not contains \"admin\"/\"Admin\"</li>\n      * </ul>\n      * </p>", "fixed": "      * <p>\n      * A valid user name:\n      * <ul>\n     * <li>length [1, 64]</li>\n     * <li>content {a-z, A-Z, 0-9, -}</li>\n      * <li>Not contains \"admin\"/\"Admin\"</li>\n      * </ul>\n      * </p>", "sourceBeforeFix": "MAX_USER_NAME_LENGTH=20", "sourceAfterFix": "MAX_USER_NAME_LENGTH=64"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "dd287e0057702c15b34db99de389a1c51023c2f3", "projectName": "Atmosphere.atmosphere", "bugType": "Change Unary Operator\t", "problem": "         injectCacheHeaders = nocache != null ? false : true;\n         String ac = config.getInitParameter(ApplicationConfig.DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);\n        enableAccessControl = ac != null ? Boolean.parseBoolean(ac) : true;\n         String wh = config.getInitParameter(FrameworkConfig.WRITE_HEADERS);\n         writeHeaders = wh != null ? Boolean.parseBoolean(wh) : true;", "fixed": "         injectCacheHeaders = nocache != null ? false : true;\n         String ac = config.getInitParameter(ApplicationConfig.DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);\n        enableAccessControl = ac != null ? !Boolean.parseBoolean(ac) : true;\n         String wh = config.getInitParameter(FrameworkConfig.WRITE_HEADERS);\n         writeHeaders = wh != null ? Boolean.parseBoolean(wh) : true;", "sourceBeforeFix": "Boolean.parseBoolean(ac)", "sourceAfterFix": "!Boolean.parseBoolean(ac)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSwiftEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SwiftEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSwiftEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SwiftEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<NodeModel> getSelectedNodes() {\n         List<NodeModel> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<NodeModel> getSelectedNodes() {\n         List<NodeModel> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  State getIntermediateState() {\n     return new State(\n         cssNames == null ? null : Maps.newHashMap(cssNames),\n         exportedNames == null ? null :", "fixed": "   }\n   @Override\n  protected State getIntermediateState() {\n     return new State(\n         cssNames == null ? null : Maps.newHashMap(cssNames),\n         exportedNames == null ? null :", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     public TaskServlet(Iterable<Task> tasks) {\n         final ImmutableMap.Builder<String, Task> builder = ImmutableMap.builder();\n         for (Task task : tasks) {\n            builder.put(\"/tasks/\" + task.getName(), task);\n         }\n         this.tasks = builder.build();\n     }", "fixed": "     public TaskServlet(Iterable<Task> tasks) {\n         final ImmutableMap.Builder<String, Task> builder = ImmutableMap.builder();\n         for (Task task : tasks) {\n            builder.put(\"/\" + task.getName(), task);\n         }\n         this.tasks = builder.build();\n     }", "sourceBeforeFix": "req.getServletPath()", "sourceAfterFix": "req.getPathInfo()"}
{"fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void cacheFile(int fileId) throws FileDoesNotExistException, SuspectedFileSizeException {\n     connectAndGetLocalWorker();\n     if (!mConnected) {\n       return;", "fixed": "     }\n   }\n  public synchronized void cacheFile(int fileId) \n      throws FileDoesNotExistException, SuspectedFileSizeException {\n     connectAndGetLocalWorker();\n     if (!mConnected) {\n       return;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "c50fb0490aaf8595274ac9cc33c0af6dc70f9d12", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "             throws IOException, ServletException {\n         if (!req.isAsyncStarted()) {\n            AsyncContext asyncContext = req.startAsync();\n             asyncContext.addListener(new CometListener(this));\n             if (action.timeout() != -1) {", "fixed": "             throws IOException, ServletException {\n         if (!req.isAsyncStarted()) {\n            AsyncContext asyncContext = req.startAsync(req, res);\n             asyncContext.addListener(new CometListener(this));\n             if (action.timeout() != -1) {", "sourceBeforeFix": "req.startAsync()", "sourceAfterFix": "req.startAsync(req,res)"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     managedSpan.deactivate();\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "fixed": "                     managedSpan.deactivate();\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "fixed": "     }\n     @Override\n    public synchronized void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0f19a0653a3fcf208f1722528d362f5eadfb4dc9", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "    * @param time when to timeout the future\n    * @param unit the time unit of the time parameter\n    * @param scheduledExecutor The executor service to enforce the timeout.\n    */\n   @GwtIncompatible(\"java.util.concurrent.ScheduledExecutorService\")\n  static <V> ListenableFuture<V> withTimeout(ListenableFuture<V> delegate,\n       long time, TimeUnit unit, ScheduledExecutorService scheduledExecutor) {\n     TimeoutFuture<V> result = new TimeoutFuture<V>(delegate);\n     TimeoutFuture.Fire<V> fire = new TimeoutFuture.Fire<V>(result);", "fixed": "    * @param time when to timeout the future\n    * @param unit the time unit of the time parameter\n    * @param scheduledExecutor The executor service to enforce the timeout.\n   *\n   * @since 19.0\n    */\n   @GwtIncompatible(\"java.util.concurrent.ScheduledExecutorService\")\n  public static <V> ListenableFuture<V> withTimeout(ListenableFuture<V> delegate,\n       long time, TimeUnit unit, ScheduledExecutorService scheduledExecutor) {\n     TimeoutFuture<V> result = new TimeoutFuture<V>(delegate);\n     TimeoutFuture.Fire<V> fire = new TimeoutFuture.Fire<V>(result);", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e04a3bf7703544cf5012eb2f55626af8e0a2cb8c", "projectName": "apache.flink", "bugType": "Delete Throws Exception", "problem": " \t\t}\n \t\t@Override\n\t\tpublic List<Long> snapshotState(long checkpointId, long timestamp) throws Exception {\n \t\t\treturn Collections.singletonList(ms);\n \t\t}\n \t\t@Override\n\t\tpublic void restoreState(List<Long> state) throws Exception {\n \t\t\tfor (Long l : state) {\n \t\t\t\tms += l;\n \t\t\t}", "fixed": " \t\t}\n \t\t@Override\n\t\tpublic List<Long> snapshotState(long checkpointId, long timestamp) {\n \t\t\treturn Collections.singletonList(ms);\n \t\t}\n \t\t@Override\n\t\tpublic void restoreState(List<Long> state) {\n \t\t\tfor (Long l : state) {\n \t\t\t\tms += l;\n \t\t\t}", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Wrong Function Name", "problem": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.datatype : cp.baseType);\n     }\n     private String getJSDocTypeWithBraces(CodegenParameter cp) {\n         return \"{\" + getJSDocType(cp) + \"}\";\n     }\n     private String getJSDocType(CodegenParameter cp) {\n         String dataType = trimBrackets(cp.dataType);", "fixed": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.datatype : cp.baseType);\n     }\n    \n     private String getJSDocType(CodegenParameter cp) {\n         String dataType = trimBrackets(cp.dataType);", "sourceBeforeFix": "getJSDocTypeWithBraces(operation)", "sourceAfterFix": "getJSDocType(operation)"}
{"fixCommitSHA1": "d222fc981c938bd3543ee61f22422d20efcdcd94", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(800);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(800)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "907ddc126cd19f6a1c464608faa6da739483e682", "projectName": "swagger-api.swagger-core", "bugType": "Same Function Swap Args", "problem": "         final Model model = read.get(GenericModel.class.getSimpleName());\n         assertTrue(model.getProperties().containsKey(NAME));\n        assertEquals(model.getProperties().get(NAME).getType(), \"string\");\n         assertTrue(model.getProperties().containsKey(COUNT));\n        assertEquals(model.getProperties().get(COUNT).getType(), \"integer\");\n     }\n }", "fixed": "         final Model model = read.get(GenericModel.class.getSimpleName());\n         assertTrue(model.getProperties().containsKey(NAME));\n        assertEquals(\"string\", model.getProperties().get(NAME).getType());\n         assertTrue(model.getProperties().containsKey(COUNT));\n        assertEquals(\"integer\", model.getProperties().get(COUNT).getType());\n     }\n }", "sourceBeforeFix": "assertEquals(model.getProperties().get(NAME).getType(),\"string\")", "sourceAfterFix": "assertEquals(\"string\",model.getProperties().get(NAME).getType())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "             for (CodegenProperty var : cm.vars) {\n                String jsDocType = getJSDocTypeWithBraces(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n                 if (Boolean.TRUE.equals(var.required)) {", "fixed": "             for (CodegenProperty var : cm.vars) {\n                String jsDocType = getJSDocType(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n                 if (Boolean.TRUE.equals(var.required)) {", "sourceBeforeFix": "getJSDocTypeWithBraces(cm,var)", "sourceAfterFix": "getJSDocType(cm,var)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "62daee8bf2d60c90827d2adc864662c9db6c4713", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "                         boolean singleton = w.atmosphereHandler.getClass().getAnnotation(Singleton.class) != null;\n                         if (!singleton) {\n                             config.framework().addAtmosphereHandler(path, config.framework().newClassInstance(w.atmosphereHandler.getClass()),\n                                    config.getBroadcasterFactory().lookup(m.broadcaster(), true), w.interceptors);\n                         } else {\n                             config.framework().addAtmosphereHandler(path, w.atmosphereHandler,\n                                    config.getBroadcasterFactory().lookup(m.broadcaster(), true), w.interceptors);\n                         }\n                         request.setAttribute(FrameworkConfig.NEW_MAPPING, \"true\");\n                     } catch (Throwable e) {", "fixed": "                         boolean singleton = w.atmosphereHandler.getClass().getAnnotation(Singleton.class) != null;\n                         if (!singleton) {\n                             config.framework().addAtmosphereHandler(path, config.framework().newClassInstance(w.atmosphereHandler.getClass()),\n                                    config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);\n                         } else {\n                             config.framework().addAtmosphereHandler(path, w.atmosphereHandler,\n                                    config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);\n                         }\n                         request.setAttribute(FrameworkConfig.NEW_MAPPING, \"true\");\n                     } catch (Throwable e) {", "sourceBeforeFix": "config.getBroadcasterFactory().lookup(m.broadcaster(),true)", "sourceAfterFix": "config.getBroadcasterFactory().lookup(m.broadcaster(),path,true)"}
{"fixCommitSHA1": "4831c0257971d6dd9a7cda4a8d9e1ded8c2a77a7", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "         if (e.getMessage() instanceof List && !((List) e.getMessage()).isEmpty()) {\n            List<Object> filteredMessage = new ArrayList<Object>();\n             for (Object o : ((List) e.getMessage())) {\n                filteredMessage.add(perRequestFilter(r, new Entry(o, r, f, o), false));\n             }\n             e.setMessage(filteredMessage);", "fixed": "         if (e.getMessage() instanceof List && !((List) e.getMessage()).isEmpty()) {\n            LinkedList<Object> filteredMessage = new LinkedList<Object>();\n             for (Object o : ((List) e.getMessage())) {\n                filteredMessage.addLast(perRequestFilter(r, new Entry(o, r, f, o), false));\n             }\n             e.setMessage(filteredMessage);", "sourceBeforeFix": "filteredMessage.add(perRequestFilter(r,new Entry(o,r,f,o),false))", "sourceAfterFix": "filteredMessage.addLast(perRequestFilter(r,new Entry(o,r,f,o),false))"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void compact(String tableOrRegionName, String columnFamily)\n     throws IOException,  InterruptedException {\n    compact(Bytes.toBytesBinary(tableOrRegionName), Bytes.toBytes(columnFamily));\n   }\n   /**", "fixed": "    */\n   public void compact(String tableOrRegionName, String columnFamily)\n     throws IOException,  InterruptedException {\n    compact(Bytes.toBytes(tableOrRegionName), Bytes.toBytes(columnFamily));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "c9a1cc9df3dc4fe2eef78ad6090a9b1d95a02557", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             .setXmlName(Attribute.FLUSH_LOCK_TIMEOUT.getLocalName())\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(1))\n             .build();\n     static final SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.MODIFICATION_QUEUE_SIZE, ModelType.INT, true)", "fixed": "             .setXmlName(Attribute.FLUSH_LOCK_TIMEOUT.getLocalName())\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(1L))\n             .build();\n     static final SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.MODIFICATION_QUEUE_SIZE, ModelType.INT, true)", "sourceBeforeFix": "new ModelNode().set(25000)", "sourceAfterFix": "new ModelNode().set(25000L)"}
{"fixCommitSHA1": "17c39eaf1f6a7ba8ac5ff0bbc5ff4aeac0f9c707", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         Object value;\n         try {\n             value = old.getMandatoryBody(type);\n        } catch (Exception e) {\n             exchange.setException(e);\n             callback.done(true);\n             return true;", "fixed": "         Object value;\n         try {\n             value = old.getMandatoryBody(type);\n        } catch (Throwable e) {\n             exchange.setException(e);\n             callback.done(true);\n             return true;", "sourceBeforeFix": "Exception e", "sourceAfterFix": "Throwable e"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n\t\tthis.container = factory.getEmbdeddedServletContainer();\nassertThat(getResponse(\"http:\n \t}", "fixed": " \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n\t\tthis.container = factory.getEmbeddedServletContainer();\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL11.glGetFloat(pname,params)", "sourceAfterFix": "GL11.glGetFloatv(pname,params)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e05622578fa2cb335f4beee3496758aea43ddd29", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         assertSizeAndLoadCount(map);\n         hz3.getLifecycleService().terminate();\n        assertClusterSize(2, nodes[0]);\n         map.loadAll(true);\n         assertSizeEventually(MAP_STORE_ENTRY_COUNT, map);", "fixed": "         assertSizeAndLoadCount(map);\n         hz3.getLifecycleService().terminate();\n        assertClusterSizeEventually(2, nodes[0]);\n         map.loadAll(true);\n         assertSizeEventually(MAP_STORE_ENTRY_COUNT, map);", "sourceBeforeFix": "assertClusterSize(2,nodes[0])", "sourceAfterFix": "assertClusterSizeEventually(2,nodes[0])"}
{"fixCommitSHA1": "73a03b5e232d8f7049a03361e0454cb2eecb90c7", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         };\n         thread.start();\n        instance2.getLifecycleService().shutdown();\n         semaphore.release();\n         HazelcastInstance instance3 = factory.newHazelcastInstance();", "fixed": "         };\n         thread.start();\n        instance2.shutdown();\n         semaphore.release();\n         HazelcastInstance instance3 = factory.newHazelcastInstance();", "sourceBeforeFix": "timeout=30000", "sourceAfterFix": "timeout=120000"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCinderEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default CinderEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCinderEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default CinderEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "883dccf1192ac9ea58f8b30255251979cb03e675", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tmodel =  objLoader.loadModel(Gdx.files.internal(\"data/cube.obj\"));\r\n \t\tBoundingBox bbox = new BoundingBox();\r\n\t\tmodel.getBoundingBox(bbox);\r\n \t\tGdx.app.log(\"ObjTest\", \"obj bounds: \" + bbox);\r\n \t\ttexture = new Texture(Gdx.files.internal(\"data/badlogic.jpg\"), true);\r", "fixed": " \t\tmodel =  objLoader.loadModel(Gdx.files.internal(\"data/cube.obj\"));\r\n \t\tBoundingBox bbox = new BoundingBox();\r\n\t\tmodel.calculateBoundingBox(bbox);\r\n \t\tGdx.app.log(\"ObjTest\", \"obj bounds: \" + bbox);\r\n \t\ttexture = new Texture(Gdx.files.internal(\"data/badlogic.jpg\"), true);\r", "sourceBeforeFix": "model.getBoundingBox(bbox)", "sourceAfterFix": "model.calculateBoundingBox(bbox)"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t@Override\r\n \tpublic String getString (String key) {\r\n\t\tNSString value = (NSString)nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return \"\";\r\n \t\treturn value.toString();\r\n \t}\r", "fixed": " \t@Override\r\n \tpublic String getString (String key) {\r\n\t\tObject value = nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return \"\";\r\n \t\treturn value.toString();\r\n \t}\r", "sourceBeforeFix": "NSNumber.numberWithLong(val)", "sourceAfterFix": "NSNumber.numberWithLongLong(val)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8639593ad0e6bcbdbe8e6fe3263c9b2550169942", "projectName": "gephi.gephi", "bugType": "Change Operand ", "problem": "         float newCameraLocation = Math.max(newCameraLocationX, newCameraLocationY);\n         graphDrawable.cameraLocation[0] = limits.getMinXoctree() + graphWidth / 2;\n        graphDrawable.cameraLocation[1] = limits.getMinYoctree() + graphWidth / 2;\n         graphDrawable.cameraLocation[2] = newCameraLocation;\n         graphDrawable.cameraTarget[0] = graphDrawable.cameraLocation[0];", "fixed": "         float newCameraLocation = Math.max(newCameraLocationX, newCameraLocationY);\n         graphDrawable.cameraLocation[0] = limits.getMinXoctree() + graphWidth / 2;\n        graphDrawable.cameraLocation[1] = limits.getMinYoctree() + graphHeight / 2;\n         graphDrawable.cameraLocation[2] = newCameraLocation;\n         graphDrawable.cameraTarget[0] = graphDrawable.cameraLocation[0];", "sourceBeforeFix": "graphWidth / 2", "sourceAfterFix": "graphHeight / 2"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "8368e79de7092308557d39acadd54283c2c8d220", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         meta.setContentMD5(new String(Base64.encode(mHash.digest())));\n       }\n       meta.setContentLength(mFile.length());\n      meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM);", "fixed": "         meta.setContentMD5(new String(Base64.encode(mHash.digest())));\n       }\n       meta.setContentLength(mFile.length());\n      meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM);", "sourceBeforeFix": "meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)", "sourceAfterFix": "meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 obj = null;\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "fixed": "                 obj = null;\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Mina2EndpointBuilder\n             extends\n                 Mina2EndpointConsumerBuilder, Mina2EndpointProducerBuilder {\n         default AdvancedMina2EndpointBuilder advanced() {", "fixed": "     \n    public interface Mina2EndpointBuilder\n             extends\n                 Mina2EndpointConsumerBuilder, Mina2EndpointProducerBuilder {\n         default AdvancedMina2EndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c32df371abcbee7ebbb77e6bf6a429d3f3f4134b", "projectName": "netty.netty", "bugType": "Change Caller in Function Call", "problem": "             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + bytesToCopy) + \", maximum is \" + data.limit());\n         }\n         dst.put(tmpBuf);\n     }", "fixed": "             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + bytesToCopy) + \", maximum is \" + buffer.limit());\n         }\n         dst.put(tmpBuf);\n     }", "sourceBeforeFix": "data.limit()", "sourceAfterFix": "buffer.limit()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f4f938dac9799366e2aed67dea151b07a8434eef", "projectName": "Atmosphere.atmosphere", "bugType": "Change Unary Operator\t", "problem": "                 for (Broadcaster b : lookupAll()) {\n                     try {\n                        if (!b.getAtmosphereResources().contains(r)) {\n                             b.removeAtmosphereResource(r);\n                         }\n                     } catch (IllegalStateException ex) {", "fixed": "                 for (Broadcaster b : lookupAll()) {\n                     try {\n                        if (b.getAtmosphereResources().contains(r)) {\n                             b.removeAtmosphereResource(r);\n                         }\n                     } catch (IllegalStateException ex) {", "sourceBeforeFix": "!b.getAtmosphereResources().contains(r)", "sourceAfterFix": "b.getAtmosphereResources().contains(r)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "ccc86e9f1cddebc731ac1ccabdd469df11d72d8b", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tFlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);", "fixed": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tFlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);", "sourceBeforeFix": "RestartStrategies.fixedDelayRestart(3,0)", "sourceAfterFix": "RestartStrategies.fixedDelayRestart(1,0)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "5038fc76c950029c78681dff816d7465f6acbb91", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "             outResult.add(cell);\n             count++;\n             totalBytesRead += CellUtil.estimatedSerializedSizeOf(cell);\n            totalHeapSize += CellUtil.estimatedHeapSizeOf(cell);\n             if (totalBytesRead > maxRowSize) {\n               throw new RowTooBigException(\"Max row size allowed: \" + maxRowSize\n               + \", but the row is bigger than that.\");", "fixed": "             outResult.add(cell);\n             count++;\n             totalBytesRead += CellUtil.estimatedSerializedSizeOf(cell);\n            totalHeapSize += CellUtil.estimatedHeapSizeOfWithoutTags(cell);\n             if (totalBytesRead > maxRowSize) {\n               throw new RowTooBigException(\"Max row size allowed: \" + maxRowSize\n               + \", but the row is bigger than that.\");", "sourceBeforeFix": "CellUtil.estimatedHeapSizeOf(cell)", "sourceAfterFix": "CellUtil.estimatedHeapSizeOfWithoutTags(cell)"}
{"fixCommitSHA1": "49c35aabcf0811b2ad7761f2476ebc277f640f44", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "     long longBytesValue =\n         sDefaultConfiguration.getBytes(Constants.USER_BLOCK_REMOTE_READ_BUFFER_SIZE_BYTES);\n    Assert.assertEquals(Constants.MB * 8, longBytesValue);\n     longBytesValue = sDefaultConfiguration.getBytes(Constants.NETWORK_THRIFT_FRAME_SIZE_BYTES_MAX);\n     Assert.assertEquals(Constants.MB * 16, longBytesValue);", "fixed": "     long longBytesValue =\n         sDefaultConfiguration.getBytes(Constants.USER_BLOCK_REMOTE_READ_BUFFER_SIZE_BYTES);\n    Assert.assertEquals(Constants.KB * 4, longBytesValue);\n     longBytesValue = sDefaultConfiguration.getBytes(Constants.NETWORK_THRIFT_FRAME_SIZE_BYTES_MAX);\n     Assert.assertEquals(Constants.MB * 16, longBytesValue);", "sourceBeforeFix": "8 * Constants.MB", "sourceAfterFix": "4 * Constants.KB"}
{"fixCommitSHA1": "42d41d194dd5ff6bc7886f5a167aae9316b814bc", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   @Override\n   public void close() {\n    mFixedExecutionService.shutdown();\n   }\n   /**", "fixed": "   @Override\n   public void close() {\n    mBlockRemovalService.shutdown();\n   }\n   /**", "sourceBeforeFix": "mFixedExecutionService.shutdown()", "sourceAfterFix": "mBlockRemovalService.shutdown()"}
{"fixCommitSHA1": "5d9193eb8fcb699722980d5e5680557553c3ee39", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     @Before\n     public void setup() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.put(\"firehoseClient\", amazonKinesisFirehoseClient);\n         camelContext = new DefaultCamelContext(registry);\n     }", "fixed": "     @Before\n     public void setup() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.bind(\"firehoseClient\", amazonKinesisFirehoseClient);\n         camelContext = new DefaultCamelContext(registry);\n     }", "sourceBeforeFix": "registry.put(\"firehoseClient\",amazonKinesisFirehoseClient)", "sourceAfterFix": "registry.bind(\"firehoseClient\",amazonKinesisFirehoseClient)"}
{"fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n            invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }", "fixed": "         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n            invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }", "sourceBeforeFix": "invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation)", "sourceAfterFix": "invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"fixCommitSHA1": "335f8c0d2af9c55c731dc7b44d18c5e3796f4bd6", "projectName": "hazelcast.hazelcast", "bugType": "More Specific If", "problem": "             return false;\n         }\n        if (this.referenceId == referenceId) {\n             return true;\n         }", "fixed": "             return false;\n         }\n        if (!this.transactional && this.referenceId == referenceId) {\n             return true;\n         }", "sourceBeforeFix": "this.referenceId == referenceId", "sourceAfterFix": "!this.transactional && this.referenceId == referenceId"}
{"fixCommitSHA1": "6ee0105ac80d34691c4a073e87397ed0fc6b68c4", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         }\n         int[] ids = new int[length];\n         for (int i = 0; i < length; i++) {\n            ids[i] = length % dictionarySize;\n         }\n         return new DictionaryBlock(length, builder.build(), wrappedIntArray(ids));\n     }", "fixed": "         }\n         int[] ids = new int[length];\n         for (int i = 0; i < length; i++) {\n            ids[i] = i % dictionarySize;\n         }\n         return new DictionaryBlock(length, builder.build(), wrappedIntArray(ids));\n     }", "sourceBeforeFix": "length % dictionarySize", "sourceAfterFix": "i % dictionarySize"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL11.glGetFloat(pname,params)", "sourceAfterFix": "GL11.glGetFloatv(pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"}
{"fixCommitSHA1": "76c6aee2c6d008e6f2345cdde262ad9ffb338afd", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     if (c != 0) return c;\n    c = (0xff & a.getTypeByte()) - (0xff & b.getTypeByte());\n     return c;\n   }", "fixed": "     if (c != 0) return c;\n    c = (0xff & b.getTypeByte()) - (0xff & a.getTypeByte());\n     return c;\n   }", "sourceBeforeFix": "a.getTypeByte()", "sourceAfterFix": "b.getTypeByte()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface XmlSignatureEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedXmlSignatureEndpointBuilder advanced() {", "fixed": "     \n    public interface XmlSignatureEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedXmlSignatureEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cf783f141a741ce1e24c472e16cbfeff41b6a3e7", "projectName": "Activiti.Activiti", "bugType": "Change Modifier", "problem": "  *\r\n  * @author Daniel Meyer\r\n  */\r\npublic class ServiceTaskVariablesTest extends PluggableActivitiTestCase {\r\n   static boolean isNullInDelegate2;\r\n   static boolean isNullInDelegate3;\r", "fixed": "  *\r\n  * @author Daniel Meyer\r\n  */\r\npublic abstract class ServiceTaskVariablesTest extends PluggableActivitiTestCase {\r\n   static boolean isNullInDelegate2;\r\n   static boolean isNullInDelegate3;\r", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "251bb1a73961f785ad12dbb3ae92830eca70b8cd", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "     protected final ByteBuf newDirectBuffer(Object holder, ByteBuf buf) {\n         final int readableBytes = buf.readableBytes();\n         if (readableBytes == 0) {\n            ReferenceCountUtil.safeRelease(holder);\n             return Unpooled.EMPTY_BUFFER;\n         }", "fixed": "     protected final ByteBuf newDirectBuffer(Object holder, ByteBuf buf) {\n         final int readableBytes = buf.readableBytes();\n         if (readableBytes == 0) {\n            ReferenceCountUtil.release(holder);\n             return Unpooled.EMPTY_BUFFER;\n         }", "sourceBeforeFix": "ReferenceCountUtil.safeRelease(holder)", "sourceAfterFix": "ReferenceCountUtil.release(holder)"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.error(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "fixed": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.warn(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "sourceBeforeFix": "LOG.error(\"Failed to get files from \" + baseDirectory.getAbsolutePath())", "sourceAfterFix": "LOG.warn(\"Failed to get files from \" + baseDirectory.getAbsolutePath())"}
{"fixCommitSHA1": "8e55a16169d3ef6a9e01596ddb6063b6e625029a", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "       DirContext ctx = new InitialDirContext(env);\n       ctx.close();\n     } catch (NamingException e) {\n      throw new AuthenticationException(\"Error validating LDAP user\");\n     }\n   return;\n   }", "fixed": "       DirContext ctx = new InitialDirContext(env);\n       ctx.close();\n     } catch (NamingException e) {\n      throw new AuthenticationException(\"Error validating LDAP user\", e);\n     }\n   return;\n   }", "sourceBeforeFix": "new AuthenticationException(\"Error validating LDAP user\")", "sourceAfterFix": "new AuthenticationException(\"Error validating LDAP user\",e)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "7012976421d9e593d8b276697b2fbbc9328b6fa5", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\n \tpublic Container<T> prefSize (float width, float height) {\n\t\tprefSize(new Fixed(width));\n \t\treturn this;\n \t}", "fixed": " \t\n \tpublic Container<T> prefSize (float width, float height) {\n\t\tprefSize(new Fixed(width), new Fixed(height));\n \t\treturn this;\n \t}", "sourceBeforeFix": "prefSize(new Fixed(width))", "sourceAfterFix": "prefSize(new Fixed(width),new Fixed(height))"}
{"fixCommitSHA1": "7f4ede5a12b6a6056d545edcbcba8754e7d05624", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         env.put(\"java.naming.security.authentication\", \"simple\");\n         SimpleRegistry reg = new SimpleRegistry();\n        reg.put(\"localhost:\" + port, env);\n         camel = new DefaultCamelContext(reg);\n         template = camel.createProducerTemplate();\n     }", "fixed": "         env.put(\"java.naming.security.authentication\", \"simple\");\n         SimpleRegistry reg = new SimpleRegistry();\n        reg.bind(\"localhost:\" + port, env);\n         camel = new DefaultCamelContext(reg);\n         template = camel.createProducerTemplate();\n     }", "sourceBeforeFix": "reg.put(\"localhost:\" + port,env)", "sourceAfterFix": "reg.bind(\"localhost:\" + port,env)"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    private static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 17:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 17:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),args.rest())"}
{"fixCommitSHA1": "57ddaae5fd72ff2cef6d179568640b1fac8f4f08", "projectName": "apache.storm", "bugType": "Same Function More Args", "problem": "             sendToSubprocess(JSONValue.toJSONString(stormConf));\n             sendToSubprocess(context.toJSONString());\n         } catch (IOException e) {\n            throw new RuntimeException(e);\n         }\n     }", "fixed": "             sendToSubprocess(JSONValue.toJSONString(stormConf));\n             sendToSubprocess(context.toJSONString());\n         } catch (IOException e) {\n            throw new RuntimeException(\"Error when launching multilang subprocess\", e);\n         }\n     }", "sourceBeforeFix": "new RuntimeException(e)", "sourceAfterFix": "new RuntimeException(\"Error when launching multilang subprocess\",e)"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new CreateCommand(keyName, options);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName = \"--help\";", "fixed": "         command = new CreateCommand(keyName, options);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName = \"--help\";", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "b0a5d4c266ed4117282decf06dc5053190423230", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": "      *\n      * Threading - synchronized(this). We must support adding listeners when there is no EventExecutor.\n      */\n    private Object listeners;\n     ", "fixed": "      *\n      * Threading - synchronized(this). We must support adding listeners when there is no EventExecutor.\n      */\n    private volatile Object listeners;\n     ", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {", "fixed": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "15ca69b22b2bcdde426fa8e806c7748f2dfe22fe", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "             int neededPages = maxBufferedPages - bufferedPages;\n             int clientCount = (int) ((1.0 * neededPages / expectedPagesPerRequest) * concurrentRequestMultiplier);\n            clientCount = Math.min(clientCount, 1);\n             int pendingClients = allClients.size() - queuedClients.size() - completedClients.size();\n             clientCount -= pendingClients;", "fixed": "             int neededPages = maxBufferedPages - bufferedPages;\n             int clientCount = (int) ((1.0 * neededPages / expectedPagesPerRequest) * concurrentRequestMultiplier);\n            clientCount = Math.max(clientCount, 1);\n             int pendingClients = allClients.size() - queuedClients.size() - completedClients.size();\n             clientCount -= pendingClients;", "sourceBeforeFix": "Math.min(clientCount,1)", "sourceAfterFix": "Math.max(clientCount,1)"}
{"fixCommitSHA1": "ce033a15d08bba9cfff373badab1bfe5aba24d1c", "projectName": "clojure.clojure", "bugType": "Change Binary Operator", "problem": " }\n public int absCount(long start, long end, long step) {\n    double c = (end - start) / step;\n     int ic = (int) c;\n    if(c < ic)\n         return ic + 1;\n     else\n         return ic;", "fixed": " }\n public int absCount(long start, long end, long step) {\n    double c = (double) (end - start) / step;\n     int ic = (int) c;\n    if(c > ic)\n         return ic + 1;\n     else\n         return ic;", "sourceBeforeFix": "c < ic", "sourceAfterFix": "c > ic"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,value)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "fixed": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "sourceBeforeFix": "GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)", "sourceAfterFix": "GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"}
{"fixCommitSHA1": "dce2381dc4a877fcbfb869f115152ecd44a92173", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": " public class RMNodeLabelsManager extends CommonNodeLabelsManager {\n   protected static class Queue {\n    protected Set<String> acccessibleNodeLabels;\n     protected Resource resource;\n     protected Queue() {\n      acccessibleNodeLabels =\n           Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\n       resource = Resource.newInstance(0, 0);\n     }", "fixed": " public class RMNodeLabelsManager extends CommonNodeLabelsManager {\n   protected static class Queue {\n    protected Set<String> accessibleNodeLabels;\n     protected Resource resource;\n     protected Queue() {\n      accessibleNodeLabels =\n           Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\n       resource = Resource.newInstance(0, 0);\n     }", "sourceBeforeFix": "entry.getValue().acccessibleNodeLabels", "sourceAfterFix": "entry.getValue().accessibleNodeLabels"}
{"fixCommitSHA1": "202197ee128df154528c5c27077185f679f48cfb", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   private final String sortKey;\n  public CodeReplacement(int startPosition, int length, String newContent) {\n     this(startPosition, length, newContent, \"\");\n   }", "fixed": "   private final String sortKey;\n  CodeReplacement(int startPosition, int length, String newContent) {\n     this(startPosition, length, newContent, \"\");\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MyBatisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMyBatisEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface MyBatisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMyBatisEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NsqEndpointBuilder\n             extends\n                 NsqEndpointConsumerBuilder, NsqEndpointProducerBuilder {\n         default AdvancedNsqEndpointBuilder advanced() {", "fixed": "     \n    public interface NsqEndpointBuilder\n             extends\n                 NsqEndpointConsumerBuilder, NsqEndpointProducerBuilder {\n         default AdvancedNsqEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "c2727dd063ee825119f627fdcf51a26a21d43fd5", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "   protected abstract boolean tableExists(Handle handle, final String tableName);\n  public void createTable(final IDBI dbi, final String tableName, final List<String> sql)\n   {\n     try {\n       dbi.withHandle(", "fixed": "   protected abstract boolean tableExists(Handle handle, final String tableName);\n  public void createTable(final IDBI dbi, final String tableName, final Iterable<String> sql)\n   {\n     try {\n       dbi.withHandle(", "sourceBeforeFix": "List<String>", "sourceAfterFix": "Iterable<String>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "197c80a69418a88d3baa4d0b2c8b056c7b411320", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "   @Override\n   public void progressSection(String section, String message)\n   {\n    Stopwatch sectionWatch = sections.remove(section);\n     if (sectionWatch == null) {\n       throw new ISE(\"[%s]: Cannot progress tracker for [%s]. Nothing started.\", progressName, section);\n     }", "fixed": "   @Override\n   public void progressSection(String section, String message)\n   {\n    Stopwatch sectionWatch = sections.get(section);\n     if (sectionWatch == null) {\n       throw new ISE(\"[%s]: Cannot progress tracker for [%s]. Nothing started.\", progressName, section);\n     }", "sourceBeforeFix": "sections.remove(section)", "sourceAfterFix": "sections.get(section)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "f5309e8856186f5105e0bfcefda1273330f36ac0", "projectName": "jersey.jersey", "bugType": "Same Function Less Args", "problem": " \t\tClientConfig jerseyConfig = new ClientConfig();\n \t\tClient client = ClientBuilder.newClient(jerseyConfig);\n\t\tclient = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_INVALIDPASS, 1));\n \t\tWebTarget resource = client.target(getBaseUri()).path(\"auth-digest\");", "fixed": " \t\tClientConfig jerseyConfig = new ClientConfig();\n \t\tClient client = ClientBuilder.newClient(jerseyConfig);\n\t\tclient = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_INVALIDPASS));\n \t\tWebTarget resource = client.target(getBaseUri()).path(\"auth-digest\");", "sourceBeforeFix": "new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_INVALIDPASS,1)", "sourceAfterFix": "new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_INVALIDPASS)"}
{"fixCommitSHA1": "0a33252d9deac84084fd570d6595765edac9eb27", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         };\n     }\n    public static class MyProducerFailEndpoint extends DefaultEndpoint {\n         private MyProducerFailEndpoint(String endpointUri, CamelContext camelContext) {\n             super(endpointUri, camelContext);", "fixed": "         };\n     }\n    public static final class MyProducerFailEndpoint extends DefaultEndpoint {\n         private MyProducerFailEndpoint(String endpointUri, CamelContext camelContext) {\n             super(endpointUri, camelContext);", "sourceBeforeFix": "9", "sourceAfterFix": "25"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ebdfcb47a030730233cf0984aadae155ec138ff3", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         \n        LOGGER.debug(\"Unable to process JSON\", exception);\n         final ErrorMessage errorMessage = new ErrorMessage(Response.Status.BAD_REQUEST.getStatusCode(),\n                 \"Unable to process JSON\", showDetails ? message : null);\n         return Response.status(Response.Status.BAD_REQUEST)", "fixed": "         \n        LOGGER.warn(\"Unable to process JSON\", exception);\n         final ErrorMessage errorMessage = new ErrorMessage(Response.Status.BAD_REQUEST.getStatusCode(),\n                 \"Unable to process JSON\", showDetails ? message : null);\n         return Response.status(Response.Status.BAD_REQUEST)", "sourceBeforeFix": "LOGGER.debug(\"Unable to process JSON\",exception)", "sourceAfterFix": "LOGGER.warn(\"Unable to process JSON\",exception)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "fixed": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic abstract int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "a115820be9614ac00631d84db93a1002492f4c40", "projectName": "apache.camel", "bugType": "Same Function Swap Args", "problem": "         File file = new File(\"./target/cachedir\");\n         String[] files = file.list();\n        assertEquals(\"There should be no files\", files.length, 0);\n     }\n     @Override", "fixed": "         File file = new File(\"./target/cachedir\");\n         String[] files = file.list();\n        assertEquals(\"There should be no files\", 0, files.length);\n     }\n     @Override", "sourceBeforeFix": "assertEquals(\"There should be no files\",files.length,0)", "sourceAfterFix": "assertEquals(\"There should be no files\",0,files.length)"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.info(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "fixed": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "sourceBeforeFix": "logger.info(\"Recording function information\")", "sourceAfterFix": "logger.fine(\"Recording function information\")"}
{"fixCommitSHA1": "a772531235259480a08e539c706b5884fbe6bfd6", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "    */\n   public void preCompute(Set<Integer> toPreCompute) {\n     long startTime = System.currentTimeMillis();\n    saved = new double[toPreCompute.size()][config.hiddenSize];\n     for (int x : toPreCompute) {\n       int mapX = preMap.get(x);\n       int tok = x / config.numTokens;", "fixed": "    */\n   public void preCompute(Set<Integer> toPreCompute) {\n     long startTime = System.currentTimeMillis();\n    saved = new double[preMap.size()][config.hiddenSize];\n     for (int x : toPreCompute) {\n       int mapX = preMap.get(x);\n       int tok = x / config.numTokens;", "sourceBeforeFix": "toPreCompute.size()", "sourceAfterFix": "preMap.size()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SoroushBotEndpointBuilder\n             extends\n                 SoroushBotEndpointConsumerBuilder, SoroushBotEndpointProducerBuilder {\n         default AdvancedSoroushBotEndpointBuilder advanced() {", "fixed": "     \n    public interface SoroushBotEndpointBuilder\n             extends\n                 SoroushBotEndpointConsumerBuilder, SoroushBotEndpointProducerBuilder {\n         default AdvancedSoroushBotEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3841ff0cd87dd048dff43379df81153ed9bcf265", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         OperationService opService = getOperationService(local);\n         int partitionId = getPartitionId(remote);\n        opService.invokeOnPartition(null, new SlowOperation(callTimeoutMs * 2), partitionId);\n        Future f = opService.invokeOnPartition(null, new DummyOperation(), partitionId);\n         try {\n             f.get(3 * callTimeoutMs, MILLISECONDS);", "fixed": "         OperationService opService = getOperationService(local);\n         int partitionId = getPartitionId(remote);\n        opService.invokeOnPartition(new SlowOperation(callTimeoutMs * 2).setPartitionId(partitionId));\n        Future f = opService.invokeOnPartition(new DummyOperation().setPartitionId(partitionId));\n         try {\n             f.get(3 * callTimeoutMs, MILLISECONDS);", "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fcda34896499d9f0c29ea5f000aee28854bdbfe2", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t\tfinal float b = vector.y - y;\r\n \t\tfinal float c = vector.z - z;\r\n\t\treturn (float)Math.sqrt(a * a + b * b + c * b);\r\n \t}\r\n \t/** Normalizes this vector to unit length\r", "fixed": " \t\tfinal float b = vector.y - y;\r\n \t\tfinal float c = vector.z - z;\r\n\t\treturn (float)Math.sqrt(a * a + b * b + c * c);\r\n \t}\r\n \t/** Normalizes this vector to unit length\r", "sourceBeforeFix": "c * b", "sourceAfterFix": "c * c"}
{"fixCommitSHA1": "b1aa0100b3f37551bcd8507d168449d8b03c5c57", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "             retract(view, ((AbstractNode) node));\n         }\n        graphVersion.incNodeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "fixed": "             retract(view, ((AbstractNode) node));\n         }\n        graphVersion.incNodeAndEdgeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "sourceBeforeFix": "graphVersion.incNodeVersion()", "sourceAfterFix": "graphVersion.incNodeAndEdgeVersion()"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n \t/**\n \t * Get a listing or important variables used in openmrs", "fixed": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t/**\n \t * Get a listing or important variables used in openmrs", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
