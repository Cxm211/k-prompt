{"fixCommitSHA1": "2111905af362bab4ac7c786787f79764aac90c9d", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                     receivedMessages.offer(msg);\n                     JGroupsBroadcaster.BroadcastMessage b = JGroupsBroadcaster.BroadcastMessage.class.cast(msg);\n                     if (b.getTopicId().equalsIgnoreCase(bc.getID())) {\n                        bc.broadcast(b.getTopicId());\n                     }\n                 }\n             }", "fixed": "                     receivedMessages.offer(msg);\n                     JGroupsBroadcaster.BroadcastMessage b = JGroupsBroadcaster.BroadcastMessage.class.cast(msg);\n                     if (b.getTopicId().equalsIgnoreCase(bc.getID())) {\n                        bc.broadcast(b.getMessage());\n                     }\n                 }\n             }", "sourceBeforeFix": "b.getTopicId()", "sourceAfterFix": "b.getMessage()"}
{"problem": "public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { switch ( intent . METHOD_2 ( ) ) { case VAR_1 : java.lang.String text = intent . METHOD_3 ( VAR_2 ) ; METHOD_4 ( text ) ; case VAR_3 : TYPE_1 VAR_4 = ( ( TYPE_1 ) ( intent . METHOD_5 ( VAR_5 ) ) ) ; METHOD_6 ( VAR_4 ) ; default : break ; } }\n", "fixed": "public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { switch ( intent . METHOD_2 ( ) ) { case VAR_1 : java.lang.String text = intent . METHOD_3 ( VAR_2 ) ; METHOD_4 ( text ) ; break ; case VAR_3 : TYPE_1 VAR_4 = ( ( TYPE_1 ) ( intent . METHOD_5 ( VAR_5 ) ) ) ; METHOD_6 ( VAR_4 ) ; break ; default : break ; } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String string ) { string = string . replace ( STRING_1 , STRING_2 ) ; synchronized ( VAR_1 ) { java.util.Iterator < TYPE_1 > iterator = VAR_1 . iterator ( ) ; TYPE_1 VAR_2 ; while ( iterator . METHOD_2 ( ) ) { VAR_2 = iterator . METHOD_3 ( ) ; if ( VAR_2 . getName ( ) . METHOD_4 ( string ) ) { return VAR_2 ; } } } return null ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String string ) { string = string . replace ( STRING_1 , STRING_2 ) ; java.util.Iterator < TYPE_1 > iterator = VAR_1 . iterator ( ) ; TYPE_1 VAR_2 ; while ( iterator . METHOD_2 ( ) ) { VAR_2 = iterator . METHOD_3 ( ) ; if ( VAR_2 . getName ( ) . METHOD_4 ( string ) ) { return VAR_2 ; } } return null ; }\n"}
{"fixCommitSHA1": "1eda3c24396baa2067d8a048fd98a6ac13785a55", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   throws IOException {\n    Path tableDir = new Path(rootdir, tableName.toString());\n     fs.mkdirs(tableDir);", "fixed": "   throws IOException {\n    Path tableDir = new Path(rootdir, Bytes.toString(tableName));\n     fs.mkdirs(tableDir);", "sourceBeforeFix": "tableName.toString()", "sourceAfterFix": "Bytes.toString(tableName)"}
{"problem": "public java.util.List < java.lang.String > METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; for ( java.lang.String VAR_2 : VAR_3 . split ( STRING_1 ) ) { for ( java.lang.String VAR_4 : VAR_2 . split ( VAR_5 ) ) { add ( VAR_4 ) ; } } if ( ( VAR_6 ) && ( TYPE_1 . METHOD_3 ( VAR_7 ) ) ) { add ( ( STRING_2 + ( VAR_7 ) ) ) ; } return VAR_1 ; }\n", "fixed": "public java.util.List < java.lang.String > METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; for ( java.lang.String VAR_2 : VAR_3 . split ( STRING_1 ) ) { for ( java.lang.String VAR_4 : VAR_2 . split ( VAR_5 ) ) { if ( TYPE_1 . METHOD_3 ( VAR_4 ) ) { add ( VAR_4 ) ; } } } if ( ( VAR_6 ) && ( TYPE_1 . METHOD_3 ( VAR_7 ) ) ) { add ( ( STRING_2 + ( VAR_7 ) ) ) ; } return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 response ) throws java.io.IOException { TYPE_2 . METHOD_2 ( VAR_1 , response . METHOD_3 ( ) . string ( ) ) ; try { TYPE_3 data = METHOD_4 ( response ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_5 ( data ) ; } } catch ( TYPE_4 VAR_3 ) { TYPE_2 . METHOD_6 ( VAR_1 , VAR_3 . METHOD_7 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 response ) throws java.io.IOException { try { TYPE_3 data = METHOD_4 ( response ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_5 ( data ) ; } } catch ( TYPE_4 VAR_3 ) { TYPE_2 . METHOD_6 ( VAR_1 , VAR_3 . METHOD_7 ( ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 p = VAR_1 . METHOD_2 ( INT_1 ) ; TYPE_2 VAR_2 = VAR_3 . METHOD_3 ( INT_2 ) ; java.lang.System.out.println ( ( ( ( p . METHOD_4 ( ) ) + STRING_1 ) + ( p . METHOD_5 ( ) ) ) ) ; java.lang.System.out.println ( STRING_2 ) ; VAR_4 . METHOD_6 ( VAR_2 ) ; java.lang.System.out.println ( ( STRING_3 + ( p . METHOD_5 ( ) ) ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 p = VAR_1 . METHOD_2 ( INT_1 ) ; TYPE_2 VAR_2 = VAR_3 . METHOD_3 ( INT_2 ) ; java.lang.System.out.println ( ( ( ( p . METHOD_4 ( ) ) + STRING_1 ) + ( p . METHOD_5 ( ) ) ) ) ; java.lang.System.out.println ( STRING_2 ) ; VAR_4 . METHOD_6 ( VAR_2 ) ; java.lang.System.out.println ( ( STRING_3 + ( VAR_1 . METHOD_2 ( INT_1 ) . METHOD_5 ( ) ) ) ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"problem": "public static boolean METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { for ( java.lang.String VAR_2 : TYPE_2 . METHOD_2 ( ) ) { if ( VAR_1 . startsWith ( VAR_2 ) ) { VAR_3 . METHOD_3 ( java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 ) ) ; return true ; } } VAR_3 . METHOD_3 ( java.lang.String.format ( STRING_2 , VAR_1 ) ) ; return false ; }\n", "fixed": "public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { for ( java.lang.String VAR_2 : TYPE_2 . METHOD_2 ( ) ) { if ( VAR_1 . startsWith ( VAR_2 ) ) { VAR_3 . METHOD_3 ( java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 ) ) ; return VAR_2 ; } } VAR_3 . METHOD_3 ( java.lang.String.format ( STRING_2 , VAR_1 ) ) ; return null ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; try { VAR_3 . info ( ( ( VAR_4 . format ( STRING_1 ) ) + VAR_1 ) ) ; VAR_5 . METHOD_2 ( VAR_1 ) ; } catch ( TYPE_2 VAR_6 ) { error ( VAR_6 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; try { VAR_3 . info ( ( ( VAR_4 . format ( STRING_1 ) ) + ( VAR_1 . getName ( ) ) ) ) ; VAR_5 . METHOD_2 ( VAR_1 ) ; } catch ( TYPE_2 VAR_6 ) { error ( VAR_6 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private static int METHOD_1 ( int a , int b , int c ) { int VAR_1 = b - c ; int VAR_2 = a - c ; int VAR_3 = VAR_1 + VAR_2 ; VAR_1 = TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_2 = TYPE_1 . METHOD_2 ( VAR_2 ) ; VAR_3 = TYPE_1 . METHOD_2 ( VAR_3 ) ; return ( VAR_1 <= VAR_2 ) && ( VAR_1 <= VAR_3 ) ? a : VAR_2 <= VAR_3 ? b : c ; }\n", "fixed": "private static int METHOD_1 ( int a , int b , int c ) { int VAR_1 = b - c ; int VAR_2 = a - c ; int VAR_3 = TYPE_1 . METHOD_2 ( ( VAR_1 + VAR_2 ) ) ; VAR_1 = TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_2 = TYPE_1 . METHOD_2 ( VAR_2 ) ; return ( VAR_1 <= VAR_2 ) && ( VAR_1 <= VAR_3 ) ? a : VAR_2 <= VAR_3 ? b : c ; }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 , int VAR_2 , double VAR_3 ) { TYPE_1 VAR_4 = new TYPE_2 ( ) ; TYPE_3 VAR_5 = VAR_4 . METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_6 = VAR_4 . METHOD_2 ( VAR_2 ) ; double VAR_7 = VAR_5 . METHOD_3 ( ) ; VAR_7 -= VAR_3 ; VAR_5 . METHOD_4 ( VAR_7 ) ; double VAR_8 = VAR_6 . METHOD_3 ( ) ; VAR_8 += VAR_3 ; VAR_6 . METHOD_4 ( VAR_8 ) ; VAR_4 . METHOD_5 ( VAR_5 ) ; VAR_4 . METHOD_5 ( VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_4 , int VAR_1 , int VAR_2 , double VAR_3 ) { TYPE_3 VAR_5 = VAR_4 . METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_6 = VAR_4 . METHOD_2 ( VAR_2 ) ; double VAR_7 = VAR_5 . METHOD_3 ( ) ; VAR_7 -= VAR_3 ; VAR_5 . METHOD_4 ( VAR_7 ) ; double VAR_8 = VAR_6 . METHOD_3 ( ) ; VAR_8 += VAR_3 ; VAR_6 . METHOD_4 ( VAR_8 ) ; VAR_4 . METHOD_5 ( VAR_5 ) ; VAR_4 . METHOD_5 ( VAR_6 ) ; }\n"}
{"problem": "public static java.lang.String METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 class . METHOD_2 ( ) ; java.io.InputStream VAR_4 = VAR_2 . METHOD_3 ( VAR_5 ) ; java.io.FileReader VAR_6 = null ; try { java.util.Properties VAR_7 = new java.util.Properties ( ) ; VAR_7 . METHOD_4 ( VAR_4 ) ; java.lang.String VAR_8 = VAR_7 . METHOD_1 ( name ) ; return VAR_8 ; } catch ( java.lang.Exception VAR_9 ) { java.lang.System.out.println ( STRING_1 ) ; VAR_9 . METHOD_5 ( ) ; } return VAR_1 ; }\n", "fixed": "public static java.lang.String METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 class . METHOD_2 ( ) ; java.io.InputStream VAR_4 = VAR_2 . METHOD_3 ( VAR_5 ) ; java.io.FileReader VAR_6 = null ; try { java.util.Properties VAR_7 = new java.util.Properties ( ) ; VAR_7 . METHOD_4 ( VAR_4 ) ; java.lang.String VAR_8 = VAR_7 . METHOD_1 ( name ) ; if ( VAR_8 == null ) return VAR_1 ; return VAR_8 ; } catch ( java.lang.Exception VAR_9 ) { java.lang.System.out.println ( STRING_1 ) ; VAR_9 . METHOD_5 ( ) ; } return VAR_1 ; }\n"}
{"problem": "public boolean METHOD_1 ( ) { if ( ( ( VAR_1 ) == ( VAR_2 ) ) || ( ( VAR_1 ) == ( VAR_3 ) ) ) { return true ; } if ( METHOD_2 ( ) ) { return VAR_4 . METHOD_3 ( ) ; } return false ; }\n", "fixed": "public boolean METHOD_3 ( ) { if ( ( ( VAR_1 ) == ( VAR_2 ) ) || ( ( VAR_1 ) == ( VAR_3 ) ) ) { return true ; } if ( METHOD_2 ( ) ) { return VAR_4 . METHOD_3 ( ) ; } return false ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "java.lang.String METHOD_1 ( java.lang.String date ) { if ( ( date . length ( ) ) != INT_1 ) return null ; java.lang.String VAR_1 ; java.lang.String VAR_2 ; java.lang.String VAR_3 ; VAR_1 = date . substring ( INT_2 , INT_1 ) ; VAR_2 = date . substring ( INT_3 , INT_2 ) ; VAR_3 = date . substring ( 0 , INT_3 ) ; java.lang.String VAR_4 = ( ( ( VAR_2 + STRING_1 ) + VAR_1 ) + STRING_1 ) + VAR_3 ; TYPE_1 . METHOD_2 ( VAR_5 , VAR_4 ) ; return VAR_4 ; }\n", "fixed": "java.lang.String METHOD_1 ( java.lang.String date ) { if ( ( date . length ( ) ) != INT_1 ) return null ; java.lang.String VAR_1 ; java.lang.String VAR_2 ; java.lang.String VAR_3 ; VAR_1 = date . substring ( INT_2 , INT_1 ) ; VAR_2 = date . substring ( INT_3 , INT_2 ) ; VAR_3 = date . substring ( 0 , INT_3 ) ; java.lang.String VAR_4 = ( ( ( VAR_2 + STRING_1 ) + VAR_1 ) + STRING_1 ) + VAR_3 ; return VAR_4 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { if ( event instanceof TYPE_2 ) { java.lang.System.out.println ( ( STRING_1 + ( VAR_1 ) ) ) ; for ( java.lang.String VAR_2 : VAR_3 ) { TYPE_3 < java.lang.String > VAR_4 = TYPE_3 . METHOD_2 ( STRING_2 ) ; VAR_4 . METHOD_3 ( STRING_3 , VAR_2 ) ; VAR_5 . METHOD_4 ( VAR_4 . build ( ) ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { if ( event instanceof TYPE_2 ) { java.lang.System.out.println ( ( STRING_1 + ( VAR_1 ) ) ) ; for ( java.lang.String VAR_2 : VAR_3 ) { if ( ! ( VAR_2 . trim ( ) . isEmpty ( ) ) ) { TYPE_3 < java.lang.String > VAR_4 = TYPE_3 . METHOD_2 ( STRING_2 ) ; VAR_4 . METHOD_3 ( STRING_3 , VAR_2 . trim ( ) ) ; VAR_5 . METHOD_4 ( VAR_4 . build ( ) ) ; } } } }\n"}
{"problem": "public static < TYPE_1 > java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , java.lang.Class < TYPE_1 > VAR_2 ) { java.util.List < TYPE_1 > t = null ; try { t = TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_2 ( ) ; } return t ; }\n", "fixed": "public static < TYPE_1 > java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , java.lang.Class < TYPE_1 > VAR_2 ) { java.util.List < TYPE_1 > t = new java.util.ArrayList < TYPE_1 > ( 0 ) ; try { t = TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_2 ( ) ; } return t ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 msg ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } switch ( VAR_2 ) { case VAR_3 : METHOD_3 ( VAR_4 , null ) ; METHOD_4 ( ) ; break ; case VAR_5 : VAR_6 . METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( this , STRING_1 , VAR_7 ) . show ( ) ; break ; case VAR_8 : TYPE_2 . METHOD_6 ( this , STRING_2 , VAR_7 ) . show ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 msg ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } switch ( VAR_2 ) { case VAR_3 : METHOD_3 ( VAR_4 , null ) ; METHOD_4 ( ) ; break ; case VAR_5 : TYPE_2 . METHOD_6 ( this , STRING_1 , VAR_7 ) . show ( ) ; break ; case VAR_8 : VAR_6 . METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( this , STRING_2 , VAR_7 ) . show ( ) ; } }\n"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 , 0 ) ; TYPE_1 VAR_2 = new TYPE_1 ( INT_2 , 0 ) ; TYPE_1 VAR_3 = new TYPE_1 ( INT_3 , 0 ) ; TYPE_1 VAR_4 = new TYPE_1 ( 1 , 0 ) ; TYPE_1 VAR_5 = new TYPE_1 ( 0 , 0 ) ; int VAR_6 = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; assertTrue ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 , 0 ) ; TYPE_1 VAR_2 = new TYPE_1 ( INT_2 , 0 ) ; TYPE_1 VAR_3 = new TYPE_1 ( INT_3 , 0 ) ; TYPE_1 VAR_4 = new TYPE_1 ( 1 , 0 ) ; TYPE_1 VAR_5 = new TYPE_1 ( 0 , 0 ) ; int VAR_6 = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; }\n"}
{"fixCommitSHA1": "53c0cde20042683e48266819a47099612e69d5bd", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         TabularData data = (TabularData) mbeanServer.invoke(on, \"explain\", new Object[]{true}, new String[]{\"boolean\"});\n         assertNotNull(data);\n        assertEquals(2, data.size());\n         data = (TabularData) mbeanServer.invoke(on, \"explain\", new Object[]{false}, new String[]{\"boolean\"});\n         assertNotNull(data);", "fixed": "         TabularData data = (TabularData) mbeanServer.invoke(on, \"explain\", new Object[]{true}, new String[]{\"boolean\"});\n         assertNotNull(data);\n        assertEquals(3, data.size());\n         data = (TabularData) mbeanServer.invoke(on, \"explain\", new Object[]{false}, new String[]{\"boolean\"});\n         assertNotNull(data);", "sourceBeforeFix": "assertEquals(2,data.size())", "sourceAfterFix": "assertEquals(3,data.size())"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 , this . VAR_2 ) ; VAR_1 . METHOD_2 ( STRING_2 , this . VAR_3 ) ; VAR_1 . METHOD_3 ( STRING_3 , this . VAR_4 ) ; this . VAR_5 . METHOD_1 ( this . VAR_6 , STRING_4 ) ; return super . METHOD_1 ( VAR_1 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 , this . VAR_2 ) ; VAR_1 . METHOD_2 ( STRING_2 , this . VAR_3 ) ; VAR_1 . METHOD_3 ( STRING_3 , this . VAR_4 ) ; return super . METHOD_1 ( VAR_1 ) ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 ) { if ( ! ( VAR_2 . getType ( ) . METHOD_2 ( VAR_3 . getType ( ) ) ) ) { VAR_1 . METHOD_3 ( ( STRING_1 + ( TYPE_3 . message ( VAR_2 ) ) ) ) ; } METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_2 . METHOD_5 ( ) , VAR_3 . METHOD_5 ( ) ) ; METHOD_6 ( VAR_1 , VAR_2 , VAR_2 . METHOD_7 ( ) , VAR_3 . METHOD_7 ( ) ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 ) { if ( ! ( VAR_2 . getType ( ) . METHOD_2 ( VAR_3 . getType ( ) ) ) ) { VAR_1 . METHOD_3 ( ( STRING_1 + ( TYPE_3 . message ( VAR_2 ) ) ) ) ; } METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_2 . METHOD_5 ( ) , VAR_3 . METHOD_5 ( ) , true ) ; METHOD_6 ( VAR_1 , VAR_2 , VAR_2 . METHOD_7 ( ) , VAR_3 . METHOD_7 ( ) , true ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { TYPE_1 . METHOD_2 ( VAR_1 , ( STRING_1 + context ) ) ; if ( ! ( TYPE_2 . METHOD_3 ( ) ) ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( context . METHOD_4 ( VAR_3 ) ) ) ; VAR_2 . METHOD_5 ( TYPE_4 . METHOD_6 ( context , intent ) , 0 , METHOD_7 ( context , intent ) ) ; } TYPE_2 . METHOD_8 ( TYPE_4 . METHOD_9 ( intent ) ) ; }\n", "fixed": "protected void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { if ( TYPE_2 . METHOD_3 ( ) ) { TYPE_2 . METHOD_8 ( TYPE_4 . METHOD_9 ( intent ) ) ; } else { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( context . METHOD_4 ( VAR_3 ) ) ) ; VAR_2 . METHOD_5 ( TYPE_4 . METHOD_6 ( context , intent ) , 0 , METHOD_7 ( context , intent ) ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public java.lang.String METHOD_1 ( ) throws TYPE_1 , TYPE_2 , TYPE_3 { java.lang.System.out.println ( STRING_1 ) ; METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( METHOD_4 ( ) . METHOD_5 ( ) ) != null ) { METHOD_6 ( ) . METHOD_7 ( null ) ; METHOD_4 ( ) . METHOD_8 ( null ) ; return STRING_2 ; } else { METHOD_9 ( ) ; return STRING_3 ; } }\n", "fixed": "public java.lang.String METHOD_1 ( ) throws TYPE_1 , TYPE_2 , TYPE_3 { METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( METHOD_4 ( ) . METHOD_5 ( ) ) != null ) { METHOD_6 ( ) . METHOD_7 ( null ) ; METHOD_4 ( ) . METHOD_8 ( null ) ; return STRING_2 ; } else { METHOD_9 ( ) ; return STRING_3 ; } }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"problem": "public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.Object target = VAR_1 ; java.lang.Class VAR_3 = VAR_4 class ; if ( ( VAR_5 ) <= INT_1 ) { target = VAR_1 . METHOD_2 ( ) ; VAR_3 = target . getClass ( ) ; } if ( ( VAR_6 ) == null ) { VAR_6 = TYPE_3 . METHOD_3 ( VAR_3 , STRING_1 ) ; if ( ( VAR_6 ) == null ) return ; } TYPE_3 . setValue ( VAR_6 , target , VAR_2 ) ; }\n", "fixed": "public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_6 ) == null ) { VAR_6 = TYPE_3 . METHOD_3 ( VAR_4 class , STRING_1 ) ; } if ( ( VAR_6 ) == null ) return ; TYPE_3 . setValue ( VAR_6 , VAR_1 , VAR_2 ) ; }\n"}
{"problem": "public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { if ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_4 ) ) { TYPE_2 VAR_5 = ( ( TYPE_2 ) ( VAR_2 ) ) ; if ( ! ( VAR_2 . METHOD_3 ( ) ) ) { VAR_1 . add ( VAR_2 ) ; } } } return VAR_1 ; }\n", "fixed": "public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { if ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ! ( VAR_2 . METHOD_3 ( ) ) ) { VAR_1 . add ( VAR_2 ) ; } } } return VAR_1 ; }\n"}
{"fixCommitSHA1": "b8108a370b039dbeccffad8c9b634f6ac85ed4a5", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "  */\n public class TFAgentStatBatchMapper {\n     private final Logger logger = LoggerFactory.getLogger(this.getClass());\n    public final TFAgentStatMappter tFAgentStatMappter = new TFAgentStatMappter();\n     public TFAgentStatBatch map(AgentStatBo agentStatBo) {\n         try {\n            List<TFAgentStat> tFAgentstatList = tFAgentStatMappter.map(agentStatBo);\n             long startTimestamp = getStartTimestamp(agentStatBo);\n             TFAgentStatBatch tFAgentStatBatch = new TFAgentStatBatch(agentStatBo.getAgentId(), startTimestamp, tFAgentstatList);\n             return tFAgentStatBatch;", "fixed": "  */\n public class TFAgentStatBatchMapper {\n     private final Logger logger = LoggerFactory.getLogger(this.getClass());\n    public final TFAgentStatMapper tFAgentStatMapper = new TFAgentStatMapper();\n     public TFAgentStatBatch map(AgentStatBo agentStatBo) {\n         try {\n            List<TFAgentStat> tFAgentstatList = tFAgentStatMapper.map(agentStatBo);\n             long startTimestamp = getStartTimestamp(agentStatBo);\n             TFAgentStatBatch tFAgentStatBatch = new TFAgentStatBatch(agentStatBo.getAgentId(), startTimestamp, tFAgentstatList);\n             return tFAgentStatBatch;", "sourceBeforeFix": "tFAgentStatMappter.map(agentStatBo)", "sourceAfterFix": "tFAgentStatMapper.map(agentStatBo)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 , STRING_1 , STRING_2 , java.util.Arrays.asList ( new TYPE_2 ( 1 , STRING_2 ) , new TYPE_2 ( INT_2 , STRING_3 ) ) ) ; TYPE_3 < TYPE_1 > response = this . VAR_2 . METHOD_2 ( STRING_4 , VAR_1 , VAR_3 class , VAR_4 ) ; TYPE_4 . assertEquals ( VAR_5 , response . METHOD_3 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 , STRING_1 , STRING_2 , new TYPE_2 [ ] { new TYPE_2 ( 1 , STRING_2 ) , new TYPE_2 ( INT_2 , STRING_3 ) } ) ; TYPE_3 < TYPE_1 > response = this . VAR_2 . METHOD_2 ( STRING_4 , VAR_1 , VAR_3 class , VAR_4 ) ; TYPE_4 . assertEquals ( VAR_5 , response . METHOD_3 ( ) ) ; }\n"}
{"fixCommitSHA1": "2b0752b688e6f27129f344050787e9546adc004a", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         OperationService opService = getOperationService(local);\n         int partitionId = getPartitionId(remote);\n        opService.invokeOnPartition(null, new SlowOperation(callTimeoutMs * 2), partitionId);\n        ICompletableFuture f = opService.invokeOnPartition(null, new DummyOperation(), partitionId);\n         ExecutionCallback callback = mock(ExecutionCallback.class);\n         f.andThen(callback);", "fixed": "         OperationService opService = getOperationService(local);\n         int partitionId = getPartitionId(remote);\n        opService.invokeOnPartition(new SlowOperation(callTimeoutMs * 2).setPartitionId(partitionId));\n        ICompletableFuture f = opService.invokeOnPartition(new DummyOperation().setPartitionId(partitionId));\n         ExecutionCallback callback = mock(ExecutionCallback.class);\n         f.andThen(callback);", "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}
{"problem": "public boolean METHOD_1 ( java.lang.String VAR_1 , int value ) { if ( value < 0 ) return false ; TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; try { int VAR_2 = METHOD_4 ( VAR_1 ) ; if ( ( VAR_2 - value ) < 0 ) return false ; VAR_3 . put ( VAR_1 , ( VAR_2 - value ) ) ; return true ; } finally { METHOD_5 ( STRING_1 , VAR_1 , STRING_2 , value ) ; TYPE_1 . METHOD_2 ( ) . METHOD_6 ( ) ; } }\n", "fixed": "public boolean METHOD_1 ( java.lang.String VAR_1 , int value ) { if ( value < 0 ) return false ; TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; int VAR_2 = METHOD_4 ( VAR_1 ) ; if ( ( VAR_2 - value ) < 0 ) return false ; try { VAR_3 . put ( VAR_1 , ( VAR_2 - value ) ) ; return true ; } finally { METHOD_5 ( STRING_1 , VAR_1 , STRING_2 , value ) ; TYPE_1 . METHOD_2 ( ) . METHOD_6 ( ) ; } }\n"}
{"problem": "public long METHOD_1 ( java.lang.String VAR_1 , long VAR_2 , long VAR_3 ) { TYPE_1 VAR_4 = VAR_5 . get ( VAR_1 ) ; if ( VAR_4 == null ) { VAR_4 = new TYPE_1 ( VAR_1 , VAR_6 ) ; VAR_5 . put ( VAR_1 , VAR_4 ) ; } VAR_7 += VAR_3 ; VAR_4 . METHOD_1 ( VAR_2 , ( ( VAR_8 ) + ( VAR_7 ) ) ) ; return ( VAR_8 ) + ( VAR_7 ) ; }\n", "fixed": "public long METHOD_1 ( java.lang.String VAR_1 , long VAR_2 , long VAR_3 ) { TYPE_1 VAR_4 = VAR_5 . get ( VAR_1 ) ; if ( VAR_4 == null ) { VAR_4 = new TYPE_1 ( VAR_1 , VAR_6 ) ; VAR_5 . put ( VAR_1 , VAR_4 ) ; } VAR_7 += VAR_3 ; VAR_4 . METHOD_1 ( VAR_2 ) ; return ( VAR_8 ) + ( VAR_7 ) ; }\n"}
{"fixCommitSHA1": "d9ce8ddd35f22bba791a97e17d14ce4ff0a9f87c", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "  * {@code OperationHandler} responsible for adding a virtual host.\n  *\n  * @author Emanuel Muckenhuber\n  */\n class WebVirtualHostAdd implements ModelAddOperationHandler, DescriptionProvider {", "fixed": "  * {@code OperationHandler} responsible for adding a virtual host.\n  *\n  * @author Emanuel Muckenhuber\n * @author Scott stark (sstark@redhat.com) (C) 2011 Red Hat Inc.\n  */\n class WebVirtualHostAdd implements ModelAddOperationHandler, DescriptionProvider {", "sourceBeforeFix": "node.has(Constants.ALIAS)", "sourceAfterFix": "node.hasDefined(Constants.ALIAS)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 != null ) { METHOD_4 ( ) . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_2 ) ) ; } else { METHOD_4 ( ) . METHOD_5 ( TYPE_3 . METHOD_7 ( METHOD_2 ( ) . METHOD_8 ( ) ) ) ; } METHOD_9 ( VAR_3 , true ) ; METHOD_4 ( ) . METHOD_10 ( STRING_1 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_9 ( VAR_3 , true ) ; METHOD_4 ( ) . METHOD_10 ( STRING_1 ) ; TYPE_2 VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) ; java.lang.String name = ( VAR_2 != null ) ? TYPE_3 . METHOD_6 ( VAR_2 ) : TYPE_3 . METHOD_7 ( METHOD_2 ( ) . METHOD_8 ( ) ) ; METHOD_4 ( ) . METHOD_5 ( name ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 . METHOD_2 ( STRING_1 , \"true\" ) ; VAR_1 . METHOD_3 ( ) ; TYPE_2 . assertTrue ( new java.io.File ( VAR_2 , ( ( file . getName ( ) ) + STRING_2 ) ) . METHOD_4 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 . METHOD_2 ( STRING_1 , \"true\" ) ; VAR_1 . METHOD_3 ( ) ; java.io.File results = new java.io.File ( VAR_2 , ( ( file . getName ( ) ) + STRING_2 ) ) ; TYPE_2 . assertTrue ( results . METHOD_4 ( ) ) ; results . delete ( ) ; }\n"}
{"problem": "public TYPE_1 update ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 = VAR_3 . update ( VAR_2 . METHOD_1 ( VAR_1 ) ) ; for ( TYPE_3 VAR_4 : VAR_1 . METHOD_2 ( ) ) { VAR_5 . update ( new TYPE_4 ( ) . METHOD_1 ( VAR_4 ) ) ; } return VAR_2 . METHOD_3 ( ) ; }\n", "fixed": "public TYPE_1 update ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 = VAR_3 . update ( VAR_2 . METHOD_1 ( VAR_1 ) ) ; if ( ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( ( VAR_1 . METHOD_2 ( ) . size ( ) ) > 0 ) ) { for ( TYPE_3 VAR_4 : VAR_1 . METHOD_2 ( ) ) { VAR_5 . update ( new TYPE_4 ( ) . METHOD_1 ( VAR_4 ) ) ; } } return VAR_2 . METHOD_3 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { TYPE_1 temp = VAR_1 . get ( i ) ; java.lang.System.out.print ( ( ( ( temp . getName ( ) ) + STRING_1 ) + ( temp . METHOD_3 ( ) ) ) ) ; if ( i < ( ( VAR_1 . size ( ) ) - 1 ) ) java.lang.System.out.print ( STRING_2 ) ; } }\n", "fixed": "private void METHOD_1 ( ) { java.lang.System.out.println ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { TYPE_1 temp = VAR_1 . get ( i ) ; java.lang.System.out.print ( ( ( ( temp . getName ( ) ) + STRING_1 ) + ( temp . METHOD_3 ( ) ) ) ) ; if ( i < ( ( VAR_1 . size ( ) ) - 1 ) ) java.lang.System.out.print ( STRING_2 ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item ) { if ( ( item . METHOD_2 ( ) ) == ( VAR_1 ) ) { TYPE_2 b = getIntent ( ) . METHOD_3 ( ) ; if ( ( b != null ) && ( b . getBoolean ( VAR_2 , false ) ) ) { android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_4 ( intent ) ; } METHOD_5 ( ) ; return true ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 item ) { if ( ( item . METHOD_2 ( ) ) == ( VAR_1 ) ) { TYPE_2 b = getIntent ( ) . METHOD_3 ( ) ; if ( b != null ) { android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_4 ( intent ) ; } METHOD_5 ( ) ; return true ; } return false ; }\n"}
{"fixCommitSHA1": "b3203058be9aba7abbbfa8091413a75603b270bc", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tSkipPatternJarScanner(JarScanner jarScanner, Set<String> patterns) {\n \t\tAssert.notNull(jarScanner, \"JarScanner must not be null\");\n\t\tAssert.notNull(jarScanner, \"Patterns must not be null\");\n \t\tthis.jarScanner = jarScanner;\n \t\tthis.patterns = patterns;\n \t\tsetPatternToTomcat8SkipFilter();", "fixed": " \tSkipPatternJarScanner(JarScanner jarScanner, Set<String> patterns) {\n \t\tAssert.notNull(jarScanner, \"JarScanner must not be null\");\n\t\tAssert.notNull(patterns, \"Patterns must not be null\");\n \t\tthis.jarScanner = jarScanner;\n \t\tthis.patterns = patterns;\n \t\tsetPatternToTomcat8SkipFilter();", "sourceBeforeFix": "Assert.notNull(jarScanner,\"Patterns must not be null\")", "sourceAfterFix": "Assert.notNull(patterns,\"Patterns must not be null\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SedaEndpointBuilder\n             extends\n                 SedaEndpointConsumerBuilder, SedaEndpointProducerBuilder {\n         default AdvancedSedaEndpointBuilder advanced() {", "fixed": "     \n    public interface SedaEndpointBuilder\n             extends\n                 SedaEndpointConsumerBuilder, SedaEndpointProducerBuilder {\n         default AdvancedSedaEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public java.lang.String toString ( ) { return ( ( ( ( ( ( ( STRING_1 + ( state ) ) + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ) + STRING_4 ) + ( ( VAR_2 ) != null ? VAR_2 : STRING_5 ) ) + STRING_4 ) + CHAR_1 ; }\n", "fixed": "public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( ( STRING_1 + ( state ) ) + STRING_2 ) + STRING_4 ) + ( VAR_1 ) ) + STRING_4 ) + STRING_3 ) + STRING_4 ) + ( ( VAR_2 ) != null ? VAR_2 : STRING_5 ) ) + STRING_4 ) + CHAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 obj = new TYPE_1 ( ) ; obj . METHOD_2 ( TYPE_2 . METHOD_3 ( INT_1 , INT_2 , 1 ) ) ; TYPE_3 view = VAR_1 . METHOD_4 ( obj , VAR_2 class ) ; TYPE_4 . assertEquals ( STRING_1 , view . METHOD_5 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 obj = new TYPE_1 ( ) ; obj . METHOD_2 ( TYPE_2 . METHOD_3 ( INT_1 , INT_2 , 1 ) ) ; TYPE_3 view = VAR_1 . METHOD_4 ( obj , VAR_2 class ) ; assertEquals ( STRING_1 , view . METHOD_5 ( ) ) ; }\n"}
{"problem": "public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 source , TYPE_4 VAR_1 , TYPE_5 VAR_2 , java.util.Collection < java.lang.Class < ? extends TYPE_6 < TYPE_3 , TYPE_2 > > > VAR_3 ) { TYPE_1 < TYPE_2 > VAR_4 = METHOD_2 ( source , null ) ; if ( VAR_4 != null ) return VAR_4 ; TYPE_7 < TYPE_2 > VAR_5 = new TYPE_7 ( ) ; VAR_5 . METHOD_3 ( METHOD_4 ( source , VAR_1 , VAR_2 , VAR_3 ) ) ; if ( VAR_3 == null ) METHOD_2 ( source , VAR_5 ) ; return VAR_5 ; }\n", "fixed": "public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 source , TYPE_4 VAR_1 , TYPE_5 VAR_2 , java.util.Collection < java.lang.Class < ? extends TYPE_6 < TYPE_3 , TYPE_2 > > > VAR_3 ) { TYPE_7 < TYPE_2 > VAR_5 = new TYPE_7 ( ) ; VAR_5 . METHOD_3 ( METHOD_4 ( source , VAR_1 , VAR_2 , VAR_3 ) ) ; return VAR_5 ; }\n"}
{"problem": "public double METHOD_1 ( ) { double [ ] x = VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( x == null ) || ( ( x . length ) < INT_1 ) ) { return - INT_1 ; } else { double VAR_2 = x [ 0 ] ; double VAR_3 = x [ 1 ] ; double VAR_4 = ( VAR_2 + VAR_3 ) / INT_1 ; return VAR_4 ; } }\n", "fixed": "public double METHOD_1 ( ) { double [ ] x = VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( x == null ) || ( ( x . length ) < INT_1 ) ) { return 0 ; } else { double VAR_2 = x [ 0 ] ; double VAR_3 = x [ 1 ] ; double VAR_4 = ( VAR_2 + VAR_3 ) / INT_1 ; return VAR_4 ; } }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( TYPE_1 ... params ) { try { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . init ( ) ; } return VAR_1 . METHOD_3 ( params [ 0 ] ) ; } catch ( TYPE_2 VAR_2 ) { try { VAR_1 . METHOD_4 ( ) ; } catch ( TYPE_2 VAR_3 ) { } return null ; } }\n", "fixed": "protected TYPE_1 METHOD_1 ( TYPE_1 ... params ) { try { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { if ( ! ( VAR_1 . init ( ) ) ) return null ; } return VAR_1 . METHOD_3 ( params [ 0 ] ) ; } catch ( TYPE_2 VAR_2 ) { try { VAR_1 . METHOD_4 ( ) ; } catch ( TYPE_2 VAR_3 ) { } return null ; } }\n"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { final java.util.List < TYPE_1 > VAR_3 = VAR_4 . get ( VAR_1 ) ; if ( VAR_3 == null ) VAR_4 . put ( VAR_1 , java.util.Arrays.asList ( VAR_2 ) ) ; else VAR_3 . add ( VAR_2 ) ; }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { if ( ( VAR_4 . get ( VAR_1 ) ) == null ) VAR_4 . put ( VAR_1 , new java.util.ArrayList ( java.util.Arrays.asList ( VAR_2 ) ) ) ; else VAR_4 . get ( VAR_1 ) . add ( VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 msg ) { byte [ ] VAR_1 = msg . getData ( ) ; VAR_2 . append ( ( ( STRING_1 + ( TYPE_2 . METHOD_2 ( VAR_1 , VAR_1 . length , STRING_2 ) ) ) + \"\\n\" ) ) ; VAR_2 . METHOD_3 ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 msg ) { byte [ ] VAR_1 = msg . getData ( ) ; VAR_2 . append ( ( ( STRING_1 + ( TYPE_2 . METHOD_2 ( VAR_1 , 0 , VAR_1 . length , STRING_2 ) ) ) + \"\\n\" ) ) ; VAR_2 . METHOD_3 ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) { return null ; } else { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; switch ( VAR_2 . METHOD_3 ( ) ) { case VAR_3 : TYPE_1 VAR_4 = VAR_1 . METHOD_2 ( ) ; VAR_5 . METHOD_4 ( VAR_2 ) ; VAR_5 . METHOD_4 ( VAR_4 ) ; return VAR_4 ; default : VAR_5 . METHOD_4 ( VAR_2 ) ; return VAR_2 ; } } }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) { return null ; } else { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.System.out.println ( VAR_2 . toString ( ) ) ; switch ( VAR_2 . METHOD_3 ( ) ) { case VAR_3 : TYPE_1 VAR_4 = VAR_1 . METHOD_2 ( ) ; VAR_5 . METHOD_4 ( VAR_2 ) ; VAR_5 . METHOD_4 ( VAR_4 ) ; return VAR_4 ; default : VAR_5 . METHOD_4 ( VAR_2 ) ; return VAR_2 ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\tfield.setAccessible(true);\r\n \t\t\tinit((ServletConfig) field.get(this));\r\n \t\t}\r\n\t\tcatch (Throwable ex) {\r\n \t\t\tlog.error(ex);\r\n \t\t}\r\n \t}\r", "fixed": " \t\t\tfield.setAccessible(true);\r\n \t\t\tinit((ServletConfig) field.get(this));\r\n \t\t}\r\n\t\tcatch (Exception ex) {\r\n \t\t\tlog.error(ex);\r\n \t\t}\r\n \t}\r", "sourceBeforeFix": "Throwable ex", "sourceAfterFix": "Exception ex"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BraintreeEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBraintreeEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface BraintreeEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBraintreeEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_1 . METHOD_3 ( true ) ; this . VAR_3 = VAR_1 ; METHOD_4 ( VAR_1 ) ; TYPE_2 VAR_4 = METHOD_5 ( ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_6 ( true ) ; } }\n", "fixed": "private void METHOD_1 ( ) { VAR_3 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_3 . METHOD_3 ( true ) ; METHOD_4 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_5 ( ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_6 ( true ) ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 ; for ( java.lang.Integer VAR_3 : METHOD_2 ( ) ) { TYPE_1 VAR_4 = TYPE_2 . METHOD_3 ( METHOD_4 ( ) , VAR_3 , METHOD_5 ( ) ) ; switch ( VAR_4 ) { case VAR_5 : break ; case VAR_6 : VAR_1 = VAR_7 ; break ; case VAR_8 : return VAR_9 ; default : throw new TYPE_3 ( ( STRING_1 + VAR_4 ) ) ; } } return VAR_1 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( ) { if ( METHOD_2 ( ) . contains ( null ) ) { return VAR_9 ; } TYPE_1 VAR_1 = VAR_2 ; for ( java.lang.Integer VAR_3 : METHOD_2 ( ) ) { TYPE_1 VAR_4 = TYPE_2 . METHOD_3 ( METHOD_4 ( ) , VAR_3 , METHOD_5 ( ) ) ; switch ( VAR_4 ) { case VAR_5 : break ; case VAR_6 : VAR_1 = VAR_7 ; break ; case VAR_8 : return VAR_9 ; default : throw new TYPE_3 ( ( STRING_1 + VAR_4 ) ) ; } } return VAR_1 ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_2 ( VAR_2 , STRING_1 ) ; if ( ( VAR_1 . METHOD_3 ( ) ) < INT_1 ) { return ; } if ( VAR_1 == null ) { throw new TYPE_2 ( STRING_2 ) ; } for ( java.util.Map.Entry < java.lang.String , java.util.Set < TYPE_1 > > VAR_3 : VAR_4 . METHOD_4 ( ) ) { VAR_5 . METHOD_5 ( VAR_3 . METHOD_6 ( ) , VAR_1 ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_2 ( VAR_2 , STRING_1 ) ; if ( VAR_1 == null ) { throw new TYPE_2 ( STRING_2 ) ; } for ( java.util.Map.Entry < java.lang.String , java.util.Set < TYPE_1 > > VAR_3 : VAR_4 . METHOD_4 ( ) ) { VAR_5 . METHOD_5 ( VAR_3 . METHOD_6 ( ) , VAR_1 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { if ( ( VAR_3 ) != null ) { VAR_2 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( ) ) + STRING_1 ) ) ; return ; } getData ( ) ; TYPE_3 . METHOD_4 ( VAR_1 , VAR_2 , TYPE_4 . METHOD_5 ( this . METHOD_6 ( ) . METHOD_7 ( ) , this . METHOD_8 ( ) ) , INT_1 , INT_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { if ( ( VAR_3 ) != null ) { VAR_2 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( ) ) + STRING_1 ) ) ; return ; } TYPE_3 . METHOD_4 ( VAR_1 , VAR_2 , TYPE_4 . METHOD_5 ( this . METHOD_6 ( ) . METHOD_7 ( ) , this . METHOD_8 ( ) ) , INT_1 , INT_2 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"problem": "public void init ( byte VAR_1 , long VAR_2 , java.lang.String VAR_3 , int startTime , int endTime , java.lang.Object value , long VAR_4 , long VAR_5 ) { super . init ( VAR_6 , VAR_1 , TYPE_1 . id ( ) , VAR_2 , VAR_3 , startTime , endTime , value ) ; this . VAR_4 = VAR_4 ; this . VAR_5 = VAR_5 ; }\n", "fixed": "public void init ( int VAR_1 , long VAR_2 , java.lang.String VAR_3 , int startTime , int endTime , java.lang.Object value , long VAR_4 , long VAR_5 ) { super . init ( VAR_6 , VAR_1 , TYPE_1 . id ( ) , VAR_2 , VAR_3 , startTime , endTime , value ) ; this . VAR_4 = VAR_4 ; this . VAR_5 = VAR_5 ; }\n"}
{"fixCommitSHA1": "7a90cfe13f0b030f6e091154c1d0091c685039f1", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "     public BufferClassesResponse getBufferClasses() {\n         try {\n            return api.path(routes.BufferResource().getBufferClasses(), BufferClassesResponse.class).node(this).execute();\n         } catch (Exception e) {\n             LOG.error(\"Unable to read buffer class names from node \" + this, e);\n         }", "fixed": "     public BufferClassesResponse getBufferClasses() {\n         try {\n            return api.path(routes.BuffersResource().getBufferClasses(), BufferClassesResponse.class).node(this).execute();\n         } catch (Exception e) {\n             LOG.error(\"Unable to read buffer class names from node \" + this, e);\n         }", "sourceBeforeFix": "routes.BufferResource()", "sourceAfterFix": "routes.BuffersResource()"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , java.util.Map < java.lang.Long , java.util.List < java.lang.String > > VAR_3 ) { if ( ( VAR_1 == null ) || ( ( VAR_1 . trim ( ) . length ( ) ) <= 0 ) ) return ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_1 ) ; METHOD_2 ( VAR_4 ) ; METHOD_3 ( VAR_4 , VAR_2 ) ; METHOD_4 ( VAR_4 ) ; METHOD_5 ( VAR_4 , VAR_2 ) ; METHOD_1 ( VAR_4 , VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , java.util.Map < java.lang.Long , java.util.List < java.lang.String > > VAR_3 ) { if ( ( VAR_1 == null ) || ( ( VAR_1 . trim ( ) . length ( ) ) <= 0 ) ) return ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_1 ) ; METHOD_2 ( VAR_4 ) ; METHOD_4 ( VAR_4 ) ; METHOD_3 ( VAR_4 , VAR_2 ) ; METHOD_5 ( VAR_4 , VAR_2 ) ; METHOD_1 ( VAR_4 , VAR_3 ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { int value = TYPE_1 . METHOD_3 ( this , STRING_1 , STRING_2 , VAR_2 , VAR_3 ) ; if ( value == ( VAR_4 ) ) { try { VAR_1 . METHOD_4 ( ) ; } catch ( java.lang.Exception VAR_5 ) { TYPE_1 . METHOD_5 ( this , STRING_3 ) ; VAR_5 . METHOD_6 ( TYPE_2 . out ) ; } } } }\n", "fixed": "private void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { int value = TYPE_1 . METHOD_3 ( this , STRING_1 , STRING_2 , VAR_2 , VAR_3 ) ; if ( value == ( VAR_4 ) ) { try { VAR_1 . METHOD_4 ( ) ; } catch ( java.lang.Exception VAR_5 ) { TYPE_1 . METHOD_5 ( this , STRING_3 ) ; VAR_5 . METHOD_6 ( TYPE_2 . out ) ; } } } java.lang.System.exit ( 0 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; METHOD_2 ( VAR_3 ) ; VAR_4 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_5 ) ) ) ; VAR_6 = new TYPE_4 ( METHOD_4 ( ) ) ; if ( VAR_6 . METHOD_5 ( ) ) { METHOD_6 ( ) ; } METHOD_7 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; METHOD_2 ( VAR_3 ) ; VAR_4 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_5 ) ) ) ; VAR_6 = new TYPE_4 ( METHOD_4 ( ) ) ; if ( VAR_6 . METHOD_5 ( ) ) { METHOD_6 ( ) ; } else { METHOD_7 ( ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"problem": "public static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class , STRING_1 ) ; VAR_1 . METHOD_3 ( VAR_3 class ) ; VAR_1 . METHOD_4 ( STRING_2 , STRING_3 ) ; VAR_1 . METHOD_4 ( STRING_4 , STRING_5 ) ; VAR_1 . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ; return VAR_1 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class , STRING_1 ) ; VAR_1 . METHOD_3 ( VAR_3 class ) ; VAR_1 . METHOD_4 ( STRING_2 , STRING_3 ) ; VAR_1 . METHOD_4 ( STRING_4 , STRING_5 ) ; return VAR_1 ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 ) { TYPE_5 VAR_6 = TYPE_6 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 , \"name\" , VAR_5 ) ; if ( VAR_6 == null ) { VAR_6 = TYPE_6 . METHOD_2 ( VAR_7 , STRING_2 , \"name\" , VAR_5 ) ; } return TYPE_7 . METHOD_1 ( VAR_6 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 ) { TYPE_5 VAR_7 = VAR_1 . METHOD_3 ( ) ; TYPE_5 VAR_6 = TYPE_6 . METHOD_2 ( VAR_7 , STRING_1 , \"name\" , VAR_5 ) ; if ( VAR_6 == null ) { VAR_6 = TYPE_6 . METHOD_2 ( VAR_7 , STRING_2 , \"name\" , VAR_5 ) ; } return TYPE_7 . METHOD_1 ( VAR_6 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( getActivity ( ) ) ; VAR_3 = VAR_2 . getBoolean ( VAR_4 , false ) ; if ( VAR_1 != null ) { VAR_5 = true ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( getActivity ( ) ) ; VAR_3 = VAR_2 . getBoolean ( VAR_4 , false ) ; if ( VAR_1 != null ) { VAR_5 = true ; } }\n"}
{"fixCommitSHA1": "a421ca3133ddf727a147e87455a5511444d8d4bb", "projectName": "google.auto", "bugType": "Change Caller in Function Call", "problem": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplemetationMethodDescriptor> implemetationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "fixed": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplementationMethodDescriptor> implementationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "sourceBeforeFix": "implemetationMethodDescriptors.build()", "sourceAfterFix": "implementationMethodDescriptors.build()"}
{"problem": "public void METHOD_1 ( ) { boolean VAR_1 = false ; for ( int i = 0 ; ( i < ( VAR_2 . METHOD_2 ( ) ) ) && ( ! VAR_1 ) ; i ++ ) { if ( ( VAR_2 . METHOD_3 ( i ) ) instanceof TYPE_1 ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_2 . METHOD_3 ( i ) ) ) ; VAR_4 = VAR_3 . METHOD_4 ( ) ; VAR_1 = true ; } } }\n", "fixed": "public void METHOD_1 ( ) { boolean VAR_1 = false ; for ( int i = 0 ; ( i < ( VAR_2 . METHOD_2 ( ) ) ) && ( ! VAR_1 ) ; i ++ ) { if ( ( VAR_2 . METHOD_3 ( i ) ) instanceof TYPE_1 ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_2 . METHOD_3 ( i ) ) ) ; VAR_4 = ( VAR_3 . METHOD_4 ( ) ) - 1 ; VAR_1 = true ; } } }\n"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 = VAR_2 . get ( METHOD_3 ( ) ) ; VAR_3 = new TYPE_1 ( VAR_4 , VAR_1 ) ; VAR_5 . execute ( VAR_3 ) ; VAR_6 . METHOD_4 ( VAR_7 , ( ( ( STRING_1 + ( METHOD_3 ( ) ) ) + 1 ) + STRING_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 = VAR_2 . get ( METHOD_3 ( ) ) ; VAR_3 = new TYPE_1 ( VAR_4 , VAR_1 ) ; VAR_5 . execute ( VAR_3 ) ; VAR_6 . METHOD_4 ( VAR_7 , ( ( STRING_1 + ( ( METHOD_3 ( ) ) + 1 ) ) + STRING_2 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; super . METHOD_1 ( ) ; synchronized ( VAR_3 ) { for ( TYPE_1 VAR_4 : VAR_3 ) { VAR_4 . METHOD_3 ( ) ; VAR_1 . METHOD_2 ( VAR_2 , ( ( VAR_4 . getClass ( ) . METHOD_4 ( ) ) + STRING_2 ) ) ; } VAR_3 . METHOD_5 ( ) ; } VAR_5 . METHOD_6 ( this ) ; VAR_5 . METHOD_7 ( ) ; METHOD_8 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; super . METHOD_1 ( ) ; synchronized ( VAR_3 ) { for ( TYPE_1 VAR_4 : VAR_3 ) { VAR_4 . METHOD_3 ( ) ; VAR_1 . METHOD_2 ( VAR_2 , ( ( VAR_4 . getClass ( ) . METHOD_4 ( ) ) + STRING_2 ) ) ; } VAR_3 . METHOD_5 ( ) ; } VAR_5 . METHOD_6 ( this ) ; VAR_5 . METHOD_7 ( ) ; }\n"}
{"problem": "private java.lang.Integer METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.Integer VAR_3 = null ; if ( ( ( ( VAR_2 == ( VAR_4 ) ) || ( VAR_2 == ( VAR_5 ) ) ) || ( VAR_2 == ( VAR_6 ) ) ) || ( VAR_2 == ( VAR_7 ) ) ) { VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; } if ( VAR_3 == null ) { TYPE_3 VAR_8 = VAR_1 . METHOD_3 ( ) ; VAR_3 = VAR_8 . METHOD_4 ( ) ; } return VAR_3 ; }\n", "fixed": "protected java.lang.Integer METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.Integer VAR_3 = null ; if ( ( ( ( VAR_2 == ( VAR_4 ) ) || ( VAR_2 == ( VAR_5 ) ) ) || ( VAR_2 == ( VAR_6 ) ) ) || ( VAR_2 == ( VAR_7 ) ) ) { VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; } if ( VAR_3 == null ) { TYPE_3 VAR_8 = VAR_1 . METHOD_3 ( ) ; VAR_3 = VAR_8 . METHOD_4 ( ) ; } return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( ) { double VAR_1 = INT_1 ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; double VAR_3 = FLOAT_1 ; double result = VAR_2 . METHOD_3 ( ) ; assertEquals ( VAR_3 , result , 0.0 ) ; VAR_3 = 0.0 ; VAR_2 . METHOD_4 ( ) ; assertEquals ( VAR_3 , result , 0.0 ) ; }\n", "fixed": "public void METHOD_1 ( ) { double VAR_1 = INT_1 ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; double VAR_3 = FLOAT_1 ; double result = VAR_2 . METHOD_3 ( ) ; assertEquals ( VAR_3 , result , 0.0 ) ; VAR_3 = 0.0 ; VAR_2 . METHOD_4 ( ) ; result = VAR_2 . METHOD_3 ( ) ; assertEquals ( VAR_3 , result , 0.0 ) ; }\n"}
{"fixCommitSHA1": "d270a8582b50321bc4b8a5921ff2439022a403d2", "projectName": "checkstyle.checkstyle", "bugType": "Less Specific If", "problem": "              token = token.getParent())\n         {\n             final int type = token.getType();\n            if (type == TokenTypes.CLASS_DEF) {\nbreak;\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\nbreak;", "fixed": "              token = token.getParent())\n         {\n             final int type = token.getType();\n            if (type == TokenTypes.CLASS_DEF\n                || type == TokenTypes.ENUM_DEF\n                || type == TokenTypes.INTERFACE_DEF)\n            {\nbreak;\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\nbreak;", "sourceBeforeFix": "type == TokenTypes.CLASS_DEF", "sourceAfterFix": "type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.INTERFACE_DEF"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( int [ ] [ ] data , int [ ] VAR_1 ) { VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; if ( ( ( data == null ) || ( VAR_1 == null ) ) || ( ( data . length ) != ( VAR_1 . length ) ) ) return ; METHOD_1 ( data ) ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) VAR_2 . get ( i ) . VAR_1 = VAR_1 [ i ] ; }\n", "fixed": "public void METHOD_1 ( int [ ] [ ] data , int [ ] VAR_1 ) { if ( ( ( data == null ) || ( VAR_1 == null ) ) || ( ( data . length ) != ( VAR_1 . length ) ) ) return ; VAR_2 = new java.util.HashMap < java.lang.Integer , TYPE_1 > ( ) ; METHOD_1 ( data ) ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) VAR_2 . get ( i ) . VAR_1 = VAR_1 [ i ] ; }\n"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( true ) ; VAR_1 = VAR_2 . METHOD_3 ( ) ; VAR_3 = VAR_4 . METHOD_4 ( ) ; VAR_5 = VAR_6 . METHOD_5 ( ) ; TYPE_1 . assertEquals ( STRING_1 , java.util.Arrays.asList ( VAR_7 , VAR_8 , VAR_9 ) , VAR_10 . METHOD_6 ( ) . list ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( true ) ; VAR_1 = VAR_2 . METHOD_3 ( ) ; VAR_3 = VAR_4 . METHOD_4 ( ) ; VAR_5 = VAR_6 . METHOD_5 ( ) ; TYPE_1 . assertEquals ( STRING_1 , java.util.Arrays.asList ( VAR_7 , VAR_8 ) , VAR_10 . METHOD_6 ( ) . list ( ) ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( final java.lang.String name ) { final java.lang.String path = new java.lang.StringBuilder ( VAR_1 ) . append ( name ) . append ( VAR_2 ) . toString ( ) ; final java.net.URL url = getClass ( ) . METHOD_2 ( path ) ; java.lang.System.out.println ( url ) ; return TYPE_1 . METHOD_3 ( url ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( final java.lang.String name ) { final java.lang.String path = new java.lang.StringBuilder ( VAR_1 ) . append ( name ) . append ( VAR_2 ) . toString ( ) ; final java.net.URL url = getClass ( ) . METHOD_2 ( path ) ; return TYPE_1 . METHOD_3 ( url ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { if ( ! ( ( event . getSelection ( ) ) instanceof TYPE_2 ) ) { return ; } TYPE_3 < java.lang.Long > element = ( ( TYPE_3 < java.lang.Long > ) ( ( ( TYPE_2 ) ( event . getSelection ( ) ) ) . METHOD_2 ( ) ) ) ; element . METHOD_3 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { if ( ! ( ( event . getSelection ( ) ) instanceof TYPE_2 ) ) { return ; } TYPE_3 < java.lang.Long > element = ( ( TYPE_3 < java.lang.Long > ) ( ( ( TYPE_2 ) ( event . getSelection ( ) ) ) . METHOD_2 ( ) ) ) ; if ( element != null ) { element . METHOD_3 ( ) ; } }\n"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n \t/**\n \t * Save the given list of global properties to the database.", "fixed": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t/**\n \t * Save the given list of global properties to the database.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0b54767e246d4619cd9f40931b54947da38d317d", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "             LOG.warn(\"Interrupted when attempting to close writer for end point: \" + eldest, e);\n             Thread.currentThread().interrupt();\n         } catch (Exception e) {\n            LOG.warn(\"Interrupted when attempting to close writer for end point: \" + ep, e);\n         }\n     }", "fixed": "             LOG.warn(\"Interrupted when attempting to close writer for end point: \" + eldest, e);\n             Thread.currentThread().interrupt();\n         } catch (Exception e) {\n            LOG.warn(\"Interrupted when attempting to close writer for end point: \" + eldest, e);\n         }\n     }", "sourceBeforeFix": "\"Interrupted when attempting to close writer for end point: \" + ep", "sourceAfterFix": "\"Interrupted when attempting to close writer for end point: \" + eldest"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_5 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_6 ) ) ) ; TYPE_4 VAR_7 = new TYPE_5 ( METHOD_4 ( ) ) ; VAR_5 . METHOD_5 ( VAR_7 ) ; data = new java.util.ArrayList < > ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_5 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_6 ) ) ) ; TYPE_4 VAR_7 = new TYPE_5 ( this ) ; VAR_5 . METHOD_5 ( VAR_7 ) ; data = new java.util.ArrayList < > ( ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"problem": "public static boolean METHOD_1 ( java.lang.String path ) { if ( TYPE_1 . equals ( TYPE_2 . METHOD_2 ( ) ) ) { java.io.File VAR_1 = TYPE_2 . METHOD_3 ( ) ; java.io.File VAR_2 = new java.io.File ( ( ( VAR_1 . METHOD_4 ( ) ) + path ) ) ; TYPE_3 . i ( STRING_1 , VAR_2 . METHOD_5 ( ) ) ; if ( ! ( VAR_2 . METHOD_6 ( ) ) ) { return VAR_2 . METHOD_7 ( ) ; } } return false ; }\n", "fixed": "public static boolean METHOD_1 ( java.lang.String path ) { if ( TYPE_1 . equals ( TYPE_2 . METHOD_2 ( ) ) ) { java.io.File VAR_1 = TYPE_2 . METHOD_3 ( ) ; java.io.File VAR_2 = new java.io.File ( ( ( VAR_1 . METHOD_4 ( ) ) + path ) ) ; TYPE_3 . i ( STRING_1 , VAR_2 . METHOD_5 ( ) ) ; if ( ! ( VAR_2 . METHOD_6 ( ) ) ) { return VAR_2 . METHOD_7 ( ) ; } else { return true ; } } return false ; }\n"}
{"fixCommitSHA1": "e75b06a12cc6de7b6ffaa998c4c8540230ef5514", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\t\tcase SORT_BOTH_MERGE:      return 2;\n \t\t\tcase SORT_FIRST_MERGE:     return 1;\n \t\t\tcase SORT_SECOND_MERGE:    return 1;\n\t\t\tcase MERGE:                return 0;\n \t\t\tcase HYBRIDHASH_FIRST:     return 1;\n \t\t\tcase HYBRIDHASH_SECOND:    return 1;\n \t\t\tcase MMHASH_FIRST:         return 1;", "fixed": " \t\t\tcase SORT_BOTH_MERGE:      return 2;\n \t\t\tcase SORT_FIRST_MERGE:     return 1;\n \t\t\tcase SORT_SECOND_MERGE:    return 1;\n\t\t\tcase MERGE:                return 1;\n \t\t\tcase HYBRIDHASH_FIRST:     return 1;\n \t\t\tcase HYBRIDHASH_SECOND:    return 1;\n \t\t\tcase MMHASH_FIRST:         return 1;", "sourceBeforeFix": "return 0; ", "sourceAfterFix": "return 1; "}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"problem": "private void METHOD_1 ( final TYPE_1 state ) { VAR_1 . METHOD_2 ( state . getInt ( VAR_2 ) ) ; VAR_3 = TYPE_2 . METHOD_3 ( state , VAR_4 ) ; TYPE_3 VAR_5 = TYPE_3 . METHOD_4 ( getActivity ( ) ) ; VAR_3 = VAR_5 . METHOD_5 ( VAR_3 , VAR_1 ) ; }\n", "fixed": "private void METHOD_1 ( final TYPE_1 state ) { VAR_1 . METHOD_2 ( state . getInt ( VAR_2 ) ) ; VAR_3 = TYPE_2 . METHOD_3 ( state , VAR_4 ) ; TYPE_3 VAR_5 = TYPE_3 . METHOD_4 ( getActivity ( ) ) ; VAR_3 = VAR_5 . METHOD_5 ( VAR_3 , this ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item ) { final java.lang.String title = item . METHOD_2 ( ) . toString ( ) ; if ( STRING_1 . equals ( title ) ) { METHOD_3 ( item . METHOD_4 ( ) ) ; } else if ( STRING_2 . equals ( title ) ) { METHOD_5 ( item . METHOD_4 ( ) ) ; } else { return false ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 item ) { final java.lang.String title = item . METHOD_2 ( ) . toString ( ) ; if ( STRING_1 . equals ( title ) ) { METHOD_3 ( item . METHOD_4 ( ) ) ; } else { return false ; } return true ; }\n"}
{"problem": "public void METHOD_1 ( boolean VAR_1 , boolean VAR_2 , boolean VAR_3 , android.content.Context context ) { android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_2 ( VAR_4 ) ; intent . METHOD_3 ( VAR_5 , VAR_1 ) ; intent . METHOD_3 ( VAR_6 , VAR_2 ) ; intent . METHOD_3 ( VAR_7 , VAR_3 ) ; context . METHOD_4 ( intent ) ; }\n", "fixed": "private static boolean METHOD_1 ( boolean VAR_1 , boolean VAR_2 , boolean VAR_3 , android.content.Context context ) { intent . METHOD_2 ( VAR_4 ) ; intent . METHOD_3 ( VAR_5 , VAR_1 ) ; intent . METHOD_3 ( VAR_6 , VAR_2 ) ; intent . METHOD_3 ( VAR_7 , VAR_3 ) ; context . METHOD_4 ( intent ) ; return true ; }\n"}
{"fixCommitSHA1": "1d577b1b8bd3f51bcf8d9d89bb4598a28020af07", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         for (Channel c: channels) {\n             if (c != ctx.channel()) {\n                c.write(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n                         msg + '\\n');\n             } else {\n                c.write(\"[you] \" + msg + '\\n');\n             }\n         }", "fixed": "         for (Channel c: channels) {\n             if (c != ctx.channel()) {\n                c.writeAndFlush(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n                         msg + '\\n');\n             } else {\n                c.writeAndFlush(\"[you] \" + msg + '\\n');\n             }\n         }", "sourceBeforeFix": "c.write(\"[\" + ctx.channel().remoteAddress() + \"] \"+ msg+ '\\n')", "sourceAfterFix": "c.writeAndFlush(\"[\" + ctx.channel().remoteAddress() + \"] \"+ msg+ '\\n')"}
{"fixCommitSHA1": "0d3c78b6f28fb3cad00c12605209c524702adb0a", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             return record;\n         }\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;", "fixed": "             return record;\n         }\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ( ( TYPE_3 ) ( null ) ) , STRING_1 , false ) ; assertNotNull ( VAR_1 ) ; assertTrue ( VAR_1 . METHOD_3 ( ) ) ; assertTrue ( VAR_1 . METHOD_4 ( ) ) ; METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; METHOD_7 ( VAR_1 . list ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ( ( TYPE_3 ) ( null ) ) , STRING_1 , true ) ; assertNotNull ( VAR_1 ) ; assertTrue ( VAR_1 . METHOD_3 ( ) ) ; assertTrue ( VAR_1 . METHOD_4 ( ) ) ; METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; METHOD_7 ( VAR_1 . list ( ) ) ; }\n"}
{"fixCommitSHA1": "27fb87cfcea241c2d7961baf68e84ce97f2dee7a", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "       }\n       statsData.setDecimalStats(decimalStats);\n       statsObj.setStatsData(statsData);\n    } else if (columnType.equalsIgnoreCase(\"date\")) {\n       DateColumnStatsData dateStats = new DateColumnStatsData();\n       Map<String, String> mapProp = work.getMapProp();\n       for (Entry<String, String> entry : mapProp.entrySet()) {", "fixed": "       }\n       statsData.setDecimalStats(decimalStats);\n       statsObj.setStatsData(statsData);\n    } else if (columnType.equalsIgnoreCase(\"date\")\n            || columnType.equalsIgnoreCase(\"timestamp\")) {\n       DateColumnStatsData dateStats = new DateColumnStatsData();\n       Map<String, String> mapProp = work.getMapProp();\n       for (Entry<String, String> entry : mapProp.entrySet()) {", "sourceBeforeFix": "columnType.equalsIgnoreCase(\"date\")", "sourceAfterFix": "columnType.equalsIgnoreCase(\"date\") || columnType.equalsIgnoreCase(\"timestamp\")"}
{"fixCommitSHA1": "4a0d68c50bc8ef11d94538567ce3c8f7deb5d4ab", "projectName": "netty.netty", "bugType": "Change Binary Operator", "problem": "     }\n     private void runTaskQueue() {\n        while (acquiredChannelCount <= maxConnections) {\n             AcquireTask task = pendingAcquireQueue.poll();\n             if (task == null) {\n                 break;", "fixed": "     }\n     private void runTaskQueue() {\n        while (acquiredChannelCount < maxConnections) {\n             AcquireTask task = pendingAcquireQueue.poll();\n             if (task == null) {\n                 break;", "sourceBeforeFix": "acquiredChannelCount <= maxConnections", "sourceAfterFix": "acquiredChannelCount < maxConnections"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClientModel(@Valid Client body);\n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })", "fixed": "     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClientModel(@Valid Client body) throws Exception;\n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"problem": "public java.util.LinkedList < TYPE_1 > METHOD_1 ( ) { java.util.LinkedList < TYPE_1 > VAR_1 = new java.util.LinkedList < > ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; for ( int i = 0 ; i <= ( VAR_3 . size ( ) ) ; i ++ ) { VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_1 . add ( VAR_2 ) ; } return VAR_1 ; }\n", "fixed": "public java.util.LinkedList < TYPE_1 > METHOD_1 ( ) { java.util.LinkedList < TYPE_1 > VAR_1 = new java.util.LinkedList < > ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; for ( int i = 0 ; i < ( VAR_3 . size ( ) ) ; i ++ ) { VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_1 . add ( VAR_2 ) ; } return VAR_1 ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 item = METHOD_2 ( VAR_1 ) ; java.util.Map < java.lang.String , TYPE_4 > VAR_2 = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( item ) ; java.lang.Integer VAR_4 = null ; if ( ! ( VAR_2 . get ( STRING_1 ) . getValue ( ) . METHOD_4 ( ) ) ) { VAR_4 = java.lang.Integer.parseInt ( VAR_2 . get ( STRING_1 ) . getValue ( ) . METHOD_5 ( ) ) ; } VAR_3 . METHOD_6 ( VAR_4 ) ; return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 item = METHOD_2 ( VAR_1 ) ; java.util.Map < java.lang.String , TYPE_4 > VAR_2 = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( item ) ; java.lang.Integer VAR_4 = null ; if ( ( VAR_2 . get ( STRING_1 ) . getValue ( ) ) != null ) { VAR_4 = java.lang.Integer.parseInt ( VAR_2 . get ( STRING_1 ) . getValue ( ) . METHOD_5 ( ) ) ; } VAR_3 . METHOD_6 ( VAR_4 ) ; return VAR_3 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public java.lang.String METHOD_1 ( android.view.View view ) { if ( ( METHOD_2 ( view ) ) == null ) return null ; if ( TYPE_1 . METHOD_3 ( view ) ) return TYPE_1 . METHOD_4 ( ( ( METHOD_2 ( view ) ) + ( TYPE_1 . METHOD_5 ( ) ) ) ) ; return TYPE_1 . METHOD_4 ( METHOD_2 ( view ) ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( android.view.View view ) { if ( ( METHOD_2 ( view ) ) == null ) return null ; if ( TYPE_1 . METHOD_3 ( view ) ) return TYPE_1 . METHOD_4 ( ( ( METHOD_2 ( view ) ) + ( TYPE_1 . METHOD_5 ( ) ) ) ) ; return METHOD_2 ( view ) ; }\n"}
{"fixCommitSHA1": "32b9bf2b8d2b7802fee98db0d11bbb4d2478873e", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "         org.apache.kafka.clients.producer.KafkaProducer kp = producer.getKafkaProducer();\n        Mockito.when(kp.send(Mockito.any(), Mockito.any())).thenThrow(new ApiException());\n         in.setHeader(KafkaConstants.PARTITION_KEY, \"4\");", "fixed": "         org.apache.kafka.clients.producer.KafkaProducer kp = producer.getKafkaProducer();\n        Mockito.when(kp.send(Mockito.any(ProducerRecord.class), Mockito.any(Callback.class))).thenThrow(new ApiException());\n         in.setHeader(KafkaConstants.PARTITION_KEY, \"4\");", "sourceBeforeFix": "Mockito.any()", "sourceAfterFix": "Mockito.any(ProducerRecord.class)"}
{"fixCommitSHA1": "fc1049ce93555e3e73c42a9759cc61b347a6c16a", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @param worker the Alluxio worker handle\n    */\n   public DataServerHandler(final AlluxioWorkerService worker) {\n    Preconditions.checkNotNull(worker);\n     mBlockHandler = new BlockDataServerHandler(worker.getBlockWorker());\n     mUnderFileSystemHandler = new UnderFileSystemDataServerHandler(worker.getFileSystemWorker());\n   }", "fixed": "    * @param worker the Alluxio worker handle\n    */\n   public DataServerHandler(final AlluxioWorkerService worker) {\n    Preconditions.checkNotNull(worker, \"worker\");\n     mBlockHandler = new BlockDataServerHandler(worker.getBlockWorker());\n     mUnderFileSystemHandler = new UnderFileSystemDataServerHandler(worker.getFileSystemWorker());\n   }", "sourceBeforeFix": "Preconditions.checkNotNull(worker)", "sourceAfterFix": "Preconditions.checkNotNull(worker,\"worker\")"}
{"project": "Closure", "bugId": 76, "problem": " private VariableLiveness isVariableReadBeforeKill(\n         for (Node child = n.getFirstChild();\n             child != null; child = child.getNext()) {\nif (!ControlFlowGraph.isEnteringNewCfgNode(child)) {\n           VariableLiveness state = isVariableReadBeforeKill(child, variable);\n           if (state != VariableLiveness.MAYBE_LIVE) {\n             return state;\n           }\n         }\n      }\n     }\n     return VariableLiveness.MAYBE_LIVE;", "fixed": " private VariableLiveness isVariableReadBeforeKill(\n         for (Node child = n.getFirstChild();\n             child != null; child = child.getNext()) {\n           VariableLiveness state = isVariableReadBeforeKill(child, variable);\n           if (state != VariableLiveness.MAYBE_LIVE) {\n             return state;\n           }\n         }\n     }\n     return VariableLiveness.MAYBE_LIVE;", "observations": "", "repairActions": ["assignAdd", "condBranIfAdd", "condBranIfElseAdd", "condBranRem", "condExpMod", "mcAdd", "mcRem", "retBranchAdd", "varAdd"], "repairPatterns": ["condBlockOthersAdd", "condBlockRetAdd", "missComp", "missNullCheckN", "unwrapIfElse"]}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ( ! ( VAR_1 ) ) ) ; while ( ( VAR_2 ) > 0 ) { METHOD_3 ( ) ; } VAR_3 . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( VAR_4 , VAR_5 ) ; VAR_1 = true ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ( ! ( VAR_1 ) ) ) ; while ( ( VAR_2 ) > 0 ) { METHOD_3 ( ) ; } TYPE_1 . METHOD_2 ( VAR_3 . isEmpty ( ) ) ; TYPE_2 . METHOD_5 ( VAR_4 , VAR_5 ) ; VAR_1 = true ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public final boolean equals ( final java.lang.Object VAR_1 ) { if ( VAR_1 instanceof TYPE_1 ) { final TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( VAR_2 != null ) && ( TYPE_2 . METHOD_1 ( METHOD_2 ( ) ) . equals ( TYPE_2 . METHOD_1 ( VAR_2 . METHOD_2 ( ) ) ) ) ; } return false ; }\n", "fixed": "public final boolean equals ( final java.lang.Object VAR_1 ) { if ( VAR_1 instanceof TYPE_1 ) { final TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return TYPE_2 . METHOD_1 ( METHOD_2 ( ) ) . equals ( TYPE_2 . METHOD_1 ( VAR_2 . METHOD_2 ( ) ) ) ; } return false ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } int i = index . METHOD_2 ( ) ; int VAR_2 = i % ( VAR_1 . size ( ) ) ; TYPE_1 VAR_3 = VAR_1 . get ( VAR_2 ) ; return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) { return null ; } int i = index . METHOD_2 ( ) ; int VAR_2 = i % ( VAR_1 . size ( ) ) ; TYPE_1 VAR_3 = VAR_1 . get ( VAR_2 ) ; return VAR_3 ; }\n"}
{"problem": "public double METHOD_1 ( ) { int index = METHOD_2 ( ) ; double [ ] VAR_1 = VAR_2 . METHOD_3 ( STRING_1 , new double [ 0 ] ) ; if ( ( VAR_1 . length ) == 0 ) { TYPE_1 . METHOD_4 ( STRING_2 , VAR_1 [ index ] ) ; return 0.0 ; } java.lang.System.out.println ( STRING_3 ) ; TYPE_1 . METHOD_4 ( STRING_2 , VAR_1 [ index ] ) ; return VAR_1 [ index ] ; }\n", "fixed": "public double METHOD_1 ( ) { int index = METHOD_2 ( ) ; double [ ] VAR_1 = VAR_2 . METHOD_3 ( STRING_1 , new double [ 0 ] ) ; if ( ( VAR_1 . length ) == 0 ) { return 0.0 ; } java.lang.System.out.println ( STRING_3 ) ; TYPE_1 . METHOD_4 ( STRING_2 , VAR_1 [ index ] ) ; return VAR_1 [ index ] ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . assertEquals ( 1 , TYPE_2 . METHOD_2 ( 1 , 1 ) ) ; TYPE_1 . assertEquals ( 1 , TYPE_2 . METHOD_2 ( 1 , INT_1 ) ) ; TYPE_1 . assertEquals ( INT_1 , TYPE_2 . METHOD_2 ( INT_1 , 1 ) ) ; TYPE_1 . assertEquals ( INT_2 , TYPE_2 . METHOD_2 ( INT_1 , INT_3 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . assertEquals ( 1 , METHOD_2 ( 1 , 1 ) ) ; TYPE_1 . assertEquals ( 1 , METHOD_2 ( 1 , INT_1 ) ) ; TYPE_1 . assertEquals ( INT_1 , METHOD_2 ( INT_1 , 1 ) ) ; TYPE_1 . assertEquals ( INT_2 , METHOD_2 ( INT_1 , INT_3 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( this . VAR_2 . METHOD_3 ( ) ) ; this . VAR_1 . METHOD_4 ( this . VAR_3 ) ; int VAR_4 = ( this . VAR_2 . METHOD_3 ( ) . size ( ) ) - ( this . VAR_5 ) ; this . VAR_5 = this . VAR_2 . METHOD_3 ( ) . size ( ) ; METHOD_5 ( ( ( VAR_4 > ( VAR_6 ) ? VAR_6 : VAR_4 ) - 1 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) ; this . VAR_1 . METHOD_4 ( this . VAR_3 ) ; int VAR_4 = ( this . VAR_2 . METHOD_3 ( ) . size ( ) ) - ( this . VAR_5 ) ; this . VAR_5 = this . VAR_2 . METHOD_3 ( ) . size ( ) ; METHOD_5 ( ( ( VAR_4 > ( VAR_6 ) ? VAR_6 : VAR_4 ) - 1 ) ) ; }\n"}
{"problem": "public TYPE_1 [ ] values ( ) { int index = 0 ; TYPE_1 [ ] values = ( ( TYPE_1 [ ] ) ( new java.lang.Object [ size ( ) ] ) ) ; for ( int i = 0 ; i < ( VAR_1 ) ; i ++ ) if ( ( ( VAR_2 [ i ] ) != null ) && ( ( VAR_3 [ i ] ) != ( VAR_4 ) ) ) values [ ( index ++ ) ] = VAR_2 [ i ] ; return values ; }\n", "fixed": "public java.util.List < TYPE_1 > values ( ) { java.util.List < TYPE_1 > values = new java.util.ArrayList < > ( size ( ) ) ; for ( int i = 0 ; i < ( VAR_1 ) ; i ++ ) if ( ( ( VAR_3 [ i ] ) != null ) && ( ( VAR_3 [ i ] ) != ( VAR_4 ) ) ) values . add ( VAR_2 [ i ] ) ; return values ; }\n"}
{"problem": "public static < TYPE_1 extends TYPE_2 & TYPE_3 > TYPE_4 METHOD_1 ( TYPE_5 VAR_1 , TYPE_1 VAR_2 , TYPE_6 < TYPE_7 > VAR_3 ) { TYPE_8 VAR_4 = new TYPE_8 ( ) ; TYPE_9 . METHOD_1 ( VAR_1 , VAR_4 , VAR_2 , VAR_3 ) ; VAR_4 . METHOD_2 ( ) . add ( VAR_2 ) ; return VAR_4 ; }\n", "fixed": "public static < TYPE_1 extends TYPE_2 & TYPE_3 > TYPE_4 METHOD_1 ( TYPE_5 VAR_1 , TYPE_1 VAR_2 , TYPE_6 < TYPE_7 > VAR_3 ) { TYPE_8 VAR_4 = new TYPE_8 ( ) ; TYPE_9 . METHOD_1 ( ( ) - > VAR_1 , VAR_4 , VAR_4 . METHOD_2 ( ) , VAR_2 , VAR_3 ) ; VAR_4 . METHOD_2 ( ) . add ( VAR_2 ) ; return VAR_4 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 path , TYPE_2 VAR_1 ) { if ( ( VAR_2 ) != null ) { TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; return ; } VAR_2 = new TYPE_4 ( VAR_1 , this ) ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; VAR_2 . METHOD_6 ( path ) ; VAR_2 . METHOD_7 ( true ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 path , TYPE_2 VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_4 ( VAR_1 , this ) ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; VAR_2 . METHOD_6 ( path ) ; } VAR_2 . METHOD_7 ( true ) ; }\n"}
{"project": "Lang", "bugId": 37, "problem": " public static boolean isEmpty(boolean[] array) {\n         final Class<?> type1 = array1.getClass().getComponentType();\n         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n         return joinedArray;\n     }", "fixed": " public static boolean isEmpty(boolean[] array) {\n         final Class<?> type1 = array1.getClass().getComponentType();\n         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        try {\n             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        } catch (ArrayStoreException ase) {\n            final Class<?> type2 = array2.getClass().getComponentType();\n            if (!type1.isAssignableFrom(type2)){\n                throw new IllegalArgumentException(\"Cannot store \"+type2.getName()+\" in an array of \"+type1.getName());\n            }\nthrow ase;\n        }\n         return joinedArray;\n     }", "observations": "", "repairActions": ["assignAdd", "condBranIfAdd", "exThrowsAdd", "exTryCatchAdd", "mcAdd", "objInstAdd", "varAdd"], "repairPatterns": ["condBlockExcAdd", "wrapsTryCatch"]}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { synchronized ( VAR_3 ) { TYPE_2 < TYPE_3 > VAR_4 = VAR_5 . get ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } TYPE_3 VAR_6 = VAR_4 . get ( VAR_2 ) ; if ( VAR_6 == null ) { return ; } VAR_5 . remove ( VAR_2 ) ; VAR_7 . remove ( VAR_6 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { synchronized ( VAR_3 ) { TYPE_2 < TYPE_3 > VAR_4 = VAR_5 . get ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } TYPE_3 VAR_6 = VAR_4 . get ( VAR_2 ) ; if ( VAR_6 == null ) { return ; } VAR_5 . remove ( VAR_1 ) ; VAR_7 . remove ( VAR_6 ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 != null ) return VAR_2 ; VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . getId ( ) , VAR_1 . METHOD_3 ( ) . getValue ( ) ) ; if ( VAR_2 != null ) { VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; } return VAR_2 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . getId ( ) , VAR_1 . METHOD_3 ( ) . getValue ( ) ) ; if ( VAR_2 != null ) { VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_1 = VAR_4 . METHOD_5 ( VAR_1 ) ; return VAR_1 . METHOD_2 ( ) ; } return VAR_2 ; }\n"}
{"problem": "public boolean METHOD_1 ( ) { switch ( this ) { default : case VAR_1 : return true ; case VAR_2 : int VAR_3 = ( ( java.lang.Integer ) ( this . VAR_4 ) ) ; if ( VAR_3 > 0 ) { this . VAR_4 = -- VAR_3 ; return true ; } else return false ; case VAR_5 : return new java.util.Date ( ) . METHOD_2 ( ( ( java.util.Date ) ( VAR_4 ) ) ) ; } }\n", "fixed": "public boolean METHOD_1 ( ) { switch ( this . type ) { default : case VAR_1 : return true ; case VAR_2 : int VAR_3 = ( ( java.lang.Integer ) ( this . VAR_4 ) ) ; if ( VAR_3 > 0 ) { this . VAR_4 = -- VAR_3 ; return true ; } else return false ; case VAR_5 : return new java.util.Date ( ) . METHOD_2 ( ( ( java.util.Date ) ( VAR_4 ) ) ) ; } }\n"}
{"fixCommitSHA1": "b366b2fb1840d4df542a69a8021a2e5498f7eec2", "projectName": "google.guava", "bugType": "Same Function Swap Args", "problem": "     Thread t2 = newStartedThread(c2);\n     awaitTermination(t1);\n     awaitTermination(t2);\n    assertEquals(c1.counts + c2.counts, SIZE * COUNTDOWN);\n   }\n   /**", "fixed": "     Thread t2 = newStartedThread(c2);\n     awaitTermination(t1);\n     awaitTermination(t2);\n    assertEquals(SIZE * COUNTDOWN, c1.counts + c2.counts);\n   }\n   /**", "sourceBeforeFix": "assertEquals(c1.counts + c2.counts,SIZE * COUNTDOWN)", "sourceAfterFix": "assertEquals(SIZE * COUNTDOWN,c1.counts + c2.counts)"}
{"fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "projectName": "eclipse.vert.x", "bugType": "Change Modifier", "problem": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException();\n   }\n }", "fixed": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = null ; METHOD_2 ( ) ; TYPE_2 element = ( ( VAR_3 ) != null ) ? VAR_3 . METHOD_3 ( VAR_4 , VAR_1 ) : null ; if ( element != null ) { METHOD_4 ( element ) ; VAR_2 = TYPE_1 . METHOD_5 ( this ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; return VAR_2 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = null ; TYPE_2 element = ( ( VAR_3 ) != null ) ? VAR_3 . METHOD_3 ( VAR_4 , VAR_1 ) : null ; if ( element != null ) { METHOD_4 ( element ) ; VAR_2 = TYPE_1 . METHOD_5 ( this ) ; METHOD_6 ( ) ; } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( 0 , VAR_3 ) ; VAR_4 . METHOD_5 ( ) ; } else { TYPE_2 . METHOD_6 ( this , getString ( VAR_5 ) , VAR_6 ) . show ( ) ; VAR_4 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( 0 , VAR_3 ) ; } else { TYPE_2 . METHOD_6 ( this , getString ( VAR_5 ) , VAR_6 ) . show ( ) ; VAR_4 . METHOD_5 ( ) ; } }\n"}
{"fixCommitSHA1": "d0c64987a9cb694631a3e5bc77b669f49f93a30e", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();\n                             Document xmlTamInfo = getFboxXmlResponse(url);", "fixed": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();\n                             Document xmlTamInfo = getFboxXmlResponse(url);", "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0", "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"}
{"problem": "public long METHOD_1 ( int id ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; try { return VAR_1 . delete ( VAR_3 , ( ( ( VAR_4 ) + STRING_1 ) + id ) , null ) ; } catch ( java.lang.Exception VAR_5 ) { return - 1 ; } }\n", "fixed": "public long METHOD_1 ( int id ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; try { int i = VAR_1 . delete ( VAR_3 , ( ( ( VAR_4 ) + STRING_1 ) + id ) , null ) ; return VAR_1 . delete ( VAR_3 , ( ( ( VAR_4 ) + STRING_1 ) + id ) , null ) ; } catch ( java.lang.Exception VAR_5 ) { return - 1 ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 b ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_2 VAR_1 = this . METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; java.lang.System.out.println ( ( STRING_2 + ( ( VAR_2 ) == null ) ) ) ; if ( ( VAR_2 ) == null ) return ; METHOD_5 ( VAR_1 , VAR_2 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 b ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_2 VAR_1 = this . METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; java.lang.System.out.println ( ( STRING_2 + ( ( VAR_2 ) == null ) ) ) ; if ( ( VAR_2 ) == null ) return ; METHOD_5 ( VAR_1 , VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( ( VAR_3 ) != null ) { for ( TYPE_1 VAR_4 : VAR_3 ) { if ( VAR_4 instanceof TYPE_2 ) { if ( ( VAR_4 . METHOD_2 ( ) ) == ( VAR_1 . METHOD_2 ( ) ) ) { VAR_4 = VAR_1 ; VAR_5 . METHOD_3 ( ) ; return ; } } } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_3 ) != null ) { for ( TYPE_1 VAR_4 : VAR_3 ) { if ( VAR_4 instanceof TYPE_2 ) { if ( ( VAR_4 . METHOD_2 ( ) ) == ( VAR_1 . METHOD_2 ( ) ) ) { VAR_4 = VAR_1 ; VAR_5 . METHOD_3 ( ) ; return ; } } } } }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 [ ] VAR_1 , TYPE_2 VAR_2 ) { if ( ( this . VAR_3 ) && ( ( VAR_1 . length ) < 0 ) ) { this . VAR_3 = false ; TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( new TYPE_4 ( ) ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 [ ] VAR_1 , TYPE_2 VAR_2 ) { if ( ( this . VAR_3 ) && ( ( VAR_1 . length ) == 0 ) ) { this . VAR_3 = false ; TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( new TYPE_4 ( ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; if ( VAR_1 == null ) return ; this . VAR_2 = null ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; VAR_1 . METHOD_4 ( VAR_5 ) ; VAR_1 . METHOD_5 ( VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; if ( VAR_1 == null ) return ; this . VAR_2 = null ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; VAR_1 . METHOD_4 ( VAR_5 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String id ) { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 , java.lang.Integer.parseInt ( id ) ) ; TYPE_1 VAR_4 = null ; java.lang.String response = VAR_5 . METHOD_3 ( VAR_1 ) ; TYPE_3 results = VAR_6 . METHOD_4 ( response ) ; VAR_4 = METHOD_5 ( results ) ; return VAR_4 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String id ) { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 , id ) ; TYPE_1 VAR_4 = null ; java.lang.String response = VAR_5 . METHOD_3 ( VAR_1 ) ; TYPE_3 results = VAR_6 . METHOD_4 ( response ) ; VAR_4 = METHOD_5 ( results ) ; return VAR_4 ; }\n"}
{"problem": "public void METHOD_1 ( final TYPE_1 name , final TYPE_2 VAR_1 ) { VAR_2 = ( ( TYPE_3 < TYPE_4 > ) ( VAR_1 ) ) . METHOD_2 ( ) ; if ( ( TYPE_5 . METHOD_3 ( this , VAR_3 ) ) != ( VAR_4 ) ) { TYPE_6 . METHOD_4 ( this , new java.lang.String [ ] { VAR_3 , VAR_5 } , VAR_6 ) ; return ; } else { VAR_2 . METHOD_5 ( ) ; } TYPE_7 . METHOD_6 ( VAR_7 , STRING_1 ) ; }\n", "fixed": "public void METHOD_1 ( final TYPE_1 name , final TYPE_2 VAR_1 ) { VAR_2 = ( ( TYPE_3 < TYPE_4 > ) ( VAR_1 ) ) . METHOD_2 ( ) ; if ( ( TYPE_5 . METHOD_3 ( this , VAR_3 ) ) != ( VAR_4 ) ) { VAR_2 . METHOD_5 ( ) ; } TYPE_7 . METHOD_6 ( VAR_7 , STRING_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( STRING_1 ) . put ( STRING_1 , STRING_2 ) ; VAR_1 . commit ( ) ; assertEquals ( ( 1L < < ( VAR_2 ) ) , METHOD_6 ( ) ) ; VAR_1 . METHOD_7 ( ) ; try { METHOD_2 ( ) . METHOD_4 ( ) ; fail ( ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( STRING_3 , VAR_3 . METHOD_8 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( STRING_1 ) . put ( STRING_1 , STRING_2 ) ; VAR_1 . commit ( ) ; assertEquals ( ( 1L < < ( VAR_2 ) ) , METHOD_6 ( VAR_1 ) ) ; VAR_1 . METHOD_7 ( ) ; try { METHOD_2 ( ) . METHOD_4 ( ) ; fail ( ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( STRING_3 , VAR_3 . METHOD_8 ( ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 data = new TYPE_1 ( ) ; data = VAR_1 . METHOD_1 ( data ) ; TYPE_2 . METHOD_2 ( VAR_2 class , ( ) - > VAR_1 . METHOD_1 ( null ) ) ; TYPE_2 . METHOD_2 ( VAR_2 class , ( ) - > VAR_1 . METHOD_3 ( null ) ) ; TYPE_2 . METHOD_2 ( VAR_3 class , ( ) - > VAR_1 . METHOD_3 ( new TYPE_1 ( ) ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 data = new TYPE_1 ( ) ; data = VAR_1 . METHOD_1 ( data ) ; TYPE_2 . METHOD_2 ( VAR_3 class , ( ) - > VAR_1 . METHOD_1 ( null ) ) ; TYPE_2 . METHOD_2 ( VAR_3 class , ( ) - > VAR_1 . METHOD_3 ( new TYPE_1 ( ) ) ) ; }\n"}
{"problem": "public static boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_1 ) == null ) VAR_1 = TYPE_1 . METHOD_2 ( STRING_2 ) ; } return INT_1 == ( VAR_1 ) ; }\n", "fixed": "public static boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_1 ) == 0 ) VAR_1 = TYPE_1 . METHOD_2 ( STRING_2 ) ; } return INT_1 == ( VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String query = STRING_1 ; final TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( query ) ; TYPE_2 . assertEquals ( INT_1 , VAR_1 . METHOD_3 ( ) . size ( ) ) ; TYPE_2 . assertTrue ( VAR_1 . METHOD_3 ( ) . contains ( new TYPE_3 ( STRING_2 ) ) ) ; TYPE_2 . assertTrue ( VAR_1 . METHOD_3 ( ) . contains ( new TYPE_3 ( STRING_3 ) ) ) ; TYPE_2 . assertEquals ( query , VAR_1 . METHOD_4 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String query = STRING_1 ; final TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( query ) ; assertEquals ( INT_1 , VAR_1 . METHOD_3 ( ) . size ( ) ) ; assertTrue ( VAR_1 . METHOD_3 ( ) . contains ( new TYPE_3 ( STRING_2 ) ) ) ; assertTrue ( VAR_1 . METHOD_3 ( ) . contains ( new TYPE_3 ( STRING_3 ) ) ) ; assertEquals ( query , VAR_1 . METHOD_4 ( ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { java.lang.System.out.println ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) ) ; switch ( VAR_1 ) { case VAR_3 : if ( VAR_2 == ( VAR_4 ) ) { } else if ( VAR_2 == ( VAR_5 ) ) { VAR_6 = TYPE_1 . METHOD_2 ( ) . VAR_7 ; VAR_8 . METHOD_3 ( ) ; } break ; } }\n", "fixed": "protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { switch ( VAR_1 ) { case VAR_3 : if ( VAR_2 == ( VAR_4 ) ) { } else if ( VAR_2 == ( VAR_5 ) ) { VAR_8 . METHOD_3 ( ) ; } break ; } }\n"}
{"problem": "public static void METHOD_1 ( ) { for ( int j = 0 ; j < ( VAR_1 . size ( ) ) ; ++ j ) { TYPE_1 VAR_2 = VAR_1 . get ( j ) ; TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_2 ) ; TYPE_2 . METHOD_4 ( VAR_2 ) ; } }\n", "fixed": "public static void METHOD_1 ( ) { for ( int j = 0 ; j < ( VAR_1 . size ( ) ) ; ++ j ) { TYPE_1 VAR_2 = VAR_1 . get ( j ) ; TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_2 ) ; TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_4 ( VAR_2 ) ; } }\n"}
{"fixCommitSHA1": "01fee8245ea33cbfe79dfc8bc3a7d4b9e3047beb", "projectName": "Graylog2.graylog2-server", "bugType": "Same Function More Args", "problem": "         final ClusterEvent clusterEvent = ClusterEvent.create(nodeId.toString(), className, event);\n         try {\n            final String id = dbCollection.save(clusterEvent).getSavedId();\n             LOG.debug(\"Published cluster event with ID <{}> and type <{}>\", id, className);\n         } catch (MongoException e) {\n             LOG.error(\"Couldn't publish cluster event of type <\" + className + \">\", e);", "fixed": "         final ClusterEvent clusterEvent = ClusterEvent.create(nodeId.toString(), className, event);\n         try {\n            final String id = dbCollection.save(clusterEvent, WriteConcern.FSYNCED).getSavedId();\n             LOG.debug(\"Published cluster event with ID <{}> and type <{}>\", id, className);\n         } catch (MongoException e) {\n             LOG.error(\"Couldn't publish cluster event of type <\" + className + \">\", e);", "sourceBeforeFix": "dbCollection.save(clusterEvent)", "sourceAfterFix": "dbCollection.save(clusterEvent,WriteConcern.FSYNCED)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; if ( ! ( VAR_3 . METHOD_3 ( ) ) ) return false ; TYPE_5 VAR_4 = TYPE_4 . METHOD_4 ( VAR_1 ) ; return ( VAR_4 == ( VAR_5 ) ) || ( VAR_4 == ( VAR_6 ) ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; if ( ! ( VAR_3 . METHOD_3 ( ) ) ) return false ; final TYPE_5 VAR_4 = TYPE_4 . METHOD_4 ( VAR_1 , VAR_2 ) ; return ( VAR_4 == ( VAR_5 ) ) || ( VAR_4 == ( VAR_6 ) ) ; }\n"}
{"problem": "public long METHOD_1 ( ) { long VAR_1 = ( ( VAR_2 ) - ( index ) ) + 1 ; if ( VAR_1 == 0 ) { return 0 ; } else { return - ( ( VAR_3 ) + ( ( VAR_1 - 1 ) * ( VAR_4 ) ) ) ; } }\n", "fixed": "public long METHOD_1 ( ) { long VAR_1 = ( VAR_2 ) - ( index ) ; if ( VAR_1 == ( - 1 ) ) { return 0 ; } else { return - ( ( VAR_3 ) + ( VAR_1 * ( VAR_4 ) ) ) ; } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( android.content.Context context , java.util.List < TYPE_2 > VAR_1 , TYPE_3 listener ) { TYPE_4 VAR_2 = new TYPE_4 ( VAR_3 , VAR_1 ) ; TYPE_5 VAR_4 = new TYPE_5 ( context ) ; TYPE_1 VAR_5 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_4 ) ; new TYPE_6 ( context , VAR_2 , listener , VAR_5 ) ; return VAR_5 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( android.content.Context context , java.util.List < TYPE_2 > VAR_1 ) { TYPE_4 VAR_2 = new TYPE_4 ( VAR_3 , VAR_1 ) ; TYPE_5 VAR_4 = new TYPE_5 ( context ) ; TYPE_1 VAR_5 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_4 ) ; new TYPE_6 ( context , VAR_2 ) ; return VAR_5 ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytesBinary(tableNameOrRegionName), Bytes.toBytesBinary(splitPoint));\n   }\n   /**", "fixed": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytes(tableNameOrRegionName), Bytes.toBytes(splitPoint));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableOrRegionName)"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 msg = new TYPE_1 ( VAR_1 . getData ( ) . METHOD_2 ( ) ) ; msg . METHOD_3 ( true ) ; msg . METHOD_4 ( 1 ) ; try { java.lang.System.out.println ( msg ) ; VAR_2 . METHOD_5 ( VAR_3 , msg ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 msg = new TYPE_1 ( VAR_1 . getData ( ) . METHOD_2 ( ) ) ; msg . METHOD_3 ( true ) ; msg . METHOD_4 ( 1 ) ; try { VAR_2 . METHOD_5 ( VAR_3 , msg ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_6 ( ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String name ) { if ( name . equals ( STRING_1 ) ) return new TYPE_2 ( STRING_2 , true ) ; if ( name . equals ( STRING_3 ) ) return new TYPE_3 ( ) ; if ( name . equals ( STRING_4 ) ) return new TYPE_4 ( ) ; return super . METHOD_1 ( name ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String name ) { if ( name . equals ( STRING_1 ) ) return new TYPE_2 ( STRING_2 , true ) ; if ( name . equals ( STRING_4 ) ) return new TYPE_4 ( ) ; return super . METHOD_1 ( name ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ; java.lang.String item = ( ( java.lang.String ) ( VAR_3 . METHOD_4 ( ) ) ) ; VAR_4 [ java.lang.Integer.parseInt ( VAR_2 ) ] = item . split ( VAR_5 ) [ 1 ] ; VAR_6 [ java.lang.Integer.parseInt ( VAR_2 ) ] = item . split ( VAR_5 ) [ 0 ] ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = java.lang.Integer.parseInt ( VAR_1 . METHOD_2 ( ) ) ; java.lang.System.out.println ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ; java.lang.String item = ( ( java.lang.String ) ( VAR_3 . METHOD_4 ( ) ) ) ; java.lang.System.out.println ( item ) ; VAR_4 [ VAR_2 ] = item . split ( VAR_5 ) [ 1 ] ; VAR_6 [ VAR_2 ] = item . split ( VAR_5 ) [ 0 ] ; }\n"}
{"problem": "public void METHOD_1 ( ) { byte [ ] output = VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . assertThat ( output . length ) . METHOD_3 ( VAR_3 . length ) ; TYPE_1 . assertThat ( TYPE_2 . METHOD_4 ( output ) ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { byte [ ] output = VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . assertThat ( output . length ) . METHOD_3 ( VAR_3 . size ( ) ) ; TYPE_1 . assertThat ( TYPE_2 . METHOD_4 ( output ) ) . METHOD_3 ( VAR_3 ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , int [ ] VAR_2 ) { VAR_1 . METHOD_2 ( VAR_2 [ 0 ] , VAR_2 [ 1 ] , ( ( VAR_2 [ INT_1 ] ) + ( VAR_2 [ 0 ] ) ) , ( ( VAR_2 [ INT_2 ] ) + ( VAR_2 [ 1 ] ) ) , VAR_3 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , int [ ] VAR_2 ) { VAR_1 . METHOD_2 ( VAR_2 [ 0 ] , ( ( VAR_2 [ 1 ] ) + 1 ) , ( ( ( VAR_2 [ INT_1 ] ) + ( VAR_2 [ 0 ] ) ) - 1 ) , ( ( ( VAR_2 [ INT_2 ] ) + ( VAR_2 [ 1 ] ) ) - 1 ) , VAR_3 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.util.List < TYPE_2 > VAR_2 = new java.util.ArrayList < > ( ) ; VAR_2 . add ( INT_1 ) ; VAR_2 . add ( INT_2 ) ; VAR_2 . add ( INT_3 ) ; long result = ( ( long ) ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) ; TYPE_3 . assertEquals ( INT_2 , result ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.util.List < java.lang.Integer > VAR_2 = new java.util.ArrayList < > ( ) ; VAR_2 . add ( INT_1 ) ; VAR_2 . add ( INT_2 ) ; VAR_2 . add ( INT_3 ) ; int result = ( ( int ) ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) ; TYPE_3 . assertEquals ( INT_2 , result ) ; }\n"}
{"problem": "public static void METHOD_1 ( final java.io.InputStream VAR_1 , final TYPE_1 output , final int VAR_2 ) throws java.io.IOException { final byte [ ] buffer = new byte [ VAR_2 ] ; int n = 0 ; while ( ( - 1 ) != ( n = VAR_1 . METHOD_2 ( buffer ) ) ) { output . METHOD_3 ( buffer , 0 , n ) ; } }\n", "fixed": "public static void METHOD_1 ( final java.io.InputStream VAR_1 , final TYPE_1 output , final int VAR_2 ) throws java.io.IOException { final byte [ ] buffer = new byte [ VAR_2 ] ; int n = 0 ; while ( 0 <= ( n = VAR_1 . METHOD_2 ( buffer ) ) ) { output . METHOD_3 ( buffer , 0 , n ) ; } }\n"}
{"fixCommitSHA1": "dbd841562137595e365ccf2ad1524ecfdee958c9", "projectName": "google.auto", "bugType": "Change Caller in Function Call", "problem": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplemetationMethodDescriptor> implemetationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "fixed": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplementationMethodDescriptor> implementationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "sourceBeforeFix": "implemetationMethodDescriptors.build()", "sourceAfterFix": "implementationMethodDescriptors.build()"}
{"problem": "public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( 1 ) ; TYPE_3 < android.view.View > VAR_2 = TYPE_4 . METHOD_4 ( TYPE_5 . METHOD_5 ( STRING_1 ) , TYPE_5 . METHOD_6 ( TYPE_5 . METHOD_7 ( VAR_3 ) ) ) ; TYPE_6 . METHOD_8 ( VAR_2 ) . METHOD_9 ( TYPE_7 . METHOD_10 ( ) ) ; TYPE_6 . METHOD_8 ( TYPE_5 . METHOD_7 ( VAR_4 ) ) . METHOD_11 ( TYPE_8 . METHOD_12 ( TYPE_5 . METHOD_13 ( ) ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) ) ; TYPE_3 < android.view.View > VAR_2 = TYPE_4 . METHOD_4 ( TYPE_5 . METHOD_5 ( STRING_1 ) , TYPE_5 . METHOD_6 ( TYPE_5 . METHOD_7 ( VAR_3 ) ) ) ; TYPE_6 . METHOD_8 ( VAR_2 ) . METHOD_9 ( TYPE_7 . METHOD_10 ( ) ) ; TYPE_6 . METHOD_8 ( TYPE_5 . METHOD_7 ( VAR_4 ) ) . METHOD_11 ( TYPE_8 . METHOD_12 ( TYPE_5 . METHOD_13 ( ) ) ) ; }\n"}
{"problem": "TYPE_1 METHOD_1 ( int VAR_1 ) throws java.lang.Exception { return new TYPE_1 ( new TYPE_2 ( ( STRING_1 + VAR_1 ) ) , null , new TYPE_3 ( new TYPE_4 ( ( STRING_2 + ( java.lang.Math.abs ( VAR_1 ) ) ) ) , new TYPE_4 ( ( STRING_2 + ( java.lang.Math.abs ( ( VAR_1 + 1 ) ) ) ) ) ) ) ; }\n", "fixed": "TYPE_1 METHOD_1 ( int VAR_1 ) throws java.lang.Exception { return new TYPE_1 ( new TYPE_2 ( ( STRING_1 + VAR_1 ) ) , null , null , new TYPE_3 ( new TYPE_4 ( ( STRING_2 + ( java.lang.Math.abs ( VAR_1 ) ) ) ) , new TYPE_4 ( ( STRING_2 + ( java.lang.Math.abs ( ( VAR_1 + 1 ) ) ) ) ) ) ) ; }\n"}
{"problem": "public final void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 keys = this . keys ( ) ; final TYPE_2 key = keys . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_3 . assertThat ( keys . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( key ) ) ; keys . remove ( key . number ( ) ) ; }\n", "fixed": "public final void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 keys = this . keys ( ) ; final TYPE_2 key = keys . METHOD_2 ( STRING_1 , this . key ( ) ) ; TYPE_3 . assertThat ( keys . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( key ) ) ; keys . remove ( key . number ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 context , TYPE_3 position ) { if ( position == ( VAR_2 ) ) { VAR_1 . add ( TYPE_4 . METHOD_2 ( this . VAR_3 . METHOD_3 ( ) , STRING_1 ) ) ; } for ( int i = 0 ; i < ( this . VAR_4 ) ; i ++ ) { this . VAR_5 [ i ] . METHOD_1 ( VAR_1 , context , VAR_6 ) ; } this . VAR_3 . METHOD_1 ( VAR_1 , context , VAR_7 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 context , TYPE_3 position ) { if ( position == ( VAR_2 ) ) { VAR_1 . add ( TYPE_4 . METHOD_2 ( this . position , STRING_1 ) ) ; } for ( int i = 0 ; i < ( this . VAR_4 ) ; i ++ ) { this . VAR_5 [ i ] . METHOD_1 ( VAR_1 , context , VAR_6 ) ; } this . VAR_3 . METHOD_1 ( VAR_1 , context , VAR_7 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NatsEndpointBuilder\n             extends\n                 NatsEndpointConsumerBuilder, NatsEndpointProducerBuilder {\n         default AdvancedNatsEndpointBuilder advanced() {", "fixed": "     \n    public interface NatsEndpointBuilder\n             extends\n                 NatsEndpointConsumerBuilder, NatsEndpointProducerBuilder {\n         default AdvancedNatsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws java.lang.Exception { TYPE_4 VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; java.util.List < TYPE_3 > VAR_4 = TYPE_5 . METHOD_4 ( VAR_2 ) ; VAR_4 . METHOD_5 ( VAR_3 . METHOD_6 ( ) . METHOD_7 ( null ) ) ; return new TYPE_1 ( TYPE_4 . METHOD_8 ( VAR_3 , new TYPE_6 ( VAR_4 ) , VAR_3 . METHOD_9 ( ) , VAR_3 . METHOD_10 ( ) ) ) ; }\n", "fixed": "static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws java.lang.Exception { TYPE_4 VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; java.util.List < TYPE_3 > VAR_4 = java.util.Arrays.asList ( VAR_2 ) ; VAR_4 . METHOD_5 ( VAR_3 . METHOD_6 ( ) . METHOD_7 ( null ) ) ; return new TYPE_1 ( TYPE_4 . METHOD_8 ( VAR_3 , new TYPE_6 ( VAR_4 ) , VAR_3 . METHOD_9 ( ) , VAR_3 . METHOD_10 ( ) ) ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; if ( ( VAR_3 . METHOD_2 ( this ) ) != null ) { VAR_2 . show ( METHOD_3 ( ) , STRING_1 ) ; METHOD_4 ( VAR_4 ) ; } else { TYPE_2 . METHOD_5 ( this , STRING_2 , VAR_5 ) . show ( ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; if ( ( VAR_3 . METHOD_2 ( this ) ) != null ) { VAR_2 . show ( METHOD_3 ( ) , STRING_1 ) ; } else { TYPE_2 . METHOD_5 ( this , STRING_2 , VAR_5 ) . show ( ) ; } }\n"}
{"problem": "public boolean contains ( java.lang.String element ) { TYPE_1 temp = this . VAR_1 ; for ( int i = 0 ; i < ( element . length ( ) ) ; i ++ ) { int VAR_2 = TYPE_2 . index ( element . METHOD_1 ( i ) ) ; if ( ( VAR_3 [ VAR_2 ] ) == null ) { return false ; } temp = VAR_3 [ VAR_2 ] ; } return VAR_4 ; }\n", "fixed": "public boolean remove ( java.lang.String element ) { if ( ! ( contains ( element ) ) ) { return false ; } TYPE_1 temp = VAR_1 ; for ( int i = 0 ; i < ( element . length ( ) ) ; i ++ ) { int VAR_2 = TYPE_2 . index ( element . METHOD_1 ( i ) ) ; ( temp . count ) -- ; temp = VAR_3 [ VAR_2 ] ; } VAR_4 = false ; ( temp . count ) -- ; ( size ) -- ; return true ; }\n"}
{"fixCommitSHA1": "e9c4a734ff5160673024538f5b3ef1339c5424e7", "projectName": "thinkaurelius.titan", "bugType": "Change Identifier Used", "problem": "     @Override\n     public KeyColumnValueStore openDatabase(final String name) throws StorageException {\n        if (!stores.contains(name)) {\n             stores.putIfAbsent(name,new InMemoryKeyColumnValueStore(name));\n         }\n         KeyColumnValueStore store = stores.get(name);", "fixed": "     @Override\n     public KeyColumnValueStore openDatabase(final String name) throws StorageException {\n        if (!stores.containsKey(name)) {\n             stores.putIfAbsent(name,new InMemoryKeyColumnValueStore(name));\n         }\n         KeyColumnValueStore store = stores.get(name);", "sourceBeforeFix": "stores.contains(name)", "sourceAfterFix": "stores.containsKey(name)"}
{"fixCommitSHA1": "e39c5ae811f45bcf70833c0d855686864a86a42b", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "       log(FORCE, t);\n       exitCode = 1;\n     }\nendTrack(\"main\");\n     if (exit) {\n       System.exit(exitCode);\n     }", "fixed": "       log(FORCE, t);\n       exitCode = 1;\n     }\nendTracksTo(\"main\");\n     if (exit) {\n       System.exit(exitCode);\n     }", "sourceBeforeFix": "endTrack(\"main\")", "sourceAfterFix": "endTracksTo(\"main\")"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( this . getClass ( ) . METHOD_2 ( VAR_3 ) ) ; TYPE_3 VAR_4 = VAR_2 . METHOD_3 ( ) ; TYPE_4 VAR_5 = new TYPE_4 ( VAR_4 ) ; VAR_1 . METHOD_4 ( VAR_5 ) ; VAR_1 . show ( ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( getClass ( ) . METHOD_2 ( VAR_3 ) ) ; TYPE_3 VAR_4 = VAR_2 . METHOD_3 ( ) ; TYPE_4 VAR_5 = new TYPE_4 ( VAR_4 ) ; VAR_1 . METHOD_4 ( VAR_5 ) ; VAR_1 . show ( ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( this . METHOD_3 ( ) ) ; this . METHOD_4 ( VAR_1 ) ; this . METHOD_5 ( ) ; this . VAR_2 . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( this . isEmpty ( ) ) ; this . VAR_2 . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_9 ( ) ; return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( this . METHOD_3 ( ) ) ; this . METHOD_4 ( VAR_1 ) ; this . METHOD_5 ( ) ; this . VAR_2 . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( false ) ; this . VAR_2 . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_9 ( ) ; return true ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 format = TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) ; format . METHOD_5 ( VAR_3 , VAR_4 ) ; format . METHOD_5 ( VAR_5 , INT_1 ) ; format . METHOD_5 ( VAR_6 , INT_2 ) ; format . METHOD_5 ( VAR_7 , VAR_8 ) ; return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 format = TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) ; format . METHOD_5 ( VAR_3 , VAR_4 ) ; format . METHOD_5 ( VAR_5 , INT_1 ) ; format . METHOD_5 ( VAR_6 , INT_2 ) ; format . METHOD_5 ( VAR_7 , VAR_8 ) ; return format ; }\n"}
{"fixCommitSHA1": "55c3c2a8feddf010b614a6bdb0c39ef19a8b9452", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     public synchronized void stop(StopContext context) {\n         final JMSServerManager jmsManager = jmsServer.getValue();\n         try {\n            jmsManager.destroyTopic(name);\n         } catch (Exception e) {\n             MESSAGING_LOGGER.failedToDestroy(e, \"jms topic\", name);\n         }", "fixed": "     public synchronized void stop(StopContext context) {\n         final JMSServerManager jmsManager = jmsServer.getValue();\n         try {\n            jmsManager.removeTopicFromJNDI(name);\n         } catch (Exception e) {\n             MESSAGING_LOGGER.failedToDestroy(e, \"jms topic\", name);\n         }", "sourceBeforeFix": "jmsManager.destroyTopic(name)", "sourceAfterFix": "jmsManager.removeTopicFromJNDI(name)"}
{"problem": "public boolean METHOD_1 ( int VAR_1 , int VAR_2 , TYPE_1 event ) { boolean VAR_3 = super . METHOD_1 ( VAR_1 , VAR_2 , event ) ; if ( ( VAR_4 ) != null ) { return VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , event ) ; } return VAR_3 ; }\n", "fixed": "public boolean METHOD_1 ( int VAR_1 , int VAR_2 , TYPE_1 event ) { boolean VAR_3 = super . METHOD_1 ( VAR_1 , VAR_2 , event ) ; if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , event ) ; } return VAR_3 ; }\n"}
{"fixCommitSHA1": "82a43727c308f2401468d4306c1ba2b5095f54b5", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n        assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, false);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, IOV_MAX + 1, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 0, 2, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 1, 1, true);", "fixed": "         assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n        assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, IOV_MAX + 1, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 0, 2, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 1, 1, true);", "sourceBeforeFix": "assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))", "sourceAfterFix": "assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e5dcfd2f736de77c11d097e4f12209706f475186", "projectName": "Bukkit.Bukkit", "bugType": "Change Numeric Literal", "problem": "     SUGAR(353),\n     CAKE(354, 1),\n     BED(355),\n    DIODE(100),\n     GOLD_RECORD(2256, 1),\n     GREEN_RECORD(2257, 1);", "fixed": "     SUGAR(353),\n     CAKE(354, 1),\n     BED(355),\n    DIODE(356),\n     GOLD_RECORD(2256, 1),\n     GREEN_RECORD(2257, 1);", "sourceBeforeFix": "DIODE(100)", "sourceAfterFix": "DIODE(356)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { boolean VAR_3 = VAR_4 . METHOD_2 ( VAR_5 , VAR_6 . getText ( ) . toString ( ) . trim ( ) , VAR_7 . getText ( ) . toString ( ) , VAR_8 . getText ( ) . toString ( ) ) ; if ( VAR_3 && ( VAR_9 != null ) ) { VAR_9 . METHOD_3 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { boolean VAR_3 = VAR_4 . METHOD_2 ( VAR_5 , VAR_5 . getName ( ) , VAR_7 . getText ( ) . toString ( ) , VAR_8 . getText ( ) . toString ( ) ) ; if ( VAR_3 && ( VAR_9 != null ) ) { VAR_9 . METHOD_3 ( ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . info ( STRING_1 , STRING_2 ) ; java.util.Date VAR_1 = new TYPE_2 ( ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; for ( java.lang.String VAR_3 : VAR_4 . METHOD_4 ( VAR_1 ) ) { try { VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_5 . METHOD_6 ( VAR_3 ) ; } catch ( TYPE_3 VAR_6 ) { TYPE_1 . info ( VAR_6 . METHOD_7 ( ) , VAR_6 ) ; } } TYPE_1 . info ( STRING_3 , STRING_2 ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . info ( STRING_1 , STRING_2 ) ; java.util.Date VAR_1 = new TYPE_2 ( ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; for ( java.lang.String VAR_3 : VAR_4 . METHOD_4 ( VAR_1 ) ) { try { if ( VAR_4 . METHOD_5 ( VAR_3 ) ) { VAR_5 . METHOD_6 ( VAR_3 ) ; } } catch ( TYPE_3 VAR_6 ) { TYPE_1 . info ( VAR_6 . METHOD_7 ( ) , VAR_6 ) ; } } TYPE_1 . info ( STRING_3 , STRING_2 ) ; }\n"}
{"fixCommitSHA1": "e644b26706f629425854e325bbb6efb8df6d9862", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     try {\n       parentUri =\n           new URI(parentUri.getScheme(), parentUri.getAuthority(),\n              parentUri.getPath() + SEPARATOR, null);\n     } catch (URISyntaxException e) {\n       throw new IllegalArgumentException(e);\n     }", "fixed": "     try {\n       parentUri =\n           new URI(parentUri.getScheme(), parentUri.getAuthority(),\n              parentUri.getPath() + SEPARATOR, null, null);\n     } catch (URISyntaxException e) {\n       throw new IllegalArgumentException(e);\n     }", "sourceBeforeFix": "new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null)", "sourceAfterFix": "new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null,null)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( null ) ; TYPE_3 . i ( VAR_2 class , ( STRING_1 + ( VAR_1 . toString ( ) ) ) ) ; TYPE_3 . METHOD_3 ( VAR_2 class , ( STRING_2 + ( VAR_1 . METHOD_4 ( ) ) ) ) ; TYPE_3 . METHOD_3 ( VAR_2 class , ( STRING_3 + ( VAR_1 . getData ( ) . toString ( ) ) ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( null ) ; TYPE_3 . METHOD_3 ( VAR_2 class , ( STRING_1 + ( VAR_1 . toString ( ) ) ) ) ; TYPE_3 . METHOD_3 ( VAR_2 class , ( STRING_2 + ( VAR_1 . METHOD_4 ( ) ) ) ) ; TYPE_3 . METHOD_3 ( VAR_2 class , ( STRING_3 + ( VAR_1 . getData ( ) . toString ( ) ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 = METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_2 VAR_4 = VAR_3 . METHOD_5 ( VAR_2 . getType ( ) . METHOD_6 ( ) , VAR_2 . getType ( ) . getName ( ) ) ; TYPE_4 . assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_3 VAR_2 = METHOD_2 ( ) ; TYPE_2 VAR_4 = VAR_3 . METHOD_5 ( VAR_2 . getType ( ) . METHOD_6 ( ) , VAR_2 . getType ( ) . getName ( ) ) ; TYPE_4 . assertNotNull ( VAR_4 ) ; TYPE_4 . assertEquals ( VAR_2 . getId ( ) , VAR_4 ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( ) ; if ( VAR_2 == ( VAR_4 ) ) { VAR_3 . append ( STRING_1 ) ; } else if ( VAR_2 == ( VAR_5 ) ) { VAR_3 . append ( STRING_2 ) ; } return VAR_3 . toString ( ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( ) ; if ( VAR_2 == ( VAR_5 ) ) { VAR_3 . append ( STRING_1 ) ; } else if ( VAR_2 == ( VAR_4 ) ) { VAR_3 . append ( STRING_2 ) ; } return VAR_3 . toString ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 class ) ; TYPE_2 VAR_3 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; METHOD_5 ( VAR_1 . getName ( ) ) . METHOD_6 ( sum ( VAR_1 . METHOD_7 ( ) ) ) . METHOD_8 ( sum ( VAR_3 . METHOD_9 ( ) ) ) ; TYPE_3 < java.lang.String > select = select ( VAR_1 . getName ( ) ) ; java.lang.String query = select . METHOD_10 ( ) ; TYPE_4 . assertEquals ( STRING_1 , query ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 class ) ; TYPE_2 VAR_3 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; METHOD_5 ( VAR_1 . getName ( ) ) . METHOD_6 ( sum ( VAR_1 . METHOD_7 ( ) ) ) . METHOD_8 ( sum ( VAR_3 . METHOD_9 ( ) ) ) ; TYPE_3 < java.lang.String > select = select ( VAR_1 . getName ( ) ) ; java.lang.String query = select . METHOD_10 ( ) ; assertEquals ( STRING_1 , query ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 item , boolean VAR_1 ) { if ( ( item . getType ( ) . METHOD_2 ( ) ) > 0 ) { if ( ( VAR_2 ) > ( - 1 ) ) VAR_3 = ( ( short ) ( ( item . getType ( ) . METHOD_2 ( ) ) * ( ( ( double ) ( VAR_2 ) ) / FLOAT_1 ) ) ) ; item . METHOD_3 ( VAR_3 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 item , boolean VAR_1 ) { if ( ( item . getType ( ) . METHOD_2 ( ) ) > 0 ) { if ( ( VAR_2 ) > 0 ) VAR_3 = ( ( short ) ( ( item . getType ( ) . METHOD_2 ( ) ) * ( ( ( double ) ( VAR_2 ) ) / FLOAT_1 ) ) ) ; item . METHOD_3 ( VAR_3 ) ; } }\n"}
{"fixCommitSHA1": "53694f29adf8c68992e1b966c86380219f438c14", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(100);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(200)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 view , TYPE_3 VAR_1 ) { if ( ( VAR_2 ) >= ( VAR_3 ) ) { if ( VAR_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . toString ( ) ) ) { TYPE_4 VAR_5 = new TYPE_4 ( STRING_1 . METHOD_4 ( ) ) ; return new TYPE_1 ( STRING_2 , STRING_3 , VAR_5 ) ; } } return super . METHOD_1 ( view , VAR_1 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 view , TYPE_3 VAR_1 ) { if ( VAR_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . toString ( ) ) ) { TYPE_4 VAR_5 = new TYPE_4 ( STRING_1 . METHOD_4 ( ) ) ; return new TYPE_1 ( STRING_2 , STRING_3 , VAR_5 ) ; } return super . METHOD_1 ( view , VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( VAR_3 ) ; TYPE_2 VAR_4 = VAR_1 . getValue ( VAR_5 class ) ; VAR_2 . setText ( ( STRING_1 + ( VAR_4 . METHOD_4 ( ) ) ) ) ; VAR_6 . setText ( STRING_2 ) ; } else { VAR_2 . METHOD_3 ( VAR_7 ) ; VAR_6 . setText ( STRING_3 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( VAR_3 ) ; TYPE_2 VAR_4 = VAR_1 . getValue ( VAR_5 class ) ; if ( ( VAR_4 . METHOD_4 ( ) ) != null ) VAR_2 . setText ( ( STRING_1 + ( VAR_4 . METHOD_4 ( ) ) ) ) ; VAR_6 . setText ( STRING_2 ) ; } else { VAR_2 . METHOD_3 ( VAR_7 ) ; VAR_6 . setText ( STRING_3 ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) TYPE_2 . METHOD_2 ( VAR_3 , STRING_1 ) ; super . METHOD_1 ( VAR_1 ) ; METHOD_3 ( VAR_4 ) ; TYPE_3 VAR_5 = ( ( TYPE_3 ) ( METHOD_4 ( VAR_6 ) ) ) ; METHOD_5 ( VAR_5 ) ; TYPE_4 VAR_7 = METHOD_6 ( ) ; if ( VAR_7 != null ) { VAR_7 . METHOD_7 ( true ) ; } METHOD_8 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) TYPE_2 . METHOD_2 ( VAR_3 , STRING_1 ) ; super . METHOD_1 ( VAR_1 ) ; METHOD_3 ( VAR_4 ) ; TYPE_3 VAR_5 = ( ( TYPE_3 ) ( METHOD_4 ( VAR_6 ) ) ) ; METHOD_5 ( VAR_5 ) ; TYPE_4 VAR_7 = METHOD_6 ( ) ; if ( VAR_7 != null ) { VAR_7 . METHOD_7 ( true ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { int VAR_1 = INT_1 ; TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( METHOD_3 ( 1 ) ) . get ( ) . METHOD_4 ( VAR_1 ) ; assertThat ( VAR_2 . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( true ) ) ; assertThat ( VAR_2 . METHOD_7 ( ) , TYPE_2 . METHOD_6 ( true ) ) ; assertThat ( VAR_2 . METHOD_8 ( ) , METHOD_9 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { int VAR_1 = INT_1 ; TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( METHOD_3 ( 1 ) ) . get ( ) . METHOD_4 ( VAR_1 ) ; assertThat ( VAR_2 . METHOD_5 ( ) , METHOD_6 ( true ) ) ; assertThat ( VAR_2 . METHOD_7 ( ) , METHOD_6 ( true ) ) ; assertThat ( VAR_2 . METHOD_8 ( ) , METHOD_9 ( ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "21186d3c4cf243e383215d106b2228cc09231bc4", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "                 if (v.getLock() == LOCK_SUCCESS) {\n                     continue;\n                 }\n                if (v.getCreationTime() + timeToLive > now) {\n                     iter.remove();\n                 } else if (maxSize > 0 && maxSize != Integer.MAX_VALUE) {\n                     if (entries == null) {", "fixed": "                 if (v.getLock() == LOCK_SUCCESS) {\n                     continue;\n                 }\n                if (v.getCreationTime() + timeToLive < now) {\n                     iter.remove();\n                 } else if (maxSize > 0 && maxSize != Integer.MAX_VALUE) {\n                     if (entries == null) {", "sourceBeforeFix": "v.getCreationTime() + timeToLive > now", "sourceAfterFix": "v.getCreationTime() + timeToLive < now"}
{"problem": "private static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( ) { return new TYPE_2 < TYPE_1 > ( ) { public java.lang.String toString ( TYPE_1 t ) { return t == null ? STRING_1 : t . toString ( ) ; } public TYPE_1 METHOD_2 ( java.lang.String string ) { try { return ( ( TYPE_1 ) ( string ) ) ; } catch ( TYPE_3 VAR_1 ) { java.lang.String VAR_2 = STRING_2 + ( STRING_3 + STRING_4 ) ; throw new TYPE_4 ( VAR_2 ) ; } } } ; }\n", "fixed": "private static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( ) { return new TYPE_2 < TYPE_1 > ( ) { public java.lang.String toString ( TYPE_1 t ) { return t == null ? null : t . toString ( ) ; } public TYPE_1 METHOD_2 ( java.lang.String string ) { return ( ( TYPE_1 ) ( string ) ) ; } } ; }\n"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) && ( ( VAR_2 ) > ( ( VAR_3 ) * INT_1 ) ) ) { METHOD_2 ( ) ; } ( VAR_4 ) -- ; if ( ( VAR_4 ) <= 0 ) { VAR_4 = INT_1 ; METHOD_3 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) && ( ( VAR_2 ) > ( VAR_3 ) ) ) { METHOD_2 ( ) ; } ( VAR_4 ) -- ; if ( ( VAR_4 ) <= 0 ) { VAR_4 = INT_1 ; METHOD_3 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 , java.lang.String [ ] VAR_2 , int [ ] VAR_3 ) { super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_1 == ( VAR_4 ) ) { if ( ( VAR_3 [ 0 ] ) == ( VAR_5 ) ) { METHOD_2 ( ) ; } else { METHOD_3 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( int VAR_1 , java.lang.String [ ] VAR_2 , int [ ] VAR_3 ) { super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_1 == ( VAR_4 ) ) { if ( ( ( VAR_3 . length ) > 0 ) && ( ( VAR_3 [ 0 ] ) == ( VAR_5 ) ) ) { METHOD_2 ( ) ; } else { METHOD_3 ( ) ; } } }\n"}
{"problem": "private void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) { for ( int VAR_2 = 0 ; VAR_2 < ( VAR_3 . size ( ) ) ; ++ VAR_2 ) { java.lang.System.out.print ( ( VAR_2 + STRING_1 ) ) ; final java.util.Vector < TYPE_2 > VAR_4 = VAR_3 . get ( VAR_2 ) ; for ( int VAR_5 = 0 ; VAR_5 < ( VAR_4 . size ( ) ) ; ++ VAR_5 ) { VAR_1 . METHOD_2 ( VAR_4 . get ( VAR_5 ) ) ; } java.lang.System.out.println ( ) ; } }\n", "fixed": "private void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) { for ( int VAR_2 = 0 ; VAR_2 < ( VAR_3 . size ( ) ) ; ++ VAR_2 ) { java.lang.System.out.print ( ( ( VAR_2 + 1 ) + STRING_1 ) ) ; final java.util.Vector < TYPE_2 > VAR_4 = VAR_3 . get ( VAR_2 ) ; for ( int VAR_5 = 0 ; VAR_5 < ( VAR_4 . size ( ) ) ; ++ VAR_5 ) { VAR_1 . METHOD_2 ( VAR_4 . get ( VAR_5 ) ) ; } java.lang.System.out.println ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( true , INT_1 ) ; if ( ( TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) . size ( ) ) == 0 ) { TYPE_3 . METHOD_3 ( ) . METHOD_5 ( 0 ) ; } METHOD_6 ( ) ; TYPE_2 . METHOD_7 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( true , INT_1 ) ; if ( VAR_1 == null ) { TYPE_3 . METHOD_3 ( ) . METHOD_5 ( 0 ) ; } METHOD_6 ( ) ; TYPE_2 . METHOD_7 ( ) ; }\n"}
{"problem": "protected void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } else if ( VAR_3 . METHOD_6 ( ) ) { METHOD_7 ( ) ; TYPE_1 . METHOD_8 ( STRING_2 , VAR_2 . METHOD_3 ( ) ) ; } else { TYPE_1 . METHOD_2 ( STRING_3 , VAR_2 . METHOD_3 ( ) ) ; METHOD_5 ( ) ; } }\n", "fixed": "protected void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } else if ( VAR_3 . METHOD_6 ( VAR_2 . METHOD_3 ( ) ) ) { METHOD_7 ( ) ; TYPE_1 . METHOD_8 ( STRING_2 , VAR_2 . METHOD_3 ( ) ) ; } else { TYPE_1 . METHOD_2 ( STRING_3 , VAR_2 . METHOD_3 ( ) ) ; METHOD_5 ( ) ; } }\n"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Error_Response_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Error_Response_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xdf", "sourceAfterFix": "(byte)0xe2"}
{"problem": "private java.lang.String METHOD_1 ( java.lang.String [ ] VAR_1 ) throws TYPE_1 { java.lang.String [ ] VAR_2 = VAR_1 [ INT_1 ] . split ( STRING_1 ) ; METHOD_2 ( VAR_1 [ 1 ] ) ; return ( ( ( STRING_2 + ( VAR_3 . get ( VAR_1 [ 1 ] ) ) ) + STRING_3 ) + ( VAR_4 . get ( new TYPE_2 ( VAR_2 [ 1 ] ) ) ) ) + STRING_4 ; }\n", "fixed": "private java.lang.String METHOD_1 ( java.lang.String [ ] VAR_1 ) throws TYPE_1 { java.lang.String [ ] VAR_2 = VAR_1 [ INT_1 ] . split ( STRING_1 ) ; METHOD_2 ( VAR_1 [ 1 ] ) ; return ( ( ( STRING_2 + ( VAR_3 . get ( VAR_1 [ 1 ] ) ) ) + STRING_3 ) + ( ( VAR_4 . get ( new TYPE_2 ( VAR_2 [ 1 ] ) ) ) + 1 ) ) + STRING_4 ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { java.lang.System.out.println ( ( STRING_1 + VAR_1 ) ) ; java.lang.String VAR_2 = STRING_2 ; if ( ( VAR_3 . METHOD_2 ( VAR_1 ) ) == null ) { VAR_2 = STRING_3 ; } else { VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; } java.lang.System.out.println ( VAR_2 ) ; return VAR_2 ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { java.lang.String VAR_2 = STRING_2 ; if ( ( VAR_3 . METHOD_2 ( VAR_1 ) ) == null ) { VAR_2 = STRING_3 ; } else { VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; } java.lang.System.out.println ( VAR_2 ) ; return VAR_2 ; }\n"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "fixed": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic abstract int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "public void METHOD_1 ( ) { if ( ! ( java.lang.Thread . METHOD_2 ( ) . METHOD_3 ( ) ) ) { TYPE_1 VAR_1 = METHOD_4 ( ) ; synchronized ( VAR_2 ) { VAR_3 = VAR_1 ; METHOD_5 ( ) ; METHOD_6 ( VAR_3 ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { if ( ! ( java.lang.Thread . METHOD_2 ( ) . METHOD_3 ( ) ) ) { TYPE_1 VAR_1 = METHOD_4 ( ) ; synchronized ( VAR_2 ) { VAR_3 = VAR_1 ; METHOD_5 ( ) ; METHOD_6 ( null ) ; } } }\n"}
{"problem": "void METHOD_1 ( long VAR_1 , int VAR_2 , boolean VAR_3 , TYPE_1 result , int VAR_4 , int VAR_5 ) { long key = METHOD_2 ( VAR_1 , VAR_2 , VAR_6 ) ; int VAR_7 = ( ( int ) ( key % ( VAR_8 . length ) ) ) ; TYPE_2 VAR_9 = this . VAR_8 [ VAR_7 ] ; VAR_10 = VAR_3 ; VAR_9 . result = result ; VAR_11 = VAR_4 ; VAR_12 = VAR_5 ; this . VAR_13 += 1 ; }\n", "fixed": "void METHOD_1 ( long VAR_1 , int VAR_2 , boolean VAR_3 , TYPE_1 result , int VAR_4 , int VAR_5 ) { long key = METHOD_2 ( VAR_1 , VAR_2 , VAR_6 ) ; int VAR_7 = ( ( int ) ( key % ( VAR_8 . length ) ) ) ; TYPE_2 VAR_9 = this . VAR_8 [ VAR_7 ] ; VAR_9 . key = key ; VAR_10 = VAR_3 ; VAR_9 . result = result ; VAR_11 = VAR_4 ; VAR_12 = VAR_5 ; this . VAR_13 += 1 ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 . getId ( ) ) ; VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; VAR_2 . setState ( VAR_3 ) ; VAR_2 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; VAR_2 . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) ; VAR_2 . METHOD_10 ( TYPE_3 . METHOD_11 ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ) ; return VAR_2 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 . getId ( ) ) ; VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; VAR_2 . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) ; VAR_2 . METHOD_10 ( TYPE_3 . METHOD_11 ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ) ; return VAR_2 ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"problem": "private double METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 date ) { double sum = 0.0 ; double n = 0.0 ; for ( TYPE_2 tmp = VAR_2 . METHOD_2 ( ) ; tmp . METHOD_3 ( date ) ; tmp . METHOD_4 ( 1 ) ) { TYPE_3 VAR_3 = VAR_2 . METHOD_5 ( tmp ) ; if ( VAR_3 != null ) { sum += VAR_3 . METHOD_6 ( ) . get ( VAR_1 ) . METHOD_7 ( ) ; n ++ ; } } return sum / n ; }\n", "fixed": "private double METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 date ) { double sum = 0.0 ; double n = 0.0 ; for ( TYPE_2 tmp = VAR_2 . METHOD_2 ( ) ; tmp . METHOD_3 ( date ) ; tmp = tmp . METHOD_4 ( 1 ) ) { TYPE_3 VAR_3 = VAR_2 . METHOD_5 ( tmp ) ; if ( VAR_3 != null ) { sum += VAR_3 . METHOD_6 ( ) . get ( VAR_1 ) . METHOD_7 ( ) ; n ++ ; } } return sum / n ; }\n"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"problem": "public boolean METHOD_1 ( java.lang.String src ) throws TYPE_1 { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashSet < > ( ) ; java.util.List < TYPE_2 > VAR_2 = METHOD_2 ( ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { VAR_1 . add ( VAR_3 . METHOD_3 ( ) ) ; } } TYPE_3 . info ( STRING_1 , src , VAR_1 ) ; for ( java.lang.String VAR_4 : VAR_1 ) { if ( src . startsWith ( VAR_4 ) ) { return true ; } } return false ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String src ) throws TYPE_1 { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashSet < > ( ) ; java.util.List < TYPE_2 > VAR_2 = METHOD_2 ( ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { VAR_1 . add ( VAR_3 . METHOD_3 ( ) ) ; } } for ( java.lang.String VAR_4 : VAR_1 ) { if ( src . startsWith ( VAR_4 ) ) { return true ; } } return false ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private int METHOD_1 ( java.lang.String VAR_1 , java.util.Map < TYPE_1 , java.lang.Integer > VAR_2 , TYPE_2 listener ) { for ( java.util.Map.Entry < TYPE_1 , java.lang.Integer > VAR_3 : VAR_2 . METHOD_2 ( ) ) { if ( VAR_3 . METHOD_3 ( ) . equals ( VAR_1 ) ) { return VAR_3 . getValue ( ) ; } } listener . error ( TYPE_3 . format ( TYPE_4 . getString ( STRING_1 ) , VAR_1 ) ) ; return - 1 ; }\n", "fixed": "private int METHOD_1 ( java.lang.String VAR_1 , java.util.Map < TYPE_1 , java.lang.Integer > VAR_2 , TYPE_2 listener ) { for ( java.util.Map.Entry < TYPE_1 , java.lang.Integer > VAR_3 : VAR_2 . METHOD_2 ( ) ) { if ( VAR_3 . METHOD_3 ( ) . getName ( ) . equals ( VAR_1 ) ) { return VAR_3 . getValue ( ) ; } } listener . error ( TYPE_3 . format ( TYPE_4 . getString ( STRING_1 ) , VAR_1 ) ) ; return - 1 ; }\n"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . toString ( ) ) ) { } else if ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . toString ( ) ) ) { METHOD_5 ( ) ; } else { VAR_2 . METHOD_6 ( ) ; VAR_3 . METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . toString ( ) ) ) { } else if ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . toString ( ) ) ) { METHOD_5 ( ) ; } else { VAR_3 . METHOD_6 ( ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) { java.lang.String result = null ; TYPE_1 b = null ; if ( METHOD_2 ( ) ) { result = METHOD_3 ( ) . METHOD_4 ( ) . toString ( ) ; result = ( null != result ) ? TYPE_1 . METHOD_5 ( result ) : STRING_1 ; b = METHOD_6 ( ) ; } else { b = METHOD_7 ( ) ; } if ( null != b ) { result = b . METHOD_1 ( ) ; } return result ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { java.lang.String result = null ; TYPE_1 b = null ; if ( METHOD_2 ( ) ) { result = getText ( ) ; result = ( null != result ) ? TYPE_1 . METHOD_5 ( result ) : STRING_1 ; b = METHOD_6 ( ) ; } else { b = METHOD_7 ( ) ; } if ( null != b ) { result = b . METHOD_1 ( ) ; } return result ; }\n"}
{"fixCommitSHA1": "2230a91829f39b72973e6fecf275d9c664911ca0", "projectName": "clojure.clojure", "bugType": "Change Caller in Function Call", "problem": " \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n\t\t\tthrow new CompilerException((String) SOURCE.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}", "fixed": " \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n\t\t\tthrow new CompilerException((String) SOURCE_PATH.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}", "sourceBeforeFix": "SOURCE.deref()", "sourceAfterFix": "SOURCE_PATH.deref()"}
{"problem": "java.lang.String METHOD_1 ( ) throws TYPE_1 { final java.io.File VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ; if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { return null ; } try { return TYPE_3 . METHOD_4 ( VAR_1 ) ; } catch ( java.io.IOException VAR_4 ) { throw TYPE_4 . METHOD_5 ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) , VAR_4 ) ; } }\n", "fixed": "java.lang.String METHOD_1 ( ) throws TYPE_1 { final java.io.File VAR_1 = new java.io.File ( VAR_2 , VAR_3 ) ; if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { return null ; } try { return TYPE_3 . METHOD_4 ( VAR_1 ) ; } catch ( java.io.IOException VAR_4 ) { throw TYPE_4 . METHOD_5 ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) , VAR_4 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String key ) { java.lang.String VAR_2 = STRING_1 ; java.lang.String value = VAR_1 . getString ( getString ( VAR_3 ) , STRING_2 ) ; TYPE_2 . METHOD_2 ( VAR_2 , value ) ; if ( value . equals ( getString ( VAR_4 ) ) ) { new TYPE_3 ( ) . execute ( ) ; } else { VAR_5 . METHOD_3 ( VAR_6 ) ; VAR_7 . METHOD_3 ( VAR_8 ) ; METHOD_4 ( ) . METHOD_5 ( VAR_9 , null , this ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String key ) { java.lang.String value = VAR_1 . getString ( getString ( VAR_3 ) , STRING_2 ) ; if ( value . equals ( getString ( VAR_4 ) ) ) { new TYPE_3 ( ) . execute ( ) ; } else { VAR_5 . METHOD_3 ( VAR_6 ) ; VAR_7 . METHOD_3 ( VAR_8 ) ; METHOD_4 ( ) . METHOD_5 ( VAR_9 , null , this ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { c . set ( 1 , 1 ) ; c . set ( INT_1 , INT_2 ) ; c . set ( INT_3 , INT_4 ) ; assertEquals ( c . get ( 1 ) , null ) ; assertEquals ( c . get ( INT_1 ) , INT_2 ) ; assertEquals ( c . get ( INT_3 ) , INT_4 ) ; }\n", "fixed": "public void METHOD_1 ( ) { c . put ( 1 , 1 ) ; c . put ( INT_1 , INT_2 ) ; c . put ( INT_3 , INT_4 ) ; assertEquals ( c . get ( 1 ) , null ) ; assertEquals ( c . get ( INT_1 ) , INT_2 ) ; assertEquals ( c . get ( INT_3 ) , INT_4 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { if ( event instanceof TYPE_2 ) { TYPE_3 VAR_1 = ( ( TYPE_2 ) ( event ) ) . METHOD_2 ( ) ; TYPE_4 . METHOD_3 ( VAR_1 ) ; } else if ( event instanceof TYPE_5 ) { TYPE_4 . METHOD_4 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { if ( event instanceof TYPE_2 ) { if ( ( TYPE_4 . METHOD_2 ( ) ) != null ) { TYPE_4 . METHOD_4 ( ) ; } TYPE_3 VAR_1 = ( ( TYPE_2 ) ( event ) ) . METHOD_2 ( ) ; TYPE_4 . METHOD_3 ( VAR_1 ) ; } else if ( event instanceof TYPE_5 ) { TYPE_4 . METHOD_4 ( ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 , TYPE_3 VAR_3 ) { TYPE_1 VAR_4 = VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( ! ( VAR_3 . METHOD_2 ( VAR_4 ) ) ) { return VAR_4 ; } else { new TYPE_4 ( new TYPE_5 ( new TYPE_6 ( ) ) , VAR_3 , VAR_1 ) ; return VAR_1 . METHOD_3 ( ) ; } { return VAR_4 ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 , TYPE_3 VAR_3 ) { TYPE_1 VAR_4 = VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( ! ( VAR_3 . METHOD_2 ( VAR_4 ) ) ) { return VAR_4 ; } else { new TYPE_4 ( new TYPE_5 ( new TYPE_6 ( ) ) , VAR_3 , VAR_1 ) ; return VAR_1 . METHOD_3 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 = true ; VAR_4 = false ; VAR_5 = false ; if ( null != ( VAR_6 . METHOD_3 ( ) ) ) { VAR_6 . METHOD_3 ( ) . METHOD_4 ( VAR_7 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 = true ; VAR_4 = false ; VAR_5 = false ; if ( ( null != ( VAR_6 ) ) && ( null != ( VAR_6 . METHOD_3 ( ) ) ) ) { VAR_6 . METHOD_3 ( ) . METHOD_4 ( VAR_7 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_3 . METHOD_2 ( true ) ; VAR_3 . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) ; new TYPE_2 ( ) . execute ( VAR_3 ) ; TYPE_3 VAR_5 = new TYPE_3 ( VAR_6 , VAR_4 , VAR_3 ) ; METHOD_5 ( ) ; android.content.Intent intent = new android.content.Intent ( METHOD_6 ( ) , VAR_7 class ) ; intent . METHOD_7 ( STRING_1 , VAR_5 ) ; METHOD_8 ( intent ) ; METHOD_9 ( VAR_8 , VAR_9 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_3 VAR_5 = new TYPE_3 ( VAR_6 , VAR_4 , VAR_3 ) ; METHOD_5 ( ) ; android.content.Intent intent = new android.content.Intent ( METHOD_6 ( ) , VAR_7 class ) ; intent . METHOD_7 ( STRING_1 , VAR_5 ) ; METHOD_8 ( intent ) ; METHOD_9 ( VAR_8 , VAR_9 ) ; }\n"}
{"fixCommitSHA1": "58ce4c40970fc29d00e5740bc6098eb475668e86", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "             if (!found) {\n                 boolean reqd = true;\n                if (mCheckUnusedThrows) {\n                     final ClassResolver cr =\n                         new ClassResolver(\n                             getClassLoader(),", "fixed": "             if (!found) {\n                 boolean reqd = true;\n                if (mAllowUndeclaredRTE) {\n                     final ClassResolver cr =\n                         new ClassResolver(\n                             getClassLoader(),", "sourceBeforeFix": "if (mCheckUnusedThrows) {   processPackage(aAST); } ", "sourceAfterFix": "if (mAllowUndeclaredRTE) {   processPackage(aAST); } "}
{"problem": "public void METHOD_1 ( ) { synchronized ( this ) { long start = TYPE_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; long VAR_1 = ( INT_1 - ( TYPE_1 . METHOD_2 ( ) ) ) - start ; METHOD_5 ( this , ( VAR_1 < 0 ? 0 : VAR_1 ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) { synchronized ( this ) { long start = TYPE_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; long VAR_1 = INT_1 - ( ( TYPE_1 . METHOD_2 ( ) ) - start ) ; METHOD_5 ( this , ( VAR_1 < 0 ? 0 : VAR_1 ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . init ( ) ; VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_2 , VAR_3 ) ; TYPE_3 . METHOD_4 ( STRING_3 , VAR_1 ) ; VAR_4 = new TYPE_4 ( ) ; VAR_4 . METHOD_5 ( ) ; VAR_5 = new TYPE_5 ( ) ; VAR_6 = new TYPE_6 ( ) ; VAR_7 = new TYPE_7 ( ) ; VAR_8 = 0 ; VAR_9 = new TYPE_8 ( ) ; VAR_9 . init ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . init ( ) ; VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_2 , VAR_3 ) ; TYPE_3 . METHOD_4 ( STRING_3 , VAR_1 ) ; VAR_4 = new TYPE_4 ( ) ; VAR_4 . METHOD_5 ( ) ; VAR_5 = new TYPE_5 ( ) ; VAR_6 = new TYPE_6 ( ) ; VAR_7 = new TYPE_7 ( ) ; VAR_8 = 0 ; }\n"}
{"problem": "public static double METHOD_1 ( int i , double [ ] p , double [ ] VAR_1 , double [ ] b ) { double VAR_2 = 0 ; for ( int VAR_3 = 0 ; VAR_3 < ( p . length ) ; VAR_3 ++ ) { double VAR_4 = ( ( p [ i ] ) * ( VAR_1 [ VAR_3 ] ) ) + ( b [ VAR_3 ] ) ; VAR_2 += TYPE_1 . METHOD_2 ( VAR_4 ) ; } return VAR_2 ; }\n", "fixed": "public static double METHOD_1 ( int i , double [ ] p , double [ ] VAR_1 , double [ ] b ) { double VAR_2 = 0 ; for ( int VAR_3 = 0 ; VAR_3 < ( p . length ) ; VAR_3 ++ ) { double VAR_4 = ( p [ i ] ) * ( VAR_1 [ VAR_3 ] ) ; VAR_2 += TYPE_1 . METHOD_2 ( VAR_4 ) ; } return VAR_2 ; }\n"}
{"problem": "public boolean METHOD_1 ( int x , int y , int VAR_1 ) { return ( ( ( ( ( x < 0 ) || ( x >= ( VAR_2 ) ) ) || ( y < 0 ) ) || ( y >= ( VAR_3 ) ) ) || ( VAR_1 < 0 ) ) || ( VAR_1 >= ( VAR_4 ) ) ; }\n", "fixed": "public boolean METHOD_1 ( int x , int y , int VAR_1 ) { return ( ( ( ( ( x >= 0 ) && ( x < ( VAR_2 ) ) ) && ( y >= 0 ) ) && ( y < ( VAR_3 ) ) ) && ( VAR_1 >= 0 ) ) && ( VAR_1 < ( VAR_4 ) ) ; }\n"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n         verify(checkConfig,\n                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n     }\n     @Test", "fixed": "         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n         verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) throws java.lang.ClassNotFoundException , TYPE_1 , TYPE_2 { java.lang.Class VAR_3 = java.lang.Class . METHOD_2 ( ( STRING_1 + VAR_1 ) ) ; TYPE_3 VAR_4 = ( ( TYPE_3 ) ( VAR_3 . METHOD_3 ( ) ) ) ; TYPE_4 VAR_5 = new TYPE_4 ( VAR_4 ) ; TYPE_5 VAR_6 = new TYPE_5 ( VAR_4 ) ; METHOD_1 ( VAR_5 , VAR_6 ) ; }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) throws java.lang.ClassNotFoundException , TYPE_1 , TYPE_2 { java.lang.Class VAR_3 = java.lang.Class . METHOD_2 ( ( STRING_1 + VAR_1 ) ) ; TYPE_3 VAR_4 = ( ( TYPE_3 ) ( VAR_3 . METHOD_3 ( ) ) ) ; TYPE_4 VAR_5 = new TYPE_4 ( VAR_4 , VAR_2 ) ; TYPE_5 VAR_6 = new TYPE_5 ( VAR_4 ) ; METHOD_1 ( VAR_5 , VAR_6 ) ; }\n"}
{"problem": "public void METHOD_1 ( java.util.ArrayList < java.lang.String > VAR_1 ) { VAR_2 . METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { java.lang.String [ ] VAR_3 = VAR_1 . get ( i ) . split ( VAR_4 ) ; VAR_2 . METHOD_3 ( VAR_3 [ ( ( VAR_3 . length ) - 1 ) ] ) ; } }\n", "fixed": "public void METHOD_1 ( java.util.ArrayList < java.lang.String > VAR_1 ) { VAR_2 . METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { java.io.File f = new java.io.File ( VAR_1 . get ( i ) ) ; VAR_2 . METHOD_3 ( f . getName ( ) ) ; } }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"problem": "public synchronized void METHOD_1 ( final java.lang.String VAR_1 ) { if ( TYPE_1 . equals ( this . VAR_1 , VAR_1 ) ) { METHOD_2 ( VAR_1 , ( ( TYPE_2 . METHOD_3 ( ) ) - ( VAR_2 ) ) ) ; } this . VAR_1 = null ; this . VAR_2 = 0L ; }\n", "fixed": "public synchronized void METHOD_1 ( final java.lang.String VAR_1 ) { if ( TYPE_1 . equals ( this . VAR_1 , VAR_1 ) ) { METHOD_2 ( VAR_1 , ( ( TYPE_2 . METHOD_3 ( ) ) - ( VAR_2 ) ) ) ; this . VAR_1 = null ; this . VAR_2 = 0L ; } }\n"}
{"problem": "private void METHOD_1 ( ) { for ( int i = 0 ; i < INT_1 ; i ++ ) { if ( VAR_1 [ i ] ) { double VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 [ i ] ) ; TYPE_1 . METHOD_3 ( VAR_3 [ i ] , ( VAR_2 + INT_2 ) ) ; VAR_1 [ i ] = false ; ( VAR_4 ) -- ; } } }\n", "fixed": "private void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { if ( VAR_1 [ i ] ) { double VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 [ i ] ) ; TYPE_1 . METHOD_3 ( VAR_3 [ i ] , ( VAR_2 + INT_2 ) ) ; VAR_1 [ i ] = false ; ( VAR_4 ) -- ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return ; } if ( ( ( VAR_1 . METHOD_2 ( ) ) > 0 ) && ( ( VAR_2 . query ( VAR_1 . METHOD_2 ( ) ) . size ( ) ) != 0 ) ) { VAR_2 . update ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_3 , STRING_1 ) ; } else { VAR_2 . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_3 , STRING_2 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return ; } if ( ( ( VAR_1 . METHOD_2 ( ) ) > 0 ) && ( ( VAR_2 . query ( VAR_1 . METHOD_2 ( ) ) . size ( ) ) != 0 ) ) { VAR_2 . update ( VAR_1 ) ; TYPE_2 . i ( VAR_3 , STRING_1 ) ; } else { VAR_2 . METHOD_4 ( VAR_1 ) ; TYPE_2 . i ( VAR_3 , STRING_2 ) ; } }\n"}
{"problem": "protected static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.Integer VAR_2 = TYPE_3 . get ( java.lang.Integer . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ; if ( VAR_2 != null ) { return ( ( TYPE_1 ) ( new TYPE_4 ( VAR_2 . intValue ( ) , VAR_1 . METHOD_4 ( ) , null ) . METHOD_5 ( VAR_1 ) ) ) ; } return ( ( TYPE_1 ) ( new TYPE_4 ( VAR_3 , TYPE_5 . getString ( STRING_1 ) , null ) . METHOD_5 ( VAR_1 ) ) ) ; }\n", "fixed": "protected static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.Integer VAR_2 = TYPE_3 . get ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_2 != null ) { return ( ( TYPE_1 ) ( new TYPE_4 ( VAR_2 . intValue ( ) , VAR_1 . METHOD_4 ( ) , null ) . METHOD_5 ( VAR_1 ) ) ) ; } return ( ( TYPE_1 ) ( new TYPE_4 ( VAR_3 , TYPE_5 . getString ( STRING_1 ) , null ) . METHOD_5 ( VAR_1 ) ) ) ; }\n"}
{"fixCommitSHA1": "463750c397e836dbcea5cee0d960c4551f6cebaf", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "fixed": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( final java.util.Date VAR_1 , final java.util.Date VAR_2 , final TYPE_1 VAR_3 ) { TYPE_1 VAR_4 = VAR_5 ; final int VAR_6 = ( TYPE_2 . METHOD_2 ( VAR_2 , new java.util.Date ( ) ) ) - 1 ; VAR_4 = VAR_3 . METHOD_3 ( TYPE_3 . METHOD_3 ( new TYPE_1 ( VAR_6 ) ) ) . METHOD_4 ( VAR_7 ) ; return TYPE_4 . METHOD_5 ( VAR_4 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( final java.util.Date VAR_1 , final java.util.Date VAR_2 , final TYPE_1 VAR_3 ) { TYPE_1 VAR_4 = VAR_5 ; final int VAR_6 = TYPE_2 . METHOD_2 ( VAR_2 , new java.util.Date ( ) ) ; VAR_4 = VAR_3 . METHOD_3 ( TYPE_3 . METHOD_3 ( new TYPE_1 ( VAR_6 ) ) ) . METHOD_4 ( VAR_7 ) ; return TYPE_4 . METHOD_5 ( VAR_4 ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; VAR_3 . METHOD_4 ( ) ; VAR_3 . add ( VAR_1 . METHOD_5 ( STRING_2 ) ) ; VAR_3 . add ( VAR_1 . METHOD_5 ( STRING_3 ) ) ; VAR_3 . add ( VAR_1 . METHOD_5 ( STRING_4 ) ) ; VAR_3 . add ( VAR_1 . METHOD_5 ( STRING_5 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; VAR_3 . METHOD_4 ( ) ; VAR_3 . add ( VAR_1 . METHOD_5 ( STRING_2 ) ) ; VAR_3 . add ( VAR_1 . METHOD_5 ( STRING_3 ) ) ; VAR_3 . add ( VAR_1 . METHOD_5 ( STRING_4 ) ) ; VAR_3 . add ( VAR_1 . METHOD_5 ( STRING_5 ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = null ; if ( METHOD_2 ( ) ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . execute ( VAR_1 ) ; try { VAR_2 = VAR_3 . get ( ) ; } catch ( TYPE_3 VAR_4 ) { VAR_4 . METHOD_3 ( ) ; } catch ( TYPE_4 VAR_4 ) { VAR_4 . METHOD_3 ( ) ; } METHOD_4 ( VAR_2 ) ; } else { VAR_2 = METHOD_5 ( VAR_1 ) ; } return VAR_2 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = null ; if ( METHOD_2 ( ) ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . execute ( VAR_1 ) ; try { VAR_2 = VAR_3 . get ( ) ; } catch ( TYPE_3 VAR_4 ) { VAR_4 . METHOD_3 ( ) ; } catch ( TYPE_4 VAR_4 ) { VAR_4 . METHOD_3 ( ) ; } } else { VAR_2 = METHOD_5 ( VAR_1 ) ; } return VAR_2 ; }\n"}
{"problem": "public static java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , int VAR_4 ) { java.lang.String VAR_5 = VAR_1 ; try { VAR_5 = TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; } catch ( TYPE_2 VAR_6 ) { VAR_7 . error ( ( ( STRING_2 + VAR_1 ) + VAR_6 ) ) ; } java.lang.String VAR_8 = ( ( ( ( ( ( STRING_3 + VAR_5 ) + STRING_4 ) + VAR_2 ) + STRING_5 ) + VAR_3 ) + STRING_6 ) + VAR_4 ; return VAR_8 ; }\n", "fixed": "public static java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , int VAR_4 ) { java.lang.String VAR_5 = VAR_1 ; try { VAR_5 = TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; } catch ( TYPE_2 VAR_6 ) { VAR_7 . error ( ( ( STRING_2 + VAR_1 ) + VAR_6 ) ) ; } java.lang.String VAR_8 = ( ( STRING_3 + VAR_5 ) + STRING_6 ) + VAR_4 ; return VAR_8 ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) { return ( ( ( ( ( ( ( ( ( ( ( STRING_1 + ( this . VAR_1 ) ) + STRING_2 ) + ( this . VAR_2 ) ) + STRING_3 ) + ( this . VAR_3 ) ) + STRING_3 ) + ( this . VAR_4 ) ) + STRING_3 ) + ( this . VAR_5 ) ) + STRING_3 ) + ( this . VAR_6 ) ) + STRING_4 ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { return ( ( ( ( ( ( ( ( ( ( ( STRING_4 + ( this . VAR_1 ) ) + STRING_3 ) + ( this . VAR_2 ) ) + STRING_3 ) + ( this . VAR_3 ) ) + STRING_3 ) + ( this . VAR_4 ) ) + STRING_3 ) + ( this . VAR_5 ) ) + STRING_3 ) + ( this . VAR_6 ) ) + STRING_4 ; }\n"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales() throws APIException;\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "fixed": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales();\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { try { VAR_2 . METHOD_2 ( VAR_3 . getText ( ) ) ; } catch ( TYPE_2 VAR_4 ) { TYPE_3 . METHOD_3 ( null , STRING_1 , ( ( VAR_3 . getText ( ) ) + STRING_2 ) , VAR_5 ) ; } catch ( java.io.IOException VAR_4 ) { TYPE_3 . METHOD_3 ( null , STRING_1 , ( ( VAR_3 . getText ( ) ) + STRING_3 ) , VAR_5 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { try { VAR_2 . METHOD_2 ( VAR_3 . getText ( ) ) ; } catch ( TYPE_2 VAR_4 ) { TYPE_3 . METHOD_3 ( null , ( ( VAR_3 . getText ( ) ) + STRING_2 ) , STRING_1 , VAR_5 ) ; } catch ( java.io.IOException VAR_4 ) { TYPE_3 . METHOD_3 ( null , ( ( VAR_3 . getText ( ) ) + STRING_3 ) , STRING_1 , VAR_5 ) ; } }\n"}
{"problem": "public void METHOD_1 ( long VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) { VAR_4 . METHOD_2 ( STRING_1 , VAR_2 , VAR_5 ) ; final TYPE_2 VAR_6 = new TYPE_2 ( VAR_1 , VAR_2 ) ; context . METHOD_3 ( new TYPE_3 ( new TYPE_4 ( VAR_6 ) , ( ( long ) ( VAR_6 . METHOD_4 ( ) ) ) ) , VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( long VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) { VAR_4 . METHOD_2 ( STRING_1 , VAR_2 , VAR_5 ) ; final TYPE_2 VAR_6 = new TYPE_2 ( VAR_1 , VAR_2 ) ; context . METHOD_3 ( new TYPE_3 ( new TYPE_4 ( VAR_6 ) ) , VAR_6 , VAR_3 ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) { try { VAR_3 = false ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 ) ; setValue ( VAR_2 ) ; } finally { VAR_3 = true ; } } }\n", "fixed": "private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { try { VAR_3 = false ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 ) ; if ( ( VAR_2 ) != null ) setValue ( VAR_2 ) ; } finally { VAR_3 = true ; } } }\n"}
{"problem": "public boolean METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { if ( ( VAR_2 . length ( ) ) == 0 ) { return false ; } TYPE_1 VAR_3 = METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_2 , new java.util.Date ( ) , VAR_3 ) ; VAR_5 . METHOD_3 ( VAR_4 ) ; return VAR_6 . METHOD_1 ( VAR_3 , VAR_4 ) ; }\n", "fixed": "public boolean METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { if ( ( VAR_2 . length ( ) ) == 0 ) { return false ; } TYPE_1 VAR_3 = METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_2 , new java.util.Date ( ) ) ; VAR_5 . METHOD_3 ( VAR_4 ) ; return VAR_6 . METHOD_1 ( VAR_3 , VAR_4 ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { TYPE_4 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( \"id\" ) ) ; VAR_2 . METHOD_3 ( STRING_2 , VAR_1 . METHOD_4 ( STRING_2 ) ) ; response . METHOD_5 ( STRING_3 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { TYPE_4 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( STRING_1 ) ) ; VAR_2 . METHOD_3 ( STRING_2 , VAR_1 . METHOD_4 ( STRING_2 ) ) ; response . METHOD_5 ( STRING_3 ) ; }\n"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glGenTextures (int n, int[] textures, int offset) {\n\t\tGL.glGenTexturesEXT(n, toBuffer(textures, offset), 0);\n \t}\n \tpublic void glGetIntegerv (int pname, int[] params, int offset) {", "fixed": " \t}\n \tpublic void glGenTextures (int n, int[] textures, int offset) {\n\t\tGL.glGenTextures(n, toBuffer(textures, offset), 0);\n \t}\n \tpublic void glGetIntegerv (int pname, int[] params, int offset) {", "sourceBeforeFix": "GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)", "sourceAfterFix": "GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RestletEndpointBuilder\n             extends\n                 RestletEndpointConsumerBuilder, RestletEndpointProducerBuilder {\n         default AdvancedRestletEndpointBuilder advanced() {", "fixed": "     \n    public interface RestletEndpointBuilder\n             extends\n                 RestletEndpointConsumerBuilder, RestletEndpointProducerBuilder {\n         default AdvancedRestletEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) >= ( VAR_3 ) ) { if ( ( ( VAR_4 ) == null ) || ( ! ( VAR_5 ) ) ) { VAR_6 = VAR_1 ; } else { VAR_4 . METHOD_1 ( VAR_1 ) ; if ( ( ( VAR_7 ) != ( VAR_8 ) ) && ( VAR_4 . METHOD_2 ( ) ) ) { VAR_7 = VAR_8 ; if ( ( VAR_9 ) != null ) { VAR_9 . METHOD_3 ( VAR_7 ) ; } } } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) >= ( VAR_3 ) ) { if ( ( ( VAR_4 ) == null ) || ( ! ( VAR_5 ) ) ) { VAR_6 = VAR_1 ; } else { VAR_4 . METHOD_1 ( VAR_1 ) ; if ( ( ( VAR_7 ) != ( VAR_8 ) ) && ( VAR_4 . METHOD_2 ( ) ) ) { VAR_7 = VAR_8 ; } if ( ( VAR_9 ) != null ) { VAR_9 . METHOD_3 ( VAR_7 ) ; } } } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.String message = METHOD_2 ( VAR_1 , VAR_2 ) ; if ( TYPE_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) { METHOD_5 ( message , VAR_2 ) ; } else if ( TYPE_4 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) { METHOD_6 ( message , VAR_2 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( TYPE_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) { METHOD_5 ( VAR_1 , VAR_2 ) ; } else if ( TYPE_4 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) { METHOD_6 ( VAR_1 , VAR_2 ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) && ( ! ( VAR_2 . METHOD_2 ( ) . METHOD_4 ( VAR_1 ) ) ) ) { new TYPE_2 ( VAR_2 , VAR_1 , null , true ) ; return true ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) && ( ! ( VAR_2 . METHOD_2 ( ) . METHOD_4 ( VAR_1 ) ) ) ) { new TYPE_2 ( VAR_2 , VAR_1 , null , false ) ; return true ; } return false ; }\n"}
{"problem": "public static < TYPE_1 extends java.util.Collection < TYPE_2 > , TYPE_2 extends TYPE_3 > java.util.Collection < TYPE_2 > METHOD_1 ( TYPE_1 first , TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 VAR_3 : first ) { if ( TYPE_4 . contains ( VAR_1 , VAR_3 ) ) { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; }\n", "fixed": "public static < TYPE_1 extends java.util.Collection < TYPE_2 > , TYPE_2 extends TYPE_3 > java.util.Set < TYPE_2 > METHOD_1 ( TYPE_1 first , TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 VAR_3 : first ) { if ( TYPE_4 . contains ( VAR_1 , VAR_3 ) ) { VAR_2 . add ( VAR_3 ) ; } } return new java.util.HashSet < > ( VAR_2 ) ; }\n"}
{"problem": "public double METHOD_1 ( ) { if ( ( ( n ) < INT_1 ) || ( ( f [ 1 ] ) == 0 ) ) return c ; return ( c ) + ( ( ( ( f [ 0 ] ) * ( f [ 0 ] ) ) / INT_1 ) / ( f [ 1 ] ) ) ; }\n", "fixed": "public double METHOD_1 ( ) { if ( ( n ) == 0 ) return 0 ; if ( ( f [ 1 ] ) == 0 ) return c ; return ( c ) + ( ( ( ( f [ 0 ] ) * ( f [ 0 ] ) ) / INT_1 ) / ( f [ 1 ] ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2585513b6be984cf2f9219d8e23edb6a84e22ac9", "projectName": "openmrs.openmrs-core", "bugType": "Change Boolean Literal", "problem": " \t\t\tmap.put(\"forms\", Context.getFormService().getForms());\r\n \t\t\tString reason = \"\";\r\n\t\t\tfor (Obs o : encounter.getObsAtTopLevel(false)) {\r\n \t\t\t\tif (o.isVoided()){\r", "fixed": " \t\t\tmap.put(\"forms\", Context.getFormService().getForms());\r\n \t\t\tString reason = \"\";\r\n\t\t\tfor (Obs o : encounter.getObsAtTopLevel(true)) {\r\n \t\t\t\tif (o.isVoided()){\r", "sourceBeforeFix": "encounter.getObsAtTopLevel(false)", "sourceAfterFix": "encounter.getObsAtTopLevel(true)"}
{"problem": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) ; VAR_3 = VAR_1 ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( STRING_1 , STRING_2 ) ; VAR_2 . METHOD_5 ( STRING_3 , STRING_4 ) ; METHOD_6 ( VAR_3 , VAR_4 , VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) ; VAR_3 = VAR_1 ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( STRING_1 , STRING_2 ) ; VAR_2 . METHOD_5 ( STRING_3 , STRING_4 ) ; METHOD_6 ( VAR_3 , VAR_4 , VAR_2 ) ; VAR_3 = null ; }\n"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         appendToBody.ret();\n     }\n    private void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "fixed": "         appendToBody.ret();\n     }\n    private static void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"problem": "public static < TYPE_1 > java.util.List < TYPE_1 > METHOD_1 ( TYPE_1 ... VAR_1 ) { java.util.List < TYPE_1 > list = new java.util.ArrayList < TYPE_1 > ( VAR_1 . length ) ; for ( TYPE_1 element : VAR_1 ) { list . add ( element ) ; } return list ; }\n", "fixed": "public static < TYPE_1 > java.util.List < TYPE_1 > METHOD_1 ( TYPE_1 ... VAR_1 ) { java.util.List < TYPE_1 > list = new java.util.ArrayList < TYPE_1 > ( VAR_1 . length ) ; for ( TYPE_1 element : VAR_1 ) { list . add ( element ) ; } java.util.Arrays.asList ( VAR_1 ) ; return list ; }\n"}
{"problem": "public android.view.View METHOD_1 ( android.view.View view ) { this . VAR_1 = ( ( TYPE_1 ) ( view . METHOD_2 ( VAR_2 ) ) ) ; this . VAR_3 = ( ( android.widget.Button ) ( view . METHOD_2 ( VAR_4 ) ) ) ; METHOD_3 ( this . VAR_5 , this . VAR_1 ) ; METHOD_4 ( this . VAR_3 ) ; return view ; }\n", "fixed": "public android.view.View METHOD_1 ( android.view.View view ) { this . VAR_3 = ( ( android.widget.Button ) ( view . METHOD_2 ( VAR_4 ) ) ) ; this . VAR_1 = ( ( TYPE_1 ) ( view . METHOD_2 ( VAR_2 ) ) ) ; METHOD_3 ( this . VAR_5 ) ; METHOD_4 ( this . VAR_3 ) ; return view ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 url ) { TYPE_1 message = TYPE_1 . METHOD_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_3 ( VAR_3 , url ) ; boolean VAR_4 = ( VAR_5 ) == ( TYPE_4 . METHOD_4 ( message ) ) ; if ( VAR_4 ) { VAR_2 . METHOD_3 ( VAR_6 , VAR_1 ) ; } message . METHOD_5 ( VAR_2 ) ; return message ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 url ) { TYPE_1 message = TYPE_1 . METHOD_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_3 ( VAR_3 , url ) ; boolean VAR_4 = ( VAR_5 ) == ( TYPE_4 . METHOD_4 ( message ) ) ; VAR_2 . METHOD_3 ( VAR_6 , VAR_1 ) ; message . METHOD_5 ( VAR_2 ) ; return message ; }\n"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "fixed": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "fixed": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"problem": "private byte [ ] METHOD_1 ( java.lang.String id ) { byte [ ] VAR_1 = METHOD_2 ( id ) ; if ( VAR_1 != null ) { return VAR_1 ; } try { return METHOD_3 ( id ) ; } catch ( java.lang.Exception VAR_2 ) { if ( ( VAR_2 . METHOD_4 ( ) ) instanceof TYPE_1 ) { throw VAR_2 ; } } throw new TYPE_2 ( VAR_3 ) ; }\n", "fixed": "private byte [ ] METHOD_1 ( java.lang.String id ) { byte [ ] VAR_1 = METHOD_2 ( id ) ; if ( VAR_1 != null ) { return VAR_1 ; } try { return METHOD_3 ( id ) ; } catch ( java.lang.Exception VAR_2 ) { if ( ( VAR_2 . METHOD_4 ( ) ) instanceof TYPE_1 ) { throw VAR_2 ; } throw new TYPE_2 ( VAR_3 , VAR_2 ) ; } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( long id ) { if ( id == 0 ) { return VAR_1 ; } else if ( ( id >= ( TYPE_2 . getId ( ) ) ) && ( id <= ( TYPE_3 . getId ( ) ) ) ) { return TYPE_1 . values ( ) [ ( ( ( int ) ( id ) ) - ( ( TYPE_2 . getId ( ) ) - ( TYPE_2 . METHOD_2 ( ) ) ) ) ] ; } return null ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( long id ) { if ( id == 0 ) { return VAR_1 ; } else if ( ( id >= ( TYPE_2 . getId ( ) ) ) && ( id <= ( TYPE_3 . getId ( ) ) ) ) { int index = ( ( int ) ( id ) ) - ( ( TYPE_2 . getId ( ) ) - ( TYPE_2 . METHOD_2 ( ) ) ) ; return TYPE_1 . values ( ) [ index ] ; } return null ; }\n"}
{"problem": "public static void METHOD_1 ( java.lang.String message , android.content.Context context ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( context ) ; VAR_1 . METHOD_2 ( message ) ; VAR_1 . METHOD_3 ( true ) ; } VAR_1 . show ( ) ; }\n", "fixed": "public static void METHOD_1 ( java.lang.String message , android.content.Context context ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( context ) ; VAR_1 . METHOD_2 ( message ) ; VAR_1 . METHOD_3 ( true ) ; } if ( context != null ) { VAR_1 . show ( ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_2 == ( VAR_1 . METHOD_2 ( ) ) ) { VAR_3 = VAR_1 . METHOD_2 ( ) ; java.lang.System.out.println ( ( STRING_1 + ( VAR_3 ) ) ) ; return true ; } else { return false ; } }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_2 == ( VAR_1 . METHOD_2 ( ) ) ) { VAR_3 = VAR_1 . METHOD_2 ( ) ; java.lang.System.out.println ( ( ( STRING_1 + ( VAR_3 ) ) + \"\\n\" ) ) ; return true ; } else { return false ; } }\n"}
{"problem": "public boolean equals ( final java.lang.Object obj ) { if ( obj == null ) return false ; if ( ! ( obj instanceof TYPE_1 ) ) return false ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; if ( ( VAR_2 ) != ( VAR_3 ) ) return false ; if ( ( VAR_4 ) != ( VAR_5 ) ) return false ; return true ; }\n", "fixed": "public boolean equals ( final java.lang.Object obj ) { if ( obj == null ) return false ; if ( ! ( obj instanceof TYPE_1 ) ) return false ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; return ( ( VAR_2 ) == ( VAR_3 ) ) && ( ( VAR_4 ) == ( VAR_5 ) ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { java.io.File VAR_2 = new java.io.File ( METHOD_2 ( ) , STRING_1 ) ; java.lang.String text = STRING_2 ; for ( TYPE_1 VAR_3 : METHOD_3 ( ) . METHOD_4 ( ) ) if ( VAR_3 != VAR_1 ) text = ( text + ( VAR_3 . getName ( ) ) ) + \"\\n\" ; METHOD_5 ( text , VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.io.File VAR_2 = new java.io.File ( METHOD_2 ( ) , STRING_1 ) ; java.lang.String text = STRING_2 ; for ( TYPE_1 VAR_3 : METHOD_3 ( ) . METHOD_4 ( ) ) if ( VAR_3 != VAR_1 ) text = ( text + ( VAR_3 . getName ( ) ) ) + \"\\n\" ; METHOD_5 ( text , VAR_2 ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( className ) ) + STRING_3 ; boolean VAR_3 = true ; for ( java.lang.String VAR_4 : VAR_5 ) { java.lang.String VAR_6 = ( VAR_3 ) ? STRING_4 : STRING_5 ; VAR_1 += VAR_6 + VAR_4 ; } VAR_1 += STRING_6 ; return VAR_1 ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( className ) ) + STRING_3 ; boolean VAR_3 = true ; for ( java.lang.String VAR_4 : VAR_5 ) { java.lang.String VAR_6 = ( VAR_3 ) ? STRING_4 : STRING_5 ; VAR_1 += VAR_6 + VAR_4 ; VAR_3 = false ; } VAR_1 += STRING_6 ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedS3EndpointBuilder\n             extends\n                 AdvancedS3EndpointConsumerBuilder, AdvancedS3EndpointProducerBuilder {\n         default S3EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedS3EndpointBuilder\n             extends\n                 AdvancedS3EndpointConsumerBuilder, AdvancedS3EndpointProducerBuilder {\n         default S3EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 values = new TYPE_1 ( ) ; values . put ( VAR_2 , VAR_1 ) ; TYPE_2 VAR_3 = METHOD_2 ( ) . METHOD_3 ( VAR_4 , values ) ; TYPE_3 . METHOD_4 ( STRING_1 , ( STRING_2 + ( VAR_3 . METHOD_5 ( ) ) ) ) ; }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 values = new TYPE_1 ( ) ; values . put ( VAR_2 , VAR_1 ) ; TYPE_2 VAR_3 = METHOD_2 ( ) . METHOD_3 ( VAR_4 , values ) ; assert VAR_3 != null ; TYPE_3 . METHOD_4 ( STRING_1 , ( STRING_2 + ( VAR_3 . METHOD_5 ( ) ) ) ) ; }\n"}
{"problem": "public java.lang.String status ( ) { try { if ( ( VAR_1 ) instanceof TYPE_1 ) { status = VAR_2 ; return STRING_1 ; } if ( ( METHOD_1 ( ) ) == null ) { status = VAR_3 ; return STRING_2 ; } else { status = VAR_4 ; return ( STRING_3 + ( METHOD_1 ( ) ) ) + STRING_4 ; } } catch ( java.io.IOException VAR_5 ) { status = VAR_2 ; return ( STRING_5 + ( VAR_5 . METHOD_2 ( ) ) ) + STRING_6 ; } finally { VAR_6 = status ; } }\n", "fixed": "public java.lang.String status ( ) { try { if ( ( VAR_1 ) instanceof TYPE_1 ) { status = VAR_2 ; return STRING_1 ; } if ( ( METHOD_1 ( ) ) == null ) { status = VAR_3 ; return STRING_2 ; } else { status = VAR_4 ; return ( STRING_3 + ( METHOD_1 ( ) ) ) + STRING_4 ; } } catch ( java.io.IOException VAR_5 ) { status = VAR_2 ; return ( STRING_5 + ( VAR_5 . METHOD_2 ( ) ) ) + STRING_6 ; } }\n"}
{"project": "Closure", "bugId": 110, "problem": " private void findAliases(NodeTraversal t) {\n             NodeUtil.setDebugInformation(\n                 newDecl.getFirstChild().getFirstChild(), n, name);\n               grandparent.addChildBefore(newDecl, varNode);\n           }", "fixed": " private void findAliases(NodeTraversal t) {\n             NodeUtil.setDebugInformation(\n                 newDecl.getFirstChild().getFirstChild(), n, name);\n            if (isHoisted) {\n              grandparent.addChildToFront(newDecl);\n            } else {\n               grandparent.addChildBefore(newDecl, varNode);\n            }\n           }", "observations": "", "repairActions": ["assignAdd", "assignExpChange", "condBranIfAdd", "condBranIfElseAdd", "condExpExpand", "condExpMod", "exThrowsAdd", "mcAdd", "mcRem", "objInstAdd", "retExpChange", "varAdd"], "repairPatterns": ["condBlockExcAdd", "condBlockOthersAdd", "expLogicExpand", "expLogicMod", "initFix", "missNullCheckN", "missNullCheckP", "wrapsIfElse"]}
{"problem": "private void METHOD_1 ( ) { try { VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( 0 ) ; VAR_3 . setText ( STRING_1 ) ; VAR_4 = true ; } catch ( TYPE_1 VAR_5 ) { TYPE_2 . METHOD_3 ( VAR_6 , ( STRING_2 + ( VAR_5 . METHOD_4 ( ) ) ) , VAR_5 ) ; } }\n", "fixed": "private void METHOD_1 ( ) { try { VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( 0 ) ; VAR_3 . setText ( STRING_1 ) ; } catch ( TYPE_1 VAR_5 ) { TYPE_2 . METHOD_3 ( VAR_6 , ( STRING_2 + ( VAR_5 . METHOD_4 ( ) ) ) , VAR_5 ) ; } }\n"}
{"problem": "private boolean METHOD_1 ( int VAR_1 ) { if ( VAR_1 >= ( VAR_2 ) ) return true ; if ( VAR_1 <= ( VAR_3 ) ) return false ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; float p = VAR_4 . METHOD_2 ( 1 , 1 ) [ 0 ] [ 0 ] ; return p < ( VAR_5 ) ; }\n", "fixed": "protected boolean METHOD_1 ( int VAR_1 ) { if ( VAR_1 >= ( VAR_2 ) ) return true ; if ( VAR_1 <= ( VAR_3 ) ) return false ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; float p = VAR_4 . METHOD_2 ( 1 , 1 ) [ 0 ] [ 0 ] ; return p < ( VAR_5 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 < TYPE_2 > ( ) ; VAR_2 = VAR_1 ; VAR_3 = new TYPE_3 ( ) ; VAR_4 = ( ( TYPE_4 ) ( METHOD_2 ( VAR_5 ) ) ) ; VAR_6 = TYPE_5 . METHOD_3 ( ) . VAR_6 ; VAR_7 = TYPE_5 . METHOD_3 ( ) . VAR_7 ; VAR_8 = TYPE_5 . METHOD_3 ( ) . VAR_8 ; VAR_9 = TYPE_5 . METHOD_3 ( ) . VAR_9 ; TYPE_6 . METHOD_4 ( VAR_10 , STRING_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 < TYPE_2 > ( ) ; VAR_2 = VAR_1 ; VAR_3 = new TYPE_3 ( this ) ; VAR_4 = ( ( TYPE_4 ) ( METHOD_2 ( VAR_5 ) ) ) ; VAR_6 = TYPE_5 . METHOD_3 ( ) . VAR_6 ; VAR_7 = TYPE_5 . METHOD_3 ( ) . VAR_7 ; VAR_8 = TYPE_5 . METHOD_3 ( ) . VAR_8 ; VAR_9 = TYPE_5 . METHOD_3 ( ) . VAR_9 ; TYPE_6 . METHOD_4 ( VAR_10 , STRING_1 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = null ; for ( TYPE_2 p : VAR_2 ) { if ( VAR_1 != null ) VAR_1 += STRING_1 ; else VAR_1 = STRING_2 ; VAR_1 += p . METHOD_2 ( ) ; } return TYPE_1 . METHOD_3 ( VAR_1 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = null ; for ( TYPE_2 p : VAR_2 ) { if ( VAR_1 != null ) VAR_1 += STRING_1 ; else VAR_1 = STRING_2 ; VAR_1 += p . METHOD_2 ( ) ; } VAR_1 = ( VAR_1 == null ) ? STRING_2 : VAR_1 ; return TYPE_1 . METHOD_3 ( VAR_1 ) ; }\n"}
{"problem": "boolean METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ; if ( ( VAR_1 ) < ( VAR_2 ) ) { return false ; } return ( ( VAR_1 ) >= ( VAR_3 . length ) ) || ( ! ( VAR_3 [ VAR_2 ] . METHOD_3 ( ) ) ) ; }\n", "fixed": "boolean METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , this , VAR_1 , VAR_2 ) ; if ( ( VAR_1 ) < ( VAR_2 ) ) { return false ; } return ( ( VAR_1 ) >= ( VAR_3 . length ) ) || ( ! ( VAR_3 [ VAR_2 ] . METHOD_3 ( ) ) ) ; }\n"}
{"fixCommitSHA1": "7ea3d0ec30b6b88358ca298a7e8e752a15dfbc2f", "projectName": "apache.camel", "bugType": "Change Caller in Function Call", "problem": "         if (configuration.getSslContextParameters() != null) {\n             SslFilter filter = new SslFilter(configuration.getSslContextParameters().createSSLContext(), configuration.isAutoStartTls());\n             filter.setUseClientMode(true);\n            acceptor.getFilterChain().addFirst(\"sslFilter\", filter);\n         }\n         configureCodecFactory(\"Mina2Producer\", connector);\n         connector.setConnectTimeoutMillis(timeout);", "fixed": "         if (configuration.getSslContextParameters() != null) {\n             SslFilter filter = new SslFilter(configuration.getSslContextParameters().createSSLContext(), configuration.isAutoStartTls());\n             filter.setUseClientMode(true);\n            connector.getFilterChain().addFirst(\"sslFilter\", filter);\n         }\n         configureCodecFactory(\"Mina2Producer\", connector);\n         connector.setConnectTimeoutMillis(timeout);", "sourceBeforeFix": "acceptor.getFilterChain()", "sourceAfterFix": "connector.getFilterChain()"}
{"fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private void clearLockStore(String name) {\n         NodeEngine nodeEngine = service.getNodeEngine();\n        LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             DefaultObjectNamespace namespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n             lockService.clearLockStore(partitionId, namespace);", "fixed": "     private void clearLockStore(String name) {\n         NodeEngine nodeEngine = service.getNodeEngine();\n        LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             DefaultObjectNamespace namespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n             lockService.clearLockStore(partitionId, namespace);", "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( VAR_2 . getText ( ) . toString ( ) ) ) { ( VAR_3 ) ++ ; VAR_4 . setText ( VAR_5 ) ; VAR_4 . METHOD_3 ( TYPE_1 . getColor ( this , VAR_6 ) ) ; } else { VAR_4 . setText ( VAR_7 ) ; VAR_4 . METHOD_3 ( TYPE_1 . getColor ( this , VAR_8 ) ) ; } ( VAR_9 ) ++ ; VAR_2 . setEnabled ( false ) ; VAR_10 . setEnabled ( false ) ; }\n", "fixed": "private void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( VAR_2 . getText ( ) . toString ( ) ) ) { ( VAR_3 ) ++ ; VAR_4 . setText ( VAR_5 ) ; VAR_4 . METHOD_3 ( TYPE_1 . getColor ( this , VAR_6 ) ) ; } else { VAR_4 . setText ( VAR_7 ) ; VAR_4 . METHOD_3 ( TYPE_1 . getColor ( this , VAR_8 ) ) ; } ( VAR_9 ) ++ ; VAR_10 . setEnabled ( false ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , TYPE_1 VAR_3 , TYPE_2 VAR_4 ) { VAR_3 . METHOD_2 ( STRING_1 , VAR_5 . METHOD_3 ( VAR_1 ) ) ; VAR_3 . METHOD_2 ( STRING_2 , VAR_6 . METHOD_4 ( VAR_1 ) ) ; VAR_3 . METHOD_2 ( STRING_3 , VAR_7 . METHOD_5 ( VAR_1 ) ) ; if ( VAR_2 == 1 ) { VAR_4 . METHOD_6 ( STRING_4 , STRING_5 ) ; } else { VAR_4 . METHOD_6 ( STRING_4 , STRING_6 ) ; } return STRING_7 ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , TYPE_1 VAR_3 , TYPE_2 VAR_4 ) { VAR_3 . METHOD_2 ( STRING_1 , VAR_5 . METHOD_3 ( VAR_1 ) ) ; VAR_3 . METHOD_2 ( STRING_2 , VAR_6 . METHOD_4 ( VAR_1 ) ) ; VAR_3 . METHOD_2 ( STRING_3 , VAR_7 . METHOD_5 ( VAR_1 ) ) ; if ( VAR_2 == 1 ) { return STRING_5 ; } else { VAR_4 . METHOD_6 ( STRING_4 , STRING_6 ) ; return STRING_7 ; } }\n"}
{"fixCommitSHA1": "3a4bffab632bcb1a51b945c448ba4323d0d91519", "projectName": "Graylog2.graylog2-server", "bugType": "More Specific If", "problem": "         final RegexTesterResponse.Match match;\n        if (matcher.groupCount() > 0) {\n             match = RegexTesterResponse.Match.create(matcher.group(1), matcher.start(1), matcher.end(1));\n         } else {\n             match = null;", "fixed": "         final RegexTesterResponse.Match match;\n        if (matched && matcher.groupCount() > 0) {\n             match = RegexTesterResponse.Match.create(matcher.group(1), matcher.start(1), matcher.end(1));\n         } else {\n             match = null;", "sourceBeforeFix": "matcher.groupCount() > 0", "sourceAfterFix": "matched && matcher.groupCount() > 0"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { try { VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . METHOD_4 ( VAR_2 ) . toString ( ) . METHOD_5 ( ) ) ) ; VAR_4 . info ( java.lang.String.format ( STRING_1 , VAR_1 . toString ( ) ) ) ; return true ; } catch ( java.lang.Exception VAR_5 ) { VAR_4 . error ( VAR_5 . toString ( ) ) ; return false ; } }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { try { VAR_1 . METHOD_2 ( VAR_3 . METHOD_4 ( VAR_2 ) . toString ( ) ) ; VAR_4 . info ( java.lang.String.format ( STRING_1 , VAR_1 . toString ( ) ) ) ; return true ; } catch ( java.lang.Exception VAR_5 ) { VAR_4 . error ( VAR_5 . toString ( ) ) ; return false ; } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String id , java.lang.String label , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_2 VAR_4 ) { TYPE_1 VAR_5 = new TYPE_1 ( id , id , label , ( STRING_1 + id ) , VAR_1 , null , 0 , VAR_2 , null ) ; VAR_5 . METHOD_2 ( STRING_2 ) ; VAR_5 . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_3 , VAR_3 , STRING_4 , label , STRING_5 , label , STRING_6 , false , STRING_7 , VAR_4 ) ) ; return VAR_5 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String id , java.lang.String label , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_2 VAR_4 ) { TYPE_1 VAR_5 = new TYPE_1 ( id , id , label , ( STRING_1 + id ) , VAR_1 , null , 0 , VAR_2 , null ) ; VAR_5 . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_3 , VAR_3 , STRING_4 , label , STRING_5 , label , STRING_6 , false , STRING_7 , VAR_4 ) ) ; return VAR_5 ; }\n"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "d38eb966db524987cb154e39e7377c18bb5b2569", "projectName": "eclipse.vert.x", "bugType": "Same Function More Args", "problem": "   private void testCookies(String cookieHeader, Consumer<HttpServerRequest> serverChecker, Consumer<HttpClientResponse> clientChecker) throws Exception {\n     server.requestHandler(serverChecker::accept);\n    startServer();\n     client.request(\n       HttpMethod.GET,\n       testAddress,", "fixed": "   private void testCookies(String cookieHeader, Consumer<HttpServerRequest> serverChecker, Consumer<HttpClientResponse> clientChecker) throws Exception {\n     server.requestHandler(serverChecker::accept);\n    startServer(testAddress);\n     client.request(\n       HttpMethod.GET,\n       testAddress,", "sourceBeforeFix": "startServer()", "sourceAfterFix": "startServer(testAddress)"}
{"problem": "public java.util.Map < java.lang.String , java.lang.Integer > METHOD_1 ( ) { final java.util.Map < java.lang.String , java.lang.Integer > VAR_1 = new TYPE_1 < java.lang.String , java.lang.Integer > ( ) ; final int [ ] VAR_2 ; synchronized ( this . VAR_2 ) { VAR_2 = TYPE_2 . METHOD_2 ( this . VAR_2 , this . VAR_2 . length ) ; } for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { VAR_1 . put ( keys [ i ] , VAR_2 [ i ] ) ; } return VAR_1 ; }\n", "fixed": "public java.util.Map < java.lang.String , java.lang.Integer > METHOD_1 ( ) { final java.util.Map < java.lang.String , java.lang.Integer > VAR_1 = new TYPE_1 < java.lang.String , java.lang.Integer > ( ) ; final int length = keys . length ; for ( int i = 0 ; i < length ; i ++ ) { VAR_1 . put ( keys [ i ] , VAR_2 [ i ] . count ) ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "dbc0ca8d1cb03f2da2c8fc0062e5d4b681fef11a", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "         final DummyOperation operation = new DummyOperation(0);\n         Data data = serializationService.toData(operation);\n        final Packet packet = new Packet(data, operation.getPartitionId(), serializationService.getPortableContext());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);", "fixed": "         final DummyOperation operation = new DummyOperation(0);\n         Data data = serializationService.toData(operation);\n        final Packet packet = new Packet(data, operation.getPartitionId());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);", "sourceBeforeFix": "new Packet(data,0,serializationService.getPortableContext())", "sourceAfterFix": "new Packet(data,0)"}
{"problem": "public synchronized void METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; java.lang.String text = STRING_2 ; for ( java.lang.String VAR_2 : VAR_1 ) { text += VAR_2 ; text += CHAR_1 ; } TYPE_1 . METHOD_2 ( STRING_3 ) ; VAR_3 . setText ( text ) ; }\n", "fixed": "private synchronized void METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; java.lang.String text = STRING_2 ; for ( java.lang.String VAR_2 : VAR_1 ) { text += VAR_2 ; text += CHAR_1 ; } TYPE_1 . METHOD_2 ( STRING_3 ) ; VAR_3 . setText ( text ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private static void METHOD_1 ( java.util.List < TYPE_1 < java.lang.String , java.lang.String > > words , java.lang.String VAR_1 ) { try { java.io.FileOutputStream file = new java.io.FileOutputStream ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_3 ( ) ; TYPE_4 VAR_3 = VAR_2 . METHOD_2 ( ) ; TYPE_5 . METHOD_3 ( words , VAR_3 ) ; VAR_2 . METHOD_4 ( file ) ; file . METHOD_5 ( ) ; file . METHOD_6 ( ) ; } catch ( java.io.IOException VAR_4 ) { throw new TYPE_6 ( STRING_1 ) ; } }\n", "fixed": "private static void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > words , java.lang.String VAR_1 ) { try { java.io.FileOutputStream file = new java.io.FileOutputStream ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_3 ( ) ; TYPE_4 VAR_3 = VAR_2 . METHOD_2 ( ) ; TYPE_5 . METHOD_3 ( words , VAR_3 ) ; VAR_2 . METHOD_4 ( file ) ; file . METHOD_5 ( ) ; file . METHOD_6 ( ) ; } catch ( java.io.IOException VAR_4 ) { throw new TYPE_6 ( STRING_1 ) ; } }\n"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);", "fixed": " \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"problem": "private void METHOD_1 ( java.io.File VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; while ( ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ) <= 0 ) { } METHOD_7 ( ) ; VAR_3 . METHOD_8 ( new TYPE_1 ( VAR_4 , VAR_5 class . METHOD_9 ( STRING_1 ) ) ) ; }\n", "fixed": "public void METHOD_1 ( java.io.File VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; while ( ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ) <= 0 ) { } METHOD_7 ( ) ; VAR_3 . METHOD_8 ( new TYPE_1 ( VAR_4 , VAR_5 class . METHOD_9 ( STRING_1 ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Throwable { class TYPE_1 { TYPE_2 METHOD_2 ( ) { return new TYPE_3 ( ) ; } } METHOD_3 ( VAR_1 class , STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; TYPE_4 . METHOD_5 ( VAR_4 ) . METHOD_2 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Throwable { class TYPE_1 { TYPE_2 METHOD_2 ( ) { return new TYPE_3 ( ) ; } } METHOD_3 ( VAR_1 class , STRING_1 ) ; TYPE_2 VAR_4 = ( ( TYPE_2 ) ( VAR_2 . METHOD_4 ( VAR_3 ) ) ) ; TYPE_4 . METHOD_5 ( VAR_4 ) . METHOD_2 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) { public TYPE_2 METHOD_2 ( ) { TYPE_2 VAR_2 = METHOD_3 ( ) ; return new TYPE_2 ( INT_1 , VAR_2 . height ) ; } } ; VAR_1 . METHOD_4 ( VAR_3 ) ; METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; VAR_1 . METHOD_7 ( ) ; VAR_1 . METHOD_8 ( true ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( STRING_1 ) { public TYPE_2 METHOD_2 ( ) { TYPE_2 VAR_2 = METHOD_3 ( ) ; return new TYPE_2 ( INT_1 , VAR_2 . height ) ; } } ; VAR_1 . METHOD_4 ( VAR_3 ) ; METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; VAR_1 . METHOD_7 ( ) ; VAR_1 . METHOD_8 ( true ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { java.lang.String id = VAR_2 . get ( VAR_1 ) ; if ( id == null ) { TYPE_3 VAR_3 = TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 != null ) && ( VAR_3 . METHOD_4 ( ) . equals ( VAR_4 ) ) ) { METHOD_5 ( VAR_3 ) ; id = VAR_3 . getId ( ) ; } } return id == null ? null : VAR_5 . get ( id ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { java.lang.String id = VAR_2 . get ( VAR_1 ) ; if ( id == null ) { TYPE_3 VAR_3 = TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 != null ) && ( VAR_3 . METHOD_4 ( ) . equals ( VAR_4 ) ) ) { id = VAR_3 . getId ( ) ; } } return id == null ? null : VAR_5 . get ( id ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( context , VAR_2 . get ( 0 ) . VAR_3 ) ; VAR_4 . METHOD_3 ( new TYPE_3 ( ) { public void METHOD_1 ( ) { ( ( TYPE_4 ) ( VAR_5 . METHOD_4 ( VAR_6 ) ) ) . METHOD_5 ( VAR_1 ) ; } } ) ; }\n", "fixed": "public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( context , VAR_2 . get ( 0 ) . VAR_3 ) ; if ( VAR_1 != null ) { VAR_4 . METHOD_3 ( new TYPE_3 ( ) { public void METHOD_1 ( ) { ( ( TYPE_4 ) ( VAR_5 . METHOD_4 ( VAR_6 ) ) ) . METHOD_5 ( VAR_1 ) ; } } ) ; } }\n"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"part-\" + i + '-' + j).toString();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "fixed": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"part-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "sourceBeforeFix": "(new Path(testBucket.getParent(),\".test.inprogress\")).toString()", "sourceAfterFix": "(new Path(testBucket.getParent(),\".test.inprogress\")).getPath()"}
{"problem": "private void METHOD_1 ( TYPE_1 node ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( node ) ; for ( TYPE_2 VAR_2 : VAR_1 ) { java.util.List < TYPE_3 > VAR_3 = METHOD_3 ( VAR_2 ) ; if ( VAR_3 . isEmpty ( ) ) break ; TYPE_3 VAR_4 = TYPE_4 . min ( VAR_3 ) ; TYPE_3 VAR_5 = VAR_2 . getId ( ) ; METHOD_4 ( node , VAR_5 , VAR_4 ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 node ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( node ) ; for ( TYPE_2 VAR_2 : VAR_1 ) { java.util.List < TYPE_3 > VAR_3 = METHOD_3 ( node . getId ( ) , VAR_2 . getId ( ) ) ; if ( VAR_3 . isEmpty ( ) ) break ; TYPE_3 VAR_4 = TYPE_4 . min ( VAR_3 ) ; TYPE_3 VAR_5 = VAR_2 . getId ( ) ; METHOD_4 ( node , VAR_5 , VAR_4 ) ; } }\n"}
{"problem": "public java.lang.String toString ( ) { java.lang.String VAR_1 = STRING_1 ; switch ( size ) { case VAR_2 : VAR_1 = STRING_2 ; break ; case VAR_3 : VAR_1 = STRING_3 ; break ; case VAR_4 : VAR_1 = STRING_4 ; break ; } java.lang.String VAR_5 = STRING_1 ; VAR_5 += ( STRING_5 + ( name ) ) + \"\\n\" ; VAR_5 += ( STRING_6 + ( VAR_6 ) ) + \"\\n\" ; VAR_5 += ( STRING_7 + VAR_1 ) + \"\\n\" ; return VAR_5 ; }\n", "fixed": "public java.lang.String toString ( ) { java.lang.String VAR_5 = STRING_1 ; VAR_5 += ( STRING_5 + ( name ) ) + \"\\n\" ; VAR_5 += ( STRING_6 + ( VAR_6 ) ) + \"\\n\" ; VAR_5 += ( STRING_7 + ( size ) ) + \"\\n\" ; return VAR_5 ; }\n"}
{"problem": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; METHOD_3 ( ) . METHOD_4 ( ) . add ( VAR_5 , new TYPE_4 ( ) ) . commit ( ) ; return view ; }\n", "fixed": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; if ( VAR_3 == null ) { METHOD_3 ( ) . METHOD_4 ( ) . add ( VAR_5 , new TYPE_4 ( ) ) . commit ( ) ; } return view ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( context , VAR_2 , type , this ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; if ( VAR_5 . METHOD_4 ( ) ) { VAR_5 . METHOD_5 ( false ) ; } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( context , VAR_2 , type , this ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( type ) ; if ( VAR_5 . METHOD_4 ( ) ) { VAR_5 . METHOD_5 ( false ) ; } }\n"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastInstanceEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default HazelcastInstanceEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastInstanceEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default HazelcastInstanceEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private static boolean equals ( final TYPE_1 VAR_1 , final TYPE_2 t ) { if ( t instanceof TYPE_1 ) { final TYPE_1 VAR_2 = ( ( TYPE_1 ) ( t ) ) ; return ( TYPE_3 . equals ( TYPE_3 . METHOD_1 ( VAR_1 ) , TYPE_3 . METHOD_1 ( VAR_2 ) ) ) && ( TYPE_3 . equals ( TYPE_3 . METHOD_2 ( VAR_1 ) , TYPE_3 . METHOD_2 ( VAR_2 ) ) ) ; } return true ; }\n", "fixed": "private static boolean equals ( final TYPE_1 VAR_1 , final TYPE_2 t ) { if ( t instanceof TYPE_1 ) { final TYPE_1 VAR_2 = ( ( TYPE_1 ) ( t ) ) ; return ( TYPE_3 . equals ( TYPE_3 . METHOD_1 ( VAR_1 ) , TYPE_3 . METHOD_1 ( VAR_2 ) ) ) && ( TYPE_3 . equals ( TYPE_3 . METHOD_2 ( VAR_1 ) , TYPE_3 . METHOD_2 ( VAR_2 ) ) ) ; } return false ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { this . VAR_1 = VAR_1 ; java.util.Collections.sort ( this . VAR_1 ) ; TYPE_2 VAR_2 = this . METHOD_2 ( null ) ; java.util.Map.Entry < java.lang.String , java.lang.String > VAR_3 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . iterator ( ) . METHOD_5 ( ) ; this . VAR_4 = VAR_3 . METHOD_6 ( ) ; this . VAR_5 = VAR_3 . getValue ( ) ; return this ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { this . VAR_1 = VAR_1 ; java.util.Collections.sort ( this . VAR_1 ) ; TYPE_2 VAR_2 = this . METHOD_2 ( null ) ; if ( VAR_2 != null ) { java.util.Map.Entry < java.lang.String , java.lang.String > VAR_3 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . iterator ( ) . METHOD_5 ( ) ; this . VAR_4 = VAR_3 . METHOD_6 ( ) ; this . VAR_5 = VAR_3 . getValue ( ) ; } return this ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { TYPE_1 VAR_4 = TYPE_2 . METHOD_2 ( VAR_5 class ) ; try { java.lang.String VAR_6 = VAR_1 . replaceAll ( STRING_1 , STRING_2 ) ; TYPE_3 . METHOD_3 ( TYPE_4 . getContext ( ) ) . METHOD_4 ( VAR_6 , TYPE_5 . METHOD_5 ( VAR_3 ) , VAR_2 ) ; } catch ( java.lang.Exception VAR_7 ) { VAR_4 . error ( ( STRING_3 + VAR_1 ) , VAR_7 ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_6 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { TYPE_1 VAR_4 = TYPE_2 . METHOD_2 ( VAR_5 class ) ; try { TYPE_3 . METHOD_3 ( TYPE_4 . getContext ( ) ) . METHOD_4 ( VAR_6 , TYPE_5 . METHOD_5 ( VAR_3 ) , VAR_2 ) ; } catch ( java.lang.Exception VAR_7 ) { VAR_4 . error ( ( STRING_3 + VAR_6 ) , VAR_7 ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 ) { VAR_2 = null ; } if ( VAR_2 != null ) { METHOD_3 ( VAR_1 ) ; return VAR_2 ; } VAR_2 = TYPE_2 . METHOD_4 ( VAR_1 ) ; if ( VAR_2 != null ) { METHOD_3 ( VAR_1 ) ; TYPE_1 . METHOD_5 ( VAR_1 , VAR_2 ) ; return VAR_2 ; } return VAR_4 ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 ) { VAR_2 = null ; } if ( VAR_2 != null ) { METHOD_3 ( VAR_1 ) ; return VAR_2 ; } VAR_2 = TYPE_2 . METHOD_4 ( VAR_1 ) ; if ( ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) { METHOD_3 ( VAR_1 ) ; TYPE_1 . METHOD_5 ( VAR_1 , VAR_2 ) ; return VAR_2 ; } return VAR_4 ; }\n"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"problem": "public void METHOD_1 ( ) { try { int c ; while ( true ) { c = VAR_1 . METHOD_2 ( ) ; if ( c == ( - 1 ) ) break ; VAR_2 . METHOD_3 ( c ) ; VAR_2 . METHOD_4 ( ) ; } } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { int c ; while ( true ) { c = VAR_1 . METHOD_2 ( ) ; if ( c == ( - 1 ) ) break ; VAR_2 . METHOD_3 ( c ) ; VAR_2 . METHOD_4 ( ) ; } } catch ( java.io.IOException VAR_3 ) { } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void start ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this , true ) ; VAR_1 . init ( this , VAR_2 ) ; if ( ! ( METHOD_1 ( ) ) ) return ; METHOD_2 ( ) ; VAR_1 . METHOD_3 ( true ) ; VAR_1 . METHOD_4 ( ) ; }\n", "fixed": "private void start ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this , true ) ; VAR_1 . init ( this , VAR_2 ) ; if ( ! ( METHOD_1 ( ) ) ) return ; METHOD_2 ( ) ; VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_3 ( true ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . execute ( VAR_3 ) ; VAR_4 . setEnabled ( true ) ; VAR_5 . setEnabled ( false ) ; METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( METHOD_4 ( ) , STRING_1 , VAR_6 ) . show ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . execute ( VAR_3 ) ; VAR_4 . setEnabled ( true ) ; VAR_5 . setEnabled ( false ) ; TYPE_2 . METHOD_3 ( METHOD_4 ( ) , STRING_1 , VAR_6 ) . show ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( java.lang.Integer . METHOD_5 ( VAR_2 . getText ( ) ) , new TYPE_4 ( ) { public void METHOD_6 ( TYPE_5 response ) { java.lang.String VAR_3 = ( ( java.lang.String ) ( response . getData ( ) ) ) ; if ( VAR_3 == null ) { VAR_3 = STRING_1 ; } VAR_2 . setText ( VAR_3 ) ; } } ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( java.lang.Integer.parseInt ( VAR_2 . getText ( ) ) , new TYPE_4 ( ) { public void METHOD_6 ( TYPE_5 response ) { java.lang.String VAR_3 = ( ( java.lang.String ) ( response . getData ( ) ) ) ; if ( VAR_3 == null ) { VAR_3 = STRING_1 ; } VAR_2 . setText ( VAR_3 ) ; } } ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.Object value ) throws TYPE_1 { if ( ! ( value instanceof java.lang.String ) ) { throw new TYPE_1 ( this . VAR_1 . getString ( STRING_1 ) ) ; } java.lang.String query = ( ( java.lang.String ) ( value ) ) . trim ( ) ; if ( ! ( query . toLowerCase ( ) . startsWith ( STRING_2 ) ) ) { throw new TYPE_1 ( this . VAR_1 . getString ( STRING_3 ) ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.Object value ) throws TYPE_1 { java.lang.String query = ( ( java.lang.String ) ( value ) ) . trim ( ) ; if ( ! ( query . toLowerCase ( ) . startsWith ( STRING_2 ) ) ) { throw new TYPE_1 ( this . VAR_1 . getString ( STRING_3 ) ) ; } }\n"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "      * @return string AST.\n      */\n     private static String printTree(DetailAST ast) {\n        final StringBuilder messageBuilder = new StringBuilder();\n         DetailAST node = ast;\n         while (node != null) {\n             messageBuilder.append(getIndentation(node))", "fixed": "      * @return string AST.\n      */\n     private static String printTree(DetailAST ast) {\n        final StringBuilder messageBuilder = new StringBuilder(1024);\n         DetailAST node = ast;\n         while (node != null) {\n             messageBuilder.append(getIndentation(node))", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( VAR_2 != null ) { for ( TYPE_1 VAR_4 : VAR_2 ) { double VAR_5 = ( ( VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ) * ( INT_1 + VAR_1 ) ) / INT_1 ; VAR_4 . METHOD_5 ( VAR_5 ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; } } }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( VAR_2 != null ) { for ( TYPE_1 VAR_4 : VAR_2 ) { double VAR_5 = ( ( VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ) * ( INT_1 + VAR_1 ) ) / INT_1 ; VAR_4 . METHOD_5 ( VAR_5 ) ; VAR_3 . update ( VAR_4 ) ; } } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { if ( VAR_1 != null ) { final TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) . METHOD_7 ( TYPE_4 . METHOD_8 ( VAR_1 ) ) . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) ; return VAR_2 . build ( ) ; } return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( ) ; if ( VAR_1 != null ) VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) . METHOD_7 ( TYPE_4 . METHOD_8 ( VAR_1 ) ) . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) ; return VAR_2 . build ( ) ; }\n"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Error_Response_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Error_Response_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"problem": "private TYPE_1 METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = ( ( TYPE_3 ) ( VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( ) ; return VAR_3 . METHOD_5 ( VAR_1 ) ? TYPE_4 . METHOD_6 ( VAR_3 ) : null ; }\n", "fixed": "private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_3 = ( ( TYPE_3 ) ( VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( ) ; if ( VAR_3 == null ) return null ; VAR_1 = VAR_2 . METHOD_2 ( ) ; return VAR_3 . METHOD_5 ( VAR_1 ) ? TYPE_4 . METHOD_6 ( VAR_3 ) : null ; }\n"}
{"problem": "public boolean METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { if ( VAR_2 == ( VAR_3 ) ) { return false ; } else if ( VAR_2 == ( VAR_4 ) ) { switch ( VAR_1 ) { case VAR_5 : METHOD_2 ( ) ; return true ; case VAR_6 : TYPE_1 VAR_7 = data . METHOD_3 ( VAR_8 ) ; VAR_9 . METHOD_4 ( VAR_7 ) ; METHOD_5 ( VAR_10 , VAR_7 ) ; VAR_11 = VAR_7 ; return true ; default : break ; } } return false ; }\n", "fixed": "public boolean METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { if ( VAR_2 == ( VAR_3 ) ) { METHOD_2 ( ) ; return false ; } else if ( VAR_2 == ( VAR_4 ) ) { switch ( VAR_1 ) { case VAR_5 : METHOD_2 ( ) ; return true ; case VAR_6 : TYPE_1 VAR_7 = data . METHOD_3 ( VAR_8 ) ; VAR_11 = VAR_7 ; VAR_9 . METHOD_4 ( VAR_7 ) ; METHOD_5 ( VAR_10 , VAR_7 ) ; return true ; default : break ; } } return false ; }\n"}
{"fixCommitSHA1": "fd2bf7d972c703a603f7ec043b96649347f7e184", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "         httpClientBinder(binder).bindHttpClient(\"scheduler\", ForScheduler.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(2, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                     config.setMaxConnectionsPerServer(250);\n                 });", "fixed": "         httpClientBinder(binder).bindHttpClient(\"scheduler\", ForScheduler.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(30, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                     config.setMaxConnectionsPerServer(250);\n                 });", "sourceBeforeFix": "new Duration(2,SECONDS)", "sourceAfterFix": "new Duration(30,SECONDS)"}
{"problem": "public TYPE_1 add ( java.lang.String key , java.lang.String VAR_1 ) { if ( VAR_1 . METHOD_1 ( STRING_1 ) ) VAR_1 = VAR_1 . substring ( 0 , ( ( VAR_1 . length ( ) ) - INT_1 ) ) ; VAR_2 . put ( TYPE_2 . trim ( key ) , TYPE_2 . trim ( VAR_1 ) ) ; return this ; }\n", "fixed": "public void add ( java.lang.String key , java.lang.String VAR_1 ) { if ( VAR_1 . METHOD_1 ( STRING_1 ) ) VAR_1 = VAR_1 . substring ( 0 , ( ( VAR_1 . length ( ) ) - INT_1 ) ) ; VAR_2 . put ( TYPE_2 . trim ( key ) , TYPE_2 . trim ( VAR_1 ) ) ; }\n"}
{"fixCommitSHA1": "a82c5ba127d1472c0c5c9dea4c1d8241bb391733", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\t\tHttpServletResponse response) throws ServletException, IOException {\r\n \t\tHttpSession httpSession = request.getSession();\r\n\t\tString ipAddress = request.getLocalAddr();\r\n \t\tInteger loginAttempts = loginAttemptsByIP.get(ipAddress);\r\n \t\tif (loginAttempts == null)\r\n \t\t\tloginAttempts = 1;\r", "fixed": " \t\t\tHttpServletResponse response) throws ServletException, IOException {\r\n \t\tHttpSession httpSession = request.getSession();\r\n\t\tString ipAddress = request.getRemoteAddr();\r\n \t\tInteger loginAttempts = loginAttemptsByIP.get(ipAddress);\r\n \t\tif (loginAttempts == null)\r\n \t\t\tloginAttempts = 1;\r", "sourceBeforeFix": "request.getLocalAddr()", "sourceAfterFix": "request.getRemoteAddr()"}
{"fixCommitSHA1": "1f71382322dbdca408184f5ec1d65bfc32e7b8f2", "projectName": "facebook.presto", "bugType": "Less Specific If", "problem": "     public String getGenericSignature()\n     {\n         StringBuilder sb = new StringBuilder();\n        if (primitiveType != null) {\n             return type;\n         }\n         sb.append('L').append(className);", "fixed": "     public String getGenericSignature()\n     {\n         StringBuilder sb = new StringBuilder();\n        if (primitiveType != null || arrayComponentType != null) {\n             return type;\n         }\n         sb.append('L').append(className);", "sourceBeforeFix": "primitiveType != null", "sourceAfterFix": "primitiveType != null || arrayComponentType != null"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"problem": "public final void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; VAR_3 = VAR_2 . getInt ( STRING_1 , INT_1 ) ; TYPE_4 . i ( VAR_4 , ( STRING_2 + ( VAR_3 ) ) ) ; VAR_5 = java.lang.Integer.parseInt ( VAR_2 . getString ( STRING_3 , STRING_4 ) ) ; TYPE_4 . i ( VAR_4 , ( STRING_5 + ( VAR_5 ) ) ) ; }\n", "fixed": "private final void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; VAR_3 = VAR_2 . getInt ( STRING_1 , INT_1 ) ; TYPE_4 . i ( VAR_4 , ( STRING_2 + ( VAR_3 ) ) ) ; VAR_5 = java.lang.Integer.parseInt ( VAR_2 . getString ( STRING_3 , STRING_4 ) ) ; TYPE_4 . i ( VAR_4 , ( STRING_5 + ( VAR_5 ) ) ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 event ) { switch ( event . METHOD_2 ( ) ) { case VAR_1 : java.lang.System.out.println ( STRING_1 ) ; x = ( ( int ) ( event . METHOD_3 ( ) ) ) ; y = ( ( int ) ( event . METHOD_4 ( ) ) ) ; METHOD_5 ( ) ; break ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 event ) { switch ( event . METHOD_2 ( ) ) { case VAR_1 : x = ( ( int ) ( event . METHOD_3 ( ) ) ) ; y = ( ( int ) ( event . METHOD_4 ( ) ) ) ; METHOD_5 ( ) ; break ; } return true ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Map < TYPE_1 , TYPE_1 > VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_3 = METHOD_3 ( VAR_2 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_1 ) . METHOD_3 ( ) ; if ( ! ( TYPE_3 . equals ( VAR_4 . METHOD_5 ( ) , VAR_3 . METHOD_5 ( ) ) ) ) { VAR_3 . METHOD_6 ( VAR_4 ) ; } return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Map < TYPE_1 , TYPE_1 > VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_3 = METHOD_3 ( VAR_2 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_1 ) . METHOD_3 ( ) ; if ( ( ( null != VAR_3 ) && ( null != VAR_4 ) ) && ( ! ( TYPE_3 . equals ( VAR_4 . METHOD_5 ( ) , VAR_3 . METHOD_5 ( ) ) ) ) ) { VAR_3 . METHOD_6 ( VAR_4 ) ; } return VAR_3 ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( ( VAR_1 == null ) | ( ( VAR_1 . length ) == 0 ) ) { return null ; } return VAR_1 [ 0 ] ; } catch ( TYPE_2 VAR_3 ) { return null ; } }\n", "fixed": "private TYPE_1 METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( ( VAR_1 == null ) || ( ( VAR_1 . length ) == 0 ) ) { return null ; } return VAR_1 [ 0 ] ; } catch ( TYPE_2 VAR_3 ) { return null ; } }\n"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n          intBuf = buf.DATA.asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {", "fixed": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"problem": "public void METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_3 ) { java.lang.String file = ( VAR_2 == 1 ) ? STRING_1 : STRING_2 ; VAR_4 . info ( ( ( ( VAR_2 + STRING_3 ) + file ) + STRING_4 ) ) ; ( count ) ++ ; } }\n", "fixed": "public void METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_3 ) { java.lang.String file = ( VAR_2 == 1 ) ? STRING_1 : STRING_2 ; VAR_4 . info ( ( ( ( VAR_2 + STRING_3 ) + file ) + STRING_4 ) ) ; count += 1 ; } }\n"}
{"fixCommitSHA1": "f59b698fc99211c010d569e7f71555183dfc29f1", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "    * Requests an immediate publish of all metrics from sources to sinks.\n    */\n   @Override\n  public void publishMetricsNow() {\n     if (sinks.size() > 0) {\n       publishMetrics(sampleMetrics(), true);\n     }    ", "fixed": "    * Requests an immediate publish of all metrics from sources to sinks.\n    */\n   @Override\n  public synchronized void publishMetricsNow() {\n     if (sinks.size() > 0) {\n       publishMetrics(sampleMetrics(), true);\n     }    ", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"problem": "public TYPE_1 < java.lang.String , TYPE_2 > METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return VAR_1 ; } TYPE_1 < java.lang.String , TYPE_2 > VAR_1 = new TYPE_1 ( METHOD_3 ( ) . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( this . VAR_1 ) ; return VAR_1 ; }\n", "fixed": "public TYPE_1 < java.lang.String , TYPE_2 > METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return METHOD_4 ( ) ; } TYPE_1 < java.lang.String , TYPE_2 > VAR_1 = new TYPE_1 ( METHOD_3 ( ) . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( this . METHOD_4 ( ) ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"problem": "private boolean METHOD_1 ( java.lang.String VAR_1 ) { java.util.regex.Matcher VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 . METHOD_3 ( ) ) { try { int VAR_4 = java.lang.Integer.parseInt ( VAR_2 . METHOD_4 ( 1 ) ) ; return ( VAR_4 >= 1 ) && ( VAR_4 <= INT_1 ) ; } catch ( TYPE_1 VAR_5 ) { return false ; } } return false ; }\n", "fixed": "private boolean METHOD_1 ( java.lang.Object VAR_1 ) { java.util.regex.Matcher VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . toString ( ) ) ; if ( VAR_2 . METHOD_3 ( ) ) { try { int VAR_4 = java.lang.Integer.parseInt ( VAR_2 . METHOD_4 ( 1 ) ) ; return ( VAR_4 >= 1 ) && ( VAR_4 <= INT_1 ) ; } catch ( TYPE_1 VAR_5 ) { return false ; } } return false ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected TYPE_1 METHOD_1 ( java.io.InputStream VAR_1 , TYPE_2 VAR_2 ) { try { VAR_1 = METHOD_2 ( VAR_2 , VAR_1 ) ; VAR_1 = METHOD_3 ( VAR_2 , VAR_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 ) ) ; VAR_3 . METHOD_6 ( true ) ; final TYPE_1 VAR_4 = VAR_3 . METHOD_7 ( ) ; return VAR_4 ; } catch ( java.lang.Exception VAR_5 ) { throw new TYPE_5 ( VAR_5 . METHOD_8 ( ) , VAR_5 ) ; } }\n", "fixed": "protected TYPE_1 METHOD_1 ( java.io.InputStream VAR_1 , TYPE_2 VAR_2 ) throws java.lang.Exception { VAR_1 = METHOD_2 ( VAR_2 , VAR_1 ) ; VAR_1 = METHOD_3 ( VAR_2 , VAR_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 ) ) ; VAR_3 . METHOD_6 ( true ) ; final TYPE_1 VAR_4 = VAR_3 . METHOD_7 ( ) ; return VAR_4 ; }\n"}
{"problem": "protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { if ( VAR_1 == ( VAR_3 ) ) { if ( VAR_2 == ( VAR_4 ) ) { VAR_5 = new TYPE_1 ( this ) ; } else { android.content.Intent VAR_6 = new android.content.Intent ( ) ; VAR_6 . METHOD_2 ( VAR_7 ) ; METHOD_3 ( VAR_6 ) ; } } }\n", "fixed": "protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { super . METHOD_1 ( VAR_1 , VAR_2 , data ) ; if ( VAR_1 == ( VAR_3 ) ) { if ( VAR_2 == ( VAR_4 ) ) { VAR_5 = new TYPE_1 ( this ) ; } else { android.content.Intent VAR_6 = new android.content.Intent ( ) ; VAR_6 . METHOD_2 ( VAR_7 ) ; METHOD_3 ( VAR_6 ) ; } } }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; try { TYPE_2 . METHOD_1 ( VAR_1 ) ; } catch ( java.lang.Exception VAR_2 ) { VAR_2 . METHOD_2 ( ) ; } TYPE_3 . METHOD_3 ( VAR_1 ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; try { TYPE_2 . METHOD_1 ( VAR_1 ) ; } catch ( java.lang.Exception VAR_2 ) { VAR_2 . METHOD_2 ( ) ; java.lang.System.exit ( 1 ) ; } TYPE_3 . METHOD_3 ( VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( char [ ] VAR_1 , int start , int length ) throws TYPE_1 { java.lang.String VAR_2 = new java.lang.String ( VAR_1 , start , length ) ; if ( ( ! ( VAR_2 . equals ( \"\\n\" ) ) ) && ( VAR_3 ) ) VAR_4 . append ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( char [ ] VAR_1 , int start , int length ) throws TYPE_1 { java.lang.String VAR_2 = new java.lang.String ( VAR_1 , start , length ) ; if ( ! ( VAR_2 . equals ( \"\\n\" ) ) ) VAR_4 . append ( VAR_2 ) ; }\n"}
{"problem": "public java.util.Map < TYPE_1 , java.lang.Object > METHOD_1 ( java.lang.Object target ) { try { java.util.Map < TYPE_1 , java.lang.Object > VAR_1 = ( ( java.util.Map < TYPE_1 , java.lang.Object > ) ( VAR_2 . get ( target ) ) ) ; if ( VAR_1 == null ) { VAR_2 . set ( target , VAR_1 ) ; VAR_1 = TYPE_2 . METHOD_2 ( ) ; } return VAR_1 ; } catch ( TYPE_3 VAR_3 ) { throw new TYPE_4 ( STRING_1 , VAR_3 ) ; } }\n", "fixed": "public java.util.Map < TYPE_1 , java.lang.Object > METHOD_1 ( java.lang.Object target ) { try { java.util.Map < TYPE_1 , java.lang.Object > VAR_1 = ( ( java.util.Map < TYPE_1 , java.lang.Object > ) ( VAR_2 . get ( target ) ) ) ; if ( VAR_1 == null ) { VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_2 . set ( target , VAR_1 ) ; } return VAR_1 ; } catch ( TYPE_3 VAR_3 ) { throw new TYPE_4 ( STRING_1 , VAR_3 ) ; } }\n"}
{"problem": "private void METHOD_1 ( ) { METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( VAR_2 ) ) { java.lang.String VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) . toUpperCase ( ) ; if ( VAR_3 . startsWith ( STRING_1 ) ) VAR_4 = new TYPE_1 ( ) ; else if ( VAR_3 . startsWith ( STRING_2 ) ) VAR_4 = new TYPE_2 ( ) ; else VAR_4 = new TYPE_3 ( ) ; } else VAR_4 = new TYPE_3 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( VAR_2 ) ) { java.lang.String VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) . toUpperCase ( ) ; if ( VAR_3 . startsWith ( STRING_1 ) ) VAR_4 = new TYPE_1 ( ) ; else if ( VAR_3 . startsWith ( STRING_2 ) ) VAR_4 = new TYPE_2 ( ) ; else VAR_4 = new TYPE_3 ( ) ; } else { if ( ( VAR_4 ) == null ) VAR_4 = new TYPE_3 ( ) ; } }\n"}
{"problem": "static void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { for ( int j = 0 ; j < ( VAR_1 . size ( ) ) ; j ++ ) { if ( i != j ) { TYPE_1 . METHOD_2 ( VAR_1 . get ( i ) , VAR_1 . get ( j ) ) ; } } } }\n", "fixed": "static void METHOD_1 ( ) { for ( int i = 0 ; i < ( ( VAR_1 . size ( ) ) - 1 ) ; i ++ ) { for ( int j = i + 1 ; j < ( VAR_1 . size ( ) ) ; j ++ ) { TYPE_1 . METHOD_2 ( VAR_1 . get ( i ) , VAR_1 . get ( j ) ) ; } } }\n"}
{"problem": "private void METHOD_1 ( java.lang.String fileName , boolean VAR_1 ) { try { java.lang.String VAR_2 = ( VAR_1 ) ? VAR_3 : VAR_4 ; java.lang.String VAR_5 = fileName . METHOD_2 ( ( ( VAR_6 ) + STRING_1 ) , ( VAR_2 + STRING_1 ) ) ; VAR_7 . METHOD_3 ( fileName , VAR_5 ) ; VAR_8 . METHOD_4 ( STRING_2 , fileName , ( VAR_1 ? STRING_3 : STRING_4 ) ) ; } catch ( java.lang.Exception VAR_9 ) { VAR_8 . METHOD_4 ( STRING_5 , fileName , VAR_9 ) ; } }\n", "fixed": "private void METHOD_1 ( java.lang.String fileName , boolean VAR_1 ) throws java.lang.Exception { try { java.lang.String VAR_2 = ( VAR_1 ) ? VAR_3 : VAR_4 ; java.lang.String VAR_5 = fileName . METHOD_2 ( ( ( VAR_6 ) + STRING_1 ) , VAR_2 ) ; VAR_7 . METHOD_3 ( fileName , VAR_5 ) ; VAR_8 . METHOD_4 ( STRING_2 , fileName , ( VAR_1 ? STRING_3 : STRING_4 ) ) ; } catch ( java.lang.Exception VAR_9 ) { VAR_8 . error ( STRING_5 , fileName , VAR_9 ) ; throw VAR_9 ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 ) ) { VAR_3 . METHOD_2 ( ) ; VAR_4 = true ; if ( ( VAR_5 . METHOD_3 ( ) ) < ( ( VAR_6 . size ( ) ) - 1 ) ) { VAR_5 . METHOD_4 ( ( ( VAR_5 . METHOD_3 ( ) ) + 1 ) , true ) ; METHOD_5 ( VAR_5 ) ; } else { VAR_7 = true ; VAR_8 . METHOD_6 ( 0 ) ; } } else { VAR_2 = false ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 ) ) { VAR_3 . METHOD_2 ( ) ; VAR_4 = true ; if ( ( VAR_5 . METHOD_3 ( ) ) < ( ( VAR_6 . size ( ) ) - 1 ) ) { VAR_5 . METHOD_4 ( ( ( VAR_5 . METHOD_3 ( ) ) + 1 ) , true ) ; METHOD_5 ( ) ; } else { VAR_7 = true ; VAR_8 . METHOD_6 ( 0 ) ; } } else { VAR_2 = false ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 < java.util.Properties > METHOD_1 ( ) { final java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_4 ( true ) ; VAR_2 . METHOD_5 ( new TYPE_4 ( STRING_1 ) ) ; VAR_2 . METHOD_5 ( new TYPE_4 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) ) ; return VAR_2 ; }\n", "fixed": "public TYPE_1 < java.util.Properties > METHOD_1 ( ) { final java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_4 ( true ) ; VAR_2 . METHOD_5 ( new TYPE_4 ( STRING_1 ) , new TYPE_4 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) ) ; return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 != null ) { java.util.HashMap < java.lang.String , java.util.ArrayList < TYPE_2 > > data = ( ( java.util.HashMap < java.lang.String , java.util.ArrayList < TYPE_2 > > ) ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) ; this . METHOD_3 ( data ) ; this . METHOD_4 ( ) ; } else { this . VAR_3 = new java.util.HashMap < > ( ) ; this . VAR_3 = new java.util.HashMap < > ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 != null ) { java.util.HashMap < java.lang.String , java.util.ArrayList < TYPE_2 > > data = ( ( java.util.HashMap < java.lang.String , java.util.ArrayList < TYPE_2 > > ) ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) ; this . METHOD_3 ( data ) ; this . METHOD_4 ( ) ; } }\n"}
{"problem": "private static java.util.Properties METHOD_1 ( java.io.File file ) { final java.util.Properties VAR_1 = new java.util.Properties ( ) ; java.io.FileInputStream VAR_2 = null ; try { VAR_2 = new java.io.FileInputStream ( file ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; } catch ( final java.io.IOException VAR_3 ) { java.lang.System.out.println ( ( STRING_1 + ( file . METHOD_3 ( ) ) ) ) ; VAR_3 . METHOD_4 ( TYPE_1 . out ) ; java.lang.System.exit ( 1 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_2 ) ; } return VAR_1 ; }\n", "fixed": "private static java.util.Properties METHOD_1 ( java.io.File file ) { final java.util.Properties VAR_1 = new java.util.Properties ( ) ; try ( final java.io.FileInputStream VAR_2 = new java.io.FileInputStream ( file ) ) { VAR_1 . METHOD_2 ( VAR_2 ) ; } catch ( final java.io.IOException VAR_3 ) { java.lang.System.out.println ( ( STRING_1 + ( file . METHOD_3 ( ) ) ) ) ; VAR_3 . METHOD_4 ( TYPE_1 . out ) ; java.lang.System.exit ( 1 ) ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "b0249470340022918fcc2b412e2347c4ba4ac7c5", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Binary Operator", "problem": "         final BodyGenerator generator = request.getBodyGenerator();\n         final Body bodyLocal = generator.createBody();\n         final long len = bodyLocal.getContentLength();\n        if (len > 0) {\n             requestPacket.setContentLengthLong(len);\n         } else {\n             requestPacket.setChunked(true);", "fixed": "         final BodyGenerator generator = request.getBodyGenerator();\n         final Body bodyLocal = generator.createBody();\n         final long len = bodyLocal.getContentLength();\n        if (len >= 0) {\n             requestPacket.setContentLengthLong(len);\n         } else {\n             requestPacket.setChunked(true);", "sourceBeforeFix": "len > 0", "sourceAfterFix": "len >= 0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private int METHOD_1 ( ) { return ( ( ( ( ( 1 + 1 ) + INT_1 ) + INT_2 ) + INT_3 ) + INT_4 ) + ( METHOD_2 ( ) ? ( INT_4 + INT_4 ) + INT_3 : ( INT_1 + INT_1 ) + INT_4 ) ; }\n", "fixed": "private int METHOD_1 ( ) { return ( ( ( ( ( ( 1 + 1 ) + INT_1 ) + INT_2 ) + INT_3 ) + ( + INT_4 ) ) + INT_4 ) + ( METHOD_2 ( ) ? ( INT_4 + INT_4 ) + INT_3 : ( INT_1 + INT_1 ) + INT_4 ) ; }\n"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n    logger.info(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);", "fixed": "    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);", "sourceBeforeFix": "logger.info(\"Remove try/catch/finally\")", "sourceAfterFix": "logger.fine(\"Remove try/catch/finally\")"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_5 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_6 ) ) ) ; if ( VAR_1 == null ) { METHOD_4 ( VAR_5 ) ; TYPE_4 VAR_7 = METHOD_5 ( ) . METHOD_6 ( ) ; VAR_7 . replace ( VAR_8 , new TYPE_5 ( ) ) ; VAR_7 . commit ( ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_5 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_6 ) ) ) ; METHOD_4 ( VAR_5 ) ; if ( VAR_1 == null ) { TYPE_4 VAR_7 = METHOD_5 ( ) . METHOD_6 ( ) ; VAR_7 . replace ( VAR_8 , new TYPE_5 ( ) ) ; VAR_7 . commit ( ) ; } }\n"}
{"problem": "public TYPE_1 < java.lang.String > METHOD_1 ( java.lang.String ... VAR_1 ) { int VAR_2 = METHOD_2 ( 0 , VAR_1 ) ; java.lang.String text = VAR_3 . substring ( 0 , VAR_2 ) . trim ( ) ; VAR_3 = VAR_3 . substring ( VAR_2 ) ; if ( text . isEmpty ( ) ) { return TYPE_1 . METHOD_3 ( ) ; } else { return TYPE_1 . METHOD_4 ( text ) ; } }\n", "fixed": "public TYPE_1 < java.lang.String > METHOD_1 ( java.lang.String ... VAR_1 ) { int VAR_2 = METHOD_2 ( 0 , VAR_1 ) ; VAR_2 = ( VAR_2 == ( - 1 ) ) ? VAR_3 . length ( ) : VAR_2 ; java.lang.String text = VAR_3 . substring ( 0 , VAR_2 ) . trim ( ) ; if ( text . isEmpty ( ) ) { return TYPE_1 . METHOD_3 ( ) ; } else { VAR_3 = VAR_3 . substring ( VAR_2 ) ; return TYPE_1 . METHOD_4 ( text ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { java.lang.String VAR_2 = VAR_3 . METHOD_2 ( ) . toString ( ) ; if ( VAR_2 . METHOD_3 ( STRING_1 ) ) { TYPE_2 . METHOD_4 ( VAR_4 . context , STRING_2 , VAR_5 ) . show ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { java.lang.String VAR_2 = VAR_3 . METHOD_2 ( ) . toString ( ) ; if ( VAR_2 . METHOD_3 ( STRING_1 ) ) { TYPE_2 . METHOD_4 ( context , STRING_2 , VAR_5 ) . show ( ) ; } }\n"}
{"fixCommitSHA1": "644b7c9e7c63b1967c205ee018f42c6a34c200be", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             }\n         }\n        return super.createDataFormat(camelContext);\n     }\n     @Override", "fixed": "             }\n         }\n        return super.doCreateDataFormat(camelContext);\n     }\n     @Override", "sourceBeforeFix": "super.createDataFormat(camelContext)", "sourceAfterFix": "super.doCreateDataFormat(camelContext)"}
{"fixCommitSHA1": "e78398ed32106c1c71bc47a1d5058fe3c8e5b9dd", "projectName": "pxb1988.dex2jar", "bugType": "Wrong Function Name", "problem": "         Type t2 = LocalType.type(e2.op1.value);\r\n         if (t2 == null && e2.op1.value.vt == VT.ARRAY) {\r\n             Type t3 = detectArray((E2Expr) e2.op1.value);\r\n            if (t3 != null && t3.getSize() == Type.ARRAY) {\r\n                 Type t4 = Type.getType(t3.getDescriptor().substring(1));\r\n                 LocalType.type(e2, t4);\r\n                 return t4;\r", "fixed": "         Type t2 = LocalType.type(e2.op1.value);\r\n         if (t2 == null && e2.op1.value.vt == VT.ARRAY) {\r\n             Type t3 = detectArray((E2Expr) e2.op1.value);\r\n            if (t3 != null && t3.getSort() == Type.ARRAY) {\r\n                 Type t4 = Type.getType(t3.getDescriptor().substring(1));\r\n                 LocalType.type(e2, t4);\r\n                 return t4;\r", "sourceBeforeFix": "t3.getSize()", "sourceAfterFix": "t3.getSort()"}
{"problem": "public static void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 ; java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( STRING_2 ) ; while ( ( VAR_1 . size ( ) ) > 0 ) { java.lang.System.out.print ( STRING_3 ) ; VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) == 0 ) { java.lang.System.out.println ( STRING_4 ) ; } else { java.lang.System.out.println ( STRING_5 ) ; } } }\n", "fixed": "public static void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 ; java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( STRING_2 ) ; while ( ( VAR_1 . size ( ) ) > 0 ) { java.lang.System.out.print ( STRING_3 ) ; VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) == 0 ) { java.lang.System.out.println ( STRING_4 ) ; } else { java.lang.System.out.println ( STRING_5 ) ; VAR_1 . remove ( VAR_2 ) ; } } }\n"}
{"problem": "public static void METHOD_1 ( android.content.Context context ) { final TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( context ) ; for ( TYPE_2 VAR_2 : VAR_1 . METHOD_3 ( ) ) { final int VAR_3 = VAR_2 . METHOD_4 ( ) ; if ( TYPE_3 . METHOD_5 ( context , VAR_3 ) ) { TYPE_3 . METHOD_6 ( context , VAR_2 . METHOD_4 ( ) ) ; } } }\n", "fixed": "public static void METHOD_1 ( android.content.Context context ) { final TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( context ) ; for ( TYPE_2 VAR_2 : VAR_1 . METHOD_3 ( ) ) { final int VAR_3 = VAR_2 . METHOD_4 ( ) ; TYPE_3 . METHOD_6 ( context , VAR_3 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( VAR_2 , STRING_1 ) ) . METHOD_4 ( this . VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( STRING_2 , new TYPE_3 ( STRING_3 ) ) ; TYPE_1 . METHOD_2 ( this . VAR_3 . METHOD_5 ( STRING_4 , VAR_5 , new java.lang.Object [ ] { } ) ) . METHOD_4 ( VAR_4 ) ; TYPE_4 . assertEquals ( VAR_4 , this . VAR_6 . METHOD_1 ( STRING_4 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( this . VAR_1 . METHOD_3 ( VAR_2 , STRING_1 ) ) . METHOD_4 ( this . VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( STRING_2 , new TYPE_3 ( STRING_3 ) ) ; METHOD_2 ( this . VAR_3 . METHOD_5 ( STRING_4 , VAR_5 , new java.lang.Object [ ] { } ) ) . METHOD_4 ( VAR_4 ) ; TYPE_4 . assertEquals ( VAR_4 , this . VAR_6 . METHOD_1 ( STRING_4 ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 += VAR_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ( STRING_1 + ( VAR_2 ) ) ) ; TYPE_2 . METHOD_3 ( ( STRING_2 + ( this . VAR_2 ) ) ) ; METHOD_4 ( this , VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 += VAR_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; TYPE_2 . METHOD_3 ( ( STRING_2 + ( this . VAR_2 ) ) ) ; METHOD_4 ( this , VAR_2 ) ; }\n"}
{"problem": "private static boolean METHOD_1 ( java.lang.Object value ) { if ( ! ( value instanceof TYPE_1 < ? > ) ) { return false ; } java.util.List < ? > list = ( ( java.util.ArrayList < ? > ) ( value ) ) ; for ( java.lang.Object VAR_1 : list ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) { return false ; } } return true ; }\n", "fixed": "private static boolean METHOD_1 ( java.lang.Object value ) { if ( ! ( value instanceof java.util.ArrayList < ? > ) ) { return false ; } java.util.List < ? > list = ( ( java.util.ArrayList < ? > ) ( value ) ) ; for ( java.lang.Object VAR_1 : list ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) { return false ; } } return true ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"problem": "private java.lang.Object [ ] METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( ) ; TYPE_4 VAR_4 = METHOD_4 ( VAR_2 ) ; return new java.lang.Object [ ] { VAR_2 , VAR_3 , VAR_4 , new TYPE_5 ( true ) } ; }\n", "fixed": "private java.lang.Object [ ] METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( ) ; TYPE_4 VAR_4 = METHOD_4 ( VAR_2 ) ; return new java.lang.Object [ ] { VAR_2 , VAR_3 , VAR_4 } ; }\n"}
{"problem": "void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 ) ) { message ( STRING_1 , false ) ; return ; } if ( ( VAR_3 ) || ( VAR_4 ) ) return ; VAR_4 = true ; message ( STRING_2 , true ) ; VAR_1 . METHOD_3 ( null ) ; VAR_1 . METHOD_4 ( new TYPE_1 ( ) { public void METHOD_5 ( ) { VAR_1 . METHOD_6 ( ) ; } } , INT_1 ) ; }\n", "fixed": "void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 ) ) { message ( STRING_1 , false ) ; return ; } if ( ( VAR_3 ) || ( VAR_4 ) ) return ; VAR_4 = true ; message ( STRING_2 , true ) ; VAR_1 . METHOD_3 ( null , INT_1 ) ; }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String VAR_2 ) { if ( ! ( ( VAR_3 . METHOD_2 ( VAR_1 ) ) && ( ( VAR_3 . get ( VAR_1 ) ) == ( VAR_4 ) ) ) ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_5 , STRING_1 , STRING_2 ) ; VAR_1 . METHOD_3 ( VAR_5 , STRING_3 , \"0\" ) ; } return VAR_1 ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String VAR_2 ) { if ( ! ( ( VAR_3 . METHOD_2 ( VAR_1 ) ) && ( ( VAR_3 . get ( VAR_1 ) ) == ( VAR_4 ) ) ) ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_5 , STRING_1 , STRING_2 ) ; } return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new java.util.ArrayList < > ( 1 ) ; VAR_2 . add ( VAR_1 ) ; } else if ( VAR_2 . contains ( VAR_1 ) ) { VAR_2 . set ( VAR_2 . METHOD_2 ( VAR_1 ) , VAR_1 ) ; } else { VAR_2 . add ( VAR_1 ) ; } }\n", "fixed": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new java.util.ArrayList < > ( ) ; VAR_2 . add ( VAR_1 ) ; } else if ( VAR_2 . contains ( VAR_1 ) ) { VAR_2 . get ( VAR_2 . METHOD_2 ( VAR_1 ) ) . update ( VAR_1 ) ; } else { VAR_2 . add ( VAR_1 ) ; } }\n"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KinesisEndpointBuilder\n             extends\n                 KinesisEndpointConsumerBuilder, KinesisEndpointProducerBuilder {\n         default AdvancedKinesisEndpointBuilder advanced() {", "fixed": "     \n    public interface KinesisEndpointBuilder\n             extends\n                 KinesisEndpointConsumerBuilder, KinesisEndpointProducerBuilder {\n         default AdvancedKinesisEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "bd2e348b7cb07ad4e855dac912c550e9799370e4", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     }\n    public static interface Echo {\n         Future<String> asText(int number);", "fixed": "     }\n    public interface Echo {\n         Future<String> asText(int number);", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( int i = 0 ; ( i < ( VAR_2 . size ( ) ) ) && ( ( VAR_3 [ i ] ) != null ) ; i ++ ) VAR_3 [ i ] . METHOD_2 ( false ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_3 ) != null ) for ( int i = 0 ; i < ( VAR_3 . size ( ) ) ; i ++ ) if ( ( VAR_3 . get ( i ) ) != null ) VAR_3 . get ( i ) . METHOD_2 ( false ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ( - 1 ) , STRING_1 , STRING_1 , STRING_1 ) ; VAR_1 . METHOD_2 ( this . VAR_2 ) ; VAR_1 . METHOD_3 ( this . VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_1 ) ; TYPE_3 VAR_5 = ( ( TYPE_3 ) ( TYPE_4 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( false ) ) ) ; VAR_5 . METHOD_7 ( STRING_2 , VAR_2 ) ; return VAR_4 . METHOD_8 ( ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ( - 1 ) , STRING_1 , STRING_1 , STRING_1 , STRING_1 , STRING_1 ) ; VAR_1 . METHOD_2 ( this . VAR_2 ) ; VAR_1 . METHOD_3 ( this . VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_1 ) ; TYPE_3 VAR_5 = ( ( TYPE_3 ) ( TYPE_4 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( false ) ) ) ; VAR_5 . METHOD_7 ( STRING_2 , VAR_2 ) ; return VAR_4 . METHOD_8 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( java.lang.Integer . METHOD_4 ( TYPE_2 . getText ( ) ) ) ; } catch ( java.lang.Exception VAR_1 ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( 0 ) ; } TYPE_1 . METHOD_2 ( ) . METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( java.lang.Integer.parseInt ( TYPE_2 . getText ( ) ) ) ; } catch ( java.lang.Exception VAR_1 ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( 0 ) ; } TYPE_1 . METHOD_2 ( ) . METHOD_5 ( ) ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; VAR_1 . add ( VAR_2 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( VAR_2 . METHOD_3 ( ) , 1 , VAR_3 , INT_1 , VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_2 . METHOD_3 ( ) , FLOAT_1 , VAR_3 , 1 , VAR_3 ) ; VAR_5 . METHOD_6 ( new TYPE_2 ( ) ) ; VAR_5 . METHOD_7 ( new TYPE_3 ( ) ) ; VAR_5 . METHOD_8 ( VAR_6 , VAR_7 , new TYPE_4 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; VAR_1 . add ( VAR_2 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( VAR_2 . METHOD_3 ( ) , 1 , VAR_3 , INT_1 , VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_2 . METHOD_3 ( ) , FLOAT_1 , VAR_3 , 1 , VAR_3 ) ; }\n"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"problem": "public void METHOD_1 ( TYPE_1 msg , java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = TYPE_2 . split ( msg . getText ( ) ) ; for ( java.lang.String VAR_3 : VAR_2 ) { this . VAR_4 . METHOD_1 ( VAR_1 , java.lang.String.format ( STRING_1 , msg . METHOD_2 ( ) . getClass ( ) . METHOD_3 ( ) , msg . METHOD_4 ( ) , msg . METHOD_5 ( ) , VAR_3 ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 msg , java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = TYPE_2 . split ( msg . getText ( ) ) ; for ( java.lang.String VAR_3 : VAR_2 ) { VAR_4 . METHOD_1 ( VAR_1 , java.lang.String.format ( STRING_1 , msg . METHOD_2 ( ) . getClass ( ) . METHOD_3 ( ) , msg . METHOD_4 ( ) , msg . METHOD_5 ( ) , VAR_3 ) ) ; } }\n"}
{"fixCommitSHA1": "5705c43fc67cbb1ebf19515e6676e4f68f299406", "projectName": "hazelcast.hazelcast", "bugType": "Change Boolean Literal", "problem": "         AbstractCacheService service = getService();\n         response = service.createCacheConfigIfAbsent(config);\n        if (createAlsoOnOthers && response == null) {\n             NodeEngine nodeEngine = getNodeEngine();\n             Collection<MemberImpl> members = nodeEngine.getClusterService().getMemberList();\n             int remoteNodeCount = members.size() - 1;", "fixed": "         AbstractCacheService service = getService();\n         response = service.createCacheConfigIfAbsent(config);\n        if (createAlsoOnOthers) {\n             NodeEngine nodeEngine = getNodeEngine();\n             Collection<MemberImpl> members = nodeEngine.getClusterService().getMemberList();\n             int remoteNodeCount = members.size() - 1;", "sourceBeforeFix": "new CacheCreateConfigOperation(config,true)", "sourceAfterFix": "new CacheCreateConfigOperation(config,false)"}
{"project": "Time", "bugId": 3, "problem": " public void setYear(final int year) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addYears(final int years) {\n             setMillis(getChronology().years().add(getMillis(), years));\n     }", "fixed": " public void setYear(final int year) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addYears(final int years) {\n        if (years != 0) {\n             setMillis(getChronology().years().add(getMillis(), years));\n        }\n     }", "observations": "The patches makes a type of \"bypass\" null check, where the logic is applyed only if the value is different of null.", "repairActions": ["condBranIfAdd"], "repairPatterns": ["copyPaste", "wrapsIf"]}
{"problem": "public TYPE_1 METHOD_1 ( ) { double VAR_1 ; double min = this . min ; double VAR_2 = this . VAR_2 ; VAR_1 = ( VAR_3 ) / FLOAT_1 ; double VAR_4 = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_2 ( min ) ) ) ) ) ) ; if ( VAR_2 > VAR_4 ) { min += VAR_1 ; VAR_2 -= VAR_1 ; } return new TYPE_1 ( min , VAR_2 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { double min = this . min ; double VAR_2 = this . VAR_2 ; double VAR_4 = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_2 ( min ) ) ) ) ) ) ; if ( VAR_2 > VAR_4 ) { double VAR_1 = ( VAR_3 ) / FLOAT_1 ; min += VAR_1 ; VAR_2 -= VAR_1 ; } return new TYPE_1 ( min , VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 response ) { VAR_2 = VAR_1 ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; if ( ( VAR_8 ) != null ) { VAR_8 . METHOD_2 ( VAR_3 ) ; } VAR_9 . METHOD_3 ( false ) ; }\n", "fixed": "public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 response ) { VAR_2 = VAR_1 ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; if ( ( VAR_8 ) != null ) { VAR_8 . METHOD_2 ( VAR_3 ) ; } if ( ( VAR_9 ) != null ) { VAR_9 . METHOD_3 ( false ) ; } }\n"}
{"problem": "private static java.lang.Long METHOD_1 ( int position ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_1 = TYPE_2 . METHOD_3 ( ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_4 ( position ) ; if ( VAR_2 == null ) return - 1L ; java.lang.Long id = ( ( long ) ( VAR_2 . METHOD_5 ( ) . toString ( ) . METHOD_6 ( ) ) ) ; return id ; }\n", "fixed": "private static java.lang.Long METHOD_1 ( int position ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_1 = TYPE_2 . METHOD_3 ( ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_4 ( position ) ; if ( VAR_2 == null ) return - 1L ; java.lang.String url = VAR_2 . METHOD_5 ( ) . toString ( ) ; return ( ( long ) ( url . METHOD_6 ( ) ) ) ; }\n"}
{"problem": "public < TYPE_1 > TYPE_1 METHOD_1 ( final TYPE_2 < TYPE_1 > VAR_1 , final TYPE_3 VAR_2 ) { if ( ( ( VAR_3 ) != null ) && ( VAR_1 == ( VAR_4 ) ) ) { return TYPE_4 . METHOD_2 ( VAR_5 . METHOD_3 ( VAR_3 , METHOD_4 ( ) ) ) ; } return super . METHOD_1 ( VAR_1 , VAR_2 ) ; }\n", "fixed": "public < TYPE_1 > TYPE_1 METHOD_1 ( final TYPE_2 < TYPE_1 > VAR_1 , final TYPE_3 VAR_2 ) { if ( ( ( VAR_3 ) != null ) && ( VAR_1 == ( VAR_4 ) ) ) { return TYPE_4 . METHOD_2 ( VAR_5 . METHOD_3 ( this , VAR_3 , METHOD_4 ( ) ) ) ; } return super . METHOD_1 ( VAR_1 , VAR_2 ) ; }\n"}
{"fixCommitSHA1": "159190a6d6e5b4c27a78d2dd2f4659b6fd7df20a", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "     }\n     public SpanStreamUdpSender(String host, int port, String threadName, int queueSize, int timeout, int sendBufferSize) {\n        this(host, port, threadName, queueSize, timeout, SEND_BUFFER_SIZE, DEFAULT_BUFFER_SIZE);\n     }\n     public SpanStreamUdpSender(String host, int port, String threadName, int queueSize, int timeout, int sendBufferSize, int dataBufferSize) {", "fixed": "     }\n     public SpanStreamUdpSender(String host, int port, String threadName, int queueSize, int timeout, int sendBufferSize) {\n        this(host, port, threadName, queueSize, timeout, sendBufferSize, DEFAULT_BUFFER_SIZE);\n     }\n     public SpanStreamUdpSender(String host, int port, String threadName, int queueSize, int timeout, int sendBufferSize, int dataBufferSize) {", "sourceBeforeFix": "this(host,port,threadName,queueSize,timeout,SEND_BUFFER_SIZE,DEFAULT_BUFFER_SIZE); ", "sourceAfterFix": "this(host,port,threadName,queueSize,timeout,sendBufferSize,DEFAULT_BUFFER_SIZE); "}
{"fixCommitSHA1": "97814491bc0e383e136612dea07af841c0121681", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     return mBlockIdsOnTiers;\n   }", "fixed": "    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n     return mBlockIdsOnTiers;\n   }", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 TYPE_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; java.lang.CharSequence VAR_3 = TYPE_2 . getText ( ) ; if ( ( VAR_4 [ 0 ] ) == true ) { VAR_3 = STRING_1 ; VAR_4 [ 0 ] = false ; } VAR_5 [ 0 ] = true ; TYPE_2 . setText ( ( VAR_3 + STRING_2 ) ) ; return ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 TYPE_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; java.lang.CharSequence VAR_3 = TYPE_2 . getText ( ) ; if ( VAR_4 [ 0 ] ) { VAR_3 = STRING_1 ; VAR_4 [ 0 ] = false ; } VAR_5 [ 0 ] = true ; TYPE_2 . setText ( ( VAR_3 + STRING_2 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.Integer index , boolean VAR_1 ) { TYPE_1 VAR_2 ; VAR_2 = this . VAR_3 . get ( index ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_1 ( index , 0 , 1 ) ; } VAR_2 . METHOD_2 ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.Integer index , boolean VAR_1 ) { TYPE_1 VAR_2 ; VAR_2 = VAR_3 . get ( index ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_1 ( index , 0 , 1 ) ; VAR_3 . put ( index , VAR_2 ) ; } VAR_2 . METHOD_2 ( VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , long position , byte [ ] VAR_2 , int VAR_3 , int VAR_4 ) { TYPE_2 VAR_5 = VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_6 = VAR_7 . get ( VAR_5 ) ; METHOD_3 ( VAR_1 , position , 0 ) ; METHOD_4 ( VAR_1 , position , VAR_4 ) ; VAR_1 . METHOD_2 ( ) . METHOD_5 ( position , VAR_2 , VAR_3 , VAR_4 ) ; VAR_6 . METHOD_6 ( VAR_1 , ( ( VAR_1 . METHOD_7 ( ) ) + VAR_4 ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , long position , byte [ ] VAR_2 , int VAR_3 , int VAR_4 ) { TYPE_2 VAR_5 = VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_6 = VAR_7 . get ( VAR_5 ) ; METHOD_3 ( VAR_1 , position , 0 ) ; METHOD_4 ( VAR_1 , position , VAR_4 ) ; VAR_5 . METHOD_5 ( position , VAR_2 , VAR_3 , VAR_4 ) ; VAR_6 . METHOD_6 ( VAR_1 , ( ( VAR_1 . METHOD_7 ( ) ) + VAR_4 ) ) ; }\n"}
{"problem": "private void METHOD_1 ( final TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; TYPE_3 VAR_4 = VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_4 VAR_5 = VAR_1 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( STRING_2 , VAR_5 . METHOD_5 ( ) ) . METHOD_4 ( STRING_3 , TYPE_5 . METHOD_6 ( VAR_1 . getId ( ) ) ) . METHOD_7 ( ) ; }\n", "fixed": "private int METHOD_1 ( final TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; TYPE_3 VAR_4 = VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_4 VAR_5 = VAR_1 . METHOD_3 ( ) ; return VAR_4 . METHOD_4 ( STRING_2 , VAR_5 . METHOD_5 ( ) ) . METHOD_4 ( STRING_3 , TYPE_5 . METHOD_6 ( VAR_1 . getId ( ) ) ) . METHOD_7 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 view , int VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 = VAR_3 ; VAR_5 = VAR_2 ; VAR_6 = VAR_1 ; TYPE_2 . METHOD_2 ( STRING_1 , ( ( ( java.lang.String . METHOD_3 ( VAR_6 ) ) + ( java.lang.String . METHOD_3 ( VAR_5 ) ) ) + ( java.lang.String . METHOD_3 ( VAR_4 ) ) ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 view , int VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 = VAR_3 ; VAR_5 = VAR_2 + 1 ; VAR_6 = VAR_1 ; TYPE_2 . METHOD_2 ( STRING_1 , ( ( ( java.lang.String . METHOD_3 ( VAR_6 ) ) + ( java.lang.String . METHOD_3 ( VAR_5 ) ) ) + ( java.lang.String . METHOD_3 ( VAR_4 ) ) ) ) ; }\n"}
{"fixCommitSHA1": "e90c2eeedb70da6a3ca0d27a048b4752a5dc16e1", "projectName": "google.closure-compiler", "bugType": "Same Function Swap Args", "problem": "         .insertBefore(error.node, \"!\")\n         .setDescription(\"Make type non-nullable\")\n         .build();\n    return ImmutableList.of(qmark, bang);\n   }\n   private static SuggestedFix removeNode(JSError error) {", "fixed": "         .insertBefore(error.node, \"!\")\n         .setDescription(\"Make type non-nullable\")\n         .build();\n    return ImmutableList.of(bang, qmark);\n   }\n   private static SuggestedFix removeNode(JSError error) {", "sourceBeforeFix": "ImmutableList.of(qmark,bang)", "sourceAfterFix": "ImmutableList.of(bang,qmark)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 15:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 15:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args)", "sourceAfterFix": "doInvoke(args)"}
{"fixCommitSHA1": "97b8bc59615d4da0c51a91fef22ab462a8d69766", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         final Object child = parseTree.getChild(tree, 1);\n         Assert.assertTrue(\"Invalid child type\", child instanceof DetailAST);\n         Assert.assertEquals(\"Invalid child token type\",\n                TokenTypes.BLOCK_COMMENT_BEGIN, ((AST) child).getType());\n     }\n     @Test", "fixed": "         final Object child = parseTree.getChild(tree, 1);\n         Assert.assertTrue(\"Invalid child type\", child instanceof DetailAST);\n         Assert.assertEquals(\"Invalid child token type\",\n                TokenTypes.BLOCK_COMMENT_BEGIN, ((DetailAST) child).getType());\n     }\n     @Test", "sourceBeforeFix": "(AST)child", "sourceAfterFix": "(DetailAST)child"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedTikaEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default TikaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedTikaEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default TikaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_1 VAR_3 = VAR_1 . METHOD_2 ( VAR_2 ) ; java.lang.System.out.println ( ( ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) + STRING_2 ) + VAR_3 ) ) ; VAR_3 = VAR_3 . METHOD_3 ( VAR_2 ) ; java.lang.System.out.println ( ( ( ( ( VAR_3 + STRING_3 ) + VAR_2 ) + STRING_2 ) + VAR_3 ) ) ; return VAR_3 . METHOD_4 ( VAR_1 ) ; }\n", "fixed": "public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_1 VAR_3 = VAR_1 . METHOD_2 ( VAR_2 ) ; java.lang.System.out.println ( ( ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) + STRING_2 ) + VAR_3 ) ) ; java.lang.System.out.print ( ( ( ( VAR_3 + STRING_3 ) + VAR_2 ) + STRING_2 ) ) ; VAR_3 = VAR_3 . METHOD_3 ( VAR_2 ) ; java.lang.System.out.println ( VAR_3 ) ; return VAR_3 . METHOD_4 ( VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( ! ( VAR_2 == null ) ) || ( ! ( VAR_4 ) ) ) { VAR_4 = true ; new TYPE_3 ( VAR_5 , VAR_2 , null ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( ! ( VAR_2 == null ) ) && ( ! ( VAR_4 ) ) ) { VAR_4 = true ; new TYPE_3 ( VAR_5 , VAR_2 , null ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_3 ( ) ; TYPE_4 VAR_2 = VAR_1 . METHOD_2 ( VAR_3 , new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 } ) ; TYPE_5 . assertTrue ( VAR_2 . METHOD_3 ( STRING_5 ) ) ; TYPE_5 . METHOD_4 ( VAR_2 . METHOD_5 ( STRING_5 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_3 ( ) ; TYPE_4 VAR_2 = VAR_1 . METHOD_2 ( VAR_3 , new java.lang.String [ ] { STRING_2 , STRING_3 , STRING_4 } ) ; TYPE_5 . assertTrue ( VAR_2 . METHOD_3 ( STRING_5 ) ) ; TYPE_5 . METHOD_4 ( VAR_2 . METHOD_5 ( STRING_5 ) ) ; }\n"}
{"problem": "protected boolean METHOD_1 ( double [ ] a , int [ ] VAR_1 , int VAR_2 , double [ ] VAR_3 , double [ ] VAR_4 ) { for ( int j = VAR_2 ; ( j -- ) > 0 ; ) VAR_4 [ VAR_1 [ j ] ] = ( a [ VAR_1 [ j ] ] ) + ( VAR_3 [ j ] ) ; return true ; }\n", "fixed": "protected void METHOD_1 ( double [ ] a , int [ ] VAR_1 , int VAR_2 , double [ ] VAR_3 , double [ ] VAR_4 ) { for ( int j = VAR_2 ; ( j -- ) > 0 ; ) VAR_4 [ VAR_1 [ j ] ] = ( a [ VAR_1 [ j ] ] ) + ( VAR_3 [ j ] ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_2 VAR_4 , TYPE_2 ... VAR_5 ) { if ( ! ( METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ) { throw new TYPE_3 ( VAR_1 , ( ( ( ( ( STRING_1 + ( java.util.Arrays.asList ( VAR_5 ) ) ) + STRING_2 ) + VAR_2 ) + STRING_3 ) + VAR_3 ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_2 VAR_4 , TYPE_2 ... VAR_5 ) { if ( ! ( METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ) { throw new TYPE_3 ( VAR_1 , ( ( ( ( ( STRING_1 + ( TYPE_3 . toString ( VAR_4 , VAR_5 ) ) ) + STRING_2 ) + VAR_2 ) + STRING_3 ) + VAR_3 ) ) ; } }\n"}
{"problem": "public int METHOD_1 ( TYPE_1 item ) { VAR_1 . add ( item ) ; java.util.Set < java.lang.String > VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , null ) ; VAR_2 . add ( item . METHOD_3 ( ) ) ; TYPE_2 VAR_5 = VAR_3 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( VAR_4 , VAR_2 ) ; VAR_5 . commit ( ) ; java.lang.System.out.println ( ( STRING_1 + ( VAR_2 . size ( ) ) ) ) ; return VAR_1 . METHOD_6 ( item ) ; }\n", "fixed": "public int METHOD_1 ( TYPE_1 item ) { VAR_1 . add ( item ) ; java.util.Set < java.lang.String > VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new java.util.HashSet < java.lang.String > ( ) ) ; VAR_2 . add ( item . METHOD_3 ( ) ) ; TYPE_2 VAR_5 = VAR_3 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( VAR_4 , VAR_2 ) ; VAR_5 . commit ( ) ; java.lang.System.out.println ( ( STRING_1 + ( VAR_2 . size ( ) ) ) ) ; return VAR_1 . METHOD_6 ( item ) ; }\n"}
{"problem": "VAR_1 ( ) { TYPE_1 k = METHOD_1 ( ) ; TYPE_2 [ ] VAR_2 = new TYPE_2 [ INT_1 ] ; assert VAR_3 = ( METHOD_2 ( ) ) == 0 ; VAR_4 = METHOD_3 ( VAR_2 ) ; assert VAR_3 = ( METHOD_2 ( ) ) == INT_1 ; }\n", "fixed": "VAR_1 ( ) { TYPE_1 k = METHOD_1 ( ) ; TYPE_2 [ ] VAR_2 = new TYPE_2 [ INT_1 ] ; assertTrue ( ( VAR_3 = ( METHOD_2 ( ) ) == 0 ) ) ; VAR_4 = METHOD_3 ( VAR_2 ) ; assertTrue ( ( VAR_3 = ( METHOD_2 ( ) ) == INT_1 ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( java.io.InputStream VAR_1 , TYPE_1 out , int VAR_2 ) throws java.io.IOException { byte [ ] VAR_3 = new byte [ VAR_2 <= 0 ? INT_1 * INT_2 : VAR_2 ] ; int VAR_4 ; while ( ( - 1 ) == ( VAR_4 = VAR_1 . METHOD_2 ( VAR_3 ) ) ) { out.write ( VAR_3 , 0 , VAR_4 ) ; } }\n", "fixed": "protected void METHOD_1 ( java.io.InputStream VAR_1 , TYPE_1 out , int VAR_2 ) throws java.io.IOException { byte [ ] VAR_3 = new byte [ VAR_2 <= 0 ? INT_1 * INT_2 : VAR_2 ] ; int VAR_4 ; while ( ( - 1 ) != ( VAR_4 = VAR_1 . METHOD_2 ( VAR_3 ) ) ) { out.write ( VAR_3 , 0 , VAR_4 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . init ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; TYPE_2 . METHOD_3 ( ) ; if ( VAR_2 ) { TYPE_4 . METHOD_4 ( ) ; TYPE_5 . METHOD_5 ( ) ; } TYPE_6 . METHOD_6 ( VAR_3 class , STRING_1 , 1 , VAR_4 , INT_1 , INT_2 , true ) ; TYPE_7 . METHOD_7 ( ) . METHOD_8 ( VAR_5 class , VAR_6 class ) ; TYPE_7 . METHOD_7 ( ) . METHOD_8 ( VAR_7 class , VAR_6 class ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . init ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; TYPE_2 . METHOD_3 ( ) ; if ( VAR_2 ) { TYPE_4 . METHOD_4 ( ) ; TYPE_5 . METHOD_5 ( ) ; } TYPE_6 . METHOD_6 ( VAR_3 class , STRING_1 , 1 , VAR_4 , INT_1 , INT_2 , true ) ; TYPE_7 . METHOD_8 ( VAR_5 class , VAR_6 class ) ; TYPE_7 . METHOD_8 ( VAR_7 class , VAR_6 class ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "5ac0dcd1b04e38a3dbe11a94897cc0a34ef2d5ec", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic void log (String tag, String message);\r\n \t\r\n\tpublic void log (String tag, String message, Exception exception);\r\n \t\r\n \tpublic void error (String tag, String message);\r", "fixed": " \tpublic void log (String tag, String message);\r\n \t\r\n\tpublic void log (String tag, String message, Throwable exception);\r\n \t\r\n \tpublic void error (String tag, String message);\r", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "Throwable exception"}
{"problem": "public java.util.Collection < java.lang.String > METHOD_1 ( ) { java.util.Set < java.lang.String > VAR_1 = new java.util.HashSet < java.lang.String > ( ) ; if ( ( VAR_2 ) != null ) { VAR_1 . METHOD_2 ( VAR_2 . METHOD_1 ( ) ) ; } VAR_1 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; return VAR_1 ; }\n", "fixed": "public java.util.Collection < java.lang.String > METHOD_1 ( ) { java.util.Set < java.lang.String > VAR_1 = new java.util.HashSet < java.lang.String > ( ) ; if ( ( VAR_2 ) != null ) { VAR_1 . METHOD_2 ( VAR_2 . METHOD_1 ( ) ) ; } VAR_1 . METHOD_2 ( VAR_3 . values ( ) ) ; return VAR_1 ; }\n"}
{"problem": "public int METHOD_1 ( java.lang.String [ ] VAR_1 , double [ ] VAR_2 , double VAR_3 ) throws java.lang.Exception { int [ ] VAR_4 = new int [ ] { 0 } ; long VAR_5 = VAR_6 . METHOD_2 ( obj , VAR_1 , VAR_2 , ( ( long ) ( VAR_1 . length ) ) , ( ( long ) ( VAR_2 . length ) ) , VAR_3 , VAR_4 ) ; TYPE_1 . METHOD_3 ( VAR_4 ) ; return ( ( int ) ( VAR_5 ) ) ; }\n", "fixed": "public int METHOD_1 ( java.lang.String [ ] VAR_1 , double [ ] VAR_2 , double VAR_3 ) throws java.lang.Exception { int [ ] VAR_4 = new int [ ] { 0 } ; long VAR_5 = VAR_6 . METHOD_2 ( obj , VAR_1 , VAR_2 , VAR_1 . length , VAR_2 . length , VAR_3 , VAR_4 ) ; TYPE_1 . METHOD_3 ( VAR_4 ) ; return ( ( int ) ( VAR_5 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ! ( this . VAR_1 . getText ( ) . equals ( STRING_1 ) ) ) { try { VAR_2 . METHOD_2 ( ( ( ( TYPE_1 . METHOD_3 ( ) . getName ( ) ) + STRING_2 ) + ( this . VAR_1 . getText ( ) ) ) ) ; } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } this . VAR_1 . setText ( STRING_1 ) ; this . VAR_1 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ! ( this . VAR_1 . getText ( ) . equals ( STRING_1 ) ) ) { try { java.lang.String msg = ( ( TYPE_1 . METHOD_3 ( ) . getName ( ) ) + STRING_2 ) + ( this . VAR_1 . getText ( ) ) ; VAR_2 . METHOD_2 ( msg ) ; } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } this . VAR_1 . setText ( STRING_1 ) ; this . VAR_1 . METHOD_5 ( ) ; } }\n"}
{"problem": "private void METHOD_1 ( ) { this . VAR_1 = new TYPE_1 ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( getActivity ( ) ) ; VAR_3 . METHOD_2 ( this ) ; VAR_3 . METHOD_3 ( this . VAR_1 ) ; this . VAR_2 . METHOD_4 ( VAR_3 , this . VAR_1 ) ; }\n", "fixed": "private void METHOD_1 ( ) { this . VAR_1 = new TYPE_1 ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( getActivity ( ) ) ; VAR_3 . METHOD_2 ( this ) ; VAR_3 . METHOD_3 ( this . VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_3 , this . VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , new TYPE_2 ( STRING_2 , VAR_2 , null ) ) ; VAR_2 . add ( VAR_1 ) ; assertEquals ( STRING_3 , STRING_4 , VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_3 = new TYPE_1 ( STRING_5 , new TYPE_2 ( STRING_2 , ( ( TYPE_3 ) ( null ) ) , null ) ) ; VAR_2 . add ( VAR_3 ) ; assertEquals ( STRING_3 , STRING_6 , VAR_3 . METHOD_2 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , new TYPE_2 ( STRING_2 , VAR_2 ) ) ; VAR_2 . add ( VAR_1 ) ; assertEquals ( STRING_3 , STRING_4 , VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_3 = new TYPE_1 ( STRING_5 , new TYPE_2 ( STRING_2 ) ) ; VAR_2 . add ( VAR_3 ) ; assertEquals ( STRING_3 , STRING_6 , VAR_3 . METHOD_2 ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = this . METHOD_2 ( ) ; if ( VAR_1 != null ) { if ( VAR_2 != null ) { if ( ( VAR_1 . METHOD_3 ( ) ) > ( VAR_2 . METHOD_3 ( ) ) ) { this . METHOD_4 ( VAR_1 ) ; } } else { this . METHOD_4 ( VAR_1 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; if ( VAR_1 != null ) { if ( VAR_2 != null ) { if ( ( VAR_1 . METHOD_3 ( ) ) > ( VAR_2 . METHOD_3 ( ) ) ) { METHOD_4 ( VAR_1 ) ; } } else { METHOD_4 ( VAR_1 ) ; } } }\n"}
{"problem": "public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; java.lang.String VAR_3 = ( ( ( ( ( VAR_4 ) + STRING_1 ) + ( VAR_5 . METHOD_3 ( ) ) ) + STRING_2 ) + ( VAR_6 ) ) + STRING_3 ; VAR_1 . METHOD_4 ( VAR_7 , VAR_3 ) ; VAR_1 . METHOD_5 ( STRING_4 ) ; view . getContext ( ) . METHOD_6 ( android.content.Intent . METHOD_7 ( VAR_1 , STRING_5 ) ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; java.lang.String VAR_3 = ( ( ( ( ( VAR_4 . getText ( ) ) + STRING_1 ) + ( VAR_5 . METHOD_3 ( ) ) ) + STRING_2 ) + ( VAR_6 ) ) + STRING_3 ; VAR_1 . METHOD_4 ( VAR_7 , VAR_3 ) ; VAR_1 . METHOD_5 ( STRING_4 ) ; view . getContext ( ) . METHOD_6 ( android.content.Intent . METHOD_7 ( VAR_1 , STRING_5 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( java.util.List < TYPE_1 > list , java.lang.String key ) { for ( TYPE_1 VAR_1 : list ) { VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_3 . METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; } java.util.Map < java.lang.String , TYPE_2 > VAR_4 = VAR_3 . METHOD_5 ( key ) ; java.util.Collection < TYPE_2 > VAR_5 = VAR_4 . values ( ) ; VAR_6 = TYPE_3 . METHOD_6 ( VAR_5 ) ; }\n", "fixed": "public void METHOD_1 ( java.util.List < TYPE_1 > list , java.lang.String key ) { for ( TYPE_1 VAR_1 : list ) { VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_3 . METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; } java.util.Map < java.lang.String , TYPE_2 > VAR_4 = VAR_3 . METHOD_5 ( key ) ; java.util.Collection < TYPE_2 > VAR_5 = VAR_4 . values ( ) ; VAR_6 = TYPE_3 . METHOD_6 ( VAR_5 ) ; this . key = key ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_1 [ ] nodes = ( ( TYPE_1 [ ] ) ( VAR_1 . values ( ) . METHOD_2 ( new TYPE_1 [ VAR_1 . size ( ) ] ) ) ) ; assert ( nodes . length ) > 0 ; double VAR_2 = nodes [ 0 ] . VAR_3 ; TYPE_1 VAR_4 = nodes [ 0 ] ; for ( TYPE_1 node : nodes ) { if ( ( VAR_5 ) > VAR_2 ) { VAR_2 = VAR_5 ; VAR_4 = node ; } } return VAR_4 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { TYPE_1 [ ] nodes = ( ( TYPE_1 [ ] ) ( VAR_1 . values ( ) . METHOD_2 ( new TYPE_1 [ VAR_1 . size ( ) ] ) ) ) ; assert ( nodes . length ) > 0 ; double VAR_2 = nodes [ 0 ] . VAR_3 ; TYPE_1 VAR_4 = nodes [ 0 ] ; for ( TYPE_1 node : nodes ) { if ( ( VAR_5 ) < VAR_2 ) { VAR_2 = VAR_5 ; VAR_4 = node ; } } return VAR_4 ; }\n"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Caller in Function Call", "problem": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "fixed": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,mainRoot)", "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,mainRoot)"}
{"problem": "TYPE_1 METHOD_1 ( TYPE_2 path ) { try { if ( ! ( TYPE_3 . METHOD_2 ( path ) ) ) return VAR_1 ; if ( ( VAR_2 ) && ( TYPE_3 . METHOD_3 ( path ) ) ) return VAR_1 ; if ( ( METHOD_4 ( ) ) == 0 ) return VAR_3 ; return VAR_4 ; } catch ( java.lang.Exception VAR_5 ) { TYPE_4 . METHOD_5 ( VAR_5 ) ; return VAR_1 ; } }\n", "fixed": "TYPE_1 METHOD_1 ( TYPE_2 path ) { try { if ( ! ( TYPE_3 . METHOD_2 ( path ) ) ) return VAR_1 ; if ( ( VAR_2 ) && ( METHOD_3 ( path ) ) ) return VAR_1 ; if ( ( METHOD_4 ( ) ) == 0 ) return VAR_3 ; return VAR_4 ; } catch ( java.lang.Exception VAR_5 ) { TYPE_4 . METHOD_5 ( VAR_5 ) ; return VAR_1 ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( false ) ; if ( VAR_2 != null ) { java.io.File VAR_3 = METHOD_3 ( VAR_4 . get ( VAR_2 ) . getName ( ) ) ; if ( VAR_3 != null ) new TYPE_2 ( STRING_1 , VAR_4 . get ( VAR_2 ) . METHOD_4 ( ) , VAR_3 . METHOD_4 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( false ) ; if ( VAR_2 != null ) { java.io.File VAR_3 = METHOD_3 ( VAR_4 . get ( VAR_2 ) . getName ( ) ) ; if ( VAR_3 != null ) new TYPE_2 ( STRING_1 , VAR_3 . METHOD_4 ( ) , VAR_4 . get ( VAR_2 ) . METHOD_4 ( ) ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_2 VAR_3 = this . VAR_4 . get ( VAR_1 ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; for ( TYPE_1 VAR_5 : VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) { if ( ( VAR_1 . METHOD_5 ( ) . get ( VAR_5 ) ) == VAR_3 ) { return VAR_5 ; } } throw new TYPE_4 ( ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_2 VAR_3 = this . VAR_4 . get ( VAR_1 ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) , VAR_1 ) ; for ( TYPE_1 VAR_5 : VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) { if ( ( VAR_1 . METHOD_5 ( ) . get ( VAR_5 ) ) == VAR_3 ) { return VAR_5 ; } } throw new TYPE_4 ( ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( java.lang.Class < ? > type ) { for ( java.lang.Class < ? > VAR_1 : METHOD_2 ( ) . METHOD_3 ( ) ) { if ( VAR_1 . METHOD_4 ( type ) ) { return METHOD_2 ( ) . get ( VAR_1 ) ; } } return null ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.lang.Class < ? > type ) { if ( type != null ) { for ( java.lang.Class < ? > VAR_1 : METHOD_2 ( ) . METHOD_3 ( ) ) { if ( VAR_1 . METHOD_4 ( type ) ) { return METHOD_2 ( ) . get ( VAR_1 ) ; } } } return null ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TelegramEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTelegramEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface TelegramEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTelegramEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private void METHOD_1 ( ) { java.util.HashMap < java.lang.String , TYPE_1 > nodes = TYPE_1 . METHOD_2 ( this , ( ( long ) ( VAR_1 . get ( VAR_2 ) ) ) ) ; if ( ( nodes . size ( ) ) >= 1 ) { METHOD_3 ( ) ; } METHOD_4 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { java.util.HashMap < java.lang.String , TYPE_1 > nodes = TYPE_1 . METHOD_2 ( this , ( ( long ) ( VAR_1 . get ( VAR_2 ) ) ) ) ; if ( ( nodes . size ( ) ) >= 1 ) { METHOD_3 ( ) ; } else { METHOD_4 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_1 . METHOD_2 ( STRING_3 , \"true\" ) ; TYPE_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; TYPE_3 VAR_1 = new TYPE_3 ( null , new TYPE_4 ( VAR_2 ) , STRING_4 ) ; VAR_1 . METHOD_5 ( true ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { TYPE_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; TYPE_3 VAR_1 = new TYPE_3 ( null , new TYPE_4 ( VAR_2 ) , STRING_4 ) ; VAR_1 . METHOD_5 ( true ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_6 ( ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String name ) { boolean contains = false ; VAR_1 = VAR_2 ; for ( int i = 0 ; i < ( size ) ; i ++ ) { int equals = VAR_1 . getName ( ) . METHOD_2 ( name ) ; if ( equals == 0 ) contains = true ; VAR_1 = VAR_1 . METHOD_3 ( ) ; } return contains ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String name ) { boolean contains = false ; VAR_1 = VAR_2 ; for ( int i = 0 ; i < ( ( size ) - 1 ) ; i ++ ) { int equals = VAR_1 . getName ( ) . METHOD_2 ( name ) ; if ( equals == 0 ) contains = true ; VAR_1 = VAR_1 . METHOD_3 ( ) ; } return contains ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { int VAR_4 = ( ( VAR_1 == null ) || ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) ) ? 0 : VAR_1 . METHOD_3 ( 0 ) . METHOD_4 ( ) ; VAR_5 . setEnabled ( ( VAR_4 == 0 ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { int VAR_4 = ( ( VAR_1 == null ) || ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) ) ? 0 : VAR_1 . METHOD_3 ( 0 ) . METHOD_4 ( ) ; VAR_5 . setEnabled ( ( VAR_4 >= 0 ) ) ; }\n"}
{"problem": "public static java.lang.String METHOD_1 ( int VAR_1 , int VAR_2 ) { int length = TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( ( ( char ) ( TYPE_1 . METHOD_2 ( INT_1 , INT_2 ) ) ) ) ; for ( int i = 0 ; i < ( length - 1 ) ; i ++ ) { VAR_3 . append ( ( ( char ) ( TYPE_1 . METHOD_2 ( INT_3 , INT_4 ) ) ) ) ; } return VAR_3 . toString ( ) ; }\n", "fixed": "public static java.lang.String METHOD_1 ( int VAR_1 , int VAR_2 ) { int length = TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( ) . append ( ( ( char ) ( TYPE_1 . METHOD_2 ( INT_1 , INT_2 ) ) ) ) ; for ( int i = 0 ; i < ( length - 1 ) ; i ++ ) { VAR_3 . append ( ( ( char ) ( TYPE_1 . METHOD_2 ( INT_3 , INT_4 ) ) ) ) ; } return VAR_3 . toString ( ) ; }\n"}
{"problem": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( METHOD_3 ( ) ) ; try { VAR_1 . METHOD_4 ( ) ; } finally { this . METHOD_5 ( new TYPE_3 ( null , VAR_2 . METHOD_6 ( ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( METHOD_3 ( ) ) ; try { VAR_1 . METHOD_4 ( ) ; } finally { this . METHOD_5 ( new TYPE_3 ( VAR_3 , VAR_2 . METHOD_6 ( ) ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 p : VAR_2 ) { if ( ! ( p . METHOD_2 ( ) . toLowerCase ( ) . contains ( VAR_1 . toLowerCase ( ) ) ) ) { for ( TYPE_2 VAR_3 : VAR_4 ) { if ( VAR_3 . METHOD_3 ( ) . equals ( p . METHOD_2 ( ) ) ) { VAR_3 . METHOD_4 ( false ) ; } } } } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( line ) != null ) { line . remove ( ) ; } for ( TYPE_1 p : VAR_2 ) { if ( ! ( p . METHOD_2 ( ) . toLowerCase ( ) . contains ( VAR_1 . toLowerCase ( ) ) ) ) { for ( TYPE_2 VAR_3 : VAR_4 ) { if ( VAR_3 . METHOD_3 ( ) . equals ( p . METHOD_2 ( ) ) ) { VAR_3 . METHOD_4 ( false ) ; } } } } }\n"}
{"problem": "private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , java.lang.Boolean VAR_3 ) { java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 VAR_5 : METHOD_2 ( VAR_1 , VAR_2 ) ) { TYPE_3 VAR_6 = ( ( TYPE_3 ) ( VAR_5 ) ) ; if ( ( VAR_6 . METHOD_3 ( ) ) == VAR_3 ) { VAR_4 . add ( VAR_6 ) ; } } return VAR_4 ; }\n", "fixed": "private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , java.lang.Boolean VAR_3 ) { java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 VAR_5 : METHOD_2 ( VAR_1 , VAR_2 ) ) { TYPE_3 VAR_6 = ( ( TYPE_3 ) ( VAR_5 ) ) ; if ( VAR_6 . METHOD_3 ( ) . equals ( VAR_3 ) ) { VAR_4 . add ( VAR_6 ) ; } } return VAR_4 ; }\n"}
{"problem": "public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 < TYPE_1 > list ( TYPE_2 . METHOD_2 ( ) ) ; VAR_1 . add ( TYPE_2 . METHOD_3 ( ) ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_3 . METHOD_4 ( VAR_4 ) ; } VAR_5 = ( TYPE_3 . METHOD_5 ( STRING_1 ) ) + STRING_2 ; }\n", "fixed": "public static void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 < TYPE_1 > list ( TYPE_2 . METHOD_2 ( ) ) ; VAR_1 . add ( TYPE_2 . METHOD_3 ( ) ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_3 . METHOD_4 ( VAR_4 ) ; } }\n"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"problem": "public void METHOD_1 ( ) { try { synchronized ( VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; } } } catch ( java.lang.Exception VAR_4 ) { TYPE_2 . METHOD_3 ( VAR_5 , STRING_1 , VAR_4 ) ; throw new TYPE_3 ( VAR_4 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { synchronized ( VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; } } } catch ( java.lang.Exception VAR_4 ) { TYPE_2 . METHOD_3 ( VAR_5 , STRING_1 , VAR_4 , this ) ; throw new TYPE_3 ( VAR_4 ) ; } }\n"}
{"problem": "static short METHOD_1 ( int value ) { return ( ( short ) ( ( ( ( ( VAR_1 . METHOD_2 ( ( value & INT_1 ) ) ) < < INT_2 ) | ( ( VAR_1 . METHOD_2 ( ( ( value > > INT_3 ) & INT_1 ) ) ) < < INT_4 ) ) | ( ( VAR_1 . METHOD_2 ( ( ( value > > INT_4 ) & INT_1 ) ) ) < < INT_3 ) ) | ( VAR_1 . METHOD_2 ( ( value > > INT_2 ) ) ) ) ) ; }\n", "fixed": "static short METHOD_1 ( int value ) { return ( ( short ) ( ( ( ( ( VAR_1 [ ( value & INT_1 ) ] ) < < INT_2 ) | ( ( VAR_1 [ ( ( value > > INT_3 ) & INT_1 ) ] ) < < INT_4 ) ) | ( ( VAR_1 [ ( ( value > > INT_4 ) & INT_1 ) ] ) < < INT_3 ) ) | ( VAR_1 [ ( value > > INT_2 ) ] ) ) ) ; }\n"}
{"problem": "public int METHOD_1 ( int VAR_1 , int VAR_2 ) { int min = TYPE_1 . min ( VAR_1 , VAR_2 ) ; int VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; int diff = VAR_3 - min ; if ( diff <= 0 ) { return min ; } return min + ( METHOD_3 ( diff ) ) ; }\n", "fixed": "public int METHOD_1 ( int VAR_1 , int VAR_2 ) { int min = TYPE_1 . min ( VAR_1 , VAR_2 ) ; int VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; int diff = java.lang.Math.abs ( ( VAR_3 - min ) ) ; return min + ( METHOD_3 ( diff ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , TYPE_3 . METHOD_3 ( ) ) ; boolean VAR_3 = VAR_2 . METHOD_4 ( ( ( VAR_4 ) + ( VAR_1 . METHOD_5 ( ) ) ) ) ; if ( ! VAR_3 ) { java.lang.System.out.println ( STRING_1 ) ; return false ; } TYPE_4 . METHOD_6 ( ) . add ( VAR_1 ) ; return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , TYPE_3 . METHOD_3 ( ) ) ; if ( ( VAR_1 . METHOD_5 ( ) ) != null ) { boolean VAR_3 = VAR_2 . METHOD_4 ( ( ( VAR_4 ) + ( VAR_1 . METHOD_5 ( ) ) ) ) ; if ( ! VAR_3 ) { java.lang.System.out.println ( STRING_1 ) ; return false ; } } TYPE_4 . METHOD_6 ( ) . add ( VAR_1 ) ; return true ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MailEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMailEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface MailEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMailEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( false ) ; VAR_3 . METHOD_3 ( true ) ; VAR_4 . METHOD_3 ( false ) ; VAR_5 . METHOD_3 ( false ) ; VAR_6 . METHOD_3 ( false ) ; VAR_7 . METHOD_3 ( false ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_3 ( false ) ; VAR_3 . METHOD_3 ( true ) ; VAR_4 . METHOD_3 ( false ) ; VAR_5 . METHOD_3 ( false ) ; VAR_6 . METHOD_3 ( false ) ; VAR_7 . METHOD_3 ( false ) ; METHOD_2 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_2 < TYPE_1 > results = VAR_2 . query ( new TYPE_3 < TYPE_1 > ( ) { public boolean METHOD_2 ( TYPE_1 VAR_3 ) { return ( VAR_3 . METHOD_3 ( ) ) == false ; } } ) ; for ( TYPE_1 b : results ) { VAR_1 . add ( b ) ; } return VAR_1 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_2 < TYPE_1 > result = VAR_2 . query ( new TYPE_3 < TYPE_1 > ( ) { public boolean METHOD_2 ( TYPE_1 VAR_3 ) { return ( VAR_3 . METHOD_3 ( ) ) == false ; } } ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "projectName": "cucumber.cucumber-jvm", "bugType": "Wrong Function Name", "problem": "         RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);\n         RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();\n        assertFalse(runtimeOptions.isMonochrome());\n     }", "fixed": "         RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);\n         RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();\n        assertTrue(runtimeOptions.isMonochrome());\n     }", "sourceBeforeFix": "assertFalse(runtimeOptions.isMonochrome())", "sourceAfterFix": "assertTrue(runtimeOptions.isMonochrome())"}
{"problem": "public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_1 ( id , VAR_3 ) ; if ( VAR_1 != null ) { VAR_4 = false ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ; METHOD_5 ( VAR_5 . METHOD_6 ( ) ) ; METHOD_7 ( VAR_5 . METHOD_8 ( ) ) ; METHOD_9 ( VAR_5 . METHOD_10 ( ) ) ; METHOD_11 ( VAR_5 . METHOD_12 ( ) ) ; java.lang.System.out.println ( VAR_5 . METHOD_10 ( ) ) ; return STRING_1 ; } VAR_4 = true ; return STRING_2 ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { VAR_5 = VAR_2 . METHOD_1 ( id , VAR_3 ) ; if ( ( VAR_5 ) != null ) { VAR_4 = false ; METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ; METHOD_5 ( VAR_5 . METHOD_6 ( ) ) ; METHOD_7 ( VAR_5 . METHOD_8 ( ) ) ; METHOD_9 ( VAR_5 . METHOD_10 ( ) ) ; METHOD_11 ( VAR_5 . METHOD_12 ( ) ) ; java.lang.System.out.println ( VAR_5 . METHOD_10 ( ) ) ; return STRING_1 ; } VAR_4 = true ; return STRING_2 ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"problem": "public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { int VAR_3 = ( ( ( VAR_1 . METHOD_2 ( ) . size ( ) ) - ( VAR_1 . METHOD_3 ( ) ) ) - ( VAR_2 . METHOD_2 ( ) . size ( ) ) ) + ( VAR_2 . METHOD_3 ( ) ) ; return VAR_3 != 0 ? VAR_3 : ( VAR_1 . METHOD_4 ( ) ) - ( VAR_2 . METHOD_4 ( ) ) ; }\n", "fixed": "public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { int VAR_3 = ( ( ( VAR_1 . METHOD_2 ( ) . size ( ) ) - ( VAR_1 . METHOD_3 ( ) ) ) - ( VAR_2 . METHOD_2 ( ) . size ( ) ) ) + ( VAR_2 . METHOD_3 ( ) ) ; return VAR_3 != 0 ? VAR_3 : 1 ; }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 ; VAR_3 = new TYPE_3 ( ) ; TYPE_4 VAR_4 = VAR_1 ; TYPE_5 . METHOD_1 ( STRING_1 ) ; TYPE_5 . METHOD_2 ( VAR_4 , INT_1 ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 = new TYPE_3 ( ) ; TYPE_4 VAR_4 = VAR_2 ; TYPE_5 . METHOD_1 ( STRING_1 ) ; TYPE_5 . METHOD_2 ( VAR_4 , INT_1 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected java.util.Map < java.lang.String , java.io.File > METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return new java.util.HashMap < > ( ) ; } return TYPE_1 . METHOD_2 ( VAR_1 . split ( STRING_1 ) ) . METHOD_3 ( ( VAR_2 ) - > VAR_2 . split ( STRING_2 ) ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ( VAR_3 ) - > VAR_3 [ 0 ] , ( VAR_3 ) - > new java.io.File ( VAR_3 [ 1 ] ) ) ) ; }\n", "fixed": "java.util.Map < java.lang.String , java.io.File > METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return new java.util.HashMap < > ( ) ; } return TYPE_1 . METHOD_2 ( VAR_1 . split ( STRING_1 ) ) . METHOD_3 ( ( VAR_2 ) - > VAR_2 . split ( STRING_2 ) ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ( VAR_3 ) - > VAR_3 [ 0 ] , ( VAR_3 ) - > new java.io.File ( VAR_3 [ 1 ] ) ) ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , java.util.Map < TYPE_2 , TYPE_3 > VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 result = new TYPE_5 ( STRING_1 , VAR_3 . METHOD_2 ( ) ) ; java.util.List < TYPE_6 > VAR_4 = VAR_3 . METHOD_3 ( result ) ; VAR_4 . add ( new TYPE_7 ( VAR_1 . METHOD_4 ( ) , result ) ) ; return VAR_5 . METHOD_5 ( VAR_4 ) . METHOD_6 ( ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , java.util.Map < TYPE_2 , TYPE_3 > VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 result = new TYPE_5 ( STRING_1 , VAR_3 . METHOD_2 ( ) ) ; java.util.List < TYPE_6 > VAR_4 = VAR_3 . METHOD_3 ( result ) ; VAR_4 . add ( new TYPE_7 ( VAR_1 . METHOD_4 ( VAR_2 ) , result ) ) ; return VAR_5 . METHOD_5 ( VAR_4 ) . METHOD_6 ( ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this , VAR_2 , this . VAR_3 , VAR_4 . METHOD_2 ( ) ) ; TYPE_2 VAR_5 = new TYPE_2 ( STRING_1 , new TYPE_3 ( ) , null ) ; VAR_1 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ; return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this , VAR_2 , this . VAR_3 , VAR_4 . METHOD_2 ( ) ) ; TYPE_2 VAR_5 = new TYPE_2 ( STRING_1 , new TYPE_3 ( ) , null , VAR_4 ) ; VAR_1 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ; return VAR_1 ; }\n"}
{"problem": "public double METHOD_1 ( ) { int VAR_1 = 0 ; double count = 0.0 ; for ( int i = 0 ; i < ( data . length ) ; i ++ ) { if ( ( data [ i ] ) != ( - 1 ) ) { VAR_1 += data [ i ] ; } else { count ++ ; } } return VAR_1 / ( ( data . length ) - count ) ; }\n", "fixed": "public double METHOD_1 ( ) { double sum = 0 ; int count = 0 ; for ( int i = 0 ; i < ( data . length ) ; i ++ ) { if ( ( data [ i ] ) != ( - 1 ) ) { sum += data [ i ] ; count ++ ; } } return sum / count ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { try { for ( java.lang.String VAR_2 : VAR_1 . split ( STRING_1 ) ) if ( METHOD_2 ( VAR_2 ) ) this . VAR_3 . add ( new TYPE_1 ( VAR_2 ) ) ; } catch ( TYPE_2 VAR_4 ) { throw new TYPE_3 ( VAR_4 ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { try { for ( java.lang.String VAR_2 : VAR_1 . split ( STRING_1 ) ) this . VAR_3 . add ( new TYPE_1 ( VAR_2 ) ) ; } catch ( TYPE_2 VAR_4 ) { throw new TYPE_3 ( VAR_4 ) ; } }\n"}
{"problem": "public void build ( ) { VAR_1 . METHOD_1 ( STRING_1 ) ; TYPE_1 VAR_2 = METHOD_2 ( ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( INT_1 , INT_2 , INT_1 ) ; TYPE_3 VAR_4 = VAR_5 . METHOD_4 ( ) ; if ( ( VAR_6 ) != null ) { VAR_6 . METHOD_5 ( ) . METHOD_6 ( new TYPE_4 ( VAR_3 . METHOD_7 ( ) ) ) ; } VAR_1 . METHOD_1 ( STRING_2 ) ; }\n", "fixed": "public void build ( ) { VAR_1 . METHOD_1 ( STRING_1 ) ; TYPE_1 VAR_2 = METHOD_2 ( ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( INT_1 , INT_2 , INT_1 ) ; TYPE_3 VAR_4 = VAR_5 . METHOD_4 ( ) ; if ( ( VAR_6 ) != null ) { VAR_6 . METHOD_5 ( ) . METHOD_6 ( new TYPE_4 ( VAR_3 . METHOD_7 ( VAR_4 ) ) ) ; } VAR_1 . METHOD_1 ( STRING_2 ) ; }\n"}
{"fixCommitSHA1": "d76ba8118cca9f2f1c4f0e89e2dd15a9db02f7e8", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\t\t\t\ty = (int)event.getY(pointerIndex);\r\n \t\t\t\t\trealPointerIndex = input.lookUpPointerIndex(pointerId);\r\n \t\t\t\t\tif (realPointerIndex == -1) continue;\r\n\t\t\t\t\tif (realPointerIndex > AndroidInput.NUM_TOUCHES) break;\r\n \t\t\t\t\tpostTouchEvent(input, TouchEvent.TOUCH_DRAGGED, x, y, realPointerIndex, timeStamp);\r\n \t\t\t\t\tinput.deltaX[realPointerIndex] = x - input.touchX[realPointerIndex];\r\n \t\t\t\t\tinput.deltaY[realPointerIndex] = y - input.touchY[realPointerIndex];\r", "fixed": " \t\t\t\t\ty = (int)event.getY(pointerIndex);\r\n \t\t\t\t\trealPointerIndex = input.lookUpPointerIndex(pointerId);\r\n \t\t\t\t\tif (realPointerIndex == -1) continue;\r\n\t\t\t\t\tif (realPointerIndex >= AndroidInput.NUM_TOUCHES) break;\r\n \t\t\t\t\tpostTouchEvent(input, TouchEvent.TOUCH_DRAGGED, x, y, realPointerIndex, timeStamp);\r\n \t\t\t\t\tinput.deltaX[realPointerIndex] = x - input.touchX[realPointerIndex];\r\n \t\t\t\t\tinput.deltaY[realPointerIndex] = y - input.touchY[realPointerIndex];\r", "sourceBeforeFix": "realPointerIndex > AndroidInput.NUM_TOUCHES", "sourceAfterFix": "realPointerIndex >= AndroidInput.NUM_TOUCHES"}
{"problem": "public java.lang.Float METHOD_1 ( ) { if ( ( VAR_1 ) < INT_1 ) { return new java.lang.Float ( ( ( ( FLOAT_1 + ( FLOAT_2 * ( VAR_1 ) ) ) - ( FLOAT_3 * ( java.lang.Math.pow ( VAR_2 , FLOAT_4 ) ) ) ) + ( ( FLOAT_5 * ( VAR_1 ) ) * ( java.lang.Math.pow ( VAR_2 , FLOAT_4 ) ) ) ) ) ; } return VAR_1 ; }\n", "fixed": "public java.lang.Float METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) { if ( ( VAR_1 ) < INT_1 ) { return new java.lang.Float ( ( ( ( FLOAT_1 + ( FLOAT_2 * ( VAR_1 ) ) ) - ( FLOAT_3 * ( java.lang.Math.pow ( VAR_2 , FLOAT_4 ) ) ) ) + ( ( FLOAT_5 * ( VAR_1 ) ) * ( java.lang.Math.pow ( VAR_2 , FLOAT_4 ) ) ) ) ) ; } } return VAR_1 ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_2 VAR_2 : TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ) { if ( TYPE_3 . METHOD_4 ( this . METHOD_5 ( ) ) . METHOD_6 ( VAR_2 ) ) { VAR_1 . add ( new TYPE_4 ( this , VAR_2 , VAR_3 . METHOD_7 ( VAR_2 ) ) ) ; } } return VAR_1 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_2 VAR_2 : TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ) { if ( VAR_3 . METHOD_6 ( VAR_2 ) ) { VAR_1 . add ( new TYPE_4 ( this , VAR_2 , VAR_3 . METHOD_7 ( VAR_2 ) ) ) ; } } return VAR_1 ; }\n"}
{"problem": "public static void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) || ( TYPE_1 . METHOD_3 ( ) ) ) { VAR_1 = false ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_1 ( ) ; if ( ( VAR_3 ) != null ) { try { VAR_4 = true ; VAR_3 . METHOD_5 ( ) ; } catch ( TYPE_2 VAR_5 ) { VAR_5 . METHOD_6 ( ) ; } VAR_3 = null ; } VAR_2 . METHOD_7 ( ) ; } }\n", "fixed": "public static void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) || ( TYPE_1 . METHOD_3 ( ) ) ) { VAR_1 = false ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_1 ( ) ; if ( ( VAR_3 ) != null ) { VAR_4 = true ; VAR_3 = null ; } VAR_2 . METHOD_7 ( ) ; } }\n"}
{"problem": "private boolean METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) { return true ; } java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 . equals ( STRING_1 ) ) || ( VAR_2 . equals ( STRING_2 ) ) ) { VAR_1 . METHOD_3 ( ) ; return METHOD_4 ( ) ; } return true ; }\n", "fixed": "private boolean METHOD_1 ( ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 . equals ( STRING_1 ) ) || ( VAR_2 . equals ( STRING_2 ) ) ) { VAR_1 . METHOD_3 ( ) ; return METHOD_4 ( ) ; } } return true ; }\n"}
{"problem": "public static java.lang.String METHOD_1 ( android.content.Context context , java.io.File file ) { java.io.File VAR_1 = context . METHOD_2 ( STRING_1 ) ; if ( VAR_1 == null ) { TYPE_1 . METHOD_3 ( context , context . getString ( VAR_2 ) , VAR_3 ) . show ( ) ; return null ; } return ( VAR_1 + ( VAR_4 ) ) + ( file . getName ( ) ) ; }\n", "fixed": "public static java.lang.String METHOD_1 ( android.content.Context context , java.lang.String fileName ) { java.io.File VAR_1 = context . METHOD_2 ( STRING_1 ) ; if ( VAR_1 == null ) { TYPE_1 . METHOD_3 ( context , context . getString ( VAR_2 ) , VAR_3 ) . show ( ) ; return null ; } return ( VAR_1 + ( VAR_4 ) ) + fileName ; }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.String content = STRING_1 ; java.lang.String name = STRING_2 ; java.lang.String VAR_1 = this . VAR_2 . METHOD_2 ( new TYPE_1 ( content . METHOD_3 ( ) ) , name ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; java.lang.String VAR_4 = VAR_3 . METHOD_4 ( VAR_1 , VAR_5 . String class ) ; TYPE_3 . assertEquals ( content , VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( ) { java.lang.String content = STRING_1 ; java.lang.String name = STRING_2 ; java.lang.String VAR_1 = this . VAR_2 . METHOD_2 ( new TYPE_1 ( content . METHOD_3 ( ) ) , name ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; java.lang.String VAR_4 = VAR_3 . METHOD_4 ( VAR_1 , VAR_5 . String class ) ; TYPE_3 . assertEquals ( content , VAR_4 ) ; this . VAR_2 . delete ( name ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param ast ast to test.\n      * @return true if current ast is default and it is part of annotation.\n      */\n    private boolean isDefaultInAnnotation(DetailAST ast) {\n         boolean isDefaultInAnnotation = false;\n         if (ast.getType() == TokenTypes.LITERAL_DEFAULT\n                 && ast.getParent().getType() == TokenTypes.ANNOTATION_FIELD_DEF) {", "fixed": "      * @param ast ast to test.\n      * @return true if current ast is default and it is part of annotation.\n      */\n    private static boolean isDefaultInAnnotation(DetailAST ast) {\n         boolean isDefaultInAnnotation = false;\n         if (ast.getType() == TokenTypes.LITERAL_DEFAULT\n                 && ast.getParent().getType() == TokenTypes.ANNOTATION_FIELD_DEF) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; VAR_2 . METHOD_2 ( VAR_4 , VAR_5 ) ; VAR_2 . METHOD_2 ( VAR_6 , VAR_7 ) ; VAR_2 . METHOD_2 ( VAR_8 , VAR_9 ) ; VAR_2 . METHOD_2 ( VAR_10 , VAR_11 ) ; VAR_2 . METHOD_2 ( VAR_12 , VAR_13 ) ; VAR_2 . METHOD_2 ( VAR_14 , VAR_15 ) ; VAR_2 . METHOD_2 ( VAR_16 , VAR_17 ) ; METHOD_3 ( VAR_2 , VAR_18 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; VAR_2 . METHOD_2 ( VAR_6 , VAR_7 ) ; VAR_2 . METHOD_2 ( VAR_8 , VAR_9 ) ; VAR_2 . METHOD_2 ( VAR_10 , VAR_11 ) ; VAR_2 . METHOD_2 ( VAR_12 , VAR_13 ) ; VAR_2 . METHOD_2 ( VAR_14 , VAR_15 ) ; VAR_2 . METHOD_2 ( VAR_16 , VAR_17 ) ; METHOD_3 ( VAR_2 , VAR_18 ) ; }\n"}
{"fixCommitSHA1": "a13c4373a5e57d322b143516b493e84f14909fec", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(12, tokens.size());\n     List<CoreLabel> sentenceTwoTokens = sentences.get(1).get(CoreAnnotations.TokensAnnotation.class);\n     String sentenceTwo = SentenceUtils.listToString(sentenceTwoTokens);", "fixed": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(9, tokens.size());\n     List<CoreLabel> sentenceTwoTokens = sentences.get(1).get(CoreAnnotations.TokensAnnotation.class);\n     String sentenceTwo = SentenceUtils.listToString(sentenceTwoTokens);", "sourceBeforeFix": "assertEquals(12,tokens.size())", "sourceAfterFix": "assertEquals(9,tokens.size())"}
{"fixCommitSHA1": "7109f6f55968c830c5f43ff798e106ef2f14c71c", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "                 eq((byte) 0),\n                 eq(new GeneralDataCoding(\n                         false,\n                        false,\n                         MessageClass.CLASS1,\n                         Alphabet.ALPHA_DEFAULT)),\n                 eq((byte) 0),", "fixed": "                 eq((byte) 0),\n                 eq(new GeneralDataCoding(\n                         false,\n                        true,\n                         MessageClass.CLASS1,\n                         Alphabet.ALPHA_DEFAULT)),\n                 eq((byte) 0),", "sourceBeforeFix": "new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)", "sourceAfterFix": "new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)"}
{"problem": "public TYPE_1 METHOD_1 ( ) { int n = this . METHOD_2 ( ) ; java.util.ArrayList < TYPE_2 > VAR_1 = new java.util.ArrayList < TYPE_2 > ( n ) ; VAR_1 . add ( this . VAR_2 . get ( 0 ) ) ; for ( int i = 1 ; i < n ; i ++ ) { VAR_1 . set ( i , this . VAR_2 . get ( ( n - i ) ) ) ; } TYPE_3 VAR_3 = new TYPE_3 ( 0 ) ; VAR_4 = VAR_1 ; return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { int n = this . METHOD_2 ( ) ; java.util.ArrayList < TYPE_2 > VAR_1 = new java.util.ArrayList < TYPE_2 > ( n ) ; VAR_1 . add ( this . VAR_2 . get ( 0 ) ) ; for ( int i = 1 ; i < n ; i ++ ) { VAR_1 . add ( this . VAR_2 . get ( ( n - i ) ) ) ; } TYPE_3 VAR_3 = new TYPE_3 ( 0 ) ; VAR_4 = VAR_1 ; return VAR_3 ; }\n"}
{"problem": "void METHOD_1 ( java.lang.String op , boolean VAR_1 ) { if ( VAR_1 ) { if ( ( ( METHOD_2 ( ) ) != CHAR_1 ) && ( ( op . METHOD_3 ( 0 ) ) != CHAR_2 ) ) { append ( STRING_1 ) ; } append ( op ) ; append ( STRING_1 ) ; } else { append ( op ) ; } }\n", "fixed": "void METHOD_1 ( java.lang.String op , boolean VAR_1 ) { if ( VAR_1 ) { if ( ( ( METHOD_2 ( ) ) != CHAR_1 ) && ( ( op . METHOD_3 ( 0 ) ) != CHAR_2 ) ) { append ( STRING_1 ) ; } append ( op ) ; append ( STRING_1 ) ; } else { append ( STRING_1 ) ; append ( op ) ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_2 , false , STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 , VAR_3 , false , STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 , VAR_4 , false , STRING_6 ) ; VAR_1 . METHOD_2 ( STRING_7 , VAR_5 , true , STRING_8 ) ; VAR_1 . METHOD_2 ( STRING_9 , VAR_6 , false , STRING_10 ) ; VAR_1 . METHOD_2 ( STRING_11 , VAR_7 , true , STRING_12 ) ; return VAR_1 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_2 , false , STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 , VAR_3 , false , STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 , VAR_4 , false , STRING_6 ) ; VAR_1 . METHOD_2 ( STRING_7 , VAR_5 , true , STRING_8 ) ; VAR_1 . METHOD_2 ( STRING_9 , VAR_6 , false , STRING_10 ) ; VAR_1 . METHOD_2 ( STRING_11 , VAR_7 , false , STRING_12 ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; TYPE_2 VAR_2 = METHOD_2 ( null , null ) ; try { VAR_2 . METHOD_3 ( ) ; while ( VAR_2 . METHOD_4 ( ) ) { VAR_1 . add ( VAR_2 . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; } } finally { VAR_2 . METHOD_7 ( ) ; } return VAR_1 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; TYPE_2 VAR_2 = METHOD_2 ( null , null ) ; try { VAR_2 . METHOD_3 ( ) ; while ( ! ( VAR_2 . METHOD_4 ( ) ) ) { VAR_1 . add ( VAR_2 . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; } } finally { VAR_2 . METHOD_7 ( ) ; } return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( java.util.List VAR_1 ) { if ( ( this . VAR_2 ) == null ) { this . VAR_2 = VAR_1 ; } else { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; } if ( VAR_3 ) { VAR_4 = VAR_1 ; } METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( java.util.List VAR_1 ) { if ( ( this . VAR_2 ) == null ) { this . VAR_2 = new java.util.ArrayList ( ) ; } VAR_2 . METHOD_3 ( VAR_1 ) ; if ( VAR_3 ) { VAR_4 = VAR_1 ; } METHOD_4 ( ) ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String src ) throws TYPE_1 { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashSet < > ( ) ; java.util.List < TYPE_2 > VAR_2 = METHOD_2 ( ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { VAR_1 . add ( VAR_3 . METHOD_3 ( ) ) ; } } for ( java.lang.String VAR_4 : VAR_1 ) { if ( src . startsWith ( VAR_4 ) ) { return true ; } } return false ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String src ) throws TYPE_1 { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashSet < > ( ) ; java.util.List < TYPE_2 > VAR_2 = METHOD_2 ( ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { VAR_1 . add ( VAR_3 . METHOD_3 ( ) ) ; } return VAR_1 . contains ( src ) ; } for ( java.lang.String VAR_4 : VAR_1 ) { if ( src . startsWith ( VAR_4 ) ) { return true ; } } return false ; }\n"}
{"problem": "public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Context context = VAR_1 . METHOD_2 ( ) ; if ( ( TYPE_2 . METHOD_3 ( ) ) == null ) { TYPE_3 . METHOD_4 ( VAR_2 , STRING_1 ) ; android.content.Intent VAR_3 = new android.content.Intent ( context , VAR_4 class ) ; VAR_3 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_3 ) ; return false ; } else { return true ; } }\n", "fixed": "public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Context context = VAR_1 . METHOD_2 ( ) ; if ( ( TYPE_2 . METHOD_3 ( ) ) == null ) { TYPE_3 . METHOD_4 ( VAR_2 , STRING_1 ) ; android.content.Intent VAR_3 = new android.content.Intent ( context , VAR_4 class ) ; VAR_3 . METHOD_5 ( VAR_5 ) ; context . METHOD_6 ( VAR_3 ) ; return false ; } else { return true ; } }\n"}
{"problem": "private long METHOD_1 ( ) throws TYPE_1 { VAR_1 . METHOD_2 ( 0 ) ; VAR_1 . METHOD_3 ( ( - 1 ) ) ; java.util.Date VAR_2 = VAR_3 . METHOD_4 ( VAR_4 . toString ( ) , VAR_1 ) ; if ( ( VAR_1 . METHOD_5 ( ) ) == 0 ) { throw new TYPE_1 ( METHOD_6 ( VAR_5 , VAR_6 . METHOD_7 ( ) ) , null ) ; } VAR_7 . METHOD_8 ( VAR_2 ) ; return TYPE_2 . METHOD_9 ( VAR_7 ) ; }\n", "fixed": "private long METHOD_1 ( ) throws TYPE_1 { VAR_1 . METHOD_2 ( 0 ) ; VAR_1 . METHOD_3 ( ( - 1 ) ) ; java.util.Date VAR_2 = VAR_3 . METHOD_4 ( VAR_4 . toString ( ) , VAR_1 ) ; if ( ( VAR_1 . METHOD_5 ( ) ) == 0 ) { throw new TYPE_1 ( METHOD_6 ( VAR_5 , VAR_3 . METHOD_7 ( ) ) , null ) ; } VAR_7 . METHOD_8 ( VAR_2 ) ; return TYPE_2 . METHOD_9 ( VAR_7 ) ; }\n"}
{"problem": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new java.util.ArrayList < > ( ) ; VAR_2 = new java.util.ArrayList < > ( ) ; VAR_3 = new TYPE_1 ( this , VAR_1 , VAR_4 . METHOD_2 ( ) . getName ( ) ) ; VAR_5 . METHOD_3 ( VAR_3 ) ; VAR_3 . METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_6 = VAR_4 . METHOD_2 ( ) ; }\n", "fixed": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new java.util.ArrayList < > ( ) ; VAR_2 = new java.util.ArrayList < > ( ) ; METHOD_5 ( ) ; VAR_3 = new TYPE_1 ( this , VAR_1 , VAR_4 . METHOD_2 ( ) . getName ( ) ) ; VAR_5 . METHOD_3 ( VAR_3 ) ; VAR_3 . METHOD_4 ( ) ; VAR_6 = VAR_4 . METHOD_2 ( ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( ) ; if ( ( VAR_1 == STRING_1 ) || ( VAR_2 == STRING_1 ) ) return new TYPE_1 ( ) ; try { return VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) . METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { return new TYPE_1 ( ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( ) ; if ( ( VAR_1 . equals ( STRING_1 ) ) || ( VAR_2 . equals ( STRING_1 ) ) ) return new TYPE_1 ( ) ; try { return VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) . METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { return new TYPE_1 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_2 = TYPE_1 . METHOD_3 ( ) . get ( 0 ) ; assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_2 . METHOD_4 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_2 = TYPE_1 . METHOD_3 ( ) . get ( 0 ) ; assertEquals ( VAR_1 . getId ( ) , VAR_2 . getId ( ) ) ; }\n"}
