{"problem": "private static < TYPE_1 > java.util.List < TYPE_1 > METHOD_1 ( TYPE_1 x , java.util.List < TYPE_1 > VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_2 . add ( x ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; return VAR_2 ; }\n", "fixed": "private static < TYPE_1 > java.util.List < TYPE_1 > append ( java.util.List < TYPE_1 > VAR_1 , TYPE_1 x ) { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . add ( x ) ; return VAR_2 ; }\n"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"problem": "public static java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = VAR_1 . split ( STRING_1 ) ; java.util.List < TYPE_1 > result = new java.util.LinkedList < TYPE_1 > ( ) ; for ( java.lang.String VAR_3 : VAR_2 ) { TYPE_2 query = TYPE_3 . METHOD_2 ( VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( query ) ; result . add ( VAR_4 ) ; } return result ; }\n", "fixed": "public static java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = VAR_1 . split ( STRING_1 ) ; java.util.List < TYPE_1 > result = new java.util.LinkedList < TYPE_1 > ( ) ; int counter = 0 ; for ( java.lang.String VAR_3 : VAR_2 ) { TYPE_2 query = TYPE_3 . METHOD_2 ( VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( query , ( counter ++ ) ) ; result . add ( VAR_4 ) ; } return result ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 != null ) { if ( ( VAR_4 ) == null ) { if ( VAR_2 . METHOD_4 ( ) ) VAR_2 . METHOD_5 ( ) ; } else { VAR_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( ( ( VAR_1 . METHOD_8 ( ) ) + 1 ) ) ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 != null ) { if ( VAR_1 == null ) { if ( VAR_2 . METHOD_4 ( ) ) VAR_2 . METHOD_5 ( ) ; } else { VAR_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( ( ( VAR_1 . METHOD_8 ( ) ) + 1 ) ) ) ; } } }\n"}
{"problem": "public static java.util.ArrayList < java.lang.Integer > METHOD_1 ( int [ ] status ) { java.util.ArrayList < java.lang.Integer > VAR_1 = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < ( status . length ) ; i ++ ) { if ( ( status [ i ] ) != 0 ) { VAR_1 . add ( status [ i ] ) ; } } return VAR_1 ; }\n", "fixed": "private static java.util.ArrayList < java.lang.Integer > METHOD_1 ( int [ ] status ) { java.util.ArrayList < java.lang.Integer > VAR_1 = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < ( status . length ) ; i ++ ) { if ( ( status [ i ] ) == 0 ) { VAR_1 . add ( status [ i ] ) ; } } return VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 ; VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( ( VAR_2 % INT_1 ) != 0 ) || ( VAR_2 == 0 ) ) { VAR_3 [ ( VAR_2 % INT_1 ) ] = VAR_1 ; } else { TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_3 ( VAR_1 ) ; TYPE_3 . METHOD_4 ( STRING_1 , ( STRING_2 + ( java.lang.Integer.toString ( VAR_1 . METHOD_2 ( ) ) ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 ; VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( ( VAR_2 % INT_1 ) != 0 ) || ( VAR_2 == 0 ) ) { VAR_3 [ ( VAR_2 % INT_1 ) ] = VAR_1 ; } else { TYPE_2 VAR_4 = new TYPE_2 ( VAR_1 ) ; VAR_4 . start ( ) ; TYPE_3 . METHOD_4 ( STRING_1 , ( STRING_2 + ( java.lang.Integer.toString ( VAR_1 . METHOD_2 ( ) ) ) ) ) ; } }\n"}
{"fixCommitSHA1": "06a260f107ba5ab489e7d28256ee6bc9530d3416", "projectName": "apache.hbase", "bugType": "Same Function More Args", "problem": "   public ServerName getServerHoldingRegion(TableName tn, byte[] regionName) throws IOException {\n     HRegionLocation regionLoc = null;\n     try (RegionLocator locator = connection.getRegionLocator(tn)) {\n      regionLoc = locator.getRegionLocation(regionName);\n     }\n     if (regionLoc == null) {\n       LOG.warn(\"Cannot find region server holding region \" + Bytes.toString(regionName) +", "fixed": "   public ServerName getServerHoldingRegion(TableName tn, byte[] regionName) throws IOException {\n     HRegionLocation regionLoc = null;\n     try (RegionLocator locator = connection.getRegionLocator(tn)) {\n      regionLoc = locator.getRegionLocation(regionName, true);\n     }\n     if (regionLoc == null) {\n       LOG.warn(\"Cannot find region server holding region \" + Bytes.toString(regionName) +", "sourceBeforeFix": "locator.getRegionLocation(regionName)", "sourceAfterFix": "locator.getRegionLocation(regionName,true)"}
{"problem": "public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String name , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 , java.lang.String VAR_7 ) { try { TYPE_1 VAR_8 = new TYPE_1 ( VAR_1 , name , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_7 ) ; VAR_9 . METHOD_2 ( VAR_8 ) ; VAR_10 = VAR_9 . METHOD_3 ( ) ; VAR_11 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_10 ) , TYPE_2 . METHOD_6 ( ) ) ; return true ; } catch ( java.lang.Exception VAR_12 ) { } return false ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String name , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_6 , java.lang.String VAR_7 ) { try { TYPE_1 VAR_8 = new TYPE_1 ( VAR_1 , name , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_7 ) ; VAR_9 . METHOD_2 ( VAR_8 ) ; VAR_10 = VAR_9 . METHOD_3 ( ) ; VAR_11 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_10 ) , TYPE_2 . METHOD_6 ( ) ) ; return true ; } catch ( java.lang.Exception VAR_12 ) { } return false ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < TYPE_1 > VAR_2 ) { final java.util.List < TYPE_1 > VAR_3 = METHOD_2 ( VAR_2 ) ; final java.lang.Object [ ] VAR_4 = VAR_3 . METHOD_3 ( ) ; final TYPE_2 VAR_5 = new TYPE_2 ( ) ; for ( int i = ( VAR_4 . length ) - 1 ; i >= 0 ; i -- ) { if ( ( VAR_4 [ i ] ) instanceof TYPE_1 ) { VAR_5 . METHOD_4 ( ( ( TYPE_1 ) ( VAR_4 [ i ] ) ) ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , java.util.Collection < TYPE_1 > VAR_2 ) { final java.util.List < TYPE_1 > VAR_3 = METHOD_2 ( VAR_2 ) ; final java.lang.Object [ ] VAR_4 = VAR_3 . METHOD_3 ( ) ; final TYPE_2 VAR_5 = new TYPE_2 ( ) ; for ( int i = ( VAR_4 . length ) - 1 ; i >= 0 ; i -- ) { if ( ( VAR_4 [ i ] ) instanceof TYPE_1 ) { VAR_5 . METHOD_4 ( ( ( TYPE_1 ) ( VAR_4 [ i ] ) ) ) ; } } }\n"}
