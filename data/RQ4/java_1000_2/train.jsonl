{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { java.net.URL VAR_1 = getClass ( ) . METHOD_2 ( STRING_1 ) ; TYPE_1 . assertTrue ( STRING_2 , new java.io.File ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( ) ) ; java.lang.String VAR_2 = METHOD_5 ( VAR_1 ) ; java.io.File VAR_3 = new java.io.File ( new java.io.File ( VAR_4 , VAR_2 ) , STRING_3 ) ; TYPE_1 . assertTrue ( STRING_4 , VAR_3 . METHOD_4 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { java.net.URL VAR_1 = getClass ( ) . METHOD_2 ( STRING_1 ) ; TYPE_1 . assertTrue ( STRING_2 , new java.io.File ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( ) ) ; java.lang.String VAR_2 = METHOD_5 ( VAR_1 , null ) ; java.io.File VAR_3 = new java.io.File ( new java.io.File ( VAR_4 , VAR_2 ) , STRING_3 ) ; TYPE_1 . assertTrue ( STRING_4 , VAR_3 . METHOD_4 ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 item ) { if ( item == null ) throw new java.lang.NullPointerException ( ) ; if ( ( VAR_1 ) == ( VAR_2 . length ) ) { METHOD_2 ( ( INT_1 * ( VAR_2 . length ) ) ) ; } VAR_2 [ ( ( VAR_1 ) ++ ) ] = item ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 item ) { if ( item == null ) throw new java.lang.NullPointerException ( ) ; if ( ( VAR_1 ) == ( ( VAR_2 . length ) - 1 ) ) { METHOD_2 ( ( INT_1 * ( VAR_2 . length ) ) ) ; } VAR_2 [ ( ( VAR_1 ) ++ ) ] = item ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { VAR_3 = VAR_1 . getContext ( ) ; android.view.View view = TYPE_3 . METHOD_2 ( VAR_1 . getContext ( ) ) . METHOD_3 ( VAR_4 , VAR_1 , false ) ; return new TYPE_1 ( view , METHOD_4 ( ) , VAR_5 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { VAR_3 = VAR_1 . getContext ( ) ; android.view.View view = TYPE_3 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 , VAR_1 , false ) ; return new TYPE_1 ( view , METHOD_4 ( ) , VAR_5 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; double VAR_3 = TYPE_2 . METHOD_2 ( VAR_4 ) ; this . METHOD_3 ( ( ( VAR_5 . METHOD_4 ( ) ) / INT_1 ) ) ; this . METHOD_5 ( ( ( VAR_5 . METHOD_6 ( ) ) / INT_1 ) ) ; TYPE_3 VAR_6 = TYPE_3 . METHOD_7 ( VAR_3 , this . METHOD_8 ( ) , this . METHOD_9 ( ) ) ; super . METHOD_1 ( VAR_1 , VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; double VAR_3 = TYPE_2 . METHOD_2 ( VAR_4 ) ; this . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ; this . METHOD_5 ( VAR_5 . METHOD_6 ( ) ) ; TYPE_3 VAR_6 = TYPE_3 . METHOD_7 ( VAR_3 , this . METHOD_8 ( ) , this . METHOD_9 ( ) ) ; super . METHOD_1 ( VAR_1 , VAR_6 ) ; }\n"}
{"problem": "protected java.lang.String METHOD_1 ( java.lang.String ... VAR_1 ) { try { return METHOD_2 ( VAR_1 [ 0 ] ) ; } catch ( java.io.IOException VAR_2 ) { TYPE_1 . METHOD_3 ( this , STRING_1 , VAR_3 ) . show ( ) ; return METHOD_4 ( ) . getString ( VAR_4 ) ; } catch ( TYPE_2 VAR_2 ) { TYPE_1 . METHOD_3 ( this , STRING_2 , VAR_3 ) . show ( ) ; return METHOD_4 ( ) . getString ( VAR_5 ) ; } }\n", "fixed": "protected java.lang.String METHOD_1 ( java.lang.String ... VAR_1 ) { try { return METHOD_2 ( VAR_1 [ 0 ] ) ; } catch ( java.io.IOException VAR_2 ) { return METHOD_4 ( ) . getString ( VAR_4 ) ; } catch ( TYPE_2 VAR_2 ) { return METHOD_4 ( ) . getString ( VAR_5 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( ) ; boolean VAR_2 = false ; try { VAR_1 . METHOD_3 ( VAR_3 [ INT_1 ] [ 0 ] , VAR_3 [ 0 ] [ INT_1 ] ) ; } catch ( TYPE_2 VAR_4 ) { VAR_2 = true ; } TYPE_3 . assertThat ( VAR_2 , TYPE_4 . METHOD_4 ( true ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; boolean VAR_2 = false ; try { VAR_1 . METHOD_3 ( VAR_3 [ INT_1 ] [ 0 ] , VAR_3 [ 0 ] [ INT_1 ] ) ; } catch ( TYPE_2 VAR_4 ) { VAR_2 = true ; } TYPE_3 . assertThat ( VAR_2 , TYPE_4 . METHOD_4 ( true ) ) ; }\n"}
{"problem": "private < TYPE_1 > TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final java.lang.String key , final TYPE_3 < TYPE_1 > VAR_2 ) { VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; try { if ( METHOD_4 ( VAR_1 , key ) ) { return METHOD_5 ( VAR_1 , key ) ; } return METHOD_6 ( VAR_1 , key , VAR_2 ) ; } finally { VAR_3 . METHOD_2 ( ) . METHOD_7 ( ) ; } }\n", "fixed": "private < TYPE_1 > TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final java.lang.String key , final TYPE_3 < TYPE_1 > VAR_2 ) { VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; try { if ( METHOD_4 ( VAR_1 , key ) ) { return METHOD_5 ( VAR_1 , key ) ; } } finally { VAR_3 . METHOD_2 ( ) . METHOD_7 ( ) ; } return METHOD_6 ( VAR_1 , key , VAR_2 ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { try { java.io.FileOutputStream VAR_3 = new java.io.FileOutputStream ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( java.lang.String.format ( VAR_5 , VAR_2 ) ) ; } catch ( java.io.IOException | TYPE_2 VAR_6 ) { throw new TYPE_3 ( STRING_1 , VAR_6 ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { try ( java.io.FileOutputStream VAR_3 = new java.io.FileOutputStream ( VAR_2 ) ) { VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( java.lang.String.format ( VAR_5 , VAR_2 ) ) ; } catch ( java.io.IOException | TYPE_2 VAR_6 ) { throw new TYPE_3 ( STRING_1 , VAR_6 ) ; } }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { if ( ( ( ( VAR_2 ) + VAR_1 ) <= ( VAR_3 ) ) && ( ( ( VAR_2 ) + VAR_1 ) >= ( ( - ( VAR_3 ) ) / INT_1 ) ) ) { VAR_2 += VAR_1 ; VAR_4 = ( VAR_1 > 0 ) ? VAR_5 : VAR_6 ; } else { VAR_4 = VAR_7 ; } }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { if ( ( ( ( VAR_2 ) + VAR_1 ) <= ( VAR_3 ) ) && ( ( ( VAR_2 ) + VAR_1 ) >= ( ( - ( VAR_3 ) ) / INT_1 ) ) ) { VAR_2 += VAR_1 ; VAR_4 = ( VAR_1 > 0 ) ? VAR_5 : VAR_6 ; } else { VAR_4 = ( ( VAR_4 ) != ( VAR_7 ) ) ? VAR_4 : VAR_7 ; } }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_2 = new TYPE_3 ( ) . METHOD_3 ( VAR_1 ) . build ( ) ; java.util.Map < java.lang.String , java.io.InputStream > VAR_3 = VAR_2 . METHOD_4 ( STRING_3 ) ; TYPE_4 . assertNotNull ( VAR_3 . get ( STRING_3 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; try ( TYPE_2 VAR_2 = new TYPE_3 ( ) . METHOD_3 ( VAR_1 ) . build ( ) ) { java.util.Map < java.lang.String , java.io.InputStream > VAR_3 = VAR_2 . METHOD_4 ( STRING_3 ) ; TYPE_4 . assertNotNull ( VAR_3 . get ( STRING_3 ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( this , VAR_2 , VAR_3 ) . METHOD_4 ( this , VAR_4 , VAR_5 ) . build ( ) ; TYPE_2 . METHOD_5 ( this , VAR_1 . intent ) ; TYPE_2 . METHOD_6 ( this , VAR_1 , TYPE_3 . METHOD_7 ( VAR_6 ) , new TYPE_4 ( ) ) ; }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( this , VAR_2 , VAR_3 ) . METHOD_4 ( this , VAR_4 , VAR_5 ) . build ( ) ; TYPE_2 . METHOD_5 ( this , VAR_1 . intent ) ; TYPE_2 . METHOD_6 ( this , VAR_1 , TYPE_3 . METHOD_7 ( VAR_6 ) , new TYPE_4 ( ) ) ; }\n"}
{"problem": "public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; try { VAR_1 . execute ( VAR_4 , VAR_2 ) ; VAR_3 = VAR_1 . get ( ) ; } catch ( TYPE_2 VAR_5 ) { VAR_5 . METHOD_2 ( ) ; } catch ( TYPE_3 VAR_5 ) { VAR_5 . METHOD_2 ( ) ; } return VAR_3 ; }\n", "fixed": "public static java.lang.String METHOD_1 ( java.lang.String VAR_2 ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.String VAR_3 = STRING_1 ; try { VAR_1 . execute ( VAR_4 , VAR_2 ) ; VAR_3 = VAR_1 . get ( ) ; } catch ( TYPE_2 VAR_5 ) { VAR_5 . METHOD_2 ( ) ; } catch ( TYPE_3 VAR_5 ) { VAR_5 . METHOD_2 ( ) ; } return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 class ) ; TYPE_2 p = METHOD_2 ( VAR_3 class ) ; METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( VAR_4 ) ; TYPE_3 VAR_5 = new TYPE_3 ( VAR_1 , p ) ; java.lang.String VAR_6 = VAR_5 . METHOD_6 ( STRING_1 ) ; assertTrue ( VAR_6 . contains ( STRING_2 ) ) ; METHOD_7 ( p , METHOD_8 ( 0 ) ) . METHOD_9 ( METHOD_10 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 class ) ; TYPE_2 p = METHOD_2 ( VAR_3 class ) ; METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( VAR_4 ) ; TYPE_3 VAR_5 = new TYPE_3 ( VAR_1 , p ) ; java.lang.String VAR_6 = VAR_5 . METHOD_6 ( STRING_1 ) ; assertTrue ( VAR_6 . contains ( STRING_2 ) ) ; }\n"}
{"problem": "protected java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = super . METHOD_1 ( VAR_1 ) ; java.lang.String [ ] VAR_3 = VAR_2 . split ( STRING_1 , INT_1 ) ; if ( ( ( VAR_3 . length ) == INT_1 ) && ( VAR_3 [ 0 ] . equals ( VAR_3 [ 1 ] ) ) ) { return VAR_3 [ 0 ] ; } return VAR_2 ; }\n", "fixed": "protected java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = super . METHOD_1 ( VAR_1 ) ; if ( VAR_2 != null ) { java.lang.String [ ] VAR_3 = VAR_2 . split ( STRING_1 , INT_1 ) ; if ( ( ( VAR_3 . length ) == INT_1 ) && ( VAR_3 [ 0 ] . equals ( VAR_3 [ 1 ] ) ) ) { return VAR_3 [ 0 ] ; } } return VAR_2 ; }\n"}
{"problem": "public static int [ ] METHOD_1 ( int [ ] VAR_1 ) { for ( int i = 1 ; i < ( VAR_1 . length ) ; i ++ ) { int a = VAR_1 [ i ] ; int j = i ; while ( ( j > 0 ) && ( ( VAR_1 [ j ] ) > a ) ) VAR_1 [ j ] = VAR_1 [ ( -- j ) ] ; VAR_1 [ j ] = a ; } return VAR_1 ; }\n", "fixed": "public static int [ ] METHOD_1 ( int [ ] VAR_1 ) { for ( int i = 1 ; i < ( VAR_1 . length ) ; i ++ ) { int a = VAR_1 [ i ] ; int j = i ; while ( ( j > 0 ) && ( ( VAR_1 [ ( j - 1 ) ] ) > a ) ) VAR_1 [ j ] = VAR_1 [ ( -- j ) ] ; VAR_1 [ j ] = a ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "619ff2bc073d1b8859c8c8e1fa351b7858529670", "projectName": "Atmosphere.atmosphere", "bugType": "Change Operand ", "problem": "                  @Override\n                  public String filter(AtmosphereResponse r, String message) {\n                     return message + END;\n                  }\n                  @Override", "fixed": "                  @Override\n                  public String filter(AtmosphereResponse r, String message) {\n                     return message + end;\n                  }\n                  @Override", "sourceBeforeFix": "message + END", "sourceAfterFix": "message + end"}
{"problem": "protected static final long METHOD_1 ( java.io.File file ) { if ( file . METHOD_2 ( ) ) { long VAR_1 = file . METHOD_3 ( ) ; for ( java.io.File f : file . METHOD_4 ( ) ) { long VAR_2 = TYPE_1 . METHOD_5 ( f ) ; if ( VAR_2 > VAR_1 ) { VAR_1 = VAR_2 ; } } return VAR_1 ; } else { return file . METHOD_3 ( ) ; } }\n", "fixed": "protected static final long METHOD_1 ( java.io.File file ) { if ( file . METHOD_2 ( ) ) { long VAR_1 = file . METHOD_3 ( ) ; for ( java.io.File f : file . METHOD_4 ( ) ) { long VAR_2 = TYPE_1 . METHOD_1 ( f ) ; if ( VAR_2 > VAR_1 ) { VAR_1 = VAR_2 ; } } return VAR_1 ; } else { return file . METHOD_3 ( ) ; } }\n"}
{"problem": "private boolean METHOD_1 ( java.io.File file ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( file ) ; java.util.List < TYPE_2 > VAR_2 = this . VAR_2 . METHOD_3 ( ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { if ( VAR_3 . getName ( ) . equals ( VAR_1 ) ) { return true ; } } return false ; }\n", "fixed": "public boolean METHOD_1 ( java.io.File file ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( file ) ; java.util.List < TYPE_2 > VAR_2 = this . VAR_2 . METHOD_3 ( ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { if ( VAR_3 . getName ( ) . equals ( VAR_1 ) ) { return true ; } } return false ; }\n"}
{"fixCommitSHA1": "c2d5b41fb48cc2b913a2a04d2b68aa4369acac6a", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param children An array of Object containing the inserted, removed, or changed objects.\n      * @see EventListenerList\n      */\n    final void fireTreeStructureChanged(Object source, Object[] path,\n                                   int[] childIndices,\n                                   Object... children) {", "fixed": "      * @param children An array of Object containing the inserted, removed, or changed objects.\n      * @see EventListenerList\n      */\n    private void fireTreeStructureChanged(Object source, Object[] path,\n                                   int[] childIndices,\n                                   Object... children) {", "sourceBeforeFix": "16", "sourceAfterFix": "20"}
{"problem": "public < TYPE_1 extends TYPE_2 & TYPE_3 > void METHOD_1 ( TYPE_4 VAR_1 , TYPE_1 item ) { TYPE_5 a = VAR_1 . METHOD_2 ( new TYPE_6 ( VAR_2 , item . METHOD_3 ( ) ) , METHOD_4 ( item ) ) ; a . METHOD_5 ( new TYPE_6 ( VAR_2 , item . METHOD_3 ( ) ) . toString ( ) ) ; a . build ( ) ; }\n", "fixed": "public < TYPE_1 extends TYPE_2 & TYPE_3 > void METHOD_1 ( TYPE_4 VAR_1 , TYPE_1 item ) { TYPE_5 a = VAR_1 . METHOD_2 ( new TYPE_6 ( VAR_2 , item . METHOD_3 ( ) ) , METHOD_4 ( item ) ) ; a . METHOD_5 ( ) ; a . build ( ) ; }\n"}
{"problem": "private int METHOD_1 ( ) { int result = 0 ; TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; result = TYPE_1 . METHOD_2 ( ) . VAR_1 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( STRING_1 , result ) ; TYPE_1 . METHOD_2 ( ) . METHOD_6 ( TYPE_1 . METHOD_2 ( ) . VAR_1 ) ; return result ; }\n", "fixed": "private int METHOD_1 ( ) { int result = 0 ; TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; result = TYPE_1 . METHOD_2 ( ) . VAR_1 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( STRING_1 , result ) ; if ( result > 0 ) { TYPE_1 . METHOD_2 ( ) . METHOD_6 ( TYPE_1 . METHOD_2 ( ) . VAR_1 ) ; } return result ; }\n"}
{"problem": "public long METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) ; VAR_2 . put ( VAR_4 , VAR_1 . METHOD_3 ( ) ) ; VAR_2 . put ( VAR_5 , VAR_1 . METHOD_4 ( ) ) ; VAR_2 . put ( VAR_6 , VAR_1 . METHOD_5 ( ) ) ; return VAR_7 . METHOD_6 ( VAR_8 , null , VAR_2 ) ; }\n", "fixed": "public long METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( 1 ) ) ; VAR_2 . put ( VAR_4 , VAR_1 . METHOD_3 ( ) ) ; VAR_2 . put ( VAR_5 , VAR_1 . METHOD_4 ( ) ) ; VAR_2 . put ( VAR_6 , VAR_1 . METHOD_5 ( ) ) ; return VAR_7 . METHOD_6 ( VAR_8 , null , VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) { java.lang.System.out.println ( VAR_1 . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( new TYPE_2 ( ( - ( VAR_1 . METHOD_4 ( ) . x ) ) , VAR_1 . METHOD_4 ( ) . y ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) { VAR_2 . METHOD_5 ( new TYPE_2 ( ( - ( VAR_1 . METHOD_4 ( ) . x ) ) , VAR_1 . METHOD_4 ( ) . y ) ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == ( VAR_3 . length ) ) { VAR_2 = 0 ; VAR_4 . setText ( VAR_3 [ VAR_2 ] . toString ( ) ) ; } else { METHOD_2 ( ) ; VAR_4 . setText ( VAR_3 [ VAR_2 ] . toString ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == ( ( VAR_3 . length ) - 1 ) ) { VAR_2 = 0 ; VAR_4 . setText ( VAR_3 [ VAR_2 ] . toString ( ) ) ; } else { METHOD_2 ( ) ; VAR_4 . setText ( VAR_3 [ VAR_2 ] . toString ( ) ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 p = new TYPE_1 ( ) ; for ( int i = 0 ; i < ( METHOD_2 ( ) ) ; i ++ ) { for ( int j = 0 ; j < ( METHOD_3 ( ) ) ; j ++ ) { if ( ( VAR_2 [ i ] [ j ] ) == VAR_1 ) { p . x = i ; p . y = j ; return p ; } } } }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 p = new TYPE_1 ( ) ; for ( int i = 0 ; i < ( METHOD_2 ( ) ) ; i ++ ) { for ( int j = 0 ; j < ( METHOD_3 ( ) ) ; j ++ ) { if ( ( VAR_2 [ i ] [ j ] ) == VAR_1 ) { p . x = i ; p . y = j ; return p ; } } } return p ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ba442b98826fc79e2ff536c269eb7f8df9916b3a", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": " import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.google.inject.Provider;\n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = SingleServerInventoryProvider.class)\n @JsonSubTypes(value = {\n     @JsonSubTypes.Type(name = \"legacy\", value = FilteredSingleServerViewProvider.class),\n     @JsonSubTypes.Type(name = \"batch\", value = FilteredBatchServerViewProvider.class)", "fixed": " import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.google.inject.Provider;\n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = FilteredBatchServerViewProvider.class)\n @JsonSubTypes(value = {\n     @JsonSubTypes.Type(name = \"legacy\", value = FilteredSingleServerViewProvider.class),\n     @JsonSubTypes.Type(name = \"batch\", value = FilteredBatchServerViewProvider.class)", "sourceBeforeFix": "SingleServerInventoryProvider.class", "sourceAfterFix": "FilteredBatchServerViewProvider.class"}
{"project": "Closure", "bugId": 30, "problem": "   private static class Definition {\n     final Node node;\n     final Set<Var> depends = Sets.newHashSet();\n     Definition(Node node) {\n       this.node = node;", "fixed": "   private static class Definition {\n     final Node node;\n     final Set<Var> depends = Sets.newHashSet();\n    private boolean unknownDependencies = false;\n     Definition(Node node) {\n       this.node = node;", "observations": "Adds a new class attribute with its initialization.", "repairActions": ["assignAdd", "condBranIfAdd", "condBranIfElseAdd", "condExpRed", "mcParAdd", "mcRem", "mcRepl", "retBranchAdd", "varAdd"], "repairPatterns": ["condBlockRetAdd", "expLogicReduce", "initFix", "missNullCheckP", "wrapsIfElse", "wrongMethodRef"]}
{"problem": "public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . put ( VAR_2 , VAR_3 ) . put ( VAR_4 , VAR_5 ) . put ( VAR_6 , VAR_7 ) . put ( VAR_8 , VAR_9 ) . put ( VAR_10 , VAR_11 ) . put ( VAR_12 , VAR_13 ) . put ( VAR_14 , METHOD_2 ( ) ) ; return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . put ( VAR_2 , VAR_3 ) . put ( VAR_4 , VAR_5 ) . put ( VAR_6 , VAR_7 ) . put ( VAR_10 , VAR_11 ) . put ( VAR_12 , VAR_13 ) ; return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View view ) { if ( view == ( VAR_1 ) ) { VAR_2 = METHOD_2 ( ) ; METHOD_3 ( VAR_2 ) ; } else if ( view == ( VAR_3 ) ) { VAR_2 = METHOD_4 ( ) ; METHOD_3 ( VAR_2 ) ; } else if ( view == ( VAR_4 ) ) VAR_5 . METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { if ( view == ( VAR_1 ) ) { VAR_2 = METHOD_2 ( ) ; METHOD_3 ( VAR_2 , true ) ; } else if ( view == ( VAR_3 ) ) { VAR_2 = METHOD_4 ( ) ; METHOD_3 ( VAR_2 , true ) ; } else if ( view == ( VAR_4 ) ) VAR_5 . METHOD_5 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.CharSequence VAR_1 , int start , int VAR_2 , int count ) { if ( ( VAR_1 . length ( ) ) == INT_1 ) { TYPE_1 VAR_3 = METHOD_2 ( ( ( java.lang.String ) ( TYPE_2 . METHOD_3 ( ) ) ) ) ; if ( VAR_3 != null ) VAR_3 . METHOD_4 ( TYPE_2 . getText ( ) . toString ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.CharSequence VAR_1 , int start , int VAR_2 , int count ) { TYPE_1 VAR_3 = METHOD_2 ( ( ( java.lang.String ) ( TYPE_2 . METHOD_3 ( ) ) ) ) ; if ( VAR_3 != null ) VAR_3 . METHOD_4 ( TYPE_2 . getText ( ) . toString ( ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( final TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; this . METHOD_2 ( VAR_2 ) ; new TYPE_2 ( TYPE_3 . METHOD_3 ( ) , this . VAR_3 ) ; TYPE_4 . METHOD_4 ( this ) ; this . METHOD_5 ( ) ; this . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( ) ; }\n", "fixed": "protected void METHOD_1 ( final TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; this . METHOD_2 ( VAR_2 ) ; new TYPE_2 ( TYPE_3 . METHOD_3 ( ) , this . VAR_3 ) ; TYPE_4 . METHOD_4 ( this ) ; this . METHOD_5 ( ) ; TYPE_5 . METHOD_7 ( ) ; }\n"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUser(@Valid User body);\n     @POST\n     @Path(\"/createWithArray\")", "fixed": "     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUser(@Valid User body) throws Exception;\n     @POST\n     @Path(\"/createWithArray\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"problem": "public void METHOD_1 ( ) { java.util.Scanner VAR_1 = new java.util.Scanner ( VAR_2 ) ; java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_4 = ( ( TYPE_2 ) ( VAR_5 ) ) . METHOD_3 ( ) ; java.lang.String VAR_6 = VAR_4 . METHOD_4 ( ) ; while ( VAR_7 ) { if ( VAR_3 == STRING_1 ) { VAR_8 . METHOD_5 ( VAR_6 ) ; break ; } } }\n", "fixed": "public void METHOD_1 ( ) { java.util.Scanner VAR_1 = new java.util.Scanner ( VAR_2 ) ; java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_4 = ( ( TYPE_2 ) ( VAR_5 ) ) . METHOD_3 ( ) ; java.lang.String VAR_6 = VAR_4 . METHOD_4 ( ) ; while ( VAR_7 ) { if ( VAR_3 . isEmpty ( ) ) { VAR_8 . METHOD_5 ( VAR_6 ) ; break ; } } }\n"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( 0 , INT_1 , STRING_1 ) ; METHOD_2 ( 1 , INT_2 , STRING_1 ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( 0 , 1 ) ; METHOD_5 ( INT_3 , INT_4 , STRING_1 ) ; TYPE_1 . assertTrue ( VAR_2 . METHOD_6 ( INT_5 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( 0 , INT_1 , STRING_1 ) ; METHOD_2 ( 1 , INT_2 , STRING_1 ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( 0 , 1 ) ; METHOD_5 ( INT_3 , INT_4 , STRING_1 ) ; assertTrue ( VAR_2 . METHOD_6 ( INT_5 ) ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this . context , this . VAR_2 , this . VAR_3 , this . VAR_4 , this . VAR_5 , VAR_6 , this . VAR_7 , this . VAR_8 , this . VAR_9 ) ; this . VAR_10 = VAR_1 . METHOD_2 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( this . context , this . VAR_2 , this . VAR_3 , this . VAR_4 , this . VAR_5 , VAR_6 , this . VAR_7 , this . VAR_8 , this . VAR_9 ) ; this . VAR_10 = VAR_1 . METHOD_2 ( ) ; }\n"}
{"fixCommitSHA1": "ec5961a27122b228cb8adb634ee183eebcefa98c", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "   }\n   @explain(displayName=\"Alias -> Map Operator Tree\")\n  public HashMap<String, Operator<? extends Serializable>> getAliasToWork() {\n     return this.aliasToWork;\n   }\n  public void setAliasToWork(final HashMap<String,Operator<? extends Serializable>> aliasToWork) {\n     this.aliasToWork=aliasToWork;\n   }\n   public tableDesc getKeyDesc() {", "fixed": "   }\n   @explain(displayName=\"Alias -> Map Operator Tree\")\n  public LinkedHashMap<String, Operator<? extends Serializable>> getAliasToWork() {\n     return this.aliasToWork;\n   }\n  public void setAliasToWork(final LinkedHashMap<String,Operator<? extends Serializable>> aliasToWork) {\n     this.aliasToWork=aliasToWork;\n   }\n   public tableDesc getKeyDesc() {", "sourceBeforeFix": "HashMap<String,Operator<? extends Serializable>>", "sourceAfterFix": "LinkedHashMap<String,Operator<? extends Serializable>>"}
{"problem": "public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . add ( TYPE_2 . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = VAR_4 . METHOD_6 ( ) ; TYPE_4 . METHOD_7 ( STRING_1 , VAR_3 . isEmpty ( ) ) ; TYPE_3 . METHOD_8 ( VAR_2 , TYPE_3 . METHOD_9 ( 1 ) ) . METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . add ( TYPE_2 . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = VAR_4 . METHOD_6 ( ) ; TYPE_4 . METHOD_7 ( STRING_1 , VAR_3 . isEmpty ( ) ) ; TYPE_3 . METHOD_8 ( VAR_2 ) . METHOD_4 ( ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { if ( ( ( VAR_1 ) <= 0 ) && ( TYPE_1 . METHOD_2 ( context , VAR_2 ) ) ) { VAR_1 = TYPE_1 . METHOD_3 ( context , VAR_2 ) ; } java.lang.String VAR_3 = TYPE_2 . METHOD_4 ( VAR_1 , context ) ; if ( VAR_3 == null ) { VAR_3 = METHOD_5 ( ) . getString ( VAR_4 ) ; } VAR_5 . METHOD_6 ( ) ; VAR_6 . setText ( VAR_3 ) ; VAR_6 . METHOD_7 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { java.lang.String VAR_3 = TYPE_2 . METHOD_4 ( VAR_1 , context ) ; if ( VAR_3 == null ) { VAR_3 = METHOD_5 ( ) . getString ( VAR_4 ) ; } VAR_5 . METHOD_6 ( ) ; VAR_6 . setText ( VAR_3 ) ; VAR_6 . METHOD_7 ( ) ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { TYPE_3 . i ( VAR_3 , STRING_1 ) ; java.lang.String VAR_4 = java.lang.String . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; java.lang.String VAR_5 = java.lang.String . METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; java.lang.String VAR_6 = java.lang.String . METHOD_2 ( VAR_2 ) ; java.lang.String [ ] params = new java.lang.String [ ] { VAR_4 , VAR_5 , VAR_6 } ; new TYPE_4 ( ) . execute ( params ) ; return null ; }\n", "fixed": "public void METHOD_1 ( TYPE_2 VAR_1 , double VAR_2 ) { if ( VAR_1 != null ) { TYPE_3 . i ( VAR_3 , STRING_1 ) ; java.lang.String VAR_4 = java.lang.String . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; java.lang.String VAR_5 = java.lang.String . METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; java.lang.String VAR_6 = java.lang.String . METHOD_2 ( VAR_2 ) ; java.lang.String [ ] params = new java.lang.String [ ] { VAR_4 , VAR_5 , VAR_6 } ; new TYPE_4 ( ) . execute ( params ) ; } }\n"}
{"problem": "private void METHOD_1 ( ) { METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_2 ( STRING_3 , STRING_4 ) ; METHOD_2 ( STRING_5 , STRING_6 ) ; METHOD_2 ( STRING_7 , STRING_8 ) ; METHOD_2 ( STRING_9 , STRING_10 ) ; METHOD_2 ( STRING_11 , STRING_12 ) ; METHOD_2 ( STRING_13 , STRING_14 ) ; }\n", "fixed": "private void METHOD_1 ( ) { new java.lang.Thread ( ( ) - > { METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_2 ( STRING_3 , STRING_4 ) ; METHOD_2 ( STRING_5 , STRING_6 ) ; METHOD_2 ( STRING_7 , STRING_8 ) ; METHOD_2 ( STRING_9 , STRING_10 ) ; METHOD_2 ( STRING_11 , STRING_12 ) ; METHOD_2 ( STRING_13 , STRING_14 ) ; } ) . start ( ) ; }\n"}
{"problem": "public boolean METHOD_1 ( java.util.Map < java.lang.Integer , java.lang.Integer > VAR_1 ) { if ( VAR_1 == null ) { return true ; } if ( ( VAR_2 ) == null ) { this . VAR_2 = new TYPE_1 < java.lang.Integer > ( VAR_1 ) ; } else { VAR_2 . METHOD_2 ( VAR_1 ) ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( java.util.Map < java.lang.Integer , java.lang.Integer > VAR_1 ) { if ( VAR_1 == null ) { return true ; } if ( ( VAR_2 ) == null ) { this . VAR_2 = new TYPE_1 < java.lang.Integer > ( ) ; } VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }\n"}
{"problem": "public java.lang.Object METHOD_1 ( ) { java.lang.Class < ? > VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { throw new TYPE_1 ( STRING_1 ) ; } final TYPE_2 VAR_2 = new TYPE_2 ( ) ; try { return VAR_2 . METHOD_3 ( METHOD_4 ( ) , VAR_1 ) ; } catch ( java.io.IOException VAR_3 ) { throw new TYPE_1 ( STRING_2 , VAR_3 ) ; } }\n", "fixed": "public java.lang.Object METHOD_1 ( ) { java.lang.Class < ? > VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { throw new TYPE_1 ( STRING_1 ) ; } try { return VAR_2 . METHOD_3 ( METHOD_4 ( ) , VAR_1 ) ; } catch ( java.io.IOException VAR_3 ) { throw new TYPE_1 ( STRING_2 , VAR_3 ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 { TYPE_7 node = TYPE_8 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( TYPE_9 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ) ; if ( node != null ) { return METHOD_8 ( node ) ; } else { return null ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 { TYPE_7 node = METHOD_5 ( VAR_1 . METHOD_4 ( ) , TYPE_9 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ) ; if ( node != null ) { return METHOD_8 ( node ) ; } else { return null ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 != null ) { if ( ( VAR_4 ) <= VAR_2 ) { METHOD_3 ( VAR_1 , null ) ; } else { VAR_3 = VAR_3 . METHOD_4 ( VAR_2 ) ; } } METHOD_5 ( ) ; if ( ( VAR_5 ) && ( ! ( VAR_6 ) ) ) { VAR_7 . METHOD_6 ( VAR_8 , VAR_9 , VAR_10 ) ; } return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 != null ) { if ( ( VAR_4 ) <= VAR_2 ) { METHOD_3 ( VAR_1 , null ) ; } else { VAR_3 = VAR_3 . METHOD_4 ( VAR_2 ) ; } } METHOD_5 ( ) ; if ( VAR_5 ) { VAR_7 . METHOD_6 ( VAR_8 , VAR_9 , VAR_10 ) ; } return VAR_3 ; }\n"}
{"fixCommitSHA1": "53b0527a5dd35cd2e36650a6352b882cc32f714f", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    * @throws IOException\n    */\n   public void put(Put put, Integer lockid) throws IOException {\n    this.put(put, lockid, put.writeToWAL());\n   }\n   /**", "fixed": "    * @throws IOException\n    */\n   public void put(Put put, Integer lockid) throws IOException {\n    this.put(put, lockid, put.getWriteToWAL());\n   }\n   /**", "sourceBeforeFix": "put.writeToWAL()", "sourceAfterFix": "put.getWriteToWAL()"}
{"problem": "public static boolean METHOD_1 ( java.util.Map < java.lang.String , java.lang.Integer > VAR_1 , TYPE_1 VAR_2 ) { java.lang.String VAR_3 = VAR_2 . METHOD_2 ( ) ; return ( VAR_1 . METHOD_3 ( VAR_3 ) ) && ( ( VAR_1 . get ( VAR_3 ) ) == ( VAR_2 . METHOD_4 ( ) ) ) ; }\n", "fixed": "public static boolean METHOD_1 ( java.util.Map < java.lang.String , java.lang.Integer > VAR_1 , TYPE_1 VAR_2 ) { java.lang.String VAR_3 = VAR_2 . METHOD_2 ( ) ; return ( VAR_1 . METHOD_3 ( VAR_3 ) ) && ( ( VAR_1 . get ( VAR_3 ) ) >= ( VAR_2 . METHOD_4 ( ) ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( int step , int VAR_1 , long startTime ) { java.lang.System.out.println ( ( ( VAR_2 . format ( ( ( ( ( double ) ( step ) ) / ( ( double ) ( VAR_1 ) ) ) * INT_1 ) ) ) + STRING_1 ) ) ; TYPE_1 . METHOD_2 ( ) ; java.lang.System.out.println ( ( ( ( ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) - ( TYPE_2 . METHOD_3 ( ) . METHOD_5 ( ) ) ) / ( INT_2 * INT_2 ) ) + STRING_2 ) ) ; }\n", "fixed": "protected void METHOD_1 ( int step , int VAR_1 , long startTime ) { java.lang.System.out.println ( ( ( VAR_2 . format ( ( ( ( ( double ) ( step ) ) / ( ( double ) ( VAR_1 ) ) ) * INT_1 ) ) ) + STRING_1 ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"project": "Closure", "bugId": 24, "problem": " private void findAliases(NodeTraversal t) {\n           String qualifiedName =\n               aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n         } else {\n           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n        }\n       }\n     }", "fixed": " private void findAliases(NodeTraversal t) {\n           String qualifiedName =\n               aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n        } else if (v.isBleedingFunction()) {\n        } else if (parent.getType() == Token.LP) {\n         } else {\n           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n       }\n     }", "observations": "Again, a kind of Wrap-with-IfElse where some conditionals were missing.", "repairActions": ["condBranIfElseAdd", "condBranRem", "condExpExpand", "mcAdd"], "repairPatterns": ["condBlockOthersAdd", "expLogicExpand", "missComp"]}
{"fixCommitSHA1": "8abd59029e7c0bc0973b492fd84a386b26661bc7", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "         long start = System.currentTimeMillis();\n         ChannelFuture future = bootstrap.connect(getConnectAddress());\n         try {\n            boolean ret = future.awaitUninterruptibly(3000, TimeUnit.MILLISECONDS);\n             if (ret && future.isSuccess()) {\n                 Channel newChannel = future.channel();", "fixed": "         long start = System.currentTimeMillis();\n         ChannelFuture future = bootstrap.connect(getConnectAddress());\n         try {\n            boolean ret = future.awaitUninterruptibly(getConnectTimeout(), TimeUnit.MILLISECONDS);\n             if (ret && future.isSuccess()) {\n                 Channel newChannel = future.channel();", "sourceBeforeFix": "getTimeout()", "sourceAfterFix": "getConnectTimeout()"}
{"problem": "public static < TYPE_1 , TYPE_2 > void METHOD_1 ( final java.util.Map < ? super TYPE_1 , ? super TYPE_2 > VAR_1 , final java.util.Map < ? extends TYPE_1 , ? extends TYPE_2 > VAR_2 ) throws java.lang.NullPointerException { VAR_1 . METHOD_2 ( ) ; if ( ! ( TYPE_3 . isEmpty ( VAR_2 ) ) ) { VAR_1 . METHOD_3 ( VAR_2 ) ; } }\n", "fixed": "public static < TYPE_1 , TYPE_2 > void METHOD_1 ( final java.util.Map < ? super TYPE_1 , ? super TYPE_2 > VAR_1 , final java.util.Map < ? extends TYPE_1 , ? extends TYPE_2 > VAR_2 ) throws java.lang.NullPointerException { if ( VAR_1 == VAR_2 ) { return ; } VAR_1 . METHOD_2 ( ) ; if ( ! ( TYPE_3 . isEmpty ( VAR_2 ) ) ) { VAR_1 . METHOD_3 ( VAR_2 ) ; } }\n"}
{"fixCommitSHA1": "ed1852a789daeef03ab260ef4f962bca9160d13e", "projectName": "iluwatar.java-design-patterns", "bugType": "Change Identifier Used", "problem": "   \n  private final Prototype testedPrototype;\n   /**\n* The expected {@link Prototype", "fixed": "   \n  private final P testedPrototype;\n   /**\n* The expected {@link Prototype", "sourceBeforeFix": "final Prototype testedPrototype", "sourceAfterFix": "final P testedPrototype"}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 < java.lang.String > VAR_2 = VAR_3 . METHOD_3 ( ) ; TYPE_3 < java.lang.String > VAR_4 = VAR_2 . iterator ( ) ; int VAR_5 = 0 ; while ( VAR_4 . METHOD_4 ( ) ) { VAR_1 . METHOD_5 ( STRING_1 ) . get ( VAR_5 ) . add ( TYPE_1 . METHOD_2 ( VAR_4 . METHOD_6 ( ) ) ) ; } return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 < java.lang.String > VAR_2 = VAR_3 . METHOD_3 ( ) ; TYPE_3 < java.lang.String > VAR_4 = VAR_2 . iterator ( ) ; int VAR_5 = 0 ; while ( VAR_4 . METHOD_4 ( ) ) { VAR_1 . METHOD_5 ( STRING_1 ) . get ( VAR_5 ) . add ( TYPE_1 . METHOD_2 ( VAR_4 . METHOD_6 ( ) ) ) ; VAR_5 ++ ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "fixed": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private static void METHOD_1 ( ) { try { VAR_1 = TYPE_1 . METHOD_2 ( ( ( VAR_2 ) + ( VAR_3 ) ) , VAR_4 , VAR_5 ) ; } catch ( TYPE_2 VAR_6 ) { VAR_7 . METHOD_3 ( VAR_8 , ( STRING_1 + VAR_6 ) ) ; } try { VAR_9 = VAR_1 . METHOD_4 ( ) ; } catch ( TYPE_2 VAR_6 ) { VAR_7 . METHOD_3 ( VAR_8 , ( STRING_1 + VAR_6 ) ) ; } }\n", "fixed": "private static void METHOD_1 ( ) { try { VAR_1 = TYPE_1 . METHOD_2 ( ( ( VAR_2 ) + ( VAR_3 ) ) , VAR_4 , VAR_5 ) ; VAR_9 = VAR_1 . METHOD_4 ( ) ; } catch ( TYPE_2 VAR_6 ) { VAR_7 . METHOD_3 ( VAR_8 , ( STRING_1 + VAR_6 ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { for ( int i = 0 ; i >= ( this . size ( ) ) ; i ++ ) { if ( this . METHOD_2 ( i ) . equals ( VAR_1 ) ) { this . remove ( i ) ; break ; } else { continue ; } } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { for ( int i = 0 ; i <= ( this . size ( ) ) ; i ++ ) { if ( this . get ( i ) . equals ( VAR_1 ) ) { this . remove ( i ) ; break ; } else { continue ; } } }\n"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "* @see\n* @see NormalizableKey\n \t */\n\tpublic void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "fixed": "* @see\n* @see NormalizableKey\n \t */\n\tpublic abstract void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "a7ae8848fabd6fc4d7c0ee04d80eadc9ec02d43b", "projectName": "alibaba.druid", "bugType": "Change Modifier", "problem": "      * @param m mappings to be stored in this map\r\n      */\r\n     @Override\r\n    public void putAll(Map<? extends K, ? extends V> m) {\r\n         for (Map.Entry<? extends K, ? extends V> e : m.entrySet()) {\r\n             put(e.getKey(), e.getValue());\r\n         }\r", "fixed": "      * @param m mappings to be stored in this map\r\n      */\r\n     @Override\r\n    public final void putAll(Map<? extends K, ? extends V> m) {\r\n         for (Map.Entry<? extends K, ? extends V> e : m.entrySet()) {\r\n             put(e.getKey(), e.getValue());\r\n         }\r", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"problem": "private void METHOD_1 ( ) { if ( ( VAR_1 ) > 1 ) { ( VAR_1 ) -- ; VAR_2 . METHOD_2 ( VAR_3 , VAR_1 ) ; if ( ! ( VAR_4 ) ) { ( VAR_5 ) -- ; VAR_2 . METHOD_2 ( VAR_6 , VAR_5 ) ; } } }\n", "fixed": "private void METHOD_1 ( ) { if ( ( VAR_1 ) > 1 ) { ( VAR_1 ) -- ; VAR_2 . METHOD_2 ( VAR_3 , VAR_1 ) ; if ( ( ! ( VAR_4 ) ) && ( ( VAR_5 ) > 1 ) ) { ( VAR_5 ) -- ; VAR_2 . METHOD_2 ( VAR_6 , VAR_5 ) ; } } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { } } ) ; VAR_1 = event . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( ( STRING_1 + ( VAR_1 ) ) , ( STRING_1 + ( VAR_1 . length ) ) ) ; if ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . length ) > 0 ) ) { VAR_2 . METHOD_6 ( VAR_1 [ 0 ] ) ; ( VAR_3 ) ++ ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { VAR_1 = event . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( ( STRING_1 + ( VAR_1 ) ) , ( STRING_1 + ( VAR_1 . length ) ) ) ; if ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . length ) > 0 ) ) { VAR_2 . METHOD_6 ( VAR_1 [ 0 ] ) ; ( VAR_3 ) ++ ; } }\n"}
{"problem": "boolean METHOD_1 ( float VAR_1 , int VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { return false ; } int VAR_3 = METHOD_3 ( VAR_1 ) ; if ( VAR_4 . METHOD_4 ( VAR_5 , VAR_5 . METHOD_5 ( ) , VAR_3 ) ) { METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( this ) ; return true ; } return false ; }\n", "fixed": "boolean METHOD_1 ( float VAR_1 , int VAR_2 ) { if ( ( ! ( METHOD_2 ( ) ) ) || ( ( VAR_5 ) == null ) ) { return false ; } int VAR_3 = METHOD_3 ( VAR_1 ) ; if ( VAR_4 . METHOD_4 ( VAR_5 , VAR_5 . METHOD_5 ( ) , VAR_3 ) ) { METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( this ) ; return true ; } return false ; }\n"}
{"fixCommitSHA1": "80ab41dff6ec63a591cb2f7450a6c8582f7b3fcb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Boolean Literal", "problem": "     @Override\n     public boolean isCloseable() {\n        return false;\n     }\n }", "fixed": "     @Override\n     public boolean isCloseable() {\n        return true;\n     }\n }", "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}
{"problem": "public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( ) ; METHOD_5 ( VAR_1 , VAR_2 , STRING_1 , STRING_2 ) ; METHOD_6 ( VAR_1 , VAR_3 , STRING_1 ) ; METHOD_6 ( VAR_4 , VAR_3 , STRING_3 ) ; METHOD_5 ( VAR_5 , VAR_6 , STRING_4 ) ; }\n", "fixed": "public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( ) ; METHOD_6 ( VAR_1 , VAR_2 , STRING_1 , STRING_2 ) ; METHOD_6 ( VAR_1 , VAR_3 , STRING_1 ) ; METHOD_6 ( VAR_4 , VAR_3 , STRING_3 ) ; METHOD_5 ( VAR_5 , VAR_6 , STRING_4 ) ; }\n"}
{"fixCommitSHA1": "5db9d6a3a54f5f3850a9dd2bedebdce45eca082a", "projectName": "Alluxio.alluxio", "bugType": "Change Boolean Literal", "problem": "   USER_NETWORK_NETTY_CHANNEL_POOL_SIZE_MAX(Name.USER_NETWORK_NETTY_CHANNEL_POOL_SIZE_MAX, 1024),\n   USER_NETWORK_NETTY_CHANNEL_POOL_GC_THRESHOLD_MS(\n       Name.USER_NETWORK_NETTY_CHANNEL_POOL_GC_THRESHOLD_MS, 300 * Constants.SECOND_MS),\n  USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED, false),\n   USER_UFS_DELEGATION_READ_BUFFER_SIZE_BYTES(Name.USER_UFS_DELEGATION_READ_BUFFER_SIZE_BYTES,\n       \"8MB\"),\n   USER_UFS_DELEGATION_WRITE_BUFFER_SIZE_BYTES(Name.USER_UFS_DELEGATION_WRITE_BUFFER_SIZE_BYTES,", "fixed": "   USER_NETWORK_NETTY_CHANNEL_POOL_SIZE_MAX(Name.USER_NETWORK_NETTY_CHANNEL_POOL_SIZE_MAX, 1024),\n   USER_NETWORK_NETTY_CHANNEL_POOL_GC_THRESHOLD_MS(\n       Name.USER_NETWORK_NETTY_CHANNEL_POOL_GC_THRESHOLD_MS, 300 * Constants.SECOND_MS),\n  USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED, true),\n   USER_UFS_DELEGATION_READ_BUFFER_SIZE_BYTES(Name.USER_UFS_DELEGATION_READ_BUFFER_SIZE_BYTES,\n       \"8MB\"),\n   USER_UFS_DELEGATION_WRITE_BUFFER_SIZE_BYTES(Name.USER_UFS_DELEGATION_WRITE_BUFFER_SIZE_BYTES,", "sourceBeforeFix": "USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED,false)", "sourceAfterFix": "USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED,true)"}
{"problem": "private void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_1 VAR_2 ) { if ( VAR_2 . METHOD_2 ( ) . contains ( VAR_1 ) ) { VAR_2 . METHOD_3 ( VAR_1 ) ; } for ( TYPE_2 VAR_3 : VAR_2 . METHOD_2 ( ) ) if ( VAR_3 instanceof TYPE_1 ) METHOD_1 ( VAR_1 , ( ( TYPE_1 ) ( VAR_3 ) ) ) ; }\n", "fixed": "private void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_1 VAR_2 ) { if ( VAR_2 . METHOD_2 ( ) . contains ( VAR_1 ) ) { VAR_2 . METHOD_3 ( VAR_1 ) ; } if ( VAR_2 . METHOD_2 ( ) . contains ( VAR_2 ) ) { VAR_2 . METHOD_3 ( VAR_2 ) ; } for ( TYPE_2 VAR_3 : VAR_2 . METHOD_2 ( ) ) if ( VAR_3 instanceof TYPE_1 ) METHOD_1 ( VAR_1 , ( ( TYPE_1 ) ( VAR_3 ) ) ) ; }\n"}
{"problem": "public TYPE_1 update ( TYPE_2 VAR_1 ) { VAR_2 . info ( STRING_1 , VAR_1 ) ; TYPE_2 response = null ; try { response = VAR_3 . update ( VAR_1 ) ; } catch ( TYPE_3 VAR_4 ) { VAR_2 . error ( STRING_2 , VAR_4 . METHOD_1 ( ) ) ; return TYPE_1 . status ( VAR_5 ) . METHOD_2 ( VAR_4 . METHOD_1 ( ) ) ; } return new TYPE_1 < TYPE_2 > ( response , VAR_6 ) ; }\n", "fixed": "public TYPE_1 update ( TYPE_2 VAR_1 ) { VAR_2 . info ( STRING_1 , VAR_1 ) ; TYPE_2 response = null ; try { VAR_3 . update ( VAR_1 ) ; } catch ( TYPE_3 VAR_4 ) { VAR_2 . error ( STRING_2 , VAR_4 . METHOD_1 ( ) ) ; return TYPE_1 . status ( VAR_5 ) . METHOD_2 ( VAR_4 . METHOD_1 ( ) ) ; } return new TYPE_1 < java.lang.Void > ( VAR_6 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_2 . METHOD_2 ( ) . METHOD_4 ( false ) ; if ( ! ( VAR_2 ) ) { getActivity ( ) . METHOD_5 ( new android.content.Intent ( VAR_3 ) ) ; TYPE_3 . METHOD_2 ( ) . METHOD_6 ( this ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) && ( ! ( VAR_2 ) ) ) { TYPE_2 . METHOD_2 ( ) . METHOD_4 ( false ) ; getActivity ( ) . METHOD_5 ( new android.content.Intent ( VAR_3 ) ) ; TYPE_3 . METHOD_2 ( ) . METHOD_6 ( this ) ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { java.util.Set < ? extends TYPE_1 > VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( null , output ) ; if ( VAR_2 != null ) { for ( TYPE_1 VAR_3 : VAR_2 ) { if ( VAR_3 . getName ( ) . equals ( VAR_4 ) ) { VAR_1 = VAR_3 ; break ; } } } } return VAR_1 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { java.util.Set < ? extends TYPE_1 > VAR_2 = METHOD_3 ( ) . METHOD_4 ( null , output ) ; if ( VAR_2 != null ) { for ( TYPE_1 VAR_3 : VAR_2 ) { if ( VAR_3 . getName ( ) . equals ( VAR_4 ) ) { VAR_1 = VAR_3 ; break ; } } } } return VAR_1 ; }\n"}
{"problem": "public TYPE_1 < TYPE_2 > METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_3 , java.io.IOException { this . VAR_1 = VAR_1 ; VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; final TYPE_1 < TYPE_2 > VAR_4 = new TYPE_4 < > ( ) ; for ( final int key : VAR_2 . keys ( ) ) { VAR_4 . put ( key , this . METHOD_3 ( key ) ) ; } return null ; }\n", "fixed": "public TYPE_1 < TYPE_2 > METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_3 , java.io.IOException { this . VAR_1 = VAR_1 ; VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; final TYPE_1 < TYPE_2 > VAR_4 = new TYPE_4 < > ( ) ; for ( final int key : VAR_2 . keys ( ) ) { VAR_4 . put ( key , this . METHOD_3 ( key ) ) ; } return VAR_4 ; }\n"}
{"problem": "private void METHOD_1 ( boolean VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( this ) ; if ( VAR_1 || ( TYPE_1 . METHOD_3 ( this , VAR_2 ) ) ) { VAR_3 . METHOD_4 ( VAR_4 ) ; VAR_5 . METHOD_4 ( VAR_6 ) ; if ( VAR_7 ) { VAR_8 . METHOD_4 ( VAR_6 ) ; } } else { VAR_3 . METHOD_4 ( VAR_6 ) ; VAR_5 . METHOD_4 ( VAR_4 ) ; if ( VAR_7 ) { VAR_8 . METHOD_4 ( VAR_4 ) ; } } }\n", "fixed": "public void METHOD_1 ( boolean VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( this ) ; if ( VAR_1 || ( TYPE_1 . METHOD_3 ( this , VAR_2 ) ) ) { VAR_3 . METHOD_4 ( VAR_4 ) ; VAR_5 . METHOD_4 ( VAR_6 ) ; if ( VAR_7 ) { VAR_8 . METHOD_4 ( VAR_6 ) ; } } else { VAR_3 . METHOD_4 ( VAR_6 ) ; VAR_5 . METHOD_4 ( VAR_4 ) ; if ( VAR_7 ) { VAR_8 . METHOD_4 ( VAR_4 ) ; } } }\n"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Heartbeat_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         byte[] request = getRequestBytes(null, header);\n         Request obj = (Request) decode(request);\n         Assert.assertEquals(null, obj.getData());", "fixed": "     @Test\n     public void test_Decode_Return_Request_Heartbeat_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         byte[] request = getRequestBytes(null, header);\n         Request obj = (Request) decode(request);\n         Assert.assertEquals(null, obj.getData());", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private int METHOD_1 ( final TYPE_1 line , final java.lang.String VAR_1 , final boolean VAR_2 , final int end ) { java.lang.String VAR_3 = line . getText ( ) ; if ( VAR_2 ) { VAR_3 = VAR_3 . toLowerCase ( ) ; } if ( end == ( - 1 ) ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return VAR_3 . METHOD_2 ( VAR_1 , end ) ; }\n", "fixed": "private int METHOD_1 ( final TYPE_1 line , final java.lang.String VAR_1 , final boolean VAR_2 , final int end ) { java.lang.String VAR_3 = line . getText ( ) ; if ( VAR_2 ) { VAR_3 = VAR_3 . toLowerCase ( ) ; } if ( end == ( - 1 ) ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return VAR_3 . METHOD_2 ( VAR_1 , ( end - 1 ) ) ; }\n"}
{"problem": "public static java.lang.Integer METHOD_1 ( int first , int VAR_1 ) { if ( ( ( first == 1 ) && ( VAR_1 != 0 ) ) || ( ( VAR_1 == 1 ) && ( first != 0 ) ) ) return 1 ; for ( int i = INT_1 ; ( i <= first ) && ( i <= VAR_1 ) ; i ++ ) { if ( ( ( first % i ) == 0 ) && ( ( VAR_1 % i ) == 0 ) ) return i ; } return - 1 ; }\n", "fixed": "public static java.lang.Integer METHOD_1 ( int first , int VAR_1 ) { if ( ( ( ( first == 0 ) || ( first == 1 ) ) || ( VAR_1 == 0 ) ) || ( VAR_1 == 1 ) ) return 1 ; for ( int i = INT_1 ; ( i <= first ) && ( i <= VAR_1 ) ; i ++ ) { if ( ( ( first % i ) == 0 ) && ( ( VAR_1 % i ) == 0 ) ) return i ; } return - 1 ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_1 = TYPE_3 . METHOD_3 ( ) ; if ( ( VAR_2 . METHOD_4 ( VAR_1 ) ) == ( VAR_3 ) ) { VAR_2 . METHOD_5 ( VAR_1 ) ; if ( ( VAR_4 ) != null ) { METHOD_6 ( ) ; } VAR_5 = true ; METHOD_7 ( ) ; } else { TYPE_1 . METHOD_8 ( STRING_1 , STRING_3 ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_1 = TYPE_3 . METHOD_3 ( ) ; if ( ( VAR_2 . METHOD_4 ( VAR_1 ) ) == ( VAR_3 ) ) { VAR_2 . METHOD_5 ( VAR_1 ) ; VAR_5 = true ; if ( ( VAR_4 ) != null ) { METHOD_6 ( ) ; } METHOD_7 ( ) ; } else { TYPE_1 . METHOD_8 ( STRING_1 , STRING_3 ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; } }\n"}
{"problem": "public static boolean METHOD_1 ( android.content.Context context , byte [ ] data , java.lang.String fileName , TYPE_1 VAR_1 , java.lang.String ... VAR_2 ) { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( context , VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) return false ; fileName = TYPE_1 . METHOD_3 ( fileName ) ; TYPE_2 file = VAR_3 . METHOD_4 ( fileName ) ; return TYPE_3 . METHOD_1 ( context , data , file . METHOD_5 ( ) ) ; }\n", "fixed": "public static boolean METHOD_1 ( android.content.Context context , byte [ ] data , java.lang.String fileName , TYPE_1 VAR_1 , java.lang.String ... VAR_2 ) { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( context , VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) return false ; TYPE_2 file = VAR_3 . METHOD_4 ( fileName ) ; return TYPE_3 . METHOD_1 ( context , data , file . METHOD_5 ( ) ) ; }\n"}
{"problem": "public int METHOD_1 ( final int [ ] VAR_1 ) { int result = 0 ; for ( int i = 0 ; i < ( VAR_1 . length ) ; ++ i ) { if ( ( VAR_1 [ i ] ) > 0 ) { ++ result ; } } return result >= n ? 1 : 0 ; }\n", "fixed": "public int METHOD_1 ( final int [ ] VAR_1 ) { int result = 0 ; for ( int i = 0 ; i < ( VAR_1 . length ) ; ++ i ) { result += VAR_1 [ i ] ; } return result >= n ? 1 : 0 ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 path = query . path ( ( STRING_1 + VAR_1 ) ) ; path . METHOD_2 ( ) . get ( ) . METHOD_3 ( new TYPE_3 < java.util.List < TYPE_1 > > ( ) { } ) ; java.util.List < TYPE_1 > VAR_2 = path . METHOD_2 ( ) . get ( ) . METHOD_3 ( new TYPE_3 < java.util.List < TYPE_1 > > ( ) { } ) ; return VAR_2 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 path = query . path ( ( STRING_1 + VAR_1 ) ) ; java.util.List < TYPE_1 > VAR_2 = path . METHOD_2 ( ) . get ( ) . METHOD_3 ( new TYPE_3 < java.util.List < TYPE_1 > > ( ) { } ) ; return VAR_2 ; }\n"}
{"problem": "private void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( INT_1 , INT_2 , INT_3 , INT_4 ) ; VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_4 ( new TYPE_2 ( this ) ) ; VAR_2 . METHOD_5 ( VAR_3 ) ; VAR_2 . METHOD_6 ( VAR_3 ) ; VAR_2 . METHOD_7 ( new TYPE_3 ( INT_5 , INT_5 , INT_5 , INT_5 ) ) ; METHOD_8 ( VAR_2 ) ; VAR_2 . METHOD_9 ( null ) ; METHOD_10 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( INT_1 , INT_2 , INT_3 , INT_4 ) ; VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_4 ( new TYPE_2 ( this ) ) ; VAR_2 . METHOD_5 ( VAR_3 ) ; VAR_2 . METHOD_6 ( VAR_3 ) ; VAR_2 . METHOD_7 ( new TYPE_3 ( INT_5 , INT_5 , INT_5 , INT_5 ) ) ; METHOD_8 ( VAR_2 ) ; VAR_2 . METHOD_9 ( null ) ; METHOD_10 ( 0 ) ; }\n"}
{"problem": "public static void METHOD_1 ( java.lang.String fileName , TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 , true ) ; VAR_2 . METHOD_3 ( VAR_5 , true ) ; java.lang.String result = VAR_2 . METHOD_4 ( VAR_1 ) ; java.lang.System.out.println ( result ) ; VAR_2 . METHOD_5 ( new java.io.File ( STRING_1 ) , VAR_1 ) ; }\n", "fixed": "public static void METHOD_1 ( java.lang.String fileName , TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 , true ) ; VAR_2 . METHOD_3 ( VAR_5 , true ) ; VAR_2 . METHOD_5 ( new java.io.File ( STRING_1 ) , VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { TYPE_2 . METHOD_2 ( VAR_1 ) ; java.io.File VAR_2 = new java.io.File ( STRING_1 ) ; java.lang.String VAR_3 = TYPE_3 . METHOD_3 ( VAR_2 , STRING_2 , STRING_3 ) ; TYPE_4 . assertEquals ( STRING_4 , true , TYPE_3 . METHOD_4 ( STRING_3 ) ) ; TYPE_3 . METHOD_5 ( VAR_3 ) ; TYPE_4 . assertEquals ( STRING_5 , false , TYPE_3 . METHOD_4 ( VAR_3 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { TYPE_2 . METHOD_2 ( VAR_1 ) ; java.io.File VAR_2 = new java.io.File ( STRING_1 ) ; java.lang.String VAR_3 = TYPE_3 . METHOD_3 ( VAR_2 , STRING_2 , STRING_3 ) ; TYPE_4 . assertEquals ( STRING_4 , true , TYPE_3 . METHOD_4 ( VAR_3 ) ) ; TYPE_3 . METHOD_5 ( VAR_3 ) ; TYPE_4 . assertEquals ( STRING_5 , false , TYPE_3 . METHOD_4 ( VAR_3 ) ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKubernetesPodsEndpointBuilder\n             extends\n                 AdvancedKubernetesPodsEndpointConsumerBuilder, AdvancedKubernetesPodsEndpointProducerBuilder {\n         default KubernetesPodsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKubernetesPodsEndpointBuilder\n             extends\n                 AdvancedKubernetesPodsEndpointConsumerBuilder, AdvancedKubernetesPodsEndpointProducerBuilder {\n         default KubernetesPodsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_1 key = METHOD_2 ( ) ; TYPE_2 c = TYPE_2 . METHOD_3 ( STRING_1 ) ; c . init ( VAR_2 , key ) ; java.lang.String temp = new java.lang.String ( TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ) ; byte [ ] VAR_3 = c . METHOD_6 ( temp . METHOD_7 ( ) ) ; return new java.lang.String ( VAR_3 ) ; } catch ( java.lang.Exception VAR_4 ) { return null ; } }\n", "fixed": "private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_1 key = METHOD_2 ( ) ; TYPE_2 c = TYPE_2 . METHOD_3 ( STRING_1 ) ; c . init ( VAR_2 , key ) ; byte [ ] VAR_3 = c . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; return new java.lang.String ( VAR_3 ) ; } catch ( java.lang.Exception VAR_4 ) { return null ; } }\n"}
{"fixCommitSHA1": "df0e14359abd61ff3a5713e5e12e116b3fb1c3ed", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " \t\n\tprivate static List<String> updateWarnings = null;\n \t/**\n \t * Convenience method to run the changesets using Liquibase to bring the database up to a", "fixed": " \t\n\tprivate static volatile List<String> updateWarnings = null;\n \t/**\n \t * Convenience method to run the changesets using Liquibase to bring the database up to a", "sourceBeforeFix": "10", "sourceAfterFix": "74"}
{"problem": "public void METHOD_1 ( ) { try { VAR_1 . set ( true ) ; TYPE_1 . METHOD_2 ( node , TYPE_2 . METHOD_3 ( ) , METHOD_4 ( ) , VAR_2 ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_3 . METHOD_5 ( ( node + STRING_1 ) , VAR_3 . METHOD_6 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { VAR_1 . set ( true ) ; TYPE_1 . METHOD_2 ( node , METHOD_4 ( ) , VAR_2 ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_3 . METHOD_5 ( ( node + STRING_1 ) , VAR_3 . METHOD_6 ( ) ) ; } }\n"}
{"problem": "public static void METHOD_1 ( ) { if ( ( VAR_1 ) == false ) { VAR_1 = true ; try { VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_2 ( ) ; } catch ( java.lang.Exception VAR_5 ) { throw new TYPE_1 ( VAR_5 ) ; } } }\n", "fixed": "public static void METHOD_1 ( ) { if ( ( VAR_1 ) == false ) { VAR_1 = true ; try { VAR_2 . METHOD_2 ( ) ; VAR_4 . METHOD_2 ( ) ; VAR_3 . METHOD_2 ( ) ; } catch ( java.lang.Exception VAR_5 ) { throw new TYPE_1 ( VAR_5 ) ; } } }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) { java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , \"0\" , STRING_4 , STRING_5 , STRING_6 } ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 c = new TYPE_2 ( VAR_2 ) ; try { c . METHOD_1 ( VAR_1 ) ; } catch ( java.lang.Exception VAR_3 ) { java.lang.System.err.println ( VAR_3 . METHOD_2 ( ) ) ; c . METHOD_3 ( ) ; } }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 c = new TYPE_2 ( VAR_2 ) ; try { c . METHOD_1 ( args ) ; } catch ( java.lang.Exception VAR_3 ) { java.lang.System.err.println ( VAR_3 . METHOD_2 ( ) ) ; c . METHOD_3 ( ) ; } }\n"}
{"problem": "private void METHOD_1 ( int VAR_1 ) throws java.io.IOException { int VAR_2 = 0 ; while ( true ) { TYPE_1 VAR_3 = METHOD_2 ( ) ; if ( ( ( ( VAR_3 == ( VAR_4 ) ) || ( VAR_3 == ( VAR_5 ) ) ) || ( VAR_3 == ( VAR_6 ) ) ) || ( VAR_2 >= VAR_1 ) ) { } METHOD_3 ( VAR_7 ) ; VAR_1 += VAR_7 ; } }\n", "fixed": "private void METHOD_1 ( int VAR_1 ) throws java.io.IOException { int VAR_2 = 0 ; while ( true ) { TYPE_1 VAR_3 = METHOD_2 ( ) ; if ( ( ( ( VAR_3 == ( VAR_4 ) ) || ( VAR_3 == ( VAR_5 ) ) ) || ( VAR_3 == ( VAR_6 ) ) ) || ( VAR_2 >= VAR_1 ) ) { break ; } METHOD_3 ( VAR_7 ) ; VAR_1 += VAR_7 ; } }\n"}
{"problem": "public void METHOD_1 ( android.view.View view ) { java.util.Map < java.lang.String , java.lang.String > params = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; params . put ( STRING_1 , STRING_2 ) ; params . put ( STRING_3 , STRING_4 ) ; java.lang.String url = ( VAR_1 ) + STRING_5 ; TYPE_1 . build ( ) . METHOD_2 ( this ) . METHOD_3 ( STRING_6 , STRING_7 ) . url ( url ) . params ( params ) . METHOD_4 ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { java.util.Map < java.lang.String , java.lang.String > params = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; params . put ( STRING_1 , STRING_2 ) ; params . put ( STRING_3 , STRING_4 ) ; java.lang.String url = ( VAR_1 ) + STRING_5 ; TYPE_1 . build ( ) . METHOD_2 ( this ) . url ( url ) . params ( params ) . METHOD_4 ( VAR_2 ) ; }\n"}
{"project": "Closure", "bugId": 44, "problem": " void add(String newcode) {\n       append(\" \");\n     }\n     append(newcode);", "fixed": " void add(String newcode) {\n       append(\" \");\n    } else if (c == '/' && getLastChar() == '/') {\n      append(\" \");\n     }\n     append(newcode);", "observations": "", "repairActions": ["condBranIfElseAdd", "mcAdd"], "repairPatterns": ["condBlockOthersAdd"]}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 c , int VAR_1 , int VAR_2 ) { VAR_3 [ VAR_1 ] [ VAR_2 ] . METHOD_2 ( c ) ; c . METHOD_3 ( VAR_1 ) ; c . METHOD_4 ( VAR_2 ) ; if ( c instanceof TYPE_2 ) { VAR_4 . add ( ( ( TYPE_2 ) ( c ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 c , int VAR_1 , int VAR_2 ) { VAR_3 [ VAR_1 ] [ VAR_2 ] . METHOD_2 ( c ) ; c . METHOD_3 ( VAR_1 ) ; c . METHOD_4 ( VAR_2 ) ; if ( ( c instanceof TYPE_2 ) && ( ! ( VAR_4 . contains ( ( ( TYPE_2 ) ( c ) ) ) ) ) ) { VAR_4 . add ( ( ( TYPE_2 ) ( c ) ) ) ; } }\n"}
{"problem": "public java.lang.Class < ? > METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { for ( java.lang.Class < ? > VAR_3 : VAR_1 . METHOD_2 ( ) ) { TYPE_2 VAR_4 = METHOD_3 ( VAR_3 ) ; if ( ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) ) == VAR_2 ) { return VAR_3 ; } } return null ; }\n", "fixed": "public java.lang.Class < ? > METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { for ( java.lang.Class < ? > VAR_3 : VAR_1 . METHOD_2 ( ) ) { TYPE_2 VAR_4 = METHOD_3 ( VAR_3 ) ; if ( ( VAR_4 != null ) && ( ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) ) == VAR_2 ) ) { return VAR_3 ; } } return null ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = java.util.Arrays.asList ( VAR_3 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . toString ( ) ) ; VAR_4 = ( ( TYPE_3 ) ( VAR_5 . METHOD_4 ( ( STRING_1 + ( VAR_2 ) ) ) ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = java.util.Arrays.asList ( VAR_3 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . toString ( ) ) ; java.lang.System.out.println ( VAR_2 ) ; VAR_4 = ( ( TYPE_3 ) ( VAR_5 . METHOD_4 ( ( STRING_1 + ( VAR_2 ) ) ) ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 { TYPE_3 VAR_3 = null ; try { VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; return VAR_3 . METHOD_3 ( ) ; } catch ( TYPE_5 VAR_4 ) { throw new TYPE_2 ( VAR_4 ) ; } }\n", "fixed": "public static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 { try { TYPE_3 VAR_3 = VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_3 ( ) ; } } catch ( TYPE_5 VAR_4 ) { throw new TYPE_2 ( VAR_4 ) ; } return null ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; METHOD_3 ( VAR_2 ) ; return true ; case VAR_4 : android.content.Intent VAR_5 = new android.content.Intent ( this , VAR_6 class ) ; METHOD_3 ( VAR_5 ) ; return true ; case VAR_7 : TYPE_2 . METHOD_4 ( this , VAR_8 , VAR_9 ) . show ( ) ; return true ; } return super . METHOD_1 ( item ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; METHOD_3 ( VAR_2 ) ; return true ; case VAR_7 : TYPE_2 . METHOD_4 ( this , VAR_8 , VAR_9 ) . show ( ) ; return true ; } return super . METHOD_1 ( item ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { int id = ( ( int ) ( VAR_1 . METHOD_2 ( ) ) ) ; METHOD_3 ( ( ( STRING_1 + id ) + STRING_2 ) ) ; TYPE_1 . METHOD_4 ( VAR_2 , ( ( STRING_3 + id ) + STRING_4 ) ) ; ( VAR_3 ) -- ; }\n", "fixed": "public void METHOD_1 ( ) { int id = ( ( int ) ( VAR_1 . METHOD_2 ( ) ) ) ; METHOD_3 ( ( ( STRING_1 + id ) + STRING_2 ) ) ; ( VAR_3 ) -- ; TYPE_1 . METHOD_4 ( VAR_2 , ( ( STRING_3 + id ) + STRING_4 ) , VAR_3 ) ; }\n"}
{"project": "Math", "bugId": 88, "problem": " protected RealPointValuePair getSolution() {\n         Integer basicRow =\n             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n         for (int i = 0; i < coefficients.length; i++) {\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n                 coefficients[i] =\n                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                     (restrictToNonNegative ? 0 : mostNegative);\n            if (basicRow != null) {\n                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                    if (tableau.getEntry(basicRow, j) == 1) {\n                         coefficients[i] = 0;\n                    }\n                }\n             }\n         }\n         return new RealPointValuePair(coefficients, f.getValue(coefficients));", "fixed": " protected RealPointValuePair getSolution() {\n         Integer basicRow =\n             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n        Set<Integer> basicRows = new HashSet<Integer>();\n         for (int i = 0; i < coefficients.length; i++) {\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            if (basicRows.contains(basicRow)) {\n                coefficients[i] = 0;\n            } else {\n                basicRows.add(basicRow);\n                 coefficients[i] =\n                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                     (restrictToNonNegative ? 0 : mostNegative);\n             }\n         }\n         return new RealPointValuePair(coefficients, f.getValue(coefficients));", "observations": "", "repairActions": ["assignAdd", "assignRem", "condBranIfElseAdd", "condBranRem", "loopRem", "mcAdd", "objInstAdd", "varAdd"], "repairPatterns": ["blockRemove", "condBlockRem", "wrapsIfElse", "wrongComp"]}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = true ; int offset = VAR_3 ; TYPE_2 p = VAR_4 . METHOD_2 ( ) ; if ( p == null ) p = VAR_5 ; do { VAR_1 . METHOD_3 ( p . x , p . y ) ; if ( VAR_2 ) { p . x += offset ; } else { p . y += offset ; } VAR_2 = ! VAR_2 ; } while ( METHOD_4 ( VAR_1 ) ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = true ; int offset = VAR_3 ; TYPE_2 p = VAR_4 . METHOD_2 ( ) ; if ( p == null ) p = VAR_5 ; VAR_1 . METHOD_3 ( p . x , p . y ) ; while ( METHOD_4 ( VAR_1 ) ) { if ( VAR_2 ) { p . x += offset ; } else { p . y += offset ; } VAR_2 = ! VAR_2 ; VAR_1 . METHOD_3 ( p . x , p . y ) ; } }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { if ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) == null ) throw new TYPE_2 ( STRING_2 ) ; java.lang.System.out.println ( STRING_3 ) ; return VAR_2 . METHOD_4 ( ( ( java.lang.Long ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ) ) ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { java.lang.System.out.println ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ; if ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) == null ) throw new TYPE_2 ( STRING_2 ) ; return VAR_2 . METHOD_4 ( ( ( java.lang.Long ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ) ) ; }\n"}
{"fixCommitSHA1": "eeeb1de4d4c7595fab59b51f0c31292e6d5d7fad", "projectName": "stanfordnlp.CoreNLP", "bugType": "Wrong Function Name", "problem": "             } catch (RejectedExecutionException e) {\n              List<CoreMap> failedSentences = wrapper.shutdownNow();\n               for (CoreMap failed : failedSentences) {\n                 doOneFailedSentence(annotation, failed);\n               }", "fixed": "             } catch (RejectedExecutionException e) {\n              List<CoreMap> failedSentences = wrapper.joinWithTimeout();\n               for (CoreMap failed : failedSentences) {\n                 doOneFailedSentence(annotation, failed);\n               }", "sourceBeforeFix": "wrapper.shutdownNow()", "sourceAfterFix": "wrapper.joinWithTimeout()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public int METHOD_1 ( int [ ] [ ] VAR_1 ) { boolean [ ] VAR_2 = new boolean [ VAR_1 . length ] ; int VAR_3 = 0 ; for ( int VAR_4 = 0 ; VAR_4 < ( VAR_1 . length ) ; VAR_4 ++ ) { if ( ! ( VAR_2 [ VAR_4 ] ) ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_4 ) ; } } }\n", "fixed": "public int METHOD_1 ( int [ ] [ ] VAR_1 ) { boolean [ ] VAR_2 = new boolean [ VAR_1 . length ] ; int VAR_3 = 0 ; for ( int VAR_4 = 0 ; VAR_4 < ( VAR_1 . length ) ; VAR_4 ++ ) { if ( ! ( VAR_2 [ VAR_4 ] ) ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_4 ) ; } } return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) && ( ( VAR_2 ) > ( ( VAR_3 ) * INT_1 ) ) ) { METHOD_2 ( ) ; } ( VAR_4 ) -- ; if ( ( VAR_4 ) <= 0 ) { VAR_4 = INT_1 ; METHOD_3 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) && ( ( VAR_2 ) > ( VAR_3 ) ) ) { METHOD_2 ( ) ; } ( VAR_4 ) -- ; if ( ( VAR_4 ) <= 0 ) { VAR_4 = INT_1 ; METHOD_3 ( ) ; } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( ) { TYPE_2 < TYPE_3 > VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( ) ) { return METHOD_4 ( VAR_3 . METHOD_5 ( TYPE_3 . METHOD_6 ( ) , VAR_1 ) ) ; } else { TYPE_3 . METHOD_7 ( VAR_1 . get ( ) ) ; return METHOD_8 ( TYPE_4 . METHOD_9 ( ) ) ; } }\n", "fixed": "public static TYPE_1 METHOD_1 ( ) { TYPE_2 < TYPE_3 > VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( ) ) { return METHOD_4 ( index . METHOD_5 ( TYPE_3 . METHOD_6 ( ) , VAR_1 ) ) ; } else { TYPE_3 . METHOD_7 ( VAR_1 . get ( ) ) ; return METHOD_8 ( TYPE_4 . METHOD_9 ( ) ) ; } }\n"}
{"fixCommitSHA1": "9b87c3358ccd2f6681f79d8da033c20f72197e6f", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         this.serviceReferenceUsageMap.clear();\n     }\n    void drainServiceUsage(ServiceReference<?> serviceReference, AtomicLong serviceUsageCount) {\n         if (serviceUsageCount != null && serviceReference != null) {\n             while(serviceUsageCount.decrementAndGet() >= 0) {\n                 this.bundleContext.ungetService(serviceReference);", "fixed": "         this.serviceReferenceUsageMap.clear();\n     }\n    private void drainServiceUsage(ServiceReference<?> serviceReference, AtomicLong serviceUsageCount) {\n         if (serviceUsageCount != null && serviceReference != null) {\n             while(serviceUsageCount.decrementAndGet() >= 0) {\n                 this.bundleContext.ungetService(serviceReference);", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 target ) { TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; if ( ( VAR_3 ) != null ) { VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) ; } VAR_1 . METHOD_5 ( ) . METHOD_7 ( VAR_4 ) ; VAR_1 . METHOD_5 ( ) . METHOD_8 ( VAR_5 ) ; VAR_1 . METHOD_5 ( ) . METHOD_9 ( VAR_6 ) ; VAR_1 . METHOD_5 ( ) . METHOD_10 ( VAR_7 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; if ( ( VAR_3 ) != null ) { VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) ; } VAR_1 . METHOD_5 ( ) . METHOD_7 ( VAR_4 ) ; VAR_1 . METHOD_5 ( ) . METHOD_8 ( VAR_5 ) ; VAR_1 . METHOD_5 ( ) . METHOD_9 ( VAR_6 ) ; VAR_1 . METHOD_5 ( ) . METHOD_10 ( VAR_7 ) ; }\n"}
{"problem": "public java.util.Set < java.lang.String > METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getText ( ) ; java.lang.String [ ] VAR_3 = VAR_1 . split ( \"\\n\" ) ; java.util.Set < java.lang.String > VAR_4 = new java.util.HashSet < > ( ) ; for ( java.lang.String VAR_5 : VAR_3 ) { VAR_4 . add ( VAR_5 ) ; } return VAR_4 ; }\n", "fixed": "public java.util.Set < java.lang.String > METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getText ( ) ; java.util.Set < java.lang.String > VAR_4 = new java.util.HashSet < > ( ) ; if ( ( VAR_1 . length ( ) ) == 0 ) { return VAR_4 ; } else { java.lang.String [ ] VAR_3 = VAR_1 . split ( \"\\n\" ) ; for ( java.lang.String VAR_5 : VAR_3 ) { VAR_4 . add ( VAR_5 ) ; } return VAR_4 ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 . equals ( STRING_1 ) ) && ( ( index ) != 0 ) ) { ( index ) -- ; } else if ( ( VAR_1 . equals ( STRING_2 ) ) && ( ( index ) < ( VAR_2 . length ) ) ) { ( index ) ++ ; } VAR_3 . METHOD_2 ( index ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 . equals ( STRING_1 ) ) && ( ( index ) != 0 ) ) { ( index ) -- ; } else if ( ( VAR_1 . equals ( STRING_2 ) ) && ( ( index ) < ( ( VAR_2 . length ) - 1 ) ) ) { ( index ) ++ ; } VAR_3 . METHOD_2 ( index ) ; }\n"}
{"fixCommitSHA1": "efa5b54542e6ccd1357433f3ae340e94efdd9f6e", "projectName": "apache.hive", "bugType": "Same Function Swap Args", "problem": "             transactionalListenerResponses =\n                 MetaStoreListenerNotifier.notifyEvent(transactionalListeners,\n                                                       EventType.DROP_TABLE,\n                                                      new DropTableEvent(tbl, deleteData, true, this),\n                                                       envContext);\n           }\n           success = ms.commitTransaction();", "fixed": "             transactionalListenerResponses =\n                 MetaStoreListenerNotifier.notifyEvent(transactionalListeners,\n                                                       EventType.DROP_TABLE,\n                                                      new DropTableEvent(tbl, true, deleteData, this),\n                                                       envContext);\n           }\n           success = ms.commitTransaction();", "sourceBeforeFix": "new DropTableEvent(tbl,deleteData,true,this)", "sourceAfterFix": "new DropTableEvent(tbl,true,deleteData,this)"}
{"problem": "public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { VAR_4 = VAR_1 ; VAR_5 = new TYPE_3 ( ) ; VAR_6 = new java.util.HashSet < TYPE_1 > ( ) ; VAR_3 . METHOD_2 ( VAR_5 ) ; TYPE_4 . METHOD_3 ( VAR_2 ) ; }\n", "fixed": "public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { VAR_4 = VAR_1 ; VAR_5 = new TYPE_3 ( ) ; VAR_6 = new java.util.HashSet < TYPE_1 > ( ) ; VAR_3 . METHOD_2 ( VAR_5 ) ; TYPE_4 . METHOD_3 ( VAR_2 , new TYPE_3 ( ) ) ; }\n"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String value ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ; VAR_2 . METHOD_7 ( METHOD_8 ( ) ) ; VAR_2 . setValue ( value ) ; VAR_2 . METHOD_9 ( ) ; }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String value ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ; VAR_2 . METHOD_7 ( METHOD_8 ( ) ) ; VAR_2 . setValue ( value ) ; VAR_2 . METHOD_9 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 class ) . METHOD_3 ( ) ; METHOD_2 ( VAR_2 class ) . METHOD_3 ( ) ; METHOD_2 ( VAR_3 class ) . METHOD_4 ( new TYPE_1 ( METHOD_5 ( ) ) ) ; METHOD_2 ( VAR_4 class ) . METHOD_3 ( ) ; METHOD_6 ( STRING_1 ) . METHOD_7 ( VAR_5 class ) ; METHOD_8 ( STRING_1 ) . METHOD_9 ( VAR_4 class , METHOD_10 ( ) ) ; }\n", "fixed": "protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 class ) . METHOD_3 ( ) ; METHOD_2 ( VAR_2 class ) . METHOD_3 ( ) ; METHOD_2 ( VAR_3 class ) . METHOD_4 ( new TYPE_1 ( METHOD_5 ( ) ) ) ; METHOD_2 ( VAR_4 class ) . METHOD_3 ( ) ; METHOD_6 ( STRING_1 ) . METHOD_7 ( VAR_5 class ) ; METHOD_6 ( STRING_1 ) . METHOD_7 ( VAR_4 class , METHOD_10 ( ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; this . VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_5 . METHOD_4 ( false ) ; VAR_5 . METHOD_5 ( new TYPE_3 ( ) { public boolean METHOD_6 ( android.view.View VAR_6 ) { METHOD_7 ( ) ; return true ; } } ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; this . VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_3 . METHOD_4 ( false ) ; VAR_3 . METHOD_5 ( new TYPE_3 ( ) { public boolean METHOD_6 ( android.view.View VAR_6 ) { METHOD_7 ( ) ; return true ; } } ) ; }\n"}
{"problem": "public void init ( TYPE_1 source , TYPE_2 VAR_1 ) { for ( java.lang.Long i = 1L ; i <= ( nodes . size ( ) ) ; i ++ ) { TYPE_3 element = new TYPE_3 ( i ) ; if ( ( element . getId ( ) ) == ( source . getId ( ) ) ) { element . METHOD_1 ( 0.0 ) ; } VAR_1 . METHOD_2 ( element ) ; } }\n", "fixed": "public void init ( TYPE_1 source , TYPE_2 VAR_1 ) { for ( java.lang.Long i = 1L ; i <= ( nodes . size ( ) ) ; i ++ ) { TYPE_3 element = new TYPE_3 ( i ) ; if ( element . getId ( ) . equals ( source . getId ( ) ) ) { element . METHOD_1 ( 0.0 ) ; } VAR_1 . METHOD_2 ( element ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return null ; } switch ( VAR_2 . getType ( ) ) { case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : return VAR_8 ; case VAR_9 : return VAR_10 ; case VAR_11 : return VAR_12 ; case VAR_13 : return VAR_14 ; } return null ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_3 VAR_2 ) { if ( VAR_2 == null ) { return null ; } switch ( VAR_2 . getType ( ) ) { case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : return VAR_8 ; case VAR_9 : return VAR_10 ; case VAR_11 : return VAR_12 ; case VAR_13 : return VAR_14 ; } return null ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , double VAR_2 ) { float VAR_3 = ( VAR_1 . METHOD_2 ( ) ) / INT_1 ; return VAR_1 . METHOD_3 ( ) . add ( new TYPE_2 ( TYPE_3 . METHOD_4 ( VAR_3 ) , 0 , TYPE_3 . METHOD_5 ( VAR_3 ) ) . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , double VAR_2 ) { float VAR_3 = ( VAR_1 . METHOD_2 ( ) ) / INT_1 ; return VAR_1 . METHOD_3 ( ) . add ( new java.util.Vector ( TYPE_3 . METHOD_4 ( VAR_3 ) , 0 , TYPE_3 . METHOD_5 ( VAR_3 ) ) . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.Exception VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { VAR_2 . error ( STRING_1 , VAR_1 . METHOD_3 ( ) , VAR_1 ) ; } TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; VAR_3 . METHOD_5 ( STRING_3 , VAR_1 . METHOD_3 ( ) ) ; return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.Exception VAR_1 ) { VAR_2 . error ( STRING_1 , VAR_1 . METHOD_3 ( ) , VAR_1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; VAR_3 . METHOD_5 ( STRING_3 , VAR_1 . METHOD_3 ( ) ) ; return VAR_3 ; }\n"}
{"problem": "private int METHOD_1 ( ) { if ( ! ( METHOD_2 ( VAR_1 ) ) ) { return VAR_2 ; } METHOD_3 ( ) ; if ( METHOD_4 ( VAR_1 ) ) { METHOD_3 ( ) ; } if ( METHOD_5 ( VAR_1 ) ) { METHOD_3 ( ) ; while ( METHOD_5 ( VAR_1 ) ) { METHOD_3 ( ) ; } return VAR_3 ; } while ( METHOD_2 ( VAR_1 ) ) { METHOD_6 ( ) ; } return VAR_2 ; }\n", "fixed": "private int METHOD_1 ( ) { if ( ! ( METHOD_2 ( VAR_1 ) ) ) { return VAR_2 ; } METHOD_3 ( ) ; if ( METHOD_4 ( VAR_1 ) ) { METHOD_3 ( ) ; } if ( METHOD_5 ( VAR_1 ) ) { METHOD_3 ( ) ; while ( METHOD_5 ( VAR_1 ) ) { METHOD_3 ( ) ; } return VAR_3 ; } while ( ! ( METHOD_2 ( VAR_1 ) ) ) { METHOD_6 ( ) ; } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { java.lang.Long VAR_3 = ( ( java.lang.Long ) ( VAR_4 . METHOD_2 ( ) ) ) ; if ( VAR_5 . contains ( VAR_3 ) ) { VAR_5 . remove ( VAR_3 ) ; } else { VAR_5 . add ( VAR_3 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { java.lang.Long VAR_3 = ( ( java.lang.Long ) ( VAR_4 . METHOD_2 ( ) ) ) ; if ( VAR_2 ) { if ( ! ( VAR_5 . contains ( VAR_3 ) ) ) { VAR_5 . add ( VAR_3 ) ; } } else { if ( VAR_5 . contains ( VAR_3 ) ) { VAR_5 . remove ( VAR_3 ) ; } } }\n"}
{"problem": "public java.lang.Object METHOD_1 ( TYPE_1 [ ] args , TYPE_2 context ) throws TYPE_3 , TYPE_4 { java.lang.String str = args [ 0 ] . getString ( ) ; if ( ! ( TYPE_5 . METHOD_2 ( str ) ) ) { throw new TYPE_3 ( ( ( STRING_1 + str ) + STRING_2 ) ) ; } return new TYPE_6 ( str ) ; }\n", "fixed": "public java.lang.Object METHOD_1 ( TYPE_1 [ ] args , TYPE_2 context ) throws TYPE_3 , TYPE_4 { java.lang.String str = args [ 0 ] . get ( ) . toString ( ) ; if ( ! ( TYPE_5 . METHOD_2 ( str ) ) ) { throw new TYPE_3 ( ( ( STRING_1 + str ) + STRING_2 ) ) ; } return new TYPE_6 ( str ) ; }\n"}
{"problem": "private static void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , int VAR_5 ) { if ( ( VAR_3 != null ) && ( VAR_4 != null ) ) { VAR_1 . METHOD_2 ( VAR_2 , VAR_5 , TYPE_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_4 ) ) ) ; VAR_1 . METHOD_5 ( VAR_2 , VAR_5 , TYPE_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) ) ) ; } }\n", "fixed": "private static void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , int VAR_5 ) { if ( VAR_4 != null ) { VAR_1 . METHOD_2 ( VAR_2 , VAR_5 , TYPE_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_4 ) ) ) ; } if ( VAR_3 != null ) { VAR_1 . METHOD_5 ( VAR_2 , VAR_5 , TYPE_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) ) ) ; } }\n"}
{"problem": "public java.util.List < java.lang.String > METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String [ ] VAR_2 ) { if ( ( VAR_2 . length ) <= 1 ) { return java.util.Arrays.asList ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; } else if ( ( VAR_2 . length ) <= INT_1 ) { return METHOD_2 ( VAR_2 , TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ; } else { return null ; } }\n", "fixed": "public java.util.List < java.lang.String > METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String [ ] VAR_2 ) { if ( ( VAR_2 . length ) <= 1 ) { return METHOD_2 ( VAR_2 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; } else if ( ( VAR_2 . length ) <= INT_1 ) { return METHOD_2 ( VAR_2 , TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ; } else { return null ; } }\n"}
{"problem": "private static void getData ( ) { VAR_1 . data = TYPE_1 . METHOD_1 ( ) ; VAR_2 = ( ( java.util.ArrayList < java.util.ArrayList < java.lang.Double > > ) ( VAR_3 . METHOD_2 ( 0 , INT_1 ) ) ) ; VAR_4 = ( ( java.util.ArrayList < java.util.ArrayList < java.lang.Double > > ) ( VAR_3 . METHOD_2 ( INT_1 , VAR_5 ) ) ) ; VAR_6 = TYPE_1 . METHOD_3 ( ) ; VAR_7 = TYPE_1 . METHOD_4 ( ) ; VAR_8 = TYPE_1 . METHOD_5 ( ) ; VAR_9 = TYPE_1 . METHOD_6 ( ) ; }\n", "fixed": "private static void getData ( ) { VAR_1 . data = TYPE_1 . METHOD_1 ( ) ; VAR_2 = new java.util.ArrayList < java.util.ArrayList < java.lang.Double > > ( VAR_3 . METHOD_2 ( 0 , INT_1 ) ) ; VAR_4 = new java.util.ArrayList < java.util.ArrayList < java.lang.Double > > ( VAR_3 . METHOD_2 ( INT_1 , VAR_5 ) ) ; VAR_6 = TYPE_1 . METHOD_3 ( ) ; VAR_7 = TYPE_1 . METHOD_4 ( ) ; VAR_8 = TYPE_1 . METHOD_5 ( ) ; VAR_9 = TYPE_1 . METHOD_6 ( ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 , TYPE_8 VAR_7 , TYPE_9 VAR_8 , TYPE_10 VAR_9 , TYPE_11 VAR_10 ) { return new TYPE_12 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , null ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 , TYPE_8 VAR_7 , TYPE_9 VAR_8 , TYPE_10 VAR_9 , TYPE_11 VAR_10 ) { return new TYPE_12 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJettyHttpEndpointBuilder9\n             extends\n                 EndpointConsumerBuilder {\n         default JettyHttpEndpointBuilder9 basic() {", "fixed": "     \n    public interface AdvancedJettyHttpEndpointBuilder9\n             extends\n                 EndpointConsumerBuilder {\n         default JettyHttpEndpointBuilder9 basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , INT_1 , INT_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( STRING_2 , INT_2 , INT_2 ) ; VAR_3 . METHOD_2 ( ( TYPE_2 event ) - > { VAR_1 . METHOD_3 ( VAR_4 ) ; } ) ; VAR_5 . METHOD_2 ( ( TYPE_2 event ) - > { VAR_2 . METHOD_3 ( VAR_4 ) ; } ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , INT_1 , INT_1 , VAR_4 ) ; TYPE_1 VAR_2 = new TYPE_1 ( STRING_2 , INT_2 , INT_2 , VAR_4 ) ; VAR_3 . METHOD_2 ( ( TYPE_2 event ) - > { VAR_1 . start ( ) ; } ) ; VAR_5 . METHOD_2 ( ( TYPE_2 event ) - > { VAR_2 . start ( ) ; } ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { if ( ( VAR_3 == ( VAR_4 ) ) || ( VAR_3 == ( VAR_5 ) ) ) { return false ; } return ( ( VAR_1 . METHOD_2 ( VAR_2 . offset ( VAR_3 . METHOD_3 ( ) ) ) . METHOD_4 ( ) ) == ( VAR_6 ) ) || ( ( VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_4 ( ) ) == ( VAR_7 ) ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { if ( ( VAR_3 == ( VAR_4 ) ) || ( VAR_3 == ( VAR_5 ) ) ) { return false ; } return ( ( VAR_1 . METHOD_2 ( VAR_2 . offset ( VAR_3 . METHOD_3 ( ) ) ) . METHOD_4 ( ) ) == ( VAR_6 ) ) || ( ( VAR_1 . METHOD_2 ( VAR_2 . offset ( VAR_3 . METHOD_3 ( ) ) ) ) == ( VAR_7 ) ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"problem": "public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( this . VAR_1 , ( ( this . VAR_2 ) == ( VAR_3 ) ? METHOD_3 ( ) : ( this . VAR_2 ) == ( VAR_4 ) ? METHOD_4 ( ) : METHOD_5 ( ) ) ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( int index ) { return TYPE_1 . METHOD_2 ( this . VAR_1 , ( ( this . VAR_2 ) == ( VAR_3 ) ? METHOD_3 ( ) : ( this . VAR_2 ) == ( VAR_4 ) ? METHOD_4 ( index ) : METHOD_5 ( ) ) ) ; }\n"}
{"problem": "private java.lang.Boolean METHOD_1 ( ) { try { java.lang.String VAR_1 = TYPE_1 . getText ( ) ; int VAR_2 = java.lang.Integer.parseInt ( TYPE_2 . getText ( ) ) ; int VAR_3 = java.lang.Integer.parseInt ( TYPE_3 . getText ( ) ) ; if ( VAR_1 . isEmpty ( ) ) { return false ; } else { return true ; } } catch ( TYPE_4 VAR_4 ) { TYPE_5 . METHOD_2 ( this , STRING_1 ) ; } return false ; }\n", "fixed": "private java.lang.Boolean METHOD_1 ( ) { try { java.lang.String VAR_1 = TYPE_1 . getText ( ) ; if ( VAR_1 . isEmpty ( ) ) { return false ; } else { return true ; } } catch ( TYPE_4 VAR_4 ) { TYPE_5 . METHOD_2 ( this , STRING_1 ) ; } return false ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 p = VAR_1 . METHOD_2 ( ) ; boolean VAR_2 = METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( p ) ; if ( VAR_2 ) { METHOD_3 ( ) . METHOD_6 ( new TYPE_3 ( VAR_3 ) ) ; } else { METHOD_3 ( ) . METHOD_6 ( new TYPE_3 ( VAR_4 ) ) ; } if ( VAR_5 . METHOD_7 ( ) ) METHOD_3 ( ) . METHOD_8 ( METHOD_3 ( ) . METHOD_9 ( p ) . toString ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 p = VAR_1 . METHOD_2 ( ) ; boolean VAR_2 = METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( p ) ; if ( VAR_2 ) { METHOD_3 ( ) . METHOD_6 ( new TYPE_3 ( VAR_3 ) ) ; } else { METHOD_3 ( ) . METHOD_6 ( new TYPE_3 ( VAR_4 ) ) ; } }\n"}
{"problem": "protected void METHOD_1 ( java.lang.String key , java.util.Map < java.lang.String , java.lang.Object > VAR_1 , TYPE_1 message ) { java.lang.String msg = message . METHOD_2 ( key ) ; if ( ! ( TYPE_2 . isEmpty ( msg ) ) ) VAR_2 . METHOD_3 ( message . METHOD_4 ( msg , VAR_1 ) ) ; }\n", "fixed": "protected void METHOD_1 ( java.lang.String key , java.util.Map < java.lang.String , java.lang.Object > VAR_1 , TYPE_1 message ) { java.lang.String msg = message . METHOD_2 ( key , VAR_1 ) ; if ( ! ( TYPE_2 . isEmpty ( msg ) ) ) VAR_2 . METHOD_3 ( msg ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { java.io.File VAR_1 = METHOD_2 ( ) ; java.io.File file = new java.io.File ( VAR_1 , STRING_1 ) ; try { VAR_2 = new java.util.ArrayList < > ( TYPE_1 . METHOD_3 ( file ) ) ; } catch ( java.io.IOException VAR_3 ) { } }\n", "fixed": "private void METHOD_1 ( ) { java.io.File VAR_1 = METHOD_2 ( ) ; java.io.File file = new java.io.File ( VAR_1 , STRING_1 ) ; try { VAR_2 = new java.util.ArrayList < > ( TYPE_1 . METHOD_3 ( file ) ) ; } catch ( java.io.IOException VAR_3 ) { VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; } }\n"}
{"problem": "private void METHOD_1 ( int VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) { VAR_4 . METHOD_2 ( ( STRING_1 + VAR_1 ) ) ; TYPE_2 VAR_5 = VAR_6 . METHOD_3 ( VAR_3 . getName ( ) . VAR_7 ) ; METHOD_4 ( VAR_3 , VAR_5 ) ; VAR_8 [ ( VAR_2 - 1 ) ] = VAR_3 ; TYPE_3 . assertTrue ( VAR_6 . METHOD_5 ( VAR_8 ) ) ; METHOD_6 ( java.lang.String.format ( VAR_9 , VAR_3 ) ) ; }\n", "fixed": "private void METHOD_1 ( int VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) { VAR_4 . METHOD_2 ( ( STRING_1 + VAR_1 ) ) ; VAR_8 [ ( VAR_2 - 1 ) ] = VAR_3 ; TYPE_3 . assertTrue ( VAR_6 . METHOD_5 ( VAR_8 ) ) ; METHOD_6 ( java.lang.String.format ( VAR_9 , VAR_3 ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( ) { VAR_1 = new java.util.ArrayList < > ( ) ; TYPE_1 [ ] parameters = VAR_2 class . METHOD_2 ( VAR_3 class ) ; for ( TYPE_1 VAR_4 : parameters ) { VAR_1 . add ( VAR_4 . name ( ) ) ; } }\n", "fixed": "protected void METHOD_1 ( ) { VAR_1 = new java.util.ArrayList < > ( ) ; TYPE_1 [ ] parameters = this . getClass ( ) . METHOD_2 ( VAR_3 class ) ; for ( TYPE_1 VAR_4 : parameters ) { VAR_1 . add ( VAR_4 . name ( ) ) ; } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) if ( VAR_2 . get ( i ) . METHOD_3 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) VAR_3 = i ; METHOD_4 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_5 ( ) , VAR_3 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) if ( ( VAR_2 . get ( i ) ) == VAR_1 ) VAR_3 = i ; METHOD_4 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_5 ( ) , VAR_3 ) ; }\n"}
{"fixCommitSHA1": "e7c6ca945fd2d85b1dd86483d699d7af2399d0fc", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "             if (empty) {\n                buf.clear();\n             }\n             channel.notifyFlushFutures(writtenBytes);", "fixed": "             if (empty) {\n                buf.discardReadBytes();\n             }\n             channel.notifyFlushFutures(writtenBytes);", "sourceBeforeFix": "buf.clear()", "sourceAfterFix": "buf.discardReadBytes()"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"problem": "private double METHOD_1 ( java.util.Date VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) { double VAR_4 = TYPE_2 . METHOD_2 ( VAR_3 , VAR_2 , ( - FLOAT_1 ) ) ; java.util.Calendar VAR_5 = METHOD_3 ( VAR_1 ) ; java.util.Calendar VAR_6 = METHOD_4 ( VAR_1 ) ; for ( TYPE_3 VAR_7 : VAR_8 ) { if ( METHOD_5 ( VAR_5 , VAR_6 , VAR_7 ) ) { if ( ( VAR_7 . METHOD_6 ( ) ) < VAR_4 ) { VAR_4 = VAR_7 . METHOD_6 ( ) ; } } } return VAR_4 ; }\n", "fixed": "private double METHOD_1 ( java.util.Date VAR_1 , double VAR_2 , TYPE_1 VAR_3 ) { double VAR_4 = TYPE_2 . METHOD_2 ( VAR_3 , VAR_2 , ( - FLOAT_1 ) ) ; java.util.Calendar VAR_5 = METHOD_3 ( VAR_1 ) ; java.util.Calendar VAR_6 = METHOD_4 ( VAR_1 ) ; for ( TYPE_3 VAR_7 : VAR_8 ) { if ( METHOD_5 ( VAR_5 , VAR_6 , VAR_7 ) ) { if ( ( VAR_7 . METHOD_6 ( ) ) < VAR_4 ) { VAR_4 = VAR_7 . METHOD_6 ( ) ; } } } return VAR_4 ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = ( VAR_1 != null ) ? VAR_1 . METHOD_3 ( ) : null ; TYPE_3 [ ] VAR_3 = TYPE_4 . METHOD_4 ( VAR_4 , VAR_2 , VAR_5 . x , VAR_5 . y , VAR_6 , VAR_7 . x , VAR_7 . y , VAR_8 ) ; METHOD_5 ( VAR_3 ) ; }\n", "fixed": "protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = ( VAR_1 != null ) ? VAR_1 . METHOD_3 ( ) : null ; TYPE_3 [ ] VAR_3 = TYPE_4 . METHOD_4 ( VAR_4 , VAR_2 , VAR_5 . x , VAR_5 . y , VAR_6 , VAR_7 . x , VAR_7 . y , VAR_8 ) ; METHOD_5 ( VAR_3 ) ; }\n"}
{"problem": "public void set ( TYPE_1 time , TYPE_2 position , TYPE_3 VAR_1 , TYPE_4 VAR_2 , TYPE_4 VAR_3 ) { METHOD_1 ( time . METHOD_2 ( ) ) ; this . position . set ( position ) ; this . VAR_1 . set ( VAR_1 ) ; this . VAR_2 . set ( VAR_2 ) ; this . VAR_3 . set ( VAR_3 ) ; }\n", "fixed": "public void set ( TYPE_1 time , TYPE_2 position , TYPE_3 VAR_1 , TYPE_4 VAR_2 , TYPE_4 VAR_3 ) { this . time . set ( time . METHOD_2 ( ) ) ; this . position . set ( position ) ; this . VAR_1 . set ( VAR_1 ) ; this . VAR_2 . set ( VAR_2 ) ; this . VAR_3 . set ( VAR_3 ) ; }\n"}
{"problem": "public void METHOD_1 ( float [ ] VAR_1 , int index ) { java.lang.String key = ( index > 0 ) ? STRING_1 + index : STRING_1 ; METHOD_2 ( key , VAR_1 , INT_1 ) ; VAR_2 . add ( key ) ; TYPE_1 . METHOD_3 ( METHOD_4 ( ) , key , VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( float [ ] VAR_1 , int index ) { java.lang.String key = ( index > 0 ) ? STRING_1 + index : STRING_1 ; METHOD_2 ( key , VAR_1 , INT_1 ) ; TYPE_1 . METHOD_3 ( METHOD_4 ( ) , key , VAR_1 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"problem": "public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; TYPE_2 . METHOD_2 ( this , view ) ; VAR_2 . METHOD_3 ( true ) ; VAR_2 . METHOD_4 ( new TYPE_3 ( getActivity ( ) ) ) ; VAR_3 = new TYPE_4 ( this ) ; VAR_2 . METHOD_5 ( VAR_3 ) ; TYPE_5 VAR_4 = ( ( TYPE_6 ) ( getActivity ( ) . METHOD_6 ( ) ) ) . METHOD_7 ( ) ; METHOD_8 ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; TYPE_2 . METHOD_2 ( this , view ) ; VAR_2 . METHOD_3 ( true ) ; VAR_2 . METHOD_4 ( new TYPE_3 ( getActivity ( ) ) ) ; VAR_3 = new TYPE_4 ( this ) ; VAR_2 . METHOD_5 ( VAR_3 ) ; METHOD_8 ( ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastSedaEndpointBuilder\n             extends\n                 AdvancedHazelcastSedaEndpointConsumerBuilder, AdvancedHazelcastSedaEndpointProducerBuilder {\n         default HazelcastSedaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastSedaEndpointBuilder\n             extends\n                 AdvancedHazelcastSedaEndpointConsumerBuilder, AdvancedHazelcastSedaEndpointProducerBuilder {\n         default HazelcastSedaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_2 VAR_1 = null ; try { VAR_1 = new TYPE_3 ( STRING_1 ) ; } catch ( TYPE_4 | java.io.IOException VAR_2 ) { VAR_2 . METHOD_4 ( ) ; } TYPE_5 VAR_3 = new TYPE_6 ( ) ; java.util.logging.Logger.getLogger ( STRING_2 ) . METHOD_5 ( VAR_1 ) ; VAR_4 . METHOD_6 ( VAR_5 ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; VAR_4 . METHOD_8 ( STRING_3 ) ; }\n", "fixed": "public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_2 VAR_1 = null ; try { VAR_1 = new TYPE_3 ( STRING_1 ) ; } catch ( TYPE_4 VAR_2 ) { VAR_2 . METHOD_4 ( ) ; } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_4 ( ) ; } TYPE_5 VAR_3 = new TYPE_6 ( ) ; java.util.logging.Logger.getLogger ( STRING_2 ) . METHOD_5 ( VAR_1 ) ; VAR_4 . METHOD_6 ( VAR_5 ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; VAR_4 . METHOD_8 ( STRING_3 ) ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"problem": "public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = TYPE_3 . get ( ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( VAR_3 ) == INT_1 ) { return ( TYPE_4 . METHOD_4 ( VAR_1 ) ) != null ; } return true ; }\n", "fixed": "public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = TYPE_3 . get ( ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_2 == null ) { return false ; } if ( ( VAR_3 ) == INT_1 ) { return ( TYPE_4 . METHOD_4 ( VAR_1 ) ) != null ; } return true ; }\n"}
{"problem": "public static byte [ ] METHOD_1 ( byte [ ] buffer , int start ) { byte [ ] b = new byte [ INT_1 ] ; b [ 0 ] = buffer [ start ] ; b [ 1 ] = buffer [ ( start + 1 ) ] ; b [ INT_2 ] = buffer [ ( start + INT_2 ) ] ; b [ INT_3 ] = buffer [ ( start + INT_3 ) ] ; return b ; }\n", "fixed": "public static byte [ ] METHOD_1 ( byte [ ] buffer , int start ) { byte [ ] b = new byte [ INT_1 ] ; b [ 0 ] = buffer [ ( start + INT_3 ) ] ; b [ 1 ] = buffer [ ( start + INT_2 ) ] ; b [ INT_2 ] = buffer [ ( start + 1 ) ] ; b [ INT_3 ] = buffer [ start ] ; return b ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "fixed": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "sourceBeforeFix": "id=15802", "sourceAfterFix": "id=10802"}
{"fixCommitSHA1": "cb50434e73c2a60893be26fa49109e759df834f6", "projectName": "brettwooldridge.HikariCP", "bugType": "Same Function More Args", "problem": "       bag.close();\n       try {\n         PoolBagEntry bagEntry = new PoolBagEntry(null, pool);\n          bag.add(bagEntry);\n          Assert.assertNotEquals(bagEntry, bag.borrow(100, TimeUnit.MILLISECONDS));\n       }", "fixed": "       bag.close();\n       try {\n         PoolBagEntry bagEntry = new PoolBagEntry(null, 0, pool);\n          bag.add(bagEntry);\n          Assert.assertNotEquals(bagEntry, bag.borrow(100, TimeUnit.MILLISECONDS));\n       }", "sourceBeforeFix": "new PoolBagEntry(null,pool)", "sourceAfterFix": "new PoolBagEntry(null,0,pool)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 15808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n     /**", "fixed": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 10808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n     /**", "sourceBeforeFix": "id=15809", "sourceAfterFix": "id=10809"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Collection < TYPE_3 > VAR_2 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_1 VAR_3 = VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ( VAR_1 . METHOD_5 ( ) ) != null ) { return VAR_3 . select ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( this : : METHOD_8 ) . METHOD_9 ( TYPE_4 . METHOD_10 ( ) ) ) ; } else { return VAR_3 ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Collection < TYPE_3 > VAR_2 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_1 VAR_3 = VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! ( VAR_1 . METHOD_5 ( ) . isEmpty ( ) ) ) { return VAR_3 . select ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( this : : METHOD_8 ) . METHOD_9 ( TYPE_4 . METHOD_10 ( ) ) ) ; } else { return VAR_3 ; } }\n"}
{"problem": "public boolean METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( VAR_1 . get ( i ) . METHOD_2 ( ) ) { return VAR_1 . get ( i ) . METHOD_3 ( ) . METHOD_4 ( ) ; } } return false ; }\n", "fixed": "public boolean METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ( VAR_1 . get ( i ) . METHOD_2 ( ) ) && ( VAR_1 . get ( i ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) { return true ; } } return false ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_2 ( VAR_4 ) . METHOD_3 ( VAR_5 ) ; VAR_1 . METHOD_2 ( VAR_6 ) . METHOD_3 ( VAR_5 ) ; if ( ( VAR_7 . METHOD_4 ( ) ) == 0 ) { VAR_7 . METHOD_5 ( VAR_1 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_2 ( VAR_4 ) . METHOD_3 ( VAR_5 ) ; VAR_1 . METHOD_2 ( VAR_6 ) . METHOD_3 ( VAR_5 ) ; if ( ( VAR_7 . METHOD_4 ( ) ) == 0 ) { VAR_7 . METHOD_5 ( VAR_1 , null , false ) ; } }\n"}
{"problem": "private void METHOD_1 ( boolean VAR_1 ) throws TYPE_1 { for ( TYPE_2 type : TYPE_2 . values ( ) ) { VAR_2 . METHOD_2 ( STRING_1 , type ) ; METHOD_3 ( VAR_1 , type . METHOD_4 ( ) , type . getType ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( boolean VAR_1 ) throws TYPE_1 { for ( TYPE_2 type : TYPE_2 . values ( ) ) { VAR_2 . METHOD_2 ( STRING_1 , type ) ; METHOD_3 ( VAR_1 , type . METHOD_4 ( ) , type . getType ( ) ) ; } }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; TYPE_2 . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; new TYPE_3 ( ) . METHOD_5 ( VAR_1 , VAR_4 ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; TYPE_2 . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( VAR_1 ) ; new TYPE_3 ( ) . METHOD_5 ( VAR_1 , VAR_4 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { if ( new java.io.File ( VAR_1 ) . METHOD_2 ( ) ) { final java.io.File [ ] list = TYPE_1 . METHOD_3 ( new java.io.File ( VAR_1 ) ) ; for ( int i = 0 ; i < ( list . length ) ; i ++ ) { final java.io.File VAR_2 = list [ i ] ; final java.lang.String VAR_3 = TYPE_1 . METHOD_4 ( VAR_2 ) ; if ( VAR_3 . METHOD_5 ( VAR_4 ) ) { TYPE_2 . METHOD_6 ( this , VAR_2 , true ) ; } } } }\n", "fixed": "public void METHOD_1 ( ) { if ( new java.io.File ( VAR_1 ) . METHOD_2 ( ) ) { final java.io.File [ ] list = TYPE_1 . METHOD_3 ( new java.io.File ( VAR_1 ) ) ; for ( java.io.File VAR_2 : list ) { final java.lang.String VAR_3 = TYPE_1 . METHOD_4 ( VAR_2 ) ; if ( VAR_3 . METHOD_5 ( VAR_4 ) ) { TYPE_2 . METHOD_6 ( this , VAR_2 , true ) ; } } } }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 , java.lang.String [ ] VAR_2 , int [ ] VAR_3 ) { if ( ( VAR_4 ) == VAR_1 ) { if ( ( VAR_3 [ 0 ] ) == ( VAR_5 ) ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; } else { METHOD_3 ( VAR_2 , new TYPE_1 ( ( ( STRING_1 + ( VAR_2 [ 0 ] ) ) + STRING_2 ) ) ) ; } } }\n", "fixed": "public void METHOD_1 ( int VAR_1 , java.lang.String [ ] VAR_2 , int [ ] VAR_3 ) { if ( ( VAR_4 ) == VAR_1 ) { if ( ( ( VAR_3 . length ) > 0 ) && ( ( VAR_3 [ 0 ] ) == ( VAR_5 ) ) ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; } else { METHOD_3 ( VAR_2 , new TYPE_1 ( ( ( STRING_1 + ( VAR_2 [ 0 ] ) ) + STRING_2 ) ) ) ; } } }\n"}
{"problem": "public java.util.Map < java.lang.Integer , TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Map < java.lang.Integer , TYPE_1 > result = new java.util.HashMap < > ( ) ; if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { TYPE_3 VAR_3 = VAR_2 . get ( VAR_1 ) ; return VAR_3 . METHOD_3 ( ) ; } throw new TYPE_4 ( ( STRING_1 + ( VAR_1 . toString ( ) ) ) ) ; }\n", "fixed": "public java.util.Map < java.lang.Integer , TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { TYPE_3 VAR_3 = VAR_2 . get ( VAR_1 ) ; return VAR_3 . METHOD_3 ( ) ; } throw new TYPE_4 ( ( STRING_1 + ( VAR_1 . toString ( ) ) ) ) ; }\n"}
{"problem": "public boolean METHOD_1 ( ) { for ( int count = 0 ; count < ( VAR_1 . length ) ; count ++ ) { if ( ( VAR_1 [ count ] ) == ( VAR_2 [ count ] ) ) { ( VAR_3 ) ++ ; } } if ( ( VAR_3 ) >= INT_1 ) { return true ; } else { return false ; } }\n", "fixed": "public boolean METHOD_1 ( ) { for ( int count = 0 ; count < ( VAR_1 . length ) ; count ++ ) { if ( VAR_1 [ count ] . equals ( VAR_2 [ count ] ) ) { ( VAR_3 ) ++ ; } } if ( ( VAR_3 ) >= INT_1 ) { return true ; } else { return false ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 VAR_1 , final TYPE_4 < TYPE_2 , TYPE_5 , TYPE_6 > VAR_2 ) { return new TYPE_1 < TYPE_2 > ( ) { public void METHOD_2 ( TYPE_2 VAR_3 ) { java.lang.Object [ ] VAR_4 = VAR_2 . METHOD_3 ( VAR_3 ) ; try { synchronized ( VAR_1 ) { VAR_1 . METHOD_4 ( VAR_4 ) ; } } catch ( java.io.IOException VAR_5 ) { throw new TYPE_7 ( ( STRING_1 + VAR_3 ) , VAR_5 ) ; } } } ; }\n", "fixed": "private TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 VAR_1 , final TYPE_4 < TYPE_2 , TYPE_5 , TYPE_6 > VAR_2 ) { return ( VAR_3 ) - > { java.lang.Object [ ] VAR_4 = VAR_2 . METHOD_3 ( VAR_3 ) ; try { synchronized ( VAR_1 ) { VAR_1 . METHOD_4 ( VAR_4 ) ; } } catch ( java.io.IOException VAR_5 ) { throw new TYPE_7 ( ( STRING_1 + VAR_3 ) , VAR_5 ) ; } } ; }\n"}
{"problem": "public java.util.Iterator < java.lang.String > iterator ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 . get ( VAR_3 . toString ( ) ) . toString ( ) , STRING_1 ) ; return new java.util.Iterator < java.lang.String > ( ) { public boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; } public java.lang.String METHOD_3 ( ) { return VAR_1 . METHOD_4 ( ) ; } public void remove ( ) { } } ; }\n", "fixed": "public java.util.Iterator < java.lang.String > iterator ( ) { return new java.util.Iterator < java.lang.String > ( ) { public boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; } public java.lang.String METHOD_3 ( ) { return VAR_1 . METHOD_4 ( ) ; } public void remove ( ) { } } ; }\n"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"problem": "public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( VAR_1 == null ) { VAR_2 . add ( new TYPE_1 ( VAR_2 . get ( VAR_3 class ) . get ( ) ) ) ; } else { TYPE_2 VAR_4 = METHOD_2 ( ) ; TYPE_2 VAR_5 = TYPE_2 . METHOD_3 ( VAR_1 , VAR_6 , VAR_7 ) ; VAR_2 . add ( new TYPE_1 ( VAR_5 ) ) ; } }\n", "fixed": "public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( VAR_1 == null ) { VAR_2 . get ( ) . add ( new TYPE_1 ( VAR_2 . get ( ) . get ( VAR_3 class ) . get ( ) ) ) ; } else { TYPE_2 VAR_4 = METHOD_2 ( ) ; TYPE_2 VAR_5 = TYPE_2 . METHOD_3 ( VAR_1 , VAR_6 , VAR_7 ) ; VAR_2 . get ( ) . add ( new TYPE_1 ( VAR_5 ) ) ; } }\n"}
{"problem": "public void update ( ) { ( time ) ++ ; if ( ( ( time ) % ( VAR_1 ) ) == 0 ) { if ( ( VAR_2 ) > ( length ) ) VAR_2 = 0 ; else ( VAR_2 ) ++ ; VAR_3 = VAR_4 . METHOD_1 ( ) [ VAR_2 ] ; } }\n", "fixed": "public void update ( ) { ( time ) ++ ; if ( ( ( time ) % ( VAR_1 ) ) == 0 ) { if ( ( VAR_2 ) >= ( ( length ) - 1 ) ) VAR_2 = 0 ; else ( VAR_2 ) ++ ; VAR_3 = VAR_4 . METHOD_1 ( ) [ VAR_2 ] ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( METHOD_3 ( ) ) . select ( ) . METHOD_4 ( METHOD_5 ( ) ) . build ( ) . METHOD_6 ( VAR_2 ) . METHOD_7 ( java.util.Arrays.asList ( METHOD_8 ( ) ) ) . METHOD_9 ( java.util.Arrays.asList ( METHOD_10 ( ) ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( METHOD_3 ( ) ) . select ( ) . METHOD_4 ( METHOD_5 ( ) ) . build ( ) . METHOD_7 ( java.util.Arrays.asList ( METHOD_8 ( ) ) ) . METHOD_9 ( java.util.Arrays.asList ( METHOD_10 ( ) ) ) ; }\n"}
{"problem": "public boolean METHOD_1 ( ) { if ( VAR_1 ) return true ; try { java.io.FileOutputStream out = new java.io.FileOutputStream ( VAR_2 ) ; VAR_1 = METHOD_1 ( out ) ; out . METHOD_2 ( ) ; } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } if ( ( VAR_2 . METHOD_4 ( ) ) && ( ( VAR_2 . length ( ) ) == 0 ) ) VAR_2 . delete ( ) ; return false ; }\n", "fixed": "public boolean METHOD_1 ( ) { if ( VAR_1 ) return true ; try { java.io.FileOutputStream out = new java.io.FileOutputStream ( VAR_2 ) ; VAR_1 = METHOD_1 ( out ) ; out . METHOD_2 ( ) ; } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } if ( ( VAR_2 . METHOD_4 ( ) ) && ( ( VAR_2 . length ( ) ) == 0 ) ) VAR_2 . delete ( ) ; return VAR_2 . METHOD_4 ( ) ; }\n"}
{"problem": "private java.util.Set < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Set < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( VAR_4 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; VAR_5 . METHOD_5 ( STRING_1 , TYPE_3 . METHOD_6 ( VAR_2 , VAR_6 ) ) ; return VAR_2 ; }\n", "fixed": "private java.util.Set < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Set < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( VAR_4 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; VAR_5 . info ( STRING_1 , TYPE_3 . METHOD_6 ( VAR_2 , VAR_6 ) ) ; return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( ) { try { final TYPE_1 VAR_1 = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( ( STRING_1 + STRING_2 ) , new TYPE_3 ( new java.util.Properties ( ) ) , true ) ) ) ; final TYPE_4 [ ] VAR_2 = VAR_1 . METHOD_3 ( ) ; TYPE_5 . assertEquals ( 0 , VAR_2 [ 0 ] . METHOD_3 ( ) . length ) ; } catch ( TYPE_6 VAR_3 ) { TYPE_5 . fail ( STRING_3 ) ; } }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 VAR_1 = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( ( STRING_1 + STRING_2 ) , new TYPE_3 ( new java.util.Properties ( ) ) , true ) ) ) ; final TYPE_4 [ ] VAR_2 = VAR_1 . METHOD_3 ( ) ; TYPE_5 . assertEquals ( 0 , VAR_2 [ 0 ] . METHOD_3 ( ) . length ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( false ) ; } TYPE_2 VAR_2 = ( ( TYPE_2 ) ( event . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_2 . METHOD_5 ( ) ) ) ; VAR_3 . METHOD_2 ( true ) ; VAR_1 = VAR_3 ; METHOD_6 ( false ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( false ) ; } if ( ( event . METHOD_3 ( ) ) == null ) { VAR_1 = null ; return ; } TYPE_2 VAR_2 = ( ( TYPE_2 ) ( event . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_2 . METHOD_5 ( ) ) ) ; VAR_3 . METHOD_2 ( true ) ; VAR_1 = VAR_3 ; METHOD_6 ( false ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = null ; for ( TYPE_1 VAR_3 : VAR_1 . METHOD_2 ( ) ) { VAR_2 = VAR_3 . getValue ( VAR_4 class ) ; } if ( ( VAR_2 ) == null ) { TYPE_2 VAR_5 = new TYPE_2 ( VAR_6 , VAR_7 , VAR_8 ) ; TYPE_3 . METHOD_3 ( VAR_5 ) ; TYPE_4 . METHOD_4 ( VAR_9 , STRING_1 ) ; } else { TYPE_4 . i ( VAR_9 , STRING_2 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_1 VAR_3 : VAR_1 . METHOD_2 ( ) ) { VAR_2 = VAR_3 . getValue ( VAR_4 class ) ; } if ( ( VAR_2 ) == null ) { TYPE_2 VAR_5 = new TYPE_2 ( VAR_6 , VAR_7 , VAR_8 ) ; TYPE_3 . METHOD_3 ( VAR_5 ) ; TYPE_4 . METHOD_4 ( VAR_9 , STRING_1 ) ; } else { TYPE_4 . i ( VAR_9 , STRING_2 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 value ) { switch ( value . METHOD_2 ( ) ) { case VAR_1 : TYPE_2 . METHOD_3 ( this , getString ( VAR_2 ) , VAR_3 ) . show ( ) ; METHOD_4 ( VAR_4 ) ; METHOD_5 ( ) ; break ; case VAR_5 : TYPE_2 . METHOD_3 ( this , getString ( VAR_6 ) , VAR_3 ) . show ( ) ; break ; case VAR_7 : TYPE_2 . METHOD_3 ( this , getString ( VAR_8 ) , VAR_3 ) . show ( ) ; break ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 value ) { switch ( value . METHOD_2 ( ) ) { case VAR_1 : TYPE_2 . METHOD_3 ( this , getString ( VAR_2 ) , VAR_3 ) . show ( ) ; METHOD_4 ( VAR_4 ) ; break ; case VAR_5 : TYPE_2 . METHOD_3 ( this , getString ( VAR_6 ) , VAR_3 ) . show ( ) ; break ; case VAR_7 : TYPE_2 . METHOD_3 ( this , getString ( VAR_8 ) , VAR_3 ) . show ( ) ; break ; } METHOD_5 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 type ) { java.util.List < TYPE_2 > list = VAR_1 . METHOD_2 ( ) ; VAR_2 = list . get ( 0 ) ; if ( ( VAR_2 . METHOD_3 ( ) ) == null ) TYPE_3 . METHOD_4 ( STRING_1 , java.lang.String . METHOD_5 ( list . size ( ) ) ) ; else { VAR_3 = VAR_1 . METHOD_6 ( VAR_2 . getId ( ) ) ; VAR_4 = VAR_1 . METHOD_7 ( VAR_2 . getId ( ) ) ; METHOD_8 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 type ) { java.util.List < TYPE_2 > list = VAR_1 . METHOD_2 ( ) ; VAR_2 = list . get ( 0 ) ; if ( ( VAR_2 . METHOD_3 ( ) ) == null ) TYPE_3 . METHOD_4 ( STRING_1 , VAR_2 . getId ( ) ) ; else { VAR_3 = VAR_1 . METHOD_6 ( VAR_2 . getId ( ) ) ; VAR_4 = VAR_1 . METHOD_7 ( VAR_2 . getId ( ) ) ; METHOD_8 ( ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( int position ) { switch ( position ) { case 0 : TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( position , VAR_2 ) ; VAR_3 . put ( position , VAR_1 ) ; return VAR_1 ; case 1 : TYPE_2 VAR_4 = TYPE_2 . METHOD_2 ( position , VAR_5 . size ( ) ) ; VAR_3 . put ( position , VAR_4 ) ; return VAR_4 ; default : return null ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( int position ) { switch ( position ) { case 0 : TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( position , VAR_2 ) ; VAR_3 [ 0 ] = VAR_1 ; return VAR_1 ; case 1 : TYPE_2 VAR_4 = TYPE_2 . METHOD_2 ( position , VAR_5 . size ( ) ) ; VAR_3 [ 1 ] = VAR_4 ; return VAR_4 ; default : return null ; } }\n"}
{"problem": "public static < TYPE_1 > TYPE_2 METHOD_1 ( java.lang.Class < ? super TYPE_1 > VAR_1 , java.lang.String method , java.lang.Class < ? > ... VAR_2 ) { try { return TYPE_3 . METHOD_2 ( VAR_1 , null , new java.lang.String [ ] { method } , VAR_2 ) ; } catch ( TYPE_3 VAR_3 ) { VAR_3 . METHOD_3 ( ) ; return null ; } }\n", "fixed": "public static < TYPE_1 > TYPE_2 METHOD_1 ( java.lang.Class < ? super TYPE_1 > VAR_1 , java.lang.String method , java.lang.Class < ? > ... VAR_2 ) { try { return TYPE_3 . METHOD_2 ( VAR_1 , method , null , VAR_2 ) ; } catch ( TYPE_3 VAR_3 ) { VAR_3 . METHOD_3 ( ) ; return null ; } }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( true ) ; VAR_1 . METHOD_4 ( null ) ; VAR_1 . METHOD_5 ( true ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( true ) ; VAR_1 . METHOD_4 ( null ) ; VAR_1 . METHOD_5 ( true ) ; }\n"}
{"problem": "public java.lang.StringBuilder METHOD_1 ( TYPE_1 context ) throws TYPE_2 { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; VAR_1 . append ( STRING_1 ) ; VAR_1 . append ( context . METHOD_2 ( ) ) ; VAR_1 . append ( STRING_2 ) ; VAR_1 . append ( context . METHOD_3 ( ) . METHOD_4 ( ) . getName ( ) ) ; if ( true ) throw new TYPE_2 ( STRING_3 ) ; return VAR_1 ; }\n", "fixed": "public java.lang.StringBuilder METHOD_1 ( TYPE_1 context ) throws TYPE_2 { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; VAR_1 . append ( STRING_1 ) ; VAR_1 . append ( context . METHOD_2 ( ) ) ; VAR_1 . append ( STRING_2 ) ; VAR_1 . append ( context . METHOD_3 ( ) . METHOD_4 ( ) . getName ( ) ) ; return VAR_1 ; }\n"}
{"problem": "private void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getText ( ) ; java.lang.String VAR_3 = VAR_2 . getText ( ) ; boolean VAR_4 = false ; for ( java.lang.String VAR_5 : VAR_6 ) { if ( VAR_5 . startsWith ( VAR_1 ) ) { if ( VAR_4 ) { return ; } else { VAR_3 = VAR_5 ; VAR_4 = true ; } } } VAR_2 . setText ( VAR_3 ) ; VAR_2 . end ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getText ( ) ; java.lang.String VAR_3 = VAR_2 . getText ( ) ; boolean VAR_4 = false ; for ( java.lang.String VAR_5 : VAR_6 ) { if ( VAR_5 . startsWith ( VAR_1 ) ) { if ( VAR_4 ) { return ; } else { VAR_3 = VAR_5 ; VAR_4 = true ; } } } if ( ! VAR_4 ) { return ; } else { VAR_2 . setText ( VAR_3 ) ; VAR_2 . end ( ) ; } }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"problem": "public void METHOD_1 ( TYPE_1 ... VAR_1 ) { if ( ( VAR_1 . length ) > 0 ) { METHOD_2 ( VAR_2 , VAR_1 ) ; java.lang.String VAR_3 = VAR_4 . METHOD_3 ( ) ; boolean VAR_5 = VAR_6 . METHOD_4 ( ) ; boolean VAR_7 = ( ( VAR_1 . length ) == 1 ) && ( VAR_1 [ 0 ] . toString ( ) . equals ( VAR_3 ) ) ; VAR_6 . METHOD_5 ( ( VAR_5 || VAR_7 ) ) ; METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 ... VAR_1 ) { if ( ( VAR_1 . length ) > 0 ) { METHOD_2 ( VAR_2 , VAR_1 ) ; java.lang.String VAR_3 = VAR_4 . METHOD_3 ( ) ; boolean VAR_5 = VAR_6 . METHOD_4 ( ) ; boolean VAR_7 = ( ( VAR_1 . length ) == 1 ) && ( VAR_1 [ 0 ] . toString ( ) . equals ( VAR_3 ) ) ; VAR_6 . METHOD_5 ( ( VAR_5 || ( ! VAR_7 ) ) ) ; METHOD_6 ( ) ; } }\n"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password);\n     @GET\n     @Path(\"/logout\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password) throws Exception;\n     @GET\n     @Path(\"/logout\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 ; do { VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; VAR_1 = VAR_1 . METHOD_3 ( ) ; } while ( ( ( VAR_2 == null ) && ( VAR_1 != null ) ) && ( ! ( VAR_1 . equals ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ) ) ; return VAR_2 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 == null ) { return null ; } TYPE_1 VAR_2 ; do { VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; VAR_1 = VAR_1 . METHOD_3 ( ) ; } while ( ( ( VAR_2 == null ) && ( VAR_1 != null ) ) && ( ! ( VAR_1 . equals ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ) ) ; return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_4 . setText ( java.lang.String . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ; TYPE_3 . setText ( VAR_2 . METHOD_5 ( ) ) ; TYPE_4 . setText ( VAR_2 . METHOD_6 ( ) ) ; TYPE_5 . setText ( VAR_2 . METHOD_7 ( ) ) ; VAR_5 . info ( VAR_2 . toString ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_4 . setText ( java.lang.String . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ; TYPE_3 . setText ( VAR_2 . METHOD_5 ( ) ) ; TYPE_4 . setText ( VAR_2 . METHOD_6 ( ) . toString ( ) ) ; TYPE_5 . setText ( VAR_2 . METHOD_7 ( ) ) ; VAR_5 . info ( VAR_2 . toString ( ) ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , java.util.Date VAR_2 ) throws TYPE_2 { TYPE_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_3 ) . METHOD_4 ( TYPE_4 . METHOD_5 ( ) , TYPE_4 . METHOD_6 ( VAR_4 class ) ) ; TYPE_5 VAR_5 = new TYPE_5 ( ) ; VAR_5 . METHOD_7 ( VAR_1 . getId ( ) ) ; VAR_5 . METHOD_8 ( VAR_1 . getName ( ) ) ; VAR_5 . METHOD_9 ( VAR_2 ) ; VAR_6 . METHOD_10 ( VAR_5 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , java.util.Date VAR_2 ) throws TYPE_2 { TYPE_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_3 ) . METHOD_4 ( TYPE_4 . METHOD_5 ( ) , TYPE_4 . METHOD_6 ( VAR_4 class ) ) ; TYPE_5 VAR_5 = new TYPE_5 ( ) ; VAR_5 . METHOD_7 ( VAR_1 . getId ( ) ) ; VAR_5 . METHOD_8 ( VAR_1 . getName ( ) ) ; VAR_5 . METHOD_9 ( VAR_2 ) ; VAR_6 . METHOD_10 ( VAR_5 , null ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String id , java.lang.String VAR_1 ) { if ( ( ( METHOD_2 ( id ) ) == null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { VAR_2 . add ( new TYPE_1 ( id , VAR_1 ) ) ; } if ( ( id != null ) && ( id . isEmpty ( ) ) ) { VAR_3 . add ( VAR_1 ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String id , java.lang.String VAR_1 ) { if ( ( ( ( METHOD_2 ( id ) ) == null ) || ( id . isEmpty ( ) ) ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { VAR_2 . add ( new TYPE_1 ( id , VAR_1 ) ) ; } if ( ( id != null ) && ( id . isEmpty ( ) ) ) { VAR_3 . add ( VAR_1 ) ; } }\n"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { int VAR_3 = java.lang.Integer.parseInt ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ; int VAR_4 = java.lang.Integer.parseInt ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ; if ( VAR_2 ) { VAR_3 += 1 ; VAR_4 += 1 ; } TYPE_1 . METHOD_4 ( VAR_1 , VAR_5 , java.lang.String . METHOD_5 ( VAR_3 ) ) ; TYPE_1 . METHOD_4 ( VAR_1 , VAR_6 , java.lang.String . METHOD_5 ( VAR_4 ) ) ; }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 ) { int VAR_3 = java.lang.Integer.parseInt ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ; int VAR_4 = java.lang.Integer.parseInt ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ; VAR_3 += 1 ; VAR_4 += 1 ; TYPE_1 . METHOD_4 ( VAR_1 , VAR_5 , java.lang.String . METHOD_5 ( VAR_3 ) ) ; TYPE_1 . METHOD_4 ( VAR_1 , VAR_6 , java.lang.String . METHOD_5 ( VAR_4 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( int x , int y , int VAR_1 , boolean VAR_2 ) { if ( ! ( METHOD_2 ( x , y , VAR_1 ) ) ) return ; byte VAR_3 = METHOD_3 ( x , y ) ; METHOD_4 ( x , y , METHOD_5 ( VAR_3 , ( ( VAR_1 * INT_1 ) + 1 ) , VAR_2 ) , false ) ; }\n", "fixed": "public void METHOD_1 ( int x , int y , int VAR_1 , boolean VAR_2 ) { if ( ! ( METHOD_2 ( x , y , VAR_1 ) ) ) VAR_2 = false ; byte VAR_3 = METHOD_3 ( x , y ) ; METHOD_4 ( x , y , METHOD_5 ( VAR_3 , ( ( VAR_1 * INT_1 ) + 1 ) , VAR_2 ) , false ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 [ ] VAR_1 ) { int [ ] VAR_2 = new int [ VAR_1 . length ] ; for ( int index = 0 ; index < ( VAR_1 . length ) ; index ++ ) { VAR_2 [ index ] = VAR_1 [ index ] . METHOD_2 ( ) ; } TYPE_3 VAR_3 = new TYPE_3 ( ) ; METHOD_3 ( VAR_2 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; return VAR_4 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 [ ] VAR_1 ) { int [ ] VAR_2 = new int [ VAR_1 . length ] ; for ( int index = 0 ; index < ( VAR_1 . length ) ; index ++ ) { VAR_2 [ index ] = VAR_1 [ index ] . METHOD_2 ( ) ; } TYPE_3 VAR_3 = new TYPE_3 ( ) ; METHOD_3 ( VAR_2 ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . length ) ; return VAR_4 ; }\n"}
{"problem": "protected void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { METHOD_2 ( ) ; } else if ( ! ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { VAR_2 . METHOD_5 ( STRING_1 , file ) ; METHOD_2 ( ) ; } }\n", "fixed": "protected void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 . get ( ) ) == null ) { METHOD_2 ( ) ; } else if ( ! ( VAR_1 . get ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) { VAR_2 . METHOD_5 ( STRING_1 , file ) ; METHOD_2 ( ) ; } }\n"}
{"problem": "public java.util.ArrayList < java.lang.String > METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 . size ( ) ) >= ( VAR_1 + 1 ) ) { return VAR_2 . get ( VAR_1 ) . VAR_3 ; } TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; return null ; }\n", "fixed": "public java.util.ArrayList < java.lang.String > METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 . size ( ) ) >= VAR_1 ) { return VAR_2 . get ( ( VAR_1 - 1 ) ) . VAR_3 ; } TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; return null ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"problem": "public void METHOD_1 ( android.view.View view , float x , float y ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( STRING_1 , x ) ; VAR_1 . METHOD_3 ( STRING_2 , y ) ; VAR_2 . METHOD_4 ( new TYPE_3 ( getId ( ) , TYPE_4 . METHOD_5 ( ) , VAR_3 ) . METHOD_6 ( VAR_1 ) ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view , float x , float y ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( STRING_1 , x ) ; VAR_1 . METHOD_3 ( STRING_2 , y ) ; VAR_2 . METHOD_4 ( new TYPE_3 ( getId ( ) , VAR_3 ) . METHOD_6 ( VAR_1 ) ) ; }\n"}
{"fixCommitSHA1": "8d49fc720f13722bf31d504d1a83bd8a5a6eb559", "projectName": "nhaarman.ListViewAnimations", "bugType": "Change Identifier Used", "problem": " import com.nineoldandroids.animation.PropertyValuesHolder;\npublic abstract class SwingBottomInAnimationAdapter<T> extends AnimationAdapter<T> {\n \tpublic SwingBottomInAnimationAdapter(Context context) {\n \t\tsuper(context);", "fixed": " import com.nineoldandroids.animation.PropertyValuesHolder;\npublic abstract class SwingBottomInAnimationAdapter<T> extends PropertyValuesAnimationAdapter<T> {\n \tpublic SwingBottomInAnimationAdapter(Context context) {\n \t\tsuper(context);", "sourceBeforeFix": "AnimationAdapter<T>", "sourceAfterFix": "PropertyValuesAnimationAdapter<T>"}
{"fixCommitSHA1": "78051257136d79f17c1dab7c814557f40e163c48", "projectName": "swagger-api.swagger-codegen", "bugType": "Wrong Function Name", "problem": "     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, ModelImpl swaggerModel) {\n        codegenModel.additionalPropertiesType = getSwaggerType(swaggerModel.getAdditionalProperties());\n         addImport(codegenModel, codegenModel.additionalPropertiesType);\n     }", "fixed": "     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, ModelImpl swaggerModel) {\n        codegenModel.additionalPropertiesType = getTypeDeclaration(swaggerModel.getAdditionalProperties());\n         addImport(codegenModel, codegenModel.additionalPropertiesType);\n     }", "sourceBeforeFix": "getSwaggerType(swaggerModel.getAdditionalProperties())", "sourceAfterFix": "getTypeDeclaration(swaggerModel.getAdditionalProperties())"}
{"fixCommitSHA1": "313d81ca2fb88a734f46e0e144d5a1a44ee1c4cd", "projectName": "druid-io.druid", "bugType": "Same Function Less Args", "problem": "       notifyLatch.countDown();\n       try {\n        waitYieldLatch.await(25, TimeUnit.MILLISECONDS);\n       }\n       catch (Exception e) {\n         throw Throwables.propagate(e);", "fixed": "       notifyLatch.countDown();\n       try {\n        waitYieldLatch.await();\n       }\n       catch (Exception e) {\n         throw Throwables.propagate(e);", "sourceBeforeFix": "waitLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "waitLatch.await()"}
{"problem": "public void METHOD_1 ( int i ) { try { TYPE_1 message = new TYPE_1 ( i ) ; VAR_1 . METHOD_2 ( message ) ; VAR_1 . METHOD_3 ( ) ; java.lang.System.out.println ( STRING_1 ) ; } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_4 ( ) ; return ; } catch ( TYPE_2 VAR_2 ) { VAR_2 . METHOD_4 ( ) ; return ; } }\n", "fixed": "public void METHOD_1 ( int i ) { try { TYPE_1 message = new TYPE_1 ( i ) ; VAR_1 . METHOD_2 ( message ) ; VAR_1 . METHOD_3 ( ) ; java.lang.System.out.println ( STRING_1 ) ; } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_4 ( ) ; return ; } catch ( TYPE_2 VAR_2 ) { VAR_2 . METHOD_4 ( ) ; return ; } catch ( java.lang.NullPointerException VAR_2 ) { VAR_2 . METHOD_4 ( ) ; return ; } }\n"}
{"fixCommitSHA1": "69f4d46a6b7d8134c5f0b0c238658d00be40c2b3", "projectName": "Atmosphere.atmosphere", "bugType": "Change Modifier", "problem": "     private static final boolean DEBUG = false;\n    private final Logger logger = LoggerFactory.getLogger(AnnotationDetector.class);\n     private static final int CP_UTF8 = 1;", "fixed": "     private static final boolean DEBUG = false;\n    private final static Logger logger = LoggerFactory.getLogger(AnnotationDetector.class);\n     private static final int CP_UTF8 = 1;", "sourceBeforeFix": "18", "sourceAfterFix": "26"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Long VAR_1 , java.lang.String VAR_2 ) { java.lang.String [ ] VAR_3 = ( VAR_2 == null ) ? null : VAR_2 . split ( STRING_1 ) ; if ( VAR_1 == null ) { return VAR_4 . METHOD_2 ( VAR_3 ) ; } else if ( VAR_3 == null ) { return VAR_4 . METHOD_3 ( VAR_1 ) ; } else { return VAR_4 . METHOD_4 ( VAR_1 , VAR_3 ) ; } }\n", "fixed": "private java.util.List < TYPE_1 > METHOD_1 ( java.lang.Long VAR_1 , java.lang.String VAR_2 ) { java.lang.String [ ] VAR_3 = ( VAR_2 == null ) ? null : VAR_2 . split ( STRING_1 ) ; if ( VAR_1 == null ) { return VAR_4 . METHOD_2 ( VAR_3 ) ; } else if ( VAR_3 == null ) { return VAR_4 . METHOD_3 ( VAR_1 ) ; } else { return VAR_4 . METHOD_4 ( VAR_1 , VAR_3 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 ) ; METHOD_3 ( ) . METHOD_4 ( STRING_1 , STRING_2 , STRING_3 ) . METHOD_5 ( STRING_4 , STRING_5 , STRING_6 , STRING_7 ) . METHOD_6 ( true ) . get ( ) ; TYPE_1 VAR_1 = METHOD_3 ( ) . METHOD_7 ( ) . METHOD_8 ( STRING_8 ) . get ( ) ; TYPE_2 . METHOD_9 ( VAR_1 , 1L ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 ) ; METHOD_3 ( ) . METHOD_4 ( STRING_1 , STRING_2 , STRING_3 ) . METHOD_5 ( STRING_4 , STRING_5 , STRING_6 , STRING_7 ) . METHOD_6 ( true ) . get ( ) ; TYPE_1 VAR_1 = METHOD_3 ( ) . METHOD_7 ( ) . METHOD_8 ( STRING_8 ) . get ( ) ; METHOD_9 ( VAR_1 , 1L ) ; }\n"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; if ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) { VAR_2 . METHOD_5 ( VAR_4 , VAR_1 ) ; } else { VAR_2 . METHOD_5 ( VAR_5 , VAR_1 ) ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; if ( ( ( VAR_3 . METHOD_3 ( ) ) != null ) && ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { VAR_2 . METHOD_5 ( VAR_4 , VAR_1 ) ; } else { VAR_2 . METHOD_5 ( VAR_5 , VAR_1 ) ; } return true ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GooglePubsubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGooglePubsubEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GooglePubsubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGooglePubsubEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( TYPE_2 . isEmpty ( VAR_2 . trim ( ) ) ) ) { return ; } VAR_1 . METHOD_3 ( VAR_2 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_2 = ( VAR_2 != null ) ? VAR_2 . trim ( ) : VAR_2 ; if ( TYPE_2 . isEmpty ( VAR_2 ) ) { return ; } VAR_1 . METHOD_3 ( VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( float VAR_1 ) { VAR_2 . METHOD_2 ( FLOAT_1 , FLOAT_1 , FLOAT_1 , 1 ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ( ( text ) + \"\\n\" ) ) ; text = STRING_1 ; VAR_5 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( float VAR_1 ) { VAR_2 . METHOD_2 ( FLOAT_1 , FLOAT_1 , FLOAT_1 , 1 ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; if ( ! ( text . equals ( STRING_1 ) ) ) VAR_4 . METHOD_4 ( ( ( text ) + \"\\n\" ) ) ; text = STRING_1 ; VAR_5 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , 1 ) ; while ( ( TYPE_2 . METHOD_4 ( VAR_2 , VAR_1 ) ) >= INT_1 ) { VAR_2 . METHOD_5 ( INT_1 ) ; } return VAR_2 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , 1 ) ; while ( ( TYPE_2 . METHOD_4 ( VAR_2 , VAR_1 ) ) >= INT_1 ) { VAR_2 = VAR_2 . METHOD_5 ( INT_1 ) ; } return VAR_2 ; }\n"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());\n     }\n    private void generateConstructor(ClassDefinition classDefinition,\n             List<Integer> joinChannels,\n             FieldDefinition sizeField,\n             List<FieldDefinition> channelFields,", "fixed": "         return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());\n     }\n    private static void generateConstructor(ClassDefinition classDefinition,\n             List<Integer> joinChannels,\n             FieldDefinition sizeField,\n             List<FieldDefinition> channelFields,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"problem": "protected TYPE_1 METHOD_1 ( int position ) { TYPE_1 VAR_1 ; switch ( position ) { case 0 : VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , false ) ; break ; case 1 : VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , false ) ; break ; case INT_1 : VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , false ) ; break ; default : VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , false ) ; break ; } return VAR_1 ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( int position ) { TYPE_1 VAR_1 ; switch ( position ) { case 0 : VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , true ) ; break ; case 1 : VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , false ) ; break ; case INT_1 : VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , false ) ; break ; default : VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , false ) ; break ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnablednHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "fixed": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ee9057ad99b9cc95140ee3e56265f32b6a28d709", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "                 setExposeHeaders(response);\n             }\n         }\n        ctx.writeAndFlush(msg, promise);\n     }\n     private static void forbidden(final ChannelHandlerContext ctx, final HttpRequest request) {", "fixed": "                 setExposeHeaders(response);\n             }\n         }\n        ctx.write(msg, promise);\n     }\n     private static void forbidden(final ChannelHandlerContext ctx, final HttpRequest request) {", "sourceBeforeFix": "ctx.writeAndFlush(msg,promise)", "sourceAfterFix": "ctx.write(msg,promise)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { try { TYPE_2 message = TYPE_2 . METHOD_2 ( null , VAR_2 ) ; VAR_3 = VAR_4 ; VAR_5 . METHOD_3 ( message ) ; } catch ( TYPE_3 VAR_6 ) { VAR_6 . METHOD_4 ( ) ; } VAR_5 = null ; VAR_7 = false ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { try { TYPE_2 message = TYPE_2 . METHOD_2 ( null , VAR_2 ) ; VAR_3 = VAR_4 ; VAR_5 . METHOD_3 ( message ) ; } catch ( TYPE_3 VAR_6 ) { VAR_6 . METHOD_4 ( ) ; } VAR_7 = false ; }\n"}
{"problem": "public void METHOD_1 ( final java.lang.String VAR_1 , final TYPE_1 VAR_2 ) throws TYPE_2 { this . VAR_3 . info ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_2 . toString ( ) ) ) ) ; try { this . VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; } catch ( TYPE_2 VAR_5 ) { this . VAR_3 . info ( ( STRING_3 + ( VAR_5 . METHOD_2 ( ) ) ) ) ; throw VAR_5 ; } }\n", "fixed": "public void METHOD_1 ( final java.lang.String VAR_1 , final TYPE_1 VAR_2 ) throws TYPE_2 { this . VAR_3 . info ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_2 . toString ( ) ) ) ) ; try { this . VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; } catch ( TYPE_2 VAR_5 ) { this . VAR_3 . error ( ( STRING_3 + ( VAR_5 . METHOD_2 ( ) ) ) ) ; throw VAR_5 ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "da5e1827cf1c86cb1bddf3886a83736990a36430", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         if (rightValue instanceof Comparable) {\n            Object value = converter.convertTo(rightValue.getClass(), leftValue);\n             if (value != null) {\n                 return ((Comparable) rightValue).compareTo(value) * -1;\n             }", "fixed": "         if (rightValue instanceof Comparable) {\n            Object value = converter.tryConvertTo(rightValue.getClass(), leftValue);\n             if (value != null) {\n                 return ((Comparable) rightValue).compareTo(value) * -1;\n             }", "sourceBeforeFix": "converter.convertTo(leftValue.getClass(),rightValue)", "sourceAfterFix": "converter.tryConvertTo(leftValue.getClass(),rightValue)"}
{"problem": "public static int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { if ( ( VAR_1 . METHOD_2 ( ) ) instanceof TYPE_2 ) { TYPE_2 VAR_4 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ; TYPE_3 VAR_5 = ( VAR_4 instanceof TYPE_4 ) ? ( ( TYPE_4 ) ( VAR_4 ) ) . METHOD_3 ( VAR_1 ) : VAR_6 ; return VAR_5 . METHOD_4 ( VAR_1 , VAR_2 , INT_1 , true , VAR_3 ) ; } return 0 ; }\n", "fixed": "public static int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { if ( ( VAR_1 . METHOD_2 ( ) ) instanceof TYPE_2 ) { TYPE_2 VAR_4 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ; TYPE_3 VAR_5 = ( VAR_4 instanceof TYPE_4 ) ? ( ( TYPE_4 ) ( VAR_4 ) ) . METHOD_3 ( VAR_1 ) : VAR_6 ; if ( VAR_5 == null ) return 0 ; return VAR_5 . METHOD_4 ( VAR_1 , VAR_2 , INT_1 , true , VAR_3 ) ; } return 0 ; }\n"}
{"problem": "public void METHOD_1 ( final short [ ] data ) { int VAR_1 = ( data . length ) * ( VAR_2 ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( ( ( position ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( TYPE_1 . METHOD_5 ( data ) , ( ( VAR_4 ) + ( position ) ) , VAR_1 ) ; position += VAR_1 ; }\n", "fixed": "public void METHOD_1 ( final short [ ] data ) { int VAR_1 = ( data . length ) * ( VAR_2 ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( ( ( position ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( TYPE_1 . METHOD_5 ( data ) , ( ( VAR_4 ) + ( position ) ) , VAR_1 ) ; position += VAR_1 ; end = ( ( position ) > ( end ) ) ? position : end ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( ! ( VAR_2 == null ) ) || ( ! ( VAR_4 ) ) ) { VAR_4 = true ; new TYPE_3 ( VAR_5 , VAR_2 , null ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( ! ( VAR_2 == null ) ) && ( ! ( VAR_4 ) ) ) { VAR_4 = true ; new TYPE_3 ( VAR_5 , VAR_2 , null ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) throws TYPE_5 { TYPE_1 VAR_5 = VAR_3 . METHOD_2 ( VAR_1 , VAR_2 , 0 ) ; java.util.List < TYPE_6 > VAR_6 = VAR_5 . METHOD_3 ( ) ; for ( TYPE_6 c : VAR_6 ) { VAR_4 . METHOD_4 ( c ) ; } return VAR_5 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) throws TYPE_5 { TYPE_1 VAR_5 = VAR_3 . METHOD_2 ( VAR_1 , VAR_2 , 0 ) ; java.util.List < TYPE_6 > VAR_6 = VAR_5 . METHOD_3 ( ) ; for ( TYPE_6 c : VAR_6 ) { VAR_4 . METHOD_4 ( c ) ; ( counter ) ++ ; } return VAR_5 ; }\n"}
{"problem": "public < TYPE_1 extends TYPE_2 > TYPE_3 < TYPE_1 , ? > METHOD_1 ( final java.lang.Class < TYPE_1 > VAR_1 ) { final TYPE_4 < ? > VAR_2 = VAR_3 . get ( VAR_1 ) ; return ( ( TYPE_3 < TYPE_1 , ? > ) ( METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) . get ( ) ) ) ; }\n", "fixed": "public < TYPE_1 extends TYPE_2 > TYPE_3 < TYPE_1 , ? > METHOD_1 ( final java.lang.Class < TYPE_1 > VAR_1 ) { final TYPE_4 < ? > VAR_2 = VAR_3 . get ( VAR_1 ) ; return ( ( TYPE_3 < TYPE_1 , ? > ) ( METHOD_2 ( VAR_2 , VAR_1 , STRING_1 , VAR_1 ) . get ( ) ) ) ; }\n"}
{"project": "Closure", "bugId": 127, "problem": " private void tryRemoveUnconditionalBranching(Node n) {\n                 outEdges.get(0).getValue() == Branch.UNCOND);\n             Node fallThrough = computeFollowing(n);\n             Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n            if (nextCfgNode == fallThrough) {\n               removeNode(n);\n             }\n           }\n       }\n     }\n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);", "fixed": " private void tryRemoveUnconditionalBranching(Node n) {\n                 outEdges.get(0).getValue() == Branch.UNCOND);\n             Node fallThrough = computeFollowing(n);\n             Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n            if (nextCfgNode == fallThrough && !inFinally(n.getParent(), n)) {\n               removeNode(n);\n             }\n           }\n       }\n     }\n    private boolean inFinally(Node parent, Node child) {\n      if (parent == null || parent.isFunction()) {\n        return false;\n      } else if (NodeUtil.isTryFinallyNode(parent, child)) {\n        return true;\n      } else {\n        return inFinally(parent.getParent(), parent);\n      }\n    }\n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);", "observations": "", "repairActions": ["condBranIfElseAdd", "condExpExpand", "mcAdd", "mdAdd", "retBranchAdd"], "repairPatterns": ["condBlockRetAdd", "expLogicExpand", "missComp", "missNullCheckP"]}
{"problem": "private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; this . VAR_2 = false ; TYPE_2 VAR_3 = new TYPE_2 ( this , this . VAR_4 ) ; this . VAR_5 = TYPE_3 . METHOD_3 ( this , this . VAR_4 ) ; this . VAR_6 = VAR_3 . METHOD_4 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; this . VAR_2 = true ; TYPE_2 VAR_3 = new TYPE_2 ( this , this . VAR_4 ) ; this . VAR_5 = TYPE_3 . METHOD_3 ( this , this . VAR_4 ) ; this . VAR_6 = VAR_3 . METHOD_4 ( ) ; }\n"}
{"problem": "public < TYPE_1 > java.lang.String METHOD_1 ( TYPE_1 [ ] VAR_1 ) { java.lang.String VAR_2 = STRING_1 ; for ( int i = 0 ; i < ( ( VAR_1 . length ) - 1 ) ; i ++ ) { VAR_2 += ( VAR_1 [ i ] ) + STRING_2 ; } VAR_2 += VAR_1 [ VAR_1 . length ] ; return VAR_2 ; }\n", "fixed": "public < TYPE_1 > java.lang.String METHOD_1 ( TYPE_1 [ ] VAR_1 ) { java.lang.String VAR_2 = STRING_1 ; for ( int i = 0 ; i < ( ( VAR_1 . length ) - 1 ) ; i ++ ) { VAR_2 += ( VAR_1 [ i ] ) + STRING_2 ; } VAR_2 += VAR_1 [ ( ( VAR_1 . length ) - 1 ) ] ; return VAR_2 ; }\n"}
{"problem": "public java.util.List METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 to ) { java.util.List results = new java.util.LinkedList ( ) ; METHOD_1 ( VAR_1 , to , results ) ; if ( ( results . METHOD_2 ( ) . METHOD_3 ( ) ) > ( results . METHOD_4 ( ) . METHOD_3 ( ) ) ) { TYPE_2 . METHOD_5 ( results ) ; } return ( ( java.util.List < TYPE_3 > ) ( results ) ) ; }\n", "fixed": "public java.util.List METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 to ) { java.util.LinkedList < TYPE_3 > results = new java.util.LinkedList < TYPE_3 > ( ) ; METHOD_1 ( VAR_1 , to , results ) ; if ( ( results . METHOD_2 ( ) . METHOD_3 ( ) ) > ( results . METHOD_4 ( ) . METHOD_3 ( ) ) ) { TYPE_2 . METHOD_5 ( results ) ; } return results ; }\n"}
{"problem": "public TYPE_1 get ( final java.lang.String VAR_1 ) { for ( final java.util.Map.Entry < TYPE_2 < TYPE_1 > , java.util.Collection < TYPE_1 > > VAR_2 : VAR_3 . METHOD_1 ( ) ) { for ( final TYPE_1 item : VAR_2 . getValue ( ) ) { if ( VAR_1 . equals ( item . getName ( ) ) ) { return item ; } } } return null ; }\n", "fixed": "public TYPE_1 get ( final java.lang.String VAR_1 ) { for ( final java.util.Map.Entry < TYPE_2 < TYPE_1 > , java.util.Collection < TYPE_1 > > VAR_2 : VAR_3 . METHOD_1 ( ) ) { for ( final TYPE_1 item : VAR_2 . getValue ( ) ) { if ( item . getName ( ) . equals ( VAR_1 ) ) { return item ; } } } return null ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( result ) != STRING_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; } android.widget.Button b = ( ( android.widget.Button ) ( VAR_1 ) ) ; VAR_2 += b . getText ( ) ; METHOD_3 ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( result . isEmpty ( ) ) ) { METHOD_2 ( ) ; METHOD_3 ( ) ; } android.widget.Button b = ( ( android.widget.Button ) ( VAR_1 ) ) ; VAR_2 += b . getText ( ) ; METHOD_3 ( ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( double [ ] VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , TYPE_2 . METHOD_2 ( ) ) ; try { java.util.List < TYPE_3 > VAR_4 = VAR_2 . METHOD_3 ( VAR_1 [ 0 ] , VAR_1 [ 1 ] , 1 ) ; return VAR_4 . get ( 0 ) . METHOD_4 ( ) ; } catch ( java.io.IOException VAR_5 ) { VAR_5 . METHOD_5 ( ) ; } return null ; }\n", "fixed": "public java.lang.String METHOD_1 ( double [ ] VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( getActivity ( ) , TYPE_2 . METHOD_2 ( ) ) ; try { java.util.List < TYPE_3 > VAR_4 = VAR_2 . METHOD_3 ( VAR_1 [ 0 ] , VAR_1 [ 1 ] , 1 ) ; return VAR_4 . get ( 0 ) . METHOD_4 ( ) ; } catch ( java.io.IOException VAR_5 ) { VAR_5 . METHOD_5 ( ) ; } return null ; }\n"}
{"problem": "public static void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( STRING_1 ) ) ) { TYPE_2 VAR_1 = new TYPE_2 ( STRING_1 ) . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( VAR_1 ) ; TYPE_3 . METHOD_5 ( new TYPE_4 ( VAR_1 , INT_1 ) , new TYPE_5 ( VAR_3 ) , new TYPE_5 ( VAR_4 ) ) ; } }\n", "fixed": "public static void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( STRING_1 ) ) ) { TYPE_2 VAR_1 = new TYPE_2 ( STRING_1 ) . METHOD_3 ( VAR_2 ) ; if ( TYPE_1 . METHOD_4 ( VAR_1 ) ) { TYPE_3 . METHOD_5 ( new TYPE_4 ( VAR_1 , INT_1 ) , new TYPE_5 ( VAR_3 ) , new TYPE_5 ( VAR_4 ) ) ; } } }\n"}
{"fixCommitSHA1": "20c49903145fbb36556b88e65052aaf96d92fe19", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\t}\r\n \t};\r\n\tpublic static final int NUM_TOUCHES = 40;\r\n \tArrayList<OnKeyListener> keyListeners = new ArrayList();\r\n \tArrayList<KeyEvent> keyEvents = new ArrayList();\r", "fixed": " \t\t}\r\n \t};\r\n\tpublic static final int NUM_TOUCHES = 20;\r\n \tArrayList<OnKeyListener> keyListeners = new ArrayList();\r\n \tArrayList<KeyEvent> keyEvents = new ArrayList();\r", "sourceBeforeFix": "NUM_TOUCHES=40", "sourceAfterFix": "NUM_TOUCHES=20"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 , TYPE_3 { TYPE_1 VAR_2 = null ; if ( TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) ) { VAR_2 = TYPE_5 . METHOD_2 ( ) . METHOD_4 ( VAR_1 ) ; } if ( VAR_2 != null ) { return VAR_2 ; } else { VAR_2 = new TYPE_6 ( ) . METHOD_5 ( VAR_1 ) ; TYPE_5 . METHOD_2 ( ) . METHOD_6 ( VAR_1 , VAR_2 ) ; return VAR_2 ; } }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 , TYPE_3 { TYPE_1 VAR_2 = TYPE_5 . METHOD_2 ( ) . METHOD_4 ( VAR_1 ) ; if ( VAR_2 != null ) { return VAR_2 ; } else { VAR_2 = new TYPE_6 ( ) . METHOD_5 ( VAR_1 ) ; TYPE_5 . METHOD_2 ( ) . METHOD_6 ( VAR_1 , VAR_2 ) ; return VAR_2 ; } }\n"}
{"problem": "private void METHOD_1 ( int position , int offset ) { TYPE_1 . i ( VAR_1 , STRING_1 ) ; if ( ( VAR_2 ) == 0 ) { return ; } int VAR_3 = ( VAR_4 . METHOD_2 ( position ) . METHOD_3 ( ) ) + offset ; if ( VAR_3 != ( VAR_5 ) ) { VAR_5 = VAR_3 ; METHOD_4 ( VAR_3 , 0 ) ; } }\n", "fixed": "private void METHOD_1 ( int position , int offset ) { if ( ( VAR_2 ) == 0 ) { return ; } int VAR_3 = ( VAR_4 . METHOD_2 ( position ) . METHOD_3 ( ) ) + offset ; if ( VAR_3 != ( VAR_5 ) ) { VAR_5 = VAR_3 ; METHOD_4 ( VAR_3 , 0 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { METHOD_3 ( false ) ; METHOD_4 ( ) ; } else if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_3 ) ) { METHOD_3 ( false ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } else if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_4 ) ) { METHOD_3 ( true ) ; METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { METHOD_4 ( ) ; METHOD_3 ( false ) ; } else if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_3 ) ) { METHOD_3 ( false ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } else if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_4 ) ) { METHOD_3 ( true ) ; METHOD_6 ( ) ; } }\n"}
{"problem": "public java.lang.Object METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , int x , int y , int VAR_4 ) { if ( VAR_3 instanceof TYPE_3 ) { switch ( VAR_1 ) { case VAR_5 : return new TYPE_4 ( VAR_2 , x , y ) ; } } return null ; }\n", "fixed": "public java.lang.Object METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , int x , int y , int VAR_4 ) { if ( VAR_3 instanceof TYPE_3 ) { switch ( VAR_1 ) { case VAR_5 : return new TYPE_4 ( VAR_2 ) ; } } return null ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 class . METHOD_4 ( ) , new TYPE_2 ( ) , null ) ; TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 class . METHOD_4 ( ) , new TYPE_3 ( ) , null ) ; TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_3 class . METHOD_4 ( ) , new TYPE_4 ( ) , null ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( new TYPE_2 ( ) , null ) ; TYPE_1 . METHOD_2 ( ) . METHOD_3 ( new TYPE_3 ( ) , null ) ; TYPE_1 . METHOD_2 ( ) . METHOD_3 ( new TYPE_4 ( ) , null ) ; }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { int VAR_2 = ( ( TYPE_1 ) ( VAR_3 . METHOD_2 ( ) ) ) . METHOD_3 ( ) ; int VAR_4 = VAR_5 . METHOD_4 ( ) ; if ( ( ( ( ! ( VAR_6 . METHOD_5 ( ) ) ) && ( VAR_4 > 0 ) ) && ( VAR_1 > 0 ) ) && ( VAR_2 >= ( VAR_4 - INT_1 ) ) ) { VAR_6 . METHOD_6 ( true ) ; VAR_7 . METHOD_7 ( VAR_6 . METHOD_8 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { int VAR_2 = ( ( TYPE_1 ) ( VAR_3 . METHOD_2 ( ) ) ) . METHOD_3 ( ) ; int VAR_4 = VAR_5 . METHOD_4 ( ) ; if ( ( ( ( ! ( VAR_6 . METHOD_5 ( ) ) ) && ( VAR_4 > 0 ) ) && ( VAR_1 > 0 ) ) && ( VAR_2 >= ( VAR_4 - INT_1 ) ) ) { VAR_7 . METHOD_7 ( VAR_6 . METHOD_8 ( ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { this . VAR_1 = new TYPE_1 ( ) ; this . VAR_2 = new TYPE_2 ( new TYPE_3 ( ) ) ; VAR_1 . METHOD_2 ( this , new TYPE_4 ( ) ) ; METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( this , this ) ; new TYPE_5 ( this ) ; }\n", "fixed": "public void METHOD_1 ( ) { this . VAR_1 = new TYPE_1 ( ) ; this . VAR_2 = new TYPE_2 ( this , new TYPE_3 ( ) ) ; VAR_1 . METHOD_2 ( this , new TYPE_4 ( ) ) ; METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( this , this ) ; new TYPE_5 ( this ) ; }\n"}
{"problem": "void init ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_1 ( STRING_1 ) ; TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 . METHOD_2 ( VAR_1 ) ; TYPE_5 . METHOD_2 ( VAR_1 ) ; TYPE_6 . METHOD_2 ( VAR_1 ) ; TYPE_7 . METHOD_2 ( VAR_1 ) ; TYPE_8 . METHOD_2 ( VAR_1 ) ; TYPE_9 . METHOD_2 ( VAR_1 ) ; TYPE_10 . METHOD_2 ( VAR_1 ) ; TYPE_11 . METHOD_2 ( VAR_1 ) ; TYPE_12 . METHOD_2 ( VAR_1 ) ; TYPE_13 . METHOD_2 ( VAR_1 ) ; }\n", "fixed": "void init ( TYPE_1 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 . METHOD_2 ( VAR_1 ) ; TYPE_5 . METHOD_2 ( VAR_1 ) ; TYPE_6 . METHOD_2 ( VAR_1 ) ; TYPE_7 . METHOD_2 ( VAR_1 ) ; TYPE_8 . METHOD_2 ( VAR_1 ) ; TYPE_9 . METHOD_2 ( VAR_1 ) ; TYPE_10 . METHOD_2 ( VAR_1 ) ; TYPE_11 . METHOD_2 ( VAR_1 ) ; TYPE_12 . METHOD_2 ( VAR_1 ) ; TYPE_13 . METHOD_2 ( VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 . getType ( ) ) == ( VAR_2 ) ) { VAR_3 [ 0 ] = event . values [ 0 ] ; VAR_3 [ 1 ] = event . values [ 1 ] ; VAR_3 [ INT_1 ] = event . values [ INT_1 ] ; VAR_4 . METHOD_2 ( VAR_3 [ 0 ] , VAR_3 [ 1 ] , VAR_3 [ INT_1 ] , VAR_5 ) ; this . METHOD_3 ( VAR_6 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 . getType ( ) ) == ( VAR_2 ) ) { VAR_3 [ 0 ] = event . values [ 0 ] ; VAR_3 [ 1 ] = event . values [ 1 ] ; VAR_3 [ INT_1 ] = event . values [ INT_1 ] ; this . METHOD_3 ( VAR_6 ) ; } }\n"}
{"problem": "private double METHOD_1 ( int VAR_1 ) { double sum = 0 ; for ( int k = 0 ; k < ( VAR_2 ) ; k ++ ) { sum += ( TYPE_1 . METHOD_2 ( VAR_3 [ k ] ) ) * ( TYPE_1 . METHOD_2 ( VAR_4 [ k ] [ VAR_1 ] ) ) ; } return sum ; }\n", "fixed": "private double METHOD_1 ( int VAR_1 ) { double sum = 0 ; for ( int k = 0 ; k < ( VAR_2 ) ; k ++ ) { sum += ( TYPE_1 . METHOD_2 ( VAR_3 [ k ] ) ) * ( TYPE_1 . METHOD_2 ( VAR_4 [ k ] [ VAR_1 ] [ 1 ] ) ) ; } return sum ; }\n"}
{"problem": "public double METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 ) ) { return VAR_1 ; } else { int VAR_3 = ( VAR_4 ) - ( VAR_5 ) ; double VAR_6 = ( ( double ) ( VAR_2 ) ) / ( ( ( double ) ( VAR_7 ) ) - VAR_3 ) ; return ( ( double ) ( ( ( this . VAR_5 ) * VAR_6 ) + ( VAR_1 ) ) ) ; } }\n", "fixed": "public double METHOD_1 ( ) { int VAR_3 = ( VAR_4 ) - ( VAR_5 ) ; double VAR_6 = ( ( double ) ( ( VAR_2 ) - ( VAR_1 ) ) ) / ( ( ( double ) ( VAR_7 ) ) - VAR_3 ) ; return ( ( double ) ( ( ( this . VAR_5 ) * VAR_6 ) + ( VAR_1 ) ) ) ; }\n"}
{"problem": "public java.lang.String toString ( ) { java.lang.String VAR_1 = this . VAR_2 . name ; if ( ( VAR_3 . size ( ) ) == 0 ) return VAR_1 ; for ( int i = 0 ; i < ( VAR_3 . size ( ) ) ; i ++ ) { VAR_1 += ( ( STRING_1 + ( VAR_4 . get ( i ) . type ) ) + STRING_1 ) + ( VAR_3 . get ( i ) . name ) ; } return VAR_1 ; }\n", "fixed": "public java.lang.String toString ( ) { java.lang.String VAR_1 = this . VAR_2 . name ; if ( ( VAR_3 . size ( ) ) == 0 ) return VAR_1 ; for ( int i = 0 ; i < ( VAR_3 . size ( ) ) ; i ++ ) { VAR_1 += ( ( \"\\t\" + ( VAR_4 . get ( i ) . type ) ) + \"\\t\" ) + ( VAR_3 . get ( i ) . name ) ; } return VAR_1 ; }\n"}
{"problem": "protected void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_4 . METHOD_4 ( VAR_1 . METHOD_5 ( ) . getId ( ) ) ) ; VAR_1 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; VAR_1 . METHOD_8 ( VAR_5 . METHOD_4 ( VAR_1 . METHOD_9 ( ) . getId ( ) , true ) ) ; VAR_3 . METHOD_10 ( VAR_1 ) ; } } }\n", "fixed": "protected void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_4 . METHOD_4 ( VAR_1 . METHOD_5 ( ) . getId ( ) ) ) ; VAR_1 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; VAR_1 . METHOD_8 ( VAR_5 . METHOD_4 ( VAR_1 . METHOD_9 ( ) . getId ( ) ) ) ; VAR_3 . METHOD_10 ( VAR_1 ) ; } } }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"problem": "void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = VAR_2 ; for ( TYPE_2 VAR_3 : VAR_4 ) { VAR_1 = VAR_2 ; for ( TYPE_1 VAR_5 : VAR_3 . METHOD_2 ( ) ) { VAR_1 . remove ( VAR_5 ) ; } TYPE_3 TYPE_4 = new TYPE_3 ( VAR_1 , VAR_6 ) ; TYPE_5 temp = TYPE_4 . METHOD_3 ( ) ; temp . add ( VAR_3 ) ; VAR_7 . add ( temp ) ; } }\n", "fixed": "void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_2 VAR_3 : VAR_4 ) { for ( TYPE_1 VAR_5 : VAR_2 ) { VAR_1 . add ( VAR_5 ) ; } for ( TYPE_1 VAR_5 : VAR_3 . METHOD_2 ( ) ) { VAR_1 . remove ( VAR_5 ) ; } TYPE_3 TYPE_4 = new TYPE_3 ( VAR_1 , VAR_6 ) ; TYPE_5 temp = TYPE_4 . METHOD_3 ( ) ; temp . add ( VAR_3 ) ; VAR_7 . add ( temp ) ; } }\n"}
{"problem": "public void get ( java.lang.String url , final TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , url , new TYPE_3 ( ) { public void METHOD_1 ( int status , java.lang.String response ) { VAR_1 . METHOD_2 ( status , response ) ; } } , new TYPE_4 ( ) { public void METHOD_3 ( TYPE_5 error ) { VAR_1 . METHOD_4 ( error ) ; } } ) ; VAR_2 . METHOD_5 ( false ) ; VAR_4 . add ( VAR_2 ) ; }\n", "fixed": "public void get ( java.lang.String url , final TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , url , new TYPE_3 ( ) { public void METHOD_1 ( int status , java.lang.String response ) { VAR_1 . METHOD_2 ( status , response ) ; } } , new TYPE_4 ( ) { public void METHOD_3 ( TYPE_5 error ) { VAR_1 . METHOD_4 ( error ) ; } } ) ; VAR_4 . add ( VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return ; if ( VAR_1 instanceof TYPE_2 ) METHOD_2 ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ; if ( VAR_1 instanceof TYPE_3 ) METHOD_3 ( ( ( TYPE_3 ) ( VAR_1 ) ) ) ; else METHOD_4 ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return ; } else if ( VAR_1 instanceof TYPE_2 ) METHOD_2 ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ; else if ( VAR_1 instanceof TYPE_3 ) METHOD_3 ( ( ( TYPE_3 ) ( VAR_1 ) ) ) ; else METHOD_4 ( VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( java.util.ArrayList < java.lang.String > VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 , METHOD_3 ( ) ) ; for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { VAR_2 . METHOD_2 ( VAR_1 . get ( i ) , METHOD_3 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( java.util.ArrayList < java.lang.String > VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 , METHOD_3 ( ) ) ; if ( ( VAR_1 . size ( ) ) > 0 ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { VAR_2 . METHOD_2 ( VAR_1 . get ( i ) , METHOD_3 ( ) ) ; } } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { int VAR_2 = 0 ; for ( java.lang.String path : TYPE_1 . METHOD_2 ( VAR_1 ) ) { if ( ! ( METHOD_3 ( path ) ) ) { METHOD_4 ( path ) ; } METHOD_5 ( VAR_1 ) ; VAR_2 ++ ; } while ( ( VAR_2 -- ) > 0 ) { METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { int VAR_2 = 0 ; for ( java.lang.String path : TYPE_1 . METHOD_2 ( VAR_1 ) ) { if ( ! ( METHOD_3 ( path ) ) ) { METHOD_4 ( path ) ; } METHOD_5 ( path ) ; VAR_2 ++ ; } while ( ( VAR_2 -- ) > 0 ) { METHOD_6 ( ) ; } }\n"}
{"fixCommitSHA1": "5c1a470af68205e2ef6914ac2892bb84c6f23ea6", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "         System.out.println(\"configURL = \" + configURL);\n         BufferedReader reader = new BufferedReader(new InputStreamReader(configURL.openStream()));\n        mapper.parseDocument(operations, XMLInputFactory.newFactory().createXMLStreamReader(reader));\n         return operations;\n     }", "fixed": "         System.out.println(\"configURL = \" + configURL);\n         BufferedReader reader = new BufferedReader(new InputStreamReader(configURL.openStream()));\n        mapper.parseDocument(operations, XMLInputFactory.newInstance().createXMLStreamReader(reader));\n         return operations;\n     }", "sourceBeforeFix": "XMLInputFactory.newFactory()", "sourceAfterFix": "XMLInputFactory.newInstance()"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String query , int offset , int VAR_1 ) throws TYPE_2 { java.util.List < TYPE_1 > VAR_2 = null ; try { VAR_2 = METHOD_2 ( ) . METHOD_1 ( query ) ; } catch ( TYPE_3 VAR_3 ) { java.lang.String VAR_4 = STRING_1 + query ; VAR_5 . error ( VAR_4 ) ; throw new TYPE_3 ( VAR_4 , VAR_3 , VAR_6 ) ; } return VAR_2 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String query , int offset , int VAR_1 ) throws TYPE_2 { java.util.List < TYPE_1 > VAR_2 = null ; try { VAR_2 = METHOD_2 ( ) . METHOD_1 ( query ) ; } catch ( TYPE_3 VAR_3 ) { java.lang.String VAR_4 = STRING_1 + query ; VAR_5 . error ( VAR_4 , VAR_3 ) ; throw new TYPE_3 ( VAR_4 , VAR_3 , VAR_6 ) ; } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; VAR_2 = new TYPE_1 ( TYPE_2 . format ( ( ( TYPE_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ) + STRING_1 ) ) , INT_1 ) ; VAR_3 = new TYPE_4 ( TYPE_3 . METHOD_2 ( VAR_1 ) . METHOD_4 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; VAR_2 = new TYPE_1 ( TYPE_2 . format ( ( ( TYPE_3 . METHOD_2 ( VAR_1 ) . METHOD_4 ( ) . METHOD_3 ( ) ) + STRING_1 ) ) , INT_1 ) ; VAR_3 = new TYPE_4 ( TYPE_3 . METHOD_2 ( VAR_1 ) . METHOD_4 ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( TYPE_2 . METHOD_2 ( ) . isEmpty ( ) ) ) { TYPE_3 TYPE_4 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( ) ; try { METHOD_7 ( ) ; METHOD_8 ( ) ; } catch ( TYPE_5 VAR_2 ) { VAR_2 . METHOD_9 ( ) ; } catch ( java.lang.ClassNotFoundException VAR_2 ) { VAR_2 . METHOD_9 ( ) ; } METHOD_10 ( ) ; METHOD_11 ( ) ; METHOD_12 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( TYPE_2 . METHOD_2 ( ) . isEmpty ( ) ) ) { TYPE_3 TYPE_4 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( ) ; METHOD_10 ( ) ; try { METHOD_7 ( ) ; METHOD_8 ( ) ; } catch ( TYPE_5 VAR_2 ) { VAR_2 . METHOD_9 ( ) ; } catch ( java.lang.ClassNotFoundException VAR_2 ) { VAR_2 . METHOD_9 ( ) ; } METHOD_11 ( ) ; METHOD_12 ( ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( ) { try { get ( ) ; } catch ( TYPE_1 VAR_1 ) { java.util.logging.Logger.getLogger ( VAR_2 class . getName ( ) ) . METHOD_2 ( VAR_3 , null , VAR_1 ) ; } catch ( TYPE_2 VAR_1 ) { if ( ( VAR_1 . METHOD_3 ( ) ) instanceof TYPE_3 ) { } if ( ( VAR_1 . METHOD_3 ( ) ) instanceof TYPE_4 ) { } } VAR_4 = false ; VAR_5 . setText ( STRING_1 ) ; }\n", "fixed": "protected void METHOD_1 ( ) { try { get ( ) ; } catch ( TYPE_1 VAR_1 ) { java.util.logging.Logger.getLogger ( VAR_2 class . getName ( ) ) . METHOD_2 ( VAR_3 , null , VAR_1 ) ; } catch ( TYPE_2 VAR_1 ) { if ( ( VAR_1 . METHOD_3 ( ) ) instanceof TYPE_3 ) { } else { } } catch ( TYPE_4 VAR_1 ) { } VAR_4 = false ; VAR_5 . setText ( STRING_1 ) ; }\n"}
{"fixCommitSHA1": "17de6689ab43b6d8fc8b60b87eb1155ba55b26f6", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": " \t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {\n\t\t\tlogger.error(\"Could not parse VCAP_APPLICATION\", ex);\n \t\t}\n \t\treturn properties;\n \t}", "fixed": " \t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {\n\t\t\tlogger.error(\"Could not parse VCAP_SERVICES\", ex);\n \t\t}\n \t\treturn properties;\n \t}", "sourceBeforeFix": "Integer.MIN_VALUE + 11", "sourceAfterFix": "Integer.MIN_VALUE + 9"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { METHOD_2 ( ) ; try { VAR_2 = VAR_3 . METHOD_3 ( ) ; TYPE_1 results = VAR_2 . METHOD_4 ( ( STRING_1 + VAR_1 ) ) ; results . METHOD_5 ( ) ; VAR_4 = results . getString ( INT_1 ) ; results . METHOD_6 ( ) ; } catch ( TYPE_2 VAR_5 ) { VAR_5 . METHOD_7 ( ) ; } METHOD_8 ( ) ; return VAR_4 ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { METHOD_2 ( ) ; try { VAR_2 = VAR_3 . METHOD_3 ( ) ; TYPE_1 results = VAR_2 . METHOD_4 ( ( STRING_1 + VAR_1 ) ) ; results . METHOD_5 ( ) ; VAR_4 = results . getString ( INT_1 ) ; results . METHOD_6 ( ) ; } catch ( TYPE_2 VAR_5 ) { VAR_5 . METHOD_7 ( ) ; } finally { METHOD_8 ( ) ; } return VAR_4 ; }\n"}
{"fixCommitSHA1": "464e20480e8c188d6dcae7dbce2b9c5098d3584f", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Same Function Swap Args", "problem": "             future.get();\n             future.addListener(() -> counter.decrementAndGet(), Runnable::run);\n         }\n        assertEquals(0, counter.get());\n     }\n     @Test(groups = \"standalone\")", "fixed": "             future.get();\n             future.addListener(() -> counter.decrementAndGet(), Runnable::run);\n         }\n        assertEquals(counter.get(), 0);\n     }\n     @Test(groups = \"standalone\")", "sourceBeforeFix": "assertEquals(0,counter.get())", "sourceAfterFix": "assertEquals(counter.get(),0)"}
{"problem": "protected < TYPE_1 extends TYPE_2 , TYPE_3 extends TYPE_4 > java.util.List < TYPE_3 > METHOD_1 ( TYPE_5 VAR_1 , java.lang.String key , TYPE_6 < TYPE_1 , TYPE_3 > VAR_2 ) throws TYPE_7 { java.util.List < TYPE_3 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( java.lang.Integer id : METHOD_2 ( VAR_1 , key ) ) { TYPE_5 result = VAR_2 . METHOD_3 ( id ) ; VAR_3 . add ( VAR_2 . METHOD_4 ( result ) ) ; } return VAR_3 ; }\n", "fixed": "protected < TYPE_1 extends TYPE_2 , TYPE_3 extends TYPE_4 > java.util.List < TYPE_3 > METHOD_1 ( TYPE_5 VAR_1 , java.lang.String key , TYPE_6 < TYPE_1 , TYPE_3 > VAR_2 ) throws TYPE_7 { java.util.List < TYPE_3 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( java.lang.Integer id : METHOD_2 ( VAR_1 , key ) ) { TYPE_5 result = VAR_2 . METHOD_3 ( id ) ; VAR_3 . add ( VAR_2 . METHOD_4 ( result , true ) ) ; } return VAR_3 ; }\n"}
{"problem": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { if ( VAR_2 ) { VAR_3 . METHOD_2 ( INT_1 ) ; VAR_4 = INT_1 ; } else { VAR_3 . METHOD_2 ( 0 ) ; VAR_4 = 0 ; } VAR_1 = false ; } TYPE_1 . METHOD_3 ( this ) ; TYPE_1 . METHOD_4 ( this ) ; }\n", "fixed": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { if ( VAR_2 ) { VAR_3 . METHOD_2 ( INT_1 ) ; VAR_4 = INT_1 ; } else { VAR_3 . METHOD_2 ( 0 ) ; VAR_4 = 0 ; } VAR_1 = false ; } }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) { java.io.File VAR_1 = new java.io.File ( STRING_1 ) ; VAR_1 . METHOD_1 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; java.lang.System.out.println ( STRING_2 ) ; java.util.Scanner VAR_3 = new java.util.Scanner ( VAR_4 ) ; VAR_2 . path = VAR_3 . METHOD_2 ( ) ; java.lang.System.out.println ( VAR_2 . path ) ; try { VAR_2 . METHOD_3 ( ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_5 . METHOD_4 ( ) ; } VAR_3 . METHOD_5 ( ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; java.lang.System.out.println ( STRING_2 ) ; java.util.Scanner VAR_3 = new java.util.Scanner ( VAR_4 ) ; VAR_2 . path = VAR_3 . METHOD_2 ( ) ; java.lang.System.out.println ( VAR_2 . path ) ; try { VAR_2 . METHOD_3 ( ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_5 . METHOD_4 ( ) ; } VAR_3 . METHOD_5 ( ) ; }\n"}
{"problem": "public static void METHOD_1 ( ) { java.util.Scanner VAR_1 = new java.util.Scanner ( VAR_2 ) ; java.lang.System.out.println ( STRING_1 ) ; java.lang.String answer = VAR_1 . METHOD_2 ( ) ; if ( answer . METHOD_3 ( STRING_2 ) ) { TYPE_1 . METHOD_4 ( ) ; TYPE_1 . first = true ; } java.lang.System.out.println ( STRING_3 ) ; java.lang.String name = VAR_1 . METHOD_2 ( ) ; java.lang.System.out.println ( ( ( STRING_4 + name ) + STRING_5 ) ) ; java.lang.System.out.println ( STRING_6 ) ; }\n", "fixed": "public static void METHOD_1 ( ) { java.util.Scanner VAR_1 = new java.util.Scanner ( VAR_2 ) ; java.lang.System.out.println ( STRING_1 ) ; java.lang.String answer = VAR_1 . METHOD_2 ( ) ; if ( answer . METHOD_3 ( STRING_2 ) ) { TYPE_1 . first = true ; TYPE_1 . METHOD_4 ( ) ; } java.lang.System.out.println ( STRING_3 ) ; java.lang.String name = VAR_1 . METHOD_2 ( ) ; java.lang.System.out.println ( ( ( STRING_4 + name ) + STRING_5 ) ) ; java.lang.System.out.println ( STRING_6 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static void METHOD_1 ( TYPE_1 VAR_1 , java.io.File [ ] VAR_2 , java.io.File VAR_3 , java.lang.Integer VAR_4 , java.lang.Integer VAR_5 , java.lang.Integer VAR_6 ) { new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , 1.0 , VAR_7 , true , false , false , VAR_6 , null ) ; }\n", "fixed": "public static void METHOD_1 ( TYPE_1 VAR_1 , java.io.File [ ] VAR_2 , java.io.File VAR_3 , java.lang.Integer VAR_4 , java.lang.Integer VAR_5 , java.lang.Integer VAR_6 ) { new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , 1.0 , VAR_7 , true , false , false , VAR_6 , null , null ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) ; if ( ( VAR_2 . METHOD_3 ( ) ) == null ) { VAR_2 . METHOD_4 ( new TYPE_3 ( ) ) ; VAR_1 . METHOD_5 ( STRING_1 , VAR_2 ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) ; if ( ( VAR_2 . METHOD_3 ( ) ) == null ) { VAR_2 . METHOD_4 ( new TYPE_3 ( ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) ; VAR_3 = TYPE_1 . METHOD_2 ( VAR_4 class ) ; VAR_5 = TYPE_1 . METHOD_2 ( VAR_6 class ) ; VAR_7 = new TYPE_2 ( 0 , 0 , 0 , 0 , 0 , 0 , VAR_8 , VAR_1 , VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = METHOD_2 ( VAR_2 class ) ; VAR_3 = METHOD_2 ( VAR_4 class ) ; VAR_5 = METHOD_2 ( VAR_6 class ) ; VAR_7 = new TYPE_2 ( 0 , 0 , 0 , 0 , 0 , 0 , VAR_8 , VAR_1 , VAR_3 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MailEndpointBuilder\n             extends\n                 MailEndpointConsumerBuilder, MailEndpointProducerBuilder {\n         default AdvancedMailEndpointBuilder advanced() {", "fixed": "     \n    public interface MailEndpointBuilder\n             extends\n                 MailEndpointConsumerBuilder, MailEndpointProducerBuilder {\n         default AdvancedMailEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             case CREATE:\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNano(System.nanoTime() - start);\n                 }\n                 cacheRecordStore.createRecordWithExpiry(keyData, value, expiryPolicy, now, false);\n                 break;", "fixed": "             case CREATE:\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 cacheRecordStore.createRecordWithExpiry(keyData, value, expiryPolicy, now, false);\n                 break;", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"problem": "public static void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; for ( java.lang.Object x : new java.util.ArrayList < java.lang.Object > ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { ( ( TYPE_2 ) ( x ) ) . METHOD_5 ( ) ; if ( ( ( TYPE_2 ) ( x ) ) . METHOD_6 ( ) ) VAR_1 . remove ( ( ( TYPE_2 ) ( x ) ) ) ; } }\n", "fixed": "public static void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; for ( TYPE_2 x : new java.util.ArrayList < TYPE_2 > ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { x . METHOD_5 ( ) ; if ( x . METHOD_6 ( ) ) VAR_1 . remove ( x ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { this . remove ( this . VAR_1 ) ; this . remove ( this . VAR_2 ) ; this . add ( this . VAR_3 , VAR_4 ) ; this . VAR_2 . METHOD_2 ( ) ; this . VAR_3 . METHOD_2 ( ) ; this . METHOD_3 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { this . remove ( this . VAR_1 ) ; this . remove ( this . VAR_2 ) ; this . METHOD_3 ( ) ; this . add ( this . VAR_3 , VAR_4 ) ; this . VAR_2 . METHOD_2 ( ) ; this . VAR_3 . METHOD_2 ( ) ; this . METHOD_3 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { VAR_3 = ( VAR_2 ) ? STRING_1 : STRING_2 ; VAR_4 = ( VAR_2 ) ? INT_1 : INT_1 ; VAR_5 = ( VAR_2 ) ? INT_2 : INT_1 ; VAR_6 = ( VAR_2 ) ? INT_3 : INT_4 ; METHOD_2 ( java.lang.String.format ( STRING_3 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { VAR_3 = ( VAR_2 ) ? STRING_1 : STRING_2 ; VAR_4 = ( VAR_2 ) ? INT_1 : INT_1 ; VAR_5 = ( VAR_2 ) ? INT_2 : INT_1 ; VAR_6 = ( VAR_2 ) ? INT_4 : INT_3 ; METHOD_2 ( java.lang.String.format ( STRING_3 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) ; }\n"}
{"fixCommitSHA1": "5f2f072d694275f750d1ee139386cc64a0670f4f", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                 writerIdleTimeout =\n                     timer.newTimeout(this, writerIdleTimeMillis, TimeUnit.MILLISECONDS);\n                 try {\n                    channelIdle(ctx, IdleState.WRITER_IDLE, lastReadTime);\n                 } catch (Throwable t) {\n                     fireExceptionCaught(ctx, t);\n                 }", "fixed": "                 writerIdleTimeout =\n                     timer.newTimeout(this, writerIdleTimeMillis, TimeUnit.MILLISECONDS);\n                 try {\n                    channelIdle(ctx, IdleState.WRITER_IDLE, lastWriteTime);\n                 } catch (Throwable t) {\n                     fireExceptionCaught(ctx, t);\n                 }", "sourceBeforeFix": "channelIdle(ctx,IdleState.ALL_IDLE,lastReadTime)", "sourceAfterFix": "channelIdle(ctx,IdleState.ALL_IDLE,lastIoTime)"}
{"problem": "public void METHOD_1 ( java.lang.String response ) { METHOD_2 ( response ) ; VAR_1 = new TYPE_1 ( this , VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; if ( ( getIntent ( ) . METHOD_4 ( STRING_1 ) ) != null ) { VAR_4 = ( ( TYPE_2 ) ( getIntent ( ) . METHOD_4 ( STRING_1 ) ) ) ; ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_5 ( VAR_4 . getData ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String response ) { java.lang.System.out.println ( response ) ; METHOD_2 ( response ) ; VAR_1 = new TYPE_1 ( this , VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; if ( ( getIntent ( ) . METHOD_4 ( STRING_1 ) ) != null ) { VAR_4 = ( ( TYPE_2 ) ( getIntent ( ) . METHOD_4 ( STRING_1 ) ) ) ; ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_5 ( VAR_4 . getData ( ) ) ; } }\n"}
{"problem": "public void add ( TYPE_1 f ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 [ ] { f } ; return ; } TYPE_1 [ ] VAR_2 = new TYPE_1 [ ( VAR_1 . length ) + 1 ] ; TYPE_2 . METHOD_1 ( VAR_1 , 0 , VAR_2 , 0 , VAR_1 . length ) ; VAR_2 [ VAR_1 . length ] = f ; VAR_1 = VAR_2 ; }\n", "fixed": "public void add ( TYPE_1 f ) { if ( f == null ) return ; if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 [ ] { f } ; return ; } TYPE_1 [ ] VAR_2 = new TYPE_1 [ ( VAR_1 . length ) + 1 ] ; TYPE_2 . METHOD_1 ( VAR_1 , 0 , VAR_2 , 0 , VAR_1 . length ) ; VAR_2 [ VAR_1 . length ] = f ; VAR_1 = VAR_2 ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void update ( java.lang.String content ) { try ( TYPE_1 VAR_1 = VAR_2 . open ( ) ) { java.lang.String VAR_3 = STRING_1 ; VAR_1 . METHOD_1 ( VAR_3 ) . METHOD_2 ( STRING_2 , info ) . METHOD_2 ( \"id\" , id ) . METHOD_3 ( ) ; } }\n", "fixed": "public void update ( java.lang.String info ) { try ( TYPE_1 VAR_1 = VAR_2 . open ( ) ) { java.lang.String VAR_3 = STRING_1 ; VAR_1 . METHOD_1 ( VAR_3 ) . METHOD_2 ( STRING_2 , info ) . METHOD_2 ( \"id\" , id ) . METHOD_3 ( ) ; } }\n"}
{"fixCommitSHA1": "8b845392e920d753eb24fcffead0263416bc6227", "projectName": "apache.storm", "bugType": "Less Specific If", "problem": "      * If the write operation fails, then we will close the channel and trigger a reconnect.\n      */\n     private void flushMessages(Channel channel, final MessageBatch batch) {\n        if(batch.isEmpty()){\n             return;\n         }", "fixed": "      * If the write operation fails, then we will close the channel and trigger a reconnect.\n      */\n     private void flushMessages(Channel channel, final MessageBatch batch) {\n        if(null == batch || batch.isEmpty()){\n             return;\n         }", "sourceBeforeFix": "batch.isEmpty()", "sourceAfterFix": "null == batch || batch.isEmpty()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( this ) ; java.lang.System.out.println ( VAR_3 ) ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( this ) ; VAR_3 . METHOD_1 ( VAR_2 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { try { if ( ( new java.net.URL ( VAR_1 . getText ( ) ) . METHOD_2 ( ) ) != STRING_1 ) VAR_2 . METHOD_3 ( METHOD_4 ( new java.io.File ( new java.net.URL ( VAR_1 . getText ( ) ) . METHOD_2 ( ) ) ) ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { if ( ! ( new java.net.URL ( VAR_1 . getText ( ) ) . METHOD_2 ( ) . equals ( STRING_1 ) ) ) VAR_2 . METHOD_3 ( METHOD_4 ( new java.io.File ( new java.net.URL ( VAR_1 . getText ( ) ) . METHOD_2 ( ) ) ) ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } }\n"}
{"problem": "protected void METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; final int count = VAR_2 . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { TYPE_1 VAR_3 = VAR_2 . get ( i ) . get ( ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_4 ( VAR_1 ) ; } } }\n", "fixed": "protected void METHOD_1 ( int VAR_1 ) { METHOD_3 ( ) ; final int count = VAR_2 . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { TYPE_1 VAR_3 = VAR_2 . get ( i ) . get ( ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_4 ( VAR_1 ) ; } } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 result , boolean VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , ( STRING_1 + VAR_1 ) ) ; if ( VAR_1 ) { java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( ) ; VAR_3 . append ( result . METHOD_3 ( ) ) ; if ( ! ( TYPE_3 . isEmpty ( VAR_3 ) ) ) { } VAR_4 = VAR_3 . toString ( ) ; METHOD_4 ( STRING_2 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_5 ) ; } else { METHOD_7 ( STRING_3 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 result , boolean VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , ( STRING_1 + VAR_1 ) ) ; if ( VAR_1 ) { java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( ) ; VAR_3 . append ( result . METHOD_3 ( ) ) ; if ( ! ( TYPE_3 . isEmpty ( VAR_3 ) ) ) { } VAR_4 = VAR_3 . toString ( ) ; METHOD_7 ( STRING_2 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_5 ) ; } else { METHOD_7 ( STRING_3 ) ; } }\n"}
{"problem": "private java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_1 [ 0 ] ) == null ) ) { return VAR_2 ; } return VAR_1 [ 0 ] . equals ( VAR_3 ) ? ( ( VAR_4 ) + STRING_1 ) + ( VAR_1 [ 1 ] ) : VAR_1 [ 0 ] ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_1 [ 0 ] ) == null ) ) { return VAR_2 ; } return VAR_1 [ 0 ] . equals ( VAR_3 ) ? ( ( VAR_4 ) + STRING_1 ) + ( VAR_1 [ 1 ] ) : VAR_1 [ 0 ] ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( new java.lang.String [ ] { VAR_2 , VAR_3 , VAR_4 } ) ; TYPE_1 . METHOD_2 ( VAR_1 . METHOD_5 ( ) ) . METHOD_4 ( new java.lang.String [ ] { VAR_5 , VAR_6 , VAR_7 } , new java.lang.String [ ] { VAR_8 , VAR_9 , VAR_10 } , null ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( new java.lang.String [ ] { VAR_2 , VAR_3 , VAR_4 } ) ; TYPE_1 . METHOD_2 ( VAR_1 . METHOD_5 ( ) ) . METHOD_4 ( new java.lang.String [ ] { VAR_5 , VAR_6 , VAR_7 } , new java.lang.String [ ] { VAR_8 , VAR_9 , VAR_10 } , null , new java.lang.String [ ] { VAR_5 , VAR_6 , VAR_7 } , new java.lang.String [ ] { VAR_8 , VAR_9 , VAR_10 } , null ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedThriftEndpointBuilder\n             extends\n                 AdvancedThriftEndpointConsumerBuilder, AdvancedThriftEndpointProducerBuilder {\n         default ThriftEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedThriftEndpointBuilder\n             extends\n                 AdvancedThriftEndpointConsumerBuilder, AdvancedThriftEndpointProducerBuilder {\n         default ThriftEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; java.lang.String VAR_2 = ( ( METHOD_3 ( ) ) + STRING_1 ) + ( VAR_3 ) ; TYPE_1 VAR_4 = VAR_1 . METHOD_4 ( VAR_2 ) ; assertEquals ( VAR_2 , VAR_4 . METHOD_5 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; java.lang.String VAR_2 = ( METHOD_3 ( ) ) + STRING_1 ; assertEquals ( VAR_2 , VAR_1 . METHOD_4 ( ( VAR_2 + ( VAR_3 ) ) ) . METHOD_5 ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 output ) throws java.io.IOException { try { VAR_1 . METHOD_2 ( this , new TYPE_3 ( output ) ) ; } catch ( TYPE_4 VAR_2 ) { throw ( ( java.io.IOException ) ( VAR_2 . METHOD_3 ( ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 output ) throws java.io.IOException { try { VAR_1 . METHOD_2 ( this , new TYPE_3 ( output ) ) ; } catch ( TYPE_4 VAR_2 ) { if ( ( VAR_2 . METHOD_3 ( ) ) != null ) throw ( ( java.io.IOException ) ( VAR_2 . METHOD_3 ( ) ) ) ; throw VAR_2 ; } }\n"}
{"problem": "protected java.util.Collection < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = TYPE_2 . METHOD_2 ( ) ; if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { for ( TYPE_3 VAR_3 : VAR_1 . METHOD_3 ( ) ) { if ( ( ! ( TYPE_4 . isEmpty ( VAR_3 . METHOD_4 ( ) ) ) ) && ( ! ( VAR_3 . METHOD_5 ( ) ) ) ) { VAR_2 . add ( VAR_3 . METHOD_4 ( ) ) ; } } } return VAR_2 ; }\n", "fixed": "protected java.util.Collection < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = TYPE_2 . METHOD_2 ( ) ; if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { for ( TYPE_3 VAR_3 : VAR_1 . METHOD_3 ( ) ) { if ( ! ( TYPE_4 . isEmpty ( VAR_3 . METHOD_4 ( ) ) ) ) { VAR_2 . add ( VAR_3 . METHOD_4 ( ) ) ; } } } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( FLOAT_1 ) ; TYPE_1 VAR_3 = getActivity ( ) . METHOD_3 ( ) ; TYPE_2 VAR_4 = VAR_3 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; VAR_4 . replace ( VAR_9 , new TYPE_3 ( ) ) ; VAR_4 . METHOD_6 ( STRING_1 ) ; VAR_4 . commit ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_3 = getActivity ( ) . METHOD_3 ( ) ; TYPE_2 VAR_4 = VAR_3 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; VAR_4 . replace ( VAR_9 , new TYPE_3 ( ) ) ; VAR_4 . METHOD_6 ( STRING_1 ) ; VAR_4 . commit ( ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AhcEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedAhcEndpointBuilder advanced() {\n             return (AdvancedAhcEndpointBuilder) this;\n         }", "fixed": "     \n    public interface AhcEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedAhcEndpointBuilder advanced() {\n             return (AdvancedAhcEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 , java.util.ArrayList < TYPE_2 > VAR_2 ) { VAR_3 . METHOD_2 ( getContext ( ) , VAR_1 , VAR_2 ) ; if ( ( VAR_4 . METHOD_3 ( ) ) == null ) { VAR_4 . METHOD_4 ( VAR_3 ) ; } else { VAR_3 . METHOD_5 ( ) ; } }\n", "fixed": "private void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 , java.util.ArrayList < TYPE_2 > VAR_2 ) { VAR_3 . METHOD_2 ( getContext ( ) , VAR_1 , VAR_2 ) ; if ( ( VAR_4 . METHOD_3 ( ) ) == null ) { VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_3 . METHOD_5 ( ) ; } else { VAR_3 . METHOD_5 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 . equals ( VAR_2 ) ) { java.util.ArrayList < TYPE_1 > VAR_3 = TYPE_2 . METHOD_2 ( VAR_4 ) ; if ( VAR_3 != null ) { TYPE_2 . METHOD_3 ( VAR_5 ) ; VAR_5 = VAR_3 ; TYPE_2 . METHOD_3 ( VAR_6 ) ; VAR_6 = TYPE_2 . METHOD_4 ( VAR_5 ) ; VAR_7 = ( VAR_5 . size ( ) ) - 1 ; METHOD_5 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 . equals ( VAR_2 ) ) { java.util.ArrayList < TYPE_1 > VAR_3 = TYPE_2 . METHOD_2 ( VAR_4 ) ; if ( VAR_3 != null ) { VAR_5 = VAR_3 ; VAR_6 = TYPE_2 . METHOD_4 ( VAR_5 ) ; VAR_7 = ( VAR_5 . size ( ) ) - 1 ; METHOD_5 ( ) ; } } }\n"}
{"problem": "public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) . equals ( STRING_1 ) ) { VAR_1 . METHOD_3 ( STRING_2 ) ; } if ( VAR_1 . METHOD_2 ( ) . equals ( STRING_2 ) ) { VAR_1 . METHOD_3 ( STRING_3 ) ; } if ( VAR_1 . METHOD_2 ( ) . equals ( STRING_3 ) ) { VAR_1 . METHOD_3 ( STRING_4 ) ; } if ( VAR_1 . METHOD_2 ( ) . equals ( STRING_4 ) ) { VAR_1 . METHOD_3 ( STRING_1 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) . equals ( STRING_1 ) ) { VAR_1 . METHOD_3 ( STRING_2 ) ; } else if ( VAR_1 . METHOD_2 ( ) . equals ( STRING_2 ) ) { VAR_1 . METHOD_3 ( STRING_3 ) ; } else if ( VAR_1 . METHOD_2 ( ) . equals ( STRING_3 ) ) { VAR_1 . METHOD_3 ( STRING_4 ) ; } else if ( VAR_1 . METHOD_2 ( ) . equals ( STRING_4 ) ) { VAR_1 . METHOD_3 ( STRING_1 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 = VAR_1 . get ( STRING_1 ) ; TYPE_3 = VAR_1 . get ( STRING_2 ) ; TYPE_4 = VAR_1 . get ( STRING_3 ) ; TYPE_5 = VAR_1 . get ( STRING_4 ) ; TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( STRING_5 , 1 ) ; VAR_3 . update ( ) ; METHOD_4 ( ) ; METHOD_5 ( INT_1 , FLOAT_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 = VAR_1 . get ( STRING_1 ) ; TYPE_3 = VAR_1 . get ( STRING_2 ) ; TYPE_4 = VAR_1 . get ( STRING_3 ) ; TYPE_5 = VAR_1 . get ( STRING_4 ) ; TYPE_3 . METHOD_2 ( VAR_2 ) ; TYPE_5 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( STRING_5 , 1 ) ; VAR_3 . update ( ) ; METHOD_4 ( ) ; METHOD_5 ( INT_1 , FLOAT_1 ) ; }\n"}
{"fixCommitSHA1": "8264af051e753ff408e860607575178a2d892b7d", "projectName": "AsyncHttpClient.async-http-client", "bugType": "More Specific If", "problem": "                 throw new IllegalArgumentException(\"Illegal URL: \" + url, e);\n             }\n            if (queryParams != null) {\n                 StringBuilder builder = new StringBuilder();\nif (!url.substring(8).contains(\"/\")) {", "fixed": "                 throw new IllegalArgumentException(\"Illegal URL: \" + url, e);\n             }\n            if (queryParams != null && !queryParams.isEmpty()) {\n                 StringBuilder builder = new StringBuilder();\nif (!url.substring(8).contains(\"/\")) {", "sourceBeforeFix": "queryParams != null", "sourceAfterFix": "queryParams != null && !queryParams.isEmpty()"}
{"fixCommitSHA1": "c5da37a16d63469dcf2ee85ca1f96dc6b6799cea", "projectName": "iluwatar.java-design-patterns", "bugType": "Change Identifier Used", "problem": " public class App {\r\n \tpublic static void main(String[] args) {\r\n\t\tGnomeEngineeringManager manager = new GnomeEngineeringManager();\r\n \t\tmanager.operateDevice();\r\n \t}\r\n }\r", "fixed": " public class App {\r\n \tpublic static void main(String[] args) {\r\n\t\tEngineer manager = new GnomeEngineeringManager();\r\n \t\tmanager.operateDevice();\r\n \t}\r\n }\r", "sourceBeforeFix": "GnomeEngineeringManager manager=new GnomeEngineeringManager(); ", "sourceAfterFix": "Engineer manager=new GnomeEngineeringManager(); "}
{"problem": "void METHOD_1 ( ) { VAR_1 = true ; VAR_2 . setValue ( java.lang.Math.round ( VAR_2 . getValue ( ) ) ) ; int VAR_3 = ( ( int ) ( VAR_2 . getValue ( ) ) ) ; int VAR_4 = VAR_5 ; if ( VAR_3 > VAR_4 ) { step ( ( VAR_3 - ( VAR_6 ) ) ) ; } else if ( VAR_3 < VAR_4 ) { METHOD_2 ( ( ( ( VAR_6 ) + 1 ) - VAR_3 ) ) ; step ( 1 ) ; } VAR_5 = VAR_3 ; }\n", "fixed": "void METHOD_1 ( ) { VAR_1 = true ; VAR_2 . setValue ( java.lang.Math.round ( VAR_2 . getValue ( ) ) ) ; int VAR_3 = ( ( int ) ( VAR_2 . getValue ( ) ) ) ; int VAR_4 = VAR_5 ; if ( VAR_3 > VAR_4 ) { step ( ( VAR_3 - ( VAR_6 ) ) ) ; } else if ( VAR_3 < VAR_4 ) { METHOD_2 ( ( ( VAR_6 ) - VAR_3 ) ) ; step ( 0 ) ; } VAR_5 = VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( boolean value ) { if ( ( VAR_1 ) != null ) VAR_2 = value ; else if ( ( VAR_3 ) != null ) VAR_4 = value ; if ( ( VAR_5 ) != null ) VAR_6 = value ; if ( ( VAR_7 ) != null ) VAR_8 = value ; if ( ( VAR_9 ) != null ) VAR_10 = value ; if ( ( VAR_11 ) != null ) VAR_12 = value ; }\n", "fixed": "public void METHOD_1 ( boolean value ) { if ( ( VAR_1 ) != null ) VAR_2 = value ; if ( ( VAR_3 ) != null ) VAR_4 = value ; if ( ( VAR_5 ) != null ) VAR_6 = value ; if ( ( VAR_7 ) != null ) VAR_8 = value ; if ( ( VAR_9 ) != null ) VAR_10 = value ; if ( ( VAR_11 ) != null ) VAR_12 = value ; }\n"}
{"problem": "private boolean METHOD_1 ( ) { try { TYPE_1 file = METHOD_2 ( ) ; if ( ( file . METHOD_3 ( ) ) && ( ! ( this . VAR_1 ) ) ) { this . result = ( ( TYPE_2 ) ( file . METHOD_4 ( ) ) ) ; this . VAR_1 = true ; return true ; } } catch ( java.io.IOException VAR_2 ) { java.lang.System.out.println ( VAR_2 ) ; } return false ; }\n", "fixed": "private boolean METHOD_1 ( ) { try { TYPE_1 file = METHOD_2 ( ) ; if ( file . METHOD_3 ( ) ) { this . result = ( ( TYPE_2 ) ( file . METHOD_4 ( ) ) ) ; return true ; } } catch ( java.io.IOException VAR_2 ) { java.lang.System.out.println ( VAR_2 ) ; } return false ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , int [ ] VAR_2 ) { VAR_1 . METHOD_2 ( VAR_2 [ 0 ] , VAR_2 [ 1 ] , ( ( VAR_2 [ INT_1 ] ) + ( VAR_2 [ 0 ] ) ) , ( ( VAR_2 [ INT_2 ] ) + ( VAR_2 [ 1 ] ) ) , VAR_3 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , int [ ] VAR_2 ) { VAR_1 . METHOD_2 ( VAR_2 [ 0 ] , ( ( VAR_2 [ 1 ] ) + 1 ) , ( ( ( VAR_2 [ INT_1 ] ) + ( VAR_2 [ 0 ] ) ) - 1 ) , ( ( ( VAR_2 [ INT_2 ] ) + ( VAR_2 [ 1 ] ) ) - 1 ) , VAR_3 ) ; }\n"}
{"problem": "public static void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 ; java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( STRING_2 ) ; while ( ( VAR_1 . size ( ) ) > 0 ) { java.lang.System.out.print ( STRING_3 ) ; VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) == 0 ) { java.lang.System.out.println ( STRING_4 ) ; } else { java.lang.System.out.println ( STRING_5 ) ; } } }\n", "fixed": "public static void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 ; java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( STRING_2 ) ; while ( ( VAR_1 . size ( ) ) > 0 ) { java.lang.System.out.print ( STRING_3 ) ; VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) == 0 ) { java.lang.System.out.println ( STRING_4 ) ; } else { java.lang.System.out.println ( STRING_5 ) ; VAR_1 . remove ( VAR_2 ) ; } } }\n"}
{"problem": "private java.util.List < java.util.List < TYPE_1 > > METHOD_1 ( java.util.Collection < TYPE_2 > VAR_1 ) { java.util.List < java.util.List < TYPE_1 > > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 VAR_3 : VAR_1 ) { java.util.List < TYPE_1 > VAR_4 = METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; double VAR_5 = METHOD_4 ( VAR_4 ) ; VAR_3 . METHOD_5 ( ( - VAR_5 ) ) ; VAR_2 . add ( VAR_4 ) ; } return VAR_2 ; }\n", "fixed": "private java.util.List < java.util.List < TYPE_1 > > METHOD_1 ( java.util.Collection < TYPE_2 > VAR_1 ) { java.util.List < java.util.List < TYPE_1 > > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 VAR_3 : VAR_1 ) { java.util.List < TYPE_1 > VAR_4 = METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; VAR_2 . add ( VAR_4 ) ; } return VAR_2 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( int VAR_1 ) { TYPE_1 [ ] VAR_2 = ( ( TYPE_1 [ ] ) ( new java.lang.Object [ VAR_1 ] ) ) ; for ( int i = 0 ; i <= ( size ) ; i ++ ) { VAR_3 [ i ] = VAR_4 [ ( ( ( first ) + i ) % ( VAR_4 . length ) ) ] ; } VAR_4 = VAR_3 ; }\n", "fixed": "private void METHOD_1 ( int VAR_1 ) { TYPE_1 [ ] VAR_3 = ( ( TYPE_1 [ ] ) ( new java.lang.Object [ VAR_1 ] ) ) ; for ( int i = 0 ; i <= ( size ) ; i ++ ) { VAR_3 [ i ] = VAR_4 [ ( ( ( first ) + i ) % ( VAR_4 . length ) ) ] ; } VAR_4 = VAR_3 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { if ( ( VAR_2 . size ( ) ) >= ( VAR_3 ) ) { throw new TYPE_1 ( ) ; } else { if ( ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ) { VAR_2 . put ( VAR_1 , VAR_2 . size ( ) ) ; } } }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { if ( ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ) { if ( ( VAR_2 . size ( ) ) >= ( VAR_3 ) ) { throw new TYPE_1 ( ) ; } else { VAR_2 . put ( VAR_1 , VAR_2 . size ( ) ) ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { try { METHOD_2 ( STRING_1 ) ; fail ( ) ; } catch ( java.lang.Exception VAR_1 ) { java.lang.System.out.println ( STRING_2 ) ; } METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 class ) . METHOD_5 ( STRING_3 , STRING_4 ) . get ( ) . get ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { try { METHOD_2 ( STRING_1 ) ; fail ( ) ; } catch ( java.lang.Exception VAR_1 ) { java.lang.System.out.println ( STRING_2 ) ; } METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 class ) . METHOD_5 ( STRING_3 , STRING_4 ) . get ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { try { TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( ) ; METHOD_3 ( VAR_3 . METHOD_4 ( VAR_2 , null , new java.io.File ( VAR_1 ) ) ) ; } catch ( java.io.IOException VAR_4 ) { METHOD_5 ( VAR_5 , VAR_4 . toString ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { try { TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( ) ; METHOD_3 ( VAR_3 . METHOD_4 ( VAR_2 , null , new java.io.File ( VAR_1 ) ) ) ; } catch ( java.io.IOException VAR_4 ) { METHOD_5 ( VAR_5 , VAR_4 . toString ( ) ) ; METHOD_5 ( VAR_5 , \"\\n\" ) ; } }\n"}
{"problem": "private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , java.util.List < TYPE_1 > result , TYPE_3 file ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_4 VAR_3 : TYPE_5 . METHOD_2 ( ) ) { if ( VAR_3 . METHOD_3 ( file . getName ( ) ) ) { VAR_2 = METHOD_4 ( VAR_1 , file , VAR_3 ) ; result . METHOD_5 ( VAR_2 ) ; } } return VAR_2 ; }\n", "fixed": "private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 file ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_4 VAR_3 : TYPE_5 . METHOD_2 ( ) ) { if ( VAR_3 . METHOD_3 ( file . getName ( ) ) ) { VAR_2 . METHOD_5 ( METHOD_4 ( VAR_1 , file , VAR_3 ) ) ; } } return VAR_2 ; }\n"}
{"problem": "private void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . add ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; VAR_1 . add ( VAR_4 ) ; TYPE_1 < java.lang.String > VAR_5 = new TYPE_1 ( this , VAR_6 , VAR_1 ) ; VAR_5 . METHOD_2 ( VAR_7 ) ; VAR_8 . METHOD_3 ( VAR_5 ) ; }\n", "fixed": "private void METHOD_1 ( ) { VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . add ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; VAR_1 . add ( VAR_4 ) ; TYPE_1 < java.lang.String > VAR_5 = new TYPE_1 ( this , VAR_6 , VAR_1 ) ; VAR_5 . METHOD_2 ( VAR_7 ) ; VAR_8 . METHOD_3 ( VAR_5 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map.Entry < java.lang.String , TYPE_2 > VAR_2 = this . VAR_3 . METHOD_2 ( VAR_1 . getText ( ) ) ; if ( VAR_2 == null ) { return ; } this . VAR_4 = VAR_2 . METHOD_3 ( ) ; this . METHOD_4 ( VAR_2 , VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map.Entry < java.lang.String , TYPE_2 > VAR_2 = this . VAR_3 . METHOD_2 ( VAR_1 . getText ( ) . toLowerCase ( ) ) ; if ( VAR_2 == null ) { return ; } this . VAR_4 = VAR_2 ; this . METHOD_4 ( VAR_2 , VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 ) ; final TYPE_2 VAR_2 = METHOD_3 ( VAR_3 class ) ; final java.lang.String [ ] VAR_4 = new java.lang.String [ ] { STRING_1 + ( METHOD_4 ( VAR_3 class , VAR_5 , ( ( STRING_2 + ( ( char ) ( INT_1 ) ) ) + ( ( char ) ( INT_2 ) ) ) , STRING_3 ) ) } ; METHOD_5 ( VAR_2 , METHOD_6 ( STRING_4 ) , VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 ) ; final TYPE_2 VAR_2 = METHOD_3 ( VAR_3 class ) ; final java.lang.String [ ] VAR_4 = new java.lang.String [ ] { STRING_1 + ( METHOD_4 ( VAR_3 class , VAR_5 , new java.lang.String ( new char [ ] { INT_1 , INT_2 } ) , STRING_3 ) ) } ; METHOD_5 ( VAR_2 , METHOD_6 ( STRING_4 ) , VAR_4 ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"problem": "protected TYPE_1 METHOD_1 ( TYPE_2 x , TYPE_2 y ) { METHOD_2 ( ) ; int VAR_1 = x . METHOD_3 ( ) [ 0 ] ; int VAR_2 = x . METHOD_3 ( ) [ 1 ] ; int VAR_3 = y . METHOD_3 ( ) [ 0 ] ; int VAR_4 = y . METHOD_3 ( ) [ 1 ] ; return VAR_5 . METHOD_4 ( x , y , VAR_2 , VAR_1 , VAR_3 , VAR_4 , VAR_1 , 1 , 1 , VAR_3 , false ) ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( TYPE_2 x , TYPE_2 y ) { int VAR_1 = x . METHOD_3 ( ) [ 0 ] ; int VAR_2 = x . METHOD_3 ( ) [ 1 ] ; int VAR_3 = y . METHOD_3 ( ) [ 0 ] ; int VAR_4 = y . METHOD_3 ( ) [ 1 ] ; return VAR_5 . METHOD_4 ( x , y , VAR_2 , VAR_1 , VAR_3 , VAR_4 , VAR_1 , 1 , 1 , VAR_3 , false ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( VAR_2 class ) ; TYPE_4 VAR_3 = new TYPE_5 ( VAR_4 , null , VAR_1 , null , null , null , null ) ; VAR_3 . METHOD_3 ( VAR_5 , null ) ; }\n", "fixed": "public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( VAR_2 class ) ; TYPE_4 VAR_3 = new TYPE_5 ( VAR_4 , null , VAR_1 , null , null , null , null , null ) ; VAR_3 . METHOD_3 ( VAR_5 , null ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_2 = METHOD_2 ( STRING_2 ) ; assert VAR_2 . METHOD_3 ( ) . contains ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; type ( STRING_3 ) ; METHOD_5 ( VAR_3 ) ; TYPE_3 . assertNotNull ( METHOD_2 ( STRING_4 ) ) ; TYPE_3 . assertNotNull ( METHOD_2 ( STRING_5 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_2 = METHOD_2 ( STRING_2 ) ; assert VAR_2 . METHOD_3 ( ) . contains ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; type ( STRING_3 ) ; METHOD_5 ( VAR_3 ) ; TYPE_3 . assertNotNull ( METHOD_2 ( STRING_4 ) ) ; }\n"}
{"problem": "private java.lang.Object get ( java.lang.String VAR_1 , int type ) { synchronized ( VAR_2 ) { if ( ! ( METHOD_1 ( VAR_1 , type ) ) ) { throw new TYPE_1 ( ( STRING_1 + VAR_1 ) ) ; } return VAR_3 . get ( VAR_1 ) . getValue ( ) ; } }\n", "fixed": "private java.lang.Object get ( java.lang.String VAR_1 , int type ) { synchronized ( VAR_2 ) { if ( ! ( METHOD_1 ( VAR_1 , type ) ) ) { throw new TYPE_1 ( ( STRING_1 + ( VAR_1 . toLowerCase ( ) ) ) ) ; } return VAR_3 . get ( VAR_1 . toLowerCase ( ) ) . getValue ( ) ; } }\n"}
{"problem": "private boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ( ( VAR_1 >= ( VAR_3 . length ) ) || ( VAR_2 >= ( VAR_3 . length ) ) ) || ( ( VAR_3 [ VAR_1 ] [ VAR_2 ] ) != 0 ) ) { return false ; } else { METHOD_2 ( ( ( java.lang.String ) ( VAR_3 [ VAR_1 ] [ VAR_2 ] ) ) ) ; return true ; } }\n", "fixed": "private boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ( ( ( VAR_1 >= ( VAR_3 . length ) ) || ( VAR_2 >= ( VAR_3 . length ) ) ) || ( VAR_1 < 0 ) ) || ( VAR_2 < 0 ) ) { return false ; } else { return ( VAR_3 [ VAR_1 ] [ VAR_2 ] ) == 0 ; } }\n"}
{"problem": "private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.io.File VAR_2 , boolean VAR_3 , boolean VAR_4 ) throws java.lang.Exception { TYPE_2 context = METHOD_2 ( ) ; context . put ( VAR_5 , VAR_1 ) ; context . put ( VAR_6 , VAR_4 ) ; context . put ( VAR_7 , STRING_1 ) ; context . put ( VAR_8 , STRING_2 ) ; METHOD_3 ( new java.io.File ( VAR_2 , ( VAR_3 ? VAR_9 : VAR_10 ) ) , ( ( VAR_10 ) + ( VAR_11 ) ) , context ) ; }\n", "fixed": "private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.io.File VAR_2 , boolean VAR_3 , boolean VAR_4 ) throws java.lang.Exception { TYPE_2 context = METHOD_2 ( ) ; context . put ( VAR_5 , VAR_1 ) ; context . put ( VAR_6 , VAR_4 ) ; METHOD_3 ( new java.io.File ( VAR_2 , ( VAR_3 ? VAR_9 : VAR_10 ) ) , ( ( VAR_10 ) + ( VAR_11 ) ) , context ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 = true ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 class ) ; TYPE_3 . put ( java.lang.Thread . METHOD_3 ( ) . getId ( ) , VAR_2 ) ; TYPE_4 . METHOD_4 ( VAR_2 , VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( VAR_4 ) . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 class ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = true ; TYPE_1 VAR_2 = METHOD_2 ( VAR_3 class ) ; TYPE_3 . put ( java.lang.Thread . METHOD_3 ( ) . getId ( ) , VAR_2 ) ; TYPE_4 . METHOD_4 ( VAR_2 , VAR_4 . METHOD_5 ( ) ) ; METHOD_6 ( VAR_4 ) . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 class ) ) ; }\n"}
{"problem": "public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; java.lang.System.out.print ( STRING_1 ) ; if ( VAR_1 == VAR_2 ) { java.lang.System.out.println ( STRING_2 ) ; } else { java.lang.System.out.println ( STRING_3 ) ; } java.lang.System.out.print ( STRING_4 ) ; if ( VAR_1 . METHOD_2 ( ) ) { java.lang.System.out.println ( STRING_5 ) ; } else if ( VAR_1 . METHOD_3 ( ) . equals ( VAR_2 . METHOD_3 ( ) ) ) { java.lang.System.out.println ( STRING_2 ) ; } else { java.lang.System.out.println ( STRING_3 ) ; } }\n", "fixed": "public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; java.lang.System.out.print ( STRING_1 ) ; if ( VAR_1 == VAR_2 ) { java.lang.System.out.println ( STRING_2 ) ; } else { java.lang.System.out.println ( STRING_3 ) ; } java.lang.System.out.print ( STRING_4 ) ; if ( VAR_1 . METHOD_2 ( ) ) { java.lang.System.out.println ( STRING_5 ) ; } else if ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 . METHOD_3 ( ) ) ) { java.lang.System.out.println ( STRING_2 ) ; } else { java.lang.System.out.println ( STRING_3 ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item ) { return ( ( ( ( ( item . getType ( ) ) == ( VAR_1 ) ) || ( ( item . getType ( ) ) == ( VAR_2 ) ) ) || ( ( item . getType ( ) ) == ( VAR_3 ) ) ) || ( ( item . getType ( ) ) == ( VAR_4 ) ) ) || ( ( item . getType ( ) ) == ( VAR_5 ) ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 item ) { if ( item == null ) { return false ; } return ( ( ( ( ( item . getType ( ) ) == ( VAR_1 ) ) || ( ( item . getType ( ) ) == ( VAR_2 ) ) ) || ( ( item . getType ( ) ) == ( VAR_3 ) ) ) || ( ( item . getType ( ) ) == ( VAR_4 ) ) ) || ( ( item . getType ( ) ) == ( VAR_5 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( STRING_1 ) ; } } else { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( STRING_2 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( true ) ; } } else { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( false ) ; } } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( TYPE_2 . METHOD_2 ( this , VAR_2 ) ) != ( VAR_3 ) ) { TYPE_2 . METHOD_3 ( this , new java.lang.String [ ] { VAR_2 } , VAR_4 ) ; } VAR_5 = TYPE_3 . METHOD_4 ( VAR_6 ) ; METHOD_5 ( VAR_7 ) ; METHOD_5 ( VAR_8 ) ; for ( TYPE_4 listener : VAR_9 ) { listener . METHOD_6 ( VAR_7 , VAR_10 ) ; listener . METHOD_6 ( VAR_8 , VAR_11 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( TYPE_2 . METHOD_2 ( this , VAR_2 ) ) != ( VAR_3 ) ) { TYPE_2 . METHOD_3 ( this , new java.lang.String [ ] { VAR_2 } , VAR_4 ) ; } VAR_5 = TYPE_3 . METHOD_4 ( VAR_6 ) ; }\n"}
{"problem": "private java.lang.String METHOD_1 ( java.lang.String response ) { java.lang.String VAR_1 = STRING_1 ; try { VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( response ) ; } catch ( TYPE_2 VAR_2 ) { java.lang.System.out.println ( ( STRING_2 + ( VAR_2 . METHOD_4 ( ) ) ) ) ; } return VAR_1 ; }\n", "fixed": "private java.lang.String METHOD_1 ( java.lang.String response ) { java.lang.String VAR_1 = STRING_1 ; if ( response . equals ( STRING_1 ) ) return response ; try { VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( response ) ; } catch ( TYPE_2 VAR_2 ) { java.lang.System.out.println ( ( STRING_2 + ( VAR_2 . METHOD_4 ( ) ) ) ) ; } return VAR_1 ; }\n"}
{"problem": "private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = VAR_2 . getValue ( VAR_4 , STRING_1 ) ; java.lang.String [ ] VAR_5 = VAR_3 . split ( VAR_6 ) ; return java.util.Arrays.asList ( VAR_5 ) ; }\n", "fixed": "private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = VAR_2 . getValue ( VAR_4 , STRING_1 ) ; if ( VAR_3 . isEmpty ( ) ) { return null ; } else { java.lang.String [ ] VAR_5 = VAR_3 . split ( VAR_6 ) ; return java.util.Arrays.asList ( VAR_5 ) ; } }\n"}
{"problem": "private static void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; final TYPE_3 VAR_3 = new TYPE_4 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 , STRING_3 ) . METHOD_4 ( STRING_4 , STRING_5 ) . build ( ) ; new TYPE_5 ( ) . METHOD_5 ( VAR_3 , VAR_2 ) ; VAR_2 . METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }\n", "fixed": "private static void METHOD_1 ( TYPE_2 VAR_2 ) throws java.io.IOException { final TYPE_3 VAR_3 = new TYPE_4 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 , STRING_3 ) . METHOD_4 ( STRING_4 , STRING_5 ) . build ( ) ; new TYPE_5 ( ) . METHOD_5 ( VAR_3 , VAR_2 ) ; VAR_2 . METHOD_6 ( ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"problem": "public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { TYPE_1 VAR_1 = intent . METHOD_2 ( ) ; if ( VAR_1 != null ) { TYPE_2 result = VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_3 . setText ( result . METHOD_4 ( 0 ) . METHOD_5 ( ) ) ; } else { TYPE_3 . METHOD_6 ( STRING_1 , STRING_2 ) ; } }\n", "fixed": "public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { TYPE_1 VAR_1 = intent . METHOD_2 ( ) ; if ( VAR_1 != null ) { TYPE_2 result = VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_3 . setText ( result . METHOD_4 ( 0 ) . METHOD_5 ( ) ) ; } else { VAR_3 . setText ( STRING_2 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ! ( VAR_1 . get ( ) ) ) return ; if ( ( length ) == ( VAR_2 . METHOD_2 ( VAR_3 . length ) ) ) { METHOD_3 ( ) ; } else { METHOD_4 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ! ( VAR_1 . get ( ) ) ) return ; if ( ( length ) == ( VAR_2 . METHOD_2 ( ( ( VAR_3 ) != null ? VAR_3 . length : 0 ) ) ) ) { METHOD_3 ( ) ; } else { METHOD_4 ( ) ; } }\n"}
{"problem": "public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return TYPE_3 . METHOD_2 ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ; } else if ( VAR_1 instanceof TYPE_4 ) { return TYPE_3 . METHOD_3 ( ( ( TYPE_4 ) ( VAR_1 ) ) ) ; } else if ( VAR_1 instanceof TYPE_5 ) { return true ; } else if ( VAR_1 instanceof TYPE_6 ) { return true ; } else { return false ; } }\n", "fixed": "public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return TYPE_3 . METHOD_2 ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ; } else if ( VAR_1 instanceof TYPE_4 ) { return TYPE_3 . METHOD_3 ( ( ( TYPE_4 ) ( VAR_1 ) ) ) ; } else if ( VAR_1 instanceof TYPE_5 ) { return true ; } else if ( VAR_1 instanceof TYPE_6 ) { return true ; } return false ; }\n"}
{"problem": "public synchronized void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != ( - 1 ) ) ) { METHOD_2 ( ) ; METHOD_3 ( VAR_3 , VAR_1 ) ; VAR_2 = VAR_4 = - 1 ; VAR_5 = true ; } METHOD_4 ( ) ; }\n", "fixed": "public synchronized void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != ( - 1 ) ) ) { METHOD_2 ( ) ; METHOD_3 ( VAR_3 , VAR_1 ) ; VAR_2 = VAR_4 = - 1 ; VAR_5 = true ; } else { METHOD_4 ( ) ; } }\n"}
{"problem": "private void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) { VAR_1 . setEnabled ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . contains ( ( ( ( VAR_4 ) + STRING_1 ) + ( VAR_5 ) ) ) ) ; VAR_2 . setEnabled ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . contains ( ( ( ( VAR_4 ) + STRING_1 ) + ( VAR_6 ) ) ) ) ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) { VAR_1 . setEnabled ( VAR_3 . METHOD_3 ( ) . contains ( ( ( ( VAR_4 ) + STRING_1 ) + ( VAR_5 ) ) ) ) ; VAR_2 . setEnabled ( VAR_3 . METHOD_3 ( ) . contains ( ( ( ( VAR_4 ) + STRING_1 ) + ( VAR_6 ) ) ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; VAR_3 = true ; } else { TYPE_1 . METHOD_2 ( VAR_2 , STRING_2 ) ; VAR_3 = false ; } VAR_4 . METHOD_1 ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; VAR_3 = true ; } else { TYPE_1 . METHOD_2 ( VAR_2 , STRING_2 ) ; VAR_3 = false ; } if ( ( VAR_4 ) != null ) VAR_4 . METHOD_1 ( VAR_1 ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( java.lang.String text , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { label = new TYPE_1 ( STRING_1 , VAR_3 . get ( STRING_2 ) , VAR_4 ) ; label . setText ( text ) ; label . METHOD_2 ( VAR_1 . x , VAR_1 . y ) ; label . METHOD_3 ( VAR_2 , 1 ) ; VAR_5 . METHOD_4 ( label ) ; return label ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.lang.String text , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { label = new TYPE_1 ( STRING_1 , VAR_3 . get ( STRING_2 ) , VAR_4 ) ; label . setText ( text ) ; label . METHOD_2 ( VAR_1 . x , VAR_1 . y ) ; label . METHOD_3 ( VAR_2 ) ; VAR_5 . METHOD_4 ( label ) ; return label ; }\n"}
{"problem": "private static synchronized TYPE_1 METHOD_1 ( ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_1 = new TYPE_3 ( STRING_1 ) ; java.lang.String VAR_2 = VAR_1 . getString ( STRING_2 , STRING_3 ) ; int VAR_3 = VAR_1 . getInt ( STRING_4 , INT_1 ) ; VAR_4 = new TYPE_1 ( VAR_2 , VAR_3 ) ; java.lang.System.out.println ( STRING_5 ) ; return VAR_4 ; }\n", "fixed": "private static synchronized TYPE_1 METHOD_1 ( ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_1 = new TYPE_3 ( ) ; java.lang.String VAR_2 = VAR_1 . getString ( STRING_2 , STRING_3 ) ; int VAR_3 = VAR_1 . getInt ( STRING_4 , INT_1 ) ; VAR_4 = new TYPE_1 ( VAR_2 , VAR_3 ) ; java.lang.System.out.println ( STRING_5 ) ; return VAR_4 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( final TYPE_1 event ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) . VAR_2 ; if ( ( VAR_3 ) == ( VAR_4 ) ) { TYPE_4 VAR_5 = VAR_6 . METHOD_3 ( ) ; if ( ! ( VAR_5 instanceof TYPE_5 ) ) VAR_6 . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_5 ) ) ; } }\n", "fixed": "public void METHOD_1 ( final TYPE_1 event ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) . VAR_2 ; if ( ( ( VAR_3 ) == ( VAR_4 ) ) && ( VAR_1 != null ) ) { TYPE_4 VAR_5 = VAR_6 . METHOD_3 ( ) ; if ( ! ( VAR_5 instanceof TYPE_5 ) ) VAR_6 . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_5 ) ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.net.URL url ) throws java.io.IOException { TYPE_1 VAR_1 ; if ( STRING_1 . METHOD_2 ( url . METHOD_3 ( ) ) ) { VAR_1 = new java.io.FileOutputStream ( url . METHOD_4 ( ) , true ) ; } else { TYPE_2 VAR_2 = METHOD_5 ( url ) ; VAR_2 . METHOD_6 ( METHOD_7 ( ) ) ; VAR_1 = VAR_2 . METHOD_8 ( ) ; } TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 ) ; return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.net.URL url ) throws java.io.IOException { TYPE_1 VAR_1 ; if ( STRING_1 . METHOD_2 ( url . METHOD_3 ( ) ) ) { VAR_1 = new java.io.FileOutputStream ( url . METHOD_4 ( ) ) ; } else { TYPE_2 VAR_2 = METHOD_5 ( url ) ; VAR_2 . METHOD_6 ( METHOD_7 ( ) ) ; VAR_1 = VAR_2 . METHOD_8 ( ) ; } TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 ) ; return VAR_3 ; }\n"}
{"fixCommitSHA1": "224017cdc8ee4076845c59f9ebe8de5aca6fd2ae", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                 boolean skip = false;\n                 for (ParamValueMetaData prop : md.getContextParams()) {\n                     if (prop.getParamName().equals(ENABLE_PROPERTY)) {\n                        boolean explicitEnable = Boolean.parseBoolean(prop.getParamName());\n                         if(explicitEnable) {\n                             found = true;\n                         } else {", "fixed": "                 boolean skip = false;\n                 for (ParamValueMetaData prop : md.getContextParams()) {\n                     if (prop.getParamName().equals(ENABLE_PROPERTY)) {\n                        boolean explicitEnable = Boolean.parseBoolean(prop.getParamValue());\n                         if(explicitEnable) {\n                             found = true;\n                         } else {", "sourceBeforeFix": "prop.getParamName()", "sourceAfterFix": "prop.getParamValue()"}
{"problem": "private boolean METHOD_1 ( java.lang.String key , boolean VAR_1 ) { if ( VAR_2 ) { return VAR_3 . getBoolean ( key , VAR_1 ) ; } else { if ( ! ( VAR_4 . METHOD_2 ( key ) ) ) { VAR_4 . put ( key , ( ( VAR_3 . getBoolean ( key , VAR_1 ) ) + STRING_1 ) ) ; } return java.lang.Boolean . METHOD_3 ( VAR_4 . get ( key ) ) ; } }\n", "fixed": "protected boolean METHOD_1 ( java.lang.String key , boolean VAR_1 ) { if ( VAR_2 ) { return VAR_3 . getBoolean ( key , VAR_1 ) ; } else { if ( ! ( VAR_4 . METHOD_2 ( key ) ) ) { VAR_4 . put ( key , ( ( VAR_3 . getBoolean ( key , VAR_1 ) ) + STRING_1 ) ) ; } return java.lang.Boolean . METHOD_3 ( VAR_4 . get ( key ) ) ; } }\n"}
{"problem": "protected void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; TYPE_1 . info ( STRING_1 ) ; VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( java.lang.String . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) ; return ; }\n", "fixed": "protected void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( java.lang.String . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) ; return ; }\n"}
{"problem": "public static java.util.Properties METHOD_1 ( java.io.File VAR_1 ) { java.util.Properties VAR_2 = new java.util.Properties ( ) ; try { java.io.BufferedReader VAR_3 = new java.io.BufferedReader ( new java.io.FileReader ( VAR_1 ) ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_3 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_4 ) { TYPE_1 . METHOD_4 ( VAR_5 , VAR_4 , STRING_1 , VAR_1 ) ; return VAR_2 ; } return VAR_2 ; }\n", "fixed": "public static java.util.Properties METHOD_1 ( java.io.File VAR_1 ) { java.util.Properties VAR_2 = new java.util.Properties ( ) ; try { java.io.BufferedReader VAR_3 = new java.io.BufferedReader ( new java.io.FileReader ( VAR_1 ) ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_3 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_4 ) { TYPE_1 . METHOD_4 ( VAR_5 , VAR_4 , STRING_1 , VAR_1 ) ; } return VAR_2 ; }\n"}
{"problem": "public static < TYPE_1 > void METHOD_1 ( java.lang.String VAR_1 , java.lang.Class < TYPE_1 > VAR_2 ) { java.lang.String [ ] VAR_3 = VAR_1 . split ( STRING_1 ) ; java.lang.String VAR_4 = ( TYPE_2 . METHOD_2 ( VAR_2 ) ) + STRING_2 ; for ( java.lang.String line : VAR_3 ) { java.lang.System.out.println ( ( VAR_4 + line ) ) ; } try { TYPE_3 . METHOD_3 ( VAR_1 , TYPE_2 . METHOD_4 ( VAR_2 ) ) ; } catch ( java.lang.Exception VAR_5 ) { } }\n", "fixed": "public static < TYPE_1 > void METHOD_1 ( java.lang.String VAR_1 , java.lang.Class < TYPE_1 > VAR_2 ) { java.lang.String [ ] VAR_3 = VAR_1 . split ( STRING_1 ) ; java.lang.String VAR_4 = ( TYPE_2 . METHOD_2 ( VAR_2 ) ) + STRING_2 ; for ( java.lang.String line : VAR_3 ) { java.lang.System.out.println ( ( VAR_4 + line ) ) ; } try { TYPE_3 . METHOD_1 ( VAR_1 , TYPE_2 . METHOD_4 ( VAR_2 ) ) ; } catch ( java.lang.Exception VAR_5 ) { } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"problem": "public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) >= ( VAR_2 ) ) { return METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . get ( 0 ) ; } else { return METHOD_2 ( ) . METHOD_3 ( ) . VAR_3 ; } }\n", "fixed": "private TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) >= ( VAR_2 ) ) { return METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . get ( 0 ) ; } else { return METHOD_2 ( ) . METHOD_3 ( ) . VAR_3 ; } }\n"}
{"problem": "public TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { TYPE_4 VAR_4 = METHOD_2 ( ) ; if ( VAR_2 != null ) { VAR_2 = VAR_2 . replace ( CHAR_1 , CHAR_2 ) ; VAR_4 . add ( TYPE_5 . METHOD_3 ( STRING_1 , VAR_2 ) ) ; } if ( VAR_3 != null ) { VAR_4 . add ( TYPE_5 . METHOD_4 ( STRING_2 , VAR_3 ) ) ; } return super . METHOD_5 ( VAR_4 , VAR_1 ) ; }\n", "fixed": "public TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { TYPE_4 VAR_4 = METHOD_2 ( ) ; if ( VAR_2 != null ) { VAR_2 = VAR_2 . replace ( CHAR_1 , CHAR_2 ) ; VAR_4 . add ( TYPE_5 . METHOD_3 ( STRING_1 , VAR_2 ) ) ; } return super . METHOD_5 ( VAR_4 , VAR_1 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KinesisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKinesisEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KinesisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKinesisEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( android.view.View view ) { VAR_1 . add ( ( ( ( ( VAR_1 . size ( ) ) + 1 ) + STRING_1 ) + ( VAR_2 . getText ( ) . toString ( ) ) ) ) ; VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { VAR_3 . add ( ( ( ( ( VAR_3 . METHOD_4 ( ) ) + 1 ) + STRING_1 ) + ( VAR_2 . getText ( ) . toString ( ) ) ) ) ; VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; }\n"}
{"problem": "private java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 [ ] VAR_2 ) { java.util.ArrayList < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { TYPE_1 VAR_5 = new TYPE_1 ( VAR_2 [ i ] ) ; VAR_5 . METHOD_2 ( VAR_4 ) ; VAR_3 . add ( VAR_5 ) ; } java.util.Collections.sort ( VAR_3 ) ; return VAR_3 ; }\n", "fixed": "private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , java.util.List < TYPE_2 > VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 ) ; for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) { TYPE_1 VAR_5 = new TYPE_1 ( VAR_2 . get ( i ) ) ; VAR_5 . METHOD_2 ( VAR_4 ) ; VAR_3 . add ( VAR_5 ) ; } java.util.Collections.sort ( VAR_3 ) ; return VAR_3 ; }\n"}
{"fixCommitSHA1": "031f769fa3c610748b48bc105b4518c880161d0a", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t*/\n \tpublic Vector2 getLocalAxisA(){\n\t\tjniGetLocalAnchorA(addr, tmp);\n \t\tlocalAxisA.set(tmp[0], tmp[1]);\n \t\treturn localAxisA;\n \t}", "fixed": " \t*/\n \tpublic Vector2 getLocalAxisA(){\n\t\tjniGetLocalAxisA(addr, tmp);\n \t\tlocalAxisA.set(tmp[0], tmp[1]);\n \t\treturn localAxisA;\n \t}", "sourceBeforeFix": "jniGetLocalAnchorA(addr,tmp)", "sourceAfterFix": "jniGetLocalAxisA(addr,tmp)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @param from The element to be copied.\n \t * @param to The target element.\n \t */\n\tpublic void copyTo(T from, T to);", "fixed": " \t * @param from The element to be copied.\n \t * @param to The target element.\n \t */\n\tpublic abstract void copyTo(T from, T to);", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_3 . METHOD_3 ( VAR_4 ) ) ) ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( ) . METHOD_7 ( ) ; VAR_5 = null ; }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_3 . METHOD_3 ( VAR_4 ) ) ) ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( ) ; }\n"}
{"problem": "void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . setEnabled ( false ) ; if ( VAR_1 . getString ( STRING_1 ) . equals ( STRING_2 ) ) { VAR_2 . setText ( VAR_3 ) ; } else { VAR_2 . setText ( VAR_4 ) ; } }\n", "fixed": "void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( VAR_1 . getString ( STRING_1 ) . equals ( STRING_2 ) ) { VAR_2 . setEnabled ( false ) ; VAR_2 . setText ( VAR_3 ) ; } else { VAR_2 . setText ( VAR_4 ) ; } }\n"}
{"fixCommitSHA1": "17213b9c352ff8d1bd6042405ccdc96393b279ba", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {\n       @Override\n       public Integer execute(Jedis connection) {\n        connection.subscribe(jedisPubSub, patterns);\n         return 0;\n       }\n     }.runWithAnyNode();", "fixed": "     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {\n       @Override\n       public Integer execute(Jedis connection) {\n        connection.psubscribe(jedisPubSub, patterns);\n         return 0;\n       }\n     }.runWithAnyNode();", "sourceBeforeFix": "connection.subscribe(jedisPubSub,patterns)", "sourceAfterFix": "connection.psubscribe(jedisPubSub,patterns)"}
{"problem": "private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = VAR_1 ; java.util.regex.Matcher VAR_3 = TYPE_1 . METHOD_2 ( VAR_2 ) ; if ( VAR_3 . METHOD_3 ( ) ) { int VAR_4 = java.lang.Integer.parseInt ( VAR_3 . METHOD_4 ( 1 ) ) ; java.lang.String VAR_5 = TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_4 ) ; if ( VAR_5 != null ) { VAR_2 = VAR_5 ; } } return VAR_2 ; }\n", "fixed": "private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return null ; } java.lang.String VAR_2 = VAR_1 ; java.util.regex.Matcher VAR_3 = TYPE_1 . METHOD_2 ( VAR_2 ) ; if ( VAR_3 . METHOD_3 ( ) ) { int VAR_4 = java.lang.Integer.parseInt ( VAR_3 . METHOD_4 ( 1 ) ) ; java.lang.String VAR_5 = TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_4 ) ; if ( VAR_5 != null ) { VAR_2 = VAR_5 ; } } return VAR_2 ; }\n"}
{"problem": "private void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class , STRING_1 , \"false\" ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { int state = VAR_3 . METHOD_3 ( ) ; if ( ( state == ( VAR_4 ) ) || ( state == ( VAR_5 ) ) ) continue ; METHOD_4 ( VAR_3 ) ; } }\n", "fixed": "private void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class , STRING_1 , \"false\" ) ; if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { for ( TYPE_1 VAR_3 : VAR_1 ) { int state = VAR_3 . METHOD_3 ( ) ; if ( ( state == ( VAR_4 ) ) || ( state == ( VAR_5 ) ) ) continue ; METHOD_4 ( VAR_3 ) ; } } }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; java.lang.String VAR_2 = ( ( ( ( ( ( ( ( ( METHOD_3 ( ) ) + STRING_3 ) + ( VAR_3 ) ) + STRING_4 ) + ( VAR_3 ) ) + ( VAR_3 ) ) + STRING_5 ) + ( VAR_3 ) ) + STRING_6 ) + ( VAR_3 ) ; TYPE_1 . main ( new java.lang.String [ 0 ] ) ; TYPE_2 . assertEquals ( VAR_2 , getData ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; java.lang.String VAR_2 = ( ( ( ( ( ( ( METHOD_3 ( ) ) + STRING_4 ) + ( VAR_3 ) ) + ( VAR_3 ) ) + STRING_5 ) + ( VAR_3 ) ) + STRING_6 ) + ( VAR_3 ) ; TYPE_1 . main ( new java.lang.String [ 0 ] ) ; TYPE_2 . assertEquals ( VAR_2 , getData ( ) ) ; }\n"}
{"problem": "private void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 . size ( ) ) > 0 ) { TYPE_1 VAR_2 = VAR_1 . get ( 0 ) ; METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_2 . getData ( ) ) ; } METHOD_5 ( VAR_3 ) ; }\n", "fixed": "private void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 . size ( ) ) > 0 ) { TYPE_1 VAR_2 = VAR_1 . get ( 0 ) ; METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_2 . getData ( ) ) ; METHOD_5 ( VAR_3 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int position ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; final TYPE_3 item = ( ( TYPE_3 ) ( VAR_3 . get ( position ) ) ) ; if ( VAR_4 . contains ( item ) ) { METHOD_2 ( ( ( TYPE_4 ) ( VAR_2 ) ) , position , item ) ; } else { METHOD_3 ( ( ( TYPE_4 ) ( VAR_2 ) ) , position , item ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int position ) { final TYPE_3 item = VAR_3 . get ( position ) ; if ( VAR_4 . contains ( item ) ) { METHOD_2 ( ( ( TYPE_4 ) ( VAR_1 ) ) , position , item ) ; } else { METHOD_3 ( ( ( TYPE_4 ) ( VAR_1 ) ) , position , item ) ; } }\n"}
{"problem": "private void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( STRING_2 ) ; this . METHOD_2 ( this . VAR_1 , new java.io.File ( ( ( ( this . VAR_2 ) + ( VAR_3 ) ) + STRING_3 ) ) , true ) ; this . METHOD_3 ( this . VAR_4 , new java.io.File ( ( ( ( this . VAR_2 ) + ( VAR_3 ) ) + STRING_4 ) ) , this . VAR_5 , this . VAR_6 , TYPE_1 . METHOD_4 ( STRING_5 ) ) ; }\n", "fixed": "private void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( STRING_2 ) ; this . METHOD_2 ( this . VAR_1 , new java.io.File ( ( ( ( this . VAR_2 ) + ( VAR_3 ) ) + STRING_3 ) ) , true , null ) ; this . METHOD_3 ( this . VAR_4 , new java.io.File ( ( ( ( this . VAR_2 ) + ( VAR_3 ) ) + STRING_4 ) ) , this . VAR_5 , this . VAR_6 , TYPE_1 . METHOD_4 ( STRING_5 ) ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_1 < TYPE_2 > VAR_3 = new TYPE_1 ( this , VAR_4 , VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_5 ) ; VAR_6 . METHOD_4 ( STRING_1 ) ; VAR_6 . METHOD_5 ( new TYPE_3 ( VAR_3 , VAR_7 , this ) ) ; }\n", "fixed": "private void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 = new TYPE_1 ( this , VAR_4 , VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_5 ) ; VAR_6 . METHOD_4 ( STRING_1 ) ; VAR_6 . METHOD_5 ( new TYPE_3 ( VAR_3 , VAR_7 , this ) ) ; }\n"}
{"problem": "public void init ( ) { VAR_1 . METHOD_1 ( FLOAT_1 ) ; VAR_2 . METHOD_1 ( FLOAT_1 ) ; VAR_3 = VAR_4 . get ( STRING_1 ) ; VAR_5 = VAR_4 . get ( STRING_2 ) ; VAR_6 = VAR_4 . get ( STRING_3 ) ; VAR_7 = VAR_4 . get ( STRING_4 ) ; VAR_8 = new TYPE_1 ( VAR_1 ) ; VAR_9 = new TYPE_1 ( VAR_2 ) ; VAR_10 = new TYPE_2 ( STRING_5 , TYPE_3 . METHOD_2 ( ) ) ; }\n", "fixed": "public void init ( ) { VAR_1 . METHOD_1 ( FLOAT_1 ) ; VAR_2 . METHOD_1 ( FLOAT_1 ) ; VAR_8 = new TYPE_1 ( VAR_1 ) ; VAR_9 = new TYPE_1 ( VAR_2 ) ; VAR_10 = new TYPE_2 ( STRING_5 , TYPE_3 . METHOD_2 ( ) ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { final TYPE_1 VAR_1 = this ; new java.lang.Thread ( ( ) - > { try { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; } } catch ( java.lang.Exception VAR_3 ) { VAR_2 = null ; } } ) . start ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { new java.lang.Thread ( ( ) - > { try { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; } } catch ( java.lang.Exception VAR_3 ) { VAR_2 = null ; } } ) . start ( ) ; }\n"}
{"problem": "protected void METHOD_1 ( java.lang.String src ) { java.util.List < java.lang.String > VAR_1 = java.util.Arrays.asList ( VAR_2 , VAR_3 ) ; java.util.List < java.lang.String > VAR_4 = java.util.Arrays.asList ( VAR_5 ) ; java.util.List < java.lang.String > VAR_6 = java.util.Arrays.asList ( VAR_7 ) ; super . METHOD_2 ( TYPE_1 . METHOD_3 ( src , VAR_1 , VAR_4 , VAR_6 ) ) ; }\n", "fixed": "protected void METHOD_1 ( java.lang.String src ) { java.util.List < java.lang.String > VAR_1 = java.util.Arrays.asList ( VAR_2 , VAR_3 ) ; java.util.List < java.lang.String > VAR_4 = java.util.Arrays.asList ( VAR_5 ) ; java.util.List < java.lang.String > VAR_6 = java.util.Arrays.asList ( VAR_7 ) ; super . METHOD_1 ( TYPE_1 . METHOD_3 ( src , VAR_1 , VAR_4 , VAR_6 ) ) ; }\n"}
{"problem": "private static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( new TYPE_2 < TYPE_3 > ( ) { public void handle ( TYPE_3 event ) { if ( ( VAR_2 ) != STRING_1 ) { VAR_3 = TYPE_4 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( ) ; VAR_2 = STRING_1 ; VAR_4 . METHOD_5 ( VAR_5 ) ; } } } ) ; }\n", "fixed": "private static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( new TYPE_2 < TYPE_3 > ( ) { public void handle ( TYPE_3 event ) { VAR_3 = TYPE_4 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( ) ; VAR_2 = STRING_1 ; VAR_4 . METHOD_5 ( VAR_5 ) ; } } ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 . METHOD_2 ( this ) ; if ( VAR_2 == ( VAR_3 ) ) { METHOD_3 ( STRING_1 , STRING_2 ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; METHOD_3 ( STRING_3 , VAR_4 . getText ( ) . toString ( ) ) ; METHOD_5 ( ) ; } else { METHOD_3 ( STRING_1 , STRING_4 ) ; VAR_4 . METHOD_4 ( VAR_6 ) ; METHOD_3 ( STRING_3 , STRING_5 ) ; METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 . METHOD_2 ( this ) ; if ( VAR_2 == ( VAR_3 ) ) { METHOD_3 ( STRING_1 , STRING_2 ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; METHOD_5 ( ) ; } else { METHOD_3 ( STRING_1 , STRING_4 ) ; VAR_4 . METHOD_4 ( VAR_6 ) ; METHOD_5 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.util.List < TYPE_1 > result ) { list . METHOD_2 ( ) ; if ( result != null ) { list . METHOD_3 ( result ) ; } if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_2 ( getActivity ( ) , METHOD_4 ( ) , result ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; } else { VAR_1 . METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( java.util.List < TYPE_1 > result ) { list . METHOD_2 ( ) ; if ( result != null ) { list . METHOD_3 ( result ) ; } if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_2 ( getActivity ( ) , METHOD_4 ( ) , list ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; } else { VAR_1 . METHOD_6 ( ) ; } }\n"}
{"name": "SHORTEST_PATHS.java", "problem": "final static int INF = 99999; public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) { Map<String,Integer> weight_by_node = new HashMap<String,Integer>(); for (List<String> edge : weight_by_edge.keySet()) { weight_by_node.put(edge.get(1), INF); weight_by_node.put(edge.get(0), INF); } weight_by_node.put(source, 0); for (int i = 0; i < weight_by_node.size(); i++) { for (List<String> edge : weight_by_edge.keySet()) { int update_weight = Math.min( weight_by_node.get(edge.get(0)) + weight_by_edge.get(edge), weight_by_node.get(edge.get(1))); weight_by_edge.put(edge, update_weight); } } return weight_by_node; } public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) { Map<String,Integer> weight_by_node = new HashMap<String,Integer>(); for (WeightedEdge edge : weight_by_edge) { weight_by_node.put(edge.node1.toString(), INF); weight_by_node.put(edge.node2.toString(), INF); } weight_by_node.put(source.getValue(), 0); for (int i = 0; i < weight_by_node.size(); i++) { for (WeightedEdge edge : weight_by_edge) { int update_weight = Math.min( weight_by_node.get(edge.node1.toString()) + edge.weight, weight_by_node.get(edge.node2.toString())); edge.weight = update_weight; } } return weight_by_node; } }", "fixed": "final static int INF = 99999; public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) { Map<String,Integer> weight_by_node = new HashMap<String,Integer>(); for (List<String> edge : weight_by_edge.keySet()) { weight_by_node.put(edge.get(1), INF); weight_by_node.put(edge.get(0), INF); } weight_by_node.put(source, 0); for (int i = 0; i < weight_by_node.size(); i++) { for (List<String> edge : weight_by_edge.keySet()) { int update_weight = Math.min( weight_by_node.get(edge.get(0)) + weight_by_edge.get(edge), weight_by_node.get(edge.get(1))); weight_by_node.put(edge.get(1), update_weight); } } return weight_by_node; } }", "hint": "Minimum-Weight Paths\nbellman-ford\nBellman-Ford algorithm implementation", "input": ["witch", "sandwich"], "output": "2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "f5309e8856186f5105e0bfcefda1273330f36ac0", "projectName": "jersey.jersey", "bugType": "Same Function Less Args", "problem": " \t\tClientConfig jerseyConfig = new ClientConfig();\n \t\tClient client = ClientBuilder.newClient(jerseyConfig);\n\t\tclient = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_PASS, 1));\n \t\tWebTarget resource = client.target(getBaseUri()).path(\"auth-digest\");", "fixed": " \t\tClientConfig jerseyConfig = new ClientConfig();\n \t\tClient client = ClientBuilder.newClient(jerseyConfig);\n\t\tclient = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_PASS));\n \t\tWebTarget resource = client.target(getBaseUri()).path(\"auth-digest\");", "sourceBeforeFix": "new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS,1)", "sourceAfterFix": "new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS)"}
{"problem": "public TYPE_1 METHOD_1 ( int VAR_1 ) { if ( VAR_1 > ( VAR_2 ) ) { throw new TYPE_2 ( ( ( ( ( ( STRING_1 + STRING_2 ) + VAR_1 ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ) ) ; } TYPE_1 VAR_3 = new TYPE_1 ( this ) ; VAR_4 = this . VAR_5 ; VAR_6 = this . VAR_2 ; VAR_7 = this . VAR_8 ; VAR_9 = ( this . VAR_8 ) + VAR_1 ; return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int VAR_1 ) { if ( VAR_1 > ( VAR_2 ) ) { throw new TYPE_2 ( ( ( ( ( ( STRING_1 + STRING_2 ) + VAR_1 ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ) ) ; } TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_4 = this . VAR_5 ; VAR_6 = VAR_1 ; VAR_7 = this . VAR_8 ; VAR_9 = ( this . VAR_8 ) + VAR_1 ; return VAR_3 ; }\n"}
{"problem": "public void execute ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { if ( TYPE_4 . METHOD_1 ( VAR_3 , VAR_4 , VAR_5 ) ) { final TYPE_5 VAR_6 = TYPE_6 . METHOD_2 ( null , VAR_7 , VAR_8 class ) ; VAR_6 . METHOD_3 ( ) ; VAR_1 . METHOD_3 ( ) ; } }\n", "fixed": "public void execute ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { if ( TYPE_4 . METHOD_1 ( VAR_3 , VAR_4 , VAR_5 ) ) { final TYPE_5 VAR_6 = TYPE_6 . METHOD_2 ( VAR_2 , VAR_7 , VAR_8 class ) ; VAR_6 . METHOD_3 ( ) ; VAR_1 . METHOD_3 ( ) ; } }\n"}
{"problem": "public TYPE_1 [ ] METHOD_1 ( int VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { VAR_2 [ i ] = new TYPE_1 ( INT_1 ) ; } return VAR_2 ; }\n", "fixed": "public TYPE_1 [ ] METHOD_1 ( int VAR_1 , int length ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { VAR_2 [ i ] = new TYPE_1 ( length ) ; } return VAR_2 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_4 ( STRING_1 ) ; } if ( true ) { METHOD_5 ( ) ; } TYPE_3 VAR_5 = TYPE_3 . METHOD_6 ( ) ; METHOD_5 ( ) ; METHOD_5 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_4 ( STRING_1 ) ; } if ( true ) { METHOD_5 ( ) ; } }\n"}
{"fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n            invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }", "fixed": "         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n            invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }", "sourceBeforeFix": "invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation)", "sourceAfterFix": "invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation)"}
{"fixCommitSHA1": "6f981f77e5bd9e2eecbd851a2a02933cdb9af0d8", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   public void testGoogIsArray2() throws Exception {\n     testClosureFunction(\"goog.isArray\",\n         ALL_TYPE,\nALL_TYPE,\n         ALL_TYPE);\n   }", "fixed": "   public void testGoogIsArray2() throws Exception {\n     testClosureFunction(\"goog.isArray\",\n         ALL_TYPE,\n        ARRAY_TYPE,\n         ALL_TYPE);\n   }", "sourceBeforeFix": "testClosureFunction(\"goog.isArray\",ALL_TYPE,ALL_TYPE,ALL_TYPE)", "sourceAfterFix": "testClosureFunction(\"goog.isArray\",ALL_TYPE,ARRAY_TYPE,ALL_TYPE)"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { TYPE_2 item = VAR_2 . METHOD_2 ( position ) . getValue ( ) ; VAR_3 . remove ( item . METHOD_3 ( ) ) ; VAR_2 . update ( VAR_3 ) ; VAR_2 . METHOD_4 ( ) ; VAR_4 . put ( item . METHOD_3 ( ) , item ) ; VAR_5 . update ( VAR_4 ) ; VAR_5 . METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { TYPE_2 item = VAR_5 . METHOD_2 ( position ) . getValue ( ) ; VAR_4 . remove ( item . METHOD_3 ( ) ) ; VAR_5 . update ( VAR_4 ) ; VAR_5 . METHOD_4 ( ) ; VAR_3 . put ( item . METHOD_3 ( ) , item ) ; VAR_2 . update ( VAR_3 ) ; VAR_2 . METHOD_4 ( ) ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.Object VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 instanceof TYPE_1 ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( VAR_3 . METHOD_2 ( VAR_2 ) ) && ( TYPE_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) ; } java.lang.String name = ( ( java.lang.String ) ( VAR_1 ) ) ; return TYPE_2 . METHOD_4 ( VAR_2 , name ) ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.Object VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 instanceof TYPE_1 ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( ( VAR_3 != null ) && ( VAR_3 . METHOD_2 ( VAR_2 ) ) ) && ( TYPE_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) ; } java.lang.String name = ( ( java.lang.String ) ( VAR_1 ) ) ; return TYPE_2 . METHOD_4 ( VAR_2 , name ) ; }\n"}
{"fixCommitSHA1": "340a7a945ec66c7b4bcf562dd13cfbf995354d2d", "projectName": "alibaba.druid", "bugType": "More Specific If", "problem": "             return sessionValue.toString();\n         }\n        if (principalCookieName != null) {\n             for (Cookie cookie : httpRequest.getCookies()) {\n                 if (principalCookieName.equals(cookie.getName())) {\n                     return cookie.getValue();", "fixed": "             return sessionValue.toString();\n         }\n        if (principalCookieName != null && httpRequest.getCookies() != null) {\n             for (Cookie cookie : httpRequest.getCookies()) {\n                 if (principalCookieName.equals(cookie.getName())) {\n                     return cookie.getValue();", "sourceBeforeFix": "principalCookieName != null", "sourceAfterFix": "principalCookieName != null && httpRequest.getCookies() != null"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ZendeskEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedZendeskEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ZendeskEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedZendeskEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . info ( STRING_1 ) ; TYPE_3 VAR_4 = VAR_5 . METHOD_2 ( VAR_2 . getName ( ) ) ; TYPE_4 VAR_6 = VAR_4 . METHOD_3 ( ) ; TYPE_1 VAR_7 = new TYPE_1 ( ) ; VAR_7 . METHOD_4 ( VAR_6 ) ; VAR_7 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; VAR_8 . METHOD_7 ( VAR_7 ) ; return STRING_2 ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . info ( STRING_1 ) ; TYPE_3 VAR_4 = VAR_5 . METHOD_2 ( VAR_2 . getName ( ) ) ; TYPE_4 VAR_6 = VAR_4 . METHOD_3 ( ) ; TYPE_1 VAR_7 = new TYPE_1 ( ) ; VAR_7 . METHOD_4 ( VAR_6 ) ; VAR_7 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; return STRING_2 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private static void METHOD_1 ( TYPE_1 event , TYPE_2 node ) { if ( event . METHOD_2 ( ) . equals ( VAR_1 ) ) { return ; } VAR_2 = event . METHOD_3 ( ) ; VAR_3 = event . METHOD_4 ( ) ; double VAR_4 = ( VAR_2 ) - ( VAR_5 ) ; double VAR_6 = ( VAR_3 ) - ( VAR_7 ) ; if ( node instanceof TYPE_3 ) { TYPE_4 . METHOD_5 ( event , VAR_4 , VAR_6 ) ; event . METHOD_6 ( ) ; } }\n", "fixed": "private static void METHOD_1 ( TYPE_1 event , TYPE_2 node ) { VAR_2 = event . METHOD_3 ( ) ; VAR_3 = event . METHOD_4 ( ) ; double VAR_4 = ( VAR_2 ) - ( VAR_5 ) ; double VAR_6 = ( VAR_3 ) - ( VAR_7 ) ; if ( node instanceof TYPE_3 ) { TYPE_4 . METHOD_5 ( event , VAR_4 , VAR_6 ) ; event . METHOD_6 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; METHOD_2 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( ( ( TYPE_2 ) ( METHOD_3 ( ) ) ) . METHOD_4 ( ) ) ) ; for ( int i = 0 ; i < ( VAR_1 . METHOD_5 ( ) ) ; i ++ ) { METHOD_6 ( ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( i ) ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( ( ( TYPE_2 ) ( METHOD_3 ( ) ) ) . METHOD_4 ( ) ) ) ; for ( int i = 0 ; i < ( VAR_1 . METHOD_5 ( ) ) ; i ++ ) { METHOD_6 ( ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( i ) ) ) ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( ) ) { return new TYPE_5 ( VAR_1 , false , VAR_2 ) ; } if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_6 ( VAR_1 , VAR_3 ) ; } return VAR_2 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( ) ) { return new TYPE_5 ( VAR_1 , true , VAR_2 ) ; } if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_6 ( VAR_1 , VAR_3 ) ; } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 != null ) { TYPE_3 . METHOD_2 ( this , VAR_1 . METHOD_3 ( ) , VAR_3 ) . show ( ) ; METHOD_4 ( ) ; } else { VAR_4 . setText ( STRING_1 ) ; VAR_5 . setText ( STRING_1 ) ; VAR_6 . setText ( STRING_1 ) ; VAR_7 . setText ( STRING_1 ) ; TYPE_3 . METHOD_2 ( this , STRING_2 , VAR_3 ) . show ( ) ; METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 != null ) { TYPE_3 . METHOD_2 ( this , VAR_1 . METHOD_3 ( ) , VAR_3 ) . show ( ) ; METHOD_4 ( ) ; } else { VAR_4 . setText ( STRING_1 ) ; VAR_5 . setText ( STRING_1 ) ; VAR_6 . setText ( STRING_1 ) ; VAR_7 . setText ( STRING_1 ) ; TYPE_3 . METHOD_2 ( this , STRING_2 , VAR_3 ) . show ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"problem": "public void METHOD_1 ( char [ ] VAR_1 , int start , int length ) throws TYPE_1 { super . METHOD_1 ( VAR_1 , start , length ) ; if ( VAR_2 ) { buffer . append ( VAR_1 ) ; } if ( VAR_3 ) { buffer . append ( VAR_1 ) ; } }\n", "fixed": "public void METHOD_1 ( char [ ] VAR_1 , int start , int length ) throws TYPE_1 { super . METHOD_1 ( VAR_1 , start , length ) ; if ( VAR_2 ) { buffer . append ( VAR_1 , start , length ) ; } if ( VAR_3 ) { buffer . append ( VAR_1 , start , length ) ; } }\n"}
{"fixCommitSHA1": "dbd841562137595e365ccf2ad1524ecfdee958c9", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "                 publicType,\n                 ImmutableSet.copyOf(entry.getValue()),\n                implemetationMethodDescriptors.build()));\n       } catch (IOException e) {\n         messager.printMessage(Kind.ERROR, \"failed\");\n       }", "fixed": "                 publicType,\n                 ImmutableSet.copyOf(entry.getValue()),\n                implementationMethodDescriptors.build()));\n       } catch (IOException e) {\n         messager.printMessage(Kind.ERROR, \"failed\");\n       }", "sourceBeforeFix": "ImmutableSet.Builder<ImplemetationMethodDescriptor>", "sourceAfterFix": "ImmutableSet.Builder<ImplementationMethodDescriptor>"}
{"problem": "public < TYPE_1 > boolean METHOD_1 ( TYPE_2 < TYPE_1 > key , TYPE_1 value ) { TYPE_3 . METHOD_2 ( key , STRING_1 ) ; VAR_1 . METHOD_3 ( ) ; try { METHOD_4 ( ) ; if ( ! ( VAR_2 . METHOD_5 ( key ) ) ) { VAR_2 . put ( key , value ) ; return true ; } return false ; } finally { VAR_1 . METHOD_6 ( ) ; } }\n", "fixed": "public < TYPE_1 > boolean METHOD_1 ( TYPE_2 < TYPE_1 > key , TYPE_1 value ) { TYPE_3 . METHOD_2 ( key , STRING_1 ) ; VAR_1 . METHOD_3 ( ) ; try { if ( ! ( VAR_2 . METHOD_5 ( key ) ) ) { METHOD_4 ( ) ; VAR_2 . put ( key , value ) ; return true ; } return false ; } finally { VAR_1 . METHOD_6 ( ) ; } }\n"}
{"problem": "private int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , java.lang.String VAR_5 , long id ) { java.lang.String VAR_6 = METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; TYPE_2 VAR_7 = new TYPE_2 ( ) ; VAR_7 . put ( VAR_8 , VAR_5 ) ; VAR_7 . put ( VAR_9 , VAR_6 ) ; return VAR_1 . update ( VAR_10 , VAR_7 , ( ( ( VAR_11 ) + STRING_1 ) + id ) , null ) ; }\n", "fixed": "private int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , java.lang.String VAR_5 , long id ) { java.lang.String VAR_6 = METHOD_2 ( VAR_2 , ( VAR_3 - 1 ) , VAR_4 ) ; TYPE_2 VAR_7 = new TYPE_2 ( ) ; VAR_7 . put ( VAR_8 , VAR_5 ) ; VAR_7 . put ( VAR_9 , VAR_6 ) ; return VAR_1 . update ( VAR_10 , VAR_7 , ( ( ( VAR_11 ) + STRING_1 ) + id ) , null ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { java.io.FileOutputStream VAR_1 ; java.lang.String text = STRING_1 ; TYPE_1 . METHOD_2 ( VAR_2 , STRING_2 ) ; try { VAR_1 = METHOD_3 ( VAR_3 , VAR_4 ) ; VAR_1 . METHOD_4 ( text . METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_5 . METHOD_7 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { java.io.FileOutputStream VAR_1 ; java.lang.String text = STRING_1 ; try { VAR_1 = METHOD_3 ( VAR_3 , VAR_4 ) ; VAR_1 . METHOD_4 ( text . METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_5 . METHOD_7 ( ) ; } }\n"}
{"problem": "protected void METHOD_1 ( java.lang.Void VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 . getActivity ( ) ) ; if ( ( VAR_4 . getId ( ) ) == ( VAR_5 ) ) { VAR_6 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_7 , VAR_3 ) ; } else { VAR_2 . METHOD_4 ( VAR_7 ) ; VAR_6 . METHOD_2 ( ) ; } }\n", "fixed": "protected void METHOD_1 ( java.lang.Void VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 . getActivity ( ) ) ; if ( ( VAR_4 . getId ( ) ) == ( VAR_5 ) ) { VAR_6 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_7 , VAR_3 ) ; } else { VAR_6 . METHOD_2 ( ) ; VAR_2 . METHOD_4 ( VAR_7 ) ; } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_3 ) { java.lang.String filePath = METHOD_2 ( VAR_1 ) ; if ( filePath != null ) { VAR_2 . METHOD_1 ( METHOD_2 ( VAR_1 ) , ( ( VAR_1 . METHOD_3 ( ) ) - 1 ) ) ; } } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_3 ) { java.lang.String filePath = METHOD_2 ( VAR_1 ) ; if ( filePath != null ) { VAR_2 . METHOD_1 ( filePath , ( ( VAR_1 . METHOD_3 ( ) ) - 1 ) ) ; } } }\n"}
{"fixCommitSHA1": "68d875bdc642856e2c47d67183bdf6a05cfc4895", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " import java.util.Locale;\n \n class DescriptionExtractor {\n\tprivate static final String NEW_LINE = System.getProperty(\"line.separator\");\n \tpublic String getShortDescription(String description) {\n \t\tif (description == null) {", "fixed": " import java.util.Locale;\n \n class DescriptionExtractor {\n\tstatic final String NEW_LINE = System.getProperty(\"line.separator\");\n \tpublic String getShortDescription(String description) {\n \t\tif (description == null) {", "sourceBeforeFix": "26", "sourceAfterFix": "24"}
{"problem": "private TYPE_1 METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = ( ( TYPE_3 ) ( VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( ) ; return VAR_3 . METHOD_5 ( VAR_1 ) ? TYPE_4 . METHOD_6 ( VAR_3 ) : null ; }\n", "fixed": "private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_3 = ( ( TYPE_3 ) ( VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( ) ; if ( VAR_3 == null ) return null ; VAR_1 = VAR_2 . METHOD_2 ( ) ; return VAR_3 . METHOD_5 ( VAR_1 ) ? TYPE_4 . METHOD_6 ( VAR_3 ) : null ; }\n"}
{"problem": "public void METHOD_1 ( int state , java.lang.String VAR_1 ) { if ( ( this . METHOD_2 ( ) . getBoolean ( VAR_2 ) ) && ( state != ( VAR_3 ) ) ) { METHOD_3 ( TYPE_1 . METHOD_4 ( this , STRING_1 , VAR_4 , VAR_5 ) ) ; return ; } if ( ( state != ( VAR_3 ) ) && ( state != ( VAR_6 ) ) ) { METHOD_5 ( TYPE_1 . METHOD_4 ( this , STRING_1 , VAR_4 , VAR_5 ) ) ; } }\n", "fixed": "public void METHOD_1 ( int state , java.lang.String VAR_1 ) { if ( ( this . METHOD_2 ( ) . getBoolean ( VAR_2 ) ) && ( state != ( VAR_3 ) ) ) { METHOD_5 ( TYPE_1 . METHOD_4 ( this , STRING_1 , VAR_4 , VAR_5 ) ) ; return ; } if ( ( state != ( VAR_3 ) ) && ( state != ( VAR_6 ) ) ) { METHOD_5 ( TYPE_1 . METHOD_4 ( this , STRING_1 , VAR_4 , VAR_5 ) ) ; } }\n"}
{"problem": "public static java.lang.String METHOD_1 ( final java.lang.String string , final char VAR_1 ) { final java.lang.String VAR_2 = java.lang.String . METHOD_2 ( VAR_1 ) ; return string . replaceAll ( ( STRING_1 + VAR_2 ) , VAR_2 ) . replaceAll ( VAR_2 , ( STRING_1 + VAR_2 ) ) ; }\n", "fixed": "public static java.lang.String METHOD_1 ( final java.lang.String string , final char VAR_1 ) { final java.lang.String VAR_2 = java.lang.String . METHOD_2 ( VAR_1 ) ; return string . replace ( ( STRING_1 + VAR_2 ) , VAR_2 ) . replace ( VAR_2 , ( STRING_1 + VAR_2 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_2 != null ) { boolean VAR_3 = false ; boolean result ; result = this . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( ! result ) { VAR_3 = true ; } result = this . METHOD_3 ( VAR_1 , VAR_2 ) ; if ( result ) { VAR_3 = true ; } if ( ! VAR_3 ) { result = this . METHOD_4 ( VAR_1 , VAR_2 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_2 != null ) { boolean VAR_3 = false ; boolean result ; java.lang.System.out.println ( ) ; result = this . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( result ) { VAR_3 = true ; } result = this . METHOD_3 ( VAR_1 , VAR_2 ) ; if ( result ) { VAR_3 = true ; } if ( ! VAR_3 ) { result = this . METHOD_4 ( VAR_1 , VAR_2 ) ; } } }\n"}
{"problem": "public boolean replace ( java.lang.String VAR_1 ) { TYPE_1 source = TYPE_2 . get ( VAR_1 ) ; TYPE_1 target = TYPE_2 . get ( this . VAR_2 ) ; if ( ( TYPE_3 . METHOD_1 ( source ) ) && ( TYPE_3 . METHOD_1 ( target ) ) ) { try { TYPE_3 . METHOD_2 ( source , target , VAR_3 ) ; return true ; } catch ( java.io.IOException VAR_4 ) { return false ; } } return false ; }\n", "fixed": "public boolean replace ( java.lang.String VAR_1 ) { TYPE_1 source = TYPE_2 . get ( this . VAR_2 ) ; TYPE_1 target = TYPE_2 . get ( VAR_1 ) ; if ( ( TYPE_3 . METHOD_1 ( source ) ) && ( TYPE_3 . METHOD_1 ( target ) ) ) { try { TYPE_3 . METHOD_2 ( source , target , VAR_3 ) ; return true ; } catch ( java.io.IOException VAR_4 ) { return false ; } } return false ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String msg ) throws java.lang.Throwable { VAR_2 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , msg ) ; VAR_3 . METHOD_5 ( new TYPE_2 ( METHOD_6 ( ) , VAR_4 . get ( VAR_1 ) , msg ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String msg ) throws java.lang.Throwable { VAR_2 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , msg ) ; VAR_3 . METHOD_5 ( new TYPE_2 ( VAR_4 . get ( VAR_1 ) , msg ) ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { double VAR_2 = t . METHOD_2 ( ) ; VAR_3 += VAR_1 * VAR_2 ; VAR_4 += ( ( ( ( ( INT_1 * ( VAR_5 ) ) * VAR_1 ) * VAR_2 ) / ( ( FLOAT_1 * FLOAT_2 ) * FLOAT_3 ) ) * FLOAT_4 ) / FLOAT_5 ; if ( ( VAR_4 ) > ( INT_2 * ( VAR_5 ) ) ) VAR_4 -= INT_2 * ( VAR_5 ) ; java.lang.System.out.println ( VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { double VAR_2 = t . METHOD_2 ( ) ; VAR_3 += VAR_1 * VAR_2 ; VAR_4 += ( ( ( ( ( INT_1 * ( VAR_5 ) ) * VAR_1 ) * VAR_2 ) / ( ( FLOAT_1 * FLOAT_2 ) * FLOAT_3 ) ) * FLOAT_4 ) / FLOAT_5 ; if ( ( VAR_4 ) > ( INT_2 * ( VAR_5 ) ) ) VAR_4 -= INT_2 * ( VAR_5 ) ; }\n"}
{"problem": "public java.util.ArrayList < java.lang.String > METHOD_1 ( ) { java.lang.String query = STRING_1 ; java.util.ArrayList < java.lang.String > output = new java.util.ArrayList < > ( ) ; try { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 result = VAR_1 . METHOD_3 ( query ) ; do { output . add ( result . getString ( 1 ) ) ; } while ( result . METHOD_4 ( ) ) ; } catch ( TYPE_3 VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } return output ; }\n", "fixed": "public java.util.ArrayList < java.lang.String > METHOD_1 ( ) { java.lang.String query = STRING_1 ; java.util.ArrayList < java.lang.String > output = new java.util.ArrayList < > ( ) ; try { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 result = VAR_1 . METHOD_3 ( query ) ; while ( result . METHOD_4 ( ) ) { output . add ( result . getString ( 1 ) ) ; } } catch ( TYPE_3 VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } return output ; }\n"}
{"project": "Math", "bugId": 64, "problem": " protected VectorialPointValuePair doOptimize()\n                 updateResidualsAndCost();\n                current = new VectorialPointValuePair(point, objective);\n                 double actRed = -1.0;", "fixed": " protected VectorialPointValuePair doOptimize()\n                 updateResidualsAndCost();\n                 double actRed = -1.0;", "observations": "Moved instantiation of object of type VectorialPointValuePair to another place (lines ahead).", "repairActions": ["assignAdd", "assignExpChange", "condBranIfAdd", "condBranRem", "loopAdd", "mcAdd", "mcMove", "mcParValChange", "mcRem", "objInstAdd", "objInstRem", "retBranchAdd", "retRem", "varAdd", "varReplVar"], "repairPatterns": ["blockRemove", "codeMove", "condBlockOthersAdd", "condBlockRem", "condBlockRetAdd", "expArithMod", "missNullCheckN", "wrongComp", "wrongVarRef"]}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } VAR_1 = new TYPE_1 ( new TYPE_2 ( ) , VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; android.content.Intent intent = new android.content.Intent ( VAR_4 , VAR_2 ) ; VAR_5 . METHOD_4 ( intent ) ; }\n", "fixed": "private boolean METHOD_1 ( ) { if ( ( ( VAR_5 ) == null ) || ( ( VAR_2 ) == null ) ) { return false ; } if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } VAR_1 = new TYPE_1 ( new TYPE_2 ( ) , VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; android.content.Intent intent = new android.content.Intent ( VAR_4 , VAR_2 ) ; VAR_5 . METHOD_4 ( intent ) ; return true ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { VAR_2 . setText ( VAR_3 [ i ] . getText ( ) ) ; VAR_4 . setText ( VAR_3 [ i ] . METHOD_2 ( ) . getName ( ) ) ; VAR_5 . setText ( VAR_3 [ i ] . METHOD_3 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { VAR_2 . setText ( VAR_3 [ i ] . getText ( ) ) ; VAR_4 . setText ( VAR_3 [ i ] . METHOD_2 ( ) . getName ( ) ) ; VAR_5 . setText ( java.lang.Integer.toString ( VAR_3 [ i ] . METHOD_3 ( ) ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String name ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_2 : VAR_3 . values ( ) ) { if ( VAR_2 . METHOD_2 ( ) . contains ( name ) ) { VAR_1 . add ( VAR_2 ) ; } } return TYPE_2 . METHOD_3 ( VAR_1 ) ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String name ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_2 : VAR_3 . values ( ) ) { if ( VAR_2 . METHOD_2 ( ) . contains ( name ) ) { VAR_1 . add ( VAR_2 ) ; } } return VAR_1 ; }\n"}
{"problem": "public static void METHOD_1 ( float VAR_1 ) { if ( VAR_1 < 1.0F ) { VAR_2 = 1.0F ; return ; } VAR_2 = VAR_1 ; VAR_3 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_4 . METHOD_3 ( ) , VAR_4 . height ( ) ) ; VAR_5 . set ( VAR_6 , VAR_3 ) ; try { VAR_7 = TYPE_1 . METHOD_4 ( ) . VAR_8 . METHOD_5 ( VAR_5 . build ( ) , VAR_9 , null ) ; } catch ( TYPE_2 VAR_10 ) { VAR_10 . METHOD_6 ( ) ; } }\n", "fixed": "public static void METHOD_1 ( float VAR_1 ) { if ( VAR_1 < 1.0F ) { VAR_2 = 1.0F ; return ; } VAR_2 = VAR_1 ; VAR_3 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_4 . METHOD_3 ( ) , VAR_4 . height ( ) ) ; VAR_5 . set ( VAR_6 , VAR_3 ) ; TYPE_1 . METHOD_5 ( ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_3 = VAR_1 ; android.content.Intent i = new android.content.Intent ( this , VAR_4 class ) ; i . METHOD_2 ( VAR_5 , VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; i . METHOD_2 ( VAR_6 , true ) ; METHOD_5 ( i ) ; METHOD_6 ( ) ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( ( VAR_2 ) != null ) { VAR_3 = VAR_2 ; android.content.Intent i = new android.content.Intent ( this , VAR_4 class ) ; i . METHOD_2 ( VAR_5 , VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ; i . METHOD_2 ( VAR_6 , true ) ; METHOD_5 ( i ) ; METHOD_6 ( ) ; VAR_2 = null ; } }\n"}
{"problem": "public final boolean remove ( final java.lang.Object VAR_1 ) { if ( ! ( VAR_1 instanceof java.util.Map.Entry ) ) { return false ; } final java.util.Map.Entry < TYPE_1 , TYPE_2 > VAR_2 = ( ( java.util.Map.Entry < TYPE_1 , TYPE_2 > ) ( VAR_1 ) ) ; final TYPE_1 k = VAR_2 . METHOD_1 ( ) ; return null != ( this . remove ( k ) ) ; }\n", "fixed": "public final boolean remove ( final java.lang.Object VAR_1 ) { if ( ! ( VAR_1 instanceof java.util.Map.Entry ) ) { return false ; } final java.util.Map.Entry < ? , ? > VAR_2 = ( ( java.util.Map.Entry < TYPE_1 , TYPE_2 > ) ( VAR_1 ) ) ; final java.lang.Object key = VAR_2 . METHOD_1 ( ) ; if ( key == null ) { return false ; } final java.lang.Object value = VAR_2 . getValue ( ) ; if ( value == null ) { return false ; } return this . remove ( key , value ) ; }\n"}
{"problem": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; return VAR_4 ; TYPE_4 VAR_6 = ( ( TYPE_4 ) ( this . getActivity ( ) . METHOD_3 ( VAR_7 ) ) ) ; VAR_6 . METHOD_4 ( VAR_8 , 0 , 0 , this ) ; this . METHOD_5 ( null ) ; }\n", "fixed": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; TYPE_4 VAR_6 = ( ( TYPE_4 ) ( this . getActivity ( ) . METHOD_3 ( VAR_7 ) ) ) ; VAR_6 . METHOD_4 ( VAR_8 , 0 , 0 , this ) ; this . METHOD_5 ( null ) ; return VAR_4 ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( this . METHOD_2 ( ) ) { for ( int index = 0 ; index < ( VAR_2 . length ) ; index ++ ) { if ( this . VAR_2 [ ( index - 1 ) ] . METHOD_1 ( VAR_1 ) ) { return true ; } } } return false ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( this . METHOD_2 ( ) ) { for ( int index = 1 ; index <= ( VAR_2 . length ) ; index ++ ) { if ( this . VAR_2 [ ( index - 1 ) ] . METHOD_1 ( VAR_1 ) ) { return true ; } } } return false ; }\n"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { state = VAR_2 ; int VAR_3 = VAR_4 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) . intValue ( ) ; int VAR_5 = VAR_6 . METHOD_2 ( VAR_6 . METHOD_3 ( ) ) . intValue ( ) ; VAR_7 = new TYPE_2 ( VAR_3 , VAR_5 , 0.0 ) ; VAR_8 = new TYPE_3 ( VAR_7 , state ) ; METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { state = VAR_2 ; int VAR_3 = VAR_4 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ; int VAR_5 = VAR_6 . METHOD_2 ( VAR_6 . METHOD_3 ( ) ) ; VAR_7 = new TYPE_2 ( VAR_3 , VAR_5 , 0.0 ) ; VAR_8 = new TYPE_3 ( VAR_7 , state ) ; METHOD_4 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; assert VAR_1 != null ; android.view.View VAR_2 = VAR_3 . METHOD_4 ( 0 ) ; TYPE_3 VAR_4 = ( ( TYPE_3 ) ( VAR_2 . METHOD_5 ( VAR_5 ) ) ) ; VAR_4 . setText ( VAR_1 . METHOD_6 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; assert VAR_1 != null ; android.view.View VAR_2 = VAR_3 . METHOD_4 ( 0 ) ; TYPE_3 VAR_4 = ( ( TYPE_3 ) ( VAR_2 . METHOD_5 ( VAR_5 ) ) ) ; if ( VAR_4 != null ) { VAR_4 . setText ( VAR_1 . METHOD_6 ( ) ) ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = null ; try { VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; } catch ( java.lang.Exception VAR_2 ) { } if ( VAR_1 == null ) { VAR_1 = VAR_3 ; } TYPE_1 VAR_4 = METHOD_4 ( VAR_1 , CHAR_1 ) ; return VAR_4 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = null ; try { VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; } catch ( java.lang.Exception VAR_2 ) { } if ( VAR_1 == null ) { VAR_1 = VAR_3 ; } return METHOD_4 ( VAR_1 , CHAR_1 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public int METHOD_1 ( int VAR_1 ) { java.util.Calendar VAR_2 = java.util.Calendar.getInstance ( ) ; VAR_2 . set ( VAR_3 , VAR_1 ) ; long VAR_4 = VAR_2 . METHOD_2 ( ) ; long VAR_5 = TYPE_1 . METHOD_3 ( ) ; long VAR_6 = VAR_5 - ( VAR_7 ) ; VAR_2 . METHOD_4 ( VAR_6 ) ; int VAR_7 = ( ( VAR_2 . get ( VAR_3 ) ) - INT_1 ) + 1 ; return VAR_7 ; }\n", "fixed": "public static int METHOD_1 ( int VAR_1 ) { java.util.Calendar VAR_2 = java.util.Calendar.getInstance ( ) ; VAR_2 . set ( VAR_3 , VAR_1 ) ; long VAR_4 = VAR_2 . METHOD_2 ( ) ; long VAR_5 = TYPE_1 . METHOD_3 ( ) ; long VAR_6 = VAR_5 - VAR_4 ; VAR_2 . METHOD_4 ( VAR_6 ) ; int VAR_7 = ( ( VAR_2 . get ( VAR_3 ) ) + 1 ) - INT_1 ; return VAR_7 ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "622d62ec3cd0ce3bd3678dd7579cc7978b7908ad", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         if (errorHandlerExecutorService != null) {\n            getExecutorServiceManager().shutdown(errorHandlerExecutorService);\n             errorHandlerExecutorService = null;\n         }", "fixed": "         if (errorHandlerExecutorService != null) {\n            getExecutorServiceManager().shutdownNow(errorHandlerExecutorService);\n             errorHandlerExecutorService = null;\n         }", "sourceBeforeFix": "getExecutorServiceManager().shutdown(errorHandlerExecutorService)", "sourceAfterFix": "getExecutorServiceManager().shutdownNow(errorHandlerExecutorService)"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { java.lang.String name = VAR_1 . getName ( ) ; if ( name . equals ( VAR_2 ) ) { return VAR_3 ; } else if ( name . startsWith ( TYPE_4 ) ) { java.lang.String VAR_4 = name . substring ( TYPE_4 . length ( ) ) ; int i = java.lang.Integer.parseInt ( VAR_4 ) ; return new TYPE_5 ( i ) ; } else { return new TYPE_6 ( VAR_1 ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { java.lang.String name = VAR_1 . getName ( ) ; if ( name . startsWith ( VAR_2 ) ) { return VAR_3 ; } else if ( name . startsWith ( TYPE_4 ) ) { java.lang.String VAR_4 = name . substring ( TYPE_4 . length ( ) ) ; int i = java.lang.Integer.parseInt ( VAR_4 ) ; return new TYPE_5 ( i ) ; } else { return new TYPE_6 ( VAR_1 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { ( VAR_1 ) ++ ; if ( ( VAR_2 . size ( ) ) <= ( VAR_1 ) ) VAR_1 = 0 ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; } METHOD_4 ( ) ; METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_2 ) != null ) { ( VAR_1 ) ++ ; if ( ( VAR_2 . size ( ) ) <= ( VAR_1 ) ) VAR_1 = 0 ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; } METHOD_4 ( ) ; METHOD_5 ( ) ; } }\n"}
{"problem": "public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( id ) ) + STRING_3 ) + ( VAR_1 ) ) + CHAR_1 ) + STRING_4 ) + ( VAR_2 ) ) + CHAR_2 ) + ( TYPE_1 . METHOD_1 ( ) ) ; }\n", "fixed": "public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( ( TYPE_1 . METHOD_1 ( ) ) + STRING_1 ) + STRING_2 ) + ( id ) ) + STRING_3 ) + ( VAR_1 ) ) + CHAR_1 ) + STRING_4 ) + ( VAR_2 ) ) + CHAR_2 ; }\n"}
{"problem": "public boolean equals ( java.lang.Object VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_1 ) ) { return false ; } else { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( this . METHOD_1 ( ) . equals ( VAR_2 . METHOD_1 ( ) ) ) && ( ( this . METHOD_2 ( ) ) == ( VAR_2 . METHOD_2 ( ) ) ) ; } }\n", "fixed": "public boolean equals ( java.lang.Object VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_1 ) ) { return false ; } else { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( this . getName ( ) . equals ( VAR_2 . getName ( ) ) ) && ( ( this . getId ( ) ) == ( VAR_2 . getId ( ) ) ) ; } }\n"}
{"fixCommitSHA1": "f47d4f07970a09a1aaf5b0e94eb5fe53c2e4b14f", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "     }\n     public Map<String, String> getInputTypes() throws IOException, APIException {\n        return api.path(routes.InputsResource().types(), InputTypesResponse.class).node(this).execute().types;\n     }\n     public InputTypeSummaryResponse getInputTypeInformation(String type) throws IOException, APIException {\n        return api.path(routes.InputsResource().info(type), InputTypeSummaryResponse.class).node(this).execute();\n     }\n     public Map<String, InputTypeSummaryResponse> getAllInputTypeInformation() throws IOException, APIException {", "fixed": "     }\n     public Map<String, String> getInputTypes() throws IOException, APIException {\n        return api.path(routes.InputTypesResource().types(), InputTypesResponse.class).node(this).execute().types;\n     }\n     public InputTypeSummaryResponse getInputTypeInformation(String type) throws IOException, APIException {\n        return api.path(routes.InputTypesResource().info(type), InputTypeSummaryResponse.class).node(this).execute();\n     }\n     public Map<String, InputTypeSummaryResponse> getAllInputTypeInformation() throws IOException, APIException {", "sourceBeforeFix": "routes.InputsResource()", "sourceAfterFix": "routes.InputTypesResource()"}
{"problem": "void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 = VAR_1 ; TYPE_2 VAR_4 = VAR_5 ; while ( ( VAR_6 ) != ( end ) ) { if ( ! ( VAR_7 ) ) { METHOD_2 ( VAR_4 , VAR_2 ) ; return ; } VAR_4 = VAR_6 ; } METHOD_2 ( VAR_4 , VAR_2 ) ; }\n", "fixed": "void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 = VAR_1 ; TYPE_2 VAR_4 = VAR_5 ; while ( ( VAR_6 ) != ( end ) ) { if ( ! ( VAR_7 . get ( ) ) ) { METHOD_2 ( VAR_4 , VAR_2 ) ; return ; } VAR_4 = VAR_6 ; } METHOD_2 ( VAR_4 , VAR_2 ) ; }\n"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         };\n         verify(checkConfig,\n                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n     }\n     @Test", "fixed": "         };\n         verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"problem": "public void METHOD_1 ( ) { for ( int source = 0 ; source < ( size ) ; source ++ ) { for ( int target = 0 ; target < ( size ) ; target ++ ) { if ( VAR_1 [ source ] . get ( target ) ) { VAR_1 [ source ] . METHOD_2 ( VAR_1 [ target ] ) ; } } } }\n", "fixed": "public void METHOD_1 ( ) { for ( int source = 0 ; source < ( VAR_1 . length ) ; source ++ ) { for ( int target = 0 ; target < ( VAR_1 . length ) ; target ++ ) { if ( VAR_1 [ target ] . get ( source ) ) { VAR_1 [ target ] . METHOD_2 ( VAR_1 [ source ] ) ; } } } }\n"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tprivate NSString convertKey (String key) {\r\n\t\treturn NSString.stringWithString(key);\r\n \t}\r\n \t@Override\r", "fixed": " \t}\r\n \tprivate NSString convertKey (String key) {\r\n\t\treturn NSString.alloc().initWithString(key);\r\n \t}\r\n \t@Override\r", "sourceBeforeFix": "pool.dealloc()", "sourceAfterFix": "pool.drain()"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ( ( long ) ( 1 ) ) ) ; TYPE_4 . METHOD_5 ( VAR_4 . getText ( ) . toString ( ) ) ; VAR_3 . METHOD_6 ( java.lang.Integer.parseInt ( VAR_4 . getText ( ) . toString ( ) ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ( VAR_4 . getText ( ) ) != null ) { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ( ( long ) ( 1 ) ) ) ; TYPE_4 . METHOD_5 ( VAR_4 . getText ( ) . toString ( ) ) ; VAR_3 . METHOD_6 ( java.lang.Integer.parseInt ( VAR_4 . getText ( ) . toString ( ) ) ) ; } else return ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static void main ( java.lang.String [ ] args ) { TYPE_1 TYPE_2 = new TYPE_1 ( ) ; TYPE_3 VAR_1 = TYPE_2 . METHOD_1 ( STRING_1 , STRING_2 , 0.0 , STRING_3 , STRING_4 , STRING_5 , STRING_6 ) ; java.lang.System.out.println ( VAR_1 . getName ( ) ) ; TYPE_3 VAR_2 = TYPE_2 . METHOD_1 ( STRING_7 , STRING_8 , FLOAT_1 , STRING_3 , STRING_9 , STRING_10 , FLOAT_2 , FLOAT_3 , STRING_11 , STRING_12 ) ; java.lang.System.out.println ( VAR_2 . getName ( ) ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_1 TYPE_2 = new TYPE_1 ( ) ; TYPE_3 VAR_1 = TYPE_2 . METHOD_1 ( STRING_1 , STRING_2 , 0.0 , STRING_3 , STRING_4 , STRING_5 , STRING_6 ) ; java.lang.System.out.println ( VAR_1 . getName ( ) ) ; java.lang.System.out.println ( VAR_1 . getType ( ) ) ; TYPE_3 VAR_2 = TYPE_2 . METHOD_1 ( STRING_7 , STRING_8 , FLOAT_1 , STRING_3 , STRING_9 , STRING_10 , FLOAT_2 , FLOAT_3 , STRING_11 , STRING_12 ) ; java.lang.System.out.println ( VAR_2 . getName ( ) ) ; }\n"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"problem": "public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_3 ) { METHOD_2 ( INT_1 , VAR_1 , VAR_4 , false , false ) ; } else { METHOD_2 ( INT_1 , VAR_1 , METHOD_3 ( true , null ) , false , false ) ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_3 ) { METHOD_2 ( INT_1 , VAR_1 , VAR_4 , false ) ; } else { METHOD_2 ( INT_1 , VAR_1 , METHOD_3 ( true , null ) , false ) ; } return true ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String name , TYPE_2 [ ] VAR_1 , java.io.File file ) throws java.io.IOException , TYPE_3 { TYPE_1 data = new TYPE_1 ( name , VAR_1 , response ) ; try ( java.io.BufferedReader VAR_2 = new java.io.BufferedReader ( new TYPE_4 ( new java.io.FileInputStream ( file ) ) ) ) { METHOD_1 ( data , VAR_2 ) ; } return data ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String name , TYPE_2 [ ] VAR_1 , java.io.File file ) throws java.io.IOException , TYPE_3 { try ( java.io.BufferedReader VAR_2 = new java.io.BufferedReader ( new TYPE_4 ( new java.io.FileInputStream ( file ) ) ) ) { return METHOD_1 ( name , VAR_1 , VAR_2 ) ; } }\n"}
{"problem": "static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 show ) { VAR_2 . info ( ( ( STRING_1 + ( show . getName ( ) ) ) + STRING_2 ) ) ; VAR_3 . put ( VAR_1 . toLowerCase ( ) , show ) ; TYPE_2 . METHOD_2 ( VAR_1 , show ) ; VAR_4 . METHOD_3 ( ) ; }\n", "fixed": "static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 show ) { VAR_2 . info ( ( ( STRING_1 + ( show . getName ( ) ) ) + STRING_2 ) ) ; VAR_3 . put ( VAR_1 . toLowerCase ( ) , show ) ; TYPE_2 . METHOD_2 ( VAR_1 , show ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 , TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 { switch ( VAR_1 . toLowerCase ( ) ) { case VAR_2 : METHOD_2 ( ) ; return VAR_3 ; case VAR_4 : METHOD_3 ( ) ; return STRING_1 ; case VAR_5 : METHOD_4 ( ) ; return VAR_6 ; case VAR_7 : return output . METHOD_5 ( this . VAR_8 ) ; } throw new TYPE_4 ( STRING_2 ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 , TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 { switch ( VAR_1 . toLowerCase ( ) ) { case VAR_2 : METHOD_2 ( ) ; return VAR_3 ; case VAR_4 : METHOD_3 ( ) ; return STRING_1 ; case VAR_5 : METHOD_4 ( ) ; return VAR_6 ; case VAR_7 : return output . METHOD_5 ( this . VAR_8 ) ; default : break ; } throw new TYPE_4 ( STRING_2 ) ; }\n"}
{"fixCommitSHA1": "2798f6edf82b64780fd846aaa5b860185c87f915", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\t\t\tif (koala.velocity.y > 0) {\r\n \t\t\t\t\tkoala.position.y = tile.y - Koala.HEIGHT;\r\n\t\t\t\t\tTiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get(1);\r\n \t\t\t\t\tlayer.setCell((int)tile.x, (int)tile.y, null);\r\n \t\t\t\t} else {\r\n \t\t\t\t\tkoala.position.y = tile.y + tile.height;\r", "fixed": " \t\t\t\tif (koala.velocity.y > 0) {\r\n \t\t\t\t\tkoala.position.y = tile.y - Koala.HEIGHT;\r\n\t\t\t\t\tTiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get(\"walls\");\r\n \t\t\t\t\tlayer.setCell((int)tile.x, (int)tile.y, null);\r\n \t\t\t\t} else {\r\n \t\t\t\t\tkoala.position.y = tile.y + tile.height;\r", "sourceBeforeFix": "isTouched(0.75f,1)", "sourceAfterFix": "isTouched(0.5f,1)"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( true ) ; METHOD_4 ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_5 ( intent ) ; this . METHOD_6 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( true ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_5 ( intent ) ; this . METHOD_6 ( ) ; }\n"}
{"problem": "private static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ( STRING_1 + ( VAR_1 . getClass ( ) . METHOD_3 ( ) ) ) ) ; for ( java.lang.Class < ? > VAR_3 : VAR_1 . getClass ( ) . METHOD_4 ( ) ) { VAR_2 . METHOD_2 ( ( \"\\t\" + VAR_3 ) ) ; } VAR_2 . METHOD_2 ( STRING_2 ) ; }\n", "fixed": "private static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ( STRING_1 + ( VAR_1 . getClass ( ) . METHOD_3 ( ) ) ) ) ; for ( java.lang.Class < ? > VAR_3 : VAR_1 . getClass ( ) . METHOD_4 ( ) ) { VAR_2 . METHOD_2 ( ( \"\\t\" + VAR_3 ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { while ( ( ! ( VAR_1 ) ) || ( ! ( VAR_2 . isEmpty ( ) ) ) ) { TYPE_1 c = METHOD_2 ( ) ; try { java.lang.Thread . METHOD_3 ( INT_1 ) ; VAR_3 . METHOD_4 ( c ) ; METHOD_5 ( ) ; } catch ( TYPE_2 | java.lang.NullPointerException VAR_4 ) { VAR_4 . METHOD_6 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { while ( ( ! ( VAR_1 ) ) || ( ! ( VAR_2 . isEmpty ( ) ) ) ) { TYPE_1 c = METHOD_2 ( ) ; if ( c != null ) try { java.lang.Thread . METHOD_3 ( INT_1 ) ; VAR_3 . METHOD_4 ( c ) ; METHOD_5 ( ) ; } catch ( TYPE_2 | java.lang.NullPointerException VAR_4 ) { VAR_4 . METHOD_6 ( ) ; } } }\n"}
{"problem": "public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( STRING_1 , VAR_2 . get ( index ) ) ; intent . METHOD_2 ( STRING_2 , VAR_3 . get ( VAR_2 . get ( index ) ) ) ; METHOD_3 ( intent ) ; }\n", "fixed": "public void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( STRING_1 , VAR_2 . get ( index ) ) ; intent . METHOD_2 ( STRING_2 , VAR_3 . get ( VAR_2 . get ( index ) ) ) ; METHOD_3 ( intent ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.String VAR_2 = METHOD_2 ( VAR_1 . METHOD_3 ( 0 ) ) ; int i = 1 ; while ( ( VAR_1 . METHOD_3 ( i ) ) != null ) { VAR_2 += STRING_2 + ( METHOD_2 ( VAR_1 . METHOD_3 ( i ) ) ) ; } java.lang.System.out.println ( ( STRING_3 + VAR_2 ) ) ; return VAR_2 ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.String VAR_2 = METHOD_2 ( VAR_1 . METHOD_3 ( 0 ) ) ; int i = 1 ; while ( ( VAR_1 . METHOD_3 ( i ) ) != null ) { VAR_2 += STRING_2 + ( METHOD_2 ( VAR_1 . METHOD_3 ( i ) ) ) ; i ++ ; } java.lang.System.out.println ( ( STRING_3 + VAR_2 ) ) ; return VAR_2 ; }\n"}
{"problem": "public static boolean METHOD_1 ( TYPE_1 [ ] VAR_1 ) { boolean VAR_2 = true ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { VAR_2 &= ! ( VAR_1 [ i ] . METHOD_2 ( ) ) ; } return VAR_2 ; }\n", "fixed": "public static boolean METHOD_1 ( TYPE_1 [ ] VAR_1 ) { boolean VAR_2 = true ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { if ( ( VAR_1 [ i ] ) != null ) { VAR_2 &= ! ( VAR_1 [ i ] . METHOD_2 ( ) ) ; } } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( STRING_1 ) . METHOD_6 ( new TYPE_1 ( null ) ) ; TYPE_2 VAR_1 = METHOD_7 ( ) . METHOD_8 ( ) ; VAR_1 . METHOD_9 ( ( ( VAR_2 ) + STRING_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( STRING_1 ) . METHOD_6 ( new TYPE_1 ( ) ) ; TYPE_2 VAR_1 = METHOD_7 ( ) . METHOD_8 ( ) ; VAR_1 . METHOD_9 ( ( ( VAR_2 ) + STRING_2 ) ) ; }\n"}
{"fixCommitSHA1": "a5a28bef5e182a059f2dbe1718d7cde06e33cd78", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             }\n             modulePath = jbossHome + File.separatorChar + \"modules\";\n         }else{\n           modulePath = modulePath.split(File.pathSeparator)[1];\n         }\n         File moduleDir = new File(modulePath);\n         if (!moduleDir.exists()) {", "fixed": "             }\n             modulePath = jbossHome + File.separatorChar + \"modules\";\n         }else{\n           modulePath = modulePath.split(File.pathSeparator)[0];\n         }\n         File moduleDir = new File(modulePath);\n         if (!moduleDir.exists()) {", "sourceBeforeFix": "modulePath.split(File.pathSeparator)[1]", "sourceAfterFix": "modulePath.split(File.pathSeparator)[0]"}
{"problem": "public static final void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < java.lang.String > text ) throws TYPE_2 , java.lang.Exception { while ( VAR_1 . METHOD_2 ( ) ) { java.lang.String line = VAR_1 . METHOD_3 ( ) ; java.lang.System.out.print ( line ) ; text . add ( line . trim ( ) ) ; } if ( VAR_1 . METHOD_4 ( ) ) { TYPE_3 . fail ( TYPE_4 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) ; } }\n", "fixed": "public static final void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < java.lang.String > text ) throws TYPE_2 , java.lang.Exception { while ( VAR_1 . METHOD_2 ( ) ) { java.lang.String line = VAR_1 . METHOD_3 ( ) ; java.lang.System.out.print ( line ) ; if ( ! ( line . isEmpty ( ) ) ) text . add ( line . trim ( ) ) ; } if ( VAR_1 . METHOD_4 ( ) ) { TYPE_3 . fail ( TYPE_4 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) ; } }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"problem": "protected java.lang.Object METHOD_1 ( java.lang.String ... params ) { try { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( params [ 0 ] ) ; return VAR_1 ; } catch ( TYPE_2 VAR_3 ) { TYPE_3 . i ( this . getClass ( ) . getName ( ) , ( STRING_1 + ( VAR_3 . METHOD_3 ( ) ) ) ) ; return VAR_3 ; } }\n", "fixed": "protected java.lang.Object METHOD_1 ( java.lang.String ... params ) { try { VAR_1 = VAR_2 . METHOD_2 ( params [ 0 ] ) ; return VAR_1 ; } catch ( TYPE_2 VAR_3 ) { TYPE_3 . i ( this . getClass ( ) . getName ( ) , ( STRING_1 + ( VAR_3 . METHOD_3 ( ) ) ) ) ; return VAR_3 ; } }\n"}
{"problem": "public void remove ( TYPE_1 VAR_1 ) { try { VAR_2 . METHOD_1 ( ) ; VAR_2 . delete ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_2 . METHOD_4 ( null , ( ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_3 . METHOD_5 ( ) ) ) + \"\\n\" ) + STRING_4 ) + ( VAR_3 . METHOD_6 ( ) . toString ( ) ) ) ) ; } }\n", "fixed": "public void remove ( TYPE_1 VAR_1 ) { try { VAR_2 . METHOD_1 ( ) ; VAR_2 . delete ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_2 . METHOD_4 ( null , ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_3 . METHOD_5 ( ) ) ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { if ( this . METHOD_2 ( ) ) { if ( ( this . VAR_1 ) != null ) { if ( ! ( this . VAR_1 . isEmpty ( ) ) ) { this . view . METHOD_1 ( this . VAR_1 . METHOD_3 ( ) ) ; } else { this . view . METHOD_4 ( ) ; } } else { this . view . METHOD_5 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { if ( this . METHOD_2 ( ) ) { if ( ( this . VAR_1 ) != null ) { if ( ! ( this . VAR_1 . isEmpty ( ) ) ) { this . view . METHOD_1 ( this . VAR_1 . METHOD_3 ( ) ) ; } else { this . view . METHOD_4 ( ) ; } } else { this . view . METHOD_4 ( ) ; } } }\n"}
{"problem": "public char METHOD_1 ( char VAR_1 , char VAR_2 , int VAR_3 ) { if ( ( ( VAR_4 ) < VAR_5 ) && ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) { ( VAR_4 ) ++ ; return VAR_2 ; } else { return CHAR_1 ; } }\n", "fixed": "public char METHOD_1 ( char VAR_1 , char VAR_2 , int VAR_3 ) { if ( TYPE_1 . METHOD_2 ( VAR_2 ) ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { return VAR_2 ; } else if ( ( VAR_4 ) < VAR_5 ) { ( VAR_4 ) ++ ; return VAR_2 ; } else { return CHAR_1 ; } } else { return CHAR_1 ; } }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 , int VAR_2 , java.util.ArrayList < java.lang.Integer > num ) { if ( num == null ) return ; VAR_3 = new java.util.ArrayList < java.lang.Integer > ( ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { VAR_3 . add ( 0 ) ; } for ( int n : num ) { VAR_3 . set ( n , VAR_2 ) ; } VAR_4 . add ( VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 , int VAR_2 , java.util.ArrayList < java.lang.Integer > num ) { if ( num == null ) return ; VAR_3 = new java.util.ArrayList < java.lang.Integer > ( ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { VAR_3 . add ( 0 ) ; } for ( int n : num ) { VAR_3 . set ( n , VAR_2 ) ; } rows . add ( rows . size ( ) ) ; VAR_4 . add ( VAR_3 ) ; }\n"}
{"problem": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) <= 0 ) { } else if ( VAR_3 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( ) ; } else { VAR_3 . METHOD_5 ( ) ; } VAR_3 . METHOD_6 ( ) ; VAR_3 . METHOD_7 ( ) ; VAR_3 . METHOD_8 ( ) ; }\n", "fixed": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) > 0 ) { if ( VAR_3 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( ) ; } else { VAR_3 . METHOD_5 ( ) ; } } VAR_3 . METHOD_6 ( ) ; VAR_3 . METHOD_7 ( ) ; VAR_3 . METHOD_8 ( ) ; }\n"}
{"fixCommitSHA1": "41ab70ec4939adaf9fcbd090b680d1e22871bef7", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         SAMPLE,\n         MARK_DISTINCT,\n         TABLE_WRITER,\n        TABLE_COMMIT,\n         INDEX_SOURCE,\n         UNNEST\n     }", "fixed": "         SAMPLE,\n         MARK_DISTINCT,\n         TABLE_WRITER,\n        TABLE_FINISH,\n         INDEX_SOURCE,\n         UNNEST\n     }", "sourceBeforeFix": "TABLE_COMMIT", "sourceAfterFix": "TABLE_FINISH"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( 0 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_3 ( 1 , 1 , FLOAT_1 , 1 ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; return this . METHOD_5 ( VAR_1 , VAR_2 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( 0 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_3 ( 1 , 1 , FLOAT_1 , 1 ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; return this . METHOD_5 ( VAR_1 , VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String name , java.lang.String VAR_2 , java.lang.String value ) throws TYPE_1 { java.lang.Long VAR_3 = TYPE_2 . METHOD_2 ( value ) ; java.lang.Long VAR_4 = TYPE_2 . METHOD_2 ( STRING_1 ) ; if ( VAR_3 > VAR_4 ) { throw new TYPE_1 ( java.lang.String.format ( ( STRING_2 + STRING_3 ) , TYPE_3 . METHOD_3 ( ) , value ) ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String name , java.lang.String VAR_2 , java.lang.String value ) throws TYPE_1 { java.lang.Long VAR_3 = TYPE_2 . METHOD_2 ( value ) ; java.lang.Long VAR_4 = TYPE_2 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_3 > VAR_4 ) || ( VAR_3 < 0 ) ) { throw new TYPE_1 ( java.lang.String.format ( ( STRING_2 + STRING_3 ) , TYPE_3 . METHOD_3 ( ) , value ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 { java.lang.System.out.println ( STRING_1 ) ; VAR_1 = new TYPE_2 ( INT_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 , INT_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 , INT_2 ) ; VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; TYPE_2 VAR_4 = VAR_1 ; TYPE_2 VAR_5 = VAR_2 . METHOD_3 ( ) ; assert VAR_5 == VAR_4 ; }\n", "fixed": "public void METHOD_1 ( ) throws TYPE_1 { java.lang.System.out.println ( STRING_1 ) ; VAR_1 = new TYPE_2 ( INT_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 , INT_2 , 0 ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 , INT_2 , 0 ) ; VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; TYPE_2 VAR_4 = VAR_1 ; TYPE_2 VAR_5 = VAR_2 . METHOD_3 ( ) ; assert VAR_5 == VAR_4 ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( int i = ( VAR_2 . size ( ) ) - 1 ; i >= 0 ; i -- ) { VAR_1 . add ( VAR_2 . get ( i ) . METHOD_1 ( ) ) ; } return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( counter ) ; for ( int i = ( VAR_2 . size ( ) ) - 1 ; i >= 0 ; i -- ) { VAR_1 . add ( VAR_2 . get ( i ) . METHOD_1 ( ) ) ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"problem": "public static TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , float VAR_4 , float VAR_5 , float VAR_6 ) { float x = 0 ; float y = 0 ; y = ( ( ( VAR_2 * VAR_5 ) * INT_1 ) / FLOAT_1 ) + ( VAR_3 * VAR_6 ) ; x = ( VAR_1 * VAR_4 ) - ( ( ( VAR_2 % INT_2 ) * VAR_4 ) / FLOAT_2 ) ; return new TYPE_1 ( x , y ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , float VAR_4 , float VAR_5 , float VAR_6 ) { float y = ( ( ( VAR_2 * VAR_5 ) * INT_1 ) / FLOAT_1 ) + ( VAR_3 * VAR_6 ) ; float x = ( VAR_1 * VAR_4 ) - ( ( ( VAR_2 % INT_2 ) * VAR_4 ) / FLOAT_2 ) ; return new TYPE_1 ( x , y ) ; }\n"}
{"problem": "private boolean METHOD_1 ( java.lang.String VAR_1 ) { java.lang.Integer VAR_2 = java.lang.Integer . METHOD_2 ( VAR_1 . substring ( 1 ) ) ; char [ ] VAR_3 = VAR_1 . METHOD_3 ( ) ; if ( ( ( VAR_3 [ 0 ] ) >= CHAR_1 ) && ( ( VAR_3 [ 0 ] ) <= CHAR_2 ) ) { java.lang.System.out.println ( VAR_2 ) ; if ( ( VAR_2 >= 1 ) && ( VAR_2 <= INT_1 ) ) { return true ; } } return false ; }\n", "fixed": "private boolean METHOD_1 ( java.lang.String VAR_1 ) { java.lang.Integer VAR_2 = java.lang.Integer . METHOD_2 ( VAR_1 . substring ( 1 ) ) ; char [ ] VAR_3 = VAR_1 . METHOD_3 ( ) ; if ( ( ( VAR_3 [ 0 ] ) >= CHAR_1 ) && ( ( VAR_3 [ 0 ] ) <= CHAR_2 ) ) { if ( ( VAR_2 >= 1 ) && ( VAR_2 <= INT_1 ) ) { return true ; } } return false ; }\n"}
{"fixCommitSHA1": "574a2e4f78aea6bc9f0e1673e005acb26697eb76", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "     private int maxNumberOfIndices = 20;\n     @Parameter(value = \"output_batch_size\", required = true, validator = PositiveIntegerValidator.class)\n    private int outputBatchSize = 25;\n     @Parameter(value = \"output_flush_interval\", required = true, validator = PositiveIntegerValidator.class)\n     private int outputFlushInterval = 1;", "fixed": "     private int maxNumberOfIndices = 20;\n     @Parameter(value = \"output_batch_size\", required = true, validator = PositiveIntegerValidator.class)\n    private int outputBatchSize = 1000;\n     @Parameter(value = \"output_flush_interval\", required = true, validator = PositiveIntegerValidator.class)\n     private int outputFlushInterval = 1;", "sourceBeforeFix": "outputBatchSize=25", "sourceAfterFix": "outputBatchSize=1000"}
{"problem": "public void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_4 ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_3 . METHOD_5 ( ) ; } else { VAR_3 . METHOD_6 ( 0 , new TYPE_1 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_4 ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_3 . METHOD_5 ( ) ; } else { VAR_4 = METHOD_3 ( ) ; METHOD_3 ( 0 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int i , boolean b ) { if ( ( VAR_2 ) == ( VAR_3 . METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else { VAR_2 = VAR_1 . METHOD_4 ( ) ; VAR_4 . setText ( TYPE_2 . METHOD_5 ( VAR_2 ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int i , boolean b ) { if ( ( VAR_2 ) == ( VAR_3 . METHOD_2 ( ) ) ) { } else { VAR_2 = VAR_1 . METHOD_4 ( ) ; VAR_4 . setText ( TYPE_2 . METHOD_5 ( VAR_2 ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) { VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . get ( ( i + 1 ) ) , VAR_2 . get ( i ) . getValue ( ) ) ; } METHOD_4 ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_3 ) == null ) { VAR_3 = new TYPE_2 ( ) ; } for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) { VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . get ( ( i + 1 ) ) , VAR_2 . get ( i ) . getValue ( ) ) ; } METHOD_4 ( VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { java.util.Collection < java.util.Set < TYPE_1 > > VAR_2 = VAR_3 . values ( ) ; for ( java.util.Set < TYPE_1 > VAR_4 : VAR_2 ) { for ( TYPE_1 VAR_5 : VAR_4 ) { java.lang.String VAR_6 = ( ( java.lang.String ) ( VAR_5 . METHOD_2 ( ) . METHOD_3 ( ) . get ( VAR_7 ) ) ) ; if ( VAR_6 . equals ( VAR_1 ) ) { VAR_5 . METHOD_4 ( ) ; } } } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { synchronized ( VAR_3 ) { java.util.Collection < java.util.Set < TYPE_1 > > VAR_2 = VAR_3 . values ( ) ; for ( java.util.Set < TYPE_1 > VAR_4 : VAR_2 ) { for ( TYPE_1 VAR_5 : VAR_4 ) { java.lang.String VAR_6 = ( ( java.lang.String ) ( VAR_5 . METHOD_2 ( ) . METHOD_3 ( ) . get ( VAR_7 ) ) ) ; if ( VAR_6 . equals ( VAR_1 ) ) { VAR_5 . METHOD_4 ( ) ; } } } } }\n"}
{"problem": "private void METHOD_1 ( ) { for ( final java.util.Map.Entry < java.lang.Integer , TYPE_1 > VAR_1 : VAR_2 . METHOD_2 ( ) ) { VAR_3 . execute ( new TYPE_2 ( ) { public void METHOD_3 ( ) { try { VAR_4 . METHOD_3 ( VAR_1 . getValue ( ) , false ) ; } catch ( java.lang.Exception VAR_5 ) { TYPE_3 . METHOD_4 ( new TYPE_4 ( ) , java.lang.String.format ( STRING_1 , VAR_5 . METHOD_5 ( ) ) , STRING_2 , VAR_6 ) ; } } } ) ; } }\n", "fixed": "protected void METHOD_1 ( ) { for ( final java.util.Map.Entry < java.lang.Integer , TYPE_1 > VAR_1 : VAR_2 . METHOD_2 ( ) ) { VAR_3 . execute ( new TYPE_2 ( ) { public void METHOD_3 ( ) { try { VAR_4 . METHOD_3 ( VAR_1 . getValue ( ) , false ) ; } catch ( java.lang.Exception VAR_5 ) { TYPE_3 . METHOD_4 ( new TYPE_4 ( ) , java.lang.String.format ( STRING_1 , VAR_5 . METHOD_5 ( ) ) , STRING_2 , VAR_6 ) ; } } } ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 op ) { for ( TYPE_2 source : VAR_1 ) { if ( source . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( op . METHOD_5 ( ) ) ) { source . METHOD_6 ( VAR_2 , op ) ; break ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 op ) { for ( TYPE_2 source : VAR_1 ) { if ( source . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( op . METHOD_5 ( ) ) ) { source . METHOD_6 ( VAR_2 , op ) ; } } }\n"}
{"problem": "public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_1 class ) ; intent . METHOD_2 ( STRING_1 , STRING_2 ) ; intent . METHOD_2 ( STRING_3 , STRING_4 ) ; intent . METHOD_2 ( STRING_5 , STRING_6 ) ; getActivity ( ) . METHOD_3 ( intent ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_1 class ) ; intent . METHOD_2 ( STRING_1 , STRING_2 ) ; intent . METHOD_2 ( STRING_3 , STRING_4 ) ; intent . METHOD_2 ( STRING_5 , STRING_6 ) ; getContext ( ) . METHOD_3 ( intent ) ; }\n"}
{"problem": "public void add ( TYPE_1 VAR_1 ) { if ( METHOD_1 ( VAR_2 ) ) java.lang.System.out.println ( ( STRING_1 + ( VAR_2 ) ) ) ; put ( VAR_2 , VAR_1 ) ; if ( VAR_3 . METHOD_1 ( VAR_4 ) ) VAR_3 . get ( VAR_4 ) . add ( VAR_2 ) ; else { VAR_3 . put ( VAR_4 , TYPE_2 . list ( VAR_2 ) ) ; } }\n", "fixed": "public void add ( TYPE_1 VAR_1 ) { if ( ( METHOD_1 ( VAR_2 ) ) && ( ! ( values ( ) . contains ( VAR_1 ) ) ) ) java.lang.System.out.println ( ( STRING_1 + ( VAR_2 ) ) ) ; put ( VAR_2 , VAR_1 ) ; if ( VAR_3 . METHOD_1 ( VAR_4 ) ) VAR_3 . get ( VAR_4 ) . add ( VAR_2 ) ; else { VAR_3 . put ( VAR_4 , TYPE_2 . list ( VAR_2 ) ) ; } }\n"}
{"problem": "public static void METHOD_1 ( android.content.Context context ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( VAR_3 , true ) ; if ( ! ( TYPE_2 . METHOD_3 ( context ) ) ) { TYPE_2 . METHOD_4 ( context , VAR_4 ) ; return ; } TYPE_3 . METHOD_5 ( TYPE_4 . METHOD_6 ( context ) , context . getString ( VAR_5 ) , VAR_1 ) ; }\n", "fixed": "public static void METHOD_1 ( android.content.Context context ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( VAR_3 , true ) ; if ( ! ( TYPE_2 . METHOD_3 ( context ) ) ) { TYPE_2 . METHOD_4 ( context , VAR_4 ) ; } TYPE_3 . METHOD_5 ( TYPE_4 . METHOD_6 ( context ) , context . getString ( VAR_5 ) , VAR_1 ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( null ) ; VAR_1 . METHOD_2 ( ) . METHOD_4 ( null ) ; VAR_1 . METHOD_2 ( ) . METHOD_5 ( null ) ; VAR_1 . METHOD_2 ( ) . METHOD_6 ( null ) ; VAR_1 . METHOD_2 ( ) . METHOD_7 ( null ) ; return VAR_1 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( null ) ; VAR_1 . METHOD_2 ( ) . METHOD_4 ( null ) ; VAR_1 . METHOD_2 ( ) . METHOD_5 ( null ) ; VAR_1 . METHOD_2 ( ) . METHOD_6 ( null ) ; VAR_1 . METHOD_2 ( ) . METHOD_7 ( null ) ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "55a4b30e72ad36e69499aa5db9b25f63ea7884ac", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\n         result.expectedMessageCount(2);\n         MockEndpoint error = getMockEndpoint(\"mock:error\");\n        error.expectedMessageCount(1);\n         template.sendBody(\"direct:start\", \"Hello World\");\n         template.sendBody(\"direct:start\", \"Bye World\");", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\n         result.expectedMessageCount(2);\n         MockEndpoint error = getMockEndpoint(\"mock:error\");\n        error.expectedMinimumMessageCount(1);\n         template.sendBody(\"direct:start\", \"Hello World\");\n         template.sendBody(\"direct:start\", \"Bye World\");", "sourceBeforeFix": "error.expectedMessageCount(1)", "sourceAfterFix": "error.expectedMinimumMessageCount(1)"}
{"problem": "void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , TYPE_1 VAR_3 ) { int VAR_4 = METHOD_2 ( VAR_1 , VAR_3 ) ; int VAR_5 = 0 ; boolean VAR_6 = false ; VAR_5 = METHOD_3 ( VAR_2 , VAR_3 ) ; if ( ( ( ( VAR_7 ) != null ) && ( VAR_3 . METHOD_4 ( ) ) ) && ( VAR_5 >= 0 ) ) { VAR_6 = true ; } METHOD_1 ( VAR_4 , VAR_5 , VAR_3 , VAR_6 ) ; }\n", "fixed": "void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , TYPE_1 VAR_3 ) { int VAR_4 = METHOD_2 ( VAR_1 , VAR_3 ) ; int VAR_5 = 0 ; boolean VAR_6 = false ; if ( ( ( VAR_7 ) != null ) && ( VAR_3 . METHOD_4 ( ) ) ) { VAR_5 = METHOD_3 ( VAR_2 , VAR_3 ) ; VAR_6 = true ; } METHOD_1 ( VAR_4 , VAR_5 , VAR_3 , VAR_6 ) ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == STRING_1 ) return null ; java.lang.String str = VAR_1 ; TYPE_2 format = new TYPE_2 ( STRING_2 ) ; java.util.Date VAR_2 = null ; try { VAR_2 = format . METHOD_2 ( str ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } TYPE_1 time = new TYPE_1 ( VAR_2 . getTime ( ) ) ; return time . METHOD_4 ( str ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_1 == STRING_1 ) ) return null ; java.lang.String str = VAR_1 ; TYPE_2 format = new TYPE_2 ( STRING_2 ) ; java.util.Date VAR_2 = null ; try { VAR_2 = format . METHOD_2 ( str ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } TYPE_1 time = new TYPE_1 ( VAR_2 . getTime ( ) ) ; return time . METHOD_4 ( str ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( VAR_3 ) ; VAR_4 = new TYPE_3 ( VAR_3 ) ; VAR_5 = new TYPE_4 ( VAR_3 ) ; VAR_6 = new TYPE_5 ( VAR_3 ) ; VAR_7 = new TYPE_6 ( VAR_3 , VAR_8 ) ; VAR_7 . METHOD_2 ( ) ; VAR_7 . METHOD_3 ( VAR_9 ) ; VAR_10 = new TYPE_7 ( VAR_3 , VAR_1 ) ; TYPE_8 . METHOD_4 ( VAR_11 , STRING_1 ) ; VAR_10 . METHOD_5 ( INT_1 , INT_2 , VAR_12 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( VAR_3 ) ; VAR_4 = new TYPE_3 ( VAR_3 ) ; VAR_5 = new TYPE_4 ( VAR_3 ) ; VAR_6 = new TYPE_5 ( VAR_3 ) ; VAR_7 = new TYPE_6 ( VAR_3 , VAR_8 ) ; VAR_7 . METHOD_2 ( ) ; VAR_7 . METHOD_3 ( ) ; VAR_10 = new TYPE_7 ( VAR_3 , VAR_1 ) ; TYPE_8 . METHOD_4 ( VAR_11 , STRING_1 ) ; VAR_10 . METHOD_5 ( INT_1 , INT_2 , VAR_12 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { long VAR_1 = ( TYPE_1 . METHOD_2 ( ) ) - ( VAR_2 ) ; VAR_1 /= INT_1 ; VAR_1 = ( time ) - VAR_1 ; if ( VAR_1 <= 0 ) { return ; } VAR_3 = true ; METHOD_3 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { long VAR_1 = ( TYPE_1 . METHOD_2 ( ) ) - ( VAR_2 ) ; VAR_1 /= INT_1 ; VAR_1 = ( time ) - VAR_1 ; if ( VAR_1 < 0 ) { return ; } VAR_3 = true ; METHOD_3 ( ) ; }\n"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) { { } } ; VAR_2 . METHOD_2 ( VAR_3 class ) ; VAR_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_1 ) ) ; VAR_1 . METHOD_5 ( VAR_4 . String class , STRING_2 ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) { { } } ; VAR_2 . METHOD_2 ( VAR_3 class ) ; VAR_2 . METHOD_3 ( METHOD_4 ( STRING_1 ) ) ; VAR_1 . METHOD_5 ( VAR_4 . String class , STRING_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.String status = VAR_1 . status ; if ( status . equals ( STRING_1 ) ) { if ( ( VAR_1 . results ) != null ) { if ( ! ( VAR_2 . equals ( VAR_3 . get ( 0 ) ) ) ) VAR_2 = VAR_3 . get ( 0 ) ; } else VAR_2 = null ; } }\n", "fixed": "public void METHOD_1 ( ) { java.lang.String status = VAR_1 . status ; if ( status . equals ( STRING_1 ) ) { if ( ( VAR_3 . size ( ) ) > 0 ) { if ( ( VAR_2 ) == null ) VAR_2 = VAR_3 . get ( 0 ) ; else if ( ! ( VAR_2 . equals ( VAR_3 . get ( 0 ) ) ) ) VAR_2 = VAR_3 . get ( 0 ) ; } else VAR_2 = null ; } }\n"}
{"problem": "public void METHOD_1 ( ) { java.util.Random VAR_1 = new java.util.Random ( ) ; this . VAR_2 = INT_1 + ( ( this . size ) / INT_2 ) ; this . VAR_3 = ( ( double ) ( VAR_1 . METHOD_2 ( ( INT_3 - ( ( int ) ( ( this . size ) / INT_2 ) ) ) ) ) ) + 1 ; }\n", "fixed": "public void METHOD_1 ( ) { java.util.Random VAR_1 = new java.util.Random ( ) ; this . VAR_2 = INT_1 + ( ( this . size ) / INT_2 ) ; this . VAR_3 = ( ( double ) ( VAR_1 . METHOD_2 ( ( INT_3 - ( ( int ) ( ( this . size ) / INT_2 ) ) ) ) ) ) + ( ( int ) ( ( this . size ) / INT_2 ) ) ; }\n"}
{"problem": "public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , java.lang.String VAR_2 ) throws java.io.IOException { java.lang.String path = VAR_2 ; if ( STRING_1 . equals ( path ) ) { TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) ) ) ; path = TYPE_4 . METHOD_4 ( VAR_3 ) ; } if ( path . startsWith ( STRING_3 ) ) { path = TYPE_4 . METHOD_5 ( VAR_2 ) ; } response . METHOD_6 ( path ) ; }\n", "fixed": "public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , java.lang.String VAR_2 ) throws java.io.IOException { java.lang.String path = VAR_2 ; if ( STRING_1 . equals ( path ) ) { TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) ) ) ; path = TYPE_4 . METHOD_4 ( VAR_3 ) ; } if ( path . startsWith ( STRING_3 ) ) { path = TYPE_4 . METHOD_5 ( path ) ; } response . METHOD_6 ( path ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.util.Vector < TYPE_1 > VAR_2 ) { TYPE_1 VAR_3 = null ; java.util.Iterator < TYPE_1 > iterator = VAR_2 . iterator ( ) ; while ( iterator . METHOD_2 ( ) ) { TYPE_1 VAR_4 = iterator . METHOD_3 ( ) ; if ( VAR_1 . METHOD_4 ( ) . equals ( VAR_4 . METHOD_4 ( ) ) ) { VAR_3 = VAR_4 ; VAR_5 . METHOD_5 ( ( STRING_1 + VAR_1 ) ) ; } } return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.util.Vector < TYPE_1 > VAR_2 ) { TYPE_1 VAR_3 = null ; java.util.Iterator < TYPE_1 > iterator = VAR_2 . iterator ( ) ; while ( iterator . METHOD_2 ( ) ) { TYPE_1 VAR_4 = iterator . METHOD_3 ( ) ; if ( VAR_1 . METHOD_4 ( ) . equals ( VAR_4 . METHOD_4 ( ) ) ) { VAR_3 = VAR_4 ; } } return VAR_3 ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_2 = getIntent ( ) . METHOD_2 ( ) ; VAR_3 = VAR_2 . getInt ( STRING_1 ) ; VAR_4 = new java.lang.String [ VAR_3 ] ; VAR_4 = VAR_2 . METHOD_3 ( STRING_2 ) ; METHOD_4 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_2 = getIntent ( ) . METHOD_2 ( ) ; VAR_3 = VAR_2 . getInt ( STRING_1 ) ; VAR_4 = new java.lang.String [ VAR_3 ] ; VAR_4 = VAR_2 . METHOD_3 ( STRING_2 ) ; VAR_3 = ( VAR_3 ) - 1 ; METHOD_4 ( ) ; }\n"}
{"problem": "private void METHOD_1 ( android.view.View view ) { TYPE_1 . METHOD_2 ( view , STRING_1 ) ; float VAR_1 = ( view . METHOD_3 ( ) ) / INT_1 ; TYPE_2 VAR_2 = TYPE_2 . METHOD_4 ( view , STRING_2 , 0 , ( - VAR_1 ) , VAR_1 , 0 ) ; VAR_2 . METHOD_5 ( null ) ; VAR_2 . start ( ) ; }\n", "fixed": "private void METHOD_1 ( android.view.View view ) { float VAR_1 = ( view . METHOD_3 ( ) ) / INT_1 ; TYPE_2 VAR_2 = TYPE_2 . METHOD_4 ( view , STRING_2 , 0 , ( - VAR_1 ) , VAR_1 , 0 ) ; VAR_2 . METHOD_5 ( null ) ; VAR_2 . start ( ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "ed13d3007bbe9cb7df8641d2e287bf94c314fb86", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 }\n             });\n         }\n        long newReservation = memoryReservation.getAndAdd(bytes);\n         if (newReservation > maxMemoryReservation) {\n             memoryReservation.getAndAdd(-bytes);\n             throw new ExceededMemoryLimitException(getMaxMemorySize());", "fixed": "                 }\n             });\n         }\n        long newReservation = memoryReservation.addAndGet(bytes);\n         if (newReservation > maxMemoryReservation) {\n             memoryReservation.getAndAdd(-bytes);\n             throw new ExceededMemoryLimitException(getMaxMemorySize());", "sourceBeforeFix": "memoryReservation.getAndAdd(bytes)", "sourceAfterFix": "memoryReservation.addAndGet(bytes)"}
{"problem": "public boolean METHOD_1 ( TYPE_1 key , TYPE_2 value , TYPE_3 VAR_1 ) { final long start = TYPE_4 . METHOD_2 ( ) ; final TYPE_5 < java.lang.Boolean > f = METHOD_3 ( key , value , VAR_1 , true , false ) ; try { boolean VAR_2 = TYPE_6 . METHOD_4 ( f . get ( ) ) ; if ( VAR_3 ) { TYPE_6 . METHOD_5 ( start , VAR_2 ) ; } return VAR_2 ; } catch ( java.lang.Throwable VAR_4 ) { throw TYPE_7 . METHOD_6 ( VAR_4 , VAR_5 class ) ; } }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 key , TYPE_2 value , TYPE_3 VAR_1 ) { final long start = TYPE_4 . METHOD_2 ( ) ; final TYPE_5 < java.lang.Boolean > f = METHOD_3 ( key , value , VAR_1 , true , false ) ; try { boolean VAR_2 = f . get ( ) ; if ( VAR_3 ) { TYPE_6 . METHOD_5 ( start , VAR_2 ) ; } return VAR_2 ; } catch ( java.lang.Throwable VAR_4 ) { throw TYPE_7 . METHOD_6 ( VAR_4 , VAR_5 class ) ; } }\n"}
{"problem": "public long METHOD_1 ( java.lang.String VAR_1 , TYPE_1 node ) throws java.lang.Exception { long id ; try ( TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ) { id = VAR_4 . METHOD_3 ( ) ; java.lang.String VAR_5 = STRING_1 ; VAR_3 . METHOD_4 ( VAR_5 , TYPE_3 . METHOD_5 ( id , node . type , node . data ) ) ; VAR_2 . METHOD_6 ( ) ; } return id ; }\n", "fixed": "public long METHOD_1 ( java.lang.String VAR_1 , TYPE_1 node ) throws java.lang.Exception { long id ; try ( TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ) { id = VAR_4 . METHOD_3 ( ) ; java.lang.String VAR_5 = STRING_1 ; VAR_2 . METHOD_4 ( VAR_5 , TYPE_3 . METHOD_5 ( id , node . type , node . data ) ) ; VAR_2 . METHOD_6 ( ) ; } return id ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( new TYPE_2 ( VAR_1 ) ) ; getContext ( ) . METHOD_4 ( new android.content.Intent ( this . getContext ( ) , VAR_2 class ) ) ; new TYPE_3 ( ) . METHOD_5 ( getContext ( ) , VAR_3 ) ; ( ( TYPE_4 ) ( getContext ( ) ) ) . METHOD_6 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( new TYPE_2 ( VAR_1 ) ) ; new TYPE_3 ( ) . METHOD_5 ( getContext ( ) , VAR_3 ) ; ( ( TYPE_4 ) ( getContext ( ) ) ) . METHOD_6 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 msg ; try { while ( true ) { if ( ( msg = VAR_1 . get ( ) ) != null ) java.lang.String.format ( msg . toString ( ) ) ; java.lang.Thread . METHOD_2 ( VAR_2 ) ; } } catch ( TYPE_2 VAR_3 ) { } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 msg ; try { while ( true ) { if ( ( msg = VAR_1 . get ( ) ) != null ) java.lang.System.out.println ( msg . toString ( ) ) ; java.lang.Thread . METHOD_2 ( VAR_2 ) ; } } catch ( TYPE_2 VAR_3 ) { } }\n"}
{"problem": "public final void METHOD_1 ( ) { try { this . VAR_1 = null ; if ( ( writer ) != null ) { try { writer . METHOD_2 ( ) ; } finally { writer . METHOD_1 ( ) ; writer = null ; } } } catch ( java.lang.Throwable VAR_2 ) { throw new TYPE_1 ( STRING_1 , VAR_2 ) ; } if ( ( this . VAR_3 ) != 0 ) { throw new TYPE_2 ( ( STRING_2 + STRING_3 ) , VAR_4 , TYPE_3 . METHOD_3 ( VAR_5 , VAR_3 ) ) ; } }\n", "fixed": "public final void METHOD_1 ( ) { try { this . VAR_1 = null ; if ( ( writer ) != null ) { writer . METHOD_1 ( ) ; writer = null ; } } catch ( java.lang.Throwable VAR_2 ) { throw new TYPE_1 ( STRING_1 , VAR_2 ) ; } if ( ( this . VAR_3 ) != 0 ) { throw new TYPE_2 ( ( STRING_2 + STRING_3 ) , VAR_4 , TYPE_3 . METHOD_3 ( VAR_5 , VAR_3 ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; ( ( TYPE_2 ) ( METHOD_3 ( ) . METHOD_4 ( INT_1 ) ) ) . METHOD_5 ( ) ; ( ( TYPE_2 ) ( METHOD_3 ( ) . METHOD_4 ( INT_1 ) ) ) . add ( VAR_2 ) ; METHOD_3 ( ) . METHOD_4 ( 1 ) . METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( 1 ) . show ( false ) ; ( ( TYPE_2 ) ( METHOD_3 ( ) . METHOD_4 ( INT_1 ) ) ) . METHOD_5 ( ) ; ( ( TYPE_2 ) ( METHOD_3 ( ) . METHOD_4 ( INT_1 ) ) ) . add ( VAR_2 ) ; METHOD_3 ( ) . METHOD_4 ( 1 ) . METHOD_6 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) ) ; TYPE_3 VAR_3 = TYPE_4 . METHOD_4 ( VAR_2 , INT_1 ) ; VAR_4 . METHOD_5 ( new TYPE_5 ( ) . position ( VAR_2 ) . title ( STRING_1 ) ) ; VAR_4 . METHOD_6 ( VAR_3 ) ; VAR_4 . METHOD_7 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) ) ; TYPE_3 VAR_3 = TYPE_4 . METHOD_4 ( VAR_2 , INT_1 ) ; VAR_4 . METHOD_7 ( ) ; VAR_4 . METHOD_5 ( new TYPE_5 ( ) . position ( VAR_2 ) . title ( STRING_1 ) ) ; VAR_4 . METHOD_6 ( VAR_3 ) ; }\n"}
{"fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "projectName": "Atmosphere.atmosphere", "bugType": "Change Caller in Function Call", "problem": "         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n                 noOps,\n                DefaultAtmosphereRequest.newInstance(),\n                 response,\n                 config.framework().getAsyncSupport(),\n                 noOpsHandler);", "fixed": "         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n                 noOps,\n                AtmosphereRequest.newInstance(),\n                 response,\n                 config.framework().getAsyncSupport(),\n                 noOpsHandler);", "sourceBeforeFix": "DefaultAtmosphereRequest.newInstance()", "sourceAfterFix": "AtmosphereRequest.newInstance()"}
{"fixCommitSHA1": "f1024ba0e7d5f1276a285a4218f26c70252719b5", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t\t\tserver = new WebInfoServer(config, port, this);\n \t\t\tserver.start();\n \t\t} catch (FileNotFoundException e) {\n\t\t\tLOG.error(e.getMessage());\n \t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Cannot instantiate info server: \" + StringUtils.stringifyException(e));\n \t\t}\n \t}", "fixed": " \t\t\tserver = new WebInfoServer(config, port, this);\n \t\t\tserver.start();\n \t\t} catch (FileNotFoundException e) {\n\t\t\tLOG.error(e.getMessage(), e);\n \t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Cannot instantiate info server: \" + e.getMessage(), e);\n \t\t}\n \t}", "sourceBeforeFix": "LOG.error(e.getMessage())", "sourceAfterFix": "LOG.error(e.getMessage(),e)"}
{"problem": "public void update ( ) throws TYPE_1 { VAR_1 . update ( ) ; this . METHOD_1 ( ) ; this . METHOD_2 ( ) ; if ( VAR_2 . METHOD_3 ( ) ) { if ( METHOD_4 ( ) ) { METHOD_5 ( ) ; } else { VAR_3 = true ; VAR_4 . METHOD_6 ( VAR_5 ) ; java.lang.System.out.println ( VAR_4 . toString ( ) ) ; } } }\n", "fixed": "public void update ( ) throws TYPE_1 { VAR_1 . update ( ) ; this . METHOD_1 ( ) ; this . METHOD_2 ( ) ; if ( VAR_2 . METHOD_3 ( ) ) { if ( METHOD_4 ( ) ) { METHOD_5 ( ) ; } else { VAR_3 = true ; VAR_4 . METHOD_6 ( VAR_5 ) ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return ( number ) == ( VAR_2 ) ; return ( ( number ) == ( ( VAR_1 . number ) + 1 ) ) && ( ( ( ( VAR_3 ) + ( VAR_4 ) ) % INT_1 ) == 1 ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return ( number ) == ( VAR_2 ) ; return ( ( number ) == ( ( VAR_1 . number ) - 1 ) ) && ( ( ( ( VAR_3 ) + ( VAR_4 ) ) % INT_1 ) == 1 ) ; }\n"}
{"problem": "private double METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { double VAR_5 = ( VAR_1 - VAR_4 ) * ( VAR_1 - VAR_3 ) ; VAR_5 += ( VAR_2 - VAR_4 ) * ( VAR_2 - VAR_4 ) ; VAR_5 = TYPE_1 . METHOD_2 ( VAR_5 ) ; return VAR_5 ; }\n", "fixed": "private double METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { double VAR_5 = ( VAR_1 - VAR_3 ) * ( VAR_1 - VAR_3 ) ; VAR_5 += ( VAR_2 - VAR_4 ) * ( VAR_2 - VAR_4 ) ; VAR_5 = TYPE_1 . METHOD_2 ( VAR_5 ) ; return VAR_5 ; }\n"}
{"fixCommitSHA1": "8abd59029e7c0bc0973b492fd84a386b26661bc7", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "             }\n         });\n         try {\n            finish.await(getTimeout(), TimeUnit.MILLISECONDS);\n         } catch (InterruptedException e) {\n             throw new RemotingException(this, \"client(url: \" + getUrl() + \") failed to connect to server \" + getRemoteAddress() + \" client-side timeout \"\n                    + getTimeout() + \"ms (elapsed: \" + (System.currentTimeMillis() - start)\n                     + \"ms) from netty client \" + NetUtils.getLocalHost() + \" using dubbo version \"\n                     + Version.getVersion() + \", cause: \" + e.getMessage(), e);\n         }", "fixed": "             }\n         });\n         try {\n            finish.await(getConnectTimeout(), TimeUnit.MILLISECONDS);\n         } catch (InterruptedException e) {\n             throw new RemotingException(this, \"client(url: \" + getUrl() + \") failed to connect to server \" + getRemoteAddress() + \" client-side timeout \"\n                    + getConnectTimeout() + \"ms (elapsed: \" + (System.currentTimeMillis() - start)\n                     + \"ms) from netty client \" + NetUtils.getLocalHost() + \" using dubbo version \"\n                     + Version.getVersion() + \", cause: \" + e.getMessage(), e);\n         }", "sourceBeforeFix": "getTimeout()", "sourceAfterFix": "getConnectTimeout()"}
{"problem": "private void METHOD_1 ( ) { while ( ( VAR_1 . METHOD_2 ( ) ) != null ) ; while ( ( VAR_2 . METHOD_2 ( ) ) != null ) ; while ( ( VAR_3 . METHOD_2 ( ) ) != null ) ; while ( ( VAR_4 . METHOD_2 ( ) ) != null ) ; }\n", "fixed": "private void METHOD_1 ( ) { while ( ( VAR_1 . METHOD_2 ( ) ) != null ) { assert true ; } while ( ( VAR_2 . METHOD_2 ( ) ) != null ) { assert true ; } while ( ( VAR_3 . METHOD_2 ( ) ) != null ) { assert true ; } while ( ( VAR_4 . METHOD_2 ( ) ) != null ) { assert true ; } }\n"}
{"problem": "public static java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , int VAR_4 ) { java.lang.String VAR_5 = VAR_1 ; try { VAR_5 = TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; } catch ( TYPE_2 VAR_6 ) { VAR_7 . error ( ( ( STRING_2 + VAR_1 ) + VAR_6 ) ) ; } java.lang.String VAR_8 = ( ( ( ( ( ( STRING_3 + VAR_5 ) + STRING_4 ) + VAR_2 ) + STRING_5 ) + VAR_3 ) + STRING_6 ) + VAR_4 ; return VAR_8 ; }\n", "fixed": "public static java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , int VAR_4 ) { java.lang.String VAR_5 = VAR_1 ; try { VAR_5 = TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; } catch ( TYPE_2 VAR_6 ) { VAR_7 . error ( ( ( STRING_2 + VAR_1 ) + VAR_6 ) ) ; } java.lang.String VAR_8 = ( ( STRING_3 + VAR_5 ) + STRING_6 ) + VAR_4 ; return VAR_8 ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; TYPE_3 . METHOD_4 ( VAR_5 ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; TYPE_4 . assertEquals ( VAR_4 , VAR_1 . getValue ( ) . METHOD_7 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; METHOD_4 ( VAR_5 ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; TYPE_4 . assertEquals ( VAR_4 , VAR_1 . getValue ( ) . METHOD_7 ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ; VAR_4 = TYPE_3 . get ( getActivity ( ) ) . METHOD_4 ( VAR_2 ) ; TYPE_4 . METHOD_5 ( STRING_1 , ( STRING_2 + VAR_2 ) ) ; if ( ( VAR_4 ) == null ) TYPE_4 . METHOD_5 ( STRING_1 , STRING_3 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ; VAR_4 = TYPE_3 . get ( getActivity ( ) ) . METHOD_4 ( VAR_2 ) ; }\n"}
{"problem": "public < TYPE_1 > TYPE_1 METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 , TYPE_2 context , TYPE_3 id ) throws TYPE_4 , TYPE_5 , TYPE_6 { TYPE_7 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( context ) ; return METHOD_2 ( ) . METHOD_1 ( VAR_1 , id ) ; }\n", "fixed": "public < TYPE_1 > TYPE_1 METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 , TYPE_2 context , TYPE_3 id ) throws TYPE_4 , TYPE_5 , TYPE_6 { TYPE_7 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( context ) ; return VAR_2 . METHOD_1 ( VAR_1 , id ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 text = ( ( TYPE_1 ) ( METHOD_2 ( VAR_1 ) ) ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; TYPE_2 VAR_4 = ( ( TYPE_2 ) ( METHOD_2 ( VAR_5 ) ) ) ; VAR_4 . METHOD_3 ( ( VAR_6 > FLOAT_1 ? VAR_7 : 0 ) ) ; text . setText ( VAR_8 ) ; VAR_2 . setText ( ( STRING_1 + VAR_6 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_2 VAR_4 = ( ( TYPE_2 ) ( METHOD_2 ( VAR_5 ) ) ) ; VAR_4 . METHOD_3 ( ( VAR_6 > FLOAT_1 ? VAR_7 : - 1 ) ) ; text . setText ( VAR_8 ) ; VAR_2 . setText ( ( STRING_1 + VAR_6 ) ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 ; if ( ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( java.lang.Integer.parseInt ( id ) ) ) == null ) { VAR_1 = TYPE_1 . METHOD_4 ( ) . build ( ) ; } else { VAR_1 = TYPE_1 . METHOD_5 ( ) . build ( ) ; } return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 ; if ( ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( java.lang.Integer.parseInt ( id ) ) ) == null ) { VAR_1 = TYPE_1 . METHOD_4 ( ) . build ( ) ; } else { VAR_1 = TYPE_1 . METHOD_5 ( ) . build ( ) ; } return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return ; } METHOD_1 ( VAR_1 , true ) ; if ( ( VAR_1 != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { VAR_2 = true ; } if ( VAR_1 != null ) { if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return ; } METHOD_1 ( VAR_1 , true ) ; if ( ( VAR_1 != null ) && ( VAR_1 . METHOD_2 ( true ) ) ) { VAR_2 = true ; } if ( VAR_1 != null ) { if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ; } } }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 msg = new TYPE_1 ( VAR_1 . METHOD_2 ( 0 ) , VAR_1 . getString ( 1 ) , VAR_1 . getString ( INT_1 ) , VAR_1 . getString ( INT_2 ) , java.lang.Boolean . METHOD_3 ( VAR_1 . getString ( INT_3 ) ) , METHOD_4 ( ) ) ; return msg ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_1 . METHOD_2 ( 0 ) , VAR_1 . getString ( 1 ) , VAR_1 . getString ( INT_1 ) , VAR_1 . getString ( INT_2 ) , java.lang.Boolean . METHOD_3 ( VAR_1 . getString ( INT_3 ) ) , METHOD_4 ( ) ) ; }\n"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page1reverse = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.desc(\"title\"), 1, 2);\n         assertThat(page1reverse.pagination().getCount()).isEqualTo(2);\n        assertThat(page1reverse.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page1reverse.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\", \"hello5\");", "fixed": "         final PaginatedList<TestDTO> page1reverse = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.desc(\"title\"), 1, 2);\n         assertThat(page1reverse.pagination().getCount()).isEqualTo(2);\n        assertThat(page1reverse.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page1reverse.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\", \"hello5\");", "sourceBeforeFix": "assertThat(page4.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page4.pagination().getGlobalTotal()).isEqualTo(5)"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_2 = VAR_2 . add ( TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_5 ( ) ) / INT_1 ) ) ) ; return VAR_2 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_2 = VAR_2 . add ( TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_5 ( ) ) / INT_1 ) ) ) ; return VAR_2 ; }\n"}
{"problem": "boolean METHOD_1 ( java.lang.String fileName , long VAR_1 ) { java.io.File file = new java.io.File ( context . METHOD_2 ( ) , fileName ) ; if ( file . METHOD_3 ( ) ) { if ( ( ( TYPE_1 . METHOD_4 ( ) ) - ( file . METHOD_5 ( ) ) ) > VAR_1 ) { return false ; } } else { return false ; } return true ; }\n", "fixed": "boolean METHOD_1 ( java.lang.String fileName , long VAR_1 ) { java.io.File file = new java.io.File ( context . METHOD_2 ( ) , fileName ) ; if ( ( file . METHOD_3 ( ) ) && ( ( file . length ( ) ) != 0 ) ) { if ( ( ( TYPE_1 . METHOD_4 ( ) ) - ( file . METHOD_5 ( ) ) ) > VAR_1 ) { return false ; } } else { return false ; } return true ; }\n"}
{"fixCommitSHA1": "419fb4a4dee3cd001631daa06fe6b8c30095b468", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "                                                   ) throws IOException {\n     try {\n      ugi.reloginFromKeytab();\n       return ugi.doAs(new PrivilegedExceptionAction<Token<?>>() {\n         @Override\n         public Token<?> run() throws IOException {", "fixed": "                                                   ) throws IOException {\n     try {\n      ugi.checkTGTAndReloginFromKeytab();\n       return ugi.doAs(new PrivilegedExceptionAction<Token<?>>() {\n         @Override\n         public Token<?> run() throws IOException {", "sourceBeforeFix": "ugi.reloginFromKeytab()", "sourceAfterFix": "ugi.checkTGTAndReloginFromKeytab()"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "fixed": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( new TYPE_4 ( ) ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( new TYPE_5 ( ) ) . build ( ) ; VAR_2 . METHOD_6 ( null ) ; n = VAR_2 . METHOD_7 ( 0 , 0 ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( new TYPE_4 ( ) ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( new TYPE_5 ( ) ) . build ( ) ; VAR_2 . METHOD_6 ( null ) ; n = VAR_2 . METHOD_7 ( 0 , 0 ) ; }\n"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tinvalidateHierarchy();\r\n \t}\r\n\tpublic String getText () {\r\n \t\treturn text;\r\n \t}\r", "fixed": " \t\tinvalidateHierarchy();\r\n \t}\r\n\tpublic CharSequence getText () {\r\n \t\treturn text;\r\n \t}\r", "sourceBeforeFix": "String text", "sourceAfterFix": "CharSequence text"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 , java.util.Date VAR_2 , java.util.Date VAR_3 , java.util.List < java.lang.Integer > VAR_4 , java.util.List < java.lang.Integer > VAR_5 ) { return TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , null , ( - 1 ) , ( - 1 ) , false , false ) ; }\n", "fixed": "public static java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 , java.util.Date VAR_2 , java.util.Date VAR_3 , java.util.List < java.lang.Integer > VAR_4 , java.util.List < java.lang.Integer > VAR_5 ) { return TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , null , ( - 1 ) , ( - 1 ) , false , false , true ) ; }\n"}
{"fixCommitSHA1": "d97570d432254fb85f8b99658aaf9892d2cedbe5", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "         }\n     }\n    public static class PartitionFilter implements Filter {\n         private Partition partition;\n         private FilterProperty[] filterProperties;", "fixed": "         }\n     }\n    public static abstract class PartitionFilter implements Filter {\n         private Partition partition;\n         private FilterProperty[] filterProperties;", "sourceBeforeFix": "9", "sourceAfterFix": "1033"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static void main ( java.lang.String [ ] args ) { int [ ] VAR_1 = new int [ ] { INT_1 , INT_2 , - INT_3 , 1 , INT_4 , 1 , INT_2 , INT_5 , INT_2 , INT_1 , INT_6 , - INT_3 } ; java.lang.System.out.println ( ( STRING_1 + ( TYPE_1 . METHOD_1 ( VAR_1 ) ) ) ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { int [ ] VAR_1 = new int [ ] { INT_1 , INT_2 , - 1 , 1 , INT_4 , 1 , INT_2 , INT_5 , INT_2 , INT_1 , INT_6 , - INT_3 } ; java.lang.System.out.println ( ( STRING_1 + ( TYPE_1 . METHOD_1 ( VAR_1 ) ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) != null ) { java.lang.String VAR_3 = VAR_2 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( ) ; TYPE_2 VAR_5 = VAR_6 . METHOD_6 ( ) ; VAR_5 . METHOD_7 ( VAR_7 , VAR_8 ) . replace ( VAR_9 . content , new TYPE_3 ( ) ) . METHOD_8 ( STRING_1 ) . commit ( ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) != null ) { java.lang.String VAR_3 = VAR_2 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ; TYPE_2 VAR_5 = VAR_6 . METHOD_6 ( ) ; VAR_5 . METHOD_7 ( VAR_7 , VAR_8 ) . replace ( VAR_9 . content , new TYPE_3 ( ) ) . METHOD_8 ( STRING_1 ) . commit ( ) ; } }\n"}
{"fixCommitSHA1": "ab45cc12ff4e9b8e62aa1b3776367df3b1020b93", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "         @Override\n         public Number getMinimumValue() {\n             if (minimum == null) {\n                AbstractRanking.refreshMinMax(this, graph);\n             }\n             return minimum;\n         }", "fixed": "         @Override\n         public Number getMinimumValue() {\n             if (minimum == null) {\n                DynamicAttributeRanking.refreshMinMax(this, graph);\n             }\n             return minimum;\n         }", "sourceBeforeFix": "AbstractRanking.refreshMinMax(this,graph)", "sourceAfterFix": "DynamicAttributeRanking.refreshMinMax(this,graph)"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( INT_1 ) ; TYPE_1 . assertEquals ( STRING_1 , VAR_1 . METHOD_3 ( ) . getText ( ) ) ; VAR_1 . METHOD_2 ( INT_2 ) ; TYPE_1 . assertEquals ( STRING_2 , VAR_1 . METHOD_3 ( ) . getText ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( INT_1 ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_3 ( ) . getText ( ) ) ; VAR_1 . METHOD_2 ( INT_2 ) ; assertEquals ( STRING_2 , VAR_1 . METHOD_3 ( ) . getText ( ) ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   \n   ControlFlowGraph<Node> computeCFG() {\n    logger.info(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);", "fixed": "   \n   ControlFlowGraph<Node> computeCFG() {\n    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);", "sourceBeforeFix": "logger.info(\"Normalizing\")", "sourceAfterFix": "logger.fine(\"Normalizing\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "9338e13c38d7b70e1a919c650ebea63f6f42beff", "projectName": "code4craft.webmagic", "bugType": "Wrong Function Name", "problem": "     public String select(String text) {\n         Document doc = Jsoup.parse(text);\n         Elements elements = doc.select(selectorText);\n        if (CollectionUtils.isNotEmpty(elements)) {\n             return null;\n         }\n         return elements.get(0).outerHtml();", "fixed": "     public String select(String text) {\n         Document doc = Jsoup.parse(text);\n         Elements elements = doc.select(selectorText);\n        if (CollectionUtils.isEmpty(elements)) {\n             return null;\n         }\n         return elements.get(0).outerHtml();", "sourceBeforeFix": "CollectionUtils.isNotEmpty(elements)", "sourceAfterFix": "CollectionUtils.isEmpty(elements)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_2 = true ; return true ; } else try { if ( VAR_1 . METHOD_1 ( ) ) { VAR_2 = true ; return true ; } else { VAR_2 = false ; return false ; } } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_2 ( ) ; VAR_2 = true ; return true ; } }\n", "fixed": "public static boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_2 = false ; return true ; } else try { if ( VAR_1 . METHOD_1 ( ) ) { VAR_2 = false ; return true ; } else { VAR_2 = true ; return false ; } } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_2 ( ) ; VAR_2 = false ; return true ; } }\n"}
{"fixCommitSHA1": "8a0b905dc71f5bc395637710c4f71400500c7b0b", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": " import org.apache.camel.cdi.Uri;\n import org.apache.camel.management.event.CamelContextStartedEvent;\nclass Producer {\n     void sendMessage(@Observes CamelContextStartedEvent event, @Uri(\"sjms:sample.queue\") ProducerTemplate producer) {\n         producer.sendBodyAndHeader(\"Sample Message\", \"Sender\", getClass().getSimpleName());", "fixed": " import org.apache.camel.cdi.Uri;\n import org.apache.camel.management.event.CamelContextStartedEvent;\npublic class Producer {\n     void sendMessage(@Observes CamelContextStartedEvent event, @Uri(\"sjms:sample.queue\") ProducerTemplate producer) {\n         producer.sendBodyAndHeader(\"Sample Message\", \"Sender\", getClass().getSimpleName());", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public int METHOD_1 ( ) { switch ( size ) { case 1 : return 0 ; case INT_1 : return INT_2 ; case INT_3 : return INT_4 ; case INT_2 : return INT_5 ; case INT_6 : return INT_7 ; case INT_8 : return INT_9 ; case INT_10 : return INT_11 ; case INT_4 : return INT_12 ; case INT_13 : return INT_14 ; case INT_15 : return INT_14 ; default : return STRING_1 ; } }\n", "fixed": "public int METHOD_1 ( ) { switch ( size ) { case 1 : return 0 ; case INT_1 : return INT_2 ; case INT_3 : return INT_4 ; case INT_2 : return INT_5 ; case INT_6 : return INT_7 ; case INT_8 : return INT_9 ; case INT_10 : return INT_11 ; case INT_4 : return INT_12 ; case INT_13 : return INT_14 ; case INT_15 : return INT_14 ; default : return 0 ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( view . METHOD_2 ( ) ) != null ) && ( view . METHOD_2 ( ) . equals ( STRING_1 ) ) ) { view . METHOD_3 ( null ) ; return ; } TYPE_2 VAR_2 = ( ( TYPE_2 ) ( view . METHOD_4 ( ) ) ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_5 ( view ) ; } if ( VAR_3 != null ) { VAR_3 . METHOD_1 ( VAR_1 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( view . METHOD_2 ( ) ) != null ) && ( view . METHOD_2 ( ) . equals ( STRING_1 ) ) ) { return ; } TYPE_2 VAR_2 = ( ( TYPE_2 ) ( view . METHOD_4 ( ) ) ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_5 ( view ) ; } if ( VAR_3 != null ) { VAR_3 . METHOD_1 ( VAR_1 ) ; } }\n"}
{"problem": "private static void METHOD_1 ( TYPE_1 a ) { try { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( a ) ; VAR_1 . METHOD_3 ( TYPE_4 . METHOD_4 ( a ) , a . METHOD_5 ( ) ) ; } catch ( TYPE_5 VAR_2 ) { VAR_2 . METHOD_6 ( ) ; } }\n", "fixed": "private static void METHOD_1 ( TYPE_1 a ) { try { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( a ) ; if ( VAR_1 != null ) VAR_1 . METHOD_3 ( TYPE_4 . METHOD_4 ( a ) , a . METHOD_5 ( ) ) ; } catch ( TYPE_5 VAR_2 ) { VAR_2 . METHOD_6 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; METHOD_4 ( ) ; for ( TYPE_2 VAR_1 : TYPE_3 . METHOD_2 ( ) . METHOD_5 ( ) ) { VAR_1 . METHOD_6 ( ) ; TYPE_4 . METHOD_2 ( ) . METHOD_7 ( VAR_1 . getId ( ) , true ) ; } TYPE_5 . METHOD_2 ( ) . METHOD_8 ( ( ( STRING_1 + ( METHOD_9 ( ) . METHOD_10 ( ) ) ) + STRING_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; METHOD_4 ( ) ; for ( TYPE_2 VAR_1 : TYPE_3 . METHOD_2 ( ) . METHOD_5 ( ) ) { VAR_1 . METHOD_6 ( true ) ; } TYPE_5 . METHOD_2 ( ) . METHOD_8 ( ( ( STRING_1 + ( METHOD_9 ( ) . METHOD_10 ( ) ) ) + STRING_2 ) ) ; }\n"}
{"fixCommitSHA1": "3407a44922289dc4ddb3ff87687b8766affeaad9", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t\t}\n \t}\n\tprivate static class SpeedTestConsumer extends AbstractInvokable {\n \t\t@Override\n \t\tpublic void invoke() throws Exception {", "fixed": " \t\t}\n \t}\n\t\n\tpublic static class SpeedTestConsumer extends AbstractInvokable {\n \t\t@Override\n \t\tpublic void invoke() throws Exception {", "sourceBeforeFix": "10", "sourceAfterFix": "9"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDropboxEndpointBuilder\n             extends\n                 AdvancedDropboxEndpointConsumerBuilder, AdvancedDropboxEndpointProducerBuilder {\n         default DropboxEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDropboxEndpointBuilder\n             extends\n                 AdvancedDropboxEndpointConsumerBuilder, AdvancedDropboxEndpointProducerBuilder {\n         default DropboxEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public long METHOD_1 ( int position ) { int VAR_1 = METHOD_2 ( position ) ; if ( ( VAR_1 != ( - 1 ) ) && ( ( VAR_2 . METHOD_3 ( ) ) > VAR_1 ) ) return VAR_2 . METHOD_1 ( VAR_1 ) ; return super . METHOD_1 ( position ) ; }\n", "fixed": "public long METHOD_1 ( int position ) { int VAR_1 = METHOD_2 ( position ) ; if ( ( ( VAR_1 != ( - 1 ) ) && ( ( VAR_2 ) != null ) ) && ( ( VAR_2 . METHOD_3 ( ) ) > VAR_1 ) ) return VAR_2 . METHOD_1 ( VAR_1 ) ; return super . METHOD_1 ( position ) ; }\n"}
{"fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request);\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         BroadcasterFactory.getDefault().lookup(\"/*\").broadcast(\"yoBroadcast\").get();", "fixed": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         BroadcasterFactory.getDefault().lookup(\"/*\").broadcast(\"yoBroadcast\").get();", "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}
{"problem": "public void delete ( final java.lang.Long id ) { VAR_1 . METHOD_1 ( STRING_1 , id ) ; TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( id , VAR_4 ) ; if ( ( VAR_2 . METHOD_3 ( ) ) != null ) VAR_5 . delete ( VAR_2 . METHOD_3 ( ) . getId ( ) ) ; if ( ( VAR_2 != null ) && ( ( TYPE_2 . METHOD_4 ( ) ) || ( METHOD_5 ( VAR_2 ) ) ) ) { VAR_3 . delete ( id ) ; } else { } }\n", "fixed": "public void delete ( final java.lang.Long id ) { VAR_1 . METHOD_1 ( STRING_1 , id ) ; TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( id , VAR_4 ) ; if ( ( VAR_2 != null ) && ( ( TYPE_2 . METHOD_4 ( ) ) || ( METHOD_5 ( VAR_2 ) ) ) ) { if ( ( VAR_2 . METHOD_3 ( ) ) != null ) VAR_5 . delete ( VAR_2 . METHOD_3 ( ) . getId ( ) ) ; VAR_3 . delete ( id ) ; } else { } }\n"}
{"problem": "private int METHOD_1 ( java.lang.String message ) { if ( message . contains ( STRING_1 ) ) { java.lang.String VAR_1 = message . split ( STRING_1 ) [ 0 ] ; try { return java.lang.Integer.parseInt ( VAR_1 ) ; } catch ( TYPE_1 VAR_2 ) { return 0 ; } } else { return 0 ; } }\n", "fixed": "private int METHOD_1 ( java.lang.String message ) { if ( message . contains ( STRING_1 ) ) { java.lang.String VAR_1 = message . split ( STRING_1 ) [ 1 ] . trim ( ) ; try { return java.lang.Integer.parseInt ( VAR_1 ) ; } catch ( TYPE_1 VAR_2 ) { return 0 ; } } else { return 0 ; } }\n"}
{"problem": "public static void METHOD_1 ( android.content.Context context , boolean VAR_1 , boolean VAR_2 ) { if ( VAR_1 ) { TYPE_1 . METHOD_2 ( context , VAR_3 class , true ) ; TYPE_1 . METHOD_3 ( context ) ; } if ( VAR_2 ) { TYPE_1 . METHOD_2 ( context , VAR_4 class , true ) ; } }\n", "fixed": "public static void METHOD_1 ( android.content.Context context , boolean VAR_1 , boolean VAR_2 ) { if ( VAR_1 ) { TYPE_1 . METHOD_2 ( context , VAR_3 class , true ) ; TYPE_1 . METHOD_3 ( context , ( - 1 ) ) ; } if ( VAR_2 ) { TYPE_1 . METHOD_2 ( context , VAR_4 class , true ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( java.lang.String content ) { TYPE_1 VAR_1 = new TYPE_1 ( this ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) { public boolean METHOD_3 ( TYPE_3 view , java.lang.String url ) { METHOD_4 ( url ) ; return true ; } } ) ; METHOD_5 ( VAR_1 ) ; VAR_1 . METHOD_6 ( content ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String content ) { VAR_1 = new TYPE_1 ( this ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) { public boolean METHOD_3 ( TYPE_3 view , java.lang.String url ) { METHOD_4 ( url ) ; return true ; } } ) ; METHOD_5 ( VAR_1 ) ; VAR_1 . METHOD_6 ( content ) ; }\n"}
{"problem": "public int METHOD_1 ( ) { int VAR_1 = VAR_2 . getConfig ( ) . getInt ( STRING_1 , INT_1 ) ; int VAR_3 = VAR_2 . getConfig ( ) . getInt ( STRING_2 , INT_2 ) ; int VAR_4 = VAR_2 . getConfig ( ) . getInt ( STRING_3 , INT_1 ) ; return ( METHOD_2 ( ) ) && ( METHOD_3 ( ) ) ? VAR_3 : VAR_4 + ( TYPE_1 . min ( ( ( ( METHOD_4 ( ) ) - 1 ) * VAR_1 ) , VAR_3 ) ) ; }\n", "fixed": "public int METHOD_1 ( ) { int VAR_1 = VAR_2 . getConfig ( ) . getInt ( STRING_1 , INT_1 ) ; int VAR_3 = VAR_2 . getConfig ( ) . getInt ( STRING_2 , INT_2 ) ; int VAR_4 = VAR_2 . getConfig ( ) . getInt ( STRING_3 , INT_1 ) ; return ( METHOD_2 ( ) ) && ( METHOD_3 ( ) ) ? VAR_3 : TYPE_1 . min ( ( VAR_4 + ( ( ( METHOD_4 ( ) ) - 1 ) * VAR_1 ) ) , VAR_3 ) ; }\n"}
{"fixCommitSHA1": "0fc882f517228b6d793b9ef0da5c3fd77c70a9bd", "projectName": "mybatis.mybatis-3", "bugType": "Wrong Function Name", "problem": "   public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcType jdbcType) throws SQLException {\r\n     if (jdbcType == null) {\r\n        ps.setString(i, parameter.toString());\r\n     } else {\r\n        ps.setObject(i, parameter.toString(), jdbcType.TYPE_CODE);\r\n     }\r\n   }\r", "fixed": "   public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcType jdbcType) throws SQLException {\r\n     if (jdbcType == null) {\r\n        ps.setString(i, parameter.name());\r\n     } else {\r\n        ps.setObject(i, parameter.name(), jdbcType.TYPE_CODE);\r\n     }\r\n   }\r", "sourceBeforeFix": "parameter.toString()", "sourceAfterFix": "parameter.name()"}
{"problem": "private int METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . VAR_3 ) == INT_1 ) { if ( ( VAR_1 . source ) == 0 ) { return ( VAR_4 ) - ( VAR_1 . x ) ; } return VAR_1 . x ; } return VAR_1 . y ; }\n", "fixed": "private int METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . VAR_3 ) == INT_1 ) { if ( ( VAR_1 . source ) == 0 ) { return ( VAR_4 ) - ( VAR_1 . x ) ; } return VAR_1 . y ; } return VAR_1 . y ; }\n"}
{"fixCommitSHA1": "3f78497752cf1a23f56bb0a018b50f3db9d66638", "projectName": "Bukkit.Bukkit", "bugType": "Change Identifier Used", "problem": "         List<RegisteredListener> eventListeners = listeners.get(type);\n         int position = 0;\n        if (listeners != null) {\n             for (RegisteredListener registration : eventListeners) {\n                 if (registration.getPriority().compareTo(priority) < 0) {\n                     break;", "fixed": "         List<RegisteredListener> eventListeners = listeners.get(type);\n         int position = 0;\n        if (eventListeners != null) {\n             for (RegisteredListener registration : eventListeners) {\n                 if (registration.getPriority().compareTo(priority) < 0) {\n                     break;", "sourceBeforeFix": "listeners != null", "sourceAfterFix": "eventListeners != null"}
{"problem": "private boolean METHOD_1 ( final TYPE_1 VAR_1 , boolean VAR_2 , boolean VAR_3 ) { final TYPE_1 VAR_4 = VAR_1 . METHOD_2 ( VAR_5 ) . METHOD_3 ( ) ; final TYPE_1 VAR_6 = VAR_4 . METHOD_3 ( ) ; boolean VAR_7 = METHOD_4 ( VAR_4 , VAR_2 , VAR_3 ) ; if ( VAR_7 && ( VAR_6 != null ) ) { VAR_7 = METHOD_4 ( VAR_6 . METHOD_5 ( ) , VAR_2 , VAR_3 ) ; } return VAR_7 ; }\n", "fixed": "private boolean METHOD_1 ( final TYPE_1 VAR_1 , boolean VAR_2 , boolean VAR_3 ) { final TYPE_1 VAR_4 = VAR_1 . METHOD_2 ( VAR_5 ) . METHOD_3 ( ) ; final TYPE_1 VAR_6 = VAR_4 . METHOD_3 ( ) ; boolean VAR_7 = METHOD_4 ( VAR_4 , VAR_2 , VAR_3 ) ; if ( VAR_7 && ( VAR_6 != null ) ) { VAR_7 = METHOD_4 ( VAR_6 . METHOD_5 ( ) , VAR_2 , VAR_3 ) ; } else if ( VAR_6 == null ) { VAR_7 = false ; } return VAR_7 ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) throws java.io.IOException { TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_2 ( new TYPE_5 ( VAR_1 ) ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; if ( VAR_3 != null ) { TYPE_6 VAR_4 ; METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( true ) ; } VAR_4 . METHOD_6 ( VAR_5 . METHOD_7 ( ) ) ; VAR_5 . METHOD_8 ( VAR_4 ) ; return VAR_4 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) throws java.io.IOException { TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_2 ( new TYPE_5 ( VAR_1 ) ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; if ( VAR_3 != null ) { VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( true ) ; } VAR_4 . METHOD_6 ( VAR_5 . METHOD_7 ( ) ) ; VAR_5 . METHOD_8 ( VAR_4 ) ; return VAR_4 ; }\n"}
{"fixCommitSHA1": "f9374238b2870cad6c090589ec18933983e1c902", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     \n    public class Tag implements Comparable<Tag>\n     {\n         \n         private final String text;", "fixed": "     \n    public static class Tag implements Comparable<Tag>\n     {\n         \n         private final String text;", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"problem": "private java.util.List < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( long i = 0 ; i < ( VAR_2 ) ; i ++ ) { TYPE_1 VAR_3 = new TYPE_1 ( i , VAR_4 , VAR_5 , VAR_6 , new TYPE_3 ( ) { public void execute ( ) { METHOD_2 ( ) ; } } ) ; VAR_1 . add ( VAR_3 ) ; } java.lang.System.out.println ( ( ( VAR_2 ) + STRING_1 ) ) ; return VAR_1 ; }\n", "fixed": "private java.util.List < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( int i = 0 ; i < ( VAR_2 ) ; i ++ ) { TYPE_1 VAR_3 = new TYPE_1 ( i , VAR_4 , VAR_5 , VAR_6 , new TYPE_3 ( ) { public void execute ( ) { METHOD_2 ( ) ; } } ) ; VAR_1 . add ( VAR_3 ) ; } java.lang.System.out.println ( ( ( VAR_2 ) + STRING_1 ) ) ; return VAR_1 ; }\n"}
{"problem": "public int compareTo ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; int result = METHOD_1 ( this , VAR_2 ) ; if ( result == 0 ) { result = METHOD_2 ( this , VAR_2 ) ; } if ( result == 0 ) { result = this . getName ( ) . compareTo ( VAR_2 . getName ( ) ) ; } return result ; }\n", "fixed": "public int compareTo ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; int result = METHOD_1 ( VAR_2 , this ) ; if ( result == 0 ) { result = METHOD_2 ( VAR_2 , this ) ; } if ( result == 0 ) { result = VAR_2 . getName ( ) . compareTo ( this . getName ( ) ) ; } return result ; }\n"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   @Override\n   public void process(Node externs, Node root) {\n    logger.info(\"Expanding Jquery Aliases\");\n     NodeTraversal.traverse(compiler, root, this);", "fixed": "   @Override\n   public void process(Node externs, Node root) {\n    logger.fine(\"Expanding Jquery Aliases\");\n     NodeTraversal.traverse(compiler, root, this);", "sourceBeforeFix": "logger.info(\"Expanding Jquery Aliases\")", "sourceAfterFix": "logger.fine(\"Expanding Jquery Aliases\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"problem": "public boolean METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_2 == null ) { return false ; } if ( ( ( this . VAR_3 ) == 0 ) || ( ( TYPE_2 . METHOD_2 ( VAR_2 , this . METHOD_3 ( VAR_1 ) ) ) == true ) ) { return true ; } return ( ( ( this . VAR_3 ) & ( 1 < < VAR_1 ) ) == 0 ) || ( TYPE_2 . METHOD_2 ( VAR_2 , this . VAR_4 [ VAR_1 ] ) ) ; }\n", "fixed": "public boolean METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_2 == null ) { return false ; } if ( ( ( this . VAR_3 ) == 0 ) || ( ( TYPE_2 . METHOD_2 ( VAR_2 , this . METHOD_3 ( VAR_1 ) ) ) == true ) ) { return true ; } return ( ( ( this . VAR_3 ) & ( 1L < < VAR_1 ) ) == 0 ) || ( TYPE_2 . METHOD_2 ( VAR_2 , this . VAR_4 [ VAR_1 ] ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_3 . METHOD_4 ( VAR_5 ) ; VAR_3 . METHOD_5 ( VAR_6 ) ; VAR_3 . METHOD_6 ( this ) ; VAR_3 . METHOD_7 ( this ) ; VAR_7 = new TYPE_3 < java.lang.String > ( this , VAR_8 . item , METHOD_8 ( VAR_9 , VAR_10 ) ) ; VAR_3 . METHOD_9 ( VAR_7 ) ; METHOD_10 ( ) ; METHOD_11 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_3 . METHOD_5 ( VAR_6 ) ; VAR_3 . METHOD_6 ( this ) ; VAR_7 = new TYPE_3 < java.lang.String > ( this , VAR_8 . item , METHOD_8 ( VAR_9 , VAR_10 ) ) ; VAR_3 . METHOD_9 ( VAR_7 ) ; METHOD_10 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( int x , int y ) { if ( ( java.lang.Math.abs ( ( y - ( VAR_1 . y ) ) ) ) == INT_1 ) { VAR_2 = true ; java.lang.System.out.println ( ( STRING_1 + ( this ) ) ) ; } VAR_1 . x = x ; VAR_1 . y = y ; VAR_3 = true ; }\n", "fixed": "public void METHOD_1 ( int x , int y ) { if ( ( java.lang.Math.abs ( ( y - ( VAR_1 . y ) ) ) ) == INT_1 ) { VAR_2 = true ; } VAR_1 . x = x ; VAR_1 . y = y ; VAR_3 = true ; }\n"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tAssert.assertTrue(paths.iterator().next().startsWith(\n\t\t\t\t(new Path(testBucket.getParent(), \".test-2.inprogress\").toString())));\n \t}\n \t@Test", "fixed": " \t\tAssert.assertTrue(paths.iterator().next().startsWith(\n\t\t\t\t(new Path(testBucket.getParent(), \".test-2.inprogress\").getPath())));\n \t}\n \t@Test", "sourceBeforeFix": "new Path(bucketPath,\"part-\" + i + '-'+ j).toString()", "sourceAfterFix": "new Path(bucketPath,\"part-\" + i + '-'+ j).getPath()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : METHOD_3 ( METHOD_4 ( ) ) ; break ; case VAR_2 : METHOD_5 ( VAR_3 ) ; break ; case VAR_4 : METHOD_5 ( VAR_5 ) ; break ; case VAR_6 : METHOD_5 ( VAR_7 ) ; case VAR_8 : METHOD_5 ( VAR_9 ) ; break ; case VAR_10 : METHOD_6 ( ) ; break ; } return super . METHOD_1 ( item ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : METHOD_3 ( METHOD_4 ( ) ) ; break ; case VAR_2 : METHOD_5 ( VAR_3 ) ; break ; case VAR_4 : METHOD_5 ( VAR_5 ) ; break ; case VAR_6 : METHOD_5 ( VAR_7 ) ; break ; case VAR_8 : METHOD_5 ( VAR_9 ) ; break ; case VAR_10 : METHOD_6 ( ) ; break ; } return super . METHOD_1 ( item ) ; }\n"}
{"fixCommitSHA1": "af39d558ff5ca71fad662cc1fc7bb2927640751c", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tclusterProperties.getNodes());\n \t\t\tif (clusterProperties.getMaxRedirects() != null) {\n\t\t\t\tconfig.setMaxRedirects(config.getMaxRedirects());\n \t\t\t}\n \t\t\treturn config;\n \t\t}", "fixed": " \t\t\t\t\tclusterProperties.getNodes());\n \t\t\tif (clusterProperties.getMaxRedirects() != null) {\n\t\t\t\tconfig.setMaxRedirects(clusterProperties.getMaxRedirects());\n \t\t\t}\n \t\t\treturn config;\n \t\t}", "sourceBeforeFix": "config.getMaxRedirects()", "sourceAfterFix": "clusterProperties.getMaxRedirects()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSqlEndpointBuilder\n             extends\n                 AdvancedSqlEndpointConsumerBuilder, AdvancedSqlEndpointProducerBuilder {\n         default SqlEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSqlEndpointBuilder\n             extends\n                 AdvancedSqlEndpointConsumerBuilder, AdvancedSqlEndpointProducerBuilder {\n         default SqlEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String id , java.lang.String format ) throws TYPE_2 { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( id ) ; if ( ( VAR_1 != null ) && ( VAR_1 . METHOD_3 ( ) . equals ( VAR_3 ) ) ) { return VAR_1 ; } return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String id ) throws TYPE_2 { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( id ) ; if ( ( VAR_1 != null ) && ( VAR_1 . METHOD_3 ( ) . equals ( VAR_3 ) ) ) { return VAR_1 ; } return null ; }\n"}
{"problem": "private java.lang.Object METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_4 = VAR_1 . METHOD_3 ( ) ; TYPE_3 VAR_5 = METHOD_4 ( VAR_3 ) ; TYPE_3 VAR_6 = VAR_1 . METHOD_5 ( ) ; return METHOD_6 ( VAR_1 , VAR_4 , VAR_5 , VAR_6 , VAR_2 ) ; }\n", "fixed": "private java.lang.Object METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_4 = VAR_1 . METHOD_3 ( ) ; TYPE_3 VAR_5 = METHOD_4 ( VAR_3 ) ; TYPE_3 VAR_6 = VAR_1 . METHOD_5 ( ) ; return METHOD_6 ( VAR_1 , VAR_4 , VAR_5 , VAR_6 , VAR_2 ) ; } return null ; }\n"}
{"fixCommitSHA1": "8b9791f8b4b1154d6a053de901a5efd2105409e5", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     private String keySerializerClass;\n     @UriParam(label = \"producer\", defaultValue = \"1\")\n    private Integer requestRequiredAcks = 1;\n     @UriParam(label = \"producer\", defaultValue = \"33554432\")\n     private Integer bufferMemorySize = 33554432;", "fixed": "     private String keySerializerClass;\n     @UriParam(label = \"producer\", defaultValue = \"1\")\n    private String requestRequiredAcks = \"1\";\n     @UriParam(label = \"producer\", defaultValue = \"33554432\")\n     private Integer bufferMemorySize = 33554432;", "sourceBeforeFix": "public Integer getRequestRequiredAcks(){   return requestRequiredAcks; } ", "sourceAfterFix": "public String getRequestRequiredAcks(){   return requestRequiredAcks; } "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_2 = VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_4 = VAR_1 . getInt ( VAR_5 ) ; VAR_6 = VAR_7 . contains ( VAR_8 ) ; VAR_9 = ( VAR_4 ) == ( ( TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) . size ( ) ) - 1 ) ; } }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_2 = VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_4 = VAR_1 . getInt ( VAR_5 ) ; if ( ( VAR_7 ) != null ) VAR_6 = VAR_7 . contains ( VAR_8 ) ; VAR_9 = ( VAR_4 ) == ( ( TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) . size ( ) ) - 1 ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "7f4ede5a12b6a6056d545edcbcba8754e7d05624", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         LdapContext ctx = getWiredContext(ldapServer);\n         SimpleRegistry reg = new SimpleRegistry();\n        reg.put(\"localhost:\" + port, ctx);\n         camel = new DefaultCamelContext(reg);\n         template = camel.createProducerTemplate();\n     }", "fixed": "         LdapContext ctx = getWiredContext(ldapServer);\n         SimpleRegistry reg = new SimpleRegistry();\n        reg.bind(\"localhost:\" + port, ctx);\n         camel = new DefaultCamelContext(reg);\n         template = camel.createProducerTemplate();\n     }", "sourceBeforeFix": "reg.put(\"localhost:\" + port,ctx)", "sourceAfterFix": "reg.bind(\"localhost:\" + port,ctx)"}
{"problem": "private TYPE_1 METHOD_1 ( final int x , final int y , final TYPE_2 VAR_1 , final boolean VAR_2 ) { if ( ( ( ! VAR_2 ) && ( ! ( VAR_3 ) ) ) && ( 0 != ( VAR_4 ) ) ) { return TYPE_3 . METHOD_2 ( VAR_4 , x , y ) ; } final TYPE_1 p = new TYPE_1 ( x , y ) ; if ( VAR_2 ) { p . METHOD_3 ( VAR_1 . METHOD_4 ( null ) ) ; } return p ; }\n", "fixed": "private TYPE_1 METHOD_1 ( final int x , final int y , final TYPE_2 VAR_1 , final boolean VAR_2 ) { if ( ( ( ! VAR_2 ) && ( ! ( VAR_3 ) ) ) && ( 0 != ( VAR_4 ) ) ) { return TYPE_3 . METHOD_2 ( VAR_4 , x , y ) ; } else { final TYPE_1 p = new TYPE_1 ( x , y ) ; if ( VAR_2 ) { p . METHOD_3 ( VAR_1 . METHOD_4 ( null ) ) ; } return p ; } }\n"}
{"problem": "public void METHOD_1 ( android.view.View view ) { android.content.Intent i = new android.content.Intent ( this , VAR_1 class ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; java.lang.String id = VAR_2 . getText ( ) . toString ( ) ; TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; i . METHOD_4 ( \"id\" , id ) ; METHOD_5 ( i ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { android.content.Intent i = new android.content.Intent ( this , VAR_1 class ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( view . METHOD_2 ( VAR_3 ) ) ) ; java.lang.String id = VAR_2 . getText ( ) . toString ( ) ; TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; i . METHOD_4 ( \"id\" , id ) ; METHOD_5 ( i ) ; }\n"}
{"fixCommitSHA1": "d7b19bfc78039804e5460a01e6d5939d2f4ce5f7", "projectName": "Alluxio.alluxio", "bugType": "Change Boolean Literal", "problem": "    */\n   public int free(TachyonURI path) throws IOException {\n     try {\n      mTfs.free(mTfs.open(path));\n       System.out.println(path + \" was successfully freed from memory.\");\n       return 0;\n     } catch (InvalidPathException ioe) {", "fixed": "    */\n   public int free(TachyonURI path) throws IOException {\n     try {\n      mTfs.free(mTfs.open(path), true);\n       System.out.println(path + \" was successfully freed from memory.\");\n       return 0;\n     } catch (InvalidPathException ioe) {", "sourceBeforeFix": "mTfs.setPin(mTfs.open(path),false)", "sourceAfterFix": "mTfs.setPin(mTfs.open(path),true)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"problem": "private boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) ) { java.lang.System.out.println ( STRING_1 ) ; METHOD_3 ( ) ; } boolean VAR_4 = METHOD_4 ( VAR_5 , VAR_2 ) ; if ( VAR_4 ) { java.lang.System.out.println ( STRING_2 ) ; METHOD_3 ( ) ; } return true ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) ) { java.lang.System.out.println ( STRING_1 ) ; return false ; } boolean VAR_4 = METHOD_4 ( VAR_5 , VAR_2 ) ; if ( VAR_4 ) { java.lang.System.out.println ( STRING_2 ) ; return false ; } return true ; }\n"}
{"problem": "private void init ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = getContext ( ) . METHOD_1 ( VAR_1 , VAR_3 ) ; VAR_4 = VAR_2 . getInt ( VAR_5 , VAR_6 ) ; VAR_7 = VAR_2 . getInt ( VAR_8 , VAR_9 ) ; VAR_10 = VAR_2 . METHOD_2 ( VAR_11 , VAR_12 ) ; VAR_13 = VAR_2 . getBoolean ( VAR_14 , VAR_15 ) ; int VAR_16 = 1 ; VAR_2 . METHOD_3 ( ) ; }\n", "fixed": "private void init ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = getContext ( ) . METHOD_1 ( VAR_1 , VAR_3 ) ; VAR_4 = VAR_2 . getInt ( VAR_5 , VAR_6 ) ; VAR_7 = VAR_2 . getInt ( VAR_8 , VAR_9 ) ; VAR_10 = VAR_2 . METHOD_2 ( VAR_11 , VAR_12 ) ; VAR_13 = VAR_2 . getBoolean ( VAR_14 , VAR_15 ) ; VAR_2 . METHOD_3 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { for ( int i = 0 ; i < ( TYPE_1 . size ( ) ) ; i ++ ) { TYPE_2 VAR_1 = TYPE_1 . get ( ( i + 1 ) ) ; if ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) { VAR_1 . setState ( VAR_2 ) ; } if ( ( VAR_1 . METHOD_3 ( ) ) == 0 ) { VAR_1 . setState ( VAR_3 ) ; VAR_4 -= 1 ; } } }\n", "fixed": "public void METHOD_1 ( ) { for ( int i = 1 ; i <= ( TYPE_1 . size ( ) ) ; i ++ ) { TYPE_2 VAR_1 = TYPE_1 . get ( i ) ; if ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) { VAR_1 . setState ( VAR_2 ) ; } if ( ( VAR_1 . METHOD_3 ( ) ) == 0 ) { VAR_1 . setState ( VAR_3 ) ; VAR_4 -= 1 ; } } }\n"}
{"fixCommitSHA1": "1ae4238dc21de898b3649df294e59aca0ee764de", "projectName": "apache.hadoop", "bugType": "Change Boolean Literal", "problem": "   \n   public static final String RM_ACL_ENABLE = \n     RM_PREFIX + \"acl.enable\";\n  public static final boolean DEFAULT_RM_ACL_ENABLE = false;\n   \n   public static final String RM_ADMIN_ACL = ", "fixed": "   \n   public static final String RM_ACL_ENABLE = \n     RM_PREFIX + \"acl.enable\";\n  public static final boolean DEFAULT_RM_ACL_ENABLE = true;\n   \n   public static final String RM_ADMIN_ACL = ", "sourceBeforeFix": "DEFAULT_RM_ACL_ENABLE=false", "sourceAfterFix": "DEFAULT_RM_ACL_ENABLE=true"}
{"problem": "public boolean METHOD_1 ( TYPE_1 event ) { VAR_1 = event . METHOD_2 ( ) ; VAR_2 = event . METHOD_3 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 . METHOD_4 ( VAR_4 ) ) { VAR_5 . METHOD_5 ( ) ; } else { VAR_5 . METHOD_6 ( ) ; } return super . METHOD_1 ( event ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 event ) { VAR_1 = event . METHOD_2 ( ) ; VAR_2 = event . METHOD_3 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 , VAR_2 ) ; VAR_5 . METHOD_6 ( ) ; return super . METHOD_1 ( event ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 == ( VAR_2 ) ) && ( ( VAR_3 ) != 0 ) ) VAR_3 = 1 ; if ( VAR_1 == ( VAR_4 ) ) { if ( ( VAR_5 ) == ( VAR_4 ) ) VAR_5 = VAR_2 ; if ( ( VAR_6 ) == ( VAR_4 ) ) VAR_6 = VAR_2 ; } VAR_7 = VAR_1 ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_7 ) == ( VAR_2 ) ) && ( ( VAR_3 ) != 0 ) ) VAR_3 = 1 ; if ( VAR_1 == ( VAR_4 ) ) { if ( ( VAR_5 ) == ( VAR_4 ) ) VAR_5 = VAR_2 ; if ( ( VAR_6 ) == ( VAR_4 ) ) VAR_6 = VAR_2 ; } VAR_7 = VAR_1 ; }\n"}
{"problem": "public static void METHOD_1 ( android.content.Context VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 , VAR_3 ) . show ( ) ; android.content.Intent VAR_4 = new android.content.Intent ( VAR_5 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; android.content.Intent VAR_6 = new android.content.Intent ( VAR_7 ) ; TYPE_2 . METHOD_5 ( VAR_1 ) . METHOD_4 ( VAR_6 ) ; } VAR_8 = false ; }\n", "fixed": "public static void METHOD_1 ( android.content.Context VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 , VAR_3 ) . show ( ) ; android.content.Intent VAR_4 = new android.content.Intent ( VAR_5 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; } VAR_8 = false ; }\n"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    private static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "e0aff862bb608004841da3487d94aecb45964e17", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = 1000L * FILES_BYTES / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + msg + \" Test : \" + \" Took \"\n         + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());", "fixed": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = 1000.0 * FILES_BYTES / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + msg + \" Test : \" + \" Took \"\n         + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());", "sourceBeforeFix": "FILES_BYTES * 1000L", "sourceAfterFix": "FILES_BYTES * 1000.0"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . getText ( ) . equals ( STRING_1 ) ) { TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ; } else { VAR_2 . METHOD_2 ( ) . METHOD_6 ( ) ; VAR_2 . METHOD_2 ( ) . METHOD_7 ( ) . METHOD_8 ( INT_1 , INT_2 , INT_3 , INT_4 ) ; VAR_3 . METHOD_9 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . getText ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . getText ( ) . equals ( STRING_1 ) ) { TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ; } else { VAR_2 . METHOD_2 ( ) . METHOD_7 ( ) . METHOD_8 ( INT_1 , INT_2 , INT_3 , INT_4 ) ; VAR_3 . METHOD_9 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . getText ( ) ) ; } }\n"}
{"fixCommitSHA1": "cb84b2788aeed6aad2bc4b1acb98290e060861e2", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "fixed": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "sourceBeforeFix": "ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())", "sourceAfterFix": "ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastInstanceEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedHazelcastInstanceEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastInstanceEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedHazelcastInstanceEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 ) { try { this . VAR_3 = VAR_3 ; this . VAR_2 = VAR_2 ; METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ( STRING_1 + VAR_1 ) ) ; VAR_5 = new java.util.ArrayList < TYPE_2 > ( ) ; } catch ( java.lang.Exception VAR_6 ) { VAR_4 . METHOD_3 ( VAR_6 . METHOD_4 ( ) ) ; VAR_6 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { try { this . VAR_2 = VAR_2 ; METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ( STRING_1 + VAR_1 ) ) ; VAR_5 = new java.util.ArrayList < TYPE_2 > ( ) ; } catch ( java.lang.Exception VAR_6 ) { VAR_4 . METHOD_3 ( VAR_6 . METHOD_4 ( ) ) ; VAR_6 . METHOD_5 ( ) ; } }\n"}
{"problem": "private void METHOD_1 ( int VAR_1 ) { TYPE_1 . METHOD_2 ( STRING_1 , ( STRING_2 + VAR_1 ) ) ; java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . add ( ( STRING_3 + ( VAR_1 == 1 ? \"true\" : \"false\" ) ) ) ; try { METHOD_4 ( VAR_2 ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } }\n", "fixed": "private void METHOD_1 ( int VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . add ( ( STRING_3 + ( VAR_1 == 1 ? \"true\" : \"false\" ) ) ) ; try { METHOD_4 ( VAR_2 ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } }\n"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new CreateCommand(keyName, options);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName = \"--help\";", "fixed": "         command = new CreateCommand(keyName, options);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName = \"--help\";", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 . equals ( METHOD_2 ( ) ) ) { METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( METHOD_3 ( ) ) ; } else { METHOD_3 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( METHOD_3 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 . equals ( METHOD_2 ( ) ) ) { METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( METHOD_3 ( ) , false ) ; } else { METHOD_3 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( METHOD_3 ( ) , false ) ; } }\n"}
{"problem": "protected void METHOD_1 ( int VAR_1 , int height , int VAR_2 , int VAR_3 ) { TYPE_1 . METHOD_2 ( getClass ( ) . getName ( ) , STRING_1 ) ; int VAR_4 = ( VAR_1 - ( METHOD_3 ( ) ) ) - ( METHOD_4 ( ) ) ; VAR_5 = VAR_4 / ( ( float ) ( VAR_6 ) ) ; int VAR_7 = ( height - ( METHOD_5 ( ) ) ) - ( METHOD_6 ( ) ) ; VAR_8 = VAR_7 / ( ( float ) ( VAR_6 ) ) ; }\n", "fixed": "protected void METHOD_1 ( int VAR_1 , int height , int VAR_2 , int VAR_3 ) { int VAR_4 = ( VAR_1 - ( METHOD_3 ( ) ) ) - ( METHOD_4 ( ) ) ; VAR_5 = VAR_4 / ( ( float ) ( VAR_6 ) ) ; int VAR_7 = ( height - ( METHOD_5 ( ) ) ) - ( METHOD_6 ( ) ) ; VAR_8 = VAR_7 / ( ( float ) ( VAR_6 ) ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( this . METHOD_2 ( ) ) ) ; if ( VAR_2 . contains ( VAR_3 ) ) { VAR_2 . put ( VAR_3 , STRING_1 ) ; } if ( VAR_2 . contains ( VAR_4 ) ) { VAR_2 . put ( VAR_4 , STRING_1 ) ; } return VAR_2 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( ) ) ) ; if ( VAR_2 . contains ( VAR_3 ) ) { VAR_2 . put ( VAR_3 , STRING_1 ) ; } if ( VAR_2 . contains ( VAR_4 ) ) { VAR_2 . put ( VAR_4 , STRING_1 ) ; } return VAR_2 ; }\n"}
{"problem": "public java.lang.String [ ] METHOD_1 ( TYPE_1 VAR_1 , int id ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 ) { return ( ( TYPE_3 ) ( VAR_2 ) ) . VAR_4 . METHOD_3 ( id , VAR_5 ) ; } else { return new java.lang.String [ ] { VAR_5 . get ( VAR_6 . get ( id ) ) } ; } }\n", "fixed": "public java.lang.String [ ] METHOD_1 ( TYPE_1 VAR_1 , int id ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) return new java.lang.String [ 0 ] ; if ( VAR_3 ) { return ( ( TYPE_3 ) ( VAR_2 ) ) . VAR_4 . METHOD_3 ( id , VAR_5 ) ; } else { return new java.lang.String [ ] { VAR_5 . get ( VAR_6 . get ( id ) ) } ; } }\n"}
{"fixCommitSHA1": "615135aaa2ec18ea6c0b4785749079df4db5fd7a", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Wrong Function Name", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"problem": "private void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 [ VAR_1 ] [ VAR_2 ] = VAR_3 ; VAR_5 [ VAR_1 ] [ VAR_2 ] = 1 ; VAR_6 . METHOD_2 ( VAR_1 , ( VAR_2 + 1 ) , VAR_3 ) ; METHOD_3 ( ) ; }\n", "fixed": "private void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 [ VAR_1 ] [ VAR_2 ] = VAR_3 ; VAR_5 [ VAR_1 ] [ VAR_2 ] = 1 ; VAR_6 . METHOD_2 ( VAR_1 , ( VAR_2 + 1 ) , VAR_3 ) ; METHOD_3 ( VAR_2 ) ; }\n"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"problem": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { try ( java.io.InputStream VAR_3 = TYPE_3 . METHOD_2 ( ( VAR_2 + STRING_1 ) , VAR_1 , STRING_2 ) ) { TYPE_1 VAR_4 = new TYPE_1 ( VAR_3 ) ; return VAR_4 ; } catch ( java.lang.Exception VAR_5 ) { java.util.logging.Logger.getLogger ( VAR_6 class . getName ( ) ) . METHOD_3 ( VAR_7 , ( ( STRING_3 + VAR_2 ) + STRING_1 ) , VAR_5 ) ; return null ; } }\n", "fixed": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { try ( java.io.InputStream VAR_3 = TYPE_3 . METHOD_2 ( ( VAR_2 + STRING_1 ) , VAR_1 , STRING_2 ) ) { TYPE_1 VAR_4 = new TYPE_1 ( VAR_3 ) ; return VAR_4 ; } catch ( java.lang.Exception VAR_5 ) { java.util.logging.Logger.getLogger ( VAR_6 class . getName ( ) ) . METHOD_3 ( VAR_7 , ( ( STRING_3 + VAR_2 ) + STRING_1 ) , VAR_5 ) ; return new TYPE_1 ( ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String fileName , java.lang.String VAR_1 , boolean VAR_2 ) throws java.io.IOException { java.lang.String VAR_3 = ( VAR_2 ) ? VAR_4 : VAR_5 ; java.io.File file = new java.io.File ( VAR_3 , fileName ) . METHOD_2 ( ) ; if ( file . METHOD_3 ( ) ) { if ( VAR_2 || ( VAR_6 . METHOD_4 ( fileName , VAR_1 ) ) ) { return TYPE_2 . METHOD_5 ( file ) ; } else { return TYPE_2 . METHOD_6 ( VAR_1 ) ; } } else { return TYPE_2 . METHOD_7 ( ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String fileName , java.lang.String VAR_1 , boolean VAR_2 ) throws java.io.IOException { java.lang.String VAR_3 = ( VAR_2 ) ? VAR_4 : VAR_5 ; java.io.File file = new java.io.File ( VAR_3 , fileName ) . METHOD_2 ( ) ; if ( file . METHOD_3 ( ) ) { if ( VAR_2 || ( VAR_6 . METHOD_4 ( VAR_1 , fileName ) ) ) { return TYPE_2 . METHOD_5 ( file ) ; } else { return TYPE_2 . METHOD_6 ( VAR_1 ) ; } } else { return TYPE_2 . METHOD_7 ( ) ; } }\n"}
{"fixCommitSHA1": "70f070f7158f18eb1396fedc8ae63b3827627219", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     }\n     protected Operation prepareOperation() {\n        return new CacheCreateConfigOperation(cacheConfig, create, false);\n     }\n     public final int getFactoryId() {", "fixed": "     }\n     protected Operation prepareOperation() {\n        return new CacheCreateConfigOperation(cacheConfig, createAlsoOnOthers, false);\n     }\n     public final int getFactoryId() {", "sourceBeforeFix": "new CacheCreateConfigOperation(cacheConfig,create,false)", "sourceAfterFix": "new CacheCreateConfigOperation(cacheConfig,createAlsoOnOthers,false)"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "      * @return string AST.\n      */\n     private static String printTree(DetailAST ast) {\n        final StringBuilder messageBuilder = new StringBuilder();\n         DetailAST node = ast;\n         while (node != null) {\n             messageBuilder.append(getIndentation(node))", "fixed": "      * @return string AST.\n      */\n     private static String printTree(DetailAST ast) {\n        final StringBuilder messageBuilder = new StringBuilder(1024);\n         DetailAST node = ast;\n         while (node != null) {\n             messageBuilder.append(getIndentation(node))", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}
{"fixCommitSHA1": "bafb1f877934f826d5f74f9f33e824dd1aa30432", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         return getInputFactory().createXMLStreamReader(in);\n     }\n    @Converter\n     public XMLEventReader createXMLEventReader(InputStream in) throws XMLStreamException {\n         return getInputFactory().createXMLEventReader(in);\n     }", "fixed": "         return getInputFactory().createXMLStreamReader(in);\n     }\n    @Deprecated\n     public XMLEventReader createXMLEventReader(InputStream in) throws XMLStreamException {\n         return getInputFactory().createXMLEventReader(in);\n     }", "sourceBeforeFix": "@Converter", "sourceAfterFix": "@Deprecated"}
{"problem": "private void METHOD_1 ( ) { VAR_1 = new TYPE_1 [ VAR_2 ] ; for ( int i = 0 ; i < ( VAR_2 ) ; i ++ ) { VAR_1 [ i ] = new TYPE_1 ( TYPE_2 . METHOD_2 ( ( ( VAR_3 ) + ( ( VAR_4 ) * i ) ) ) , TYPE_2 . METHOD_2 ( ( ( VAR_3 ) + ( ( ( VAR_4 ) - 1 ) * ( i + 1 ) ) ) ) ) ; } }\n", "fixed": "private void METHOD_1 ( ) { VAR_1 = new TYPE_1 [ VAR_2 ] ; for ( int i = 0 ; i < ( VAR_2 ) ; i ++ ) { VAR_1 [ i ] = new TYPE_1 ( TYPE_2 . METHOD_2 ( ( ( VAR_3 ) + ( ( VAR_4 ) * i ) ) ) , TYPE_2 . METHOD_2 ( ( ( VAR_3 ) + ( ( ( VAR_4 ) * ( i + 1 ) ) - 1 ) ) ) ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 context ) { TYPE_3 < TYPE_1 > c = TYPE_3 . METHOD_2 ( ) ; c . add ( context ) ; if ( ( this . context ) != null ) { c . METHOD_3 ( this . context ) ; } return new TYPE_1 ( VAR_2 , VAR_1 , c , VAR_3 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 context ) { TYPE_3 < TYPE_1 > c = new TYPE_3 < TYPE_1 > ( ) ; c . add ( context ) ; if ( ( this . context ) != null ) { c . METHOD_3 ( this . context ) ; } return new TYPE_1 ( VAR_2 , VAR_1 , c , VAR_3 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == 0 ) { java.util.Calendar VAR_1 = java.util.Calendar.getInstance ( ) ; java.util.Random VAR_2 = new java.util.Random ( ) ; for ( int i = 1 ; i < INT_1 ; i ++ ) { VAR_1 . set ( INT_2 , INT_3 , i ) ; VAR_3 = new TYPE_1 ( null , 1 , TYPE_2 . METHOD_3 ( new java.util.Date ( VAR_1 . METHOD_4 ( ) ) ) , VAR_2 . METHOD_5 ( INT_4 ) ) ; VAR_4 . METHOD_6 ( VAR_3 ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == 0 ) { java.util.Calendar VAR_1 = java.util.Calendar.getInstance ( ) ; java.util.Random VAR_2 = new java.util.Random ( ) ; for ( int i = 1 ; i < INT_1 ; i ++ ) { VAR_1 . set ( INT_2 , INT_3 , i ) ; VAR_3 = new TYPE_1 ( null , 1 , new java.util.Date ( ) , VAR_2 . METHOD_5 ( INT_4 ) ) ; VAR_4 . METHOD_6 ( VAR_3 ) ; } } }\n"}
{"fixCommitSHA1": "ce53a6874b919d79f06e563b6edd0c7e8302e33f", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": " public class PropertyKey {\n   \n  private static Map<String, PropertyKey> DEFAULT_KEYS_MAP = new HashMap<>();\n   \n  private static Map<PropertyKey, Object> DEFAULT_VALUES = new HashMap<>();\n   public static final PropertyKey CONF_DIR =\n       create(Name.CONF_DIR, String.format(\"${%s}/conf\", Name.HOME));", "fixed": " public class PropertyKey {\n   \n  private static final Map<String, PropertyKey> DEFAULT_KEYS_MAP = new HashMap<>();\n   \n  private static final Map<PropertyKey, Object> DEFAULT_VALUES = new HashMap<>();\n   public static final PropertyKey CONF_DIR =\n       create(Name.CONF_DIR, String.format(\"${%s}/conf\", Name.HOME));", "sourceBeforeFix": "10", "sourceAfterFix": "26"}
{"problem": "public void METHOD_1 ( ) { java.lang.String [ ] VAR_1 = value . split ( VAR_2 ) ; VAR_3 = new java.util.ArrayList < java.lang.Integer > ( ) ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) VAR_3 . add ( java.lang.Integer.parseInt ( VAR_1 [ i ] ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { java.lang.String [ ] VAR_1 = value . split ( VAR_2 ) ; VAR_3 = new java.util.ArrayList < java.lang.Integer > ( ) ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) if ( ! ( VAR_3 . contains ( java.lang.Integer.parseInt ( VAR_1 [ i ] ) ) ) ) VAR_3 . add ( java.lang.Integer.parseInt ( VAR_1 [ i ] ) ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) == 0 ) { METHOD_2 ( ) ; } android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_3 ( STRING_1 , VAR_1 ) ; METHOD_4 ( intent ) ; }\n", "fixed": "private void METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) == 0 ) { METHOD_2 ( ) ; } else { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_3 ( STRING_1 , VAR_1 ) ; METHOD_4 ( intent ) ; } }\n"}
{"problem": "public static void METHOD_1 ( TYPE_1 < TYPE_2 > x ) { while ( ( x . size ( ) ) > 0 ) { java.lang.System.out.println ( x . remove ( 0 ) ) ; if ( ( x . size ( ) ) > 0 ) { TYPE_3 . METHOD_1 ( x ) ; } else { } } }\n", "fixed": "public static void METHOD_1 ( java.util.List < TYPE_2 > x ) { while ( ( x . size ( ) ) > 0 ) { java.lang.System.out.println ( x . remove ( 0 ) ) ; if ( ( x . size ( ) ) > 0 ) { TYPE_3 . METHOD_1 ( x ) ; } else { } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( ) throws java.io.IOException { byte VAR_1 = METHOD_2 ( ) ; byte VAR_2 = METHOD_2 ( ) ; int size = METHOD_3 ( ) ; if ( size > ( VAR_3 ) ) throw new TYPE_2 ( STRING_1 ) ; return new TYPE_1 ( VAR_1 , VAR_2 , size ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) throws java.io.IOException { byte VAR_1 = METHOD_2 ( ) ; byte VAR_2 = METHOD_2 ( ) ; int size = METHOD_3 ( ) ; if ( ( ( VAR_3 ) != ( - 1 ) ) && ( size > ( VAR_3 ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } return new TYPE_1 ( VAR_1 , VAR_2 , size ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public boolean METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; if ( ( ( VAR_2 != null ) && ( VAR_4 . equals ( VAR_2 . METHOD_3 ( ) ) ) ) && ( VAR_5 . equals ( VAR_2 . METHOD_4 ( ) ) ) ) { VAR_6 [ 0 ] = VAR_1 ; return false ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 attribute = VAR_1 . METHOD_2 ( VAR_4 ) ; if ( ( attribute != null ) && ( VAR_5 . equals ( attribute . METHOD_4 ( ) ) ) ) { VAR_6 [ 0 ] = VAR_1 ; return false ; } return true ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . get ( STRING_1 ) . METHOD_2 ( ) ; if ( ( ( VAR_3 ) == null ) && ( VAR_1 != null ) ) { VAR_3 = TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . get ( STRING_1 ) . METHOD_4 ( ) ; if ( ( ( VAR_3 ) == null ) && ( VAR_1 != null ) ) { VAR_3 = TYPE_1 . METHOD_3 ( VAR_1 ) ; } return VAR_3 ; }\n"}
{"fixCommitSHA1": "5705c43fc67cbb1ebf19515e6676e4f68f299406", "projectName": "hazelcast.hazelcast", "bugType": "Change Boolean Literal", "problem": "         AbstractCacheService service = getService();\n         response = service.createCacheConfigIfAbsent(config);\n        if (createAlsoOnOthers && response == null) {\n             NodeEngine nodeEngine = getNodeEngine();\n             Collection<MemberImpl> members = nodeEngine.getClusterService().getMemberList();\n             int remoteNodeCount = members.size() - 1;", "fixed": "         AbstractCacheService service = getService();\n         response = service.createCacheConfigIfAbsent(config);\n        if (createAlsoOnOthers) {\n             NodeEngine nodeEngine = getNodeEngine();\n             Collection<MemberImpl> members = nodeEngine.getClusterService().getMemberList();\n             int remoteNodeCount = members.size() - 1;", "sourceBeforeFix": "new CacheCreateConfigOperation(config,true)", "sourceAfterFix": "new CacheCreateConfigOperation(config,false)"}
{"problem": "public void METHOD_1 ( java.lang.Integer [ ] array ) { if ( METHOD_2 ( array ) ) { for ( int i = VAR_1 ; i < ( VAR_2 ) ; i ++ ) { array [ i ] = 1 ; } } else { java.lang.System.out.println ( STRING_1 ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.Integer [ ] array ) { if ( METHOD_2 ( array ) ) { for ( int i = VAR_1 ; i < ( VAR_2 ) ; i ++ ) { array [ i ] = 0 ; } } else { java.lang.System.out.println ( STRING_1 ) ; } }\n"}
{"problem": "public java.util.List < java.lang.String > METHOD_1 ( int VAR_1 , int VAR_2 ) { java.util.List < java.lang.String > c = null ; if ( ( VAR_3 ) != null ) { c = VAR_3 . get ( ) ; } if ( c != null ) { return c . METHOD_2 ( VAR_1 , VAR_2 ) ; } return METHOD_3 ( VAR_1 , VAR_2 ) ; }\n", "fixed": "public java.util.List < java.lang.String > METHOD_1 ( int VAR_1 , int VAR_2 ) { java.util.List < java.lang.String > c = null ; if ( ( VAR_3 ) != null ) { c = VAR_3 . get ( ) ; } if ( c != null ) { return c . METHOD_2 ( ( VAR_1 - 1 ) , VAR_2 ) ; } return METHOD_3 ( VAR_1 , VAR_2 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface LinkedInEndpointBuilder\n             extends\n                 LinkedInEndpointConsumerBuilder, LinkedInEndpointProducerBuilder {\n         default AdvancedLinkedInEndpointBuilder advanced() {", "fixed": "     \n    public interface LinkedInEndpointBuilder\n             extends\n                 LinkedInEndpointConsumerBuilder, LinkedInEndpointProducerBuilder {\n         default AdvancedLinkedInEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "protected void METHOD_1 ( ) { if ( this . METHOD_2 ( ) ) { this . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ( ( ( ( ( ( VAR_1 ) | ( VAR_2 ) ) | ( VAR_3 ) ) | ( VAR_4 ) ) | ( VAR_5 ) ) | ( VAR_6 ) ) ) ; } }\n", "fixed": "protected void METHOD_1 ( ) { if ( this . METHOD_2 ( ) ) { this . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ( ( ( ( ( ( VAR_1 ) | ( VAR_3 ) ) | ( VAR_2 ) ) | ( VAR_5 ) ) | ( VAR_4 ) ) | ( VAR_6 ) ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( final android.content.Context context ) { super . METHOD_1 ( context ) ; try { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( VAR_3 ) . METHOD_4 ( context ) ) . METHOD_5 ( VAR_4 ) . method ( VAR_5 , VAR_6 ) ; } catch ( final TYPE_2 VAR_7 ) { throw new TYPE_3 ( VAR_7 ) ; } catch ( final TYPE_4 VAR_7 ) { throw new TYPE_3 ( VAR_7 ) ; } catch ( final TYPE_5 VAR_7 ) { throw new TYPE_3 ( VAR_7 ) ; } }\n", "fixed": "public void METHOD_1 ( final android.content.Context context ) { super . METHOD_1 ( context ) ; try { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( VAR_3 ) . METHOD_4 ( context ) ) . METHOD_5 ( VAR_4 ) . method ( VAR_5 , VAR_6 ) ; } catch ( final TYPE_3 VAR_7 ) { throw VAR_7 ; } catch ( final java.lang.Throwable VAR_7 ) { throw new TYPE_3 ( VAR_7 ) ; } }\n"}
{"problem": "public void METHOD_1 ( boolean VAR_1 , java.lang.String type ) { if ( ( type == null ) || ( type . equals ( VAR_2 ) ) ) { if ( VAR_1 ) { if ( VAR_3 ) { TYPE_1 . METHOD_2 ( VAR_4 , STRING_1 ) ; } } else { if ( VAR_3 ) { TYPE_1 . METHOD_3 ( VAR_4 , STRING_2 ) ; } VAR_5 . METHOD_4 ( STRING_3 , STRING_4 ) ; } } else if ( type . equals ( VAR_6 ) ) { } else { } }\n", "fixed": "public void METHOD_1 ( boolean VAR_1 , java.lang.String type ) { if ( ( type == null ) || ( type . equals ( VAR_2 ) ) ) { if ( VAR_1 ) { if ( VAR_3 ) { TYPE_1 . METHOD_3 ( VAR_4 , STRING_1 ) ; } } else { if ( VAR_3 ) { TYPE_1 . METHOD_3 ( VAR_4 , STRING_2 ) ; } VAR_5 . METHOD_4 ( STRING_3 , STRING_4 ) ; } } else if ( type . equals ( VAR_6 ) ) { } else { } }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } if ( VAR_2 ) { super . METHOD_1 ( ) ; } else { VAR_3 = new TYPE_2 ( ) { public void METHOD_2 ( ) { VAR_2 = false ; } } ; VAR_2 = true ; VAR_1 . METHOD_3 ( VAR_3 , INT_1 ) ; TYPE_3 . METHOD_4 ( METHOD_5 ( VAR_4 ) , getString ( VAR_5 ) , VAR_6 ) . show ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( VAR_2 ) { super . METHOD_1 ( ) ; } else { VAR_2 = true ; VAR_1 . METHOD_3 ( VAR_3 , INT_1 ) ; TYPE_3 . METHOD_4 ( METHOD_5 ( VAR_4 ) , getString ( VAR_5 ) , VAR_6 ) . show ( ) ; } }\n"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Before\n     @Override\n     public void setUp() throws Exception {\n        nagios = new NagiosNscaStub(25667, \"password\");\n         nagios.start();\n         super.setUp();", "fixed": "     @Before\n     @Override\n     public void setUp() throws Exception {\n        nagios = new NagiosNscaStub(25669, \"password\");\n         nagios.start();\n         super.setUp();", "sourceBeforeFix": "new NagiosNscaStub(25667,\"password\")", "sourceAfterFix": "new NagiosNscaStub(25669,\"password\")"}
{"problem": "public void METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) { if ( ( VAR_5 ) == null ) VAR_5 = new TYPE_1 ( name , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; else { TYPE_1 temp = VAR_5 ; VAR_5 = new TYPE_1 ( name , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; VAR_5 . METHOD_2 ( temp ) ; METHOD_3 ( ) ; } isEmpty = false ; }\n", "fixed": "public void METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) { if ( ( VAR_5 ) == null ) VAR_5 = new TYPE_1 ( name , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; else { TYPE_1 temp = VAR_5 ; VAR_5 = new TYPE_1 ( name , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; VAR_5 . METHOD_2 ( temp ) ; } METHOD_3 ( ) ; isEmpty = false ; }\n"}
{"problem": "public java.util.List < ? extends TYPE_1 > METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { super . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_2 = VAR_1 . get ( VAR_3 ) ; VAR_1 . remove ( VAR_3 ) ; VAR_1 . remove ( VAR_4 ) ; VAR_1 . put ( VAR_4 , TYPE_2 . toString ( ) ) ; java.util.List < TYPE_3 > VAR_5 = ( ( java.util.List < TYPE_3 > ) ( super . METHOD_3 ( VAR_1 ) ) ) ; return VAR_5 ; }\n", "fixed": "public java.util.List < ? extends TYPE_1 > METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { super . METHOD_2 ( VAR_1 ) ; VAR_1 . remove ( VAR_4 ) ; VAR_1 . put ( VAR_4 , TYPE_2 . toString ( ) ) ; java.util.List < TYPE_3 > VAR_5 = ( ( java.util.List < TYPE_3 > ) ( super . METHOD_3 ( VAR_1 ) ) ) ; return VAR_5 ; }\n"}
{"fixCommitSHA1": "c26f75c7940a77e85f38406258c453a08ff75376", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         });\n         MockEndpoint result = MockEndpoint.resolve(ctx, \"mock:result\");\n         clientMock.setScheduler(ctx.getExecutorServiceManager().newScheduledThreadPool(clientMock, \"ClientMock Scheduler\", 1));\n        registry.put(\"amazonSQSClient\", clientMock);\n         result.expectedMessageCount(0);", "fixed": "         });\n         MockEndpoint result = MockEndpoint.resolve(ctx, \"mock:result\");\n         clientMock.setScheduler(ctx.getExecutorServiceManager().newScheduledThreadPool(clientMock, \"ClientMock Scheduler\", 1));\n        registry.bind(\"amazonSQSClient\", clientMock);\n         result.expectedMessageCount(0);", "sourceBeforeFix": "registry.put(\"amazonSQSClient\",clientMock)", "sourceAfterFix": "registry.bind(\"amazonSQSClient\",clientMock)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGridFsEndpointBuilder\n             extends\n                 AdvancedGridFsEndpointConsumerBuilder, AdvancedGridFsEndpointProducerBuilder {\n         default GridFsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGridFsEndpointBuilder\n             extends\n                 AdvancedGridFsEndpointConsumerBuilder, AdvancedGridFsEndpointProducerBuilder {\n         default GridFsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public char [ ] METHOD_1 ( int n ) { char [ ] result = new char [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ( this . position ) ++ ; if ( ( this . position ) > ( this . length ) ) { result [ i ] = NULL ; } else { result [ i ] = this . text [ position ] ; } } return result ; }\n", "fixed": "public char [ ] METHOD_1 ( int n ) { char [ ] result = new char [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ( this . position ) ++ ; if ( ( this . position ) >= ( this . length ) ) { result [ i ] = NULL ; } else { result [ i ] = this . text [ position ] ; } } return result ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ( VAR_1 == ( VAR_3 ) ? VAR_4 : VAR_5 ) ) ; if ( ( VAR_1 == ( VAR_6 ) ) && ( VAR_7 ) ) { VAR_8 . METHOD_3 ( VAR_9 ) ; } VAR_10 . METHOD_4 ( METHOD_5 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ( VAR_1 == ( VAR_3 ) ? VAR_4 : VAR_5 ) ) ; if ( ( VAR_1 == ( VAR_6 ) ) && ( VAR_7 ) ) { VAR_8 . METHOD_3 ( VAR_9 ) ; VAR_7 = false ; } VAR_10 . METHOD_4 ( METHOD_5 ( ) ) ; }\n"}
{"problem": "private int METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , int VAR_2 ) { int count = 0 ; TYPE_1 VAR_3 ; for ( int i = 0 , VAR_4 = VAR_1 . size ( ) ; i < VAR_4 ; i ++ ) { VAR_3 = VAR_1 . get ( i ) ; if ( ( ( VAR_3 != null ) && ( VAR_3 . METHOD_2 ( ) ) ) && ( ( VAR_3 . getId ( ) ) == VAR_2 ) ) { count ++ ; } } return count ; }\n", "fixed": "private static int METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , int VAR_2 ) { int count = 0 ; TYPE_1 VAR_3 ; for ( int i = 0 , VAR_4 = VAR_1 . size ( ) ; i < VAR_4 ; i ++ ) { VAR_3 = VAR_1 . get ( i ) ; if ( ( ( VAR_3 != null ) && ( VAR_3 . METHOD_2 ( ) ) ) && ( ( VAR_3 . getId ( ) ) == VAR_2 ) ) { count ++ ; } } return count ; }\n"}
{"problem": "protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { if ( ( VAR_1 == ( VAR_3 ) ) && ( VAR_2 == ( VAR_4 ) ) ) { TYPE_1 VAR_5 = data . METHOD_2 ( ) ; if ( VAR_5 != null ) { TYPE_2 VAR_6 = ( ( TYPE_2 ) ( VAR_5 . get ( STRING_1 ) ) ) ; VAR_7 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_8 ) ) ) ; VAR_7 . METHOD_4 ( VAR_6 ) ; } } }\n", "fixed": "protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { if ( ( VAR_1 == ( VAR_3 ) ) && ( VAR_2 == ( VAR_4 ) ) ) { if ( data != null ) { TYPE_1 VAR_5 = data . METHOD_2 ( ) ; if ( VAR_5 != null ) { TYPE_2 VAR_6 = ( ( TYPE_2 ) ( VAR_5 . get ( STRING_1 ) ) ) ; VAR_7 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_8 ) ) ) ; VAR_7 . METHOD_4 ( VAR_6 ) ; } } } }\n"}
{"problem": "protected void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_3 = new TYPE_2 ( ) ; VAR_3 . set ( INT_1 , INT_1 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_4 = new TYPE_3 ( ) ; VAR_4 . METHOD_4 ( TYPE_2 . METHOD_5 ( 0 , 0 ) ) ; VAR_5 = new TYPE_3 ( ) ; VAR_5 . METHOD_4 ( TYPE_2 . METHOD_5 ( 0 , ( - FLOAT_1 ) ) ) ; VAR_6 . METHOD_6 ( 1.0F ) ; }\n", "fixed": "protected void METHOD_1 ( ) { VAR_3 = new TYPE_2 ( ) ; VAR_3 . set ( INT_1 , INT_1 ) ; VAR_6 . METHOD_3 ( VAR_3 ) ; VAR_4 = new TYPE_3 ( ) ; VAR_4 . METHOD_4 ( TYPE_2 . METHOD_5 ( 0 , 0 ) ) ; VAR_5 = new TYPE_3 ( ) ; VAR_5 . METHOD_4 ( TYPE_2 . METHOD_5 ( 0 , ( - FLOAT_1 ) ) ) ; VAR_6 . METHOD_6 ( 1.0F ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_1 . execute ( STRING_1 ) ; VAR_1 . execute ( STRING_2 ) ; VAR_1 . execute ( ( STRING_3 + STRING_4 ) ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_3 ( STRING_5 ) ; VAR_3 . METHOD_4 ( ) ; TYPE_3 . assertTrue ( VAR_3 . getString ( 1 ) . equals ( ( STRING_6 + ( STRING_7 + STRING_8 ) ) ) ) ; VAR_3 . METHOD_5 ( ) ; VAR_1 . METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_1 . execute ( STRING_1 ) ; VAR_1 . execute ( STRING_2 ) ; VAR_1 . execute ( ( STRING_3 + STRING_4 ) ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_3 ( STRING_5 ) ; VAR_3 . METHOD_4 ( ) ; assertTrue ( VAR_3 . getString ( 1 ) . equals ( ( STRING_6 + ( STRING_7 + STRING_8 ) ) ) ) ; VAR_3 . METHOD_5 ( ) ; VAR_1 . METHOD_5 ( ) ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String index ) { if ( ( ( ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) || ( index == null ) ) || ( index . isEmpty ( ) ) ) return false ; this . METHOD_2 ( VAR_1 , index ) ; this . VAR_2 . add ( new TYPE_1 ( index , index , VAR_1 ) ) ; this . VAR_2 . METHOD_3 ( ) ; return true ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String index ) { if ( ( ( ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) || ( index == null ) ) || ( index . isEmpty ( ) ) ) return false ; this . VAR_2 . add ( new TYPE_1 ( index , index , VAR_1 ) ) ; this . VAR_2 . METHOD_3 ( ) ; return true ; }\n"}
{"problem": "public static void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; java.util.List < TYPE_3 > VAR_2 ; try { VAR_2 = TYPE_4 . METHOD_4 ( VAR_3 class ) ; VAR_2 . METHOD_5 ( TYPE_5 : : METHOD_1 ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_6 ( ) ; } }\n", "fixed": "public static void METHOD_1 ( ) { java.util.List < TYPE_3 > VAR_2 ; try { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; VAR_2 = TYPE_4 . METHOD_4 ( VAR_3 class ) ; VAR_2 . METHOD_5 ( TYPE_5 : : METHOD_1 ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_6 ( ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "25c95d8dd9ec2d4e712aaeccedec306be41a3c8a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       try {\n         regionLocation = reverseDNS(regionAddress);\n       } catch (NamingException e) {\n        LOG.error(\"Cannot resolve the host name for \" + regionAddress + \" because of \" + e);\n         regionLocation = location.getHostname();\n       }", "fixed": "       try {\n         regionLocation = reverseDNS(regionAddress);\n       } catch (NamingException e) {\n        LOG.warn(\"Cannot resolve the host name for \" + regionAddress + \" because of \" + e);\n         regionLocation = location.getHostname();\n       }", "sourceBeforeFix": "LOG.error(\"Cannot resolve the host name for \" + regionAddress + \" because of \"+ e)", "sourceAfterFix": "LOG.warn(\"Cannot resolve the host name for \" + regionAddress + \" because of \"+ e)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; try { VAR_2 . METHOD_3 ( ) ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( true ) ; VAR_2 . start ( ) ; VAR_4 . METHOD_6 ( ( ( int ) ( VAR_2 . METHOD_7 ( ) ) ) ) ; VAR_5 . METHOD_8 ( VAR_6 , INT_1 ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; try { VAR_2 . METHOD_3 ( ) ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_4 ( ) ; if ( true ) { } } VAR_2 . METHOD_5 ( true ) ; VAR_2 . start ( ) ; VAR_4 . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) ; VAR_5 . METHOD_8 ( VAR_6 , INT_1 ) ; }\n"}
{"problem": "public TYPE_1 < java.lang.String , java.lang.Long > METHOD_1 ( TYPE_1 < java.lang.String , java.lang.Long > value ) throws java.lang.Exception { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 , VAR_3 ) ; long time = TYPE_3 . METHOD_2 ( ) ; java.lang.System.out.println ( ( ( STRING_1 + ( ( TYPE_3 . METHOD_2 ( ) ) - time ) ) + STRING_2 ) ) ; VAR_1 . METHOD_3 ( VAR_4 , TYPE_3 . METHOD_2 ( ) ) ; return value ; }\n", "fixed": "public TYPE_1 < java.lang.String , java.lang.Long > METHOD_1 ( TYPE_1 < java.lang.String , java.lang.Long > value ) throws java.lang.Exception { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 , VAR_3 ) ; long time = TYPE_3 . METHOD_2 ( ) ; java.lang.System.out.println ( ( ( STRING_1 + ( time - ( VAR_4 ) ) ) + STRING_2 ) ) ; VAR_1 . METHOD_3 ( VAR_4 , time ) ; return value ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { TYPE_3 VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; TYPE_3 VAR_4 = TYPE_3 . METHOD_2 ( VAR_2 ) ; TYPE_3 VAR_5 = VAR_3 . METHOD_5 ( VAR_4 ) ; return VAR_1 . METHOD_2 ( VAR_5 ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { TYPE_3 VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; TYPE_3 VAR_4 = TYPE_3 . METHOD_2 ( VAR_2 ) ; TYPE_3 VAR_5 = VAR_3 . METHOD_5 ( VAR_4 ) ; return VAR_1 . METHOD_2 ( VAR_5 . METHOD_4 ( ) ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"problem": "public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( ( ( ( ( ( ( ( TYPE_2 . METHOD_2 ( ) ) + STRING_1 ) + ( TYPE_2 . METHOD_2 ( ) ) ) + ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( ) ) ) + ( TYPE_3 . METHOD_3 ( VAR_3 ) ) ) + STRING_3 ) + ( TYPE_2 . METHOD_2 ( ) ) ) + ( TYPE_3 . METHOD_3 ( VAR_4 ) ) ; }\n", "fixed": "public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( ( ( ( ( ( ( ( TYPE_2 . METHOD_2 ( ) ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( ) ) ) + ( TYPE_3 . METHOD_3 ( VAR_3 ) ) ) + STRING_3 ) + ( TYPE_2 . METHOD_2 ( ) ) ) + ( TYPE_3 . METHOD_3 ( VAR_4 ) ) ) + STRING_1 ) + ( TYPE_2 . METHOD_2 ( ) ) ) + ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; }\n"}
{"problem": "public boolean METHOD_1 ( ) { java.lang.String VAR_1 = null ; final java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , STRING_1 ) ; for ( final TYPE_1 VAR_5 : VAR_2 ) VAR_1 = VAR_5 . getValue ( ) ; if ( VAR_1 . METHOD_3 ( STRING_2 ) ) return true ; else return false ; }\n", "fixed": "public boolean METHOD_1 ( ) { java.lang.String VAR_1 = null ; final java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , STRING_1 ) ; if ( VAR_2 != null ) for ( final TYPE_1 VAR_5 : VAR_2 ) VAR_1 = VAR_5 . getValue ( ) ; if ( ( VAR_1 != null ) && ( VAR_1 . METHOD_3 ( STRING_2 ) ) ) return true ; else return false ; }\n"}
{"fixCommitSHA1": "d7b19bfc78039804e5460a01e6d5939d2f4ce5f7", "projectName": "Alluxio.alluxio", "bugType": "Change Boolean Literal", "problem": "    */\n   public int rmr(TachyonURI path) {\n     try {\n      mTfs.delete(mTfs.open(path));\n       System.out.println(path + \" has been removed\");\n       return 0;\n     } catch (IOException ioe) {", "fixed": "    */\n   public int rmr(TachyonURI path) {\n     try {\n      mTfs.delete(mTfs.open(path), true);\n       System.out.println(path + \" has been removed\");\n       return 0;\n     } catch (IOException ioe) {", "sourceBeforeFix": "mTfs.setPin(mTfs.open(path),false)", "sourceAfterFix": "mTfs.setPin(mTfs.open(path),true)"}
{"problem": "public java.util.List < java.util.List < java.lang.Integer > > METHOD_1 ( int [ ] VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; java.util.List < java.lang.Integer > list = new java.util.ArrayList < > ( ) ; for ( int num : VAR_1 ) { list . add ( num ) ; } java.util.Set < java.util.List < java.lang.Integer > > result = new java.util.HashSet < > ( ) ; TYPE_2 . METHOD_1 ( list , result ) ; return new java.util.ArrayList < > ( result ) ; }\n", "fixed": "public java.util.List < java.util.List < java.lang.Integer > > METHOD_1 ( int [ ] VAR_1 ) { java.util.List < java.lang.Integer > list = new java.util.ArrayList < > ( ) ; for ( int num : VAR_1 ) { list . add ( num ) ; } java.util.Set < java.util.List < java.lang.Integer > > result = new java.util.HashSet < > ( ) ; TYPE_2 . METHOD_1 ( list , 0 , new java.util.ArrayList < > ( ) , result ) ; return new java.util.ArrayList < > ( result ) ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 ) ; boolean result = true ; TYPE_2 VAR_2 = VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ; if ( VAR_2 != null ) { result = false ; } TYPE_1 . METHOD_2 ( STRING_2 , result ) ; return result ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 ) ; boolean result = true ; TYPE_2 VAR_2 = VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ; if ( VAR_2 == null ) { result = false ; } TYPE_1 . METHOD_2 ( STRING_2 , result ) ; return result ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; VAR_3 . add ( VAR_1 ) ; VAR_3 . add ( VAR_2 ) ; TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; VAR_5 . METHOD_4 ( VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; VAR_3 . add ( VAR_1 ) ; VAR_3 . add ( VAR_2 ) ; TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_3 ( VAR_3 ) ; VAR_5 . METHOD_4 ( VAR_4 ) ; } }\n"}
{"fixCommitSHA1": "d3df587543605323d2a3432e896ea49a81bc8306", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tif (currentLocalTransform != renderable.localTransform)\n \t\t\tset(u_localTrans, (currentLocalTransform = renderable.localTransform) == null ? idtMatrix : renderable.localTransform);\n \t\tif (currentModelTransform != renderable.modelTransform)\n\t\t\tset(u_modelTrans, (currentWorldTransform = renderable.modelTransform) == null ? idtMatrix : renderable.modelTransform);\n \t\tif (currentLocalTransform == null && currentModelTransform == null)\n \t\t\tsetWorldTransform(idtMatrix, false);\n \t\telse if (currentLocalTransform == null)", "fixed": " \t\tif (currentLocalTransform != renderable.localTransform)\n \t\t\tset(u_localTrans, (currentLocalTransform = renderable.localTransform) == null ? idtMatrix : renderable.localTransform);\n \t\tif (currentModelTransform != renderable.modelTransform)\n\t\t\tset(u_modelTrans, (currentModelTransform = renderable.modelTransform) == null ? idtMatrix : renderable.modelTransform);\n \t\tif (currentLocalTransform == null && currentModelTransform == null)\n \t\t\tsetWorldTransform(idtMatrix, false);\n \t\telse if (currentLocalTransform == null)", "sourceBeforeFix": "currentWorldTransform=renderable.modelTransform", "sourceAfterFix": "currentModelTransform=renderable.modelTransform"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDigitalOceanEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DigitalOceanEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDigitalOceanEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DigitalOceanEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"problem": "public int METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 + ( VAR_2 ) ; TYPE_1 VAR_3 = this . METHOD_2 ( ) ; TYPE_2 VAR_4 = VAR_3 . METHOD_3 ( VAR_1 , null ) ; int num = VAR_4 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) ; VAR_3 . METHOD_5 ( ) ; java.lang.System.out.println ( num ) ; return num ; }\n", "fixed": "public int METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 + ( VAR_2 ) ; TYPE_1 VAR_3 = this . METHOD_2 ( ) ; TYPE_2 VAR_4 = VAR_3 . METHOD_3 ( VAR_1 , null ) ; int num = VAR_4 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) ; java.lang.System.out.println ( num ) ; return num ; }\n"}
{"fixCommitSHA1": "e04a3bf7703544cf5012eb2f55626af8e0a2cb8c", "projectName": "apache.flink", "bugType": "Delete Throws Exception", "problem": " \t\tprivate int lostRecordCnt = 0;\n \t\t@Override\n\t\tpublic Row map(Row value) throws Exception {\n \t\t\tif (saveRecordCnt == 1 && lostRecordCnt == 1) {", "fixed": " \t\tprivate int lostRecordCnt = 0;\n \t\t@Override\n\t\tpublic Row map(Row value) {\n \t\t\tif (saveRecordCnt == 1 && lostRecordCnt == 1) {", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"problem": "public TYPE_1 METHOD_1 ( final java.lang.String id ) { this . METHOD_2 ( VAR_1 , new java.util.ArrayList < java.lang.Object > ( ) { { add ( new TYPE_2 ( new java.util.Date ( ) . getTime ( ) ) ) ; add ( id ) ; } } ) ; TYPE_1 VAR_2 = this . METHOD_3 ( id ) ; return TYPE_3 . METHOD_4 ( VAR_2 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( final java.lang.String id , final java.lang.String type ) { this . METHOD_2 ( VAR_1 , new java.util.ArrayList < java.lang.Object > ( ) { { add ( new TYPE_2 ( new java.util.Date ( ) . getTime ( ) ) ) ; add ( id ) ; } } ) ; TYPE_1 VAR_2 = this . METHOD_3 ( id ) ; return TYPE_3 . METHOD_4 ( VAR_2 ) ; }\n"}
{"problem": "public static final boolean METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 file ) { final TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) . METHOD_3 ( file ) ; return ( VAR_2 != null ) && ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ) ; }\n", "fixed": "public static final boolean METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 file ) { if ( ( VAR_1 == null ) || ( file == null ) ) { return false ; } final TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) . METHOD_3 ( file ) ; return ( VAR_2 != null ) && ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( final java.lang.Exception VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; VAR_2 . METHOD_3 ( this ) ; if ( VAR_1 != null ) { TYPE_1 . METHOD_4 ( this , STRING_1 , VAR_3 ) . show ( ) ; } }\n", "fixed": "protected void METHOD_1 ( final java.lang.Exception VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( this ) ; } if ( VAR_1 != null ) { TYPE_1 . METHOD_4 ( this , STRING_1 , VAR_3 ) . show ( ) ; } }\n"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink result = new Sink(\"result.json\").withInputs(join);\n \t\texpectedPlan.setSinks(result);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink result = new Sink(\"result.json\").withInputs(join);\n \t\texpectedPlan.setSinks(result);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean touchUp (int screenX, int screenY, int pointer, int button) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].touchUp(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean touchUp (int screenX, int screenY, int pointer, int button) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).touchUp(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see java.lang.Object\n \t */\n\tpublic int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "fixed": " \t * \n* @see java.lang.Object\n \t */\n\tpublic abstract int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { VAR_1 = ! ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . setText ( ( VAR_1 ? STRING_1 : STRING_2 ) ) ; VAR_4 . setEnabled ( ( ! ( VAR_1 ) ) ) ; VAR_5 . setEnabled ( ( ! ( VAR_1 ) ) ) ; VAR_6 . setEnabled ( ( ! ( VAR_1 ) ) ) ; VAR_7 . setEnabled ( ( ! ( VAR_1 ) ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { VAR_1 = ! ( VAR_1 ) ; this . VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . setText ( ( VAR_1 ? STRING_1 : STRING_2 ) ) ; VAR_4 . setEnabled ( ( ! ( VAR_1 ) ) ) ; VAR_5 . setEnabled ( ( ! ( VAR_1 ) ) ) ; VAR_6 . setEnabled ( ( ! ( VAR_1 ) ) ) ; VAR_7 . setEnabled ( ( ! ( VAR_1 ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 != null ) { TYPE_3 . METHOD_3 ( STRING_1 , ( STRING_2 + ( VAR_2 . METHOD_4 ( ) ) ) ) ; } else { TYPE_3 . METHOD_3 ( STRING_1 , STRING_3 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 ) != null ) { TYPE_3 . METHOD_3 ( STRING_1 , ( STRING_2 + ( VAR_2 . METHOD_4 ( ) ) ) ) ; } else { TYPE_3 . METHOD_3 ( STRING_1 , STRING_3 ) ; } }\n"}
{"problem": "public void METHOD_1 ( char [ ] VAR_1 , int start , int length ) throws TYPE_1 { java.lang.String VAR_2 = new java.lang.String ( VAR_1 , start , length ) ; if ( ( ! ( VAR_2 . equals ( \"\\n\" ) ) ) && ( VAR_3 ) ) VAR_4 . append ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( char [ ] VAR_1 , int start , int length ) throws TYPE_1 { java.lang.String VAR_2 = new java.lang.String ( VAR_1 , start , length ) ; if ( ! ( VAR_2 . equals ( \"\\n\" ) ) ) VAR_4 . append ( VAR_2 ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { java.lang.String VAR_2 ; java.lang.Integer VAR_3 = java.lang.Integer . METHOD_2 ( VAR_1 . METHOD_3 ( \"id\" ) ) ; TYPE_4 VAR_4 = TYPE_4 . METHOD_4 ( ) ; TYPE_5 VAR_5 = new TYPE_6 ( VAR_4 ) . METHOD_5 ( VAR_3 ) ; VAR_1 . METHOD_6 ( STRING_1 , VAR_5 ) ; VAR_2 = STRING_2 ; java.lang.System.out.println ( VAR_5 ) ; TYPE_7 . info ( STRING_3 ) ; return VAR_2 ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { java.lang.String VAR_2 ; java.lang.Integer VAR_3 = java.lang.Integer . METHOD_2 ( VAR_1 . METHOD_3 ( \"id\" ) ) ; TYPE_4 VAR_4 = TYPE_4 . METHOD_4 ( ) ; VAR_2 = STRING_2 ; TYPE_7 . info ( STRING_3 ) ; return VAR_2 ; }\n"}
{"problem": "public static boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 c = new TYPE_1 ( VAR_1 ) ; try { VAR_2 = c . METHOD_2 ( ) ; VAR_3 = new TYPE_2 ( VAR_2 ) ; } catch ( TYPE_3 | java.io.IOException VAR_4 ) { java.util.logging.Logger.getLogger ( VAR_5 class . getName ( ) ) . METHOD_3 ( VAR_6 , null , VAR_4 ) ; return false ; } return true ; }\n", "fixed": "public static boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 c = new TYPE_1 ( VAR_1 ) ; try { VAR_2 = c . METHOD_2 ( ) ; VAR_3 = new TYPE_2 ( VAR_2 ) ; c . start ( ) ; } catch ( TYPE_3 | java.io.IOException VAR_4 ) { java.util.logging.Logger.getLogger ( VAR_5 class . getName ( ) ) . METHOD_3 ( VAR_6 , null , VAR_4 ) ; return false ; } return true ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { int i = 0 ; for ( TYPE_1 VAR_2 : this . VAR_3 ) { if ( VAR_2 == VAR_1 ) { this . VAR_3 [ i ] = null ; VAR_1 . METHOD_2 ( null ) ; return ; } i ++ ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { int i = 0 ; for ( TYPE_1 VAR_2 : this . VAR_3 ) { if ( VAR_2 == VAR_1 ) { this . VAR_3 [ i ] = null ; VAR_1 . METHOD_2 ( null ) ; return ; } i ++ ; } } }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) . text ( STRING_1 ) . build ( ) ; VAR_1 = VAR_2 . METHOD_3 ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( TYPE_2 . METHOD_2 ( ) . text ( STRING_2 ) . METHOD_4 ( VAR_1 ) . build ( ) ) ; TYPE_3 . assertNotNull ( VAR_4 . METHOD_5 ( VAR_3 . getId ( ) ) ) ; TYPE_3 . assertNotNull ( VAR_5 . METHOD_5 ( VAR_1 . getId ( ) ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) . text ( STRING_1 ) . build ( ) ; VAR_1 = VAR_2 . METHOD_3 ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( TYPE_2 . METHOD_2 ( ) . text ( STRING_2 ) . build ( ) ) ; TYPE_3 . assertNotNull ( VAR_4 . METHOD_5 ( VAR_3 . getId ( ) ) ) ; TYPE_3 . assertNotNull ( VAR_5 . METHOD_5 ( VAR_1 . getId ( ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( this . VAR_1 . METHOD_2 ( true , false ) ) { this . VAR_2 . METHOD_3 ( ) ; this . VAR_3 . METHOD_4 ( new TYPE_1 ( ) { public void METHOD_5 ( ) { VAR_4 . METHOD_6 ( new TYPE_2 < TYPE_3 > ( ) { public void METHOD_7 ( final TYPE_3 listener ) { METHOD_8 ( listener ) ; } } ) ; VAR_4 . METHOD_9 ( ) ; } } ) ; } else { TYPE_4 . METHOD_10 ( STRING_1 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( this . VAR_1 . METHOD_2 ( true , false ) ) { this . VAR_3 . METHOD_4 ( new TYPE_1 ( ) { public void METHOD_5 ( ) { VAR_4 . METHOD_6 ( new TYPE_2 < TYPE_3 > ( ) { public void METHOD_7 ( final TYPE_3 listener ) { METHOD_8 ( listener ) ; } } ) ; VAR_4 . METHOD_9 ( ) ; VAR_2 . METHOD_3 ( ) ; } } ) ; } else { TYPE_4 . METHOD_10 ( STRING_1 ) ; } }\n"}
{"problem": "public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { long VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . getId ( ) ; TYPE_1 < TYPE_2 > VAR_4 = this . VAR_5 . METHOD_4 ( VAR_2 , VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) ) ; VAR_4 . METHOD_6 ( ) ; return VAR_4 ; }\n", "fixed": "public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { long VAR_2 = this . VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . getId ( ) ; TYPE_1 < TYPE_2 > VAR_4 = this . VAR_5 . METHOD_4 ( VAR_2 , VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) ) ; VAR_4 . METHOD_6 ( ) ; return VAR_4 ; }\n"}
{"problem": "public boolean METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { if ( VAR_5 . METHOD_2 ( ) ) { VAR_5 . start ( ) ; } else if ( VAR_5 . METHOD_3 ( ) ) { VAR_6 . METHOD_1 ( ) ; } else if ( VAR_5 . METHOD_4 ( ) ) { VAR_5 . METHOD_5 ( ) ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { if ( VAR_5 . METHOD_2 ( ) ) { VAR_5 . start ( ) ; } else if ( VAR_5 . METHOD_3 ( ) ) { VAR_6 . METHOD_1 ( ) ; } return true ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return false ; TYPE_2 . METHOD_2 ( STRING_1 , java.lang.String . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ; if ( this . VAR_2 ) { TYPE_3 . METHOD_5 ( VAR_3 ) ; this . VAR_2 = VAR_4 ; } try { this . file . METHOD_6 ( VAR_1 . METHOD_7 ( ) , 0 , VAR_1 . METHOD_8 ( ) ) ; } catch ( java.io.IOException VAR_5 ) { VAR_5 . METHOD_9 ( ) ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return true ; TYPE_2 . METHOD_2 ( STRING_1 , java.lang.String . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ; if ( this . VAR_2 ) { TYPE_3 . METHOD_5 ( VAR_3 ) ; this . VAR_2 = VAR_4 ; } try { this . file . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; } catch ( java.io.IOException VAR_5 ) { VAR_5 . METHOD_9 ( ) ; } return true ; }\n"}
{"problem": "public void METHOD_1 ( ) { try { VAR_1 = new TYPE_1 ( INT_1 , VAR_2 class ) ; VAR_1 . start ( ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_1 ( ) ; } VAR_4 = true ; } catch ( java.lang.Exception VAR_5 ) { if ( VAR_5 . toString ( ) . contains ( STRING_1 ) ) { java.lang.System.err.println ( ( ( STRING_2 + ( VAR_6 ) ) + STRING_3 ) ) ; } else { java.lang.System.err.println ( ( STRING_4 + VAR_5 ) ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { try { VAR_1 = new TYPE_1 ( VAR_6 , VAR_2 class ) ; VAR_1 . start ( ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_1 ( ) ; } VAR_4 = true ; } catch ( java.lang.Exception VAR_5 ) { if ( VAR_5 . toString ( ) . contains ( STRING_1 ) ) { java.lang.System.err.println ( ( ( STRING_2 + ( VAR_6 ) ) + STRING_3 ) ) ; } else { java.lang.System.err.println ( ( STRING_4 + VAR_5 ) ) ; } } }\n"}
{"project": "Lang", "bugId": 64, "problem": " public final int getValue() {\n      * @throws NullPointerException if other is <code>null</code>\n      */\n     public int compareTo(Object other) {\n         return iValue - ((ValuedEnum) other).iValue;\n     }", "fixed": " public final int getValue() {\n      * @throws NullPointerException if other is <code>null</code>\n      */\n     public int compareTo(Object other) {\n        if (other == this) {\n            return 0;\n        }\n        if (other.getClass() != this.getClass()) {\n            if (other.getClass().getName().equals(this.getClass().getName())) {\n                return iValue - getValueInOtherClassLoader(other);\n            }\n            throw new ClassCastException(\n                    \"Different enum class '\" + ClassUtils.getShortClassName(other.getClass()) + \"'\");\n        }\n         return iValue - ((ValuedEnum) other).iValue;\n     }", "observations": "", "repairActions": ["assignAdd", "condBranIfAdd", "exThrowsAdd", "exTryCatchAdd", "mcAdd", "mdAdd", "objInstAdd", "retBranchAdd", "varAdd"], "repairPatterns": ["condBlockExcAdd", "condBlockOthersAdd", "condBlockRetAdd", "missComp"]}
{"problem": "private int [ ] METHOD_1 ( int [ ] VAR_1 , int VAR_2 , int VAR_3 ) { int [ ] VAR_4 = VAR_1 . METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_5 ) ; i ++ ) { VAR_4 [ i ] = ( + VAR_3 ) * ( VAR_6 [ VAR_2 ] [ i ] ) ; } return METHOD_3 ( VAR_4 ) ; }\n", "fixed": "private int [ ] METHOD_1 ( int [ ] VAR_1 , int VAR_2 , int VAR_3 ) { int [ ] VAR_4 = VAR_1 . METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_5 ) ; i ++ ) { VAR_4 [ i ] += VAR_3 * ( VAR_6 [ VAR_2 ] [ i ] ) ; } return METHOD_3 ( VAR_4 ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { final java.lang.String VAR_1 = VAR_2 . getString ( VAR_3 , STRING_1 ) ; if ( ! ( VAR_1 . equals ( STRING_1 ) ) ) { final android.content.Intent intent = new android.content.Intent ( VAR_4 ) ; intent . METHOD_2 ( VAR_5 , VAR_1 ) ; new TYPE_1 ( ) . METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( ) { METHOD_5 ( intent ) ; } } , VAR_6 ) ; } }\n", "fixed": "private void METHOD_1 ( ) { final java.lang.String VAR_1 = VAR_2 . getString ( VAR_3 , STRING_1 ) ; if ( ! ( VAR_1 . equals ( STRING_1 ) ) ) { final android.content.Intent intent = new android.content.Intent ( VAR_4 ) ; intent . METHOD_2 ( VAR_5 , VAR_1 ) ; METHOD_5 ( intent ) ; } }\n"}
{"problem": "private boolean METHOD_1 ( android.widget.LinearLayout VAR_1 , java.lang.String key ) { boolean VAR_2 = false ; for ( int i = ( VAR_1 . METHOD_2 ( ) ) - 1 ; i >= 0 ; -- i ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_1 . METHOD_3 ( i ) ) ) ; if ( VAR_3 . METHOD_4 ( ) . equals ( key ) ) { METHOD_5 ( VAR_1 , METHOD_6 ( VAR_3 ) ) ; VAR_2 = true ; break ; } } return VAR_2 ; }\n", "fixed": "private boolean METHOD_1 ( android.widget.LinearLayout VAR_1 , java.lang.String key ) { boolean VAR_2 = false ; for ( int i = ( VAR_1 . METHOD_2 ( ) ) - 1 ; i >= 0 ; -- i ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_1 . METHOD_3 ( i ) ) ) ; if ( VAR_3 . METHOD_4 ( ) . equals ( key ) ) { METHOD_5 ( VAR_1 , METHOD_6 ( VAR_1 , VAR_3 ) ) ; VAR_2 = true ; break ; } } return VAR_2 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void handle ( TYPE_1 event ) { final java.util.List < TYPE_2 > VAR_1 = METHOD_1 ( event . METHOD_2 ( ) , event . METHOD_3 ( ) ) ; try { VAR_2 . METHOD_4 ( VAR_1 . get ( 0 ) ) ; } catch ( TYPE_3 VAR_3 ) { java.lang.System.out.println ( STRING_1 ) ; } }\n", "fixed": "public void handle ( TYPE_1 event ) { final java.util.List < TYPE_2 > VAR_1 = METHOD_1 ( event . METHOD_2 ( ) , event . METHOD_3 ( ) ) ; try { VAR_2 . METHOD_4 ( VAR_1 . get ( ( ( VAR_1 . size ( ) ) - 1 ) ) ) ; } catch ( TYPE_3 VAR_3 ) { java.lang.System.out.println ( STRING_1 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; ++ i ) { java.lang.System.out.println ( VAR_1 [ i ] ) ; synchronized ( VAR_2 ) { try { VAR_2 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; } catch ( TYPE_2 VAR_3 ) { java.lang.System.err.println ( STRING_1 ) ; } } synchronized ( VAR_4 ) { VAR_4 . METHOD_4 ( ) ; TYPE_1 . METHOD_3 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; ++ i ) { synchronized ( VAR_2 ) { try { VAR_2 . METHOD_2 ( ) ; java.lang.System.out.println ( VAR_1 [ i ] ) ; } catch ( TYPE_2 VAR_3 ) { java.lang.System.err.println ( STRING_1 ) ; } } synchronized ( VAR_4 ) { VAR_4 . METHOD_4 ( ) ; TYPE_1 . METHOD_3 ( ) ; } } }\n"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = ModelApiResponse.class) })\n     ModelApiResponse uploadFile(@PathParam(\"petId\") @ApiParam(\"ID of pet to update\") Long petId,@FormParam(value = \"additionalMetadata\")  String additionalMetadata, @FormParam(value = \"file\") InputStream fileInputStream,\n   @FormParam(value = \"file\") Attachment fileDetail);\n }", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = ModelApiResponse.class) })\n     ModelApiResponse uploadFile(@PathParam(\"petId\") @ApiParam(\"ID of pet to update\") Long petId,@FormParam(value = \"additionalMetadata\")  String additionalMetadata, @FormParam(value = \"file\") InputStream fileInputStream,\n   @FormParam(value = \"file\") Attachment fileDetail) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 data ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; } VAR_3 = data . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) ; VAR_2 . METHOD_7 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 data ) { if ( VAR_1 ) { VAR_2 . METHOD_5 ( ) . METHOD_3 ( ) ; } VAR_3 = data . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) ; VAR_2 . METHOD_7 ( ) ; }\n"}
{"problem": "static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { TYPE_1 name = null ; name = new TYPE_1 ( ( ( ( ( VAR_1 + STRING_1 ) + ( TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) ) + STRING_2 ) + ( VAR_2 . METHOD_4 ( ) . getId ( ) ) ) ) ; return name ; }\n", "fixed": "static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { TYPE_1 name = new TYPE_1 ( ( ( ( ( VAR_1 + STRING_1 ) + ( TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) ) + STRING_2 ) + ( VAR_2 . METHOD_4 ( ) . getId ( ) ) ) ) ; return name ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . get ( VAR_1 ) ; boolean VAR_5 = VAR_3 . METHOD_1 ( VAR_2 ) ; if ( ! VAR_5 ) VAR_3 . METHOD_2 ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + ( VAR_3 . METHOD_3 ( ) ) ) ) ; return VAR_5 ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . get ( VAR_1 ) ; boolean VAR_5 = VAR_3 . METHOD_1 ( VAR_2 ) ; if ( VAR_5 ) VAR_3 . METHOD_2 ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + ( VAR_3 . METHOD_3 ( ) ) ) ) ; return VAR_5 ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 message = new TYPE_1 ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_2 ( message ) ; java.util.List < TYPE_1 > VAR_2 = VAR_1 . METHOD_3 ( STRING_1 ) ; assertNotNull ( VAR_2 ) ; METHOD_4 ( VAR_2 . isEmpty ( ) ) ; assertEquals ( INT_1 , VAR_2 . size ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 message = new TYPE_1 ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_2 ( message ) ; java.util.List < TYPE_1 > VAR_2 = VAR_1 . METHOD_3 ( STRING_1 ) ; assertNotNull ( VAR_2 ) ; METHOD_4 ( VAR_2 . isEmpty ( ) ) ; assertEquals ( 1 , VAR_2 . size ( ) ) ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( java.util.HashMap < java.lang.String , java.lang.String > VAR_1 ) throws TYPE_2 { java.lang.String VAR_2 = VAR_1 . get ( STRING_1 ) ; java.lang.String VAR_3 = VAR_1 . get ( STRING_2 ) ; java.lang.String VAR_4 = VAR_1 . get ( STRING_3 ) ; java.lang.String VAR_5 = VAR_1 . get ( STRING_4 ) ; try { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( TYPE_3 VAR_6 ) { throw new TYPE_2 ( VAR_6 ) ; } }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) throws TYPE_2 { java.lang.String VAR_2 = VAR_1 . get ( STRING_1 ) ; java.lang.String VAR_3 = VAR_1 . get ( STRING_2 ) ; java.lang.String VAR_4 = VAR_1 . get ( STRING_3 ) ; java.lang.String VAR_5 = VAR_1 . get ( STRING_4 ) ; try { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( TYPE_3 VAR_6 ) { throw new TYPE_2 ( VAR_6 ) ; } }\n"}
{"problem": "public double METHOD_1 ( ) { final java.lang.Double VAR_1 = METHOD_2 ( ) ; final java.lang.Double VAR_2 = 0.0 ; VAR_3 . values ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ( value ) - > java.lang.Math.pow ( ( ( value . METHOD_6 ( ) ) - VAR_1 ) , FLOAT_1 ) ) ) ; return TYPE_2 . METHOD_7 ( ( VAR_2 / ( ( ( double ) ( VAR_3 . size ( ) ) ) - 1.0 ) ) ) ; }\n", "fixed": "public double METHOD_1 ( ) { final java.lang.Double VAR_1 = METHOD_2 ( ) ; final java.lang.Double VAR_2 = VAR_3 . values ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ( value ) - > java.lang.Math.pow ( ( ( value . METHOD_6 ( ) ) - VAR_1 ) , FLOAT_1 ) ) ) ; return TYPE_2 . METHOD_7 ( ( VAR_2 / ( ( ( double ) ( VAR_3 . size ( ) ) ) - 1.0 ) ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( int x , int y , java.lang.String VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . put ( x , y , VAR_1 , VAR_5 . get ( VAR_2 ) ) ; for ( int i = x ; ( i < ( VAR_1 . length ( ) ) ) && ( i < ( METHOD_2 ( ) ) ) ; i ++ ) { VAR_6 . put ( i , y , VAR_5 . get ( VAR_3 ) ) ; } return this ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int x , int y , java.lang.String VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . put ( x , y , VAR_1 , VAR_5 . get ( VAR_2 ) ) ; for ( int i = x ; ( i < ( x + ( VAR_1 . length ( ) ) ) ) && ( i < ( METHOD_2 ( ) ) ) ; i ++ ) { VAR_6 . put ( i , y , VAR_5 . get ( VAR_3 ) ) ; } return this ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.Exception { if ( VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) { throw new TYPE_3 ( VAR_3 ) ; } VAR_2 . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_5 ( ) ) ; return new TYPE_1 ( VAR_4 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.Exception { if ( VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) { throw new TYPE_3 ( VAR_3 ) ; } VAR_2 . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ; return new TYPE_1 ( VAR_4 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) return ; TYPE_1 VAR_2 = TYPE_1 . METHOD_3 ( VAR_3 . METHOD_4 ( ) , VAR_3 . METHOD_5 ( ) ) ; if ( VAR_4 . equals ( VAR_2 ) ) return ; VAR_5 . METHOD_6 ( VAR_2 ) ; VAR_4 = VAR_2 ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) return ; TYPE_1 VAR_2 = TYPE_1 . METHOD_3 ( VAR_3 . METHOD_5 ( ) , VAR_3 . METHOD_4 ( ) ) ; if ( VAR_4 . equals ( VAR_2 ) ) return ; VAR_5 . METHOD_6 ( VAR_2 ) ; VAR_4 = VAR_2 ; }\n"}
{"problem": "private void METHOD_1 ( int index ) { for ( int VAR_1 = ( VAR_2 . size ( ) ) - 1 ; VAR_1 >= index ; VAR_1 -- ) { VAR_2 . remove ( VAR_1 ) ; VAR_3 . remove ( ( ( VAR_3 . METHOD_2 ( ) ) - 1 ) ) ; } VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; }\n", "fixed": "private void METHOD_1 ( int index ) { for ( int VAR_1 = ( VAR_2 . size ( ) ) - 1 ; VAR_1 >= index ; VAR_1 -- ) { VAR_2 . remove ( VAR_1 ) ; VAR_3 . remove ( ( ( VAR_3 . METHOD_2 ( ) ) - 1 ) ) ; } VAR_3 . METHOD_3 ( ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 15808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n     /**", "fixed": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 10808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n     /**", "sourceBeforeFix": "id=15801", "sourceAfterFix": "id=10801"}
{"problem": "public static java.lang.String METHOD_1 ( TYPE_1 buf ) throws TYPE_2 { final int length = TYPE_3 . METHOD_1 ( buf ) ; if ( length < 0 ) { throw new TYPE_2 ( STRING_1 ) ; } final byte [ ] VAR_1 = new byte [ length ] ; buf . put ( VAR_1 ) ; try { return new java.lang.String ( VAR_1 , STRING_2 ) ; } catch ( TYPE_4 VAR_2 ) { throw new TYPE_5 ( VAR_2 ) ; } }\n", "fixed": "public static java.lang.String METHOD_1 ( TYPE_1 buf ) throws TYPE_2 { final int length = TYPE_3 . METHOD_1 ( buf ) ; if ( length < 0 ) { throw new TYPE_2 ( STRING_1 ) ; } final byte [ ] VAR_1 = new byte [ length ] ; buf . get ( VAR_1 ) ; try { return new java.lang.String ( VAR_1 , STRING_2 ) ; } catch ( TYPE_4 VAR_2 ) { throw new TYPE_5 ( VAR_2 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public int delete ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . build ( ) ; try { TYPE_3 VAR_3 = VAR_2 . METHOD_1 ( VAR_4 ) ; return VAR_4 . METHOD_2 ( VAR_3 ) ; } catch ( TYPE_4 VAR_5 ) { VAR_4 . METHOD_3 ( ) ; throw new TYPE_5 ( STRING_1 , java.lang.String.format ( STRING_2 , VAR_2 . METHOD_4 ( ) ) , VAR_5 ) ; } }\n", "fixed": "public int delete ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . build ( ) ; try ( TYPE_3 VAR_3 = VAR_2 . METHOD_1 ( VAR_4 ) ) { return VAR_4 . METHOD_2 ( VAR_3 ) ; } catch ( TYPE_4 VAR_5 ) { VAR_4 . METHOD_3 ( ) ; throw new TYPE_5 ( STRING_1 , java.lang.String.format ( STRING_2 , VAR_2 . METHOD_4 ( ) ) , VAR_5 ) ; } }\n"}
{"fixCommitSHA1": "e073ea8e8a6a7adbd245c9888f5d47e0f28eeb60", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "     @Override\n     public String toString()\n     {\n        return getClass().getSimpleName() + \"[populator:\" + populator + \", descriptor:\" + descriptor + \"]\";\n     }\n     public void awaitCompletion() throws InterruptedException", "fixed": "     @Override\n     public String toString()\n     {\n        return getClass().getSimpleName() + \"[populator:\" + populator + \", descriptor:\" + indexUserDescription + \"]\";\n     }\n     public void awaitCompletion() throws InterruptedException", "sourceBeforeFix": "getClass().getSimpleName() + \"[populator:\" + populator+ \", descriptor:\"+ descriptor+ \"]\"", "sourceAfterFix": "getClass().getSimpleName() + \"[populator:\" + populator+ \", descriptor:\"+ indexUserDescription+ \"]\""}
{"fixCommitSHA1": "761d3ff3b19109715644ebc2bfa0396f3148d772", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"problem": "protected void METHOD_1 ( java.util.ArrayList < TYPE_1 > result ) { try { if ( ( VAR_1 ) == null ) { VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; return ; } if ( VAR_1 . METHOD_3 ( ) ) VAR_2 . METHOD_4 ( VAR_3 , result ) ; else VAR_2 . METHOD_2 ( VAR_3 , VAR_1 . METHOD_5 ( ) , VAR_5 ) ; } catch ( java.lang.Exception VAR_6 ) { VAR_6 . METHOD_6 ( ) ; } }\n", "fixed": "protected void METHOD_1 ( java.util.ArrayList < TYPE_1 > result ) { try { if ( ( ( VAR_1 ) == null ) || ( result == null ) ) { VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; return ; } if ( VAR_1 . METHOD_3 ( ) ) VAR_2 . METHOD_4 ( VAR_3 , result ) ; else VAR_2 . METHOD_2 ( VAR_3 , VAR_1 . METHOD_5 ( ) , VAR_5 ) ; } catch ( java.lang.Exception VAR_6 ) { VAR_6 . METHOD_6 ( ) ; } }\n"}
{"problem": "public boolean put ( java.lang.String key , TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = get ( key ) ; if ( VAR_2 == null ) { if ( ( ( VAR_3 ) != null ) && ( VAR_1 != null ) ) VAR_2 = VAR_3 . put ( key , VAR_1 ) ; } return VAR_2 == VAR_1 ; }\n", "fixed": "public void put ( java.lang.String key , TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = get ( key ) ; if ( VAR_2 == null ) { if ( ( ( VAR_3 ) != null ) && ( VAR_1 != null ) ) VAR_2 = VAR_3 . put ( key , VAR_1 ) ; } }\n"}
{"problem": "public static java.util.Map < TYPE_1 , java.lang.Integer > METHOD_1 ( java.util.List < java.lang.String > words ) { java.util.Map < TYPE_1 , java.lang.Integer > VAR_1 = new TYPE_2 < TYPE_1 , java.lang.Integer > ( ) ; java.util.Set < TYPE_3 > VAR_2 = TYPE_4 . METHOD_2 ( ) ; for ( java.lang.String VAR_3 : words ) { TYPE_4 . METHOD_3 ( VAR_1 , VAR_3 , VAR_2 ) ; } return VAR_1 ; }\n", "fixed": "public static java.util.Map < TYPE_1 , java.lang.Integer > METHOD_1 ( java.util.List < java.lang.String > words ) { java.util.Map < TYPE_1 , java.lang.Integer > VAR_1 = new TYPE_2 < TYPE_1 , java.lang.Integer > ( ) ; for ( java.lang.String VAR_3 : words ) { TYPE_4 . METHOD_3 ( VAR_1 , VAR_3 ) ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void init ( android.content.Context context ) { VAR_1 = context ; VAR_2 = ( ( TYPE_1 ) ( VAR_1 . METHOD_1 ( VAR_3 ) ) ) ; VAR_4 = ( ( TYPE_2 ) ( context . METHOD_1 ( VAR_5 ) ) ) ; TYPE_3 VAR_6 = new TYPE_3 ( VAR_7 ) ; TYPE_4 VAR_8 = new TYPE_4 ( ) ; context . METHOD_2 ( VAR_8 , VAR_6 ) ; }\n", "fixed": "public void init ( android.content.Context context ) { VAR_1 = context ; VAR_2 = ( ( TYPE_1 ) ( VAR_1 . METHOD_1 ( VAR_3 ) ) ) ; VAR_4 = ( ( TYPE_2 ) ( VAR_1 . METHOD_1 ( VAR_5 ) ) ) ; TYPE_3 VAR_6 = new TYPE_3 ( VAR_7 ) ; TYPE_4 VAR_8 = new TYPE_4 ( ) ; context . METHOD_2 ( VAR_8 , VAR_6 ) ; }\n"}
{"problem": "public TYPE_1 get ( int index , int VAR_1 ) { java.lang.System.out.println ( ( ( ( VAR_2 . height ) + STRING_1 ) + VAR_1 ) ) ; int VAR_3 = ( VAR_2 . height ) / VAR_1 ; int VAR_4 = ( VAR_5 ) / VAR_1 ; int x = ( index % VAR_4 ) * VAR_1 ; int y = ( index / VAR_3 ) * VAR_1 ; TYPE_2 VAR_6 = VAR_7 . METHOD_1 ( x , y , VAR_1 , VAR_1 ) ; TYPE_1 VAR_8 = TYPE_3 . METHOD_2 ( VAR_6 ) ; return VAR_8 ; }\n", "fixed": "public TYPE_1 get ( int index , int VAR_1 ) { int VAR_3 = ( VAR_2 . height ) / VAR_1 ; int VAR_4 = ( VAR_5 ) / VAR_1 ; int x = ( index % VAR_4 ) * VAR_1 ; int y = ( index / VAR_3 ) * VAR_1 ; TYPE_2 VAR_6 = VAR_7 . METHOD_1 ( x , y , VAR_1 , VAR_1 ) ; TYPE_1 VAR_8 = TYPE_3 . METHOD_2 ( VAR_6 ) ; return VAR_8 ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , boolean [ ] VAR_2 , TYPE_2 VAR_3 ) { int VAR_4 = this . VAR_5 . METHOD_2 ( ) ; for ( int i = 0 ; i < VAR_4 ; i ++ ) { TYPE_3 c = METHOD_3 ( i , VAR_2 , VAR_6 ) ; VAR_3 . METHOD_4 ( c ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , boolean [ ] VAR_2 , TYPE_2 VAR_3 ) { int VAR_4 = this . VAR_5 . METHOD_2 ( ) ; for ( int i = 0 ; i < VAR_4 ; i ++ ) { TYPE_3 c = METHOD_3 ( i , VAR_2 , VAR_1 ) ; VAR_3 . METHOD_4 ( c ) ; } }\n"}
{"problem": "public void METHOD_1 ( final TYPE_1 event ) { if ( TYPE_2 . METHOD_2 ( ) ) { if ( ( VAR_1 ) != null ) VAR_1 . METHOD_3 ( true ) ; } else { if ( ( VAR_1 ) != null ) VAR_1 . METHOD_3 ( false ) ; } TYPE_3 . METHOD_1 ( null ) ; METHOD_4 ( true ) ; }\n", "fixed": "public void METHOD_1 ( final TYPE_1 event ) { if ( TYPE_2 . METHOD_2 ( ) ) { if ( ( VAR_1 ) != null ) VAR_1 . METHOD_3 ( true ) ; } else { if ( ( VAR_1 ) != null ) VAR_1 . METHOD_3 ( false ) ; } METHOD_4 ( true ) ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.Object value ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( value ) ) ; java.lang.Integer VAR_2 = 0 ; for ( TYPE_2 VAR_3 : VAR_1 . METHOD_2 ( ) ) VAR_2 = VAR_2 + ( VAR_3 . METHOD_3 ( ) ) ; if ( ! ( VAR_2 . equals ( VAR_1 . METHOD_3 ( ) ) ) ) { throw new TYPE_3 ( TYPE_4 . METHOD_4 ( STRING_1 ) ) ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.Object value ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( value ) ) ; java.lang.Integer VAR_2 = 0 ; for ( TYPE_2 VAR_3 : VAR_1 . METHOD_2 ( ) ) VAR_2 = VAR_2 + ( VAR_3 . METHOD_3 ( ) ) ; if ( ( VAR_2 . intValue ( ) ) < ( VAR_1 . METHOD_3 ( ) . intValue ( ) ) ) { throw new TYPE_3 ( TYPE_4 . METHOD_4 ( STRING_1 ) ) ; } return true ; }\n"}
{"problem": "public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( new TYPE_2 < java.lang.Integer , java.lang.Integer > ( INT_1 , INT_2 ) , VAR_3 , new TYPE_3 < java.lang.Integer , java.lang.Integer , java.lang.Integer > ( 0 , VAR_3 , 0 ) , STRING_1 ) ; VAR_2 . METHOD_2 ( 0 , 0 ) ; VAR_2 . METHOD_2 ( 0 , INT_2 ) ; VAR_2 . METHOD_2 ( 1 , 1 ) ; VAR_1 . add ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( new TYPE_2 < java.lang.Integer , java.lang.Integer > ( INT_1 , INT_2 ) , VAR_3 , new TYPE_3 < java.lang.Integer , java.lang.Integer , java.lang.Integer > ( 0 , VAR_3 , 0 ) , STRING_1 ) ; VAR_2 . METHOD_2 ( 0 , 0 ) ; VAR_2 . METHOD_2 ( INT_2 , 0 ) ; VAR_2 . METHOD_2 ( 1 , 1 ) ; VAR_1 . add ( VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; TYPE_2 . init ( ) ; TYPE_3 . METHOD_2 ( ) . VAR_2 = new TYPE_3 ( ) . VAR_2 ; TYPE_3 . METHOD_2 ( ) . VAR_3 . METHOD_3 ( ) ; TYPE_3 . METHOD_2 ( ) . VAR_4 . METHOD_3 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( true ) { return ; } VAR_1 = new TYPE_1 ( ) ; TYPE_2 . init ( ) ; TYPE_3 . METHOD_2 ( ) . VAR_2 = new TYPE_3 ( ) . VAR_2 ; TYPE_3 . METHOD_2 ( ) . VAR_3 . METHOD_3 ( ) ; TYPE_3 . METHOD_2 ( ) . VAR_4 . METHOD_3 ( ) ; }\n"}
{"problem": "private static double METHOD_1 ( double x , double y , java.lang.String op ) { double result ; if ( STRING_1 . equals ( op ) ) VAR_1 = x + y ; else if ( STRING_2 . equals ( op ) ) VAR_1 = x - y ; else if ( STRING_3 . equals ( op ) ) VAR_1 = x * y ; else VAR_1 = x / y ; return result ; }\n", "fixed": "private static double METHOD_1 ( double x , double y , java.lang.String op ) { double result ; if ( STRING_1 . equals ( op ) ) result = x + y ; else if ( STRING_2 . equals ( op ) ) result = x - y ; else if ( STRING_3 . equals ( op ) ) result = x * y ; else result = x / y ; return result ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 p , int VAR_1 ) { p . METHOD_2 ( name ) ; p . METHOD_2 ( VAR_2 ) ; p . METHOD_3 ( VAR_3 ) ; p . METHOD_3 ( VAR_4 ) ; p . METHOD_4 ( ( ( byte ) ( target ? 1 : 0 ) ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 p , int VAR_1 ) { p . METHOD_2 ( name ) ; p . METHOD_2 ( VAR_2 ) ; p . METHOD_3 ( VAR_3 ) ; p . METHOD_3 ( VAR_4 ) ; p . METHOD_4 ( ( ( byte ) ( target ? 1 : 0 ) ) ) ; p . METHOD_2 ( data ) ; }\n"}
{"fixCommitSHA1": "66697f6dd1574513ddcbfabd535e140088251982", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "             if (statistics.isStatisticsEnabled()) {\n                 noopCounter.increment();\n             }\n            return type.cast(value);\n         }\n        if (ObjectHelper.isNaN(value)) {\n             if (statistics.isStatisticsEnabled()) {\n                 noopCounter.increment();", "fixed": "             if (statistics.isStatisticsEnabled()) {\n                 noopCounter.increment();\n             }\n            return value;\n         }\n        if (value.equals(Float.NaN) || value.equals(Double.NaN) ) {\n             if (statistics.isStatisticsEnabled()) {\n                 noopCounter.increment();", "sourceBeforeFix": "12", "sourceAfterFix": "28"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"problem": "private boolean METHOD_1 ( ) { if ( ( ( ( name . getText ( ) . toString ( ) . length ( ) ) > 0 ) && ( ( java.lang.Integer.parseInt ( VAR_1 . getText ( ) . toString ( ) ) ) > 0 ) ) && ( ( java.lang.Integer.parseInt ( VAR_2 . getText ( ) . toString ( ) ) ) > 0 ) ) return true ; return false ; }\n", "fixed": "private boolean METHOD_1 ( ) { return ( ( ( name . getText ( ) . toString ( ) . length ( ) ) > 0 ) && ( ( java.lang.Integer.parseInt ( VAR_1 . getText ( ) . toString ( ) ) ) > 0 ) ) && ( ( java.lang.Integer.parseInt ( VAR_2 . getText ( ) . toString ( ) ) ) > 0 ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_5 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_6 ) ) ) ; TYPE_3 VAR_7 = METHOD_4 ( STRING_1 , VAR_8 ) ; VAR_9 = VAR_7 . getInt ( STRING_2 , 0 ) ; VAR_3 . setText ( ( ( VAR_9 ) + STRING_3 ) ) ; VAR_10 = this ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_5 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_6 ) ) ) ; TYPE_3 VAR_7 = METHOD_4 ( STRING_1 , VAR_8 ) ; VAR_9 = VAR_7 . getInt ( STRING_2 , 0 ) ; VAR_5 . setText ( ( ( VAR_9 ) + STRING_3 ) ) ; VAR_10 = this ; }\n"}
{"fixCommitSHA1": "3cc42e2082ef0103890fca974d5f736a4e665074", "projectName": "facebook.presto", "bugType": "Change Unary Operator\t", "problem": "         CharsetEncoder charsetEncoder = US_ASCII.newEncoder();\n         for (Entry<String, String> entry : properties.entrySet()) {\n            checkArgument(entry.getKey().isEmpty(), \"Session property name is empty\");\n             checkArgument(entry.getKey().indexOf('=') < 0, \"Session property name must not contain '=': %s\", entry.getKey());\n             checkArgument(charsetEncoder.canEncode(entry.getKey()), \"Session property name is not US_ASCII: %s\", entry.getKey());\n             checkArgument(charsetEncoder.canEncode(entry.getValue()), \"Session property value is not US_ASCII: %s\", entry.getValue());", "fixed": "         CharsetEncoder charsetEncoder = US_ASCII.newEncoder();\n         for (Entry<String, String> entry : properties.entrySet()) {\n            checkArgument(!entry.getKey().isEmpty(), \"Session property name is empty\");\n             checkArgument(entry.getKey().indexOf('=') < 0, \"Session property name must not contain '=': %s\", entry.getKey());\n             checkArgument(charsetEncoder.canEncode(entry.getKey()), \"Session property name is not US_ASCII: %s\", entry.getKey());\n             checkArgument(charsetEncoder.canEncode(entry.getValue()), \"Session property value is not US_ASCII: %s\", entry.getValue());", "sourceBeforeFix": "entry.getKey().isEmpty()", "sourceAfterFix": "!entry.getKey().isEmpty()"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 ) { if ( ( ( VAR_2 == VAR_3 ) || ( VAR_3 == ( VAR_4 ) ) ) || ( ( VAR_3 == ( VAR_5 ) ) && ( VAR_2 == ( VAR_6 ) ) ) ) { return true ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 ) { if ( ( ( VAR_2 == VAR_3 ) || ( VAR_3 == ( VAR_4 ) ) ) || ( ( VAR_2 == ( VAR_5 ) ) && ( VAR_3 == ( VAR_6 ) ) ) ) { return true ; } return false ; }\n"}
{"problem": "private boolean METHOD_1 ( java.util.Set < java.lang.String > VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 ) { java.util.regex.Matcher VAR_4 = VAR_3 . METHOD_2 ( VAR_2 ) ; while ( VAR_4 . METHOD_3 ( ) ) { java.util.Set < java.lang.String > VAR_5 = METHOD_4 ( VAR_4 . METHOD_5 ( 1 ) ) ; if ( VAR_1 . equals ( VAR_5 ) ) { return true ; } } return false ; }\n", "fixed": "private boolean METHOD_1 ( java.util.Set < java.lang.String > VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 ) { if ( VAR_2 == null ) { return false ; } java.util.regex.Matcher VAR_4 = VAR_3 . METHOD_2 ( VAR_2 ) ; while ( VAR_4 . METHOD_3 ( ) ) { java.util.Set < java.lang.String > VAR_5 = METHOD_4 ( VAR_4 . METHOD_5 ( 1 ) ) ; if ( VAR_1 . equals ( VAR_5 ) ) { return true ; } } return false ; }\n"}
{"fixCommitSHA1": "032efde651a14f8175861d96a10a26b8948f5a54", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     public void kill() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n            instance.managementService.unregister();\n             instance.node.shutdown(true, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);", "fixed": "     public void kill() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n            instance.managementService.destroy();\n             instance.node.shutdown(true, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);", "sourceBeforeFix": "instance.managementService.unregister()", "sourceAfterFix": "instance.managementService.destroy()"}
{"problem": "public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 ) { java.lang.String VAR_3 = VAR_1 . getName ( ) ; java.lang.String VAR_4 = java.lang.String.format ( STRING_1 , VAR_1 . METHOD_2 ( ) , VAR_1 . getName ( ) , VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) , VAR_3 , VAR_4 , VAR_2 ) ; }\n", "fixed": "public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object [ ] VAR_2 ) { java.lang.String VAR_3 = VAR_1 . getName ( ) ; java.lang.String VAR_4 = java.lang.String.format ( STRING_1 , VAR_1 . METHOD_2 ( ) , VAR_1 . getName ( ) , VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) , VAR_3 , VAR_4 , VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . info ( STRING_1 , VAR_2 . format ( new java.util.Date ( ) ) ) ; TYPE_1 . getContext ( ) . METHOD_2 ( new TYPE_2 ( STRING_2 , STRING_3 , TYPE_3 . METHOD_3 ( STRING_4 ) ) ) ; TYPE_4 < TYPE_5 > VAR_3 = this . VAR_4 . METHOD_4 ( ) ; TYPE_4 < TYPE_6 > VAR_5 = this . VAR_6 . METHOD_4 ( ) ; int size = METHOD_5 ( VAR_5 ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . info ( STRING_1 , VAR_2 . format ( new java.util.Date ( ) ) ) ; TYPE_1 . getContext ( ) . METHOD_2 ( new TYPE_2 ( STRING_2 , STRING_3 , TYPE_3 . METHOD_3 ( STRING_4 ) ) ) ; TYPE_4 < TYPE_5 > VAR_3 = this . VAR_4 . METHOD_4 ( ) ; TYPE_4 < TYPE_6 > VAR_5 = this . VAR_6 . METHOD_4 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 ; try { VAR_1 = new TYPE_1 ( INT_1 ) ; while ( true ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.System.out.println ( STRING_2 ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_3 . start ( ) ; } } catch ( java.io.IOException VAR_4 ) { java.util.logging.Logger.getLogger ( VAR_5 class . getName ( ) ) . METHOD_3 ( VAR_6 , null , VAR_4 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 ; try { VAR_1 = new TYPE_1 ( INT_1 ) ; while ( true ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_3 . start ( ) ; } } catch ( java.io.IOException VAR_4 ) { java.util.logging.Logger.getLogger ( VAR_5 class . getName ( ) ) . METHOD_3 ( VAR_6 , null , VAR_4 ) ; } }\n"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "fixed": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "sourceBeforeFix": "logger.debug(\"rapidRefreshFuture scheduleing for {} millis\",millis)", "sourceAfterFix": "logger.trace(\"rapidRefreshFuture scheduleing for {} millis\",millis)"}
{"fixCommitSHA1": "150cc0a5beacbec117eb141846a4c6f1aeab5847", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "             logger.debug(\"The WebSocket handshake succeeded but the dispatched URI failed {}:{}. \" +\n                     \"The WebSocket connection is still open and client can continue sending messages.\", message, errorCode);\n         } else {\n            logger.warn(\"{} {}\", errorCode, message);\n         }\n     }", "fixed": "             logger.debug(\"The WebSocket handshake succeeded but the dispatched URI failed {}:{}. \" +\n                     \"The WebSocket connection is still open and client can continue sending messages.\", message, errorCode);\n         } else {\n            logger.debug(\"{} {}\", errorCode, message);\n         }\n     }", "sourceBeforeFix": "logger.warn(\"{} {}\",errorCode,message)", "sourceAfterFix": "logger.debug(\"{} {}\",errorCode,message)"}
{"problem": "private < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_1 , TYPE_2 > METHOD_1 ( TYPE_4 < TYPE_1 , TYPE_2 > VAR_1 ) { if ( VAR_1 == null ) { return VAR_2 ; } else { return new TYPE_5 < TYPE_1 , TYPE_2 > ( VAR_1 ) ; } }\n", "fixed": "protected < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_1 , TYPE_2 > METHOD_1 ( TYPE_4 < TYPE_1 , TYPE_2 > VAR_1 ) { if ( VAR_1 == null ) { return VAR_2 ; } else { return new TYPE_5 < TYPE_1 , TYPE_2 > ( VAR_1 ) ; } }\n"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "fixed": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic abstract int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"problem": "protected void METHOD_1 ( java.lang.String VAR_1 ) { java.util.regex.Matcher VAR_2 = TYPE_1 . METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_1 ) ; int VAR_3 = 0 ; while ( VAR_2 . METHOD_4 ( ) ) { ( VAR_4 ) ++ ; VAR_3 = ( VAR_2 . end ( ) ) - 1 ; } VAR_5 = ( VAR_1 . length ( ) ) - VAR_3 ; }\n", "fixed": "protected void METHOD_1 ( java.lang.String VAR_1 ) { java.util.regex.Matcher VAR_2 = TYPE_1 . METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_1 ) ; int VAR_3 = - 1 ; while ( VAR_2 . METHOD_4 ( ) ) { ( VAR_4 ) ++ ; VAR_3 = ( VAR_2 . end ( ) ) - 1 ; } VAR_5 = ( VAR_1 . length ( ) ) - VAR_3 ; }\n"}
{"problem": "private int METHOD_1 ( TYPE_1 p , boolean VAR_1 ) { int i = 0 ; while ( this . VAR_2 [ ( ( int ) ( p . METHOD_2 ( ) ) ) ] [ ( ( int ) ( p . METHOD_3 ( ) ) ) ] ) { i ++ ; if ( VAR_1 ) { p . add ( 0 , 1 ) ; } else { p . add ( 0 , ( - 1 ) ) ; } } return i ; }\n", "fixed": "private int METHOD_1 ( TYPE_1 p , boolean VAR_1 ) { int i = 0 ; while ( this . VAR_2 [ ( ( int ) ( p . METHOD_2 ( ) ) ) ] [ ( ( int ) ( p . METHOD_3 ( ) ) ) ] ) { i ++ ; if ( VAR_1 ) { p = p . add ( 0 , ( - 1 ) ) ; } else { p = p . add ( 0 , 1 ) ; } } return i ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 result = new TYPE_1 ( STRING_1 , STRING_1 ) ; for ( TYPE_1 p : VAR_3 ) if ( ( ( p . getName ( ) ) == VAR_1 ) && ( ( p . getType ( ) ) == VAR_2 ) ) { result = p ; break ; } return result ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 result = new TYPE_1 ( STRING_1 , STRING_1 ) ; for ( TYPE_1 p : VAR_3 ) if ( ( p . getName ( ) . equals ( VAR_1 ) ) && ( p . getType ( ) . equals ( VAR_2 ) ) ) { result = p ; break ; } return result ; }\n"}
{"problem": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( this . getIntent ( ) . METHOD_2 ( STRING_1 , false ) ) { TYPE_1 . METHOD_3 ( STRING_2 , ( ( ( STRING_3 + ( TYPE_2 . METHOD_4 ( ) ) ) + STRING_4 ) + ( TYPE_2 . METHOD_5 ( ) ) ) ) ; TYPE_2 . METHOD_6 ( ) . METHOD_7 ( this ) ; VAR_1 . METHOD_8 ( VAR_2 ) ; VAR_3 . METHOD_8 ( VAR_4 ) ; } }\n", "fixed": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( this . getIntent ( ) . METHOD_2 ( STRING_1 , false ) ) { TYPE_2 . METHOD_6 ( ) . METHOD_7 ( this ) ; VAR_1 . METHOD_8 ( VAR_2 ) ; VAR_3 . METHOD_8 ( VAR_4 ) ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AtomEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AtomEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int position ) { java.lang.String VAR_2 = VAR_3 . get ( position ) ; int VAR_4 = ( VAR_5 ) + 1 ; boolean VAR_6 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_4 , VAR_2 ) ; int VAR_7 = TYPE_2 . METHOD_2 ( ) . METHOD_4 ( VAR_4 , VAR_2 ) ; if ( ( - 1 ) == VAR_7 ) { return ; } VAR_7 -= 1 ; VAR_1 . METHOD_5 ( VAR_2 , VAR_7 , VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int position ) { java.lang.String VAR_2 = VAR_3 . get ( position ) ; int VAR_4 = ( VAR_5 ) + 1 ; boolean VAR_6 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_4 , VAR_2 ) ; int VAR_7 = TYPE_2 . METHOD_2 ( ) . METHOD_4 ( VAR_4 , VAR_2 ) ; if ( ( - 1 ) == VAR_7 ) { return ; } VAR_1 . METHOD_5 ( VAR_2 , VAR_7 , VAR_6 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { int key ; for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { key = VAR_1 . METHOD_2 ( i ) ; VAR_1 . get ( key ) . METHOD_3 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { int key ; final int size = VAR_1 . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { key = VAR_1 . METHOD_2 ( i ) ; VAR_1 . get ( key ) . METHOD_3 ( ) ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixQueueEndpointBuilder\n             extends\n                 AtomixQueueEndpointConsumerBuilder, AtomixQueueEndpointProducerBuilder {\n         default AdvancedAtomixQueueEndpointBuilder advanced() {", "fixed": "     \n    public interface AtomixQueueEndpointBuilder\n             extends\n                 AtomixQueueEndpointConsumerBuilder, AtomixQueueEndpointProducerBuilder {\n         default AdvancedAtomixQueueEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . init ( event . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( ) ) ; TYPE_4 = TYPE_5 . METHOD_6 ( VAR_1 ) ; TYPE_4 . METHOD_7 ( VAR_2 class , VAR_3 class , 0 , VAR_4 ) ; TYPE_4 . METHOD_7 ( VAR_5 class , VAR_6 class , 0 , VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . init ( event . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( ) ) ; TYPE_4 = TYPE_5 . METHOD_6 ( VAR_1 ) ; TYPE_4 . METHOD_7 ( VAR_2 class , VAR_3 class , 0 , VAR_4 ) ; TYPE_4 . METHOD_7 ( VAR_5 class , VAR_6 class , 1 , VAR_4 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.Object VAR_3 ) { for ( java.util.Iterator < TYPE_1 > VAR_4 = VAR_5 . iterator ( ) ; VAR_4 . METHOD_2 ( ) ; ) { TYPE_1 VAR_6 = VAR_4 . METHOD_3 ( ) ; if ( VAR_2 . equals ( VAR_6 ) ) { ( ( TYPE_2 ) ( VAR_6 ) ) . METHOD_4 ( VAR_7 ) ; VAR_4 . remove ( ) ; break ; } } super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.Object VAR_3 ) { for ( java.util.Iterator < TYPE_1 > VAR_4 = VAR_5 . iterator ( ) ; VAR_4 . METHOD_2 ( ) ; ) { TYPE_1 VAR_6 = VAR_4 . METHOD_3 ( ) ; if ( VAR_2 . equals ( VAR_6 . getName ( ) ) ) { ( ( TYPE_2 ) ( VAR_6 ) ) . METHOD_4 ( VAR_7 ) ; VAR_4 . remove ( ) ; break ; } } super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int position ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; java.util.HashMap < java.lang.String , java.lang.String > VAR_3 = VAR_4 . get ( position ) ; if ( VAR_3 != null ) { VAR_2 . METHOD_2 ( context , VAR_3 , position ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int position ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; java.util.HashMap < java.lang.String , java.lang.String > VAR_3 = VAR_4 . get ( position ) ; if ( VAR_3 != null ) { VAR_2 . METHOD_2 ( context , VAR_3 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tAssert.assertEquals(1L, statuses.length);\n \t\tAssert.assertTrue(\n \t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).toString())\n \t\t);\n \t}", "fixed": " \t\tAssert.assertEquals(1L, statuses.length);\n \t\tAssert.assertTrue(\n \t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).getPath())\n \t\t);\n \t}", "sourceBeforeFix": "new Path(bucketPath,\"test-\" + i + '-'+ j).toString()", "sourceAfterFix": "new Path(bucketPath,\"test-\" + i + '-'+ j).getPath()"}
{"fixCommitSHA1": "24d0df5830912b3ad11fdbc6448eb68eeaced28b", "projectName": "Bukkit.Bukkit", "bugType": "Change Identifier Used", "problem": "                     Enchantment enchantment = Enchantment.getByName(entry.getKey().toString());\n                     if ((enchantment != null) && (entry.getValue() instanceof Integer)) {\n                        result.addEnchantment(enchantment, (Integer) entry.getValue());\n                     }\n                 }\n             }", "fixed": "                     Enchantment enchantment = Enchantment.getByName(entry.getKey().toString());\n                     if ((enchantment != null) && (entry.getValue() instanceof Integer)) {\n                        result.addUnsafeEnchantment(enchantment, (Integer) entry.getValue());\n                     }\n                 }\n             }", "sourceBeforeFix": "result.addEnchantment(enchantment,(Integer)entry.getValue())", "sourceAfterFix": "result.addUnsafeEnchantment(enchantment,(Integer)entry.getValue())"}
{"fixCommitSHA1": "e90c2eeedb70da6a3ca0d27a048b4752a5dc16e1", "projectName": "google.closure-compiler", "bugType": "Same Function Swap Args", "problem": "         .insertBefore(error.node, \"!\")\n         .setDescription(\"Make type non-nullable\")\n         .build();\n    return ImmutableList.of(qmark, bang);\n   }\n   private static SuggestedFix removeNode(JSError error) {", "fixed": "         .insertBefore(error.node, \"!\")\n         .setDescription(\"Make type non-nullable\")\n         .build();\n    return ImmutableList.of(bang, qmark);\n   }\n   private static SuggestedFix removeNode(JSError error) {", "sourceBeforeFix": "ImmutableList.of(qmark,bang)", "sourceAfterFix": "ImmutableList.of(bang,qmark)"}
{"problem": "public void METHOD_1 ( java.lang.Integer VAR_1 ) { for ( int i = 1 ; i <= VAR_1 ; i ++ ) { VAR_2 . remove ( VAR_3 ) ; ( VAR_3 ) -- ; } VAR_4 . METHOD_2 ( ) ; VAR_5 . setText ( VAR_3 . toString ( ) ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.Integer VAR_1 ) { for ( int i = 1 ; i <= VAR_1 ; i ++ ) { VAR_2 . remove ( VAR_3 ) ; ( VAR_3 ) -- ; } for ( int i = 0 ; i <= ( ( VAR_3 ) + 1 ) ; i ++ ) { VAR_2 . set ( i , i ) ; } VAR_4 . METHOD_2 ( ) ; VAR_5 . setText ( VAR_3 . toString ( ) ) ; }\n"}
{"fixCommitSHA1": "9b86a4684080319a63970fbc4d8b49c4e8113df5", "projectName": "alibaba.fastjson", "bugType": "Change Identifier Used", "problem": "                 FieldSerializer fieldDeser = beanSerializer.getFieldSerializer(propertyName);\n                 if (fieldDeser != null) {\n                     try {\n                        Object val = fieldDeser.getPropertyValue(currentObject);\n                         results.add(val);\n                     } catch (InvocationTargetException ex) {\n                         throw new JSONException(\"getFieldValue error.\" + propertyName, ex);", "fixed": "                 FieldSerializer fieldDeser = beanSerializer.getFieldSerializer(propertyName);\n                 if (fieldDeser != null) {\n                     try {\n                        Object val = fieldDeser.getPropertyValueDirect(currentObject);\n                         results.add(val);\n                     } catch (InvocationTargetException ex) {\n                         throw new JSONException(\"getFieldValue error.\" + propertyName, ex);", "sourceBeforeFix": "fieldDeser.getPropertyValue(currentObject)", "sourceAfterFix": "fieldDeser.getPropertyValueDirect(currentObject)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . info ( STRING_1 ) ; TYPE_3 . METHOD_2 ( VAR_1 , true , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 ) ; TYPE_2 . info ( STRING_20 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . info ( STRING_1 ) ; TYPE_3 . METHOD_2 ( VAR_1 , true , false , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 ) ; TYPE_2 . info ( STRING_20 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new TYPE_2 ( VAR_1 , null ) ) ; VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_5 = VAR_6 . METHOD_4 ( VAR_2 ) ; VAR_7 = VAR_3 . METHOD_5 ( VAR_5 ) ; VAR_8 = METHOD_6 ( VAR_4 , VAR_7 ) ; METHOD_7 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new TYPE_2 ( VAR_1 , null ) ) ; VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_5 = VAR_6 . METHOD_4 ( VAR_2 ) ; VAR_7 = VAR_3 . METHOD_5 ( VAR_5 ) ; VAR_8 = METHOD_6 ( VAR_4 , VAR_7 ) ; }\n"}
{"problem": "private static void METHOD_1 ( ) throws TYPE_1 { short x = ( ( short ) ( ( java.lang.Math.random ( ) ) * INT_1 ) ) ; java.lang.System.out.println ( ( ( STRING_1 + x ) + STRING_2 ) ) ; int VAR_1 = TYPE_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( x , VAR_1 ) ; }\n", "fixed": "private static void METHOD_1 ( ) throws TYPE_1 { short x = ( ( short ) ( ( java.lang.Math.random ( ) ) * INT_1 ) ) ; java.lang.System.out.println ( ( ( STRING_1 + x ) + STRING_2 ) ) ; float VAR_1 = TYPE_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( x , VAR_1 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( int position ) { TYPE_2 VAR_1 = VAR_2 [ position ] ; switch ( VAR_1 ) { case VAR_3 : return TYPE_3 . METHOD_2 ( this . VAR_4 . id , false ) ; case VAR_5 : return TYPE_3 . METHOD_2 ( this . VAR_4 . id , true ) ; case VAR_6 : return TYPE_4 . METHOD_2 ( this . VAR_4 . id ) ; default : return null ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( int position ) { TYPE_2 VAR_1 = VAR_2 [ position ] ; switch ( VAR_1 ) { case VAR_3 : return TYPE_3 . METHOD_2 ( VAR_4 . id , false ) ; case VAR_5 : return TYPE_3 . METHOD_2 ( VAR_4 . id , true ) ; case VAR_6 : return TYPE_4 . METHOD_2 ( VAR_4 . id ) ; default : return null ; } }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 target ) { final boolean VAR_1 = ( ( java.lang.Boolean ) ( this . METHOD_2 ( ) ) ) ; for ( final TYPE_2 attribute : VAR_2 . METHOD_3 ( ) ) { attribute . METHOD_4 ( VAR_1 ) ; } target . addComponent ( VAR_3 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 target ) { final boolean VAR_1 = ( ( java.lang.Boolean ) ( this . METHOD_2 ( ) ) ) ; for ( final TYPE_2 attribute : VAR_2 . METHOD_3 ( ) ) { attribute . METHOD_4 ( VAR_1 ) ; } target . add ( VAR_3 ) ; }\n"}
{"problem": "private void METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { int i ; for ( i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { VAR_2 . METHOD_2 ( new TYPE_1 ( i , java.lang.Integer.parseInt ( VAR_1 . get ( i ) ) ) , false , INT_1 ) ; } VAR_3 = i ; METHOD_3 ( VAR_4 , VAR_1 , i ) ; }\n", "fixed": "private void METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { int i ; for ( i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { VAR_2 . METHOD_2 ( new TYPE_1 ( i , java.lang.Integer.parseInt ( VAR_1 . get ( i ) ) ) , false , INT_1 ) ; } METHOD_3 ( VAR_4 , VAR_1 , i ) ; VAR_3 = i ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String message ) { try { if ( ( ( out ) != null ) && ( ! ( out . METHOD_2 ( ) ) ) ) { java.lang.System.out.println ( ( STRING_1 + message ) ) ; out . METHOD_3 ( message ) ; out . METHOD_4 ( ) ; java.lang.String response = VAR_1 . METHOD_5 ( ) ; java.lang.System.out.println ( ( STRING_2 + response ) ) ; } } catch ( java.lang.Exception VAR_2 ) { java.lang.System.out.println ( STRING_3 ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String message ) { java.lang.String response ; try { if ( ( ( out ) != null ) && ( ! ( out . METHOD_2 ( ) ) ) ) { java.lang.System.out.println ( ( STRING_1 + message ) ) ; out . METHOD_3 ( message ) ; out . METHOD_4 ( ) ; response = VAR_1 . METHOD_5 ( ) ; java.lang.System.out.println ( ( STRING_2 + response ) ) ; } } catch ( java.lang.Exception VAR_2 ) { java.lang.System.out.println ( STRING_3 ) ; } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.util.ArrayList < TYPE_3 > VAR_3 ) { if ( VAR_1 == null ) return ; if ( VAR_2 . contains ( VAR_1 . p ) ) VAR_3 . add ( VAR_1 . p ) ; if ( VAR_2 . METHOD_2 ( VAR_4 ) ) { METHOD_1 ( VAR_5 , VAR_2 , VAR_3 ) ; METHOD_1 ( VAR_6 , VAR_2 , VAR_3 ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.util.ArrayList < TYPE_3 > VAR_3 ) { if ( VAR_1 == null ) return ; if ( VAR_2 . METHOD_2 ( VAR_4 ) ) { if ( VAR_2 . contains ( VAR_1 . p ) ) VAR_3 . add ( VAR_1 . p ) ; METHOD_1 ( VAR_5 , VAR_2 , VAR_3 ) ; METHOD_1 ( VAR_6 , VAR_2 , VAR_3 ) ; } }\n"}
{"fixCommitSHA1": "e668660a9ca77bc1bfc091967cc10975594d884e", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "                   ),\n                   configFactory.build(EC2AutoScalingStrategyConfig.class)\n               );\n            } else if (config.getStorageImpl().equalsIgnoreCase(\"noop\")) {\n               strategy = new NoopScalingStrategy();\n             } else {\n               throw new ISE(\"Invalid strategy implementation: %s\",config.getStrategyImpl());", "fixed": "                   ),\n                   configFactory.build(EC2AutoScalingStrategyConfig.class)\n               );\n            } else if (config.getStrategyImpl().equalsIgnoreCase(\"noop\")) {\n               strategy = new NoopScalingStrategy();\n             } else {\n               throw new ISE(\"Invalid strategy implementation: %s\",config.getStrategyImpl());", "sourceBeforeFix": "config.getStorageImpl()", "sourceAfterFix": "config.getStrategyImpl()"}
{"fixCommitSHA1": "c1301c436ddb98e943d087a35b5ae97aa8c1420c", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "   private GetStatusOptions() {\n     mCommonOptions = CommonOptions.defaults()\n        .setTtl(Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL))\n         .setTtlAction(Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION,\n             TtlAction.class));\n     mLoadMetadataType =", "fixed": "   private GetStatusOptions() {\n     mCommonOptions = CommonOptions.defaults()\n        .setTtl(Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL))\n         .setTtlAction(Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION,\n             TtlAction.class));\n     mLoadMetadataType =", "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { if ( event . METHOD_2 ( ) ) return ; event . METHOD_3 ( true ) ; TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( event . METHOD_5 ( ) ) . METHOD_6 ( VAR_1 class ) . VAR_2 , event . METHOD_5 ( ) , event . METHOD_7 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { if ( event . METHOD_2 ( ) ) return ; TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( event . METHOD_5 ( ) ) . METHOD_6 ( VAR_1 class ) . VAR_2 , event . METHOD_5 ( ) , event . METHOD_7 ( ) ) ; event . METHOD_3 ( true ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Throwable { class TYPE_1 implements TYPE_2 { public java.util.Map < java.lang.String , java.lang.String > METHOD_2 ( ) { return null ; } public void METHOD_3 ( ) { } } METHOD_4 ( VAR_1 class , STRING_1 ) ; TYPE_3 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) . METHOD_7 ( new TYPE_1 ( ) ) ; VAR_3 . METHOD_8 ( VAR_2 ) ; TYPE_4 . METHOD_9 ( VAR_4 ) . event ( STRING_2 ) . METHOD_10 ( ) . METHOD_11 ( ) . METHOD_12 ( ) . METHOD_13 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Throwable { class TYPE_1 implements TYPE_2 { public java.util.Map < java.lang.String , java.lang.String > METHOD_2 ( ) { return null ; } public void METHOD_3 ( ) { } } METHOD_4 ( VAR_1 class , STRING_1 ) ; TYPE_3 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) . METHOD_7 ( new TYPE_1 ( ) ) ; VAR_3 . METHOD_8 ( VAR_2 ) ; TYPE_4 . METHOD_9 ( VAR_4 ) . event ( STRING_2 ) . METHOD_10 ( ) . METHOD_11 ( ) . METHOD_12 ( ) ; }\n"}
{"problem": "private void METHOD_1 ( final TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( false ) ; VAR_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( VAR_2 ) ; VAR_3 . METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_5 , VAR_3 , TYPE_3 . getContext ( ) ) ; }\n", "fixed": "private void METHOD_1 ( final TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( true ) ; VAR_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( VAR_2 ) ; VAR_3 . METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_5 , VAR_3 , TYPE_3 . getContext ( ) ) ; }\n"}
{"fixCommitSHA1": "ebe38aec141cc8fcfd56b71bf167d6370808806a", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         AlluxioURI alluxioUriToLoad = alluxioUri.join(file);\n         LOG.debug(\"Loading metadata for Alluxio uri: \" + alluxioUriToLoad);\n        AlluxioURI alluxioPath = new AlluxioURI(alluxioUri.getPath());\n         if (!fs.exists(alluxioPath)) {\n           fs.loadMetadata(alluxioPath);\n         }", "fixed": "         AlluxioURI alluxioUriToLoad = alluxioUri.join(file);\n         LOG.debug(\"Loading metadata for Alluxio uri: \" + alluxioUriToLoad);\n        AlluxioURI alluxioPath = new AlluxioURI(alluxioUriToLoad.getPath());\n         if (!fs.exists(alluxioPath)) {\n           fs.loadMetadata(alluxioPath);\n         }", "sourceBeforeFix": "alluxioUri.getPath()", "sourceAfterFix": "alluxioUriToLoad.getPath()"}
{"problem": "private void METHOD_1 ( int VAR_1 , byte VAR_2 ) throws TYPE_1 { byte VAR_3 = METHOD_2 ( VAR_1 ) ; byte VAR_4 = VAR_3 ; VAR_4 = ( ( byte ) ( VAR_4 & ( ~ VAR_2 ) ) ) ; METHOD_3 ( VAR_1 , VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 , byte VAR_2 ) throws TYPE_1 { byte VAR_3 = METHOD_2 ( VAR_1 ) ; byte VAR_4 = VAR_3 ; VAR_4 = ( ( byte ) ( VAR_4 & ( ~ VAR_2 ) ) ) ; METHOD_3 ( VAR_1 , VAR_4 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this . VAR_2 , this . VAR_3 , this . VAR_4 , this . VAR_5 , this . VAR_6 , this . VAR_7 ) ; VAR_8 = new java.util.ArrayList ( this . VAR_9 ) ; VAR_10 = this . VAR_11 . METHOD_1 ( ) ; VAR_12 = ( ( TYPE_2 ) ( this . VAR_13 . METHOD_1 ( ) ) ) ; VAR_14 = ( ( TYPE_2 ) ( this . VAR_15 . METHOD_1 ( ) ) ) ; return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this . VAR_2 , this . VAR_3 , this . VAR_4 , this . VAR_5 , this . VAR_6 , this . VAR_7 ) ; VAR_8 = new java.util.ArrayList ( this . VAR_9 ) ; VAR_10 = this . VAR_11 . METHOD_1 ( ) ; VAR_12 = this . VAR_13 ; VAR_14 = this . VAR_15 ; return VAR_1 ; }\n"}
{"problem": "public static int METHOD_1 ( android.content.Context context ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( context . METHOD_2 ( VAR_3 ) ) ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; return ( ( int ) ( ( ( ( double ) ( VAR_4 ) ) / ( ( double ) ( VAR_5 ) ) ) * INT_1 ) ) ; }\n", "fixed": "public static int METHOD_1 ( android.content.Context context ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( context . METHOD_2 ( VAR_3 ) ) ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; return INT_1 - ( ( int ) ( ( ( ( double ) ( VAR_4 ) ) / ( ( double ) ( VAR_5 ) ) ) * INT_1 ) ) ; }\n"}
{"problem": "public final void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . assertEquals ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_1 . setState ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 . METHOD_3 ( ) , VAR_3 ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { VAR_1 . update ( ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; } }\n", "fixed": "public final void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . assertEquals ( VAR_1 . METHOD_3 ( ) , VAR_3 ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { VAR_1 . update ( ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( false ) ; if ( VAR_2 != null ) { java.io.File VAR_3 = METHOD_3 ( VAR_4 . get ( VAR_2 ) . getName ( ) ) ; if ( VAR_3 != null ) new TYPE_2 ( STRING_1 , VAR_4 . get ( VAR_2 ) . METHOD_4 ( ) , VAR_3 . METHOD_4 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( false ) ; if ( VAR_2 != null ) { java.io.File VAR_3 = METHOD_3 ( VAR_4 . get ( VAR_2 ) . getName ( ) ) ; if ( VAR_3 != null ) new TYPE_2 ( STRING_1 , VAR_3 . METHOD_4 ( ) , VAR_4 . get ( VAR_2 ) . METHOD_4 ( ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( android.view.View view ) { int VAR_1 = ( ( int ) ( VAR_2 . METHOD_2 ( ) ) ) ; if ( VAR_1 == 0 ) { VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( 1 ) ; } else { VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_4 . METHOD_6 ( ) ; VAR_2 . METHOD_5 ( 0 ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { int VAR_1 = ( ( int ) ( VAR_2 . METHOD_2 ( ) ) ) ; if ( VAR_1 == 0 ) { VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_4 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( 1 ) ; } else { VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_6 ( ) ; VAR_2 . METHOD_5 ( 0 ) ; } }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; TYPE_2 b = new TYPE_2 ( ) ; b . METHOD_4 ( METHOD_5 ( ) . getString ( VAR_4 ) , METHOD_5 ( ) . getString ( VAR_5 ) ) ; VAR_3 . METHOD_6 ( b ) ; VAR_3 . show ( METHOD_7 ( ) , VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_2 != null ) VAR_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; TYPE_2 b = new TYPE_2 ( ) ; b . METHOD_4 ( METHOD_5 ( ) . getString ( VAR_4 ) , METHOD_5 ( ) . getString ( VAR_5 ) ) ; VAR_3 . METHOD_6 ( b ) ; VAR_3 . show ( METHOD_7 ( ) , VAR_6 ) ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "19558f8d98358fece627fda336050054a1fce211", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "             logger.debug(\"The WebSocket handshake succeeded but the dispatched URI failed {}:{}. \" +\n                     \"The WebSocket connection is still open and client can continue sending messages.\", message, errorCode);\n         } else {\n            logger.debug(\"{} {}\", errorCode, message);\n         }\n     }", "fixed": "             logger.debug(\"The WebSocket handshake succeeded but the dispatched URI failed {}:{}. \" +\n                     \"The WebSocket connection is still open and client can continue sending messages.\", message, errorCode);\n         } else {\n            logger.warn(\"{} {}\", errorCode, message);\n         }\n     }", "sourceBeforeFix": "logger.debug(\"{} {}\",errorCode,message)", "sourceAfterFix": "logger.warn(\"{} {}\",errorCode,message)"}
{"problem": "public boolean METHOD_1 ( ) { return ( ( ( ( ( ( x ) + ( VAR_1 ) ) + ( VAR_2 ) ) < 0 ) || ( ( ( ( y ) + ( VAR_3 ) ) + ( VAR_4 ) ) < 0 ) ) || ( ( ( ( x ) + ( VAR_1 ) ) - ( VAR_2 ) ) > ( VAR_5 ) ) ) || ( ( ( ( y ) + ( VAR_3 ) ) - ( VAR_4 ) ) > ( VAR_6 ) ) ; }\n", "fixed": "public boolean METHOD_1 ( ) { return ( ( ( ( ( ( x ) + ( VAR_1 ) ) + ( VAR_2 ) ) < 0 ) || ( ( ( ( x ) + ( VAR_1 ) ) - ( VAR_2 ) ) > ( VAR_5 ) ) ) || ( ( ( ( y ) + ( VAR_3 ) ) + ( VAR_4 ) ) < 0 ) ) || ( ( ( ( y ) + ( VAR_3 ) ) - ( VAR_4 ) ) > ( VAR_6 ) ) ; }\n"}
{"fixCommitSHA1": "ef43827a7b481bc19b5d738a4c94b62294293eea", "projectName": "brettwooldridge.HikariCP", "bugType": "Wrong Function Name", "problem": "                softEvictConnections();\n                abortActiveConnections(assassinExecutor);\n             }\n            while (getTotalConnections() > 0 && elapsedTimeMs(start) < TimeUnit.SECONDS.toNanos(5));\n          } finally {\n             assassinExecutor.shutdown();\n             assassinExecutor.awaitTermination(5L, TimeUnit.SECONDS);", "fixed": "                softEvictConnections();\n                abortActiveConnections(assassinExecutor);\n             }\n            while (getTotalConnections() > 0 && elapsedTimeMs(start) < TimeUnit.SECONDS.toMillis(5));\n          } finally {\n             assassinExecutor.shutdown();\n             assassinExecutor.awaitTermination(5L, TimeUnit.SECONDS);", "sourceBeforeFix": "TimeUnit.SECONDS.toNanos(5)", "sourceAfterFix": "TimeUnit.SECONDS.toMillis(5)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public synchronized void METHOD_1 ( int VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 . add ( VAR_1 ) , ( STRING_1 + VAR_1 ) ) ; VAR_3 . info ( ( STRING_2 + VAR_1 ) ) ; if ( ( VAR_4 ) == null ) { return ; } TYPE_2 VAR_5 = VAR_4 ; if ( ( VAR_5 != null ) && ( VAR_5 . METHOD_3 ( ) ) ) { VAR_5 . METHOD_4 ( VAR_1 ) ; } else { VAR_3 . info ( ( STRING_3 + VAR_1 ) ) ; } }\n", "fixed": "public synchronized void METHOD_1 ( int VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 . add ( VAR_1 ) , ( STRING_1 + VAR_1 ) ) ; VAR_3 . info ( ( STRING_2 + VAR_1 ) ) ; if ( ( VAR_4 ) == null ) { return ; } VAR_4 . METHOD_4 ( VAR_1 ) ; }\n"}
{"problem": "public java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = null ; if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; do { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_4 = VAR_1 . getInt ( VAR_5 ) ; VAR_6 = VAR_1 . getString ( VAR_7 ) ; VAR_8 = VAR_1 . METHOD_3 ( VAR_9 ) ; VAR_2 . add ( VAR_3 ) ; } while ( VAR_1 . METHOD_4 ( ) ) ; } return VAR_2 ; }\n", "fixed": "public java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; if ( VAR_1 . METHOD_2 ( ) ) { do { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_4 = VAR_1 . getInt ( VAR_5 ) ; VAR_6 = VAR_1 . getString ( VAR_7 ) ; VAR_8 = VAR_1 . METHOD_3 ( VAR_9 ) ; VAR_2 . add ( VAR_3 ) ; } while ( VAR_1 . METHOD_4 ( ) ) ; } return VAR_2 ; }\n"}
{"problem": "private void METHOD_1 ( android.content.Context context ) { TYPE_1 VAR_1 = new TYPE_2 ( context ) . METHOD_2 ( new TYPE_3 ( ( ( INT_1 * INT_2 ) * INT_2 ) ) ) . METHOD_3 ( ( ( INT_1 * INT_2 ) * INT_2 ) ) . METHOD_4 ( ) . build ( ) ; TYPE_4 . METHOD_5 ( ) . init ( VAR_1 ) ; }\n", "fixed": "private void METHOD_1 ( android.content.Context context ) { TYPE_1 VAR_1 = new TYPE_2 ( context ) . METHOD_2 ( new TYPE_3 ( ( ( INT_1 * INT_2 ) * INT_2 ) ) ) . METHOD_4 ( ) . build ( ) ; TYPE_4 . METHOD_5 ( ) . init ( VAR_1 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( long VAR_1 , TYPE_2 context , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) throws java.lang.Exception { TYPE_5 VAR_4 = TYPE_5 . METHOD_2 ( ) ; TYPE_6 VAR_5 = VAR_6 . METHOD_3 ( VAR_7 class , VAR_1 ) ; if ( VAR_5 == null ) return TYPE_1 . status ( VAR_8 ) . METHOD_4 ( VAR_4 . get ( STRING_1 , VAR_1 ) ) . build ( ) ; return METHOD_5 ( VAR_2 , VAR_3 , context , VAR_5 , TYPE_7 . METHOD_6 ( java.util.Calendar.getInstance ( ) ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( long VAR_1 ) throws java.lang.Exception { TYPE_5 VAR_4 = TYPE_5 . METHOD_2 ( ) ; TYPE_6 VAR_5 = VAR_6 . METHOD_3 ( VAR_7 class , VAR_1 ) ; if ( VAR_5 == null ) return TYPE_1 . status ( VAR_8 ) . METHOD_4 ( VAR_4 . get ( STRING_1 , VAR_1 ) ) . build ( ) ; return METHOD_5 ( VAR_5 , TYPE_7 . METHOD_6 ( java.util.Calendar.getInstance ( ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { switch ( VAR_1 . getId ( ) ) { case VAR_2 : android.content.Intent VAR_3 = new android.content.Intent ( this , VAR_4 class ) ; VAR_3 . METHOD_2 ( STRING_1 , true ) ; METHOD_3 ( VAR_3 ) ; break ; default : break ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { switch ( VAR_1 . getId ( ) ) { case VAR_2 : android.content.Intent intent = new android.content.Intent ( this , VAR_4 class ) ; intent . METHOD_2 ( STRING_1 , true ) ; METHOD_3 ( intent ) ; break ; default : break ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleSheetsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GoogleSheetsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "20e6e9afcad4cf6ba8ac455becbcddd7f9e36284", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         \n        public Details(DetailAST ast) {\n             this.ast = ast;\n         }", "fixed": "         \n        Details(DetailAST ast) {\n             this.ast = ast;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     span.log(fields);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n             return message;\n         }", "fixed": "                     span.log(fields);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n             return message;\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"problem": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; TYPE_4 a = this . getActivity ( ) ; TYPE_5 b = ( ( TYPE_5 ) ( a . METHOD_3 ( VAR_5 ) ) ) ; b . METHOD_4 ( STRING_1 ) ; TYPE_6 VAR_6 = ( ( TYPE_6 ) ( view . METHOD_3 ( VAR_7 ) ) ) ; VAR_6 . setText ( TYPE_7 . METHOD_5 ( getString ( VAR_8 ) ) ) ; return view ; }\n", "fixed": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; TYPE_6 VAR_6 = ( ( TYPE_6 ) ( view . METHOD_3 ( VAR_7 ) ) ) ; VAR_6 . setText ( TYPE_7 . METHOD_5 ( getString ( VAR_8 ) ) ) ; return view ; }\n"}
{"problem": "public synchronized void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; if ( ( VAR_1 ) == null ) { TYPE_1 . METHOD_3 ( VAR_2 , STRING_2 ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; return ; } try { VAR_1 . METHOD_1 ( ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_2 ( STRING_3 ) ; METHOD_5 ( VAR_4 ) ; } catch ( TYPE_3 VAR_4 ) { METHOD_2 ( STRING_3 ) ; METHOD_5 ( VAR_4 ) ; } }\n", "fixed": "public synchronized void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; if ( ( VAR_1 ) == null ) { TYPE_1 . METHOD_3 ( VAR_2 , STRING_2 ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; return ; } try { VAR_1 . METHOD_1 ( ) ; VAR_1 = null ; } catch ( TYPE_2 VAR_4 ) { METHOD_2 ( STRING_3 ) ; METHOD_5 ( VAR_4 ) ; } catch ( TYPE_3 VAR_4 ) { METHOD_2 ( STRING_3 ) ; METHOD_5 ( VAR_4 ) ; } }\n"}
{"problem": "public static void METHOD_1 ( java.lang.String title , java.lang.String type , int VAR_1 ) { if ( VAR_2 ) return ; if ( VAR_3 ) VAR_4 . info ( ( ( ( ( ( STRING_1 + title ) + STRING_2 ) + type ) + STRING_3 ) + VAR_1 ) ) ; VAR_5 . type ( VAR_6 ) . METHOD_2 ( VAR_7 ) . METHOD_3 ( STRING_4 ) . METHOD_4 ( STRING_5 ) . METHOD_5 ( title ) . label ( type ) . value ( VAR_1 ) . build ( ) . METHOD_6 ( false ) ; }\n", "fixed": "public static void METHOD_1 ( java.lang.String title , java.lang.String type , int VAR_1 ) { if ( VAR_2 ) return ; if ( VAR_3 ) VAR_4 . info ( ( ( ( ( ( STRING_1 + title ) + STRING_2 ) + type ) + STRING_3 ) + VAR_1 ) ) ; VAR_5 . type ( VAR_6 ) . METHOD_2 ( VAR_7 ) . METHOD_3 ( STRING_4 ) . METHOD_4 ( STRING_5 ) . METHOD_5 ( title ) . label ( type ) . value ( VAR_1 ) . build ( ) . METHOD_6 ( ) ; }\n"}
{"problem": "public void update ( float VAR_1 ) { float x = VAR_2 . METHOD_1 ( ) . METHOD_2 ( ) . x ; if ( x >= ( VAR_3 ) ) VAR_2 . METHOD_3 ( ) ; x += ( VAR_4 ) * VAR_1 ; VAR_2 . METHOD_1 ( ) . METHOD_4 ( x , 0 , 0 ) ; }\n", "fixed": "public void update ( float VAR_1 ) { float x = VAR_2 . METHOD_1 ( ) . METHOD_2 ( ) . x ; float y = VAR_2 . METHOD_1 ( ) . METHOD_2 ( ) . y ; if ( x >= ( VAR_3 ) ) VAR_2 . METHOD_3 ( ) ; x += ( VAR_4 ) * VAR_1 ; VAR_2 . METHOD_1 ( ) . METHOD_4 ( x , y , 0 ) ; }\n"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentTo(node2)"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { synchronized ( VAR_3 ) { METHOD_2 ( VAR_2 ) ; java.util.List < TYPE_1 > VAR_4 = VAR_3 . get ( VAR_1 ) ; if ( VAR_4 == null ) { VAR_4 = new java.util.LinkedList < TYPE_1 > ( ) ; VAR_3 . put ( VAR_1 , VAR_4 ) ; } if ( ( VAR_4 . contains ( VAR_2 ) ) == false ) { VAR_4 . add ( VAR_2 ) ; } } }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { synchronized ( VAR_3 ) { METHOD_2 ( VAR_2 ) ; java.util.List < TYPE_1 > VAR_4 = VAR_3 . get ( VAR_1 ) ; if ( VAR_4 == null ) { VAR_4 = new java.util.LinkedList < > ( ) ; VAR_3 . put ( VAR_1 , VAR_4 ) ; } if ( ! ( VAR_4 . contains ( VAR_2 ) ) ) { VAR_4 . add ( VAR_2 ) ; } } }\n"}
{"problem": "private float METHOD_1 ( final int VAR_1 , final int ... VAR_2 ) { float sum = VAR_1 ; for ( int num : VAR_2 ) { sum += num ; } if ( sum == 0 ) return 0.0F ; if ( sum == VAR_1 ) return FLOAT_1 ; return ( VAR_1 / sum ) * INT_1 ; }\n", "fixed": "private float METHOD_1 ( final float ... values ) { float sum = 0 ; for ( float num : values ) { sum += num ; } if ( sum == 0.0F ) return 0.0F ; if ( sum == ( values [ 0 ] ) ) return FLOAT_1 ; return ( ( values [ 0 ] ) / sum ) * INT_1 ; }\n"}
{"problem": "public boolean METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) > 0 ) { boolean VAR_2 = false ; if ( ( VAR_3 ) instanceof TYPE_1 ) { VAR_2 = ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_1 ( ) ; } if ( ! VAR_2 ) { VAR_1 . METHOD_3 ( ) ; } return true ; } else { return false ; } }\n", "fixed": "public boolean METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) > 1 ) { boolean VAR_2 = false ; if ( ( VAR_3 ) instanceof TYPE_1 ) { VAR_2 = ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_1 ( ) ; } if ( ! VAR_2 ) { VAR_1 . METHOD_3 ( ) ; } return true ; } else { return false ; } }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { int x = VAR_1 . METHOD_2 ( ) ; int y = VAR_1 . METHOD_3 ( ) ; if ( ( ( ( x >= 0 ) && ( x < ( VAR_2 ) ) ) && ( y >= 0 ) ) && ( y < ( VAR_3 ) ) ) { return true ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { int x = VAR_1 . METHOD_2 ( ) ; int y = VAR_1 . METHOD_3 ( ) ; if ( ( ( ( x >= 0 ) && ( x < ( VAR_2 ) ) ) && ( y >= 0 ) ) && ( y < ( VAR_3 ) ) ) { return false ; } return true ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AMQPEndpointBuilder\n             extends\n                 AMQPEndpointConsumerBuilder, AMQPEndpointProducerBuilder {\n         default AdvancedAMQPEndpointBuilder advanced() {", "fixed": "     \n    public interface AMQPEndpointBuilder\n             extends\n                 AMQPEndpointConsumerBuilder, AMQPEndpointProducerBuilder {\n         default AdvancedAMQPEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "TYPE_1 METHOD_1 ( java.util.ArrayList < TYPE_2 > VAR_1 ) { if ( ( VAR_1 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_2 : VAR_1 ) { if ( VAR_2 instanceof TYPE_1 ) { return ( ( TYPE_1 ) ( VAR_2 ) ) ; } } } return null ; }\n", "fixed": "TYPE_1 METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { if ( ( VAR_1 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_2 : VAR_1 ) { if ( VAR_2 instanceof TYPE_1 ) { return ( ( TYPE_1 ) ( VAR_2 ) ) ; } } } return null ; }\n"}
{"problem": "public void METHOD_1 ( ) { for ( int i = VAR_1 ; i < end ; i ++ ) VAR_2 [ i ] = TYPE_1 . METHOD_2 ( VAR_3 , VAR_4 . get ( i ) , VAR_4 . get ( i ) ) ; VAR_5 . METHOD_3 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { for ( int i = start ; i < end ; i ++ ) VAR_2 [ i ] = TYPE_1 . METHOD_2 ( VAR_3 , VAR_4 . get ( i ) , VAR_4 . get ( i ) ) ; VAR_5 . METHOD_3 ( ) ; }\n"}
{"fixCommitSHA1": "7e53685310fa22abd12307e141511184fa6ede3a", "projectName": "apache.hive", "bugType": "Wrong Function Name", "problem": "   public void setOutputFormatClass(Class<? extends HiveOutputFormat> outputFormatClass) {\n     this.outputFormatClass = outputFormatClass;\n     tPartition.getSd().setOutputFormat(HiveFileFormatUtils\n        .getOutputFormatSubstitute(outputFormatClass).toString());\n   }\n   final public Class<? extends InputFormat> getInputFormatClass()", "fixed": "   public void setOutputFormatClass(Class<? extends HiveOutputFormat> outputFormatClass) {\n     this.outputFormatClass = outputFormatClass;\n     tPartition.getSd().setOutputFormat(HiveFileFormatUtils\n        .getOutputFormatSubstitute(outputFormatClass).getName());\n   }\n   final public Class<? extends InputFormat> getInputFormatClass()", "sourceBeforeFix": "HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).toString()", "sourceAfterFix": "HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).getName()"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; for ( TYPE_2 VAR_4 : VAR_5 ) { VAR_1 . METHOD_4 ( VAR_4 . x , VAR_4 . y , INT_1 ) ; } VAR_1 . end ( ) ; VAR_1 . METHOD_3 ( VAR_6 ) ; if ( ( VAR_7 ) != null ) METHOD_5 ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; for ( TYPE_2 VAR_4 : VAR_5 ) { VAR_1 . METHOD_4 ( VAR_4 . x , VAR_4 . y , INT_1 ) ; } VAR_1 . end ( ) ; VAR_1 . METHOD_3 ( VAR_6 ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.lang.Throwable { TYPE_1 < TYPE_2 > VAR_3 = TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_4 class ) ; TYPE_2 VAR_5 = VAR_3 . getData ( ) ; TYPE_5 . assertNotNull ( VAR_5 ) ; TYPE_5 . assertNotNull ( VAR_5 . METHOD_5 ( ) ) ; TYPE_5 . assertTrue ( TYPE_6 . contains ( VAR_5 . METHOD_5 ( ) , VAR_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.lang.Throwable { TYPE_1 < TYPE_2 > VAR_3 = TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_4 class ) ; TYPE_2 VAR_5 = VAR_3 . getData ( ) ; assertNotNull ( VAR_5 ) ; assertNotNull ( VAR_5 . METHOD_5 ( ) ) ; assertTrue ( TYPE_6 . contains ( VAR_5 . METHOD_5 ( ) , VAR_2 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = true ; VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , VAR_3 . METHOD_2 ( ) ) ; java.util.Collections.sort ( VAR_3 . METHOD_2 ( ) , VAR_3 . METHOD_6 ( ) ) ; VAR_4 . METHOD_7 ( ) ; VAR_4 . METHOD_8 ( ) ; VAR_4 . METHOD_9 ( ) ; METHOD_10 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = true ; VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , VAR_3 . METHOD_2 ( ) ) ; java.util.Collections.sort ( VAR_3 . METHOD_2 ( ) , VAR_3 . METHOD_6 ( ) ) ; VAR_4 . METHOD_7 ( ) ; VAR_4 . METHOD_9 ( ) ; METHOD_10 ( ) ; }\n"}
{"problem": "public final void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , null ) ; VAR_1 . METHOD_2 ( VAR_5 , null ) ; TYPE_2 . METHOD_3 ( VAR_6 ) ; TYPE_2 . METHOD_3 ( VAR_7 ) ; TYPE_2 . METHOD_4 ( VAR_5 ) . METHOD_5 ( VAR_3 ) ; }\n", "fixed": "public final void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , null ) ; VAR_1 . METHOD_2 ( VAR_5 , null , false ) ; TYPE_2 . METHOD_3 ( VAR_6 ) ; TYPE_2 . METHOD_3 ( VAR_7 ) ; TYPE_2 . METHOD_4 ( VAR_5 ) . METHOD_5 ( VAR_3 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { if ( ! ( METHOD_2 ( VAR_2 ) ) ) { if ( VAR_1 . METHOD_3 ( METHOD_4 ( ) , METHOD_5 ( ) ) ) return null ; if ( METHOD_6 ( ) ) { return TYPE_3 . METHOD_7 ( VAR_3 , METHOD_4 ( ) , ( ( METHOD_5 ( ) ) - ( METHOD_8 ( ) ) ) ) ; } } return this ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { if ( ! ( METHOD_2 ( VAR_2 ) ) ) { if ( VAR_1 . METHOD_3 ( METHOD_4 ( ) , METHOD_5 ( ) ) ) return null ; if ( METHOD_6 ( ) ) { return TYPE_3 . METHOD_7 ( VAR_3 , METHOD_4 ( ) , ( ( METHOD_5 ( ) ) - ( METHOD_8 ( ) ) ) , path ( ) ) ; } } return this ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( int VAR_1 , int index ) { TYPE_1 t = VAR_2 . field ( VAR_1 , index ) . METHOD_2 ( ) ; if ( t == null ) { return STRING_1 ; } else if ( ( t . METHOD_3 ( ) ) == ( VAR_3 ) ) { return STRING_2 ; } return STRING_3 ; }\n", "fixed": "public java.lang.String METHOD_1 ( int VAR_1 , int index ) { TYPE_1 t = VAR_2 . field ( VAR_1 , index ) . METHOD_2 ( ) ; if ( t == null ) { return STRING_1 ; } else if ( t . METHOD_3 ( ) . equals ( VAR_3 ) ) { return STRING_2 ; } return STRING_3 ; }\n"}
{"problem": "protected java.lang.String METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; for ( java.lang.String key : VAR_1 ) if ( ! ( TYPE_2 . equals ( key ) ) ) VAR_2 . METHOD_2 ( key , this . METHOD_3 ( key ) ) ; return VAR_2 . toString ( ) ; }\n", "fixed": "protected java.lang.String METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; for ( java.lang.String key : VAR_1 ) { if ( TYPE_2 . equals ( key ) ) continue ; java.lang.String value = this . METHOD_3 ( key ) ; if ( ( value == null ) || ( value . isEmpty ( ) ) ) continue ; VAR_2 . METHOD_2 ( key , value ) ; } return VAR_2 . toString ( ) ; }\n"}
{"fixCommitSHA1": "d365b8d6749db89c4accb4419be17293cb07cbda", "projectName": "naver.pinpoint", "bugType": "Wrong Function Name", "problem": "     }\n     public static String getHost() {\n        return DatabaseDescriptor.getListenAddress().getHostName();\n     }\n     public static int getNativeTransportPort() {", "fixed": "     }\n     public static String getHost() {\n        return DatabaseDescriptor.getListenAddress().getHostAddress();\n     }\n     public static int getNativeTransportPort() {", "sourceBeforeFix": "DatabaseDescriptor.getListenAddress().getHostName()", "sourceAfterFix": "DatabaseDescriptor.getListenAddress().getHostAddress()"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { if ( ( TYPE_4 . METHOD_2 ( VAR_1 , STRING_1 ) ) && ( ( VAR_3 . get ( STRING_2 ) ) != STRING_3 ) ) return false ; if ( ( TYPE_5 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) && ( ! ( TYPE_6 . METHOD_5 ( VAR_2 . METHOD_4 ( ) , VAR_3 , VAR_1 ) ) ) ) return false ; return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { if ( ( TYPE_5 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) && ( ! ( TYPE_6 . METHOD_5 ( VAR_2 . METHOD_4 ( ) , VAR_3 , VAR_1 ) ) ) ) return false ; return true ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_2 = TYPE_3 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( true ) ; while ( ( VAR_2 == null ) || ( ( VAR_2 . type ) != ( VAR_3 ) ) ) { VAR_2 = TYPE_3 . METHOD_3 ( ) ; } return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_2 = TYPE_3 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( true ) ; while ( ( VAR_2 == null ) || ( ( VAR_2 . type ) != ( VAR_3 ) ) ) { VAR_2 = TYPE_3 . METHOD_3 ( ) ; } TYPE_2 . METHOD_4 ( false ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "62e7eb06d62b50ba6a03c25070c6ee1164c0962f", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "      * creation\n      */\n     protected ConnectionFactory createListenerConnectionFactory() {\n        return getConnectionFactory();\n     }\n     /**", "fixed": "      * creation\n      */\n     protected ConnectionFactory createListenerConnectionFactory() {\n        return getOrCreateConnectionFactory();\n     }\n     /**", "sourceBeforeFix": "getConnectionFactory()", "sourceAfterFix": "getOrCreateConnectionFactory()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"problem": "public boolean METHOD_1 ( android.view.View VAR_1 ) { switch ( VAR_2 ) { case VAR_3 : new TYPE_1 ( VAR_4 , VAR_5 . get ( position ) ) . show ( ) ; case VAR_6 : new TYPE_2 ( VAR_4 , VAR_7 . get ( position ) ) . show ( ) ; case VAR_8 : } return true ; }\n", "fixed": "public boolean METHOD_1 ( android.view.View VAR_1 ) { switch ( VAR_2 ) { case VAR_3 : new TYPE_1 ( VAR_4 , VAR_5 . get ( position ) ) . show ( ) ; break ; case VAR_6 : new TYPE_2 ( VAR_4 , VAR_7 . get ( position ) ) . show ( ) ; break ; case VAR_8 : break ; } return true ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ! ( ( VAR_1 . METHOD_2 ( ) ) instanceof TYPE_2 ) ) { VAR_1 . METHOD_3 ( new TYPE_2 ( ) ) ; } VAR_1 . add ( this , VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_1 . add ( METHOD_4 ( ) , VAR_4 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( ( VAR_1 . METHOD_2 ( ) ) instanceof TYPE_2 ) ) { VAR_1 . METHOD_3 ( new TYPE_2 ( ) ) ; } VAR_1 . add ( this , VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_1 . add ( METHOD_4 ( ) , VAR_4 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 item ) { VAR_1 . METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_2 . METHOD_3 ( ) ) ; i ++ ) { if ( VAR_2 . METHOD_4 ( i ) . equals ( item ) ) { VAR_1 . METHOD_5 ( i ) . METHOD_6 ( true ) ; } else { VAR_1 . METHOD_5 ( i ) . METHOD_6 ( false ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 item ) { VAR_1 . METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_2 . METHOD_3 ( ) ) ; i ++ ) { if ( ( VAR_1 . METHOD_5 ( i ) ) != null ) { if ( VAR_2 . METHOD_4 ( i ) . equals ( item ) ) { VAR_1 . METHOD_5 ( i ) . METHOD_6 ( true ) ; } else { VAR_1 . METHOD_5 ( i ) . METHOD_6 ( false ) ; } } } }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_1 . METHOD_3 ( true ) ; this . VAR_3 = VAR_1 ; METHOD_4 ( VAR_1 ) ; TYPE_2 VAR_4 = METHOD_5 ( ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_6 ( true ) ; } }\n", "fixed": "private void METHOD_1 ( ) { VAR_3 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_3 . METHOD_3 ( true ) ; METHOD_4 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_5 ( ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_6 ( true ) ; } }\n"}
{"problem": "private int METHOD_1 ( java.util.ArrayList < java.lang.String > rows ) { int VAR_1 = METHOD_2 ( rows . get ( 0 ) ) ; int VAR_2 = - 1 ; switch ( VAR_1 ) { case INT_1 : VAR_2 = 0 ; break ; case INT_2 : VAR_2 = 1 ; break ; case INT_3 : VAR_2 = INT_4 ; break ; } return VAR_2 ; }\n", "fixed": "private int METHOD_1 ( java.util.ArrayList < java.lang.String > rows ) { if ( ( rows == null ) || ( ( rows . size ( ) ) == 0 ) ) return 0 ; int VAR_1 = METHOD_2 ( rows . get ( 0 ) ) ; int VAR_2 = - 1 ; switch ( VAR_1 ) { case INT_1 : VAR_2 = 0 ; break ; case INT_2 : VAR_2 = 1 ; break ; case INT_3 : VAR_2 = INT_4 ; break ; } return VAR_2 ; }\n"}
{"problem": "public boolean METHOD_1 ( ) { int VAR_1 = ( VAR_2 . size ( ) ) - 1 ; java.lang.String VAR_3 = ( VAR_1 >= 0 ) ? VAR_2 . get ( VAR_1 ) : null ; if ( ( VAR_3 == null ) || ( TYPE_1 . METHOD_2 ( VAR_3 ) ) ) { VAR_2 . add ( STRING_1 ) ; return true ; } if ( VAR_3 . isEmpty ( ) ) { error ( STRING_2 ) ; return false ; } VAR_2 . remove ( VAR_3 ) ; return true ; }\n", "fixed": "public boolean METHOD_1 ( ) { int VAR_1 = ( VAR_2 . size ( ) ) - 1 ; java.lang.String VAR_3 = ( VAR_1 >= 0 ) ? VAR_2 . get ( VAR_1 ) : null ; if ( ( VAR_3 == null ) || ( TYPE_1 . METHOD_2 ( VAR_3 ) ) ) { VAR_2 . add ( STRING_1 ) ; return true ; } if ( VAR_3 . isEmpty ( ) ) { error ( STRING_2 ) ; return false ; } VAR_2 . remove ( VAR_1 ) ; return true ; }\n"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 < TYPE_3 > VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_2 < TYPE_4 > VAR_2 = METHOD_3 ( VAR_1 , STRING_2 ) ; java.util.Set < TYPE_2 < ? > > VAR_3 = TYPE_5 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( VAR_2 ) . METHOD_6 ( VAR_3 ) ; assertEquals ( STRING_3 , 0 , VAR_3 . size ( ) ) ; METHOD_7 ( VAR_3 . contains ( VAR_1 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 < TYPE_3 > VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_2 < TYPE_4 > VAR_2 = METHOD_3 ( VAR_1 , STRING_2 ) ; java.util.Set < TYPE_2 < ? > > VAR_3 = TYPE_5 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( VAR_2 ) . METHOD_6 ( VAR_3 ) ; assertEquals ( STRING_3 , 1 , VAR_3 . size ( ) ) ; assertTrue ( VAR_3 . contains ( VAR_1 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent VAR_2 = METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_4 ( VAR_4 ) ; METHOD_5 ( VAR_2 ) ; } else { TYPE_1 . show ( METHOD_6 ( ) , getString ( VAR_5 ) ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent VAR_2 = METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; if ( VAR_2 != null ) { METHOD_5 ( VAR_2 ) ; } else { TYPE_1 . show ( METHOD_6 ( ) , getString ( VAR_5 ) ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( null ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ; boolean result = VAR_2 . equals ( VAR_3 ) ; assertTrue ( result ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( null ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( null ) ; boolean result = VAR_2 . equals ( VAR_3 ) ; assertTrue ( result ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { this . VAR_1 = new java.io.File ( VAR_2 . METHOD_2 ( ) ) ; if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { if ( ! ( this . VAR_1 . METHOD_4 ( ) ) ) { throw new TYPE_1 ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) ; } } }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { this . VAR_1 = new java.io.File ( VAR_2 . METHOD_2 ( ) ) ; if ( ( ! ( VAR_1 . METHOD_3 ( ) ) ) && ( ! ( this . VAR_1 . METHOD_4 ( ) ) ) ) { throw new TYPE_1 ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { TYPE_1 node = TYPE_2 . METHOD_2 ( VAR_3 ) ; node . METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( STRING_1 , node . toString ( ) ) ; if ( ( ( VAR_4 ) != null ) && ( ! ( VAR_4 . METHOD_5 ( node ) ) ) ) { VAR_4 . METHOD_6 ( node ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { TYPE_1 node = TYPE_2 . METHOD_2 ( VAR_3 ) ; node . METHOD_3 ( VAR_2 ) ; if ( ( ( VAR_4 ) != null ) && ( ! ( VAR_4 . METHOD_5 ( node ) ) ) ) { VAR_4 . METHOD_6 ( node ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( new java.lang.String [ 0 ] ) . build ( ) ; TYPE_3 . assertEquals ( STRING_1 , 0 , VAR_1 . METHOD_4 ( ) . size ( ) ) ; VAR_1 . METHOD_4 ( ) . add ( STRING_2 ) ; }\n", "fixed": "public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( new java.lang.String [ 0 ] ) . build ( ) ; assertEquals ( STRING_1 , 0 , VAR_1 . METHOD_4 ( ) . size ( ) ) ; VAR_1 . METHOD_4 ( ) . add ( STRING_2 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String fail , java.lang.String VAR_3 ) { VAR_1 . METHOD_2 ( STRING_1 , ( fail != null ) ) ; VAR_1 . METHOD_2 ( STRING_2 , ( VAR_3 != null ) ) ; VAR_1 . METHOD_2 ( STRING_3 , ( VAR_2 != null ? VAR_2 : new TYPE_2 ( ) ) ) ; return STRING_4 ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String fail , java.lang.String VAR_3 ) { VAR_1 . METHOD_2 ( STRING_1 , ( fail != null ) ) ; VAR_1 . METHOD_2 ( STRING_2 , ( VAR_3 != null ) ) ; VAR_1 . METHOD_2 ( STRING_3 , new TYPE_2 ( ) ) ; return STRING_4 ; }\n"}
{"problem": "public synchronized void METHOD_1 ( java.lang.String ... VAR_1 ) { if ( null == ( this . METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { METHOD_4 ( VAR_1 [ i ] ) ; METHOD_5 ( VAR_1 [ i ] ) ; this . METHOD_6 ( ) . METHOD_7 ( ) ; } }\n", "fixed": "public synchronized void METHOD_1 ( java.lang.String ... VAR_1 ) { if ( null == ( this . METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { METHOD_4 ( VAR_1 [ i ] ) ; METHOD_5 ( VAR_1 [ i ] ) ; this . METHOD_6 ( ) . METHOD_7 ( VAR_1 [ i ] ) ; } }\n"}
{"fixCommitSHA1": "7c7309b5fb6276e4098921915a8e0c39a5cd3450", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "  * Tests {@link BlockStoreContext}.\n  */\n @RunWith(PowerMockRunner.class)\n@PrepareForTest({BlockMasterClient.class, BlockMasterClientPool.class, BlockStoreContext.class,\n    DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n public final class BlockStoreContextTest {\n   /**", "fixed": "  * Tests {@link BlockStoreContext}.\n  */\n @RunWith(PowerMockRunner.class)\n@PrepareForTest({RetryHandlingBlockMasterClient.class, BlockMasterClientPool.class,\n    BlockStoreContext.class, DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n public final class BlockStoreContextTest {\n   /**", "sourceBeforeFix": "BlockMasterClient.class", "sourceAfterFix": "RetryHandlingBlockMasterClient.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.String name ; java.lang.String VAR_2 ; VAR_2 = VAR_3 . METHOD_2 ( ) . toString ( ) ; TYPE_1 VAR_4 = VAR_5 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( STRING_1 , VAR_2 ) ; VAR_4 . METHOD_5 ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_6 class ) ; intent . METHOD_6 ( ( ( VAR_7 ) | ( VAR_8 ) ) ) ; METHOD_7 ( intent ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.String VAR_2 ; VAR_2 = VAR_3 . METHOD_2 ( ) . toString ( ) ; TYPE_1 VAR_4 = VAR_5 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( STRING_1 , VAR_2 ) ; VAR_4 . METHOD_5 ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_6 class ) ; intent . METHOD_6 ( ( ( VAR_7 ) | ( VAR_8 ) ) ) ; METHOD_7 ( intent ) ; }\n"}
{"fixCommitSHA1": "f877cc6742ba3c75739edd9debae662d834d191d", "projectName": "mybatis.mybatis-3", "bugType": "Change Identifier Used", "problem": "     SqlSession sqlSession = sqlSessionFactory.openSession();\n     try {\n       Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Map<Integer, Object>> map = mapper.getAListOfMaps();\n       Assert.assertEquals(1, map.get(0).get(\"ID\"));\n     } finally {\n       sqlSession.close();", "fixed": "     SqlSession sqlSession = sqlSessionFactory.openSession();\n     try {\n       Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Map<String, Object>> map = mapper.getAListOfMaps();\n       Assert.assertEquals(1, map.get(0).get(\"ID\"));\n     } finally {\n       sqlSession.close();", "sourceBeforeFix": "Map<Integer,Object>", "sourceAfterFix": "Map<String,Object>"}
{"problem": "private void METHOD_1 ( final java.util.List < TYPE_1 > result , TYPE_2 VAR_1 , TYPE_1 element ) { element . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; result . add ( element ) ; for ( TYPE_3 field : VAR_1 . METHOD_4 ( ) ) { TYPE_4 . METHOD_5 ( result , field ) ; } }\n", "fixed": "private void METHOD_1 ( final java.util.List < TYPE_1 > result , TYPE_2 VAR_1 , TYPE_1 element ) { element . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; result . add ( element ) ; for ( TYPE_3 field : VAR_1 . METHOD_4 ( ) ) { METHOD_5 ( result , field ) ; } }\n"}
{"problem": "public synchronized void METHOD_1 ( final java.lang.String number , final TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) . execute ( new TYPE_2 ( ) { public void METHOD_4 ( ) { VAR_4 . METHOD_1 ( number , VAR_1 ) ; VAR_1 . METHOD_5 ( ) ; } } ) ; }\n", "fixed": "public synchronized void METHOD_1 ( final java.lang.String number , final TYPE_1 VAR_1 ) { VAR_3 . METHOD_3 ( ) . execute ( new TYPE_2 ( ) { public void METHOD_4 ( ) { VAR_4 . METHOD_1 ( number , VAR_1 ) ; VAR_1 . METHOD_5 ( ) ; } } ) ; }\n"}
{"problem": "public void remove ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { METHOD_1 ( VAR_1 , TYPE_4 . METHOD_2 ( ) , VAR_2 , 0 ) ; VAR_3 . remove ( VAR_2 ) ; for ( TYPE_1 VAR_4 : VAR_2 . METHOD_3 ( ) ) if ( VAR_5 . contains ( VAR_4 ) ) remove ( VAR_1 , VAR_4 ) ; METHOD_4 ( ) ; }\n", "fixed": "private void remove ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { METHOD_1 ( VAR_1 , TYPE_4 . METHOD_2 ( ) , VAR_2 , 0 ) ; VAR_3 . remove ( VAR_2 ) ; for ( TYPE_1 VAR_4 : VAR_2 . METHOD_3 ( ) ) if ( VAR_5 . contains ( VAR_4 ) ) remove ( VAR_1 , VAR_4 ) ; METHOD_4 ( ) ; }\n"}
{"fixCommitSHA1": "21c7fa9a80fb34c514b8d44a80c4455e8cd2c28b", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tfor(int i=0;i<allowedIdentifiers.length;i++){\n\t\t\tassertEquals(validator.getValidIdentifier(allowedIdentifiers[i]), allowedIdentifiers[i] + \"-\" + allowedIdentifiersCheckDigits[i]);\n \t\t}", "fixed": " \t\tfor(int i=0;i<allowedIdentifiers.length;i++){\n\t\t\tassertEquals(validator.getValidIdentifier(allowedIdentifiers[i]), allowedIdentifiers[i] + \"-\" + allowedIdentifiersCheckDigitsInts[i]);\n \t\t}", "sourceBeforeFix": "allowedIdentifiersCheckDigits[i]", "sourceAfterFix": "allowedIdentifiersCheckDigitsInts[i]"}
{"problem": "private void METHOD_1 ( int VAR_1 , int VAR_2 ) { int VAR_3 = ( VAR_4 . length ) - 1 ; while ( ( VAR_3 > VAR_2 ) && ( VAR_3 > 0 ) ) { VAR_4 [ VAR_3 ] = VAR_4 [ ( VAR_3 - 1 ) ] ; VAR_3 -- ; } VAR_4 [ VAR_2 ] = VAR_1 ; VAR_5 [ VAR_2 ] = STRING_1 ; }\n", "fixed": "private void METHOD_1 ( int VAR_1 , int VAR_2 ) { int VAR_3 = ( VAR_4 . length ) - 1 ; while ( ( VAR_3 >= VAR_2 ) && ( VAR_3 > 0 ) ) { VAR_4 [ VAR_3 ] = VAR_4 [ ( VAR_3 - 1 ) ] ; VAR_5 [ VAR_3 ] = VAR_5 [ ( VAR_3 - 1 ) ] ; VAR_3 -- ; } VAR_4 [ VAR_2 ] = VAR_1 ; VAR_5 [ VAR_2 ] = STRING_1 ; }\n"}
{"fixCommitSHA1": "ee8bd325463cae737e0ffd836a3d5376fe695f3f", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         MockEndpoint bar = getMockEndpoint(\"mock:bar\");\n         bar.expectedMinimumMessageCount(1);\n        bar.setResultWaitTime(3000);\n         template.sendBody(\"seda:foo\", \"A\");\n         template.sendBody(\"seda:foo\", \"B\");", "fixed": "         MockEndpoint bar = getMockEndpoint(\"mock:bar\");\n         bar.expectedMinimumMessageCount(1);\n        bar.setResultWaitTime(1000);\n         template.sendBody(\"seda:foo\", \"A\");\n         template.sendBody(\"seda:foo\", \"B\");", "sourceBeforeFix": "from(\"seda:foo\").startupOrder(1).delay(1000)", "sourceAfterFix": "from(\"seda:foo\").startupOrder(1).delay(500)"}
{"problem": "public void METHOD_1 ( TYPE_1 out , int VAR_1 ) { out . METHOD_2 ( VAR_2 ) ; out . METHOD_2 ( VAR_3 ) ; out . METHOD_3 ( VAR_4 ) ; out . METHOD_3 ( VAR_5 ) ; out . METHOD_4 ( ( ( byte ) ( VAR_6 ? 1 : 0 ) ) ) ; out . METHOD_2 ( VAR_7 ) ; out . METHOD_5 ( VAR_8 ) ; out . METHOD_5 ( VAR_9 ) ; out . METHOD_3 ( VAR_10 ) ; out . METHOD_3 ( VAR_11 ) ; out . METHOD_2 ( VAR_12 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 out , int VAR_1 ) { out . METHOD_2 ( VAR_2 ) ; out . METHOD_2 ( VAR_3 ) ; out . METHOD_3 ( VAR_4 ) ; out . METHOD_3 ( VAR_5 ) ; out . METHOD_4 ( ( ( byte ) ( VAR_6 ? 1 : 0 ) ) ) ; out . METHOD_2 ( VAR_7 ) ; out . METHOD_5 ( VAR_8 ) ; out . METHOD_5 ( VAR_9 ) ; out . METHOD_3 ( VAR_10 ) ; out . METHOD_2 ( VAR_11 ) ; out . METHOD_2 ( VAR_12 ) ; }\n"}
{"problem": "private static void METHOD_1 ( char VAR_1 , java.lang.String value ) { boolean VAR_2 = TYPE_1 . METHOD_2 ( ( VAR_1 + STRING_1 ) , value , false ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 , null ) ; VAR_3 . value = value ; VAR_4 = VAR_2 ; VAR_5 . add ( VAR_3 ) ; }\n", "fixed": "private static void METHOD_1 ( char VAR_1 , java.lang.String value ) { boolean VAR_2 = TYPE_1 . METHOD_2 ( ( VAR_1 + STRING_1 ) , value , true ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 , null ) ; VAR_3 . value = value ; VAR_4 = VAR_2 ; VAR_5 . add ( VAR_3 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . add ( STRING_1 , VAR_2 ) ; METHOD_2 ( null ) . METHOD_3 ( VAR_2 ) . execute ( TYPE_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( new java.lang.String [ ] { STRING_1 } ) ; METHOD_6 ( VAR_2 ) . execute ( TYPE_1 . METHOD_4 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( null ) . METHOD_3 ( VAR_2 ) . execute ( TYPE_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( new java.lang.String [ ] { STRING_1 } ) ; METHOD_6 ( VAR_2 ) . execute ( TYPE_1 . METHOD_4 ( ) ) ; }\n"}
{"problem": "public java.lang.String toString ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) . append ( METHOD_1 ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { VAR_1 . append ( ( ( java.lang.String . METHOD_2 ( VAR_2 [ i ] ) ) + \"\\n\" ) ) ; } return VAR_1 . toString ( ) ; }\n", "fixed": "public java.lang.String toString ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) . append ( METHOD_1 ( ) ) ; for ( int i = ( VAR_2 . length ) - 1 ; i >= 0 ; i -- ) { VAR_1 . append ( ( ( java.lang.String . METHOD_2 ( VAR_2 [ i ] ) ) + \"\\n\" ) ) ; } return VAR_1 . toString ( ) ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"problem": "public < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , boolean update ) throws TYPE_5 { METHOD_2 ( VAR_1 ) ; if ( VAR_1 . equals ( VAR_4 class ) ) { return VAR_1 . METHOD_3 ( TYPE_6 . METHOD_1 ( VAR_2 , VAR_3 , update ) ) ; } if ( VAR_1 . equals ( VAR_5 class ) ) { return VAR_1 . METHOD_3 ( TYPE_7 . METHOD_1 ( VAR_2 , VAR_3 , update ) ) ; } throw METHOD_4 ( VAR_1 ) ; }\n", "fixed": "public < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , boolean update ) throws TYPE_5 { METHOD_2 ( VAR_1 ) ; if ( VAR_1 . equals ( VAR_5 class ) ) { return VAR_1 . METHOD_3 ( TYPE_7 . METHOD_1 ( VAR_2 , VAR_3 , update ) ) ; } if ( VAR_1 . equals ( VAR_4 class ) ) { return VAR_1 . METHOD_3 ( TYPE_6 . METHOD_1 ( VAR_2 , VAR_3 , update ) ) ; } throw METHOD_4 ( VAR_1 ) ; }\n"}
{"problem": "public void delete ( int VAR_1 ) { int n = METHOD_1 ( VAR_1 ) ; if ( ( n != 0 ) && ( ( VAR_2 ) > 0 ) ) { for ( int i = n ; i < ( ( VAR_2 ) - 1 ) ; i ++ ) { VAR_3 [ i ] = VAR_3 [ ( i + 1 ) ] ; } ( VAR_2 ) -- ; } }\n", "fixed": "public void delete ( int VAR_1 ) { int n = METHOD_1 ( VAR_1 ) ; if ( ( n != ( - 1 ) ) && ( ( VAR_2 ) > 0 ) ) { for ( int i = n ; i < ( ( VAR_2 ) - 1 ) ; i ++ ) { VAR_3 [ i ] = VAR_3 [ ( i + 1 ) ] ; } ( VAR_2 ) -- ; } }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String VAR_1 ) { for ( java.util.Iterator < TYPE_1 > iterator = VAR_2 . iterator ( ) ; iterator . METHOD_2 ( ) ; ) { TYPE_1 VAR_3 = iterator . METHOD_3 ( ) ; if ( VAR_3 . METHOD_4 ( ) . equals ( VAR_1 ) ) return false ; } return true ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( java.util.Iterator < TYPE_1 > iterator = VAR_2 . iterator ( ) ; iterator . METHOD_2 ( ) ; ) { TYPE_1 VAR_3 = iterator . METHOD_3 ( ) ; if ( VAR_3 . METHOD_4 ( ) . equals ( VAR_1 ) ) return VAR_3 ; } return null ; }\n"}
{"problem": "public static int METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; switch ( VAR_2 ) { case VAR_3 : return INT_1 ; case VAR_4 : return INT_2 ; case VAR_5 : return INT_3 ; case VAR_6 : return 0 ; case VAR_7 : return 1 ; case VAR_8 : return INT_4 ; case VAR_9 : return INT_5 ; case VAR_10 : return INT_6 ; } return INT_7 ; }\n", "fixed": "public static int METHOD_1 ( java.util.Vector VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; switch ( VAR_2 ) { case VAR_3 : return INT_1 ; case VAR_4 : return INT_2 ; case VAR_5 : return INT_3 ; case VAR_6 : return 0 ; case VAR_7 : return 1 ; case VAR_8 : return INT_4 ; case VAR_9 : return INT_5 ; case VAR_10 : return INT_6 ; } return INT_7 ; }\n"}
{"problem": "private void METHOD_1 ( java.io.File VAR_1 ) { if ( VAR_1 == null ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; return ; } TYPE_1 . METHOD_2 ( ( STRING_2 + ( VAR_1 . toString ( ) ) ) ) ; try { TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } catch ( java.io.IOException VAR_2 ) { TYPE_1 . error ( ( STRING_3 + ( VAR_1 . toString ( ) ) ) , VAR_2 ) ; VAR_2 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( java.io.File VAR_1 ) { if ( VAR_1 == null ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; return ; } TYPE_1 . METHOD_2 ( ( STRING_2 + ( VAR_1 . toString ( ) ) ) ) ; try { TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } catch ( java.io.IOException VAR_2 ) { TYPE_1 . error ( ( STRING_3 + ( VAR_1 . toString ( ) ) ) , VAR_2 ) ; VAR_2 . METHOD_5 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , android.view.View VAR_2 , int position , long id ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_3 ( position ) ; new TYPE_3 ( this , id , VAR_3 . getString ( 1 ) , VAR_3 . getString ( INT_1 ) ) . show ( METHOD_4 ( ) , STRING_1 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , android.view.View VAR_2 , int position , long id ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_3 ( position ) ; new TYPE_3 ( true , id , VAR_3 . getString ( 1 ) , VAR_3 . getString ( INT_1 ) ) . show ( METHOD_4 ( ) , STRING_1 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { VAR_1 . execute ( ) ; assertTrue ( VAR_2 . METHOD_2 ( ) ) ; java.io.FileInputStream VAR_3 = new java.io.FileInputStream ( VAR_2 ) ; try { TYPE_2 VAR_4 = VAR_3 . METHOD_3 ( ) ; java.io.BufferedReader VAR_5 = new java.io.BufferedReader ( new java.io.FileReader ( VAR_2 ) ) ; assertThat ( VAR_5 . METHOD_4 ( ) . count ( ) , METHOD_5 ( INT_1 ) ) ; } finally { VAR_3 . METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { VAR_1 . execute ( ) ; assertTrue ( VAR_2 . METHOD_2 ( ) ) ; java.io.BufferedReader VAR_5 = new java.io.BufferedReader ( new java.io.FileReader ( VAR_2 ) ) ; try { long count = VAR_5 . METHOD_4 ( ) . count ( ) ; assertThat ( count , METHOD_5 ( INT_1 ) ) ; } finally { VAR_5 . METHOD_6 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; if ( VAR_1 == ( VAR_2 ) ) { TYPE_1 . METHOD_3 ( this , TYPE_2 . METHOD_4 ( this , VAR_3 ) , VAR_4 ) . show ( ) ; } else { TYPE_3 . i ( ( STRING_1 + VAR_1 ) ) ; TYPE_1 . METHOD_3 ( this , ( STRING_1 + VAR_1 ) , VAR_4 ) . show ( ) ; } METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { TYPE_1 . METHOD_3 ( this , TYPE_2 . METHOD_4 ( this , VAR_3 ) , VAR_4 ) . show ( ) ; } else { TYPE_3 . i ( ( STRING_1 + VAR_1 ) ) ; TYPE_1 . METHOD_3 ( this , ( STRING_1 + VAR_1 ) , VAR_4 ) . show ( ) ; } METHOD_5 ( ) ; }\n"}
{"project": "Math", "bugId": 36, "problem": " public boolean equals(final Object other) {\n     @Override\n     public float floatValue() {\n         float result = numerator.floatValue() / denominator.floatValue();\n         return result;\n     }", "fixed": " public boolean equals(final Object other) {\n     @Override\n     public float floatValue() {\n         float result = numerator.floatValue() / denominator.floatValue();\n        if (Double.isNaN(result)) {\n            int shift = Math.max(numerator.bitLength(),\n                                 denominator.bitLength()) - Float.MAX_EXPONENT;\n            result = numerator.shiftRight(shift).floatValue() /\n                denominator.shiftRight(shift).floatValue();\n        }\n         return result;\n     }", "observations": "The change is almost the same in two different places. The only difference between changes is the use of the call \"doubleValue()\" in place of \"floatValue()\" in correspondent methods.", "repairActions": ["assignAdd", "condBranIfAdd", "mcAdd", "varAdd"], "repairPatterns": ["condBlockOthersAdd", "copyPaste", "missComp"]}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ! ( VAR_2 ) ) && ( ! ( VAR_3 ) ) ) { switch ( VAR_1 ) { case STRING_1 : VAR_2 = true ; break ; case STRING_2 : case STRING_3 : VAR_2 = true ; break ; case STRING_4 : VAR_3 = true ; break ; } } if ( VAR_2 ) { ( VAR_4 ) ++ ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ! ( VAR_2 ) ) && ( ! ( VAR_3 ) ) ) { switch ( VAR_1 ) { case STRING_1 : java.lang.System.out.println ( STRING_1 ) ; VAR_2 = true ; break ; case STRING_2 : case STRING_3 : VAR_2 = true ; java.lang.System.out.println ( STRING_3 ) ; break ; case STRING_4 : VAR_3 = true ; java.lang.System.out.println ( STRING_4 ) ; break ; } } if ( VAR_2 ) { ( VAR_4 ) ++ ; java.lang.System.out.println ( VAR_4 ) ; } }\n"}
{"problem": "public void add ( int data , int index ) { TYPE_1 tmp = new TYPE_1 ( data ) ; TYPE_1 VAR_1 = VAR_2 ; for ( int i = 1 ; ( i < index ) && ( ( VAR_1 . METHOD_1 ( ) ) != null ) ; i ++ ) { VAR_1 = VAR_1 . METHOD_1 ( ) ; } tmp . METHOD_2 ( VAR_1 . METHOD_1 ( ) ) ; VAR_1 . METHOD_2 ( tmp ) ; ( VAR_3 ) ++ ; }\n", "fixed": "public void add ( java.lang.String data , int index ) { TYPE_1 tmp = new TYPE_1 ( data ) ; TYPE_1 VAR_1 = VAR_2 ; for ( int i = 1 ; ( i < index ) && ( ( VAR_1 . METHOD_1 ( ) ) != null ) ; i ++ ) { VAR_1 = VAR_1 . METHOD_1 ( ) ; } tmp . METHOD_2 ( VAR_1 . METHOD_1 ( ) ) ; VAR_1 . METHOD_2 ( tmp ) ; ( VAR_3 ) ++ ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "60c931c322a76db91f97b12752e61e139f0ab90d", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "     public void run() {\n         try {\n             Progress.start(progressTicket);\n            Progress.setDisplayName(progressTicket, NbBundle.getMessage(SaveTask.class, \"LoadTask.name\"));\n             FileObject fileObject = FileUtil.toFileObject(file);\n             if (FileUtil.isArchiveFile(fileObject)) {", "fixed": "     public void run() {\n         try {\n             Progress.start(progressTicket);\n            Progress.setDisplayName(progressTicket, NbBundle.getMessage(LoadTask.class, \"LoadTask.name\"));\n             FileObject fileObject = FileUtil.toFileObject(file);\n             if (FileUtil.isArchiveFile(fileObject)) {", "sourceBeforeFix": "SaveTask.class", "sourceAfterFix": "LoadTask.class"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , TYPE_3 VAR_2 ) throws java.io.IOException , TYPE_4 { TYPE_5 VAR_3 = ( ( TYPE_5 ) ( VAR_1 ) ) ; TYPE_6 VAR_4 = VAR_3 . METHOD_2 ( ) ; if ( ( VAR_4 == null ) || ( ( VAR_4 . METHOD_3 ( VAR_5 ) ) == null ) ) { ( ( TYPE_7 ) ( response ) ) . METHOD_4 ( ( ( VAR_3 . METHOD_5 ( ) ) + STRING_1 ) ) ; } VAR_2 . METHOD_1 ( VAR_1 , response ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , TYPE_3 VAR_2 ) throws java.io.IOException , TYPE_4 { TYPE_5 VAR_3 = ( ( TYPE_5 ) ( VAR_1 ) ) ; TYPE_6 VAR_4 = VAR_3 . METHOD_2 ( ) ; if ( ( VAR_4 == null ) || ( ( VAR_4 . METHOD_3 ( VAR_5 ) ) == null ) ) { ( ( TYPE_7 ) ( response ) ) . METHOD_4 ( ( ( VAR_3 . METHOD_5 ( ) ) + STRING_1 ) ) ; } else { VAR_2 . METHOD_1 ( VAR_1 , response ) ; } }\n"}
{"problem": "public void update ( float VAR_1 ) { METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( VAR_1 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; METHOD_11 ( ) ; }\n", "fixed": "public void update ( float VAR_1 ) { METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( VAR_1 ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; METHOD_11 ( ) ; }\n"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N oppositeNode(Object edge) {\n     return checkNotNull(incidentEdgeMap.get(edge));\n   }\n   @Override\n  public N removeInEdge(Object edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "fixed": "   }\n   @Override\n  public N adjacentNode(E edge) {\n     return checkNotNull(incidentEdgeMap.get(edge));\n   }\n   @Override\n  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "4f952dac30892ce9458bee0403d908ee642c4481", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "     }\n     private static SimpleAttributeDefinition createIntAttribute(String name, Attribute attribute, int defaultValue) {\n        return SimpleAttributeDefinitionBuilder.create(name, ModelType.INT, true).setDefaultValue(new ModelNode().set(defaultValue)).setXmlName(attribute.getLocalName()).setValidator(new IntRangeValidator(1)).build();\n     }\n     private static class ThreadWriteAttributeHandler extends RestartParentWriteAttributeHandler {", "fixed": "     }\n     private static SimpleAttributeDefinition createIntAttribute(String name, Attribute attribute, int defaultValue) {\n        return SimpleAttributeDefinitionBuilder.create(name, ModelType.INT, true).setDefaultValue(new ModelNode().set(defaultValue)).setXmlName(attribute.getLocalName()).setValidator(new IntRangeValidator(1, true)).build();\n     }\n     private static class ThreadWriteAttributeHandler extends RestartParentWriteAttributeHandler {", "sourceBeforeFix": "new IntRangeValidator(1)", "sourceAfterFix": "new IntRangeValidator(1,true)"}
{"problem": "public static TYPE_1 METHOD_1 ( android.content.Context context , long VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = TYPE_1 . METHOD_2 ( TYPE_4 . METHOD_3 ( context , VAR_4 ) ) ; VAR_3 . METHOD_4 ( VAR_5 , VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_6 , VAR_2 . METHOD_5 ( ) ) ; VAR_3 . METHOD_4 ( VAR_7 , VAR_8 ) ; TYPE_5 . METHOD_6 ( VAR_9 , ( STRING_1 + VAR_2 ) ) ; return VAR_3 . build ( ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( android.content.Context context , long VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = TYPE_1 . METHOD_2 ( TYPE_4 . METHOD_3 ( context , VAR_4 ) ) ; VAR_3 . METHOD_4 ( VAR_5 , VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_6 , VAR_2 . METHOD_5 ( ) ) ; VAR_3 . METHOD_4 ( VAR_7 , VAR_8 ) ; return VAR_3 . build ( ) ; }\n"}
{"fixCommitSHA1": "82b69a773252bdecdba84ff3ef8e0314e7d3ac4f", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     KBP_DOCS_DIR = \"/u/scr/nlp/data/kbp-benchmark/kbp-docs\";\n     GOLD_RELATIONS_PATH = \"/u/scr/nlp/data/kbp-benchmark/kbp-gold-relations.txt\";\n    KBP_MINIMUM_SCORE = .445;\n     docIDToText = new HashMap<String,String>();\n     docIDToRelations = new HashMap<String,Set<String>>();", "fixed": "     KBP_DOCS_DIR = \"/u/scr/nlp/data/kbp-benchmark/kbp-docs\";\n     GOLD_RELATIONS_PATH = \"/u/scr/nlp/data/kbp-benchmark/kbp-gold-relations.txt\";\n    KBP_MINIMUM_SCORE = .456;\n     docIDToText = new HashMap<String,String>();\n     docIDToRelations = new HashMap<String,Set<String>>();", "sourceBeforeFix": "KBP_MINIMUM_SCORE=.445", "sourceAfterFix": "KBP_MINIMUM_SCORE=.456"}
{"problem": "protected void METHOD_1 ( final TYPE_1 VAR_1 , final int count ) throws TYPE_2 { int VAR_2 = 0 ; TYPE_3 message = null ; while ( ( message = ( ( TYPE_3 ) ( VAR_1 . METHOD_2 ( INT_1 ) ) ) ) != null ) { VAR_2 ++ ; TYPE_4 . METHOD_3 ( STRING_1 , message . METHOD_4 ( ) ) ; } TYPE_5 . assertEquals ( count , VAR_2 ) ; }\n", "fixed": "protected void METHOD_1 ( final TYPE_1 VAR_1 , final int count ) throws TYPE_2 { int VAR_2 = 0 ; TYPE_3 message = null ; while ( ( message = ( ( TYPE_3 ) ( VAR_1 . METHOD_2 ( INT_1 ) ) ) ) != null ) { VAR_2 ++ ; TYPE_4 . info ( STRING_1 , message . METHOD_4 ( ) ) ; } TYPE_5 . assertEquals ( count , VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( new TYPE_1 ( ) ) ; METHOD_3 ( null ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( METHOD_6 ( ) , METHOD_6 ( ) , METHOD_6 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; java.util.List < TYPE_3 > response = VAR_1 . METHOD_7 ( VAR_2 ) ; METHOD_8 ( response ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( new TYPE_1 ( ) ) ; METHOD_3 ( null ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( METHOD_6 ( ) , METHOD_6 ( ) , METHOD_6 ( ) , METHOD_6 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; java.util.List < TYPE_3 > response = VAR_1 . METHOD_7 ( VAR_2 ) ; METHOD_8 ( response ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 index , TYPE_2 VAR_1 , int VAR_2 , java.util.ArrayList < TYPE_3 > VAR_3 ) { VAR_3 . add ( new TYPE_4 ( VAR_1 . target ( ) , TYPE_5 . METHOD_2 ( VAR_1 . type ( ) ) ) ) ; METHOD_3 ( VAR_1 . iterator ( ) , VAR_1 , VAR_3 ) ; VAR_3 . add ( new TYPE_6 ( VAR_1 . target ( ) , TYPE_5 . METHOD_2 ( VAR_4 ) ) ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 index , TYPE_2 VAR_1 , int VAR_2 , java.util.ArrayList < TYPE_3 > VAR_3 ) { VAR_3 . add ( new TYPE_4 ( VAR_1 . target ( ) , METHOD_2 ( VAR_1 . type ( ) ) ) ) ; METHOD_3 ( VAR_1 . iterator ( ) , VAR_1 , VAR_3 ) ; VAR_3 . add ( new TYPE_6 ( VAR_1 . target ( ) , METHOD_2 ( VAR_4 ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { if ( ! ( ( event . METHOD_2 ( ) ) instanceof TYPE_2 ) ) return ; if ( ! ( VAR_1 . METHOD_3 ( ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) , ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) . METHOD_4 ( ) ) ) ) { event . METHOD_5 ( true ) ; return ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { if ( ! ( ( event . METHOD_2 ( ) ) instanceof TYPE_2 ) ) return ; if ( ! ( VAR_1 . METHOD_3 ( ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) , ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) . METHOD_4 ( ) ) ) ) { event . METHOD_5 ( true ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 source = new TYPE_1 ( STRING_1 , INT_1 ) ; TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( source , VAR_3 class ) ; TYPE_3 . assertEquals ( VAR_1 . getName ( ) , STRING_1 ) ; TYPE_3 . assertEquals ( VAR_1 . METHOD_3 ( ) , INT_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 source = new TYPE_1 ( STRING_1 , INT_1 ) ; TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( source , VAR_3 class ) ; assertEquals ( VAR_1 . getName ( ) , STRING_1 ) ; assertEquals ( VAR_1 . METHOD_3 ( ) , INT_1 ) ; }\n"}
{"fixCommitSHA1": "02f1f95e522fd142dc0805c37e91d12880ab5996", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                         .pushJavaDefault(unboxedReturnType)\n                         .gotoLabel(end)\n                         .visitLabel(notNull)\n                        .append(ByteCodeUtils.unboxPrimitive(context, unboxedReturnType));\n             }\n             else {\n                 block.dup(methodType.returnType())", "fixed": "                         .pushJavaDefault(unboxedReturnType)\n                         .gotoLabel(end)\n                         .visitLabel(notNull)\n                        .append(unboxPrimitive(context, unboxedReturnType));\n             }\n             else {\n                 block.dup(methodType.returnType())", "sourceBeforeFix": "ArrayList<Class<?>>", "sourceAfterFix": "List<Class<?>>"}
{"problem": "protected void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { VAR_4 . add ( STRING_1 ) ; } VAR_5 = new TYPE_2 ( getContext ( ) , VAR_6 , VAR_4 ) ; VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_5 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( null ) ; VAR_2 . METHOD_6 ( INT_2 ) ; }\n", "fixed": "protected void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { VAR_4 . add ( STRING_1 ) ; } VAR_5 = new TYPE_2 ( VAR_1 . getContext ( ) , VAR_6 , VAR_4 ) ; VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_5 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( null ) ; VAR_2 . METHOD_6 ( INT_2 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( TYPE_1 [ ] [ ] VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; for ( int i = 0 ; i < ( VAR_2 ) ; ++ i ) for ( int j = 0 ; j < ( VAR_3 ) ; ++ j ) VAR_1 [ i ] [ j ] . update ( VAR_4 [ i ] [ j ] ) ; }\n", "fixed": "private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; for ( int i = 0 ; i < ( VAR_2 ) ; ++ i ) for ( int j = 0 ; j < ( VAR_3 ) ; ++ j ) VAR_1 [ i ] [ j ] . update ( VAR_4 [ i ] [ j ] ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { try { if ( ( ( ( this . VAR_1 ) == null ) && ( ( this . VAR_2 ) != null ) ) && ( ( this . VAR_2 . length ( ) ) > 0 ) ) { this . VAR_1 = new TYPE_1 ( this . VAR_3 , this . VAR_2 ) ; } } catch ( TYPE_2 VAR_4 ) { java.lang.System.err.println ( STRING_1 ) ; } }\n", "fixed": "private void METHOD_1 ( ) throws TYPE_2 { if ( ( ( ( this . VAR_1 ) == null ) && ( ( this . VAR_2 ) != null ) ) && ( ( this . VAR_2 . length ( ) ) > 0 ) ) { this . VAR_1 = new TYPE_1 ( this . VAR_3 , this . VAR_2 ) ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PubNubEndpointBuilder\n             extends\n                 PubNubEndpointConsumerBuilder, PubNubEndpointProducerBuilder {\n         default AdvancedPubNubEndpointBuilder advanced() {", "fixed": "     \n    public interface PubNubEndpointBuilder\n             extends\n                 PubNubEndpointConsumerBuilder, PubNubEndpointProducerBuilder {\n         default AdvancedPubNubEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public int METHOD_1 ( TYPE_1 op ) { if ( ( length ) > ( op . length ) ) { return 1 ; } else if ( ( length ) < ( op . length ) ) { return - 1 ; } else { int result = 0 ; int index = 0 ; while ( ( result == 0 ) && ( index < ( length ) ) ) { result = ( value [ index ] ) - ( op . value [ index ] ) ; } return result ; } }\n", "fixed": "public int METHOD_1 ( TYPE_1 op ) { if ( ( length ) > ( op . length ) ) { return 1 ; } else if ( ( length ) < ( op . length ) ) { return - 1 ; } else { int result = 0 ; int index = 0 ; while ( ( result == 0 ) && ( index < ( length ) ) ) { result = ( value [ index ] ) - ( op . value [ index ] ) ; index ++ ; } return result ; } }\n"}
{"problem": "public java.lang.Object METHOD_1 ( TYPE_1 element , java.util.List < TYPE_2 > params ) { TYPE_3 . METHOD_2 ( ( ( params . size ( ) ) >= INT_1 ) , STRING_1 ) ; return params . get ( 0 ) . METHOD_3 ( element ) . toString ( ) . contains ( params . get ( 1 ) . toString ( ) ) ; }\n", "fixed": "public java.lang.Object METHOD_1 ( TYPE_1 element , java.util.List < TYPE_2 > params ) { TYPE_3 . METHOD_2 ( ( ( params . size ( ) ) >= INT_1 ) , STRING_1 ) ; return params . get ( 0 ) . METHOD_3 ( element ) . toString ( ) . contains ( params . get ( 1 ) . METHOD_3 ( element ) . toString ( ) ) ; }\n"}
{"problem": "public static int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { int index = VAR_2 . METHOD_2 ( ) ; int VAR_3 = ( TYPE_3 . METHOD_3 ( VAR_1 , index ) ) - 1 ; TYPE_3 . METHOD_4 ( VAR_1 , index , VAR_3 ) ; VAR_4 = VAR_5 ; }\n", "fixed": "public static int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { int index = VAR_2 . METHOD_2 ( ) ; int VAR_3 = ( TYPE_3 . METHOD_3 ( VAR_1 , index ) ) - 1 ; TYPE_3 . METHOD_4 ( VAR_1 , index , VAR_3 ) ; return VAR_3 ; }\n"}
{"project": "Math", "bugId": 6, "problem": " protected PointValuePair doOptimize() {\n         double[] x = guess;\n         double fVal = computeObjectiveValue(x);\n         double[] x1 = x.clone();\n        int iter = 0;\n         while (true) {\n            ++iter;\n             double fX = fVal;\n             double fX2 = 0;", "fixed": " protected PointValuePair doOptimize() {\n         double[] x = guess;\n         double fVal = computeObjectiveValue(x);\n         double[] x1 = x.clone();\n         while (true) {\n            incrementIterationCount();\n             double fX = fVal;\n             double fX2 = 0;", "observations": "A parameter value passed through the constructor during object instantiation is changed. A local variable is removed and expressions to increment it are replaced by equivalent method call.", "repairActions": ["assignExpChange", "assignRem", "condExpMod", "mcAdd", "mcParValChange", "objInstMod", "varRem", "varReplMc"], "repairPatterns": ["constChange", "copyPaste", "expLogicMod", "initFix", "wrongComp", "wrongVarRef"]}
{"problem": "public void METHOD_1 ( TYPE_1 msg ) { if ( INT_1 == ( VAR_1 ) ) { VAR_2 . add ( ( ( TYPE_2 ) ( msg . obj ) ) ) ; if ( ( VAR_2 . size ( ) ) > INT_2 ) { METHOD_2 ( 1 ) ; } else { METHOD_3 ( 1 , INT_3 ) ; } } else if ( 1 == ( VAR_1 ) ) { METHOD_4 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 msg ) { if ( INT_1 == ( VAR_1 ) ) { VAR_2 . add ( ( ( TYPE_2 ) ( msg . obj ) ) ) ; if ( ( VAR_2 . size ( ) ) > INT_3 ) { METHOD_2 ( 1 ) ; } else { METHOD_3 ( 1 , INT_3 ) ; } } else if ( 1 == ( VAR_1 ) ) { METHOD_4 ( ) ; } }\n"}
{"problem": "private void METHOD_1 ( java.lang.String message , java.lang.String title ) { TYPE_1 VAR_1 = new TYPE_1 ( this ) ; VAR_1 . METHOD_2 ( title ) . METHOD_3 ( message ) . METHOD_4 ( STRING_1 , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_2 , int i ) { } } ) . show ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String message , java.lang.String title ) { TYPE_1 VAR_1 = new TYPE_1 ( this ) ; VAR_1 . METHOD_2 ( title ) . METHOD_3 ( message ) . METHOD_4 ( STRING_1 , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_2 , int i ) { } } ) . show ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 ; try { VAR_3 = VAR_4 ; if ( ( VAR_3 ) != null ) { VAR_3 = new TYPE_2 ( VAR_3 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; } super . METHOD_1 ( VAR_1 ) ; } finally { VAR_3 = VAR_2 ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 ; try { VAR_3 = VAR_4 ; if ( VAR_2 != null ) { VAR_3 = new TYPE_2 ( VAR_3 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; } super . METHOD_1 ( VAR_1 ) ; } finally { VAR_3 = VAR_2 ; } }\n"}
{"problem": "private boolean METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) == null ) { TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_3 ) ; return true ; } VAR_4 = 0 ; VAR_5 = ( ( VAR_4 ) < ( VAR_1 . size ( ) ) ) ? VAR_6 : 0 ; METHOD_4 ( VAR_4 , false ) ; VAR_7 . METHOD_5 ( this ) ; return true ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) == null ) { VAR_7 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; return true ; } VAR_4 = 0 ; VAR_5 = ( ( VAR_4 ) < ( VAR_1 . size ( ) ) ) ? VAR_6 : 0 ; METHOD_4 ( VAR_4 , false ) ; VAR_7 . METHOD_5 ( this ) ; return true ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = null ; VAR_1 = METHOD_2 ( VAR_1 ) ; java.lang.String [ ] VAR_3 = VAR_1 . split ( STRING_1 ) ; TYPE_2 VAR_4 = METHOD_3 ( VAR_3 ) ; java.lang.String [ ] VAR_5 = VAR_4 . METHOD_4 ( ) ; if ( ( VAR_5 . length ) > 0 ) { VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_5 ( VAR_4 . getName ( ) ) ; METHOD_6 ( VAR_2 , VAR_5 ) ; } return VAR_2 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = null ; VAR_1 = METHOD_2 ( VAR_1 ) ; java.lang.String [ ] VAR_3 = VAR_1 . split ( STRING_1 ) ; TYPE_2 VAR_4 = METHOD_3 ( VAR_3 ) ; java.lang.String [ ] VAR_5 = VAR_4 . METHOD_4 ( ) ; if ( ( VAR_5 != null ) && ( ( VAR_5 . length ) > 0 ) ) { VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_5 ( VAR_4 . getName ( ) ) ; METHOD_6 ( VAR_2 , VAR_5 ) ; } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { if ( VAR_1 . METHOD_4 ( METHOD_2 ( ) . get ( ) ) ) { throw new TYPE_3 ( this , METHOD_2 ( ) . get ( ) ) ; } else { VAR_1 . put ( METHOD_2 ( ) . get ( ) , this ) ; } } else { throw new TYPE_4 ( METHOD_5 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { if ( ( VAR_1 . get ( METHOD_2 ( ) . get ( ) ) ) != null ) { throw new TYPE_3 ( this , METHOD_2 ( ) . get ( ) ) ; } else { VAR_1 . put ( METHOD_2 ( ) . get ( ) , this ) ; } } else { throw new TYPE_4 ( METHOD_5 ( ) ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { VAR_2 . info ( STRING_1 ) ; response . METHOD_2 ( STRING_2 ) ; if ( ( VAR_1 . METHOD_3 ( STRING_3 ) ) != null ) { VAR_2 . info ( STRING_4 ) ; if ( STRING_5 . toString ( ) . equals ( VAR_1 . METHOD_3 ( STRING_3 ) . toString ( ) ) ) { VAR_2 . info ( STRING_6 ) ; METHOD_4 ( VAR_1 , response ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { response . METHOD_2 ( STRING_2 ) ; if ( ( VAR_1 . METHOD_3 ( STRING_3 ) ) != null ) { if ( STRING_5 . toString ( ) . equals ( VAR_1 . METHOD_3 ( STRING_3 ) . toString ( ) ) ) { METHOD_4 ( VAR_1 , response ) ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d222fc981c938bd3543ee61f22422d20efcdcd94", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(800);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(800)"}
{"problem": "public boolean remove ( TYPE_1 key , TYPE_2 value ) { if ( ! ( METHOD_1 ( key ) ) ) return false ; java.util.Set < TYPE_2 > VAR_1 = get ( key ) ; boolean VAR_2 = VAR_1 . remove ( value ) ; if ( VAR_1 . isEmpty ( ) ) { remove ( key ) ; } return VAR_2 ; }\n", "fixed": "public boolean remove ( final java.lang.Object key , final java.lang.Object value ) { if ( ! ( METHOD_1 ( key ) ) ) return false ; final java.util.Set < TYPE_2 > VAR_1 = get ( key ) ; final boolean VAR_2 = VAR_1 . remove ( value ) ; if ( VAR_1 . isEmpty ( ) ) { remove ( key ) ; } return VAR_2 ; }\n"}
{"project": "Math", "bugId": 68, "problem": " protected VectorialPointValuePair doOptimize()\n                 }\n                     if (((Math.abs(actRed) <= costRelativeTolerance) &&\n                          (preRed <= costRelativeTolerance) &&\n                          (ratio <= 2.0)) ||\n                         (delta <= parRelativeTolerance * xNorm)) {\n                        return new VectorialPointValuePair(point, objective);\n                     }", "fixed": " protected VectorialPointValuePair doOptimize()\n                 }\n                if (checker != null) {\n                    if (checker.converged(getIterations(), previous, current)) {\n                        return current;                        \n                    }\n                } else {\n                     if (((Math.abs(actRed) <= costRelativeTolerance) &&\n                          (preRed <= costRelativeTolerance) &&\n                          (ratio <= 2.0)) ||\n                         (delta <= parRelativeTolerance * xNorm)) {\n                        return current;\n                     }\n                }", "observations": "New objects were instantiated. Objects instantiated before were removed too (line 419).", "repairActions": ["assignAdd", "condBranIfAdd", "condBranIfElseAdd", "mcAdd", "objInstAdd", "objInstRem", "retBranchAdd", "retExpChange", "varAdd"], "repairPatterns": ["condBlockRetAdd", "missNullCheckN", "wrapsIfElse"]}
{"fixCommitSHA1": "b06cd886290c6ff0c6f0a398b31c30d92c6e8fbf", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         String trustStore = getProperty(properties, \"trustStore\", keyStore);\n         String trustStorePassword = getProperty(properties, \"trustStorePassword\", keyStorePassword);\n        String keyManagerAlgorithm = properties.getProperty(\"keyManagerAlgorithm\", TrustManagerFactory.getDefaultAlgorithm());\n         String trustManagerAlgorithm = properties.getProperty(\"trustManagerAlgorithm\", TrustManagerFactory.getDefaultAlgorithm());\n         String protocol = properties.getProperty(\"protocol\", \"TLS\");", "fixed": "         String trustStore = getProperty(properties, \"trustStore\", keyStore);\n         String trustStorePassword = getProperty(properties, \"trustStorePassword\", keyStorePassword);\n        String keyManagerAlgorithm = properties.getProperty(\"keyManagerAlgorithm\", KeyManagerFactory.getDefaultAlgorithm());\n         String trustManagerAlgorithm = properties.getProperty(\"trustManagerAlgorithm\", TrustManagerFactory.getDefaultAlgorithm());\n         String protocol = properties.getProperty(\"protocol\", \"TLS\");", "sourceBeforeFix": "TrustManagerFactory.getDefaultAlgorithm()", "sourceAfterFix": "KeyManagerFactory.getDefaultAlgorithm()"}
{"problem": "public int METHOD_1 ( ) { int VAR_1 = 0 ; for ( TYPE_1 VAR_2 : VAR_3 ) { if ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) { VAR_1 += VAR_2 . METHOD_6 ( ) ; } else { VAR_1 += VAR_2 . METHOD_7 ( ) ; } } return VAR_1 ; }\n", "fixed": "public int METHOD_1 ( ) { int VAR_1 = 0 ; for ( TYPE_1 VAR_2 : VAR_3 ) { if ( ( null != ( VAR_2 . METHOD_2 ( ) ) ) && ( null != ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) { if ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) { VAR_1 += VAR_2 . METHOD_6 ( ) ; } else { VAR_1 += VAR_2 . METHOD_7 ( ) ; } } } return VAR_1 ; }\n"}
{"problem": "public TYPE_1 < java.lang.String , java.lang.String > METHOD_1 ( final TYPE_2 VAR_1 ) { final TYPE_3 VAR_2 = METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = ( ( java.lang.String ) ( VAR_2 . METHOD_3 ( VAR_4 ) ) ) ; TYPE_4 VAR_5 = this . VAR_6 . get ( VAR_3 ) ; TYPE_1 < java.lang.String , java.lang.String > VAR_7 = VAR_5 . METHOD_4 ( VAR_2 ) ; return VAR_5 . METHOD_4 ( VAR_2 ) ; }\n", "fixed": "public TYPE_1 < java.lang.String , java.lang.String > METHOD_1 ( final TYPE_2 VAR_1 ) { final TYPE_3 VAR_2 = METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = ( ( java.lang.String ) ( VAR_2 . METHOD_3 ( VAR_4 ) ) ) ; TYPE_4 VAR_5 = this . VAR_6 . get ( VAR_3 ) ; TYPE_1 < java.lang.String , java.lang.String > VAR_7 = VAR_5 . METHOD_4 ( VAR_2 ) ; return VAR_7 ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.Object ... VAR_1 ) { assert ( VAR_1 != null ) && ( ( VAR_1 . length ) == 1 ) ; java.lang.Object VAR_2 = VAR_1 [ 0 ] ; assert VAR_2 != null ; if ( VAR_2 instanceof TYPE_1 ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_2 ) ) ; return ( VAR_3 . compareTo ( VAR_2 ) ) == 0 ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.Object ... VAR_1 ) { assert ( VAR_1 != null ) && ( ( VAR_1 . length ) == 1 ) ; java.lang.Object VAR_2 = VAR_1 [ 0 ] ; assert VAR_2 != null ; if ( VAR_2 instanceof TYPE_1 ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_2 ) ) ; return ( VAR_3 . compareTo ( VAR_3 ) ) == 0 ; } return true ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( VAR_2 , STRING_1 ) ) . METHOD_4 ( this . VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( STRING_2 , STRING_3 , STRING_4 ) ; TYPE_1 . METHOD_2 ( this . VAR_3 . METHOD_5 ( new TYPE_3 ( STRING_3 , VAR_5 , new TYPE_3 ( STRING_2 , VAR_6 ) ) ) ) . METHOD_4 ( VAR_4 ) ; TYPE_4 . assertEquals ( VAR_4 , this . VAR_7 . METHOD_6 ( STRING_2 , STRING_3 , STRING_5 , STRING_1 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( this . VAR_1 . METHOD_3 ( VAR_2 , STRING_1 ) ) . METHOD_4 ( this . VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( STRING_2 , STRING_3 , STRING_4 ) ; METHOD_2 ( this . VAR_3 . METHOD_5 ( new TYPE_3 ( STRING_3 , VAR_5 , new TYPE_3 ( STRING_2 , VAR_6 ) ) ) ) . METHOD_4 ( VAR_4 ) ; TYPE_4 . assertEquals ( VAR_4 , this . VAR_7 . METHOD_6 ( STRING_2 , STRING_3 , STRING_5 , STRING_1 ) ) ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( new java.io.File ( VAR_1 ) ) ; TYPE_1 data = VAR_2 . METHOD_3 ( ) ; data . METHOD_4 ( ( ( data . METHOD_5 ( ) ) - 1 ) ) ; java.lang.System.out.println ( data ) ; return data ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String fileName ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( new java.io.File ( fileName ) ) ; TYPE_1 data = VAR_2 . METHOD_3 ( ) ; data . METHOD_4 ( ( ( data . METHOD_5 ( ) ) - 1 ) ) ; java.lang.System.out.println ( data ) ; return data ; }\n"}
{"problem": "public static void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( STRING_1 ) ; TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { VAR_3 . METHOD_6 ( new TYPE_5 ( VAR_4 ) ) ; } VAR_3 . METHOD_4 ( ) . commit ( ) ; VAR_3 . METHOD_7 ( ) ; VAR_2 . METHOD_7 ( ) ; }\n", "fixed": "private static void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( STRING_1 ) ; TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { VAR_3 . METHOD_6 ( new TYPE_5 ( VAR_4 ) ) ; } VAR_3 . METHOD_4 ( ) . commit ( ) ; VAR_3 . METHOD_7 ( ) ; VAR_2 . METHOD_7 ( ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; if ( VAR_1 == null ) { METHOD_3 ( ) . METHOD_4 ( ) . add ( VAR_3 , new TYPE_2 ( ) ) . commit ( ) ; } VAR_4 = new TYPE_3 ( ) ; METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_4 ) ; TYPE_4 . height = VAR_5 ; VAR_6 = VAR_7 ; VAR_8 = ( ( float ) ( VAR_6 ) ) / ( VAR_9 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; if ( VAR_1 == null ) { METHOD_3 ( ) . METHOD_4 ( ) . add ( VAR_3 , new TYPE_2 ( ) ) . commit ( ) ; } VAR_4 = new TYPE_3 ( ) ; METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_4 ) ; TYPE_4 . height = VAR_5 ; VAR_6 = VAR_7 ; }\n"}
{"problem": "public void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_2 ( ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { VAR_2 . METHOD_2 ( ) ; VAR_1 . METHOD_2 ( ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 ) ) ) ; } }\n"}
{"fixCommitSHA1": "9d87dbad9f0c649c8244586cfea3ca25731da893", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       pushScope(s);\n       traverseBranch(root, null);\n       popScope();\n    } catch (Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }", "fixed": "       pushScope(s);\n       traverseBranch(root, null);\n       popScope();\n    } catch (Error | Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }", "sourceBeforeFix": "Exception unexpectedException", "sourceAfterFix": "Throwable unexpectedException"}
{"problem": "public void METHOD_1 ( float f ) { int VAR_1 ; VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == 1 ) { VAR_2 = f ; } else if ( VAR_1 == INT_1 ) { VAR_3 = f ; } else if ( VAR_1 == INT_2 ) { VAR_4 = f ; } java.lang.System.out.println ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( float f ) { int VAR_1 ; VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == INT_2 ) { VAR_2 = f ; } else if ( VAR_1 == 1 ) { VAR_3 = f ; } else if ( VAR_1 == INT_1 ) { VAR_4 = f ; } java.lang.System.out.println ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { int VAR_1 = ( VAR_2 . METHOD_2 ( INT_1 ) ) + 1 ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { VAR_3 . METHOD_3 ( ) ; } for ( TYPE_1 VAR_4 : VAR_5 ) { TYPE_2 . METHOD_4 ( VAR_4 . METHOD_5 ( ) , VAR_1 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { int VAR_1 = ( VAR_2 . METHOD_2 ( INT_1 ) ) + 1 ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { VAR_3 . METHOD_3 ( ) ; } for ( TYPE_1 VAR_4 : VAR_5 ) { TYPE_2 . assertEquals ( VAR_4 . METHOD_5 ( ) , VAR_1 ) ; } }\n"}
{"problem": "public long METHOD_1 ( long VAR_1 , double value ) { if ( java.lang.Double . METHOD_2 ( value ) ) throw new TYPE_1 ( STRING_1 ) ; long VAR_2 = java.lang.Math.round ( ( value / ( VAR_3 ) ) ) ; METHOD_3 ( java.lang.Math.round ( ( VAR_2 * ( VAR_3 ) ) ) ) ; VAR_2 <<= VAR_4 ; VAR_1 &= ~ ( VAR_5 ) ; return VAR_1 | VAR_2 ; }\n", "fixed": "public long METHOD_1 ( long VAR_1 , double value ) { if ( java.lang.Double . METHOD_2 ( value ) ) throw new TYPE_1 ( STRING_1 ) ; long VAR_2 = java.lang.Math.round ( ( value / ( VAR_3 ) ) ) ; METHOD_3 ( ( ( long ) ( VAR_2 * ( VAR_3 ) ) ) ) ; VAR_2 <<= VAR_4 ; VAR_1 &= ~ ( VAR_5 ) ; return VAR_1 | VAR_2 ; }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( int index , TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = new java.util.LinkedList ( VAR_3 ) ; if ( ( index >= 0 ) && ( index < ( ( VAR_3 . size ( ) ) - 1 ) ) ) { VAR_2 . set ( index , ( ( TYPE_2 ) ( VAR_1 ) ) ) ; } return new TYPE_3 ( METHOD_2 ( ) , VAR_2 ) ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( int index , TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = new java.util.LinkedList ( VAR_3 ) ; if ( ( index >= 0 ) && ( index < ( VAR_3 . size ( ) ) ) ) { VAR_2 . set ( index , ( ( TYPE_2 ) ( VAR_1 ) ) ) ; } return new TYPE_3 ( METHOD_2 ( ) , VAR_2 ) ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( int type , int VAR_1 , java.lang.String key , int VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( type , VAR_1 ) ; if ( VAR_3 != null ) { return VAR_5 . METHOD_3 ( STRING_1 , VAR_3 . METHOD_4 ( ) , key , VAR_2 ) ; } else { java.lang.String VAR_6 = TYPE_3 . METHOD_5 ( type ) . METHOD_6 ( ) ; java.util.List < TYPE_1 > result = VAR_7 . METHOD_1 ( VAR_6 , VAR_1 , key , VAR_2 ) ; return result ; } }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( int type , int VAR_1 , java.lang.String key , int VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( type , VAR_1 ) ; if ( VAR_3 != null ) { return VAR_5 . METHOD_3 ( null , VAR_3 . METHOD_4 ( ) , key , VAR_2 ) ; } else { java.lang.String VAR_6 = TYPE_3 . METHOD_5 ( type ) . METHOD_6 ( ) ; java.util.List < TYPE_1 > result = VAR_7 . METHOD_1 ( VAR_6 , VAR_1 , key , VAR_2 ) ; return result ; } }\n"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.error(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "fixed": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "sourceBeforeFix": "LOG.error(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)", "sourceAfterFix": "LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)"}
{"problem": "public void METHOD_1 ( java.lang.String name ) { if ( ( name == null ) || ( name . equals ( STRING_1 ) ) ) { VAR_1 = null ; VAR_2 = name ; return ; } VAR_2 = name ; TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( name ) ; if ( VAR_3 != null ) { VAR_1 = TYPE_2 . METHOD_4 ( VAR_4 class ) . METHOD_5 ( name , VAR_3 ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String name ) { if ( ( name == null ) || ( name . equals ( STRING_1 ) ) ) { VAR_1 = null ; VAR_2 = STRING_1 ; return ; } VAR_2 = name ; TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( name ) ; if ( VAR_3 != null ) { VAR_1 = TYPE_2 . METHOD_4 ( VAR_4 class ) . METHOD_5 ( name , VAR_3 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = ( ( ( STRING_1 + ( VAR_3 ) ) + STRING_2 ) + ( VAR_4 ) ) + STRING_3 ; try { return VAR_5 . METHOD_2 ( VAR_2 , new java.lang.Object [ ] { VAR_1 . METHOD_3 ( ) } , new TYPE_3 ( VAR_6 class ) ) ; } catch ( TYPE_4 VAR_7 ) { return null ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = ( ( ( STRING_1 + ( VAR_3 ) ) + STRING_2 ) + ( VAR_4 ) ) + STRING_3 ; try { return VAR_5 . METHOD_2 ( VAR_2 , new java.lang.Object [ ] { VAR_1 . METHOD_3 ( ) } , new TYPE_3 ( VAR_6 class ) ) ; } catch ( TYPE_4 VAR_7 ) { return null ; } catch ( java.lang.NullPointerException VAR_7 ) { return null ; } }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { int VAR_2 = this . VAR_3 ; this . VAR_3 = VAR_1 ; for ( TYPE_1 node : METHOD_2 ( ) ) { if ( ( node . METHOD_3 ( ) . METHOD_4 ( ) . equals ( this . METHOD_3 ( ) . METHOD_4 ( ) ) ) && ( ( VAR_4 ) == VAR_2 ) ) { node . METHOD_1 ( VAR_1 ) ; } } }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { if ( VAR_1 == ( this . VAR_3 ) ) { return ; } int VAR_2 = this . VAR_3 ; this . VAR_3 = VAR_1 ; for ( TYPE_1 node : METHOD_2 ( ) ) { if ( ( ! ( node . METHOD_3 ( ) . METHOD_4 ( ) . equals ( this . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) && ( ( VAR_4 ) == VAR_2 ) ) { node . METHOD_1 ( VAR_1 ) ; } } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"problem": "public void METHOD_1 ( TYPE_1 < java.util.List < TYPE_2 > > VAR_1 , TYPE_3 < java.util.List < TYPE_2 > > response , java.util.List < TYPE_2 > ... VAR_2 ) { java.util.List < TYPE_2 > VAR_3 = ( VAR_2 == null ) ? response . METHOD_2 ( ) : VAR_2 [ 0 ] ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( ) . METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < java.util.List < TYPE_2 > > VAR_1 , TYPE_3 < java.util.List < TYPE_2 > > response , java.util.List < TYPE_2 > ... VAR_2 ) { java.util.List < TYPE_2 > VAR_3 = ( response != null ) ? response . METHOD_2 ( ) : VAR_2 [ 0 ] ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( ) . METHOD_5 ( ) ; }\n"}
{"problem": "private static void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 . METHOD_1 ( VAR_3 , VAR_2 ) ; if ( ! ( TYPE_3 . METHOD_2 ( VAR_1 . name , VAR_4 , VAR_5 ) ) ) { java.lang.System.out.println ( ( ( ( ( STRING_1 + ( ( VAR_6 ) + 1 ) ) + STRING_2 ) + ( VAR_1 . name ) ) + STRING_3 ) ) ; } }\n", "fixed": "private static void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 . METHOD_1 ( VAR_3 , VAR_2 ) ; if ( ! ( TYPE_3 . METHOD_2 ( VAR_1 . name , VAR_4 , VAR_5 ) ) ) { java.lang.System.err.println ( ( ( ( ( STRING_1 + ( ( VAR_6 ) + 1 ) ) + STRING_2 ) + ( VAR_1 . name ) ) + STRING_3 ) ) ; } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return ; METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; java.lang.System.out.print ( ( ( VAR_1 . METHOD_5 ( ) ) + STRING_1 ) ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return ; METHOD_1 ( VAR_1 . METHOD_3 ( ) ) ; METHOD_1 ( VAR_1 . METHOD_4 ( ) ) ; java.lang.System.out.print ( ( ( VAR_1 . METHOD_5 ( ) ) + STRING_1 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( 1 , INT_1 ) ; for ( final java.lang.Integer i : VAR_1 ) { { TYPE_2 < java.lang.String > VAR_2 = TYPE_3 . string ( STRING_1 , ( STRING_2 + i ) ) ; VAR_3 < java.lang.String > METHOD_2 ( VAR_2 ) ; java.lang.Thread . METHOD_3 ( 1 ) ; java.lang.Thread . METHOD_4 ( ) ; } } } catch ( java.lang.Throwable VAR_4 ) { throw TYPE_4 . METHOD_5 ( VAR_4 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( 1 , INT_1 ) ; for ( final java.lang.Integer i : VAR_1 ) { { VAR_3 < java.lang.String > METHOD_2 ( TYPE_3 . string ( STRING_1 , ( STRING_2 + i ) ) ) ; java.lang.Thread . METHOD_3 ( 1 ) ; java.lang.Thread . METHOD_4 ( ) ; } } } catch ( java.lang.Throwable VAR_4 ) { throw TYPE_4 . METHOD_5 ( VAR_4 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ( f ) - > { try { f . get ( ) ; } catch ( TYPE_1 | TYPE_2 VAR_2 ) { TYPE_3 . error ( STRING_1 , VAR_2 ) ; METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; } } ) ; VAR_1 . METHOD_6 ( ) ; java.lang.System.out.println ( STRING_2 ) ; }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ( f ) - > { try { f . get ( ) ; } catch ( TYPE_1 | TYPE_2 VAR_2 ) { METHOD_4 ( STRING_1 , VAR_2 ) ; } } ) ; VAR_1 . METHOD_6 ( ) ; java.lang.System.out.println ( STRING_2 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_1 response = new TYPE_1 ( ) ; java.lang.String VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) ; if ( ( VAR_1 . length ( ) ) != 0 ) { VAR_2 . METHOD_3 ( VAR_1 ) ; response . METHOD_4 ( STRING_1 ) ; return response ; } TYPE_2 VAR_5 = VAR_2 . METHOD_1 ( VAR_3 , VAR_4 ) ; if ( VAR_5 == null ) { response . METHOD_4 ( STRING_2 ) ; } else { response . METHOD_4 ( STRING_1 ) ; } return response ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { TYPE_1 response = new TYPE_1 ( ) ; java.lang.String VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) ; if ( ( VAR_1 . length ( ) ) != 0 ) { VAR_2 . METHOD_3 ( VAR_1 , VAR_4 ) ; response . METHOD_4 ( STRING_1 ) ; return response ; } TYPE_2 VAR_5 = VAR_2 . METHOD_1 ( VAR_3 , VAR_4 ) ; if ( VAR_5 == null ) { response . METHOD_4 ( STRING_2 ) ; } else { response . METHOD_4 ( STRING_1 ) ; } return response ; }\n"}
{"fixCommitSHA1": "2d0de2bbf27a71b8d7dad6284e092ba456ec5794", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         private final Endpoint startEndpoint;\n         private final SendProcessor asyncSender;\n        public ExchangeSubmitter(Endpoint startEndpoint, SendProcessor asyncSender) {\n             this.startEndpoint = startEndpoint;\n             this.asyncSender = asyncSender;\n         }", "fixed": "         private final Endpoint startEndpoint;\n         private final SendProcessor asyncSender;\n        ExchangeSubmitter(Endpoint startEndpoint, SendProcessor asyncSender) {\n             this.startEndpoint = startEndpoint;\n             this.asyncSender = asyncSender;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"problem": "public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_3 ) == null ) { METHOD_2 ( VAR_2 ) ; } else { VAR_3 . METHOD_3 ( VAR_2 ) ; if ( ( VAR_4 ) > 0 ) { VAR_5 . METHOD_4 ( VAR_4 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_3 ) == null ) { METHOD_2 ( VAR_2 ) ; } else { VAR_3 . METHOD_3 ( VAR_2 ) ; if ( ( VAR_4 ) > 0 ) { VAR_5 . METHOD_4 ( ( ( VAR_4 ) - 1 ) ) ; } } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 ) . build ( ) ; TYPE_4 VAR_4 = VAR_2 . METHOD_3 ( get ( VAR_1 ) . METHOD_4 ( VAR_5 ) ) . METHOD_5 ( ) ; java.lang.String VAR_6 = VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ; TYPE_5 VAR_7 = METHOD_8 ( ) . METHOD_9 ( ) ; TYPE_1 VAR_8 = VAR_7 . METHOD_10 ( VAR_6 , VAR_9 class ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 ) . build ( ) ; TYPE_4 VAR_4 = VAR_2 . METHOD_3 ( get ( VAR_1 ) . METHOD_4 ( VAR_5 ) ) . METHOD_5 ( ) ; java.lang.String VAR_6 = VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ; TYPE_5 VAR_7 = METHOD_8 ( ) . METHOD_9 ( ) ; TYPE_1 VAR_8 = VAR_7 . METHOD_10 ( VAR_6 , VAR_9 class ) ; return VAR_8 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static double [ ] METHOD_1 ( int VAR_1 ) { double [ ] VAR_2 = new double [ VAR_1 ] ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { VAR_2 [ i ] = TYPE_1 . METHOD_2 ( VAR_3 ) ; } return VAR_2 ; }\n", "fixed": "public static double [ ] METHOD_1 ( int VAR_1 ) { double [ ] VAR_2 = new double [ VAR_1 ] ; VAR_2 [ 0 ] = 1.0 ; for ( int i = 1 ; i < ( VAR_2 . length ) ; i ++ ) { VAR_2 [ i ] = TYPE_1 . METHOD_2 ( VAR_3 ) ; } return VAR_2 ; }\n"}
{"problem": "public TYPE_1 < TYPE_2 > METHOD_1 ( java.util.List < java.lang.Integer > VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_3 . METHOD_2 ( ( VAR_2 + 1 ) , VAR_3 ) ; VAR_1 . add ( ( - 1 ) ) ; java.util.List < TYPE_2 > VAR_4 = VAR_5 . METHOD_3 ( VAR_1 ) ; TYPE_1 < TYPE_2 > VAR_6 = new TYPE_1 ( VAR_4 ) ; return VAR_6 ; }\n", "fixed": "public TYPE_1 < TYPE_2 > METHOD_1 ( java.util.List < java.lang.Integer > VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_1 . add ( ( - 1 ) ) ; java.util.List < TYPE_2 > VAR_4 = VAR_5 . METHOD_3 ( VAR_1 ) ; TYPE_1 < TYPE_2 > VAR_6 = new TYPE_1 ( VAR_4 ) ; return VAR_6 ; }\n"}
{"problem": "public java.lang.String toString ( ) { int VAR_1 = TYPE_1 . METHOD_1 ( ( ( METHOD_2 ( ) ) > > INT_1 ) ) ; int VAR_2 = TYPE_1 . METHOD_1 ( ( ( METHOD_2 ( ) ) > > INT_2 ) ) ; int VAR_3 = TYPE_1 . METHOD_1 ( METHOD_2 ( ) ) ; return java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 , VAR_3 ) ; }\n", "fixed": "public java.lang.String toString ( ) { int VAR_1 = TYPE_1 . METHOD_1 ( this . VAR_1 ) ; int VAR_2 = TYPE_1 . METHOD_1 ( this . VAR_2 ) ; int VAR_3 = TYPE_1 . METHOD_1 ( this . VAR_3 ) ; return java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 , VAR_3 ) ; }\n"}
{"problem": "public void METHOD_1 ( long date , int VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 . METHOD_2 ( TYPE_3 . toString ( ) , VAR_2 . getName ( ) , ( ( ( TYPE_4 . METHOD_3 ( date ) ) + STRING_1 ) + ( VAR_2 . getString ( ) ) ) ) ; TYPE_5 . METHOD_4 ( date , VAR_1 , VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( long date , int VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 . METHOD_2 ( TYPE_3 . toString ( ) , VAR_2 . getName ( ) , TYPE_4 . METHOD_3 ( date ) ) ; TYPE_5 . METHOD_4 ( date , VAR_1 , VAR_2 ) ; }\n"}
{"problem": "public java.util.Set < TYPE_1 > METHOD_1 ( int ... VAR_1 ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { if ( ( ( VAR_1 [ i ] ) < 0 ) || ( ( VAR_1 [ i ] ) > ( VAR_2 ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } } return new java.util.HashSet < TYPE_1 > ( ) ; }\n", "fixed": "public java.util.Set < TYPE_1 > METHOD_1 ( int ... VAR_1 ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { if ( ( ( VAR_1 [ i ] ) <= 0 ) || ( ( VAR_1 [ i ] ) > ( VAR_2 ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } } return new java.util.HashSet < TYPE_1 > ( ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String fileName ) { java.lang.System.out.println ( STRING_1 ) ; try ( java.io.FileOutputStream VAR_1 = new java.io.FileOutputStream ( fileName ) ; TYPE_1 writer = new TYPE_1 ( VAR_1 ) ) { for ( TYPE_2 VAR_2 : VAR_3 ) { writer . METHOD_2 ( STRING_2 , VAR_2 . getName ( ) , VAR_2 . METHOD_3 ( ) ) ; } } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_4 ( ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String fileName ) { try ( java.io.FileOutputStream VAR_1 = new java.io.FileOutputStream ( fileName ) ; TYPE_1 writer = new TYPE_1 ( VAR_1 ) ) { for ( TYPE_2 VAR_2 : VAR_3 ) { writer . METHOD_2 ( STRING_2 , VAR_2 . getName ( ) , VAR_2 . METHOD_3 ( ) ) ; } } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_4 ( ) ; } }\n"}
{"problem": "public static java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , int VAR_3 ) throws java.io.IOException { TYPE_4 start = VAR_2 . METHOD_2 ( ) ; TYPE_4 end = start . METHOD_3 ( 1 ) ; return TYPE_1 . METHOD_1 ( VAR_1 , start , end ) ; }\n", "fixed": "public static java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , int VAR_3 ) throws java.io.IOException { TYPE_4 start = VAR_2 . METHOD_2 ( ) ; TYPE_4 end = start . METHOD_3 ( ( VAR_3 - 1 ) ) ; return TYPE_1 . METHOD_1 ( VAR_1 , start , end ) ; }\n"}
{"problem": "public synchronized void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , int VAR_3 , java.util.Set < TYPE_2 > VAR_4 ) throws TYPE_3 { if ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) { throw new TYPE_4 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; } else { VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_5 ( VAR_4 ) ; VAR_1 . METHOD_6 ( ) . METHOD_7 ( VAR_5 , VAR_6 ) ; VAR_7 . METHOD_8 ( VAR_1 ) ; } }\n", "fixed": "public synchronized void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , int VAR_3 , java.util.Set < TYPE_2 > VAR_4 ) throws TYPE_3 { if ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) { throw new TYPE_4 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; } else { VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_5 ( VAR_4 ) ; VAR_7 . METHOD_8 ( VAR_1 ) ; VAR_1 . METHOD_6 ( ) . METHOD_7 ( VAR_5 , VAR_6 ) ; } }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String name ) { java.util.List < TYPE_2 > VAR_1 = VAR_2 . METHOD_2 ( name ) ; java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 VAR_4 : VAR_1 ) { VAR_3 . add ( VAR_5 . METHOD_3 ( VAR_4 ) ) ; } return VAR_3 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String name ) { java.util.List < TYPE_2 > VAR_1 = VAR_2 . METHOD_2 ( name ) ; if ( VAR_1 == null ) return new java.util.ArrayList < TYPE_1 > ( ) ; java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 VAR_4 : VAR_1 ) { VAR_3 . add ( VAR_5 . METHOD_3 ( VAR_4 ) ) ; } return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 . getType ( ) ) == ( VAR_2 ) ) { VAR_3 = VAR_4 . METHOD_2 ( ) ; float x = VAR_3 [ 0 ] ; float y = VAR_3 [ 1 ] ; float VAR_5 = VAR_3 [ INT_1 ] ; TYPE_2 . METHOD_3 ( VAR_6 class . METHOD_4 ( ) , java.lang.String.format ( STRING_1 , x , y , VAR_5 ) ) ; METHOD_5 ( x ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 . getType ( ) ) == ( VAR_2 ) ) { VAR_3 = VAR_4 . METHOD_2 ( ) ; float x = VAR_3 [ 0 ] ; float y = VAR_3 [ 1 ] ; float VAR_5 = VAR_3 [ INT_1 ] ; METHOD_5 ( x ) ; } }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { this . METHOD_2 ( VAR_2 ) ; super . METHOD_1 ( VAR_1 ) ; METHOD_3 ( VAR_3 ) ; VAR_4 = ( ( TYPE_2 ) ( METHOD_4 ( VAR_5 ) ) ) ; VAR_6 = new java.util.ArrayList < > ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_3 ( VAR_3 ) ; VAR_4 = ( ( TYPE_2 ) ( METHOD_4 ( VAR_5 ) ) ) ; VAR_6 = new java.util.ArrayList < > ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View i ) { VAR_1 = java.lang.Double . METHOD_2 ( VAR_2 . getText ( ) . toString ( ) ) ; VAR_3 = java.lang.Double . METHOD_2 ( VAR_4 . getText ( ) . toString ( ) ) ; VAR_5 = java.lang.Double . METHOD_2 ( VAR_6 . getText ( ) . toString ( ) ) ; VAR_7 = VAR_8 . getText ( ) . toString ( ) ; android.content.Intent j = new android.content.Intent ( VAR_9 , VAR_10 class ) ; METHOD_3 ( j ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View i ) { VAR_1 = java.lang.Double . METHOD_2 ( VAR_2 . getText ( ) . toString ( ) ) ; VAR_7 = VAR_8 . getText ( ) . toString ( ) ; VAR_3 = java.lang.Double . METHOD_2 ( VAR_4 . getText ( ) . toString ( ) ) ; VAR_5 = java.lang.Double . METHOD_2 ( VAR_6 . getText ( ) . toString ( ) ) ; android.content.Intent j = new android.content.Intent ( VAR_9 , VAR_10 class ) ; METHOD_3 ( j ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) . add ( java.lang.Math.random ( ) , java.lang.Math.random ( ) , java.lang.Math.random ( ) ) ) ; VAR_2 . METHOD_4 ( new TYPE_1 ( VAR_3 , ( INT_1 * INT_2 ) , INT_3 ) ) ; VAR_2 . METHOD_4 ( new TYPE_1 ( VAR_4 , ( INT_4 * 1 ) , INT_3 ) ) ; VAR_5 = false ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) . add ( java.lang.Math.random ( ) , java.lang.Math.random ( ) , java.lang.Math.random ( ) ) ) ; VAR_2 . METHOD_4 ( new TYPE_1 ( VAR_3 , ( INT_1 * INT_2 ) , INT_3 ) ) ; VAR_2 . METHOD_4 ( new TYPE_1 ( VAR_4 , ( INT_1 * 1 ) , INT_3 ) ) ; VAR_5 = false ; }\n"}
{"project": "Chart", "bugId": 25, "problem": " protected void drawHorizontalItem(Graphics2D g2,\n         Number meanValue = dataset.getMeanValue(row, column);\r\n         double value = meanValue.doubleValue();\r\n         double base = 0.0;\r", "fixed": " protected void drawHorizontalItem(Graphics2D g2,\n         Number meanValue = dataset.getMeanValue(row, column);\r\n        if (meanValue == null) {\r\n            return;\r\n        }\r\n         double value = meanValue.doubleValue();\r\n         double base = 0.0;\r", "observations": "", "repairActions": ["assignAdd", "assignExpChange", "condBranIfAdd", "mcAdd", "mcRem", "retBranchAdd", "varAdd"], "repairPatterns": ["condBlockRetAdd", "copyPaste", "missNullCheckN", "missNullCheckP", "wrapsIf", "wrongComp"]}
{"problem": "private java.util.List < TYPE_1 > METHOD_1 ( final java.util.List < TYPE_1 > VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { if ( ( VAR_3 . METHOD_2 ( ) ) != null ) { TYPE_1 VAR_4 = VAR_5 . METHOD_3 ( VAR_3 . getId ( ) ) ; if ( VAR_4 != null ) { VAR_2 . add ( VAR_4 ) ; } } else { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; }\n", "fixed": "private java.util.List < TYPE_1 > METHOD_1 ( final java.util.List < TYPE_1 > VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { if ( ( VAR_3 . METHOD_2 ( ) ) == null ) { TYPE_1 VAR_4 = VAR_5 . METHOD_3 ( VAR_3 . getId ( ) ) ; if ( VAR_4 != null ) { VAR_2 . add ( VAR_4 ) ; } } else { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > temp = METHOD_2 ( ) ; java.lang.String [ ] VAR_1 = VAR_2 . split ( STRING_1 ) ; for ( int i = ( VAR_1 . length ) - 1 ; i >= 0 ; i -- ) temp . add ( 0 , new TYPE_1 ( VAR_1 [ i ] , true ) ) ; return temp ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > temp = METHOD_2 ( ) ; if ( ( VAR_2 ) != null ) { java.lang.String [ ] VAR_1 = VAR_2 . split ( STRING_1 ) ; for ( int i = ( VAR_1 . length ) - 1 ; i >= 0 ; i -- ) temp . add ( 0 , new TYPE_1 ( VAR_1 [ i ] , true ) ) ; } return temp ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_3 ) == ( VAR_4 ) ) { METHOD_2 ( VAR_1 , VAR_2 , true ) ; } else { boolean VAR_5 = ( VAR_3 ) == ( VAR_6 ) ; METHOD_2 ( VAR_1 , VAR_2 , VAR_5 ) ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_3 ) == ( VAR_4 ) ) { METHOD_2 ( VAR_1 , VAR_2 , true ) ; } else { boolean VAR_5 = ( VAR_3 ) == ( VAR_6 ) ; METHOD_2 ( VAR_1 , VAR_2 , VAR_5 ) ; } return true ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"problem": "public int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ? TYPE_3 . METHOD_4 ( VAR_3 ) . METHOD_5 ( ) : VAR_4 . get ( VAR_1 ) ; TYPE_4 VAR_5 = TYPE_2 . METHOD_2 ( ) . METHOD_6 ( ) ; return VAR_6 . METHOD_7 ( ) . METHOD_8 ( VAR_2 , VAR_5 ) ; }\n", "fixed": "public int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ? TYPE_3 . METHOD_4 ( VAR_3 ) . METHOD_5 ( ) : VAR_4 . get ( VAR_1 ) ; TYPE_4 VAR_5 = TYPE_2 . METHOD_2 ( ) . METHOD_6 ( VAR_1 ) ; return VAR_6 . METHOD_7 ( ) . METHOD_8 ( VAR_2 , VAR_5 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EtcdEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedEtcdEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface EtcdEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedEtcdEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( ( ( ( int ) ( VAR_1 ) ) / INT_1 ) ) ; if ( ( VAR_3 . METHOD_3 ( ) ) == false ) { VAR_4 . METHOD_4 ( ) ; } if ( ( VAR_5 ) != null ) { VAR_2 . METHOD_5 ( VAR_5 . METHOD_6 ( ) ) ; } else { VAR_2 . METHOD_5 ( STRING_1 ) ; } }\n", "fixed": "public void METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( ( ( ( int ) ( VAR_1 ) ) / INT_1 ) ) ; if ( ( ( VAR_3 . METHOD_3 ( ) ) == false ) && ( ( VAR_4 ) != null ) ) { VAR_4 . METHOD_4 ( ) ; } if ( ( VAR_5 ) != null ) { VAR_2 . METHOD_5 ( VAR_5 . METHOD_6 ( ) ) ; } else { VAR_2 . METHOD_5 ( STRING_1 ) ; } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : TYPE_1 . values ( ) ) { if ( ( VAR_1 != null ) && ( VAR_2 . name ( ) . METHOD_2 ( VAR_1 ) ) ) { return VAR_2 ; } } return VAR_3 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : TYPE_1 . values ( ) ) { if ( ( VAR_1 != null ) && ( VAR_2 . name ( ) . METHOD_2 ( VAR_1 ) ) ) { return VAR_2 ; } } return null ; }\n"}
{"project": "Lang", "bugId": 8, "problem": " static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Local\n         TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\n             mLocale = locale;\n             mStyle = style;\n            zone = timeZone;\n             mStandard = getTimeZoneDisplay(timeZone, false, style, locale);\n             mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);", "fixed": " static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Local\n         TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\n             mLocale = locale;\n             mStyle = style;\n             mStandard = getTimeZoneDisplay(timeZone, false, style, locale);\n             mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);", "observations": "Transformed a class attribute in local var.", "repairActions": ["assignAdd", "assignRem", "mcAdd", "varAdd", "varRem"], "repairPatterns": ["initFix", "notClassified", "wrongComp"]}
{"problem": "public static void METHOD_1 ( java.lang.String VAR_1 ) { java.io.BufferedReader VAR_2 = null ; java.lang.String VAR_3 = STRING_1 ; try { VAR_2 = new java.io.BufferedReader ( new java.io.FileReader ( VAR_1 ) ) ; while ( ( VAR_3 = VAR_2 . METHOD_2 ( ) ) != null ) { java.lang.System.out.println ( VAR_3 ) ; TYPE_1 . METHOD_3 ( VAR_3 ) ; java.lang.Thread . METHOD_4 ( INT_1 ) ; } } catch ( java.lang.Exception VAR_4 ) { } }\n", "fixed": "public static void METHOD_1 ( java.lang.String VAR_1 ) { java.io.BufferedReader VAR_2 = null ; java.lang.String VAR_3 = STRING_1 ; try { VAR_2 = new java.io.BufferedReader ( new java.io.FileReader ( VAR_1 ) ) ; while ( ( VAR_3 = VAR_2 . METHOD_2 ( ) ) != null ) { TYPE_1 . METHOD_3 ( VAR_3 ) ; java.lang.Thread . METHOD_4 ( INT_1 ) ; } } catch ( java.lang.Exception VAR_4 ) { } }\n"}
{"problem": "public void METHOD_1 ( ) { java.util.Set < TYPE_1 > VAR_1 = new java.util.HashSet < TYPE_1 > ( ) ; VAR_1 . add ( new TYPE_1 ( STRING_1 , STRING_2 , INT_1 , INT_2 ) ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; TYPE_2 . assertThat ( VAR_2 . METHOD_3 ( ) . size ( ) , TYPE_3 . METHOD_4 ( 1 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { java.util.Set < TYPE_1 > VAR_1 = new java.util.HashSet < TYPE_1 > ( ) ; VAR_1 . add ( new TYPE_1 ( ) ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; TYPE_2 . assertThat ( VAR_2 . METHOD_3 ( ) . size ( ) , TYPE_3 . METHOD_4 ( 1 ) ) ; }\n"}
{"fixCommitSHA1": "72f5dff8178df46a1e66114701dc9e9f30151fde", "projectName": "brianfrankcooper.YCSB", "bugType": "Change Numeric Literal", "problem": "     exporter.write(getName(), \"AverageLatency(us)\", totalHistogram.getMean());\n     exporter.write(getName(), \"MinLatency(us)\", totalHistogram.getMinValue());\n     exporter.write(getName(), \"MaxLatency(us)\", totalHistogram.getMaxValue());\n    exporter.write(getName(), \"95thPercentileLatency(us)\", totalHistogram.getValueAtPercentile(90));\n     exporter.write(getName(), \"99thPercentileLatency(us)\", totalHistogram.getValueAtPercentile(99));\n     exportReturnCodes(exporter);", "fixed": "     exporter.write(getName(), \"AverageLatency(us)\", totalHistogram.getMean());\n     exporter.write(getName(), \"MinLatency(us)\", totalHistogram.getMinValue());\n     exporter.write(getName(), \"MaxLatency(us)\", totalHistogram.getMaxValue());\n    exporter.write(getName(), \"95thPercentileLatency(us)\", totalHistogram.getValueAtPercentile(95));\n     exporter.write(getName(), \"99thPercentileLatency(us)\", totalHistogram.getValueAtPercentile(99));\n     exportReturnCodes(exporter);", "sourceBeforeFix": "totalHistogram.getValueAtPercentile(90)", "sourceAfterFix": "totalHistogram.getValueAtPercentile(95)"}
{"problem": "private void METHOD_1 ( ) { if ( VAR_1 ) { } else { VAR_1 = true ; while ( ( VAR_2 . METHOD_2 ( ) ) != null ) { TYPE_1 event = VAR_2 . METHOD_3 ( ) ; if ( ! ( VAR_3 . METHOD_4 ( event ) ) ) { TYPE_2 . METHOD_5 ( ( STRING_1 + ( event . getName ( ) ) ) ) ; } } VAR_1 = false ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( VAR_1 ) { return ; } VAR_1 = true ; while ( ( VAR_2 . METHOD_2 ( ) ) != null ) { TYPE_1 event = VAR_2 . METHOD_3 ( ) ; if ( ! ( VAR_3 . METHOD_4 ( event ) ) ) { TYPE_2 . METHOD_5 ( ( STRING_1 + ( event . getName ( ) ) ) ) ; } } VAR_1 = false ; }\n"}
{"problem": "private static void getName ( TYPE_1 c ) throws java.io.IOException , TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 { java.lang.String query = STRING_1 ; java.util.Set < TYPE_7 > VAR_1 = TYPE_8 . METHOD_1 ( c , query ) ; for ( TYPE_7 VAR_2 : VAR_1 ) { java.lang.String VAR_3 = ( ( java.lang.String ) ( c . METHOD_2 ( ) . METHOD_3 ( VAR_2 , STRING_2 ) ) ) ; VAR_4 . add ( ( ( STRING_3 + VAR_3 ) + STRING_4 ) ) ; } }\n", "fixed": "private static void getName ( TYPE_1 c ) throws java.io.IOException , TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 { VAR_4 = new java.util.ArrayList < java.lang.String > ( ) ; java.lang.String query = STRING_1 ; java.util.Set < TYPE_7 > VAR_1 = TYPE_8 . METHOD_1 ( c , query ) ; for ( TYPE_7 VAR_2 : VAR_1 ) { java.lang.String VAR_3 = ( ( java.lang.String ) ( c . METHOD_2 ( ) . METHOD_3 ( VAR_2 , STRING_2 ) ) ) ; VAR_4 . add ( ( ( STRING_3 + VAR_3 ) + STRING_4 ) ) ; } }\n"}
{"fixCommitSHA1": "dc5295df8c5288d29737cfe4d936a817c7a56e72", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    * @return the short value\n    */\n   public static short toShort(byte[] bytes) {\n    return toShortUnsafe(bytes, 0);\n   }\n   /**", "fixed": "    * @return the short value\n    */\n   public static short toShort(byte[] bytes) {\n    return toShort(bytes, 0, SIZEOF_SHORT);\n   }\n   /**", "sourceBeforeFix": "toShortUnsafe(bytes,0)", "sourceAfterFix": "toShort(bytes,0,SIZEOF_SHORT)"}
{"fixCommitSHA1": "7c3ad0194c2aa495bf464f68e0da6622733b4430", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": " public final class TtlBucket implements Comparable<TtlBucket> {\n   \n   private static long sTtlIntervalMs =\n      Configuration.getInt(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS);\n   /**\n    * Each bucket has a time to live interval, this value is the start of the interval, interval\n* value is the same as the configuration of {@link PropertyKey", "fixed": " public final class TtlBucket implements Comparable<TtlBucket> {\n   \n   private static long sTtlIntervalMs =\n      Configuration.getMs(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS);\n   /**\n    * Each bucket has a time to live interval, this value is the start of the interval, interval\n* value is the same as the configuration of {@link PropertyKey", "sourceBeforeFix": "Configuration.getInt(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 ) ; VAR_4 = ( ( TYPE_2 ) ( METHOD_4 ( VAR_5 ) ) ) ; METHOD_5 ( ) ; android.widget.Button VAR_6 = ( ( android.widget.Button ) ( METHOD_4 ( VAR_7 ) ) ) ; VAR_6 . METHOD_6 ( this ) ; VAR_8 = new TYPE_3 ( this ) ; METHOD_7 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 ) ; VAR_4 = ( ( TYPE_2 ) ( METHOD_4 ( VAR_5 ) ) ) ; METHOD_5 ( ) ; VAR_6 = ( ( android.widget.Button ) ( METHOD_4 ( VAR_7 ) ) ) ; VAR_6 . METHOD_6 ( this ) ; VAR_6 . setEnabled ( true ) ; VAR_8 = new TYPE_3 ( this ) ; METHOD_7 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected java.lang.Long METHOD_1 ( ) { long count = 0L ; try { count = ( ( long ) ( METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) ) ) ; } catch ( TYPE_1 VAR_1 ) { METHOD_5 ( ) . METHOD_6 ( ( ( ( STRING_1 + ( METHOD_4 ( ) ) ) + STRING_2 ) + ( VAR_1 . METHOD_7 ( ) ) ) ) ; } return count ; }\n", "fixed": "protected java.lang.Long METHOD_1 ( ) { long count = 0L ; try { count = METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) . count ; } catch ( TYPE_1 VAR_1 ) { METHOD_5 ( ) . METHOD_6 ( ( ( ( STRING_1 + ( METHOD_4 ( ) ) ) + STRING_2 ) + ( VAR_1 . METHOD_7 ( ) ) ) ) ; } return count ; }\n"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeOutEdge(Object edge) {\n     N previousNode = incidentEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }", "fixed": "   }\n   @Override\n  public N removeOutEdge(E edge) {\n     N previousNode = incidentEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( VAR_2 ) ) { METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_2 = true ; VAR_3 = TYPE_1 . METHOD_4 ( ) ; } else { TYPE_2 . METHOD_5 ( this , STRING_1 , VAR_4 ) . show ( ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( VAR_2 ) ) { VAR_3 = TYPE_1 . METHOD_4 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_2 = true ; } else { TYPE_2 . METHOD_5 ( this , STRING_1 , VAR_4 ) . show ( ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 state ) { java.util.Set < TYPE_3 > VAR_1 = new java.util.HashSet < TYPE_3 > ( ) ; for ( int i = state . METHOD_2 ( 0 ) ; i != ( - 1 ) ; i = state . METHOD_2 ( ( i + 1 ) ) ) { VAR_1 . add ( ( ( TYPE_3 ) ( VAR_2 . get ( ( ( VAR_3 ) + i ) ) ) ) ) ; } return new TYPE_1 ( VAR_1 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 state ) { java.util.Set < TYPE_3 > VAR_1 = new java.util.HashSet < TYPE_3 > ( ) ; for ( int i = state . METHOD_2 ( 0 ) ; i != ( - 1 ) ; i = state . METHOD_2 ( ( i + 1 ) ) ) { VAR_1 . add ( ( ( TYPE_3 ) ( VAR_2 . get ( i ) ) ) ) ; } return new TYPE_1 ( VAR_1 ) ; }\n"}
{"problem": "protected int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.util.Map < java.lang.String , java.lang.String > VAR_3 , TYPE_3 out , TYPE_3 VAR_4 ) throws java.io.IOException , TYPE_4 { TYPE_5 VAR_5 = new TYPE_5 ( out , VAR_4 , VAR_6 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; int result ; try { VAR_5 . start ( ) ; result = VAR_1 . execute ( VAR_2 , VAR_3 ) ; } finally { VAR_5 . METHOD_3 ( ) ; } return result ; }\n", "fixed": "protected int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.util.Map < java.lang.String , java.lang.String > VAR_3 , TYPE_3 out , TYPE_3 VAR_4 ) throws java.io.IOException , TYPE_4 { TYPE_5 VAR_5 = new TYPE_5 ( out , VAR_4 , VAR_6 ) ; return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 ) ; }\n"}
{"problem": "private int METHOD_1 ( int VAR_1 ) { final int VAR_2 = INT_1 ; final double VAR_3 = FLOAT_1 ; final int VAR_4 = INT_2 ; if ( VAR_1 <= VAR_4 ) { return VAR_2 + VAR_1 ; } return ( ( int ) ( ( VAR_4 + VAR_2 ) * ( java.lang.Math.pow ( ( 1 + VAR_3 ) , ( VAR_1 - VAR_4 ) ) ) ) ) ; }\n", "fixed": "public static int METHOD_1 ( int VAR_1 ) { final int VAR_2 = INT_1 ; final double VAR_3 = FLOAT_1 ; final int VAR_4 = INT_2 ; if ( VAR_1 <= VAR_4 ) { return VAR_2 + VAR_1 ; } return ( ( int ) ( ( VAR_4 + VAR_2 ) * ( java.lang.Math.pow ( ( 1 + VAR_3 ) , ( VAR_1 - VAR_4 ) ) ) ) ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"problem": "public int METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String query = ( ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + VAR_1 ) + STRING_4 ; TYPE_1 VAR_4 = this . METHOD_2 ( ) ; TYPE_2 c = VAR_4 . METHOD_3 ( query , null ) ; try { return c . METHOD_4 ( ) ; } finally { c . METHOD_5 ( ) ; VAR_4 . METHOD_5 ( ) ; } }\n", "fixed": "public int METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String query = ( ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + VAR_1 ) + STRING_4 ; if ( ( VAR_4 ) == null ) { VAR_4 = METHOD_2 ( ) ; } TYPE_2 c = VAR_4 . METHOD_3 ( query , null ) ; try { return c . METHOD_4 ( ) ; } finally { c . METHOD_5 ( ) ; } }\n"}
