{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "26f1133593498a87216f0dd4954ff7c07313b740", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    * Expects the JS to generate one bad-read warning.\n    */\n   private void assertRedeclare(String js) {\n    testWarning(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n   /**", "fixed": "    * Expects the JS to generate one bad-read warning.\n    */\n   private void assertRedeclare(String js) {\n    testError(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n   /**", "sourceBeforeFix": "testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)", "sourceAfterFix": "testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         return checker;\n     }\n    private String[] removeSuppressed(String[] from, String[] remove) {\n         final Collection<String> coll =\n             Lists.newArrayList(Arrays.asList(from));\n         coll.removeAll(Arrays.asList(remove));", "fixed": "         return checker;\n     }\n    private static String[] removeSuppressed(String[] from, String[] remove) {\n         final Collection<String> coll =\n             Lists.newArrayList(Arrays.asList(from));\n         coll.removeAll(Arrays.asList(remove));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PulsarEndpointBuilder\n             extends\n                 PulsarEndpointConsumerBuilder, PulsarEndpointProducerBuilder {\n         default AdvancedPulsarEndpointBuilder advanced() {", "fixed": "     \n    public interface PulsarEndpointBuilder\n             extends\n                 PulsarEndpointConsumerBuilder, PulsarEndpointProducerBuilder {\n         default AdvancedPulsarEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "af6a4908c4dd38c0f935803ab6b8ed99387219f2", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "fixed": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "sourceBeforeFix": "logger.error(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())", "sourceAfterFix": "logger.debug(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 7:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 7:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypes()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", \"b\")", "fixed": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", \"b\")", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "dd80647fbf218880e5f8d72441d080b6c92778fa", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t\ttry {\r\n \t\t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t\t} catch (Exception e) {\r\n\t\t\t\tthrow new GdxRuntimeException(\"Failed to read Vorbis.\");\r\n \t\t\t}\r\n \t\t\tif (bytes == 0 && i < 2) {\r\n \t\t\t\tthrow new GdxRuntimeException(\"End of file before finding all Vorbis headers.\");\r", "fixed": " \t\t\ttry {\r\n \t\t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t\t} catch (Exception e) {\r\n\t\t\t\tthrow new GdxRuntimeException(\"Failed to read Vorbis.\", e);\r\n \t\t\t}\r\n \t\t\tif (bytes == 0 && i < 2) {\r\n \t\t\t\tthrow new GdxRuntimeException(\"End of file before finding all Vorbis headers.\");\r", "sourceBeforeFix": "new GdxRuntimeException(\"Failure reading Vorbis.\")", "sourceAfterFix": "new GdxRuntimeException(\"Failure reading Vorbis.\",e)"}
{"fixCommitSHA1": "d33c0ebf8f8f52fb6fb82d615cec50a10627d267", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\n\t\tprivate String port = \"5000\";\n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n\t\t\t\tconfig.put(\"crash.telnet.port\", this.port);\n \t\t\t}\n \t\t}", "fixed": " \t\t\n\t\tprivate Integer port = 5000;\n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n\t\t\t\tconfig.put(\"crash.telnet.port\", String.valueOf(this.port));\n \t\t\t}\n \t\t}", "sourceBeforeFix": "public String getPort(){   return this.port; } ", "sourceAfterFix": "public Integer getPort(){   return this.port; } "}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "    * \n    * @param queueName Name of the job queue.\n    */\n  protected void setQueueName(String queueName) {\n     super.setQueueName(queueName);\n   }", "fixed": "    * \n    * @param queueName Name of the job queue.\n    */\n  @InterfaceAudience.Private\n  public void setQueueName(String queueName) {\n     super.setQueueName(queueName);\n   }", "sourceBeforeFix": "4", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RssEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedRssEndpointBuilder advanced() {\n             return (AdvancedRssEndpointBuilder) this;\n         }", "fixed": "     \n    public interface RssEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedRssEndpointBuilder advanced() {\n             return (AdvancedRssEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "b715b5c1376b13452ef810bd5e8dedc9982e19ac", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": " public class AtmosphereResourceLifecycleInterceptor implements AtmosphereInterceptor {\n     private String method = \"GET\";\n    private static final Logger logger = LoggerFactory.getLogger(SSEAtmosphereInterceptor.class);\n     @Override\n     public void configure(AtmosphereConfig config) {", "fixed": " public class AtmosphereResourceLifecycleInterceptor implements AtmosphereInterceptor {\n     private String method = \"GET\";\n    private static final Logger logger = LoggerFactory.getLogger(AtmosphereResourceLifecycleInterceptor.class);\n     @Override\n     public void configure(AtmosphereConfig config) {", "sourceBeforeFix": "SSEAtmosphereInterceptor.class", "sourceAfterFix": "AtmosphereResourceLifecycleInterceptor.class"}
{"fixCommitSHA1": "7346f16a2b9513dabebfdbec521bbf520ad63d2b", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "         if (this.mDirected) {\n             graph = graphModel.getDirectedGraphVisible();\n         } else {\n            graph = graphModel.getUndirectedGraph();\n         }\n         graph.readLock();", "fixed": "         if (this.mDirected) {\n             graph = graphModel.getDirectedGraphVisible();\n         } else {\n            graph = graphModel.getUndirectedGraphVisible();\n         }\n         graph.readLock();", "sourceBeforeFix": "graphModel.getUndirectedGraph()", "sourceAfterFix": "graphModel.getUndirectedGraphVisible()"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "194a3d4413de06e4f57f2c2bdb001fcd1fd4385b", "projectName": "facebook.presto", "bugType": "Less Specific If", "problem": "     private String formatDataRate(long inputDataSize, Duration duration)\n     {\n         double rate = inputDataSize / duration.convertTo(TimeUnit.SECONDS);\n        if (Double.isNaN(rate)) {\n             return \"0Bps\";\n         }\n         DataSize dataSize = new DataSize(rate, Unit.BYTE).convertToMostSuccinctDataSize();", "fixed": "     private String formatDataRate(long inputDataSize, Duration duration)\n     {\n         double rate = inputDataSize / duration.convertTo(TimeUnit.SECONDS);\n        if (Double.isNaN(rate) || Double.isInfinite(rate)) {\n             return \"0Bps\";\n         }\n         DataSize dataSize = new DataSize(rate, Unit.BYTE).convertToMostSuccinctDataSize();", "sourceBeforeFix": "Double.isNaN(rate)", "sourceAfterFix": "Double.isNaN(rate) || Double.isInfinite(rate)"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    private static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n    assertEquals(4, stopwatch.elapsedMillis());\n   }\n   public void testElapsedMillis_multipleSegments() {", "fixed": "     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n    assertEquals(4, stopwatch.elapsed(MILLISECONDS));\n   }\n   public void testElapsedMillis_multipleSegments() {", "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}
{"fixCommitSHA1": "46941b16a30e493238924701f938cbf3318eb355", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     return mBlockIdsOnTiers;\n   }", "fixed": "    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n     return mBlockIdsOnTiers;\n   }", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "14db1773526284bfc9837a4ef9121862dc8544fb", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": " class ObjectRecordWithStats extends AbstractRecordWithStats<Object> {\n    private Object value;\n     public ObjectRecordWithStats() {\n         super();", "fixed": " class ObjectRecordWithStats extends AbstractRecordWithStats<Object> {\n    private volatile Object value;\n     public ObjectRecordWithStats() {\n         super();", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid tag value\", response = Void.class, responseContainer = \"List\") })\n    List<List<Pet>> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags);\n     @GET\n     @Path(\"/{petId}\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid tag value\", response = Void.class, responseContainer = \"List\") })\n    List<Pet> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags) throws Exception;\n     @GET\n     @Path(\"/{petId}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "d725e4c654270636bc7de92cc6d74683b1de29fe", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         boolean needPostProjectionCoercion = false;\n         for (FunctionCall aggregate : analysis.getAggregates(node)) {\n             Expression rewritten = subPlan.rewrite(aggregate);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getType(aggregate));", "fixed": "         boolean needPostProjectionCoercion = false;\n         for (FunctionCall aggregate : analysis.getAggregates(node)) {\n             Expression rewritten = subPlan.rewrite(aggregate);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getTypeWithCoercions(aggregate));", "sourceBeforeFix": "analysis.getType(expression)", "sourceAfterFix": "analysis.getTypeWithCoercions(expression)"}
{"fixCommitSHA1": "5805f36ea1b29a185ded3305590df0872c3abb44", "projectName": "libgdx.libgdx", "bugType": "Change Unary Operator\t", "problem": " \t\t\tdirection.set(0, 0, 1);\r\n \t\t} else {\r\n \t\t\tup.set(0, 1, 0);\r\n\t\t\tdirection.set(0, 0, 1);\r\n \t\t}\r\n \t\tposition.set(zoom * viewportWidth / 2.0f, zoom * viewportHeight / 2.0f, 0);\r\n \t\tthis.viewportWidth = viewportWidth;\r", "fixed": " \t\t\tdirection.set(0, 0, 1);\r\n \t\t} else {\r\n \t\t\tup.set(0, 1, 0);\r\n\t\t\tdirection.set(0, 0, -1);\r\n \t\t}\r\n \t\tposition.set(zoom * viewportWidth / 2.0f, zoom * viewportHeight / 2.0f, 0);\r\n \t\tthis.viewportWidth = viewportWidth;\r", "sourceBeforeFix": "1", "sourceAfterFix": "-1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "562622c839991c9fa82a9c73bdb1887a9edf8696", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "     long longBytesValue =\n         sDefaultConfiguration.getBytes(Constants.USER_BLOCK_REMOTE_READ_BUFFER_SIZE_BYTES);\n    Assert.assertEquals(Constants.MB * 8, longBytesValue);\n     longBytesValue = sDefaultConfiguration.getBytes(Constants.NETWORK_THRIFT_FRAME_SIZE_BYTES_MAX);\n     Assert.assertEquals(Constants.MB * 16, longBytesValue);", "fixed": "     long longBytesValue =\n         sDefaultConfiguration.getBytes(Constants.USER_BLOCK_REMOTE_READ_BUFFER_SIZE_BYTES);\n    Assert.assertEquals(Constants.KB * 4, longBytesValue);\n     longBytesValue = sDefaultConfiguration.getBytes(Constants.NETWORK_THRIFT_FRAME_SIZE_BYTES_MAX);\n     Assert.assertEquals(Constants.MB * 16, longBytesValue);", "sourceBeforeFix": "8 * Constants.MB", "sourceAfterFix": "4 * Constants.KB"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8097cb4e299f056973c04abeaad879eb55f44775", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "    * User can override this method if there is a better way to perform bulk lookup\n    */\n  Map<String, String> applyAll(Iterable<String> keys)\n   {\n     if (keys == null) {\n       return Collections.emptyMap();", "fixed": "    * User can override this method if there is a better way to perform bulk lookup\n    */\n  public Map<String, String> applyAll(Iterable<String> keys)\n   {\n     if (keys == null) {\n       return Collections.emptyMap();", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IgniteCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface IgniteCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SchematronEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSchematronEndpointBuilder advanced() {", "fixed": "     \n    public interface SchematronEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSchematronEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "af812cbe0fb290ac7b825b4203f2079b753cb085", "projectName": "square.okhttp", "bugType": "Change Identifier Used", "problem": "   private void reusedConnectionFailsWithPost(TransferKind transferKind, int requestSize)\n       throws Exception {\n    server.enqueue(new MockResponse().setBody(\"A\").setSocketPolicy(SHUTDOWN_INPUT_AT_END));\n     server.enqueue(new MockResponse().setBody(\"B\"));\n     server.enqueue(new MockResponse().setBody(\"C\"));\n     server.play();", "fixed": "   private void reusedConnectionFailsWithPost(TransferKind transferKind, int requestSize)\n       throws Exception {\n    server.enqueue(new MockResponse().setBody(\"A\").setSocketPolicy(DISCONNECT_AT_END));\n     server.enqueue(new MockResponse().setBody(\"B\"));\n     server.enqueue(new MockResponse().setBody(\"C\"));\n     server.play();", "sourceBeforeFix": "new MockResponse().setBody(\"A\").setSocketPolicy(SHUTDOWN_INPUT_AT_END)", "sourceAfterFix": "new MockResponse().setBody(\"A\").setSocketPolicy(DISCONNECT_AT_END)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "5b669bd30cef473ddf2c0c0318652a938d8d3428", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "   private static final Redwood.RedwoodChannels log = Redwood.channels(StanfordCoreNLPClient.class);\n   \nprivate static final Pattern URL_PATTERN = Pattern.compile(\"(?:(https?):\n   /**\n    * Information on how to connect to a backend.\n    * The semantics of one of these objects is as follows:\n    * <ul>\n    *   <li>It should define a hostname and port to connect to.</li>\n    *   <li>This represents ONE thread on the remote server. The client should", "fixed": "   private static final Redwood.RedwoodChannels log = Redwood.channels(StanfordCoreNLPClient.class);\n   \nprivate static final Pattern URL_PATTERN = Pattern.compile(\"(?:(https?):\n   /**\n    * Information on how to connect to a backend.\n    * The semantics of one of these objects is as follows:\n   *\n    * <ul>\n    *   <li>It should define a hostname and port to connect to.</li>\n    *   <li>This represents ONE thread on the remote server. The client should", "sourceBeforeFix": "log.warn(\"Could not annotate via server! Trying to annotate locally...\",t)", "sourceAfterFix": "log.err(\"Could not annotate via server! Trying to annotate locally...\",t)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n                Thread.sleep(50);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r", "fixed": "             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n                Thread.sleep(100);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xdf", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   }\n   class StreamFinishingSource extends ForwardingSource {\n    public StreamFinishingSource(Source delegate) {\n       super(delegate);\n     }", "fixed": "   }\n   class StreamFinishingSource extends ForwardingSource {\n    StreamFinishingSource(Source delegate) {\n       super(delegate);\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "d90c2e643a15cec40c8a48f11a515bb7b2ffde3e", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       long sessionId = IdUtils.createSessionId();\n       long blockSize = openUfsBlockOptions.getBlockSize();\n       boolean isSourceLocal = mLocalWorkerAddress.getHost().equals(request.getSourceHost())\n          && mLocalWorkerAddress.getRpcPort() == request.getSourcePort();\n       try {\n         if (isSourceLocal) {", "fixed": "       long sessionId = IdUtils.createSessionId();\n       long blockSize = openUfsBlockOptions.getBlockSize();\n       boolean isSourceLocal = mLocalWorkerAddress.getHost().equals(request.getSourceHost())\n          && mLocalWorkerAddress.getDataPort() == request.getSourcePort();\n       try {\n         if (isSourceLocal) {", "sourceBeforeFix": "mLocalWorkerAddress.getRpcPort()", "sourceAfterFix": "mLocalWorkerAddress.getDataPort()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ServerEndpointBuilder\n             extends\n                 ServerEndpointConsumerBuilder, ServerEndpointProducerBuilder {\n         default AdvancedServerEndpointBuilder advanced() {", "fixed": "     \n    public interface ServerEndpointBuilder\n             extends\n                 ServerEndpointConsumerBuilder, ServerEndpointProducerBuilder {\n         default AdvancedServerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a382c85225c19d45fe7052af28654cd5aca7ef11", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "                 status = ufs.getStatus(ufsUri);\n               } catch (Exception e) {\n                 throw new IOException(String.format(\"Cannot sync UFS directory %s: %s.\", ufsUri,\n                    e.getMessage()), e);\n               }\n               if (status.isFile()) {\n                 throw new InvalidPathException(String.format(", "fixed": "                 status = ufs.getStatus(ufsUri);\n               } catch (Exception e) {\n                 throw new IOException(String.format(\"Cannot sync UFS directory %s: %s.\", ufsUri,\n                    e.toString()), e);\n               }\n               if (status.isFile()) {\n                 throw new InvalidPathException(String.format(", "sourceBeforeFix": "e.getMessage()", "sourceAfterFix": "e.toString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xff", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "fixed": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void logoutUser();\n     @PUT\n     @Path(\"/{username}\")", "fixed": "     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void logoutUser() throws Exception;\n     @PUT\n     @Path(\"/{username}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "09694b9eaf40fff637428b473b8fdcef8f8c37c2", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "       \"alluxio.worker.block.allocator.MaxFreeAllocator\"),\n   WORKER_BIND_HOST(Name.WORKER_BIND_HOST, \"0.0.0.0\"),\n   WORKER_BLOCK_HEARTBEAT_INTERVAL_MS(Name.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS, 1000),\n  WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS, 10000),\n   WORKER_BLOCK_THREADS_MAX(Name.WORKER_BLOCK_THREADS_MAX, 2048),\n   WORKER_BLOCK_THREADS_MIN(Name.WORKER_BLOCK_THREADS_MIN, 256),\n   WORKER_DATA_BIND_HOST(Name.WORKER_DATA_BIND_HOST, \"0.0.0.0\"),", "fixed": "       \"alluxio.worker.block.allocator.MaxFreeAllocator\"),\n   WORKER_BIND_HOST(Name.WORKER_BIND_HOST, \"0.0.0.0\"),\n   WORKER_BLOCK_HEARTBEAT_INTERVAL_MS(Name.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS, 1000),\n  WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS, 60000),\n   WORKER_BLOCK_THREADS_MAX(Name.WORKER_BLOCK_THREADS_MAX, 2048),\n   WORKER_BLOCK_THREADS_MIN(Name.WORKER_BLOCK_THREADS_MIN, 256),\n   WORKER_DATA_BIND_HOST(Name.WORKER_DATA_BIND_HOST, \"0.0.0.0\"),", "sourceBeforeFix": "WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS,10000)", "sourceAfterFix": "WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS,60000)"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fffaa7778e75625710adc9e458e7a549c525ce9", "projectName": "apache.hbase", "bugType": "Change Caller in Function Call", "problem": "       priorRange = ranges[i];\n       cumNum = val;\n     }\n    long val = histogram.getCount();\n     if (val - cumNum > 0) {\n       metricsRecordBuilder.addCounter(\n           Interns.info(name + \"_\" + rangeType + \"_\" + ranges[ranges.length - 1] + \"-inf\", desc),", "fixed": "       priorRange = ranges[i];\n       cumNum = val;\n     }\n    long val = snapshot.getCount();\n     if (val - cumNum > 0) {\n       metricsRecordBuilder.addCounter(\n           Interns.info(name + \"_\" + rangeType + \"_\" + ranges[ranges.length - 1] + \"-inf\", desc),", "sourceBeforeFix": "histogram.getCount()", "sourceAfterFix": "snapshot.getCount()"}
{"fixCommitSHA1": "6e4e6d32757138712bcba38d7ab1ed8ae97cdcb5", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "         for(int i = 0; i < fields.size(); ++i) {\n           StructField left = other.get(i);\n           StructField right = fields.get(i);\n          if (!(left.getFieldName().equals(right.getFieldName()) &&\n                 left.getFieldObjectInspector().equals\n                     (right.getFieldObjectInspector()))) {\n             return false;", "fixed": "         for(int i = 0; i < fields.size(); ++i) {\n           StructField left = other.get(i);\n           StructField right = fields.get(i);\n          if (!(left.getFieldName().equalsIgnoreCase(right.getFieldName()) &&\n                 left.getFieldObjectInspector().equals\n                     (right.getFieldObjectInspector()))) {\n             return false;", "sourceBeforeFix": "field.getFieldName().equals(s)", "sourceAfterFix": "field.getFieldName().equalsIgnoreCase(s)"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "fixed": " \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Before\n     @Override\n     public void setUp() throws Exception {\n        nagios = new NagiosNscaStub(25667, \"secret\");\n         nagios.start();\n         super.setUp();", "fixed": "     @Before\n     @Override\n     public void setUp() throws Exception {\n        nagios = new NagiosNscaStub(25668, \"secret\");\n         nagios.start();\n         super.setUp();", "sourceBeforeFix": "config.setPort(25667)", "sourceAfterFix": "config.setPort(25668)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "d725e4c654270636bc7de92cc6d74683b1de29fe", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         ImmutableMap.Builder<Symbol, Expression> newTranslations = ImmutableMap.builder();\n         for (Expression expression : expressions) {\n            Symbol symbol = symbolAllocator.newSymbol(expression, analysis.getType(expression));\n             projections.put(symbol, translations.rewrite(expression));\n             newTranslations.put(symbol, expression);", "fixed": "         ImmutableMap.Builder<Symbol, Expression> newTranslations = ImmutableMap.builder();\n         for (Expression expression : expressions) {\n            Symbol symbol = symbolAllocator.newSymbol(expression, analysis.getTypeWithCoercions(expression));\n             projections.put(symbol, translations.rewrite(expression));\n             newTranslations.put(symbol, expression);", "sourceBeforeFix": "analysis.getType(aggregate)", "sourceAfterFix": "analysis.getTypeWithCoercions(aggregate)"}
{"fixCommitSHA1": "213109c115e65588b265650eee80fad7652b2129", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\ttry {\r\n \t\t\tJoglMusic music = new JoglMusic(((JoglFileHandle)file));\r\n \t\t\treturn music;\r\n\t\t} catch (Exception e) {\r\n \t\t\tthrow new GdxRuntimeException(\"Couldn't create Music instance from file '\" + file + \"'\", e);\r\n \t\t}\r\n \t}\r", "fixed": " \t\ttry {\r\n \t\t\tJoglMusic music = new JoglMusic(((JoglFileHandle)file));\r\n \t\t\treturn music;\r\n\t\t} catch (Throwable e) {\r\n \t\t\tthrow new GdxRuntimeException(\"Couldn't create Music instance from file '\" + file + \"'\", e);\r\n \t\t}\r\n \t}\r", "sourceBeforeFix": "Exception e", "sourceAfterFix": "Throwable e"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "41d67a3d7b3c2cc86be1792d79083f0d56981d2f", "projectName": "swagger-api.swagger-core", "bugType": "Wrong Function Name", "problem": "                     apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);\n                 } else if (\"javax.ws.rs.DefaultValue\".equals(item.annotationType().getName())) {\n                     try {\n                        rsDefault = (String) item.getClass().getMethod(\"value\").invoke(item);\n                     } catch (Exception ex) {\n                         LOGGER.error(\"Invocation of value method failed\", ex);\n                     }", "fixed": "                     apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);\n                 } else if (\"javax.ws.rs.DefaultValue\".equals(item.annotationType().getName())) {\n                     try {\n                        rsDefault = (String) item.annotationType().getMethod(\"value\").invoke(item);\n                     } catch (Exception ex) {\n                         LOGGER.error(\"Invocation of value method failed\", ex);\n                     }", "sourceBeforeFix": "item.getClass()", "sourceAfterFix": "item.annotationType()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSchematronEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SchematronEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSchematronEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SchematronEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c97c55c5fe3bd7a54b9f36cf68f17b5cf19ecaf3", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "     }\n     private Channel lookupInCache(Url url) {\n        Channel channel = connectionsPool.get(url);\n         if (channel != null) {\n             /**\n              * The Channel will eventually be closed by Netty and will becomes invalid.", "fixed": "     }\n     private Channel lookupInCache(Url url) {\n        Channel channel = connectionsPool.get(url.getBaseUrl());\n         if (channel != null) {\n             /**\n              * The Channel will eventually be closed by Netty and will becomes invalid.", "sourceBeforeFix": "Entry<Url,Channel>", "sourceAfterFix": "Entry<String,Channel>"}
{"fixCommitSHA1": "639ca0c8d5f1e74a3dad3bb0014602bdd57dc602", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         newConfig.setEvictionPolicy(mapConfig.getEvictionPolicy());\n         newConfig.setEvictionPercentage(mapConfig.getEvictionPercentage());\n         newConfig.setReadBackupData(mapConfig.isReadBackupData());\n        newConfig.setBackupCount(mapConfig.getTotalBackupCount());\n         newConfig.setAsyncBackupCount(mapConfig.getAsyncBackupCount());\n         newConfig.setMaxSizeConfig(mapConfig.getMaxSizeConfig());\n         service.getMapContainer(mapName).setMapConfig(newConfig.getAsReadOnly());", "fixed": "         newConfig.setEvictionPolicy(mapConfig.getEvictionPolicy());\n         newConfig.setEvictionPercentage(mapConfig.getEvictionPercentage());\n         newConfig.setReadBackupData(mapConfig.isReadBackupData());\n        newConfig.setBackupCount(mapConfig.getBackupCount());\n         newConfig.setAsyncBackupCount(mapConfig.getAsyncBackupCount());\n         newConfig.setMaxSizeConfig(mapConfig.getMaxSizeConfig());\n         service.getMapContainer(mapName).setMapConfig(newConfig.getAsReadOnly());", "sourceBeforeFix": "mapConfig.getTotalBackupCount()", "sourceAfterFix": "mapConfig.getBackupCount()"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 8:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 8:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"}
{"fixCommitSHA1": "3e70031de5c5d25011ce8363d161e75595a84133", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": "   }\n   public Boolean isBulkInsertable(Class<? extends PersistentObject> persistentObjectClass) {\n  \treturn bulkInsertableMap != null && bulkInsertableMap.get(persistentObjectClass);\n   }", "fixed": "   }\n   public Boolean isBulkInsertable(Class<? extends PersistentObject> persistentObjectClass) {\n  \treturn bulkInsertableMap != null && bulkInsertableMap.containsKey(persistentObjectClass);\n   }", "sourceBeforeFix": "bulkInsertableMap.get(persistentObjectClass)", "sourceAfterFix": "bulkInsertableMap.containsKey(persistentObjectClass)"}
{"fixCommitSHA1": "ad687b722b4d0c3461fdb7c45206257145484d8a", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n      OutputStream out = closer.register(ufs.create(dstPath.getPath(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {", "fixed": "       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n      OutputStream out = closer.register(ufs.create(dstPath.toString(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {", "sourceBeforeFix": "dstPath.getPath()", "sourceAfterFix": "dstPath.toString()"}
{"fixCommitSHA1": "e74cd24ff2229b060e219af33c3abe5cbf1079d1", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "                   Bytes.toStringBinary(data));\n               throw e;\n             }\n            LOG.error(\"Node \" + path + \" already exists and this is not a \" +\n                 \"retry\");\n             throw e;", "fixed": "                   Bytes.toStringBinary(data));\n               throw e;\n             }\n            LOG.info(\"Node \" + path + \" already exists and this is not a \" +\n                 \"retry\");\n             throw e;", "sourceBeforeFix": "LOG.error(\"Node \" + path + \" already exists and this is not a \"+ \"retry\")", "sourceAfterFix": "LOG.info(\"Node \" + path + \" already exists and this is not a \"+ \"retry\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void split(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    split(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void split(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    split(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(regionname)", "sourceAfterFix": "Bytes.toBytes(regionname)"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return true;\n   }\n  private boolean isRegularExpressionFirstChar(char ch) {\n     return isRegularExpressionChar(ch) && ch != '*';\n   }\n  private boolean isRegularExpressionChar(char ch) {\n     switch (ch) {\n     case '/':\n       return false;", "fixed": "     return true;\n   }\n  private static boolean isRegularExpressionFirstChar(char ch) {\n     return isRegularExpressionChar(ch) && ch != '*';\n   }\n  private static boolean isRegularExpressionChar(char ch) {\n     switch (ch) {\n     case '/':\n       return false;", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "099bf2014a8cd43c270c5900ce9d34689287d0ef", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "     String expected = \"\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY);", "fixed": "     String expected = \"\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY);", "sourceBeforeFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)", "sourceAfterFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSoroushBotEndpointBuilder\n             extends\n                 AdvancedSoroushBotEndpointConsumerBuilder, AdvancedSoroushBotEndpointProducerBuilder {\n         default SoroushBotEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSoroushBotEndpointBuilder\n             extends\n                 AdvancedSoroushBotEndpointConsumerBuilder, AdvancedSoroushBotEndpointProducerBuilder {\n         default SoroushBotEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
