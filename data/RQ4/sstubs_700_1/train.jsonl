{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testVarArgs1() {", "fixed": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testVarArgs1() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node1)", "sourceAfterFix": "node1.isEquivalentTo(node1)"}
{"fixCommitSHA1": "852c8b720dd810c699d6303d0470efa246c84d26", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"hello\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"hello\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForRole\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRole\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d4e7640fe2f77e350582a12f86b5e46a0e02bb08", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tparent().mkdirs();\r\n \t\ttry {\r\n \t\t\treturn new FileOutputStream(file(), append);\r\n\t\t} catch (FileNotFoundException ex) {\r\n \t\t\tif (file().isDirectory())\r\n \t\t\t\tthrow new GdxRuntimeException(\"Cannot open a stream to a directory: \" + file + \" (\" + type + \")\", ex);\r\n \t\t\tthrow new GdxRuntimeException(\"Error writing file: \" + file + \" (\" + type + \")\", ex);\r", "fixed": " \t\tparent().mkdirs();\r\n \t\ttry {\r\n \t\t\treturn new FileOutputStream(file(), append);\r\n\t\t} catch (Exception ex) {\r\n \t\t\tif (file().isDirectory())\r\n \t\t\t\tthrow new GdxRuntimeException(\"Cannot open a stream to a directory: \" + file + \" (\" + type + \")\", ex);\r\n \t\t\tthrow new GdxRuntimeException(\"Error writing file: \" + file + \" (\" + type + \")\", ex);\r", "sourceBeforeFix": "FileNotFoundException ex", "sourceAfterFix": "Exception ex"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "d0c64987a9cb694631a3e5bc77b669f49f93a30e", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();", "fixed": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();", "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0", "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BlobServiceEndpointBuilder\n             extends\n                 BlobServiceEndpointConsumerBuilder, BlobServiceEndpointProducerBuilder {\n         default AdvancedBlobServiceEndpointBuilder advanced() {", "fixed": "     \n    public interface BlobServiceEndpointBuilder\n             extends\n                 BlobServiceEndpointConsumerBuilder, BlobServiceEndpointProducerBuilder {\n         default AdvancedBlobServiceEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "97814491bc0e383e136612dea07af841c0121681", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "fixed": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "sourceBeforeFix": "Preconditions.checkNotNull(manager)", "sourceAfterFix": "Preconditions.checkNotNull(manager,\"manager\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSjms2EndpointBuilder\n             extends\n                 AdvancedSjms2EndpointConsumerBuilder, AdvancedSjms2EndpointProducerBuilder {\n         default Sjms2EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSjms2EndpointBuilder\n             extends\n                 AdvancedSjms2EndpointConsumerBuilder, AdvancedSjms2EndpointProducerBuilder {\n         default Sjms2EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "b0662ce83b466318ce8dcec13428846b1b190aaf", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             throw new IOException(\"Address is required!\");\n         }\n        ClientConnection clientConnection = connections.get(address);\n         if (clientConnection == null) {\n            final Object lock = getLock(address);\n             synchronized (lock) {\n                clientConnection = connections.get(address);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);", "fixed": "             throw new IOException(\"Address is required!\");\n         }\n        ClientConnection clientConnection = connections.get(target);\n         if (clientConnection == null) {\n            final Object lock = getLock(target);\n             synchronized (lock) {\n                clientConnection = connections.get(target);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);", "sourceBeforeFix": "connections.get(address)", "sourceAfterFix": "connections.get(target)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Sjms2EndpointBuilder\n             extends\n                 Sjms2EndpointConsumerBuilder, Sjms2EndpointProducerBuilder {\n         default AdvancedSjms2EndpointBuilder advanced() {", "fixed": "     \n    public interface Sjms2EndpointBuilder\n             extends\n                 Sjms2EndpointConsumerBuilder, Sjms2EndpointProducerBuilder {\n         default AdvancedSjms2EndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean scrolled (int amount) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].scrolled(amount)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean scrolled (int amount) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).scrolled(amount)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "7dc9bddf9a64d9309755accddeb91976371792ed", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " public class PropertiesConfigurationFactory<T> implements FactoryBean<T>,\n \t\tMessageSourceAware, InitializingBean {\n\tprivate static final char[] EXACT_DELIMETERS = { '_', '.', '[' };\n\tprivate static final char[] TARGET_NAME_DELIMETERS = { '_', '.' };\n \tprivate final Log logger = LogFactory.getLog(getClass());", "fixed": " public class PropertiesConfigurationFactory<T> implements FactoryBean<T>,\n \t\tMessageSourceAware, InitializingBean {\n\tprivate static final char[] EXACT_DELIMITERS = { '_', '.', '[' };\n\tprivate static final char[] TARGET_NAME_DELIMITERS = { '_', '.' };\n \tprivate final Log logger = LogFactory.getLog(getClass());", "sourceBeforeFix": "new DefaultPropertyNamePatternsMatcher(EXACT_DELIMETERS,true,names)", "sourceAfterFix": "new DefaultPropertyNamePatternsMatcher(EXACT_DELIMITERS,true,names)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedWebsocketEndpointBuilder\n             extends\n                 AdvancedWebsocketEndpointConsumerBuilder, AdvancedWebsocketEndpointProducerBuilder {\n         default WebsocketEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedWebsocketEndpointBuilder\n             extends\n                 AdvancedWebsocketEndpointConsumerBuilder, AdvancedWebsocketEndpointProducerBuilder {\n         default WebsocketEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "fixed": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"diskspace\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"diskspace\")"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "fixed": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "sourceBeforeFix": "GL.glPolygonOffsetEXT(factor,units)", "sourceAfterFix": "GL.glPolygonOffset(factor,units)"}
{"fixCommitSHA1": "fbc26e589318e29e5971fe526c114cb66e2fea5f", "projectName": "facebook.presto", "bugType": "Same Function More Args", "problem": "             return false;\n         }\n         Unnest other = (Unnest) obj;\n        return Objects.equals(this.expressions, other.expressions);\n     }\n }", "fixed": "             return false;\n         }\n         Unnest other = (Unnest) obj;\n        return Objects.equals(expressions, other.expressions) && withOrdinality == other.withOrdinality;\n     }\n }", "sourceBeforeFix": "Objects.hash(expressions)", "sourceAfterFix": "Objects.hash(expressions,withOrdinality)"}
{"fixCommitSHA1": "d83dd417fff4ae2407e04a21056f331a773d970b", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         private boolean fallback;\n        public SampleComponent(boolean fallback) {\n             this.fallback = fallback;\n         }", "fixed": "         private boolean fallback;\n        SampleComponent(boolean fallback) {\n             this.fallback = fallback;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "fixed": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables();\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "64bc69ef4c547771f44f6b6b103cda7be2f0922b", "projectName": "dropwizard.metrics", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic SortedMap<String, Timer> getTimers(MetricFilter filter) {\n\t\treturn adaptMetrics(Timer.class, reg.getCounters(transformFilter(filter)));\n \t}\n \tprivate io.dropwizard.metrics.MetricFilter transformFilter(final MetricFilter filter) {", "fixed": " \t}\n \tpublic SortedMap<String, Timer> getTimers(MetricFilter filter) {\n\t\treturn adaptMetrics(Timer.class, reg.getTimers(transformFilter(filter)));\n \t}\n \tprivate io.dropwizard.metrics.MetricFilter transformFilter(final MetricFilter filter) {", "sourceBeforeFix": "reg.getCounters(transformFilter(filter))", "sourceAfterFix": "reg.getTimers(transformFilter(filter))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedRestletEndpointBuilder\n             extends\n                 AdvancedRestletEndpointConsumerBuilder, AdvancedRestletEndpointProducerBuilder {\n         default RestletEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedRestletEndpointBuilder\n             extends\n                 AdvancedRestletEndpointConsumerBuilder, AdvancedRestletEndpointProducerBuilder {\n         default RestletEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getPath() == null && that.getPath() != null) {\n             return false;\n        } else if (that.getPath() == null) {\n             return false;\n         }\n         if (!getPath().equals(that.getPath())) {", "fixed": "         if (getPath() == null && that.getPath() != null) {\n             return false;\n        } else if (that.getPath() == null && getPath() != null) {\n             return false;\n         }\n         if (!getPath().equals(that.getPath())) {", "sourceBeforeFix": "c.getDomain() == null", "sourceAfterFix": "c.getDomain() == null && getDomain() != null"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "634910c11ff38d87dfdd72865742528820a37aa9", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     newNode.useSourceInfoFromForTree(node);\n     newNode.setOriginalName(name);\n    newNode.makeNonIndexable();\n     node.getGrandparent().addChildToBack(IR.exprResult(newNode));\n   }", "fixed": "     newNode.useSourceInfoFromForTree(node);\n     newNode.setOriginalName(name);\n    newNode.makeNonIndexableRecursive();\n     node.getGrandparent().addChildToBack(IR.exprResult(newNode));\n   }", "sourceBeforeFix": "newNode.makeNonIndexable()", "sourceAfterFix": "newNode.makeNonIndexableRecursive()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {", "sourceBeforeFix": "context.var(\"long\")", "sourceAfterFix": "context.var(\"long\",2)"}
{"fixCommitSHA1": "5d40c31aa7c36597ce311bca7da61a0e2773e7d2", "projectName": "openhab.openhab", "bugType": "Change Unary Operator\t", "problem": " \t\t\t\t\tlogger.debug(\"NODE {}: DEAD node.\", node.getNodeId());\n\t\t\t\t\tif(isNodeHealing(node.getNodeId())) {\n \t\t\t\t\t\tlogger.debug(\"NODE {}: DEAD node - requesting network heal.\", node.getNodeId());\n \t\t\t\t\t\thealNode(node.getNodeId());", "fixed": " \t\t\t\t\tlogger.debug(\"NODE {}: DEAD node.\", node.getNodeId());\n\t\t\t\t\tif(!isNodeHealing(node.getNodeId())) {\n \t\t\t\t\t\tlogger.debug(\"NODE {}: DEAD node - requesting network heal.\", node.getNodeId());\n \t\t\t\t\t\thealNode(node.getNodeId());", "sourceBeforeFix": "isNodeHealing(node.getNodeId())", "sourceAfterFix": "!isNodeHealing(node.getNodeId())"}
{"fixCommitSHA1": "7a90cfe13f0b030f6e091154c1d0091c685039f1", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "     public BufferClassesResponse getBufferClasses() {\n         try {\n            return api.path(routes.BufferResource().getBufferClasses(), BufferClassesResponse.class).node(this).execute();\n         } catch (Exception e) {\n             LOG.error(\"Unable to read buffer class names from node \" + this, e);\n         }", "fixed": "     public BufferClassesResponse getBufferClasses() {\n         try {\n            return api.path(routes.BuffersResource().getBufferClasses(), BufferClassesResponse.class).node(this).execute();\n         } catch (Exception e) {\n             LOG.error(\"Unable to read buffer class names from node \" + this, e);\n         }", "sourceBeforeFix": "routes.BufferResource()", "sourceAfterFix": "routes.BuffersResource()"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "     private final Request request;\n     private final Response response;\n    public CacheHttpURLConnection(Response response) {\n       super(response.request().url().url());\n       this.request = response.request();\n       this.response = response;", "fixed": "     private final Request request;\n     private final Response response;\n    CacheHttpURLConnection(Response response) {\n       super(response.request().url().url());\n       this.request = response.request();\n       this.response = response;", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "25923003ecdba4ed236618b917dadeb36e74addf", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(50);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "fixed": "                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"fixCommitSHA1": "3c8d3e908b01f47c69600a235fb7e5173f4f0d7b", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   \n  public final Iterable<ObjectType> getImplementedInterfaces() {\n     FunctionType superCtor = isConstructor() ? getSuperClassConstructor() : null;\n     if (superCtor == null) {\n       return implementedInterfaces;", "fixed": "   }\n   \n  public final ImmutableList<ObjectType> getImplementedInterfaces() {\n     FunctionType superCtor = isConstructor() ? getSuperClassConstructor() : null;\n     if (superCtor == null) {\n       return implementedInterfaces;", "sourceBeforeFix": "Iterable<ObjectType>", "sourceAfterFix": "ImmutableList<ObjectType>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "9e1e4f79c76f39c8d6efccbf8351e7d13ced8007", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         if (msgInfo == null) {\n             return new SctpMessage(protocolIdentifier, streamIdentifier, unordered, content().duplicate());\n         } else {\n            return new SctpMessage(msgInfo, content().copy());\n         }\n     }", "fixed": "         if (msgInfo == null) {\n             return new SctpMessage(protocolIdentifier, streamIdentifier, unordered, content().duplicate());\n         } else {\n            return new SctpMessage(msgInfo, content().duplicate());\n         }\n     }", "sourceBeforeFix": "content().copy()", "sourceAfterFix": "content().duplicate()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedWeatherEndpointBuilder\n             extends\n                 AdvancedWeatherEndpointConsumerBuilder, AdvancedWeatherEndpointProducerBuilder {\n         default WeatherEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedWeatherEndpointBuilder\n             extends\n                 AdvancedWeatherEndpointConsumerBuilder, AdvancedWeatherEndpointProducerBuilder {\n         default WeatherEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4aff5e0b2a9a8ba3b5b151efe57c5ef574c04c82", "projectName": "openhab.openhab", "bugType": "More Specific If", "problem": "\t\t\tif (sendMessage() == false) {\n \t\t\t\tcurrentStage = currentStage.getNextStage();\n \t\t\t\tstageAdvanced = true;", "fixed": "\t\t\tif (currentStage != NodeStage.DONE && sendMessage() == false) {\n \t\t\t\tcurrentStage = currentStage.getNextStage();\n \t\t\t\tstageAdvanced = true;", "sourceBeforeFix": "sendMessage() == false", "sourceAfterFix": "currentStage != NodeStage.DONE && sendMessage() == false"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8abd59029e7c0bc0973b492fd84a386b26661bc7", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "             }\n         });\n         try {\n            finish.await(getTimeout(), TimeUnit.MILLISECONDS);\n         } catch (InterruptedException e) {\n             throw new RemotingException(this, \"client(url: \" + getUrl() + \") failed to connect to server \" + getRemoteAddress() + \" client-side timeout \"\n                    + getTimeout() + \"ms (elapsed: \" + (System.currentTimeMillis() - start)\n                     + \"ms) from netty client \" + NetUtils.getLocalHost() + \" using dubbo version \"\n                     + Version.getVersion() + \", cause: \" + e.getMessage(), e);\n         }", "fixed": "             }\n         });\n         try {\n            finish.await(getConnectTimeout(), TimeUnit.MILLISECONDS);\n         } catch (InterruptedException e) {\n             throw new RemotingException(this, \"client(url: \" + getUrl() + \") failed to connect to server \" + getRemoteAddress() + \" client-side timeout \"\n                    + getConnectTimeout() + \"ms (elapsed: \" + (System.currentTimeMillis() - start)\n                     + \"ms) from netty client \" + NetUtils.getLocalHost() + \" using dubbo version \"\n                     + Version.getVersion() + \", cause: \" + e.getMessage(), e);\n         }", "sourceBeforeFix": "getTimeout()", "sourceAfterFix": "getConnectTimeout()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomixMessagingEndpointBuilder\n             extends\n                 AdvancedAtomixMessagingEndpointConsumerBuilder, AdvancedAtomixMessagingEndpointProducerBuilder {\n         default AtomixMessagingEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomixMessagingEndpointBuilder\n             extends\n                 AdvancedAtomixMessagingEndpointConsumerBuilder, AdvancedAtomixMessagingEndpointProducerBuilder {\n         default AtomixMessagingEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "93a9fb352d11fb796964cbe4650b4a247d908b58", "projectName": "naver.pinpoint", "bugType": "Change Modifier", "problem": "         return file;\n     }\n    public class Entry {\n         private final URL filePath;\n         private final File file;\n         private final ClassLoader classLoader;", "fixed": "         return file;\n     }\n    public static class Entry {\n         private final URL filePath;\n         private final File file;\n         private final ClassLoader classLoader;", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "4ef7f28d367d8f2066871575ab6d2d985f8f8928", "projectName": "alibaba.dubbo", "bugType": "Change Modifier", "problem": "     public List<Invoker<T>> getInvokers(TreeNode<T> node, URL url, Invocation invocation) {\n        if (node.getChildren() == null || node.getChildren().size() == 0) {\n             return node.getInvokers();\n         }", "fixed": "     public List<Invoker<T>> getInvokers(TreeNode<T> node, URL url, Invocation invocation) {\n        if (node.isLeaf()) {\n             return node.getInvokers();\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Failed to get files from \" + baseDirectory.getAbsolutePath())", "sourceAfterFix": "LOG.warn(\"Failed to get files from \" + baseDirectory.getAbsolutePath())"}
{"fixCommitSHA1": "ba98d83f598bbf2e9f5c41eeb51d36369a088fa6", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "         }\n         \n        protected int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "fixed": "         }\n         \n        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page1 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 1, 2);\n         assertThat(page1.pagination().getCount()).isEqualTo(2);\n        assertThat(page1.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page1.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello2\", \"hello3\");", "fixed": "         final PaginatedList<TestDTO> page1 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 1, 2);\n         assertThat(page1.pagination().getCount()).isEqualTo(2);\n        assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page1.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello2\", \"hello3\");", "sourceBeforeFix": "assertThat(page1.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "873890e93c781d8ee428a765f1ced06c7db36d54", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Change Boolean Literal", "problem": "     }\n     \n     @Override\n     public boolean isIncludeDynamicAccessors() {\n        return true;\n     }\n     @Override", "fixed": "     }\n     \n     @Override\n     public boolean isIncludeDynamicAccessors() {\n        return false;\n     }\n     @Override", "sourceBeforeFix": "return true; ", "sourceAfterFix": "return false; "}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(639)", "sourceAfterFix": "new StringBuilder(638)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\ttry {\r\n \t\t\tthis.destroy();\r\n \t\t}\r\n\t\tcatch (Throwable ex) {\r\n \t\t\tlog.error(ex);\r\n \t\t}\r\n \t}\r", "fixed": " \t\ttry {\r\n \t\t\tthis.destroy();\r\n \t\t}\r\n\t\tcatch (Exception ex) {\r\n \t\t\tlog.error(ex);\r\n \t\t}\r\n \t}\r", "sourceBeforeFix": "Throwable ex", "sourceAfterFix": "Exception ex"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastMultimapEndpointBuilder\n             extends\n                 HazelcastMultimapEndpointConsumerBuilder, HazelcastMultimapEndpointProducerBuilder {\n         default AdvancedHazelcastMultimapEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastMultimapEndpointBuilder\n             extends\n                 HazelcastMultimapEndpointConsumerBuilder, HazelcastMultimapEndpointProducerBuilder {\n         default AdvancedHazelcastMultimapEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "66181be1c62816d916c9301dddd2c8c5bc7be1dc", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "       @JsonProperty(\"function\") final String function\n   )\n   {\n    Preconditions.checkNotNull(name, \"Must have a valid, non-null aggregator name\");\n     Preconditions.checkNotNull(fieldNames, \"Must have a valid, non-null fieldNames\");\n    Preconditions.checkNotNull(function, \"Must have a valid, non-null fnAggregate\");\n     this.name = name;\n     this.fieldNames = fieldNames;", "fixed": "       @JsonProperty(\"function\") final String function\n   )\n   {\n    Preconditions.checkNotNull(name, \"Must have a valid, non-null post-aggregator name\");\n     Preconditions.checkNotNull(fieldNames, \"Must have a valid, non-null fieldNames\");\n    Preconditions.checkNotNull(function, \"Must have a valid, non-null function\");\n     this.name = name;\n     this.fieldNames = fieldNames;", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fbfd5fd9bb171b1ab5533822c1a201f6d12c6523", "projectName": "aws.aws-sdk-java", "bugType": "Change Identifier Used", "problem": "     public Item withJSON(String attrName, String json) {\n         checkInvalidAttribute(attrName, json);\n         attributes.put(attrName,\n            valueConformer.transform(Jackson.fromJsonString(json, Map.class)));\n         return this;\n     }", "fixed": "     public Item withJSON(String attrName, String json) {\n         checkInvalidAttribute(attrName, json);\n         attributes.put(attrName,\n            valueConformer.transform(Jackson.fromJsonString(json, Object.class)));\n         return this;\n     }", "sourceBeforeFix": "Map.class", "sourceAfterFix": "Object.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f0fa093ebc7f7d1b0b9beb254f6531bb77310853", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "             initEndpointMapper();\n             autoDetectContainer();\n            configureWebDotXmlAtmosphereHandler(sc);\n             asyncSupport.init(scFacade);\n             initAtmosphereHandler(scFacade);\n            configureAtmosphereInterceptor(sc);\n             analytics();\n             if (broadcasterCacheClassName == null) {", "fixed": "             initEndpointMapper();\n             autoDetectContainer();\n            configureWebDotXmlAtmosphereHandler(scFacade);\n             asyncSupport.init(scFacade);\n             initAtmosphereHandler(scFacade);\n            configureAtmosphereInterceptor(scFacade);\n             analytics();\n             if (broadcasterCacheClassName == null) {", "sourceBeforeFix": "configureWebDotXmlAtmosphereHandler(sc)", "sourceAfterFix": "configureWebDotXmlAtmosphereHandler(scFacade)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Error_Length() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Error_Length() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xff", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "fixed": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = this.response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferent() {", "fixed": "     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferent() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "ec9c05f4cd668deb502768bb4a3c8511a5becffc", "projectName": "wildfly.wildfly", "bugType": "Change Modifier", "problem": " \npublic class BasicTests {\n     protected EndpointIface proxy;", "fixed": " \npublic abstract class BasicTests {\n     protected EndpointIface proxy;", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "734c7a8318f516e4825fd72ab53699f96fabbe68", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         getMockEndpoint(\"mock:result\").assertNoDuplicates(body());\n         ExecutorService executor = Executors.newFixedThreadPool(poolSize);\n        Map<Integer, Future> responses = new ConcurrentHashMap();\n         for (int i = 0; i < files; i++) {\n             final int index = i;\n             Future out = executor.submit(new Callable<Object>() {", "fixed": "         getMockEndpoint(\"mock:result\").assertNoDuplicates(body());\n         ExecutorService executor = Executors.newFixedThreadPool(poolSize);\n        Map<Integer, Future> responses = new ConcurrentHashMap<Integer, Future>();\n         for (int i = 0; i < files; i++) {\n             final int index = i;\n             Future out = executor.submit(new Callable<Object>() {", "sourceBeforeFix": "Thread.sleep(1000)", "sourceAfterFix": "Thread.sleep(2000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8abd59029e7c0bc0973b492fd84a386b26661bc7", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "                 .channel(NioSocketChannel.class);\n        if (getTimeout() < 3000) {\n             bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 3000);\n         } else {\n            bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, getTimeout());\n         }\n         bootstrap.handler(new ChannelInitializer() {", "fixed": "                 .channel(NioSocketChannel.class);\n        if (getConnectTimeout() < 3000) {\n             bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 3000);\n         } else {\n            bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, getConnectTimeout());\n         }\n         bootstrap.handler(new ChannelInitializer() {", "sourceBeforeFix": "getTimeout()", "sourceAfterFix": "getConnectTimeout()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3b86c65378a65dc8ae9017ad90a2da72e8cc2d30", "projectName": "JakeWharton.ActionBarSherlock", "bugType": "Change Binary Operator", "problem": "     @Override\n     public void setAlpha(int alpha) {\n         if (alpha != (color >>> 24)) {\n            color = (color & 0x00FFFFFF) & (alpha << 24);\n             invalidateSelf();\n         }\n     }", "fixed": "     @Override\n     public void setAlpha(int alpha) {\n         if (alpha != (color >>> 24)) {\n            color = (color & 0x00FFFFFF) | (alpha << 24);\n             invalidateSelf();\n         }\n     }", "sourceBeforeFix": "(color & 0x00FFFFFF) & (alpha << 24)", "sourceAfterFix": "(color & 0x00FFFFFF) | (alpha << 24)"}
{"fixCommitSHA1": "6e5b82f6f987d5dee5e5dba4dfbf3e3873f5a777", "projectName": "mybatis.mybatis-3", "bugType": "Change Identifier Used", "problem": "       }\n     } catch (SQLException e) {\n      log.debug(\"Unexpected exception on closing transaction.  Cause: \" + e);\n     } finally {\n       transaction = null;\n       deferredLoads = null;", "fixed": "       }\n     } catch (SQLException e) {\n      log.warn(\"Unexpected exception on closing transaction.  Cause: \" + e);\n     } finally {\n       transaction = null;\n       deferredLoads = null;", "sourceBeforeFix": "log.debug(\"Unexpected exception on closing transaction.  Cause: \" + e)", "sourceAfterFix": "log.warn(\"Unexpected exception on closing transaction.  Cause: \" + e)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b3c2d1521f396a5d30a132be0d4e6d648ddc6444", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\tString prefix = \"integration.channel.\" + name;\n \t\t\tmetrics.addAll(getStatistics(prefix + \".errorRate\",\n \t\t\t\t\texporter.getChannelErrorRate(name)));\n\t\t\tmetrics.add(new Metric<Integer>(prefix + \".sendCount\", exporter\n\t\t\t\t\t.getChannelSendCount(name)));\n \t\t\tmetrics.addAll(getStatistics(prefix + \".sendRate\",\n \t\t\t\t\texporter.getChannelSendRate(name)));\n \t\t\tmetrics.add(new Metric<Long>(prefix + \".receiveCount\", exporter", "fixed": " \t\t\tString prefix = \"integration.channel.\" + name;\n \t\t\tmetrics.addAll(getStatistics(prefix + \".errorRate\",\n \t\t\t\t\texporter.getChannelErrorRate(name)));\n\t\t\tmetrics.add(new Metric<Long>(prefix + \".sendCount\", exporter\n\t\t\t\t\t.getChannelSendCountLong(name)));\n \t\t\tmetrics.addAll(getStatistics(prefix + \".sendRate\",\n \t\t\t\t\texporter.getChannelSendRate(name)));\n \t\t\tmetrics.add(new Metric<Long>(prefix + \".receiveCount\", exporter", "sourceBeforeFix": "Metric<Integer>", "sourceAfterFix": "Metric<Long>"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.error(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "fixed": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "sourceBeforeFix": "LOG.error(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)", "sourceAfterFix": "LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "178ff1dab007c547844a2195b178ae298b6138b5", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         Set<Object> unique = new HashSet<Object>();\n         for (Future<String> future : responses.values()) {\n            String reply = future.get(30, TimeUnit.SECONDS);\n             assertNotNull(\"Should get a reply\", reply);\n             unique.add(reply);\n         }", "fixed": "         Set<Object> unique = new HashSet<Object>();\n         for (Future<String> future : responses.values()) {\n            String reply = future.get(120, TimeUnit.SECONDS);\n             assertNotNull(\"Should get a reply\", reply);\n             unique.add(reply);\n         }", "sourceBeforeFix": "future.get(30,TimeUnit.SECONDS)", "sourceAfterFix": "future.get(120,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "22298e1958a648d627ae3cbc3fe7bf0f2613286f", "projectName": "spring-projects.spring-security-oauth", "bugType": "Change Numeric Literal", "problem": " \tpublic FrameworkEndpointHandlerMapping() {\n\t\tsetOrder(Ordered.LOWEST_PRECEDENCE - 1);\n \t}\n \t/**", "fixed": " \tpublic FrameworkEndpointHandlerMapping() {\n\t\tsetOrder(Ordered.LOWEST_PRECEDENCE - 2);\n \t}\n \t/**", "sourceBeforeFix": "Ordered.LOWEST_PRECEDENCE - 1", "sourceAfterFix": "Ordered.LOWEST_PRECEDENCE - 2"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5992b8ccbc9bc21d353ec3738c3f8994dfc3bbf8", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n      OutputStream out = closer.register(ufs.create(dstPath.getPath(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {", "fixed": "       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n      OutputStream out = closer.register(ufs.create(dstPath.toString(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {", "sourceBeforeFix": "dstPath.getPath()", "sourceAfterFix": "dstPath.toString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AtomEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AtomEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "f506c13369d250027dfe9d5ee09695c839d64270", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "    * including both lock and unlock attempts. Failure to do so can result in\n    * corrupting the acquireLocks set.\n    */\n  private void lockStateChanged(CycleDetectingLock lock) {\n     if (!lock.isAcquiredByCurrentThread()) {\n       ArrayList<LockGraphNode> acquiredLockList = acquiredLocks.get();\n       LockGraphNode node = lock.getLockGraphNode();", "fixed": "    * including both lock and unlock attempts. Failure to do so can result in\n    * corrupting the acquireLocks set.\n    */\n  private static void lockStateChanged(CycleDetectingLock lock) {\n     if (!lock.isAcquiredByCurrentThread()) {\n       ArrayList<LockGraphNode> acquiredLockList = acquiredLocks.get();\n       LockGraphNode node = lock.getLockGraphNode();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "fixed": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "a36966d96196f3d64daa2809b7bc6077eedc5a9d", "projectName": "swagger-api.swagger-codegen", "bugType": "Same Function More Args", "problem": "         \"Bool\",\n         \"Void\",\n         \"String\",\n        \"Character\")\n     );\n     defaultIncludes = new HashSet<String>(\n       Arrays.asList(", "fixed": "         \"Bool\",\n         \"Void\",\n         \"String\",\n        \"Character\",\n        \"AnyObject\")\n     );\n     defaultIncludes = new HashSet<String>(\n       Arrays.asList(", "sourceBeforeFix": "Arrays.asList(\"Int\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\")", "sourceAfterFix": "Arrays.asList(\"Int\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\",\"AnyObject\")"}
{"fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n   }\n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {", "fixed": "     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {", "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glGetShader(shader,pname,params)", "sourceAfterFix": "GL20.glGetShaderiv(shader,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"fixCommitSHA1": "99ed41cc78fe7dbc36ea17d9a6a1a56b51bcb12d", "projectName": "gephi.gephi", "bugType": "Change Numeric Literal", "problem": "         assertEquals(inDegree3, 1);\r\n         assertEquals(degree1, 2);\r\n         assertEquals(outDegree5, 1);\r\n        assertEquals(avDegree, 2.0);\r\n     }\r\n     @Test\r", "fixed": "         assertEquals(inDegree3, 1);\r\n         assertEquals(degree1, 2);\r\n         assertEquals(outDegree5, 1);\r\n        assertEquals(avDegree, 1.0);\r\n     }\r\n     @Test\r", "sourceBeforeFix": "assertEquals(avDegree,2.0)", "sourceAfterFix": "assertEquals(avDegree,1.0)"}
{"fixCommitSHA1": "5be7bae54f193a7a9c6adf15e323af1e187a7592", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "           Transition transition = parser.transitionIndex.get(predictedTransition.object());\n           State newState = transition.apply(state, predictedTransition.score());\n          if (bestState == null || newState.score() < bestState.score()) {\n             bestState = newState;\n           }\n           beam.add(newState);", "fixed": "           Transition transition = parser.transitionIndex.get(predictedTransition.object());\n           State newState = transition.apply(state, predictedTransition.score());\n          if (bestState == null || bestState.score() < newState.score()) {\n             bestState = newState;\n           }\n           beam.add(newState);", "sourceBeforeFix": "newState.score()", "sourceAfterFix": "bestState.score()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3761eecbff48b37391956c4c2d035c3b8456e39e", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void testTimerInvoked() throws Exception {\n        mock.expectedMessageCount(1);\n         assertMockEndpointsSatisfied();\n     }", "fixed": "     @Test\n     public void testTimerInvoked() throws Exception {\n        mock.expectedMinimumMessageCount(1);\n         assertMockEndpointsSatisfied();\n     }", "sourceBeforeFix": "mock.expectedMessageCount(1)", "sourceAfterFix": "mock.expectedMinimumMessageCount(1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "25923003ecdba4ed236618b917dadeb36e74addf", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                }\r\n                if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "fixed": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "f1024ba0e7d5f1276a285a4218f26c70252719b5", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t\t\t\ttry {\n \t\t\t\t\tinstance.killTaskManager();\n \t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\tLOG.error(StringUtils.stringifyException(ioe));\n \t\t\t\t}\n \t\t\t}\n \t\t};", "fixed": " \t\t\t\ttry {\n \t\t\t\t\tinstance.killTaskManager();\n \t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\tLOG.error(ioe);\n \t\t\t\t}\n \t\t\t}\n \t\t};", "sourceBeforeFix": "LOG.error(e.getMessage())", "sourceAfterFix": "LOG.error(e.getMessage(),e)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesNodesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesNodesEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KubernetesNodesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesNodesEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generatePositionEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "fixed": "                 .retInt();\n     }\n    private static void generatePositionEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "       try {\n         statsObj = getMS().getTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"get_column_statistics_by_table: \", statsObj != null);\n       }\n       return statsObj;\n     }", "fixed": "       try {\n         statsObj = getMS().getTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"get_column_statistics_by_table: \", statsObj != null, null);\n       }\n       return statsObj;\n     }", "sourceBeforeFix": "endFunction(\"write_column_statistics: \",ret != false)", "sourceAfterFix": "endFunction(\"write_column_statistics: \",ret != false,null)"}
{"fixCommitSHA1": "cb6f6e26c12839e59243f25bfb142ec5e5b71135", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     public void testBeanRecipientListParallelTimeout() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceived(\"BC\");\n         template.sendBody(\"direct:start\", \"Hello\");", "fixed": "     public void testBeanRecipientListParallelTimeout() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.message(0).body().not(body().contains(\"A\"));\n         template.sendBody(\"direct:start\", \"Hello\");", "sourceBeforeFix": "timeout=2000", "sourceAfterFix": "timeout=1000"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         context.stop();\n         List<MessagePayload> events = nagios.getMessagePayloadList();\n        assertTrue(\"Should be 12+ events, was: \" + events.size(), events.size() >= 12);\n     }\n     @Test", "fixed": "         context.stop();\n         List<MessagePayload> events = nagios.getMessagePayloadList();\n        assertTrue(\"Should be 11+ events, was: \" + events.size(), events.size() >= 11);\n     }\n     @Test", "sourceBeforeFix": "notifier.getConfiguration().setPort(25667)", "sourceAfterFix": "notifier.getConfiguration().setPort(25669)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3ae514dcbcea3287baaf498f28cce0267a2d50bb", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15874, value = \"Expected only one deployment, found %d\")\n     IllegalStateException expectedOnlyOneDeployment(int i);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10874, value = \"Expected only one deployment, found %d\")\n     IllegalStateException expectedOnlyOneDeployment(int i);\n     /**", "sourceBeforeFix": "id=15873", "sourceAfterFix": "id=10873"}
{"fixCommitSHA1": "5ecca6532856178f8802d0a1adde51b0632bc043", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "                 long total = Runtime.getRuntime().totalMemory();\n                 long used = (total - Runtime.getRuntime().freeMemory());\n                 if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {\n                    return maxSize > (used / 1024 / 1024);\n                 } else {\n                    return maxSize > (used / total);\n                 }\n             }\n             return false;", "fixed": "                 long total = Runtime.getRuntime().totalMemory();\n                 long used = (total - Runtime.getRuntime().freeMemory());\n                 if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {\n                    return maxSize < (used / 1024 / 1024);\n                 } else {\n                    return maxSize < (used / total);\n                 }\n             }\n             return false;", "sourceBeforeFix": "maxSize > (used / total)", "sourceAfterFix": "maxSize < (used / total)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean keyTyped (char character) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].keyTyped(character)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean keyTyped (char character) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).keyTyped(character)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "8d1af7d7a8d8e028a3058a848c3b0cd9862f297d", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     LoadMetadataOptions options = LoadMetadataOptions.defaults();\n     options.setCreateAncestors(isCreateAncestors);\n     options.setLoadDirectChildren(isLoadDirectChildren);\n    options.setUnderFileStatus(new UnderFileStatus(\"dummy\", isDirectory));\n     Assert.assertEquals(isCreateAncestors, options.isCreateAncestors());\n     Assert.assertEquals(isLoadDirectChildren, options.isLoadDirectChildren());\n     Assert.assertEquals(isDirectory, options.getUnderFileStatus().isDirectory());", "fixed": "     LoadMetadataOptions options = LoadMetadataOptions.defaults();\n     options.setCreateAncestors(isCreateAncestors);\n     options.setLoadDirectChildren(isLoadDirectChildren);\n    options.setUnderFileStatus(\n        new UnderFileStatus(\"dummy\", 0L, isDirectory, 0L, \"owner\", \"group\", (short) 077));\n     Assert.assertEquals(isCreateAncestors, options.isCreateAncestors());\n     Assert.assertEquals(isLoadDirectChildren, options.isLoadDirectChildren());\n     Assert.assertEquals(isDirectory, options.getUnderFileStatus().isDirectory());", "sourceBeforeFix": "new UnderFileStatus(\"dummy\",isDirectory)", "sourceAfterFix": "new UnderFileStatus(\"dummy\",0L,isDirectory,0L,\"owner\",\"group\",(short)077)"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                     span.log(fields);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n             return message;\n         }", "fixed": "                     span.log(fields);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n             return message;\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "e0aff862bb608004841da3487d94aecb45964e17", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = FILES_BYTES * 1000L / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }", "fixed": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = FILES_BYTES * 1000.0 / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }", "sourceBeforeFix": "1000L * FILES_BYTES", "sourceAfterFix": "1000.0 * FILES_BYTES"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResultClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "cd70b8db19db4a22136c8411fd0b72252b2f975a", "projectName": "AsyncHttpClient.async-http-client", "bugType": "More Specific If", "problem": "     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "fixed": "     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "sourceBeforeFix": "contentType != null", "sourceAfterFix": "contentType != null && charset == null"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "             .containsKey(\"name.invalidPattern\"));\n     }\n    private void verifyConfigNode(\n         DefaultConfiguration config, String name, int childrenLength,\n         Properties atts) throws Exception {\n         assertEquals(\"name.\", name, config.getName());", "fixed": "             .containsKey(\"name.invalidPattern\"));\n     }\n    private static void verifyConfigNode(\n         DefaultConfiguration config, String name, int childrenLength,\n         Properties atts) throws Exception {\n         assertEquals(\"name.\", name, config.getName());", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SipEndpointBuilder\n             extends\n                 SipEndpointConsumerBuilder, SipEndpointProducerBuilder {\n         default AdvancedSipEndpointBuilder advanced() {", "fixed": "     \n    public interface SipEndpointBuilder\n             extends\n                 SipEndpointConsumerBuilder, SipEndpointProducerBuilder {\n         default AdvancedSipEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n          intBuf = buf.DATA.asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {", "fixed": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fc13cf7d7843029d807878869e3c64cace5640dd", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public Cell deepClone() {\n     return new KeyValue(this);\n   }", "fixed": "   }\n   @Override\n  public ExtendedCell deepClone() {\n     return new KeyValue(this);\n   }", "sourceBeforeFix": "@Override public Cell deepClone(){   return new KeyValue(this); } ", "sourceAfterFix": "@Override public ExtendedCell deepClone(){   return new KeyValue(this); } "}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "97814491bc0e383e136612dea07af841c0121681", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "fixed": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.error(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "fixed": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "sourceBeforeFix": "LOG.error(\"Failed to get files from \" + baseDirectory.getAbsolutePath())", "sourceAfterFix": "LOG.warn(\"Failed to get files from \" + baseDirectory.getAbsolutePath())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(50);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "fixed": "                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "8abd59029e7c0bc0973b492fd84a386b26661bc7", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "             if (!isConnected()) {\n                 throw new RemotingException(this, \"Failed connect to server \" + getRemoteAddress() + \" from \" + getClass().getSimpleName() + \" \"\n                         + NetUtils.getLocalHost() + \" using dubbo version \" + Version.getVersion()\n                        + \", cause: Connect wait timeout: \" + getTimeout() + \"ms.\");\n             } else {\n                 if (logger.isInfoEnabled()) {\n                     logger.info(\"Successed connect to server \" + getRemoteAddress() + \" from \" + getClass().getSimpleName() + \" \"", "fixed": "             if (!isConnected()) {\n                 throw new RemotingException(this, \"Failed connect to server \" + getRemoteAddress() + \" from \" + getClass().getSimpleName() + \" \"\n                         + NetUtils.getLocalHost() + \" using dubbo version \" + Version.getVersion()\n                        + \", cause: Connect wait timeout: \" + getConnectTimeout() + \"ms.\");\n             } else {\n                 if (logger.isInfoEnabled()) {\n                     logger.info(\"Successed connect to server \" + getRemoteAddress() + \" from \" + getClass().getSimpleName() + \" \"", "sourceBeforeFix": "getTimeout()", "sourceAfterFix": "getConnectTimeout()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6e4e6d32757138712bcba38d7ab1ed8ae97cdcb5", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     @Override\n     public StructField getStructFieldRef(String s) {\n       for(StructField field: fields) {\n        if (field.getFieldName().equals(s)) {\n           return field;\n         }\n       }", "fixed": "     @Override\n     public StructField getStructFieldRef(String s) {\n       for(StructField field: fields) {\n        if (field.getFieldName().equalsIgnoreCase(s)) {\n           return field;\n         }\n       }", "sourceBeforeFix": "left.getFieldName().equals(right.getFieldName())", "sourceAfterFix": "left.getFieldName().equalsIgnoreCase(right.getFieldName())"}
{"fixCommitSHA1": "fd7767ccda80823c077cdc3701166b319d0bd078", "projectName": "netty.netty", "bugType": "Missing Throws Exception", "problem": "         this.port = port;\n     }\n    public void run() {\n         ServerBootstrap b = new ServerBootstrap();\n         try {\n             b.eventLoop(new NioEventLoop(), new NioEventLoop())", "fixed": "         this.port = port;\n     }\n    public void run() throws InterruptedException {\n         ServerBootstrap b = new ServerBootstrap();\n         try {\n             b.eventLoop(new NioEventLoop(), new NioEventLoop())", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "fixed": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "* @see\n* @see NormalizableKey\n \t */\n\tpublic void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;\n \t/**\n \t * Reads the record back while de-normalizing the key fields. This must only be used when", "fixed": "* @see\n* @see NormalizableKey\n \t */\n\tpublic abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;\n \t/**\n \t * Reads the record back while de-normalizing the key fields. This must only be used when", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "e4754241591a948b354f61953a998a63c96f79ac", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": "             for(int i = 0; i < 5; i++) {\r\n                 highscores[i] = Integer.parseInt(in.readLine());\r\n             }\r\n        } catch (Exception e) {\r\n         } finally {\r\n             try {\r", "fixed": "             for(int i = 0; i < 5; i++) {\r\n                 highscores[i] = Integer.parseInt(in.readLine());\r\n             }\r\n        } catch (Throwable e) {\r\n         } finally {\r\n             try {\r", "sourceBeforeFix": "IOException e", "sourceAfterFix": "Throwable e"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "7907f476688eb48f9b46434e90ef0bb02c1ea5d5", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     void joinReset() {\r\n         joinInProgress = false;\r\n         setJoins.clear();\r\n        timeToStartJoin = System.currentTimeMillis() + WAIT_SECONDS_BEFORE_JOIN + 1000;\r\n     }\r\n     public class AsyncRemotelyObjectCallable extends TargetAwareOp {\r", "fixed": "     void joinReset() {\r\n         joinInProgress = false;\r\n         setJoins.clear();\r\n        timeToStartJoin = System.currentTimeMillis() + WAIT_MILLIS_BEFORE_JOIN;\r\n     }\r\n     public class AsyncRemotelyObjectCallable extends TargetAwareOp {\r", "sourceBeforeFix": "System.currentTimeMillis() + WAIT_SECONDS_BEFORE_JOIN + 1000", "sourceAfterFix": "System.currentTimeMillis() + WAIT_MILLIS_BEFORE_JOIN"}
{"fixCommitSHA1": "06ed1d48da4a57dc87cf3c1215bfe23bce4e78d8", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": " public class AllChecksTest extends BaseCheckTestSupport {\n     @Test\n     public void testAllChecksWithDefaultConfiguration() throws Exception {\n        final String inputFilePath = getNonCompilablePath(\"InputDefaultConfig.java\");\n         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;\n         for (Class<?> check : CheckUtil.getCheckstyleChecks()) {", "fixed": " public class AllChecksTest extends BaseCheckTestSupport {\n     @Test\n     public void testAllChecksWithDefaultConfiguration() throws Exception {\n        final String inputFilePath = getPath(\"InputDefaultConfig.java\");\n         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;\n         for (Class<?> check : CheckUtil.getCheckstyleChecks()) {", "sourceBeforeFix": "getNonCompilablePath(\"InputDefaultConfig.java\")", "sourceAfterFix": "getPath(\"InputDefaultConfig.java\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1d577b1b8bd3f51bcf8d9d89bb4598a28020af07", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                 new GenericFutureListener<Future<Channel>>() {\n             @Override\n             public void operationComplete(Future<Channel> future) throws Exception {\n                ctx.write(\n                         \"Welcome to \" + InetAddress.getLocalHost().getHostName() +\n                         \" secure chat service!\\n\");\n                ctx.write(\n                         \"Your session is protected by \" +\n                         ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() +\n                         \" cipher suite.\\n\");", "fixed": "                 new GenericFutureListener<Future<Channel>>() {\n             @Override\n             public void operationComplete(Future<Channel> future) throws Exception {\n                ctx.writeAndFlush(\n                         \"Welcome to \" + InetAddress.getLocalHost().getHostName() +\n                         \" secure chat service!\\n\");\n                ctx.writeAndFlush(\n                         \"Your session is protected by \" +\n                         ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() +\n                         \" cipher suite.\\n\");", "sourceBeforeFix": "c.write(\"[\" + ctx.channel().remoteAddress() + \"] \"+ msg+ '\\n')", "sourceAfterFix": "c.writeAndFlush(\"[\" + ctx.channel().remoteAddress() + \"] \"+ msg+ '\\n')"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "df63f141ab829146a5586f2b8da43eb8119b536b", "projectName": "apache.camel", "bugType": "More Specific If", "problem": "             LOG.debug(\"Uploading a dir...\");\n            if (entry != null) {\n                 throw new DropboxException(dropboxPath + \" exists on dropbox and is not a folder!\");\n             }\n             if (!dropboxPath.endsWith(DropboxConstants.DROPBOX_FILE_SEPARATOR)) {", "fixed": "             LOG.debug(\"Uploading a dir...\");\n            if (entry != null && !DropboxUploadMode.force.equals(mode)) {\n                 throw new DropboxException(dropboxPath + \" exists on dropbox and is not a folder!\");\n             }\n             if (!dropboxPath.endsWith(DropboxConstants.DROPBOX_FILE_SEPARATOR)) {", "sourceBeforeFix": "entry != null", "sourceAfterFix": "entry != null && !DropboxUploadMode.force.equals(mode)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedLdapEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LdapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedLdapEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LdapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "eb86a81034dce144bd7ac1e879ddf51a8e412a91", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     private class ClosingClientRunnable implements Runnable {\n         private final Socket socket;\n        public ClosingClientRunnable(Socket socket) {\n             this.socket = socket;\n         }", "fixed": "     private class ClosingClientRunnable implements Runnable {\n         private final Socket socket;\n        ClosingClientRunnable(Socket socket) {\n             this.socket = socket;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "fixed": "     }\n     @Override\n    public synchronized void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "5c2293d770a717694d0cedf4ebf9c9b2223571d0", "projectName": "alibaba.dubbo", "bugType": "Same Function Less Args", "problem": "     private void initDic(URL url) {\n         dic = new StaticDirectory<>(url, invokers);\n        dic.buildRouterChain(invokers);\n         dic.getRouterChain().setResidentRouters(Arrays.asList(routerFactory.getRouter(url)));\n     }", "fixed": "     private void initDic(URL url) {\n         dic = new StaticDirectory<>(url, invokers);\n        dic.buildRouterChain();\n         dic.getRouterChain().setResidentRouters(Arrays.asList(routerFactory.getRouter(url)));\n     }", "sourceBeforeFix": "dic.buildRouterChain(invokers)", "sourceAfterFix": "dic.buildRouterChain()"}
{"fixCommitSHA1": "1a5b454c115a5c4ea1239834dd236d806ce0e949", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t */\r\n \tpublic void scrollTexture (float xAmount, float yAmount) {\r\n \t\tfloat[] vertices = this.vertices;\r\n\t\tif (xAmount > 0) {\r\n \t\t\tfloat u = (vertices[U1] + xAmount) % 1;\r\n \t\t\tfloat u2 = u + width / texture.getWidth();\r\n \t\t\tvertices[U1] = u;\r", "fixed": " \t */\r\n \tpublic void scrollTexture (float xAmount, float yAmount) {\r\n \t\tfloat[] vertices = this.vertices;\r\n\t\tif (xAmount != 0) {\r\n \t\t\tfloat u = (vertices[U1] + xAmount) % 1;\r\n \t\t\tfloat u2 = u + width / texture.getWidth();\r\n \t\t\tvertices[U1] = u;\r", "sourceBeforeFix": "yAmount > 0", "sourceAfterFix": "yAmount != 0"}
{"fixCommitSHA1": "fd2bf7d972c703a603f7ec043b96649347f7e184", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "         httpClientBinder(binder).bindHttpClient(\"execute\", ForExecute.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(2, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                 });", "fixed": "         httpClientBinder(binder).bindHttpClient(\"execute\", ForExecute.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(30, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                 });", "sourceBeforeFix": "new Duration(2,SECONDS)", "sourceAfterFix": "new Duration(30,SECONDS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "14c151ba066a8911eebc76778962fc04f1b400c8", "projectName": "alibaba.druid", "bugType": "Change Boolean Literal", "problem": "     private int connectCount = 0;\n     protected void setUp() throws Exception {\n        dataSource.setInitExceptionThrow(true);\n         dataSource.setUrl(\"jdbc:mock:xxx\");\n         dataSource.setDriver(new MockDriver() {\n             public Connection connect(String url, Properties info) throws SQLException {", "fixed": "     private int connectCount = 0;\n     protected void setUp() throws Exception {\n        dataSource.setInitExceptionThrow(false);\n         dataSource.setUrl(\"jdbc:mock:xxx\");\n         dataSource.setDriver(new MockDriver() {\n             public Connection connect(String url, Properties info) throws SQLException {", "sourceBeforeFix": "dataSource.setInitExceptionThrow(true)", "sourceAfterFix": "dataSource.setInitExceptionThrow(false)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "958fa58492daee485f640bf3261449d9bab9ee6e", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     }\n     @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    @Test(expectedExceptions = RuntimeException.class, expectedExceptionsMessageRegExp = \".*Failing getObject call with \" + SC_FORBIDDEN + \".*\")\n     public void testReadForbidden()\n             throws Exception\n     {", "fixed": "     }\n     @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    @Test(expectedExceptions = IOException.class, expectedExceptionsMessageRegExp = \".*Failing getObject call with \" + SC_FORBIDDEN + \".*\")\n     public void testReadForbidden()\n             throws Exception\n     {", "sourceBeforeFix": "RuntimeException.class", "sourceAfterFix": "IOException.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n \t/**\n \t * Completely remove the given global property from the database", "fixed": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t/**\n \t * Completely remove the given global property from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.valueOf(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "fixed": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.debug(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "fixed": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.trace(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "sourceBeforeFix": "logger.debug(\"Received MyQ  JSON: {}\",dataString)", "sourceAfterFix": "logger.trace(\"Received MyQ  JSON: {}\",dataString)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see java.lang.Object\n \t */\n\tpublic int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "fixed": " \t * \n* @see java.lang.Object\n \t */\n\tpublic abstract int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "6424932989d3c6e6144a3ea1c312f3fd08b7c786", "projectName": "Alluxio.alluxio", "bugType": "Same Function Swap Args", "problem": "     String expected = \"/dir\";\n     for (String path : paths) {\n       String result = Utils.getFilePath(path, new TachyonConf());\n      Assert.assertEquals(result, expected);\n     }\n   }\n }", "fixed": "     String expected = \"/dir\";\n     for (String path : paths) {\n       String result = Utils.getFilePath(path, new TachyonConf());\n      Assert.assertEquals(expected, result);\n     }\n   }\n }", "sourceBeforeFix": "Assert.assertEquals(result,expected)", "sourceAfterFix": "Assert.assertEquals(expected,result)"}
{"fixCommitSHA1": "41df5a6f7ebe103b007a01aa58d400864e09de26", "projectName": "brettwooldridge.HikariCP", "bugType": "More Specific If", "problem": "             logger.error(\"maxLifetime cannot be negative.\");\n             throw new IllegalStateException(\"maxLifetime cannot be negative.\");\n         }\n        else if (maxLifetime < 120000)\n         {\n             logger.warn(\"maxLifetime is less than 120000ms, did you specify the wrong time unit?  Using default instead.\");\n             maxLifetime = MAX_LIFETIME;", "fixed": "             logger.error(\"maxLifetime cannot be negative.\");\n             throw new IllegalStateException(\"maxLifetime cannot be negative.\");\n         }\n        else if (maxLifetime < 120000 && maxLifetime != 0)\n         {\n             logger.warn(\"maxLifetime is less than 120000ms, did you specify the wrong time unit?  Using default instead.\");\n             maxLifetime = MAX_LIFETIME;", "sourceBeforeFix": "idleTimeout < 30000", "sourceAfterFix": "idleTimeout < 30000 && idleTimeout != 0"}
{"fixCommitSHA1": "d0f700176d3cb35beee720b91c5d2a97a27f5ccd", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "   @Test\n   public void createAtomic() throws IOException {\n     String testFile = PathUtils.concatPath(mUnderfsAddress, \"createAtomic\");\n    OutputStream stream = mUfs.create(testFile);\n     stream.write(TEST_BYTES);\n     Assert.assertFalse(mUfs.isFile(testFile));\n     stream.close();", "fixed": "   @Test\n   public void createAtomic() throws IOException {\n     String testFile = PathUtils.concatPath(mUnderfsAddress, \"createAtomic\");\n    OutputStream stream = mUfs.create(testFile, CreateOptions.defaults().setEnsureAtomic(true));\n     stream.write(TEST_BYTES);\n     Assert.assertFalse(mUfs.isFile(testFile));\n     stream.close();", "sourceBeforeFix": "mUfs.create(testFile)", "sourceAfterFix": "mUfs.create(testFile,CreateOptions.defaults().setEnsureAtomic(true))"}
{"fixCommitSHA1": "ec6f0cffe68e0736c04783b61f980f1271064dd9", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  public boolean equals(@Nullable Object obj) {\n     if (obj == this) {\n       return true;\n     }", "fixed": "   }\n   @Override\n  public final boolean equals(@Nullable Object obj) {\n     if (obj == this) {\n       return true;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n    public abstract void handle(Exception exception, Request request, Response response);\n }", "fixed": "      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n    public abstract void handle(T exception, Request request, Response response);\n }", "sourceBeforeFix": "? extends Exception", "sourceAfterFix": "? extends T"}
{"fixCommitSHA1": "dbd841562137595e365ccf2ad1524ecfdee958c9", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "           if (supertypeMethod.getModifiers().contains(Modifier.ABSTRACT)) {\n             ExecutableType methodType = Elements2.getExecutableElementAsMemberOf(\n                 types, supertypeMethod, extendingType);\n            implemetationMethodDescriptors.add(new ImplemetationMethodDescriptor.Builder()\n                 .name(supertypeMethod.getSimpleName().toString())\n                 .returnType(getAnnotatedType(element).getQualifiedName().toString())\n                 .publicMethod()", "fixed": "           if (supertypeMethod.getModifiers().contains(Modifier.ABSTRACT)) {\n             ExecutableType methodType = Elements2.getExecutableElementAsMemberOf(\n                 types, supertypeMethod, extendingType);\n            implementationMethodDescriptors.add(new ImplementationMethodDescriptor.Builder()\n                 .name(supertypeMethod.getSimpleName().toString())\n                 .returnType(getAnnotatedType(element).getQualifiedName().toString())\n                 .publicMethod()", "sourceBeforeFix": "implemetationMethodDescriptors.build()", "sourceAfterFix": "implementationMethodDescriptors.build()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d5b318132a1f6c792c153abe354f51d1054bab81", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\treq.getParameter(\"items\"), req.getParameter(\"groups\"));\n \t\t\tImageIO.write(chart, provider.getChartType().toString(), res.getOutputStream());\n \t\t} catch (ItemNotFoundException e) {\n\t\t\tlogger.debug(\"Item not found error while generating chart.\");\n \t\t} catch (IllegalArgumentException e) {\n\t\t\tlogger.debug(\"Illegal argument in chart: {}\", e);\n \t\t}\n \t}", "fixed": " \t\t\t\t\treq.getParameter(\"items\"), req.getParameter(\"groups\"));\n \t\t\tImageIO.write(chart, provider.getChartType().toString(), res.getOutputStream());\n \t\t} catch (ItemNotFoundException e) {\n\t\t\tlogger.info(\"Item not found error while generating chart: {}\", e);\n \t\t} catch (IllegalArgumentException e) {\n\t\t\tlogger.info(\"Illegal argument in chart: {}\", e);\n \t\t}\n \t}", "sourceBeforeFix": "logger.debug(\"Illegal argument in chart: {}\",e)", "sourceAfterFix": "logger.info(\"Illegal argument in chart: {}\",e)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     \n    public ListToTreeSelectionModelWrapper(JTreeTable jTreeTable) {\n         treeTable = jTreeTable;\n         getListSelectionModel().addListSelectionListener(createListSelectionListener());\n     }", "fixed": "     \n    ListToTreeSelectionModelWrapper(JTreeTable jTreeTable) {\n         treeTable = jTreeTable;\n         getListSelectionModel().addListSelectionListener(createListSelectionListener());\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "fixed": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "214197e24d5c29ccd1405052d51597bc3530f1bb", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         this.lifecycleStrategies.add(lifecycleStrategy);\n     }\n    public List<RouteDefinition> getRouteDefinitions() {\n         return routeDefinitions;\n     }\n    public RouteDefinition getRouteDefinition(String id) {\n         for (RouteDefinition route : routeDefinitions) {\n             if (route.getId().equals(id)) {\n                 return route;", "fixed": "         this.lifecycleStrategies.add(lifecycleStrategy);\n     }\n    public synchronized List<RouteDefinition> getRouteDefinitions() {\n         return routeDefinitions;\n     }\n    public synchronized RouteDefinition getRouteDefinition(String id) {\n         for (RouteDefinition route : routeDefinitions) {\n             if (route.getId().equals(id)) {\n                 return route;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "53921947d568c284669a95de482579ffe40f329e", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "    * @since 11.0\n    */\n   @Beta\n  public static <T> UnmodifiableIterable<T> mergeSorted(\n       final Iterable<? extends Iterable<? extends T>> iterables,\n       final Comparator<? super T> comparator) {\n     checkNotNull(iterables, \"iterables\");", "fixed": "    * @since 11.0\n    */\n   @Beta\n  public static <T> Iterable<T> mergeSorted(\n       final Iterable<? extends Iterable<? extends T>> iterables,\n       final Comparator<? super T> comparator) {\n     checkNotNull(iterables, \"iterables\");", "sourceBeforeFix": "UnmodifiableIterable<T>", "sourceAfterFix": "Iterable<T>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cb84b2788aeed6aad2bc4b1acb98290e060861e2", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       Assert.assertEquals(1, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "fixed": "       Assert.assertEquals(1, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "sourceBeforeFix": "ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())", "sourceAfterFix": "ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "5cc0714840bf8f7797a118e4bac5dabdd20e3f67", "projectName": "apache.hbase", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  public void setMasterServices(MasterServices masterServices) {\n     super.setMasterServices(masterServices);\n     this.localityCost.setServices(masterServices);\n     this.localityCandidateGenerator.setServices(masterServices);", "fixed": "   }\n   @Override\n  public synchronized void setMasterServices(MasterServices masterServices) {\n     super.setMasterServices(masterServices);\n     this.localityCost.setServices(masterServices);\n     this.localityCandidateGenerator.setServices(masterServices);", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e669002a9698f48bc48ee0138798f7acf655c33d", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     }\n     public List<BacklogTracerEventMessage> dumpAllTracedMessages() {\n        List<BacklogTracerEventMessage> answer = new ArrayList<>();\n         answer.addAll(queue);\n         if (isRemoveOnDump()) {\n             queue.clear();", "fixed": "     }\n     public List<BacklogTracerEventMessage> dumpAllTracedMessages() {\n        List<BacklogTracerEventMessage> answer = new ArrayList<BacklogTracerEventMessage>();\n         answer.addAll(queue);\n         if (isRemoveOnDump()) {\n             queue.clear();", "sourceBeforeFix": "100 * 1000", "sourceAfterFix": "10 * 1000"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fa5635c39e3000406103657977b98efa79bd4512", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "fixed": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "sourceBeforeFix": "conf.getSearchBaseURL()", "sourceAfterFix": "conf.getRestBaseURL()"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "950656a1fa6775e52d13648e6646bdadbfb4e173", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 return map.putIfAbsent(key, value);\n             case REPLACE:\n                 return map.replace(key, value);\n            case REPLACE_IS_SAME:\n                 return map.replace(key, value, newValue);\n             case SET:\n                 map.set(key, value);", "fixed": "                 return map.putIfAbsent(key, value);\n             case REPLACE:\n                 return map.replace(key, value);\n            case REPLACE_IF_SAME:\n                 return map.replace(key, value, newValue);\n             case SET:\n                 map.set(key, value);", "sourceBeforeFix": "REPLACE_IS_SAME(7)", "sourceAfterFix": "REPLACE_IF_SAME(7)"}
{"fixCommitSHA1": "ca256ae2a033fd8cb76abac8563fad8fe8c988ae", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "     if(beans != null) {\n      compositeElResolver.add(new ReadonlyMapELResolver(beans));\n     } else {\n       compositeElResolver.add(new ApplicationContextElResolver(applicationContext));", "fixed": "     if(beans != null) {\n      compositeElResolver.add(new ReadOnlyMapELResolver(beans));\n     } else {\n       compositeElResolver.add(new ApplicationContextElResolver(applicationContext));", "sourceBeforeFix": "new ReadonlyMapELResolver(beans)", "sourceAfterFix": "new ReadOnlyMapELResolver(beans)"}
{"fixCommitSHA1": "eb4fd212d3307ddbab60a5acccef6473dfa0490f", "projectName": "springside.springside4", "bugType": "Same Function Less Args", "problem": " \tpublic List<BookDto> listAllBook(Pageable pageable) {\r\n \t\tIterable<Book> books = adminService.findAll(pageable);\r\n\t\treturn BeanMapper.mapList(books, Book.class,BookDto.class);\r\n \t}\r\n \t@RequestMapping(value = \"/api/books/{id}\", produces = MediaTypes.JSON_UTF_8)\r", "fixed": " \tpublic List<BookDto> listAllBook(Pageable pageable) {\r\n \t\tIterable<Book> books = adminService.findAll(pageable);\r\n\t\treturn BeanMapper.mapList(books, BookDto.class);\r\n \t}\r\n \t@RequestMapping(value = \"/api/books/{id}\", produces = MediaTypes.JSON_UTF_8)\r", "sourceBeforeFix": "BeanMapper.mapList(books,Book.class,BookDto.class)", "sourceAfterFix": "BeanMapper.mapList(books,BookDto.class)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL11.glGetFloat(pname,params)", "sourceAfterFix": "GL11.glGetFloatv(pname,params)"}
{"fixCommitSHA1": "0d35621b5c32f5d64ba2056c143d4bc351615c81", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    */\n   private transient Predicate<JSType> validator;\n  \n  private List<PropertyContinuation> propertyContinuations = null;\n   /**\n    * Template types defined on a named, not yet resolved type, or {@code null} if none. These are", "fixed": "    */\n   private transient Predicate<JSType> validator;\n  \n  private transient List<PropertyContinuation> propertyContinuations = null;\n   /**\n    * Template types defined on a named, not yet resolved type, or {@code null} if none. These are", "sourceBeforeFix": "2", "sourceAfterFix": "130"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Wrong Function Name", "problem": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "fixed": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "61572af5c51afa3897afcf177bed5f8fa8dd5b4a", "projectName": "neo4j.neo4j", "bugType": "Same Function Less Args", "problem": "     public void assertWriteLockDoesNotLeakMemory() throws InterruptedException\n     {\n         final TransactionManager tm = mock( TransactionManager.class );\n        final RagManager ragManager = new RagManager( tm );\n         final Object resource = new Object();\n         final RWLock lock = new RWLock( resource, ragManager );\n         final Transaction tx1 = mock( Transaction.class );", "fixed": "     public void assertWriteLockDoesNotLeakMemory() throws InterruptedException\n     {\n         final TransactionManager tm = mock( TransactionManager.class );\n        final RagManager ragManager = new RagManager();\n         final Object resource = new Object();\n         final RWLock lock = new RWLock( resource, ragManager );\n         final Transaction tx1 = mock( Transaction.class );", "sourceBeforeFix": "new RagManager(tm)", "sourceAfterFix": "new RagManager()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 9:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 9:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e376b7be0a40adaba56bbefce50c3f0930a9475c", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "         return null;\n     }\n    public AttributeModel getModel(Workspace workspace) {\n         AttributeModel model = workspace.getLookup().lookup(AttributeModel.class);\n         if (model != null) {\n             return model;", "fixed": "         return null;\n     }\n    public synchronized AttributeModel getModel(Workspace workspace) {\n         AttributeModel model = workspace.getLookup().lookup(AttributeModel.class);\n         if (model != null) {\n             return model;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "fa46c498affee1608fbf952d576c7cf9a554e314", "projectName": "antlr.antlr4", "bugType": "Change Boolean Literal", "problem": " \t}\n \tpublic boolean wantsBaseListener() {\n\t\treturn false;\n \t}\n \tpublic boolean wantsBaseVisitor() {\n\t\treturn false;\n \t}\n \tpublic boolean supportsOverloadedMethods() {", "fixed": " \t}\n \tpublic boolean wantsBaseListener() {\n\t\treturn true;\n \t}\n \tpublic boolean wantsBaseVisitor() {\n\t\treturn true;\n \t}\n \tpublic boolean supportsOverloadedMethods() {", "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}
{"fixCommitSHA1": "4e43e3b74a2ce09a26e9795a9739d388b1fb787b", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "             pageBuilder.declarePosition();\n             for (int i = 0; i < outputChannels.length; i++) {\n                 int channel = outputChannels[i];\n                Type type = types.get(channel);\n                 type.appendTo(inputPage.getBlock(channel), currentPosition, pageBuilder.getBlockBuilder(i));\n             }\n             BIGINT.writeLong(pageBuilder.getBlockBuilder(rowNumberChannel), rowCount + 1);", "fixed": "             pageBuilder.declarePosition();\n             for (int i = 0; i < outputChannels.length; i++) {\n                 int channel = outputChannels[i];\n                Type type = types.get(i);\n                 type.appendTo(inputPage.getBlock(channel), currentPosition, pageBuilder.getBlockBuilder(i));\n             }\n             BIGINT.writeLong(pageBuilder.getBlockBuilder(rowNumberChannel), rowCount + 1);", "sourceBeforeFix": "types.get(channel)", "sourceAfterFix": "types.get(i)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {", "fixed": " \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 cacheRecordStore.updateRecordWithExpiry(keyData, value, record, expiryPolicy, now, false);\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNano(System.nanoTime() - start);\n                 }\n                 break;\n             case REMOVE:", "fixed": "                 cacheRecordStore.updateRecordWithExpiry(keyData, value, record, expiryPolicy, now, false);\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 break;\n             case REMOVE:", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *  Does class have private ctors.\n          *  @return true if class has private ctors\n          */\n        boolean isWithPrivateCtor() {\n             return withPrivateCtor;\n         }", "fixed": "          *  Does class have private ctors.\n          *  @return true if class has private ctors\n          */\n        private boolean isWithPrivateCtor() {\n             return withPrivateCtor;\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "1e13e64777c422f48fe282c07c7ca5a9245fc05d", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": " import org.apache.camel.component.file.GenericFile;\n @Converter(loader = true)\npublic class FileConverter {\n     private FileConverter() {\n     }", "fixed": " import org.apache.camel.component.file.GenericFile;\n @Converter(loader = true)\npublic final class FileConverter {\n     private FileConverter() {\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "7611147e9853bd6ae59498335b8fae3d3f5b759b", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "     }\n     private Object newOperationTimeoutException(int pollCount, long pollTimeoutMs) {\n        boolean hasResponse = invocation.pendingResponse == null;\n         int backupsExpected = invocation.backupsExpected;\n         int backupsCompleted = invocation.backupsCompleted;", "fixed": "     }\n     private Object newOperationTimeoutException(int pollCount, long pollTimeoutMs) {\n        boolean hasResponse = invocation.pendingResponse != null;\n         int backupsExpected = invocation.backupsExpected;\n         int backupsCompleted = invocation.backupsCompleted;", "sourceBeforeFix": "invocation.pendingResponse == null", "sourceAfterFix": "invocation.pendingResponse != null"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJettyHttpEndpointBuilder9\n             extends\n                 EndpointConsumerBuilder {\n         default JettyHttpEndpointBuilder9 basic() {", "fixed": "     \n    public interface AdvancedJettyHttpEndpointBuilder9\n             extends\n                 EndpointConsumerBuilder {\n         default JettyHttpEndpointBuilder9 basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f60f4dbdad22bbd4ef94ce1b01eb63f9adeb7659", "projectName": "alibaba.druid", "bugType": "Delete Throws Exception", "problem": "         token = Token.LITERAL_HEX;\r\n     }\r\n    public String hexString() throws NumberFormatException {\r\n         return new String(buf, np, sp);\r\n     }\r", "fixed": "         token = Token.LITERAL_HEX;\r\n     }\r\n    public String hexString() {\r\n         return new String(buf, np, sp);\r\n     }\r", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d2418b99ef96450104f978d8e50c7ca762235080", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate static class MockPrincipalServerWebExchangeDecorator\n \t\t\textends ServerWebExchangeDecorator {\n\t\tprotected MockPrincipalServerWebExchangeDecorator(ServerWebExchange delegate) {\n \t\t\tsuper(delegate);\n \t\t}", "fixed": " \tprivate static class MockPrincipalServerWebExchangeDecorator\n \t\t\textends ServerWebExchangeDecorator {\n\t\tMockPrincipalServerWebExchangeDecorator(ServerWebExchange delegate) {\n \t\t\tsuper(delegate);\n \t\t}", "sourceBeforeFix": "4", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param format a <code>String</code> value.\n      * @throws ConversionException if unable to create Pattern object.\n      */\n    public void setCommentFormat(String format) {\n         commentRegexp = Utils.createPattern(format);\n     }", "fixed": "      * @param format a <code>String</code> value.\n      * @throws ConversionException if unable to create Pattern object.\n      */\n    public final void setCommentFormat(String format) {\n         commentRegexp = Utils.createPattern(format);\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "e6bf561b6532c12c8bb202ba7e03aa3f2e6b8a2b", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\ttextureParam.minFilter = TextureFilter.Linear;\r\n \t\ttextureParam.magFilter = TextureFilter.Linear;\r\n \t\tif (parameter == null)\r\n\t\t\tdeps.add(new AssetDescriptor(Gdx.files.internal(fileName).nameWithoutExtension() + \".png\", Texture.class, textureParam));\r\n \t\telse\r\n \t\t\tdeps.add(new AssetDescriptor(parameter.texturePath, Texture.class, textureParam));\r\n \t\treturn deps;\r", "fixed": " \t\ttextureParam.minFilter = TextureFilter.Linear;\r\n \t\ttextureParam.magFilter = TextureFilter.Linear;\r\n \t\tif (parameter == null)\r\n\t\t\tdeps.add(new AssetDescriptor(Gdx.files.internal(fileName).pathWithoutExtension() + \".png\", Texture.class, textureParam));\r\n \t\telse\r\n \t\t\tdeps.add(new AssetDescriptor(parameter.texturePath, Texture.class, textureParam));\r\n \t\treturn deps;\r", "sourceBeforeFix": "Gdx.files.internal(fileName).nameWithoutExtension()", "sourceAfterFix": "Gdx.files.internal(fileName).pathWithoutExtension()"}
{"fixCommitSHA1": "2c309db03048d208ec81541395c69b58e14f7fd7", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       throw new InvalidPathException(ExceptionMessage.DELETE_ROOT_DIRECTORY.getMessage());\n     }\n    List<Pair<AlluxioURI, Inode>> delInodes = new LinkedList<>();\n     List<Inode<?>> deletedInodes = new ArrayList<>();\n     Pair<AlluxioURI, Inode> inodePair = new Pair<AlluxioURI, Inode>(inodePath.getUri(), inode);", "fixed": "       throw new InvalidPathException(ExceptionMessage.DELETE_ROOT_DIRECTORY.getMessage());\n     }\n    List<Pair<AlluxioURI, Inode>> delInodes = new ArrayList<>();\n     List<Inode<?>> deletedInodes = new ArrayList<>();\n     Pair<AlluxioURI, Inode> inodePair = new Pair<AlluxioURI, Inode>(inodePath.getUri(), inode);", "sourceBeforeFix": "LinkedList<>", "sourceAfterFix": "ArrayList<>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0c4f7988dc8c947eb7bda3afa8c58ace04d4d1d8", "projectName": "apache.flink", "bugType": "Change Caller in Function Call", "problem": " \t\t\t\t\tbreak;\n \t\t\t\t} else {\n\t\t\t\t\tThread.sleep(500);\n \t\t\t\t}\n \t\t\t}\n\t\t\tassertTrue(\"Producer thread is not blocked: \" + Arrays.toString(ASYNC_CONSUMER_THREAD.getStackTrace()), producerBlocked);\n \t\t\tboolean consumerWaiting = false;\n \t\t\tfor (int i = 0; i < 50; i++) {", "fixed": " \t\t\t\t\tbreak;\n \t\t\t\t} else {\n\t\t\t\t\tThread.sleep(500L);\n \t\t\t\t}\n \t\t\t}\n\t\t\tassertTrue(\"Producer thread is not blocked: \" + Arrays.toString(ASYNC_PRODUCER_THREAD.getStackTrace()), producerBlocked);\n \t\t\tboolean consumerWaiting = false;\n \t\t\tfor (int i = 0; i < 50; i++) {", "sourceBeforeFix": "ASYNC_CONSUMER_THREAD.getStackTrace()", "sourceAfterFix": "ASYNC_PRODUCER_THREAD.getStackTrace()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "c98bab51de22a20990ff8805825e8638e0686464", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "     Files.copy(cnf2Path, cnfPath, StandardCopyOption.REPLACE_EXISTING);\n    Admin admin = TEST_UTIL.getHBaseAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getMaster().getServerName();\n     admin.updateConfiguration(server);\n     Configuration conf = TEST_UTIL.getMiniHBaseCluster().getMaster().getConfiguration();", "fixed": "     Files.copy(cnf2Path, cnfPath, StandardCopyOption.REPLACE_EXISTING);\n    Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getMaster().getServerName();\n     admin.updateConfiguration(server);\n     Configuration conf = TEST_UTIL.getMiniHBaseCluster().getMaster().getConfiguration();", "sourceBeforeFix": "TEST_UTIL.getHBaseAdmin()", "sourceAfterFix": "TEST_UTIL.getAdmin()"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CouchbaseEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCouchbaseEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CouchbaseEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCouchbaseEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    private static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "babab8ae2881354a042e42602913f52cec256d14", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "   @Override\n   protected void runCommand(AlluxioURI path, CommandLine cl) throws AlluxioException, IOException {\n    load(path, cl.hasOption(LOCAL_OPTION.getOpt()));\n   }\n   /**", "fixed": "   @Override\n   protected void runCommand(AlluxioURI path, CommandLine cl) throws AlluxioException, IOException {\n    load(path, cl.hasOption(LOCAL_OPTION.getLongOpt()));\n   }\n   /**", "sourceBeforeFix": "LOCAL_OPTION.getOpt()", "sourceAfterFix": "LOCAL_OPTION.getLongOpt()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tthis.container.stop();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nGetMethod get2 = new GetMethod(\"http:\n \t\tassertThat(client.executeMethod(get2), equalTo(200));", "fixed": " \t\tthis.container.stop();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nGetMethod get2 = new GetMethod(\"http:\n \t\tassertThat(client.executeMethod(get2), equalTo(200));", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "b9c41e9ff3fc13529a73bd488d9e9d86b33d0871", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "             property.substring(CUSTOM_ANNOTATOR_PREFIX.length());\n         final String customClassName = inputProps.getProperty(property);\n         logger.info(\"Registering annotator \" + customName + \" with class \" + customClassName);\n        pool.register(customName, inputProps, Lazy.of(() -> annotatorImplementation.custom(inputProps, customName)));\n       }\n     }\n   }", "fixed": "             property.substring(CUSTOM_ANNOTATOR_PREFIX.length());\n         final String customClassName = inputProps.getProperty(property);\n         logger.info(\"Registering annotator \" + customName + \" with class \" + customClassName);\n        pool.register(customName, inputProps, Lazy.of(() -> annotatorImplementation.custom(inputProps, property)));\n       }\n     }\n   }", "sourceBeforeFix": "annotatorImplementation.custom(inputProps,customName)", "sourceAfterFix": "annotatorImplementation.custom(inputProps,property)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "fixed": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "sourceBeforeFix": "id=15808", "sourceAfterFix": "id=10808"}
{"fixCommitSHA1": "63e334f565d9d776180af5e7725c7b87bfcd10a9", "projectName": "google.closure-compiler", "bugType": "Same Function More Args", "problem": "       DiagnosticType.warning(\"JSC_UNUSED\", \"{0}\");\n   public static final Set<String> wildcardExcludedGroups =\n      ImmutableSet.of(\"reportUnknownTypes\");\n   public DiagnosticGroups() {}", "fixed": "       DiagnosticType.warning(\"JSC_UNUSED\", \"{0}\");\n   public static final Set<String> wildcardExcludedGroups =\n      ImmutableSet.of(\"reportUnknownTypes\", \"analyzerChecks\");\n   public DiagnosticGroups() {}", "sourceBeforeFix": "ImmutableSet.of(\"reportUnknownTypes\")", "sourceAfterFix": "ImmutableSet.of(\"reportUnknownTypes\",\"analyzerChecks\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n\t\tthis.container = factory.getEmbdeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\nassertThat(getResponse(\"http:", "fixed": " \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\nassertThat(getResponse(\"http:", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "41ff1f19d2188256f4c38928e7a5dd837c5d2edd", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "     @Deprecated\n     @Override\n     public void put(final byte[] v) {\n        put(v);\n     }\n     @Override", "fixed": "     @Deprecated\n     @Override\n     public void put(final byte[] v) {\n        putBytes(v);\n     }\n     @Override", "sourceBeforeFix": "put(v)", "sourceAfterFix": "putBytes(v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "20bc74dff0cf1e1834e99d1f2499a3f5e4c38a36", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "     }\n     for (AsyncCall call : toCleanup) {\n       call.setFailed(new CallTimeoutException(\"Call id=\" + call.id + \", waitTime=\"\n          + (currentTime - call.getRpcTimeout()) + \", rpcTimeout=\" + call.getRpcTimeout()));\n     }\n   }", "fixed": "     }\n     for (AsyncCall call : toCleanup) {\n       call.setFailed(new CallTimeoutException(\"Call id=\" + call.id + \", waitTime=\"\n          + (currentTime - call.getStartTime()) + \", rpcTimeout=\" + call.getRpcTimeout()));\n     }\n   }", "sourceBeforeFix": "call.getRpcTimeout()", "sourceAfterFix": "call.getStartTime()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "98390cf27b0ce41447e0a104a8963b2cfdc20795", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \tpublic void add (float value1, float value2, float value3, float value4) {\r\n \t\tfloat[] items = this.items;\r\n\t\tif (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.75f)));\r\n \t\titems[size] = value1;\r\n \t\titems[size + 1] = value2;\r\n \t\titems[size + 2] = value3;\r", "fixed": " \tpublic void add (float value1, float value2, float value3, float value4) {\r\n \t\tfloat[] items = this.items;\r\nif (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.8f)));\n \t\titems[size] = value1;\r\n \t\titems[size + 1] = value2;\r\n \t\titems[size + 2] = value3;\r", "sourceBeforeFix": "size * 1.75f", "sourceAfterFix": "size * 1.8f"}
{"fixCommitSHA1": "8480b29e196d01a0b772edceea1dc31ab14e4988", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t}\r\n \t\t\tif (value instanceof Map) {\r\n\t\t\t\tif (knownType == null) knownType = OrderedMap.class;\r\n \t\t\t\twriteObjectStart(actualType, knownType);\r\n \t\t\t\tfor (Map.Entry entry : ((Map<?, ?>)value).entrySet()) {\r\n \t\t\t\t\twriter.name(convertToString(entry.getKey()));\r", "fixed": " \t\t\t}\r\n \t\t\tif (value instanceof Map) {\r\n\t\t\t\tif (knownType == null) knownType = HashMap.class;\r\n \t\t\t\twriteObjectStart(actualType, knownType);\r\n \t\t\t\tfor (Map.Entry entry : ((Map<?, ?>)value).entrySet()) {\r\n \t\t\t\t\twriter.name(convertToString(entry.getKey()));\r", "sourceBeforeFix": "OrderedMap.class", "sourceAfterFix": "HashMap.class"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL11.glGetFloat(pname,params)", "sourceAfterFix": "GL11.glGetFloatv(pname,params)"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void completeFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void completeFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n    void addPet(@Valid Pet body);\n     @DELETE\n     @Path(\"/{petId}\")", "fixed": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n    void addPet(@Valid Pet body) throws Exception;\n     @DELETE\n     @Path(\"/{petId}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dc936e03bc02c2ac536b2929b676594bebb7124f", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         }\n         if (timeoutCheckerExecutorService != null) {\n            camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService);\n         }\n         ServiceHelper.stopServices(timeoutMap, processor, deadLetterProducerTemplate);", "fixed": "         }\n         if (timeoutCheckerExecutorService != null) {\n            camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService);\n         }\n         ServiceHelper.stopServices(timeoutMap, processor, deadLetterProducerTemplate);", "sourceBeforeFix": "camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService)", "sourceAfterFix": "camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "1f897ad92326cf7a9964ecb59859c18a5dab64bf", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t@GetMapping(\"/commit\")\n \t\t\tpublic Mono<Void> commit(ServerWebExchange exchange) {\n\t\t\t\treturn exchange.getResponse().writeWith(Mono.empty()).then(\n \t\t\t\t\t\tMono.error(new IllegalStateException(\"already committed!\")));\n \t\t\t}", "fixed": " \t\t\t@GetMapping(\"/commit\")\n \t\t\tpublic Mono<Void> commit(ServerWebExchange exchange) {\n\t\t\t\treturn exchange.getResponse().setComplete().then(\n \t\t\t\t\t\tMono.error(new IllegalStateException(\"already committed!\")));\n \t\t\t}", "sourceBeforeFix": "exchange.getResponse().writeWith(Mono.empty())", "sourceAfterFix": "exchange.getResponse().setComplete()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d3df587543605323d2a3432e896ea49a81bc8306", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tif (currentLocalTransform != renderable.localTransform)\n \t\t\tset(u_localTrans, (currentLocalTransform = renderable.localTransform) == null ? idtMatrix : renderable.localTransform);\n \t\tif (currentModelTransform != renderable.modelTransform)\n\t\t\tset(u_modelTrans, (currentWorldTransform = renderable.modelTransform) == null ? idtMatrix : renderable.modelTransform);\n \t\tif (currentLocalTransform == null && currentModelTransform == null)\n \t\t\tsetWorldTransform(idtMatrix, false);\n \t\telse if (currentLocalTransform == null)", "fixed": " \t\tif (currentLocalTransform != renderable.localTransform)\n \t\t\tset(u_localTrans, (currentLocalTransform = renderable.localTransform) == null ? idtMatrix : renderable.localTransform);\n \t\tif (currentModelTransform != renderable.modelTransform)\n\t\t\tset(u_modelTrans, (currentModelTransform = renderable.modelTransform) == null ? idtMatrix : renderable.modelTransform);\n \t\tif (currentLocalTransform == null && currentModelTransform == null)\n \t\t\tsetWorldTransform(idtMatrix, false);\n \t\telse if (currentLocalTransform == null)", "sourceBeforeFix": "currentWorldTransform=renderable.modelTransform", "sourceAfterFix": "currentModelTransform=renderable.modelTransform"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "4975905a26f33c8e57583033c4b5f65b09d3e99a", "projectName": "Graylog2.graylog2-server", "bugType": "More Specific If", "problem": "            if (r.destination != null) {\n                 return redirect(r.destination);\n             }", "fixed": "            if (r.destination != null && !r.destination.isEmpty()) {\n                 return redirect(r.destination);\n             }", "sourceBeforeFix": "r.destination != null", "sourceAfterFix": "r.destination != null && !r.destination.isEmpty()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t\t}\r\n \t\t\t\t\t}\r\n\t\t\t\t\tstatesAndStartDates.add(patientState.getState().getId() + \"\" + patientState.getStartDate());\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r", "fixed": " \t\t\t\t\t\t}\r\n \t\t\t\t\t}\r\n\t\t\t\t\tstatesAndStartDates.add(patientState.getState().getUuid() + \"\" + patientState.getStartDate());\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r", "sourceBeforeFix": "patientState.getState().getId()", "sourceAfterFix": "patientState.getState().getUuid()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedIgniteMessagingEndpointBuilder\n             extends\n                 AdvancedIgniteMessagingEndpointConsumerBuilder, AdvancedIgniteMessagingEndpointProducerBuilder {\n         default IgniteMessagingEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedIgniteMessagingEndpointBuilder\n             extends\n                 AdvancedIgniteMessagingEndpointConsumerBuilder, AdvancedIgniteMessagingEndpointProducerBuilder {\n         default IgniteMessagingEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1a5b454c115a5c4ea1239834dd236d806ce0e949", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\t\tvertices[U3] = u2;\r\n \t\t\tvertices[U4] = u2;\r\n \t\t}\r\n\t\tif (yAmount > 0) {\r\n \t\t\tfloat v = (vertices[V1] + yAmount) % 1;\r\n \t\t\tfloat v2 = v + height / texture.getHeight();\r\n \t\t\tvertices[V1] = v;\r", "fixed": " \t\t\tvertices[U3] = u2;\r\n \t\t\tvertices[U4] = u2;\r\n \t\t}\r\n\t\tif (yAmount != 0) {\r\n \t\t\tfloat v = (vertices[V1] + yAmount) % 1;\r\n \t\t\tfloat v2 = v + height / texture.getHeight();\r\n \t\t\tvertices[V1] = v;\r", "sourceBeforeFix": "xAmount > 0", "sourceAfterFix": "xAmount != 0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "8a70dd07e91ab83c74346934b1597d60dbe84dfb", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": " \t\t\t}\n \t\t\treturn createDirtyCheckingProxy(name, scopedObject);\n \t\t} catch (Throwable th) {\n\t\t\tlogger.warn(\"couldn't return value from process scope! {}\",ExceptionUtils.getFullStackTrace(th));\n \t\t} finally {\n \t\t\tif (executionEntity != null) {\nlogger.debug(\"set variable '{}' on executionEntity", "fixed": " \t\t\t}\n \t\t\treturn createDirtyCheckingProxy(name, scopedObject);\n \t\t} catch (Throwable th) {\n\t\t\tlogger.warn(\"couldn't return value from process scope! {}\", ExceptionUtils.getStackTrace(th));\n \t\t} finally {\n \t\t\tif (executionEntity != null) {\nlogger.debug(\"set variable '{}' on executionEntity", "sourceBeforeFix": "ExceptionUtils.getFullStackTrace(th)", "sourceAfterFix": "ExceptionUtils.getStackTrace(th)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IPFSEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedIPFSEndpointBuilder advanced() {\n             return (AdvancedIPFSEndpointBuilder) this;\n         }", "fixed": "     \n    public interface IPFSEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedIPFSEndpointBuilder advanced() {\n             return (AdvancedIPFSEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e18406f2f4ffdce1cbde05bb5c9555ad36159d39", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "                 {\n                     cursor.setOffset( offset );\n                     recordIsInUse = isInUse( cursor.getByte() );\n                } while ( cursor.retry() );\n             }\n             return recordIsInUse;\n         }", "fixed": "                 {\n                     cursor.setOffset( offset );\n                     recordIsInUse = isInUse( cursor.getByte() );\n                } while ( cursor.shouldRetry() );\n             }\n             return recordIsInUse;\n         }", "sourceBeforeFix": "cursor.retry()", "sourceAfterFix": "cursor.shouldRetry()"}
{"fixCommitSHA1": "c6f898a116427906702afb349275331494ecaeef", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public URL loadResourceAsURL(String uri) {\n         ObjectHelper.notEmpty(uri, \"uri\");\n        return bundleContext.getBundle().getEntry(uri);\n     }\n     protected Class<?> doLoadClass(String name, Bundle loader) {", "fixed": "     public URL loadResourceAsURL(String uri) {\n         ObjectHelper.notEmpty(uri, \"uri\");\n        return bundleContext.getBundle().getResource(uri);\n     }\n     protected Class<?> doLoadClass(String name, Bundle loader) {", "sourceBeforeFix": "bundleContext.getBundle().getEntry(uri)", "sourceAfterFix": "bundleContext.getBundle().getResource(uri)"}
{"fixCommitSHA1": "10b391e13590e61c2ec80e4c5522362cc7e9b646", "projectName": "xetorthio.jedis", "bugType": "Change Unary Operator\t", "problem": "           + \" only supports SCAN commands with non-empty MATCH patterns\");\n     }\n    if (JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)) {\n       throw new IllegalArgumentException(JedisCluster.class.getSimpleName()\n           + \" only supports SCAN commands with MATCH patterns containing hash-tags ( curly-brackets enclosed strings )\");\n     }", "fixed": "           + \" only supports SCAN commands with non-empty MATCH patterns\");\n     }\n    if (!JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)) {\n       throw new IllegalArgumentException(JedisCluster.class.getSimpleName()\n           + \" only supports SCAN commands with MATCH patterns containing hash-tags ( curly-brackets enclosed strings )\");\n     }", "sourceBeforeFix": "JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)", "sourceAfterFix": "!JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)"}
{"fixCommitSHA1": "8208a1376f65e787f94819b6b8a7f8891a975568", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "     @Message(id = 77, value = \"Error invoking secure response\")\n     void errorInvokingSecureResponse(@Cause Exception e);\n    @Message(id = 78, value = \"No SSL Context available from security realm. Either the realm is not configured for SSL, or the server has not been reloaded since the SSL config was added.\")\n     IllegalStateException noSslContextInSecurityRealm();\n }", "fixed": "     @Message(id = 77, value = \"Error invoking secure response\")\n     void errorInvokingSecureResponse(@Cause Exception e);\n    @Message(id = 79, value = \"No SSL Context available from security realm. Either the realm is not configured for SSL, or the server has not been reloaded since the SSL config was added.\")\n     IllegalStateException noSslContextInSecurityRealm();\n }", "sourceBeforeFix": "id=78", "sourceAfterFix": "id=79"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "     }\n     if (LOG.isDebugEnabled()) {\n      LOG.debug(split.getRegionName().toString()\n          +\" no longer has references to \" + parent.toString());\n     }\n     BatchUpdate b = new BatchUpdate(parent);", "fixed": "     }\n     if (LOG.isDebugEnabled()) {\n      LOG.debug(split.getRegionNameAsString() +\n        \" no longer has references to \" + parent.toString());\n     }\n     BatchUpdate b = new BatchUpdate(parent);", "sourceBeforeFix": "info.getRegionName()", "sourceAfterFix": "info.getRegionNameAsString()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ScpEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedScpEndpointBuilder advanced() {\n             return (AdvancedScpEndpointBuilder) this;\n         }", "fixed": "     \n    public interface ScpEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedScpEndpointBuilder advanced() {\n             return (AdvancedScpEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MvelEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedMvelEndpointBuilder advanced() {\n             return (AdvancedMvelEndpointBuilder) this;\n         }", "fixed": "     \n    public interface MvelEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedMvelEndpointBuilder advanced() {\n             return (AdvancedMvelEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "27301617876b102c50f758608843f9ccf9456a1b", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     private final String tableName;\n     private final URI uri;\n     private final boolean remotelyAccessible;\n    private final ImmutableList<HostAddress> addresses;\n     @JsonCreator\n     public ExampleSplit(", "fixed": "     private final String tableName;\n     private final URI uri;\n     private final boolean remotelyAccessible;\n    private final List<HostAddress> addresses;\n     @JsonCreator\n     public ExampleSplit(", "sourceBeforeFix": "ImmutableList<HostAddress>", "sourceAfterFix": "List<HostAddress>"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResultClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "b61375cec50559b26f5b22fb359e7f920a458dab", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "         if (trustManager == null || (lastChain = trustManager.getLastFailedCertificateChain()) == null) {\n             return false;\n         }\n        error(\"Unable to connect due to unrecognised server certificate\");\n         for (Certificate current : lastChain) {\n             if (current instanceof X509Certificate) {\n                 X509Certificate x509Current = (X509Certificate) current;", "fixed": "         if (trustManager == null || (lastChain = trustManager.getLastFailedCertificateChain()) == null) {\n             return false;\n         }\n        printLine(\"Unable to connect due to unrecognised server certificate\");\n         for (Certificate current : lastChain) {\n             if (current instanceof X509Certificate) {\n                 X509Certificate x509Current = (X509Certificate) current;", "sourceBeforeFix": "error(\"Unable to connect due to unrecognised server certificate\")", "sourceAfterFix": "printLine(\"Unable to connect due to unrecognised server certificate\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAMQPEndpointBuilder\n             extends\n                 AdvancedAMQPEndpointConsumerBuilder, AdvancedAMQPEndpointProducerBuilder {\n         default AMQPEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAMQPEndpointBuilder\n             extends\n                 AdvancedAMQPEndpointConsumerBuilder, AdvancedAMQPEndpointProducerBuilder {\n         default AMQPEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface LinkedInEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedLinkedInEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface LinkedInEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedLinkedInEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "0a7300b42629c2eb700d2c4b5e39caa76f4d5305", "projectName": "Atmosphere.atmosphere", "bugType": "Change Boolean Literal", "problem": "             releaseExternalResources();\n             if (notifierFuture != null) {\n                notifierFuture.cancel(true);\n             }\n             if (asyncWriteFuture != null) {\n                asyncWriteFuture.cancel(true);\n             }\n             if (bc != null) {", "fixed": "             releaseExternalResources();\n             if (notifierFuture != null) {\n                notifierFuture.cancel(false);\n             }\n             if (asyncWriteFuture != null) {\n                asyncWriteFuture.cancel(false);\n             }\n             if (bc != null) {", "sourceBeforeFix": "notifierFuture.cancel(true)", "sourceAfterFix": "notifierFuture.cancel(false)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "     DomainControllerLogger HOST_CONTROLLER_LOGGER = Logger.getMessageLogger(DomainControllerLogger.class, \"org.jboss.as.host.controller\");\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15800, value = \"Ignoring 'include' child of 'socket-binding-group' %s\")\n     void warnIgnoringSocketBindingGroupInclude(Location location);\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15801, value = \"Ignoring 'include' child of 'profile' %s\")\n     void warnIgnoringProfileInclude(Location location);\n     /**", "fixed": "     DomainControllerLogger HOST_CONTROLLER_LOGGER = Logger.getMessageLogger(DomainControllerLogger.class, \"org.jboss.as.host.controller\");\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10800, value = \"Ignoring 'include' child of 'socket-binding-group' %s\")\n     void warnIgnoringSocketBindingGroupInclude(Location location);\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10801, value = \"Ignoring 'include' child of 'profile' %s\")\n     void warnIgnoringProfileInclude(Location location);\n     /**", "sourceBeforeFix": "id=15808", "sourceAfterFix": "id=10808"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "0e8e5ba702fbbea71f8cffc063e2d873cbebe83e", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForNone\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForNone\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         HttpResponse res = (HttpResponse) ch.readInbound();\n         DecoderResult dr = res.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertFalse(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "fixed": "         HttpResponse res = (HttpResponse) ch.readInbound();\n         DecoderResult dr = res.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     }\n     public void destroy() {\n        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.clearLockStore(partitionId, lockNamespace);\n         }", "fixed": "     }\n     public void destroy() {\n        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.clearLockStore(partitionId, lockNamespace);\n         }", "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();", "fixed": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "f9427a667bc93e1d417793afde0186b59bab29bc", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       throw new InvalidPathException(ExceptionMessage.DELETE_ROOT_DIRECTORY.getMessage());\n     }\n    List<Pair<AlluxioURI, Inode>> delInodes = new LinkedList<>();\n     List<Inode<?>> deletedInodes = new ArrayList<>();\n     Pair<AlluxioURI, Inode> inodePair = new Pair<AlluxioURI, Inode>(inodePath.getUri(), inode);", "fixed": "       throw new InvalidPathException(ExceptionMessage.DELETE_ROOT_DIRECTORY.getMessage());\n     }\n    List<Pair<AlluxioURI, Inode>> delInodes = new ArrayList<>();\n     List<Inode<?>> deletedInodes = new ArrayList<>();\n     Pair<AlluxioURI, Inode> inodePair = new Pair<AlluxioURI, Inode>(inodePath.getUri(), inode);", "sourceBeforeFix": "LinkedList<>", "sourceAfterFix": "ArrayList<>"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mongo\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mongo\")"}
{"fixCommitSHA1": "d0cb778dc8811906c7e7b5a20e08bd70f49dd163", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     AlluxioURI src = new AlluxioURI(\"/file\");\n     AlluxioURI dst = new AlluxioURI(\"/file2\");\n     RenameOptions renameOptions = RenameOptions.defaults();\n    Mockito.doNothing().when(mFileSystemMasterClient).rename(src, dst);\n     mFileSystem.rename(src, dst, renameOptions);\n    Mockito.verify(mFileSystemMasterClient).rename(src, dst);\n   }\n   /**", "fixed": "     AlluxioURI src = new AlluxioURI(\"/file\");\n     AlluxioURI dst = new AlluxioURI(\"/file2\");\n     RenameOptions renameOptions = RenameOptions.defaults();\n    Mockito.doNothing().when(mFileSystemMasterClient).rename(src, dst, renameOptions);\n     mFileSystem.rename(src, dst, renameOptions);\n    Mockito.verify(mFileSystemMasterClient).rename(src, dst, renameOptions);\n   }\n   /**", "sourceBeforeFix": "Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src,dst)", "sourceAfterFix": "Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src,dst,renameOptions)"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    private static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "fixed": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic abstract boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "fixed": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleCalendarEndpointBuilder\n             extends\n                 AdvancedGoogleCalendarEndpointConsumerBuilder, AdvancedGoogleCalendarEndpointProducerBuilder {\n         default GoogleCalendarEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleCalendarEndpointBuilder\n             extends\n                 AdvancedGoogleCalendarEndpointConsumerBuilder, AdvancedGoogleCalendarEndpointProducerBuilder {\n         default GoogleCalendarEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "fixed": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = this.response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a13c4373a5e57d322b143516b493e84f14909fec", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(15, tokens.size());\n   }\n   @Test", "fixed": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(13, tokens.size());\n   }\n   @Test", "sourceBeforeFix": "assertEquals(15,tokens.size())", "sourceAfterFix": "assertEquals(13,tokens.size())"}
{"fixCommitSHA1": "71d2b3fff912e04fac92334165e85163ffa2a0ee", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t@Override public void create () {\r\n \t\tGdx.app.log(\"MD5 Test\", \"created\");\r\n\t\tmodel = MD5Loader.loadModel(Gdx.files.internal(\"data/zfat.md5mesh\").read());\r\n \t\tanim = MD5Loader.loadAnimation(Gdx.files.internal(\"data/walk1.md5anim\").read());\r\n \t\tskeleton = new MD5Joints();\r\n \t\tskeleton.joints = new float[anim.frames[0].joints.length];\r\n \t\tanimInfo = new MD5AnimationInfo(anim.frames.length, anim.secondsPerFrame);\r\n\t\trenderer = new MD5Renderer(model, true);\r\n \t\trenderer.setSkeleton(model.baseSkeleton);\r", "fixed": " \t@Override public void create () {\r\n \t\tGdx.app.log(\"MD5 Test\", \"created\");\r\n\t\tmodel = MD5Loader.loadModel(Gdx.files.internal(\"data/zfat.md5mesh\").read(), false);\r\n \t\tanim = MD5Loader.loadAnimation(Gdx.files.internal(\"data/walk1.md5anim\").read());\r\n \t\tskeleton = new MD5Joints();\r\n \t\tskeleton.joints = new float[anim.frames[0].joints.length];\r\n \t\tanimInfo = new MD5AnimationInfo(anim.frames.length, anim.secondsPerFrame);\r\n\t\trenderer = new MD5Renderer(model, false, true);\r\n \t\trenderer.setSkeleton(model.baseSkeleton);\r", "sourceBeforeFix": "MD5Loader.loadModel(Gdx.files.internal(\"data/zfat.md5mesh\").read())", "sourceAfterFix": "MD5Loader.loadModel(Gdx.files.internal(\"data/zfat.md5mesh\").read(),false)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  State getIntermediateState() {\n     return state;\n   }", "fixed": "   }\n   @Override\n  protected State getIntermediateState() {\n     return state;\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "98e7fe490c342853f703b473cc6bf19fb175b7db", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "             for (Node n : graph.getNodes()) {\n                 if (n.getNodeData().getId().toLowerCase().contains(str)) {\n                     nodes.add(n);\n                } else if (n.getNodeData().getLabel().toLowerCase().contains(str)) {\n                     nodes.add(n);\n                 }\n             }", "fixed": "             for (Node n : graph.getNodes()) {\n                 if (n.getNodeData().getId().toLowerCase().contains(str)) {\n                     nodes.add(n);\n                } else if ((n.getNodeData().getLabel() != null) && n.getNodeData().getLabel().toLowerCase().contains(str)) {\n                     nodes.add(n);\n                 }\n             }", "sourceBeforeFix": "DegreeRangeBuilder.class", "sourceAfterFix": "EgoBuilder.class"}
{"fixCommitSHA1": "2d7a2194c80fe7ffcd094b5cc343fd21104270d1", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         end.expectedMessageCount(1);\n         MockEndpoint complete = getMockEndpoint(\"mock:complete\");\n        complete.expectedBodiesReceived(\"finish\", \"stop\", \"faulted\", \"except\");\n         template.sendBody(\"direct:input\", \"finish\");\n         template.sendBody(\"direct:input\", \"stop\");", "fixed": "         end.expectedMessageCount(1);\n         MockEndpoint complete = getMockEndpoint(\"mock:complete\");\n        complete.expectedBodiesReceivedInAnyOrder(\"finish\", \"stop\", \"faulted\", \"except\");\n         template.sendBody(\"direct:input\", \"finish\");\n         template.sendBody(\"direct:input\", \"stop\");", "sourceBeforeFix": "complete.expectedBodiesReceived(\"finish\",\"stop\",\"faulted\",\"except\")", "sourceAfterFix": "complete.expectedBodiesReceivedInAnyOrder(\"finish\",\"stop\",\"faulted\",\"except\")"}
{"fixCommitSHA1": "33187d0285e1c48f1fb4953f1199a53e123da6a6", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": "     \n    public static ChannelBuffer EMPTY_BUFFER = new BigEndianHeapChannelBuffer(0);\n     private static final char[] HEXDUMP_TABLE = new char[65536 * 4];", "fixed": "     \n    public static final ChannelBuffer EMPTY_BUFFER = new BigEndianHeapChannelBuffer(0);\n     private static final char[] HEXDUMP_TABLE = new char[65536 * 4];", "sourceBeforeFix": "9", "sourceAfterFix": "25"}
{"fixCommitSHA1": "0ff079b4276fa4c7534d0563fd31f6b0826fdc17", "projectName": "hazelcast.hazelcast", "bugType": "Change Unary Operator\t", "problem": "     public void run() throws Exception {\n         AtomicReferenceContainer atomicReferenceContainer = getReferenceContainer();\n         returnValue = atomicReferenceContainer.compareAndSet(expect, update);\n        shouldBackup = !returnValue;\n     }\n     @Override", "fixed": "     public void run() throws Exception {\n         AtomicReferenceContainer atomicReferenceContainer = getReferenceContainer();\n         returnValue = atomicReferenceContainer.compareAndSet(expect, update);\n        shouldBackup = returnValue;\n     }\n     @Override", "sourceBeforeFix": "!returnValue", "sourceAfterFix": "returnValue"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "8489cbc64e450aea0a05cf2bca4d6e04285d1459", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "  * Configuration property keys. This class provides a set of pre-defined property keys.\n  */\n @ThreadSafe\npublic class PropertyKey implements Comparable<PropertyKey> {\n   \n   private static final Map<String, PropertyKey> DEFAULT_KEYS_MAP = new HashMap<>();", "fixed": "  * Configuration property keys. This class provides a set of pre-defined property keys.\n  */\n @ThreadSafe\npublic final class PropertyKey implements Comparable<PropertyKey> {\n   \n   private static final Map<String, PropertyKey> DEFAULT_KEYS_MAP = new HashMap<>();", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "36f71405ee04602e76844b255e44f146bb476161", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tthis.setConceptSets(new TreeSet<ConceptSet>(c.getConceptSets()));\r\n \t\tfor (ConceptSet cSet : this.getConceptSets()) {\r\n\t\t\tcSet.setConcept(this);\r\n \t\t}\r\n \t\tthis.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));\r", "fixed": " \t\tthis.setConceptSets(new TreeSet<ConceptSet>(c.getConceptSets()));\r\n \t\tfor (ConceptSet cSet : this.getConceptSets()) {\r\n\t\t\tcSet.setConceptSet(this);\r\n \t\t}\r\n \t\tthis.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));\r", "sourceBeforeFix": "cSet.setConcept(this)", "sourceAfterFix": "cSet.setConceptSet(this)"}
{"fixCommitSHA1": "b30c9ba15edd3060a51d6e46a735cdbd838ada7f", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         skipRequestBody(request);\n         for (String value : authenticateHeaders) {\n            response.setHeader(WWW_AUTHENTICATE, value);\n         }\n         if (messages.isEmpty()) {", "fixed": "         skipRequestBody(request);\n         for (String value : authenticateHeaders) {\n            response.addHeader(WWW_AUTHENTICATE, value);\n         }\n         if (messages.isEmpty()) {", "sourceBeforeFix": "response.setHeader(WWW_AUTHENTICATE,value)", "sourceAfterFix": "response.addHeader(WWW_AUTHENTICATE,value)"}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": "       logger\n           .error(\n              \"database connection error may be wrong password, username or dbname: {}\",\n               e.getMessage());\n     }\n   }", "fixed": "       logger\n           .error(\n              \"database error: {}\",\n               e.getMessage());\n     }\n   }", "sourceBeforeFix": "logger.error(\"InfluxDB is not yet connected\")", "sourceAfterFix": "logger.warn(\"InfluxDB is not yet connected\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "62581b3da3c90956ae832644efb356b77eaf4d31", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         assertTrueEventually(new AllTasksRunningWithinNumOfNodes(scheduler, 1));\n     }\n    @Test(timeout = 600000)\n     public void schedule_thenDisposeLeakTest() {\n         Config config = new Config()\n                 .addScheduledExecutorConfig(new ScheduledExecutorConfig()", "fixed": "         assertTrueEventually(new AllTasksRunningWithinNumOfNodes(scheduler, 1));\n     }\n    @Test(timeout = 1800000)\n     public void schedule_thenDisposeLeakTest() {\n         Config config = new Config()\n                 .addScheduledExecutorConfig(new ScheduledExecutorConfig()", "sourceBeforeFix": "timeout=600000", "sourceAfterFix": "timeout=1800000"}
{"fixCommitSHA1": "ea06b2fb96f2120ceee04a998021c1dc752e25d3", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * group.\n      * @author max\n      */\n    static class ImportDetails {\n         \n         private String importFullPath;", "fixed": "      * group.\n      * @author max\n      */\n    private static class ImportDetails {\n         \n         private String importFullPath;", "sourceBeforeFix": "8", "sourceAfterFix": "10"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastSedaEndpointBuilder\n             extends\n                 HazelcastSedaEndpointConsumerBuilder, HazelcastSedaEndpointProducerBuilder {\n         default AdvancedHazelcastSedaEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastSedaEndpointBuilder\n             extends\n                 HazelcastSedaEndpointConsumerBuilder, HazelcastSedaEndpointProducerBuilder {\n         default AdvancedHazelcastSedaEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GuavaEventBusEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGuavaEventBusEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GuavaEventBusEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGuavaEventBusEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "             logger.debug(\"Active clients {}\", activeClients());\n         }\n        long now = System.nanoTime();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {", "fixed": "             logger.debug(\"Active clients {}\", activeClients());\n         }\n        long now = System.currentTimeMillis();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {", "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "    * \n    * @param schedulingInfo\n    */\n  protected void setSchedulingInfo(String schedulingInfo) {\n     super.setSchedulingInfo(schedulingInfo);\n   }", "fixed": "    * \n    * @param schedulingInfo\n    */\n  @InterfaceAudience.Private\n  public void setSchedulingInfo(String schedulingInfo) {\n     super.setSchedulingInfo(schedulingInfo);\n   }", "sourceBeforeFix": "4", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "66c325e004dc7d1ffb6b97e8af093a8455756d53", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n\t\tContext.setLocale(Context.getLocale());\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r", "fixed": " \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3b1d91e0105be86ffa011c5ca9ebbba49e3fcd5d", "projectName": "antlr.antlr4", "bugType": "Wrong Function Name", "problem": "         tokens.consume();\n         tokens.LT(1);\n        String result = tokens.toString();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }", "fixed": "         tokens.consume();\n         tokens.LT(1);\n        String result = tokens.getText();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }", "sourceBeforeFix": "tokens.toString()", "sourceAfterFix": "tokens.getText()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(-1, rc);\n     assertTrue(outContent.toString().contains(\"key1 has not been created.\"));\n   }", "fixed": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(1, rc);\n     assertTrue(outContent.toString().contains(\"key1 has not been created.\"));\n   }", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "93ec35952feb5bdcd58a7ac6ad0f07307ed0d367", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                 prop.getField().getJavaDoc().setFullText(option.getDescription());\n             }\n             if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getType())) {\n                     prop.getField().setStringInitializer(option.getDefaultValue());\n                 } else if (\"long\".equals(option.getJavaType()) || \"java.lang.Long\".equals(option.getJavaType())) {", "fixed": "                 prop.getField().getJavaDoc().setFullText(option.getDescription());\n             }\n             if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getJavaType())) {\n                     prop.getField().setStringInitializer(option.getDefaultValue());\n                 } else if (\"long\".equals(option.getJavaType()) || \"java.lang.Long\".equals(option.getJavaType())) {", "sourceBeforeFix": "option.getType()", "sourceAfterFix": "option.getJavaType()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales() throws APIException;\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "fixed": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales();\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c00ac08514c93edc88e556d40ac75a54eb40e271", "projectName": "Bukkit.Bukkit", "bugType": "Change Numeric Literal", "problem": "      */\n     @Deprecated\n     public static Color getColor(byte index) {\n        if (index < 0 || index >= colors.length) {\n             throw new IndexOutOfBoundsException();\n         } else {\n            return colors[index];\n         }\n     }", "fixed": "      */\n     @Deprecated\n     public static Color getColor(byte index) {\n        if ((index > -113 && index < 0) || index > 127) {\n             throw new IndexOutOfBoundsException();\n         } else {\n            return colors[index >= 0 ? index : index + 256];\n         }\n     }", "sourceBeforeFix": "i=4", "sourceAfterFix": "i=0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ChatScriptEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedChatScriptEndpointBuilder advanced() {", "fixed": "     \n    public interface ChatScriptEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedChatScriptEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "28e091abd22c4fd873287e54f41667591b2fbd97", "projectName": "xetorthio.jedis", "bugType": "Change Modifier", "problem": "    */\n   protected static class SetFromList<E> extends AbstractSet<E> implements Serializable {\n     private static final long serialVersionUID = -2850347066962734052L;\n    private final List<E> list;\n     private SetFromList(List<E> list) {\n       if (list == null) {", "fixed": "    */\n   protected static class SetFromList<E> extends AbstractSet<E> implements Serializable {\n     private static final long serialVersionUID = -2850347066962734052L;\n    private final transient List<E> list;\n     private SetFromList(List<E> list) {\n       if (list == null) {", "sourceBeforeFix": "18", "sourceAfterFix": "146"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1a5ec9791516322cfeb14508732b4a7025bef2e0", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "         request.conditionValue = conditionValue;\n         request.order = order;\n        final Map response = api.path(routes.ExtractorsResource().list(input.getId()), Map.class)\n                 .node(node)\n                 .expect(Http.Status.CREATED)\n                 .body(request)", "fixed": "         request.conditionValue = conditionValue;\n         request.order = order;\n        final Map response = api.path(routes.ExtractorsResource().create(input.getId()), Map.class)\n                 .node(node)\n                 .expect(Http.Status.CREATED)\n                 .body(request)", "sourceBeforeFix": "routes.ExtractorsResource().list(input.getId())", "sourceAfterFix": "routes.ExtractorsResource().create(input.getId())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0ff511d978c273a8eae317ecf9f4f1b98e2efb07", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t}\n \t\t\treturn context;\n \t\t}\n\t\tcatch (Exception ex) {\n \t\t\ttry {\n \t\t\t\tfor (SpringApplicationRunListener runListener : runListeners) {\n \t\t\t\t\tfinishWithException(runListener, context, ex);", "fixed": " \t\t\t}\n \t\t\treturn context;\n \t\t}\n\t\tcatch (Throwable ex) {\n \t\t\ttry {\n \t\t\t\tfor (SpringApplicationRunListener runListener : runListeners) {\n \t\t\t\t\tfinishWithException(runListener, context, ex);", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "Throwable exception"}
{"fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     CLIENT.user_deleteById(fileId);\n   }\n  public ClientFileInfo user_getClientFileInfoByPath(String path)\n       throws FileDoesNotExistException, InvalidPathException, TException {\n     return CLIENT.user_getClientFileInfoByPath(path);\n   }\n  public ClientFileInfo user_getClientFileInfoById(int id)\n       throws FileDoesNotExistException, TException {\n     return CLIENT.user_getClientFileInfoById(id);\n   }", "fixed": "     CLIENT.user_deleteById(fileId);\n   }\n  public synchronized ClientFileInfo user_getClientFileInfoByPath(String path)\n       throws FileDoesNotExistException, InvalidPathException, TException {\n     return CLIENT.user_getClientFileInfoByPath(path);\n   }\n  public synchronized ClientFileInfo user_getClientFileInfoById(int id)\n       throws FileDoesNotExistException, TException {\n     return CLIENT.user_getClientFileInfoById(id);\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HipchatEndpointBuilder\n             extends\n                 HipchatEndpointConsumerBuilder, HipchatEndpointProducerBuilder {\n         default AdvancedHipchatEndpointBuilder advanced() {", "fixed": "     \n    public interface HipchatEndpointBuilder\n             extends\n                 HipchatEndpointConsumerBuilder, HipchatEndpointProducerBuilder {\n         default AdvancedHipchatEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2956fca2f1fd1c8609d682fa58e72e3ccc54826a", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "             detach();\n             ReactiveStreamsBackpressureStrategy strategy = producer.getEndpoint().getBackpressureStrategy();\n            Flux<Exchange> flux = Flux.create(camelSink::set);\n             if (ObjectHelper.equal(strategy, ReactiveStreamsBackpressureStrategy.OLDEST)) {", "fixed": "             detach();\n             ReactiveStreamsBackpressureStrategy strategy = producer.getEndpoint().getBackpressureStrategy();\n            Flux<Exchange> flux = Flux.create(camelSink::set, FluxSink.OverflowStrategy.IGNORE);\n             if (ObjectHelper.equal(strategy, ReactiveStreamsBackpressureStrategy.OLDEST)) {", "sourceBeforeFix": "EmitterProcessor.create(1)", "sourceAfterFix": "EmitterProcessor.create(1,false)"}
{"fixCommitSHA1": "bee7a939ade6ee0b42f00ea8727996986e31d6db", "projectName": "eclipse.vert.x", "bugType": "Change Binary Operator", "problem": "     @Override\n     public ByteBuf buffer(int initialCapacity) {\n      if (initialCapacity < capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();", "fixed": "     @Override\n     public ByteBuf buffer(int initialCapacity) {\n      if (initialCapacity <= capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();", "sourceBeforeFix": "initialCapacity < capacity", "sourceAfterFix": "initialCapacity <= capacity"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(2000L)\r\n                     .batchSize(5)\r", "fixed": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(500L)\r\n                     .batchSize(5)\r", "sourceBeforeFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(2000L)", "sourceAfterFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(500L)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedPubNubEndpointBuilder\n             extends\n                 AdvancedPubNubEndpointConsumerBuilder, AdvancedPubNubEndpointProducerBuilder {\n         default PubNubEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedPubNubEndpointBuilder\n             extends\n                 AdvancedPubNubEndpointConsumerBuilder, AdvancedPubNubEndpointProducerBuilder {\n         default PubNubEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnablednHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "fixed": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"diskspace\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"diskspace\")"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.error(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "fixed": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "sourceBeforeFix": "LOG.error(\"Failed to find \" + baseDirectory.getAbsolutePath())", "sourceAfterFix": "LOG.warn(\"Failed to find \" + baseDirectory.getAbsolutePath())"}
{"fixCommitSHA1": "d7ba926794b4df826c0fc8c57e4ce5afb72bb0e2", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                 continue;\n             }\n             if (toUpper) {\n                char upper = Character.toLowerCase(ch);\n                 sb.append(upper);\n                 toUpper = false;", "fixed": "                 continue;\n             }\n             if (toUpper) {\n                char upper = Character.toUpperCase(ch);\n                 sb.append(upper);\n                 toUpper = false;", "sourceBeforeFix": "Character.toLowerCase(ch)", "sourceAfterFix": "Character.toUpperCase(ch)"}
{"fixCommitSHA1": "60ef304601539a6ed91ba9ae88c31114d4b098a6", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": "           didWriteExtensionStartElement = true;\n         }\n         xtw.writeStartElement(ACTIVITI_EXTENSIONS_PREFIX, customProperty.getName(), ACTIVITI_EXTENSIONS_NAMESPACE);\n        xtw.writeCharacters(customProperty.getSimpleValue());\n         xtw.writeEndElement();\n       }\n     }", "fixed": "           didWriteExtensionStartElement = true;\n         }\n         xtw.writeStartElement(ACTIVITI_EXTENSIONS_PREFIX, customProperty.getName(), ACTIVITI_EXTENSIONS_NAMESPACE);\n        xtw.writeCData(customProperty.getSimpleValue());\n         xtw.writeEndElement();\n       }\n     }", "sourceBeforeFix": "xtw.writeCharacters(customProperty.getSimpleValue())", "sourceAfterFix": "xtw.writeCData(customProperty.getSimpleValue())"}
{"fixCommitSHA1": "51e6c8c8b6e847e2600420252160e331c85bd46a", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \tpublic boolean matches(ClassNode classNode) {\n\t\treturn AstUtils.hasLeastOneAnnotation(classNode, \"MessageEndpoint\",\n \t\t\t\t\"EnableIntegrationPatterns\");\n \t}", "fixed": " \tpublic boolean matches(ClassNode classNode) {\n\t\treturn AstUtils.hasAtLeastOneAnnotation(classNode, \"MessageEndpoint\",\n \t\t\t\t\"EnableIntegrationPatterns\");\n \t}", "sourceBeforeFix": "AstUtils.hasLeastOneAnnotation(classNode,\"MessageEndpoint\",\"EnableIntegrationPatterns\")", "sourceAfterFix": "AstUtils.hasAtLeastOneAnnotation(classNode,\"MessageEndpoint\",\"EnableIntegrationPatterns\")"}
{"fixCommitSHA1": "4281cc1c5d3aa51b56db9d9e251c761c52a855e3", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t * before growing the backing table. */\r\n \tpublic ObjectMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "fixed": " \t * before growing the backing table. */\r\n \tpublic ObjectMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2798f6edf82b64780fd846aaa5b860185c87f915", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\tfor (int i = 0; i < 2; i++) {\r\n\t\t\tfloat x = Gdx.input.getX() / (float)Gdx.graphics.getWidth();\r\n \t\t\tif (Gdx.input.isTouched(i) && (x >= startX && x <= endX)) {\r\n \t\t\t\treturn true;\r\n \t\t\t}\r", "fixed": " \t\tfor (int i = 0; i < 2; i++) {\r\n\t\t\tfloat x = Gdx.input.getX(i) / (float)Gdx.graphics.getWidth();\r\n \t\t\tif (Gdx.input.isTouched(i) && (x >= startX && x <= endX)) {\r\n \t\t\t\treturn true;\r\n \t\t\t}\r", "sourceBeforeFix": "isTouched(0.75f,1)", "sourceAfterFix": "isTouched(0.5f,1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "11fc33161f47544de5d2c50444340438f09a5b82", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t}\r\n \t\tpublic boolean hasChild (String name) {\r\n\t\t\tif (attributes == null) return false;\r\n \t\t\treturn getChildByName(name) != null;\r\n \t\t}\r", "fixed": " \t\t}\r\n \t\tpublic boolean hasChild (String name) {\r\n\t\t\tif (children == null) return false;\r\n \t\t\treturn getChildByName(name) != null;\r\n \t\t}\r", "sourceBeforeFix": "attributes == null", "sourceAfterFix": "children == null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "a34581c2dbe9aff080eec247d772c5ba7a2e43d4", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     try {\n       mFileSystem.rename(srcPath, dstPath);\n     } catch (FileDoesNotExistException e) {\n      LOG.error(\"Failed to rename {} to {}\", src, dst);\n       return false;\n     } catch (AlluxioException e) {\n       ensureExists(srcPath);", "fixed": "     try {\n       mFileSystem.rename(srcPath, dstPath);\n     } catch (FileDoesNotExistException e) {\n      LOG.warn(\"rename failed: {}\", e.getMessage());\n       return false;\n     } catch (AlluxioException e) {\n       ensureExists(srcPath);", "sourceBeforeFix": "LOG.error(\"delete failed: {}\",e.getMessage())", "sourceAfterFix": "LOG.warn(\"delete failed: {}\",e.getMessage())"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\tActorRef rpcEndpoint,\n \t\t\tTime timeout,\n \t\t\tlong maximumFramesize,\n\t\t\t@Nullable CompletableFuture<Boolean> terminationFuture) {\n \t\tthis.address = Preconditions.checkNotNull(address);\n \t\tthis.hostname = Preconditions.checkNotNull(hostname);", "fixed": " \t\t\tActorRef rpcEndpoint,\n \t\t\tTime timeout,\n \t\t\tlong maximumFramesize,\n\t\t\t@Nullable CompletableFuture<Void> terminationFuture) {\n \t\tthis.address = Preconditions.checkNotNull(address);\n \t\tthis.hostname = Preconditions.checkNotNull(hostname);", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "67d12ee748c936512924fc6e493483be8734acea", "projectName": "neo4j.neo4j", "bugType": "Less Specific If", "problem": "      */\n     public String getVersion()\n     {\n        if ( version == null )\n         {\n             return \"<unknown>\";\n         }", "fixed": "      */\n     public String getVersion()\n     {\n        if ( version == null || version.equals( \"\" ) )\n         {\n             return \"<unknown>\";\n         }", "sourceBeforeFix": "version == null", "sourceAfterFix": "version == null || version.equals(\"\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SpringWebserviceEndpointBuilder\n             extends\n                 SpringWebserviceEndpointConsumerBuilder, SpringWebserviceEndpointProducerBuilder {\n         default AdvancedSpringWebserviceEndpointBuilder advanced() {", "fixed": "     \n    public interface SpringWebserviceEndpointBuilder\n             extends\n                 SpringWebserviceEndpointConsumerBuilder, SpringWebserviceEndpointProducerBuilder {\n         default AdvancedSpringWebserviceEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"rabbit\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"rabbit\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the\n \t *                     output view, which may have an underlying I/O channel to which it delegates.\n \t */\n\tpublic void serialize(T record, DataOutputView target) throws IOException;\n \t/**\n \t * De-serializes a record from the given source input view into the given target record instance.", "fixed": " \t * @throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the\n \t *                     output view, which may have an underlying I/O channel to which it delegates.\n \t */\n\tpublic abstract void serialize(T record, DataOutputView target) throws IOException;\n \t/**\n \t * De-serializes a record from the given source input view into the given target record instance.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n \t/**\n \t * Save the given global property to the database", "fixed": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t/**\n \t * Save the given global property to the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f61d37c0735911586cd6d9ec1586b3598c32aeda", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "      * @return BroadcastAction that tell Atmosphere to invoke the next filter or not.\n      */\n     protected BroadcastAction filter(AtmosphereResource r, Object message, Object originalMessage) {\n        BroadcastAction transformed = new BroadcastAction(originalMessage);\n         for (PerRequestBroadcastFilter mf : perRequestFilters) {\n             synchronized (mf) {\n                transformed = mf.filter(r, message, transformed.message());\n                 if (transformed == null || transformed.action() == BroadcastAction.ACTION.ABORT) {\n                     return transformed;\n                 }", "fixed": "      * @return BroadcastAction that tell Atmosphere to invoke the next filter or not.\n      */\n     protected BroadcastAction filter(AtmosphereResource r, Object message, Object originalMessage) {\n        BroadcastAction transformed = new BroadcastAction(message);\n         for (PerRequestBroadcastFilter mf : perRequestFilters) {\n             synchronized (mf) {\n                transformed = mf.filter(r, originalMessage, transformed.message());\n                 if (transformed == null || transformed.action() == BroadcastAction.ACTION.ABORT) {\n                     return transformed;\n                 }", "sourceBeforeFix": "new BroadcastAction(originalMessage)", "sourceAfterFix": "new BroadcastAction(message)"}
{"fixCommitSHA1": "60ef304601539a6ed91ba9ae88c31114d4b098a6", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "         } else {\n           xtw.writeStartElement(ACTIVITI_EXTENSIONS_PREFIX, ELEMENT_FIELD_STRING, ACTIVITI_EXTENSIONS_NAMESPACE);\n         }\n        xtw.writeCharacters(customProperty.getSimpleValue());\n         xtw.writeEndElement();\n         xtw.writeEndElement();\n       }", "fixed": "         } else {\n           xtw.writeStartElement(ACTIVITI_EXTENSIONS_PREFIX, ELEMENT_FIELD_STRING, ACTIVITI_EXTENSIONS_NAMESPACE);\n         }\n        xtw.writeCData(customProperty.getSimpleValue());\n         xtw.writeEndElement();\n         xtw.writeEndElement();\n       }", "sourceBeforeFix": "xtw.writeCharacters(customProperty.getSimpleValue())", "sourceAfterFix": "xtw.writeCData(customProperty.getSimpleValue())"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "5ac0dcd1b04e38a3dbe11a94897cc0a34ef2d5ec", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Override\n\tpublic void log (String tag, String message, Exception exception) {\n \t\tif (logLevel >= LOG_INFO) {\n \t\t\tcheckLogLabel();\n \t\t\tlog.setText(log.getText() + \"\\n\" + tag + \": \" + message + \"\\n\" + exception.getMessage() + \"\\n\");", "fixed": " \t}\n \t@Override\n\tpublic void log (String tag, String message, Throwable exception) {\n \t\tif (logLevel >= LOG_INFO) {\n \t\t\tcheckLogLabel();\n \t\t\tlog.setText(log.getText() + \"\\n\" + tag + \": \" + message + \"\\n\" + exception.getMessage() + \"\\n\");", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "Throwable exception"}
{"fixCommitSHA1": "da067cd627411116af86c4e5f4bb8d105eb75a40", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Numeric Literal", "problem": "     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n     @Test\n    public void matches_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(8L)));\n        assertTrue(predicate.apply(pickleEvent));\n     }\n     @Test", "fixed": "     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n     @Test\n    public void does_not_match_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(4L)));\n        assertFalse(predicate.apply(pickleEvent));\n     }\n     @Test", "sourceBeforeFix": "asList(8L)", "sourceAfterFix": "asList(4L)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "313f93c8c4ec073158317473dfbfb2aff29b1d65", "projectName": "google.guava", "bugType": "Wrong Function Name", "problem": "     for (int i = 0; i < reps; i++) {\n       Stopwatch s = new Stopwatch().start();\n      total += s.elapsedTime(TimeUnit.NANOSECONDS);\n     }\n     return total;\n   }", "fixed": "     for (int i = 0; i < reps; i++) {\n       Stopwatch s = new Stopwatch().start();\n      total += s.elapsed(TimeUnit.NANOSECONDS);\n     }\n     return total;\n   }", "sourceBeforeFix": "s.elapsedTime(TimeUnit.NANOSECONDS)", "sourceAfterFix": "s.elapsed(TimeUnit.NANOSECONDS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytesBinary(tableNameOrRegionName), Bytes.toBytesBinary(splitPoint));\n   }\n   /**", "fixed": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytes(tableNameOrRegionName), Bytes.toBytes(splitPoint));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableOrRegionName)"}
{"fixCommitSHA1": "d194da897cf8b34641f4fe5634dcf5af3b2544ed", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "         }\n     }\n    @Test(timeOut = 2000, expectedExceptions = { SSLHandshakeException.class } )\n     public void failInstantlyIfNotAllowedSelfSignedCertificate() throws Throwable {\n         try (AsyncHttpClient client = getAsyncHttpClient(new Builder().setRequestTimeout(2000).build())) {", "fixed": "         }\n     }\n    @Test(timeOut = 2000, expectedExceptions = { Exception.class } )\n     public void failInstantlyIfNotAllowedSelfSignedCertificate() throws Throwable {\n         try (AsyncHttpClient client = getAsyncHttpClient(new Builder().setRequestTimeout(2000).build())) {", "sourceBeforeFix": "SSLHandshakeException.class", "sourceAfterFix": "Exception.class"}
{"fixCommitSHA1": "ba98d83f598bbf2e9f5c41eeb51d36369a088fa6", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "         }\n         \n        protected int getMessageLength() {\n             return currentOutputPosition;\n         }", "fixed": "         }\n         \n        protected final int getMessageLength() {\n             return currentOutputPosition;\n         }", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedZooKeeperMasterEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default ZooKeeperMasterEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedZooKeeperMasterEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default ZooKeeperMasterEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     private static final String DELTA= \"void delta()\";\n     private static final String EPSILON= \"void epsilon()\";\n    private static class Dummy {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     private static final String DELTA= \"void delta()\";\n     private static final String EPSILON= \"void epsilon()\";\n    static class Dummy {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "96b6a1313d3c25e4ab7b5f2604385311497d8b65", "projectName": "mybatis.mybatis-3", "bugType": "Change Identifier Used", "problem": "     if (resultMapId != null) {\r\n       final ResultMap resultMap = configuration.getResultMap(resultMapId);\r\n       final DefaultResultHandler resultHandler = new DefaultResultHandler(configuration.getDefaultListResultHandlerType());\r\n      ResultColumnCache resultColumnCache = new ResultColumnCache(cs.getMetaData(), configuration);\r\n       handleRowValues(rs, resultMap, resultHandler, new RowBounds(), resultColumnCache);\r\n       metaParam.setValue(parameterMapping.getProperty(), resultHandler.getResultList());\r\n     } else {\r", "fixed": "     if (resultMapId != null) {\r\n       final ResultMap resultMap = configuration.getResultMap(resultMapId);\r\n       final DefaultResultHandler resultHandler = new DefaultResultHandler(configuration.getDefaultListResultHandlerType());\r\n      ResultColumnCache resultColumnCache = new ResultColumnCache(rs.getMetaData(), configuration);\r\n       handleRowValues(rs, resultMap, resultHandler, new RowBounds(), resultColumnCache);\r\n       metaParam.setValue(parameterMapping.getProperty(), resultHandler.getResultList());\r\n     } else {\r", "sourceBeforeFix": "cs.getMetaData()", "sourceAfterFix": "rs.getMetaData()"}
{"fixCommitSHA1": "94e4b5926b4c263f4cf5e6ad545a4bb03077b9a5", "projectName": "Atmosphere.atmosphere", "bugType": "Change Unary Operator\t", "problem": "         long now = System.nanoTime();\n         CacheMessage cacheMessage = put(e, now, uuid);\n        if (uuid.equals(NULL)) {\n             AtmosphereResourceFactory.getDefault().find(uuid).getResponse().setHeader(X_CACHE_DATE, String.valueOf(now));\n         }\n         return cacheMessage;", "fixed": "         long now = System.nanoTime();\n         CacheMessage cacheMessage = put(e, now, uuid);\n        if (!uuid.equals(NULL)) {\n             AtmosphereResourceFactory.getDefault().find(uuid).getResponse().setHeader(X_CACHE_DATE, String.valueOf(now));\n         }\n         return cacheMessage;", "sourceBeforeFix": "uuid.equals(NULL)", "sourceAfterFix": "!uuid.equals(NULL)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "dbf099e38ac11b6a5e31791f5ccbbb2511fabbf8", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\t\t\tclassName = className.replace(File.separator, \".\");\r\n\t\t\t\tclassName = className.substring(className.indexOf(\"org.openmrs.\"));\r\n \t\t\t\ttry {\r\n \t\t\t\t\tClass<?> currentClass = classLoader.loadClass(className);\r", "fixed": " \t\t\t\tclassName = className.replace(File.separator, \".\");\r\n\t\t\t\tclassName = className.substring(className.lastIndexOf(\"org.openmrs.\"));\r\n \t\t\t\ttry {\r\n \t\t\t\t\tClass<?> currentClass = classLoader.loadClass(className);\r", "sourceBeforeFix": "className.indexOf(\"org.openmrs.\")", "sourceAfterFix": "className.lastIndexOf(\"org.openmrs.\")"}
{"fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "   private final String secret;\n   private final String percentEncodedKey;\n  RequestToken(String key, String token) {\n     this.key = key;\n     this.secret = token;\n     this.percentEncodedKey = Utf8UrlEncoder.percentEncodeQueryElement(key);", "fixed": "   private final String secret;\n   private final String percentEncodedKey;\n  public RequestToken(String key, String token) {\n     this.key = key;\n     this.secret = token;\n     this.percentEncodedKey = Utf8UrlEncoder.percentEncodeQueryElement(key);", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           DefaultAtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler,", "fixed": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler,", "sourceBeforeFix": "DefaultAtmosphereRequest request", "sourceAfterFix": "AtmosphereRequest request"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b3af9b90cde6d8fd649b5ceb6b0272e0e8f86580", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "     \n    private class EnsureInstanceThreadFactory implements ThreadFactory {\n         public Thread newThread(final Runnable r) {\n             final Thread thread = new EnsureInstanceThread(r, \".hazelcast-wm.ensureInstance\");", "fixed": "     \n    private static final class EnsureInstanceThreadFactory implements ThreadFactory {\n         public Thread newThread(final Runnable r) {\n             final Thread thread = new EnsureInstanceThread(r, \".hazelcast-wm.ensureInstance\");", "sourceBeforeFix": "2", "sourceAfterFix": "26"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return A deep copy of this comparator instance.\n \t */\n\tpublic TypeComparator<T> duplicate();\n }", "fixed": " \t * \n \t * @return A deep copy of this comparator instance.\n \t */\n\tpublic abstract TypeComparator<T> duplicate();\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2b27f6006b63686c9e8f1ff03b411ab2a6d1c791", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         template.sendBodyAndHeader(serverUri, \"Hello World\", HttpProducer.QUERY, \"one=uno&two=dos\");\n        assertMockEndpointsSatisifed();\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "fixed": "         template.sendBodyAndHeader(serverUri, \"Hello World\", HttpProducer.QUERY, \"one=uno&two=dos\");\n        assertMockEndpointsSatisfied();\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "sourceBeforeFix": "assertMockEndpointsSatisifed()", "sourceAfterFix": "assertMockEndpointsSatisfied()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t}\n \t\tfactory.setConfigurations(Arrays.asList(configurations[0], configurations[1]));\n \t\tfactory.addConfigurations(configurations[2], configurations[3]);\n\t\tthis.container = factory.getEmbdeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) configurations);\n \t\tfor (Configuration configuration : configurations) {\n \t\t\tordered.verify(configuration).configure((WebAppContext) anyObject());", "fixed": " \t\t}\n \t\tfactory.setConfigurations(Arrays.asList(configurations[0], configurations[1]));\n \t\tfactory.addConfigurations(configurations[2], configurations[3]);\n\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) configurations);\n \t\tfor (Configuration configuration : configurations) {\n \t\t\tordered.verify(configuration).configure((WebAppContext) anyObject());", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new CreateCommand(keyName, options);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName = \"--help\";", "fixed": "         command = new CreateCommand(keyName, options);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName = \"--help\";", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "dd20434290eb6ae6dff133d70073e35a3998d362", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "                      NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId\n              + \" will not be in TachyonStorage\", ioe);\n           mShouldCacheCurrentBlock = false;\n         }\n       }", "fixed": "                      NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId\n              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }", "sourceBeforeFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\",ioe)", "sourceAfterFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\")"}
{"fixCommitSHA1": "26604fde31e9f4586c18209285b7b5c3bc80d51e", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         return updatedUnpartitionedSources;\n     }\n    private void schedulePartitionedSource(TaskSource source)\n     {", "fixed": "         return updatedUnpartitionedSources;\n     }\n    private synchronized void schedulePartitionedSource(TaskSource source)\n     {", "sourceBeforeFix": "2", "sourceAfterFix": "34"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"fixCommitSHA1": "c107859092914bf1f6c684ee202f309eb60330e2", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": " \t\t\txml.append(\"<time-to-live-seconds>\").append(m.getTimeToLiveSeconds()).append(\"</time-to-live-seconds>\");\n \t\t\txml.append(\"<max-idle-seconds>\").append(m.getMaxIdleSeconds()).append(\"</max-idle-seconds>\");\n \t\t\txml.append(\"<cache-value>\").append(m.isCacheValue()).append(\"</cache-value>\");\n\t\t\txml.append(\"<read-backup-data>\").append(m.isCacheValue()).append(\"</read-backup-data>\");\n \t\t\txml.append(\"<merge-policy>\").append(m.getMergePolicy()).append(\"</merge-policy>\");\n \t\t\tif(m.getMapStoreConfig() != null) {", "fixed": " \t\t\txml.append(\"<time-to-live-seconds>\").append(m.getTimeToLiveSeconds()).append(\"</time-to-live-seconds>\");\n \t\t\txml.append(\"<max-idle-seconds>\").append(m.getMaxIdleSeconds()).append(\"</max-idle-seconds>\");\n \t\t\txml.append(\"<cache-value>\").append(m.isCacheValue()).append(\"</cache-value>\");\n\t\t\txml.append(\"<read-backup-data>\").append(m.isReadBackupData()).append(\"</read-backup-data>\");\n \t\t\txml.append(\"<merge-policy>\").append(m.getMergePolicy()).append(\"</merge-policy>\");\n \t\t\tif(m.getMapStoreConfig() != null) {", "sourceBeforeFix": "m.isCacheValue()", "sourceAfterFix": "m.isReadBackupData()"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 16:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 16:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),args.rest())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedStreamEndpointBuilder\n             extends\n                 AdvancedStreamEndpointConsumerBuilder, AdvancedStreamEndpointProducerBuilder {\n         default StreamEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedStreamEndpointBuilder\n             extends\n                 AdvancedStreamEndpointConsumerBuilder, AdvancedStreamEndpointProducerBuilder {\n         default StreamEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Ignoring duplicate class \" + className)", "sourceAfterFix": "LOG.warn(\"Ignoring duplicate class \" + className)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "996282f1d3c9f4d8f02e150bebad57d3a44304f9", "projectName": "pxb1988.dex2jar", "bugType": "Same Function More Args", "problem": "         for (String file : args) {\n             File dex = new File(file);\n            final File gen = new File(FilenameUtils.getBaseName(file) + \"_dex2jar.jar\");\n             log.info(\"dex2jar {} -> {}\", dex, gen);\n             try {\n                 doFile(dex, gen);", "fixed": "         for (String file : args) {\n             File dex = new File(file);\n            final File gen = new File(dex.getParentFile(),FilenameUtils.getBaseName(file) + \"_dex2jar.jar\");\n             log.info(\"dex2jar {} -> {}\", dex, gen);\n             try {\n                 doFile(dex, gen);", "sourceBeforeFix": "new File(FilenameUtils.getBaseName(file) + \"_dex2jar.jar\")", "sourceAfterFix": "new File(dex.getParentFile(),FilenameUtils.getBaseName(file) + \"_dex2jar.jar\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "e3b94b6ab4c29b8dddb99ce9fd2efa36e097d455", "projectName": "facebook.presto", "bugType": "Change Binary Operator", "problem": "             }\n            while (!queuedPages.isEmpty() && bufferedBytes >= maxBufferedBytes) {\n                 QueuedPage queuedPage = queuedPages.removeFirst();\n                 addInternal(queuedPage.getPage());\n                 queuedPage.getFuture().set(null);", "fixed": "             }\n            while (!queuedPages.isEmpty() && bufferedBytes < maxBufferedBytes) {\n                 QueuedPage queuedPage = queuedPages.removeFirst();\n                 addInternal(queuedPage.getPage());\n                 queuedPage.getFuture().set(null);", "sourceBeforeFix": "bufferedBytes >= maxBufferedBytes", "sourceAfterFix": "bufferedBytes < maxBufferedBytes"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IgniteSetEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedIgniteSetEndpointBuilder advanced() {\n             return (AdvancedIgniteSetEndpointBuilder) this;\n         }", "fixed": "     \n    public interface IgniteSetEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedIgniteSetEndpointBuilder advanced() {\n             return (AdvancedIgniteSetEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedInfluxDbEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default InfluxDbEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedInfluxDbEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default InfluxDbEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74f9a84ea9679e743f44a5a743b235c3266958e3", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": "  * Abstract base class for nested conditions.\n  *\n  * @author Phillip Webb\n  */\nabstract class AbstractNestedCondition extends SpringBootCondition\n \t\timplements ConfigurationCondition {\n \tprivate final ConfigurationPhase configurationPhase;", "fixed": "  * Abstract base class for nested conditions.\n  *\n  * @author Phillip Webb\n * @since 2.0.1\n  */\npublic abstract class AbstractNestedCondition extends SpringBootCondition\n \t\timplements ConfigurationCondition {\n \tprivate final ConfigurationPhase configurationPhase;", "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "8abd59029e7c0bc0973b492fd84a386b26661bc7", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "             }\n         });\n         try {\n            finish.await(getTimeout(), TimeUnit.MILLISECONDS);\n         } catch (InterruptedException e) {\n             throw new RemotingException(this, \"client(url: \" + getUrl() + \") failed to connect to server \" + getRemoteAddress() + \" client-side timeout \"\n                    + getTimeout() + \"ms (elapsed: \" + (System.currentTimeMillis() - start)\n                     + \"ms) from netty client \" + NetUtils.getLocalHost() + \" using dubbo version \"\n                     + Version.getVersion() + \", cause: \" + e.getMessage(), e);\n         }", "fixed": "             }\n         });\n         try {\n            finish.await(getConnectTimeout(), TimeUnit.MILLISECONDS);\n         } catch (InterruptedException e) {\n             throw new RemotingException(this, \"client(url: \" + getUrl() + \") failed to connect to server \" + getRemoteAddress() + \" client-side timeout \"\n                    + getConnectTimeout() + \"ms (elapsed: \" + (System.currentTimeMillis() - start)\n                     + \"ms) from netty client \" + NetUtils.getLocalHost() + \" using dubbo version \"\n                     + Version.getVersion() + \", cause: \" + e.getMessage(), e);\n         }", "sourceBeforeFix": "getTimeout()", "sourceAfterFix": "getConnectTimeout()"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n \t/**\n \t * @param aClass class of object getting length for", "fixed": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t/**\n \t * @param aClass class of object getting length for", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testBurstySampling() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "fixed": "     public void testBurstySampling() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "sourceBeforeFix": "mock.expectedMessageCount(10)", "sourceAfterFix": "mock.expectedMinimumMessageCount(10)"}
{"fixCommitSHA1": "5ac0dcd1b04e38a3dbe11a94897cc0a34ef2d5ec", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \t@Override\r\n\tpublic void log (String tag, String message, Exception exception) {\r\n \t\tif (logLevel >= LOG_INFO) Log.i(tag, message, exception);\r\n \t}\r", "fixed": " \t}\r\n \t@Override\r\n\tpublic void log (String tag, String message, Throwable exception) {\r\n \t\tif (logLevel >= LOG_INFO) Log.i(tag, message, exception);\r\n \t}\r", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "Throwable exception"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResponseClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedNettyHttpEndpointBuilder\n             extends\n                 AdvancedNettyHttpEndpointConsumerBuilder, AdvancedNettyHttpEndpointProducerBuilder {\n         default NettyHttpEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedNettyHttpEndpointBuilder\n             extends\n                 AdvancedNettyHttpEndpointConsumerBuilder, AdvancedNettyHttpEndpointProducerBuilder {\n         default NettyHttpEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testVarArgs1() {", "fixed": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testVarArgs1() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"redis\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"redis\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Caller in Function Call", "problem": "     renameProperties();\n    GatherGettersAndSetterProperties.update(compiler, externs, root);\n   }\n   ", "fixed": "     renameProperties();\n    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n   ", "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)", "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"}
{"fixCommitSHA1": "cc848a1c24959c2f6941234b77399fbd58ecd3ca", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "     @Override\n     public String apiFileFolder() {\n        return (outputFolder + File.separator + apiFolder).replaceAll(\"/\", File.separator);\n     }\n     public String modelFileFolder() {\n        return (outputFolder + File.separator + modelFolder).replaceAll(\"/\", File.separator);\n     }\n     @Override", "fixed": "     @Override\n     public String apiFileFolder() {\n        return (outputFolder + File.separator + apiFolder).replace(\"/\", File.separator);\n     }\n     public String modelFileFolder() {\n        return (outputFolder + File.separator + modelFolder).replace(\"/\", File.separator);\n     }\n     @Override", "sourceBeforeFix": "(outputFolder + File.separator + apiFolder).replaceAll(\"/\",File.separator)", "sourceAfterFix": "(outputFolder + File.separator + apiFolder).replace(\"/\",File.separator)"}
{"fixCommitSHA1": "ce7567c23bf357a2ab98a6f11bd112f36f8177ba", "projectName": "apache.hbase", "bugType": "Same Function More Args", "problem": "     assertEquals(response.getCode(), 200);\n    HTable table = new HTable(TABLE);\n     Get get = new Get(Bytes.toBytes(ROW_1));\n     get.addFamily(Bytes.toBytes(CFA));\n     get.addFamily(Bytes.toBytes(CFB));", "fixed": "     assertEquals(response.getCode(), 200);\n    HTable table = new HTable(TEST_UTIL.getConfiguration(), TABLE);\n     Get get = new Get(Bytes.toBytes(ROW_1));\n     get.addFamily(Bytes.toBytes(CFA));\n     get.addFamily(Bytes.toBytes(CFB));", "sourceBeforeFix": "new HTable(TABLE)", "sourceAfterFix": "new HTable(TEST_UTIL.getConfiguration(),TABLE)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithArrayInput(@Valid List<User> body);\n     @POST\n     @Path(\"/createWithList\")", "fixed": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithArrayInput(@Valid List<User> body) throws Exception;\n     @POST\n     @Path(\"/createWithList\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "66c325e004dc7d1ffb6b97e8af093a8455756d53", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "fixed": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n        return Double.valueOf(value.toString());\n     }\n }", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n        return Double.parseDouble(value.toString());\n     }\n }", "sourceBeforeFix": "Short.valueOf(value.toString())", "sourceAfterFix": "Short.parseShort(value.toString())"}
{"fixCommitSHA1": "eafa92d908c571ad0d3c9432583a318cc86733bb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Wrong Function Name", "problem": "             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n            assertEquals(resp.getHeader(\"target\"), target);\ntarget = \"http:\n             f = client.prepareGet(target).execute();", "fixed": "             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n            assertEquals(resp.getHeader(\"target\"), \"/\");\ntarget = \"http:\n             f = client.prepareGet(target).execute();", "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ElsqlEndpointBuilder\n             extends\n                 ElsqlEndpointConsumerBuilder, ElsqlEndpointProducerBuilder {\n         default AdvancedElsqlEndpointBuilder advanced() {", "fixed": "     \n    public interface ElsqlEndpointBuilder\n             extends\n                 ElsqlEndpointConsumerBuilder, ElsqlEndpointProducerBuilder {\n         default AdvancedElsqlEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "b1aa0100b3f37551bcd8507d168449d8b03c5c57", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "             expand(view, absNode);\n         }\n        graphVersion.incNodeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "fixed": "             expand(view, absNode);\n         }\n        graphVersion.incNodeAndEdgeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "sourceBeforeFix": "graphVersion.incNodeVersion()", "sourceAfterFix": "graphVersion.incNodeAndEdgeVersion()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJingEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JingEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJingEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JingEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "06318999148f2e755fc1df25a6786a862e194e1c", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "                 String location = response.getHeader(HttpHeaders.Names.LOCATION);\n                 URI uri = AsyncHttpProviderUtils.getRedirectUri(future.getURI(), location);\n                 boolean stripQueryString = config.isRemoveQueryParamOnRedirect();\n                if (!uri.toString().equalsIgnoreCase(future.getURI().toString())) {\n                     final RequestBuilder nBuilder = stripQueryString ?\n                             new RequestBuilder(future.getRequest()).setQueryParameters(null)\n                             : new RequestBuilder(future.getRequest());", "fixed": "                 String location = response.getHeader(HttpHeaders.Names.LOCATION);\n                 URI uri = AsyncHttpProviderUtils.getRedirectUri(future.getURI(), location);\n                 boolean stripQueryString = config.isRemoveQueryParamOnRedirect();\n                if (!uri.toString().equals(future.getURI().toString())) {\n                     final RequestBuilder nBuilder = stripQueryString ?\n                             new RequestBuilder(future.getRequest()).setQueryParameters(null)\n                             : new RequestBuilder(future.getRequest());", "sourceBeforeFix": "uri.toString().equalsIgnoreCase(future.getURI().toString())", "sourceAfterFix": "uri.toString().equals(future.getURI().toString())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "bf2975b37015a967a0a0c76028e78245905df614", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": " \nclass DiagnosticsLogWriterImpl implements DiagnosticsLogWriter {\n     private static final String STR_LONG_MIN_VALUE = String.format(LOCALE_INTERNAL, \"%,d\", Long.MIN_VALUE);", "fixed": " \npublic class DiagnosticsLogWriterImpl implements DiagnosticsLogWriter {\n     private static final String STR_LONG_MIN_VALUE = String.format(LOCALE_INTERNAL, \"%,d\", Long.MIN_VALUE);", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "55fb8b3008f3a0514ad28982f884d5d20fba9fe2", "projectName": "apache.camel", "bugType": "Same Function Less Args", "problem": "             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Deleting an element with key \" + key + \" into the Cache\");\n             }\n            cache.remove(key, true);\n         } else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Quering an element with key \" + key + \" from the Cache\");", "fixed": "             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Deleting an element with key \" + key + \" into the Cache\");\n             }\n            cache.remove(key);\n         } else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Quering an element with key \" + key + \" from the Cache\");", "sourceBeforeFix": "cache.put(new Element(key,element),true)", "sourceAfterFix": "cache.put(new Element(key,element))"}
{"fixCommitSHA1": "720619e271e68d5848185c2a7e45175b18e98f90", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 }\n                 Exception lastFailureException = task.getStats().getLastFailureException();\n                if (lastFailureException instanceof SocketTimeoutException || lastFailureException instanceof UnknownHostException) {\n                     return GONE;\n                 }\n                if (lastFailureException instanceof ConnectException) {\n                     return UNRESPONSIVE;\n                 }", "fixed": "                 }\n                 Exception lastFailureException = task.getStats().getLastFailureException();\n                if (lastFailureException instanceof ConnectException) {\n                     return GONE;\n                 }\n                if (lastFailureException instanceof SocketTimeoutException) {\n                     return UNRESPONSIVE;\n                 }", "sourceBeforeFix": "lastFailureException instanceof ConnectException", "sourceAfterFix": "lastFailureException instanceof SocketTimeoutException"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @param from The element to be copied.\n \t * @param to The target element.\n \t */\n\tpublic void copyTo(T from, T to);", "fixed": " \t * @param from The element to be copied.\n \t * @param to The target element.\n \t */\n\tpublic abstract void copyTo(T from, T to);", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "f08db599028efb40590226e5feda39dc5e410a9e", "projectName": "wildfly.wildfly", "bugType": "Change Operand ", "problem": "         final String bundlePath = config.getBundlePath();\n         final File bundlesDir = new File(bundlePath);\n         if (!bundlesDir.isDirectory()) {\n            throw new IllegalStateException(\"Invalid modules directory: \" + modulesDir);\n         }\n         SecurityActions.setSystemProperty(SYSPROP_KEY_BUNDLE_PATH, bundlePath);", "fixed": "         final String bundlePath = config.getBundlePath();\n         final File bundlesDir = new File(bundlePath);\n         if (!bundlesDir.isDirectory()) {\n            throw new IllegalStateException(\"Invalid modules directory: \" + bundlesDir);\n         }\n         SecurityActions.setSystemProperty(SYSPROP_KEY_BUNDLE_PATH, bundlePath);", "sourceBeforeFix": "\"Invalid modules directory: \" + modulesDir", "sourceAfterFix": "\"Invalid modules directory: \" + bundlesDir"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "58ce4c40970fc29d00e5740bc6098eb475668e86", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "             if (!found) {\n                 boolean reqd = true;\n                if (mCheckUnusedThrows) {\n                     final ClassResolver cr =\n                         new ClassResolver(\n                             getClassLoader(),", "fixed": "             if (!found) {\n                 boolean reqd = true;\n                if (mAllowUndeclaredRTE) {\n                     final ClassResolver cr =\n                         new ClassResolver(\n                             getClassLoader(),", "sourceBeforeFix": "if (mCheckUnusedThrows) {   processPackage(aAST); } ", "sourceAfterFix": "if (mAllowUndeclaredRTE) {   processPackage(aAST); } "}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "* @see\n* @see NormalizableKey\n \t */\n\tpublic void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "fixed": "* @see\n* @see NormalizableKey\n \t */\n\tpublic abstract void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IgniteQueueEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIgniteQueueEndpointBuilder advanced() {", "fixed": "     \n    public interface IgniteQueueEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIgniteQueueEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1c3c663ba7d55fcd33af1502ca426274d51d2ba1", "projectName": "apache.flink", "bugType": "Change Binary Operator", "problem": " \t\t}\n\t\tfor (int i = 0; i < maxIndex; i++) {\n \t\t\tfinal String fullKey = key + '.' + i;\n \t\t\tif (properties.containsKey(fullKey)) {", "fixed": " \t\t}\n\t\tfor (int i = 0; i <= maxIndex; i++) {\n \t\t\tfinal String fullKey = key + '.' + i;\n \t\t\tif (properties.containsKey(fullKey)) {", "sourceBeforeFix": "i < maxIndex", "sourceAfterFix": "i <= maxIndex"}
{"fixCommitSHA1": "ad392b3d40e7e7299f06b969c5f4a90ba90ed2fa", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       case COMPLETE_STORE:\n         return entry.getCompleteStore();\n       case CREATE_STORE:\n        return entry.getCompleteStore();\n       case DELETE_STORE:\n         return entry.getDeleteStore();\n       case MERGE_STORE:", "fixed": "       case COMPLETE_STORE:\n         return entry.getCompleteStore();\n       case CREATE_STORE:\n        return entry.getCreateStore();\n       case DELETE_STORE:\n         return entry.getDeleteStore();\n       case MERGE_STORE:", "sourceBeforeFix": "entry.getCompleteStore()", "sourceAfterFix": "entry.getCreateStore()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n                mapConfig.setTimeToLiveSeconds(Integer.valueOf(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {", "fixed": "             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n                mapConfig.setTimeToLiveSeconds(Integer.parseInt(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {", "sourceBeforeFix": "Integer.valueOf(sessionTTL)", "sourceAfterFix": "Integer.parseInt(sessionTTL)"}
{"fixCommitSHA1": "178c690d37e7a329ad0a7a9349f3950f57dc4dde", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tpublic void write(ConfigurationMetadata metadata, OutputStream outputStream)\n \t\t\tthrows IOException {\n\t\tJSONObject object = new JSONObject();\n \t\tobject.put(\"groups\", toJsonArray(metadata, ItemType.GROUP));\n \t\tobject.put(\"properties\", toJsonArray(metadata, ItemType.PROPERTY));\n \t\tobject.put(\"hints\", toJsonArray(metadata.getHints()));", "fixed": " \tpublic void write(ConfigurationMetadata metadata, OutputStream outputStream)\n \t\t\tthrows IOException {\n\t\tJSONObject object = new JSONOrderedObject();\n \t\tobject.put(\"groups\", toJsonArray(metadata, ItemType.GROUP));\n \t\tobject.put(\"properties\", toJsonArray(metadata, ItemType.PROPERTY));\n \t\tobject.put(\"hints\", toJsonArray(metadata.getHints()));", "sourceBeforeFix": "new JSONObject()", "sourceAfterFix": "new JSONOrderedObject()"}
{"fixCommitSHA1": "5ac2955ff4451c72db1e157dda76786f30511679", "projectName": "eclipse.vert.x", "bugType": "Change Numeric Literal", "problem": "     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n    int trafficClass = TestUtils.randomByte() + 127;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();", "fixed": "     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n    int trafficClass = TestUtils.randomByte() + 128;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();", "sourceBeforeFix": "TestUtils.randomByte() + 127", "sourceAfterFix": "TestUtils.randomByte() + 128"}
{"fixCommitSHA1": "333a6469ffec02354a56d1a5eb5867dc16da58a0", "projectName": "jhy.jsoup", "bugType": "Same Function More Args", "problem": "         }\n         public String cookie(String name) {\n            Validate.notNull(name, \"Cookie name must not be null\");\n             return cookies.get(name);\n         }", "fixed": "         }\n         public String cookie(String name) {\n            Validate.notEmpty(name, \"Cookie name must not be empty\");\n             return cookies.get(name);\n         }", "sourceBeforeFix": "Validate.notEmpty(\"Cookie name must not be empty\")", "sourceAfterFix": "Validate.notEmpty(name,\"Cookie name must not be empty\")"}
{"fixCommitSHA1": "d37d345f6b168a610f2dfc2879dc00bce089f72b", "projectName": "facebook.presto", "bugType": "Change Caller in Function Call", "problem": "         BlockBuilder col1 = BIGINT.createBlockBuilder(new BlockBuilderStatus(), 1);\n         BlockBuilder col2 = DOUBLE.createBlockBuilder(new BlockBuilderStatus(), 1);\n        BlockBuilder col3 = VARCHAR.createBlockBuilder(new BlockBuilderStatus(), 1);\n         col1.writeLong(42).closeEntry();\n         col2.writeLong(doubleToLongBits(43.0)).closeEntry();", "fixed": "         BlockBuilder col1 = BIGINT.createBlockBuilder(new BlockBuilderStatus(), 1);\n         BlockBuilder col2 = DOUBLE.createBlockBuilder(new BlockBuilderStatus(), 1);\n        BlockBuilder col3 = VARBINARY.createBlockBuilder(new BlockBuilderStatus(), 1);\n         col1.writeLong(42).closeEntry();\n         col2.writeLong(doubleToLongBits(43.0)).closeEntry();", "sourceBeforeFix": "VARCHAR.createBlockBuilder(new BlockBuilderStatus(),1)", "sourceAfterFix": "VARBINARY.createBlockBuilder(new BlockBuilderStatus(),1)"}
{"fixCommitSHA1": "6121d105fc56c57636b98ecc7504caff978bcd14", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t@Override\n \tprotected boolean isNestedArchive(Archive.Entry entry) {\n \t\tif (entry.isDirectory()) {\n\t\t\treturn entry.getName().startsWith(BOOT_INF_CLASSES);\n \t\t}\n \t\treturn entry.getName().startsWith(BOOT_INF_LIB);\n \t}", "fixed": " \t@Override\n \tprotected boolean isNestedArchive(Archive.Entry entry) {\n \t\tif (entry.isDirectory()) {\n\t\t\treturn entry.getName().equals(BOOT_INF_CLASSES);\n \t\t}\n \t\treturn entry.getName().startsWith(BOOT_INF_LIB);\n \t}", "sourceBeforeFix": "entry.getName().startsWith(BOOT_INF_CLASSES)", "sourceAfterFix": "entry.getName().equals(BOOT_INF_CLASSES)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IgniteCacheEndpointBuilder\n             extends\n                 IgniteCacheEndpointConsumerBuilder, IgniteCacheEndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointBuilder advanced() {", "fixed": "     \n    public interface IgniteCacheEndpointBuilder\n             extends\n                 IgniteCacheEndpointConsumerBuilder, IgniteCacheEndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7b7249ad2cc3f33406ab319cdf53ad86121fe177", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \tprivate boolean mKNXConnectionEstablished;\n \tpublic void activate(ComponentContext componentContext) {\n\t\tlogger.info(\"Calimero library version {}\", Settings.getLibraryVersion());\n \t\tlogger.trace(\"KNXBinding: activating\");\n \t\tKNXConnection.addConnectionListener(this);\n \t\tmKNXBusReaderScheduler.start();", "fixed": " \tprivate boolean mKNXConnectionEstablished;\n \tpublic void activate(ComponentContext componentContext) {\n\t\tlogger.debug(\"Calimero library version {}\", Settings.getLibraryVersion());\n \t\tlogger.trace(\"KNXBinding: activating\");\n \t\tKNXConnection.addConnectionListener(this);\n \t\tmKNXBusReaderScheduler.start();", "sourceBeforeFix": "logger.info(\"Calimero library version {}\",Settings.getLibraryVersion())", "sourceAfterFix": "logger.debug(\"Calimero library version {}\",Settings.getLibraryVersion())"}
{"fixCommitSHA1": "14db1773526284bfc9837a4ef9121862dc8544fb", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": " class ObjectRecord extends AbstractRecord<Object> implements Record<Object> {\n    private Object value;\n     ObjectRecord() {\n         super();", "fixed": " class ObjectRecord extends AbstractRecord<Object> implements Record<Object> {\n    private volatile Object value;\n     ObjectRecord() {\n         super();", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(639)", "sourceAfterFix": "new StringBuilder(638)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d0c64987a9cb694631a3e5bc77b669f49f93a30e", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();\n                             Document xmlTamInfo = getFboxXmlResponse(url);", "fixed": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();\n                             Document xmlTamInfo = getFboxXmlResponse(url);", "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0", "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"}
{"fixCommitSHA1": "04ad420f594bedd8cd5c40160d67585f70686a9c", "projectName": "aws.aws-sdk-java", "bugType": "Wrong Function Name", "problem": "             try {\n                 return MAPPER.readTree(rawJsonContent);\n             } catch (Exception e) {\n                LOG.error(\"Unable to parse HTTP response content\", e);\n                 return null;\n             }\n         }", "fixed": "             try {\n                 return MAPPER.readTree(rawJsonContent);\n             } catch (Exception e) {\n                LOG.info(\"Unable to parse HTTP response content\", e);\n                 return null;\n             }\n         }", "sourceBeforeFix": "LOG.error(\"Unable to unmarshall exception content\",e)", "sourceAfterFix": "LOG.info(\"Unable to unmarshall exception content\",e)"}
{"fixCommitSHA1": "8b59afeaaa4458b6d21d88b2edc0d22ed04d9798", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     public void process(Exchange exchange) throws Exception {\n                         String id = exchange.getIn().getHeader(\"messageId\", String.class);\n                         if (id.equals(\"2\")) {\n                            throw new IllegalArgumentException(\"Damm I cannot handle id 2\");\n                         }\n                     }\n                 }).to(\"mock:result\");", "fixed": "                     public void process(Exchange exchange) throws Exception {\n                         String id = exchange.getIn().getHeader(\"messageId\", String.class);\n                         if (id.equals(\"2\")) {\n                            throw new IllegalArgumentException(\"Damn I cannot handle id 2\");\n                         }\n                     }\n                 }).to(\"mock:result\");", "sourceBeforeFix": "resultEndpoint.expectedBodiesReceived(\"one\",\"two\",\"three\")", "sourceAfterFix": "resultEndpoint.expectedBodiesReceivedInAnyOrder(\"one\",\"two\",\"three\")"}
{"fixCommitSHA1": "031f769fa3c610748b48bc105b4518c880161d0a", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t*/\n \tpublic Vector2 getLocalAnchorB () {\n\t\tjniGetLocalAnchorA(addr, tmp);\n \t\tlocalAnchorB.set(tmp[0], tmp[1]);\n \t\treturn localAnchorB;\n \t}", "fixed": " \t*/\n \tpublic Vector2 getLocalAnchorB () {\n\t\tjniGetLocalAnchorB(addr, tmp);\n \t\tlocalAnchorB.set(tmp[0], tmp[1]);\n \t\treturn localAnchorB;\n \t}", "sourceBeforeFix": "jniGetLocalAnchorA(addr,tmp)", "sourceAfterFix": "jniGetLocalAnchorB(addr,tmp)"}
{"fixCommitSHA1": "958fa58492daee485f640bf3261449d9bab9ee6e", "projectName": "facebook.presto", "bugType": "Missing Throws Exception", "problem": "         }\n     }\n    @Test(expectedExceptions = RuntimeException.class, expectedExceptionsMessageRegExp = \".*Failing getObjectMetadata call with \" + SC_FORBIDDEN + \".*\")\n     public void testGetMetadataForbidden()\n             throws Exception\n     {", "fixed": "         }\n     }\n    @Test(expectedExceptions = IOException.class, expectedExceptionsMessageRegExp = \".*Failing getObjectMetadata call with \" + SC_FORBIDDEN + \".*\")\n     public void testGetMetadataForbidden()\n             throws Exception\n     {", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedLdifEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LdifEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedLdifEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LdifEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"}
{"fixCommitSHA1": "5ee46848f4043aafcb7f8d49e7ecbf4494001653", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "     }\n     private boolean isSelected() {\n        return FiltersTopComponent.findInstance().getUiModel().getSelectedQuery() == query;\n     }", "fixed": "     }\n     private boolean isSelected() {\n        return FiltersTopComponent.findInstance().getUiModel().getSelectedRoot() == query;\n     }", "sourceBeforeFix": "FiltersTopComponent.findInstance().getUiModel().getSelectedQuery()", "sourceAfterFix": "FiltersTopComponent.findInstance().getUiModel().getSelectedRoot()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedXmlSignatureEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default XmlSignatureEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedXmlSignatureEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default XmlSignatureEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2706742224ec0e89dee98a7b99e91d4c2853a63c", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": " @InterfaceAudience.Public\n @InterfaceStability.Evolving\n public class OfflineMetaRepair {\n  private static final Log LOG = LogFactory.getLog(HBaseFsck.class.getName());\n   protected static void printUsageAndExit() {\n     StringBuilder sb = new StringBuilder();", "fixed": " @InterfaceAudience.Public\n @InterfaceStability.Evolving\n public class OfflineMetaRepair {\n  private static final Log LOG = LogFactory.getLog(OfflineMetaRepair.class.getName());\n   protected static void printUsageAndExit() {\n     StringBuilder sb = new StringBuilder();", "sourceBeforeFix": "HBaseFsck.class", "sourceAfterFix": "OfflineMetaRepair.class"}
{"fixCommitSHA1": "6d0b8df8802f95880b33ad6823598b01175e97f6", "projectName": "apache.hadoop", "bugType": "Change Boolean Literal", "problem": "     switch (startOpt) {\n       case FORMAT:\n        boolean aborted = format(conf, true);\n         System.exit(aborted ? 1 : 0);\nreturn null;\n       case GENCLUSTERID:", "fixed": "     switch (startOpt) {\n       case FORMAT:\n        boolean aborted = format(conf, false);\n         System.exit(aborted ? 1 : 0);\nreturn null;\n       case GENCLUSTERID:", "sourceBeforeFix": "format(conf,false)", "sourceAfterFix": "format(conf,true)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMvelEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MvelEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMvelEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MvelEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \tpublic long getLong (String key) {\r\n \t\tNSNumber value = (NSNumber)nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return 0L;\r\n\t\treturn value.longValue();\r\n \t}\r\n \t@Override\r", "fixed": " \tpublic long getLong (String key) {\r\n \t\tNSNumber value = (NSNumber)nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return 0L;\r\n\t\treturn value.longLongValue();\r\n \t}\r\n \t@Override\r", "sourceBeforeFix": "value.longValue()", "sourceAfterFix": "value.longLongValue()"}
{"fixCommitSHA1": "74cab2dc9b8c32482d2c86a66a0dd9318930b4bc", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": " import org.junit.runner.FilterFactoryParams;\n import org.junit.runner.manipulation.Filter;\nabstract class CategoryFilterFactory extends FilterFactory {\n     @Override\n     public FilterFactoryParams parseArgs(String args) throws FilterNotCreatedException {\n         try {", "fixed": " import org.junit.runner.FilterFactoryParams;\n import org.junit.runner.manipulation.Filter;\n\r\npublic abstract class CategoryFilterFactory extends FilterFactory {\r\n     @Override\n     public FilterFactoryParams parseArgs(String args) throws FilterNotCreatedException {\n         try {", "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DropboxEndpointBuilder\n             extends\n                 DropboxEndpointConsumerBuilder, DropboxEndpointProducerBuilder {\n         default AdvancedDropboxEndpointBuilder advanced() {", "fixed": "     \n    public interface DropboxEndpointBuilder\n             extends\n                 DropboxEndpointConsumerBuilder, DropboxEndpointProducerBuilder {\n         default AdvancedDropboxEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "a4c66dc2824221d05e1fcfd54e4f1f4e2c125c40", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "     @Override\n     protected void wakeup(boolean inEventLoop) {\n        if (wakenUp.compareAndSet(false, true)) {\n             selector.wakeup();\n         }\n     }", "fixed": "     @Override\n     protected void wakeup(boolean inEventLoop) {\n        if (!inEventLoop && wakenUp.compareAndSet(false, true)) {\n             selector.wakeup();\n         }\n     }", "sourceBeforeFix": "runAllTasks()", "sourceAfterFix": "processSelectedKeys()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDdbStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default DdbStreamEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDdbStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default DdbStreamEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "69bf835b58721b263b5ecaca7de2c327e3c29d7f", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     }\n     @Override\n    public void dispatchEvent(ReplicationMessage event, ReplicatedMessageListener listener) {\n         listener.onMessage(event);\n     }", "fixed": "     }\n     @Override\n    public void dispatchEvent(IdentifiedDataSerializable event, ReplicatedMessageListener listener) {\n         listener.onMessage(event);\n     }", "sourceBeforeFix": "ReplicationMessage event", "sourceAfterFix": "IdentifiedDataSerializable event"}
{"fixCommitSHA1": "af87fe0e2580cafb6b563688f119b3d40ae100f2", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     }\n     private static ModelControllerClient createClient2() throws UnknownHostException {\n        return ModelControllerClient.Factory.create(InetAddress.getByName(TestSuiteEnvironment.getServerAddress()),\n                 TestSuiteEnvironment.getServerPort() + 300,\n                 Authentication.getCallbackHandler());\n     }", "fixed": "     }\n     private static ModelControllerClient createClient2() throws UnknownHostException {\n        return ModelControllerClient.Factory.create(InetAddress.getByName(TestSuiteEnvironment.getServerAddressNode1()),\n                 TestSuiteEnvironment.getServerPort() + 300,\n                 Authentication.getCallbackHandler());\n     }", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "91c086b7af22b6cfaf2f66b2c872b752dc10a19c", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             }\n             LOG.trace(\"List files {} found {} files\", file.getAbsoluteFilePath(), files.size());\n             for (FTPFile f : files) {\n                if (f.getName().equals(file.getFileName())) {\n                     newLastModified = f.getTimestamp().getTimeInMillis();\n                     newLength = f.getSize();\n                 }", "fixed": "             }\n             LOG.trace(\"List files {} found {} files\", file.getAbsoluteFilePath(), files.size());\n             for (FTPFile f : files) {\n                if (f.getName().equals(file.getFileNameOnly())) {\n                     newLastModified = f.getTimestamp().getTimeInMillis();\n                     newLength = f.getSize();\n                 }", "sourceBeforeFix": "file.getFileName()", "sourceAfterFix": "file.getFileNameOnly()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "e69f5321a7a2a446599b1b8e6a7f3d45dfbfa9eb", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": " \t\tlogger.debug(\"Got RemoveFailedNode response.\");\n \t\tint nodeId = lastSentMessage.getMessagePayloadByte(0);\n\t\tswitch(incomingMessage.getMessagePayloadByte(1)) {\n \t\t\tcase FAILED_NODE_REMOVE_STARTED:\n \t\t\t\tlogger.debug(\"NODE {}: Remove failed node successfully placed on stack.\", nodeId);\n \t\t\t\tbreak;", "fixed": " \t\tlogger.debug(\"Got RemoveFailedNode response.\");\n \t\tint nodeId = lastSentMessage.getMessagePayloadByte(0);\n\t\tswitch(incomingMessage.getMessagePayloadByte(0)) {\n \t\t\tcase FAILED_NODE_REMOVE_STARTED:\n \t\t\t\tlogger.debug(\"NODE {}: Remove failed node successfully placed on stack.\", nodeId);\n \t\t\t\tbreak;", "sourceBeforeFix": "incomingMessage.getMessagePayloadByte(1)", "sourceAfterFix": "incomingMessage.getMessagePayloadByte(0)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "bee7a939ade6ee0b42f00ea8727996986e31d6db", "projectName": "eclipse.vert.x", "bugType": "Change Binary Operator", "problem": "     @Override\n     public ByteBuf buffer(int initialCapacity, int maxCapacity) {\n      if (initialCapacity < capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();", "fixed": "     @Override\n     public ByteBuf buffer(int initialCapacity, int maxCapacity) {\n      if (initialCapacity <= capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();", "sourceBeforeFix": "initialCapacity < capacity", "sourceAfterFix": "initialCapacity <= capacity"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n     }\n     @Test", "fixed": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "0d753e38ffde13e4c76d6d0ff075c92c7a8365f5", "projectName": "Alluxio.alluxio", "bugType": "Missing Throws Exception", "problem": " public class LocalFirstAvoidEvictionPolicyTest {\n   @Test\n  public void chooseClosestTierAvoidEviction() {\n     List<BlockWorkerInfo> workers = new ArrayList<>();\n     workers.add(worker(Constants.GB, Constants.MB, \"node2\", \"rack3\"));\n     workers.add(worker(Constants.GB, 0, \"node3\", \"rack2\"));", "fixed": " public class LocalFirstAvoidEvictionPolicyTest {\n   @Test\n  public void chooseClosestTierAvoidEviction() throws Exception {\n     List<BlockWorkerInfo> workers = new ArrayList<>();\n     workers.add(worker(Constants.GB, Constants.MB, \"node2\", \"rack3\"));\n     workers.add(worker(Constants.GB, 0, \"node3\", \"rack2\"));", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCMEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default CMEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCMEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default CMEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "70f070f7158f18eb1396fedc8ae63b3827627219", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     public void write(PortableWriter writer)\n             throws IOException {\n        writer.writeBoolean(\"c\", create);\n         writer.writeInt(\"p\", partitionId);\n         final ObjectDataOutput out = writer.getRawDataOutput();\n         out.writeObject(cacheConfig);", "fixed": "     public void write(PortableWriter writer)\n             throws IOException {\n        writer.writeBoolean(\"c\", createAlsoOnOthers);\n         writer.writeInt(\"p\", partitionId);\n         final ObjectDataOutput out = writer.getRawDataOutput();\n         out.writeObject(cacheConfig);", "sourceBeforeFix": "new CacheCreateConfigOperation(cacheConfig,create,false)", "sourceAfterFix": "new CacheCreateConfigOperation(cacheConfig,createAlsoOnOthers,false)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e05622578fa2cb335f4beee3496758aea43ddd29", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         pausingLoader.awaitPause();\n         hz3.getLifecycleService().terminate();\n        assertClusterSize(2, nodes[0]);\n         pausingLoader.resume();", "fixed": "         pausingLoader.awaitPause();\n         hz3.getLifecycleService().terminate();\n        assertClusterSizeEventually(2, nodes[0]);\n         pausingLoader.resume();", "sourceBeforeFix": "assertClusterSize(2,nodes[0])", "sourceAfterFix": "assertClusterSizeEventually(2,nodes[0])"}
{"fixCommitSHA1": "3079a06d9695ca88467c96c40c5608afef87fa5d", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 exchange.getPartitioningScheme().getPartitioning(),\n                 outputBuilder.build(),\n                 exchange.getPartitioningScheme().getHashColumn(),\n                exchange.getPartitioningScheme().isReplicateNulls(),\n                 exchange.getPartitioningScheme().getBucketToPartition());\n         PlanNode result = new ExchangeNode(", "fixed": "                 exchange.getPartitioningScheme().getPartitioning(),\n                 outputBuilder.build(),\n                 exchange.getPartitioningScheme().getHashColumn(),\n                exchange.getPartitioningScheme().isReplicateNullsAndAny(),\n                 exchange.getPartitioningScheme().getBucketToPartition());\n         PlanNode result = new ExchangeNode(", "sourceBeforeFix": "exchange.getPartitioningScheme().isReplicateNulls()", "sourceAfterFix": "exchange.getPartitioningScheme().isReplicateNullsAndAny()"}
{"fixCommitSHA1": "09acbc1a4f78be8e64a6d28918ad5c6ac08dc753", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": "  */\n public class UndertowWebServer implements WebServer {\n\tprivate static final Log logger = LogFactory.getLog(UndertowServletWebServer.class);\n \tprivate final Object monitor = new Object();", "fixed": "  */\n public class UndertowWebServer implements WebServer {\n\tprivate static final Log logger = LogFactory.getLog(UndertowWebServer.class);\n \tprivate final Object monitor = new Object();", "sourceBeforeFix": "UndertowServletWebServer.class", "sourceAfterFix": "UndertowWebServer.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\tif (conceptToValidate.getConceptId() != null\r\n\t\t\t\t\t\t\t\t        && conceptToValidate.getConceptId().equals(concept.getConceptId()))\r\n \t\t\t\t\t\t\t\t\tcontinue;\r", "fixed": " \t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\tif (conceptToValidate.getUuid() != null\r\n\t\t\t\t\t\t\t\t        && conceptToValidate.getUuid().equals(concept.getUuid()))\r\n \t\t\t\t\t\t\t\t\tcontinue;\r", "sourceBeforeFix": "conceptToValidate.getConceptId()", "sourceAfterFix": "conceptToValidate.getUuid()"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param methodDef method definition token.\n      * @return true if a method has a javadoc comment.\n      */\n    private boolean hasJavadocComment(DetailAST methodDef) {\n         final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);\n         return modifiers.branchContains(TokenTypes.BLOCK_COMMENT_BEGIN);\n     }", "fixed": "      * @param methodDef method definition token.\n      * @return true if a method has a javadoc comment.\n      */\n    private static boolean hasJavadocComment(DetailAST methodDef) {\n         final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);\n         return modifiers.branchContains(TokenTypes.BLOCK_COMMENT_BEGIN);\n     }", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WebhookEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedWebhookEndpointBuilder advanced() {\n             return (AdvancedWebhookEndpointBuilder) this;\n         }", "fixed": "     \n    public interface WebhookEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedWebhookEndpointBuilder advanced() {\n             return (AdvancedWebhookEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testSamplingFromExchangeStream() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "fixed": "     public void testSamplingFromExchangeStream() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "sourceBeforeFix": "mock.expectedMessageCount(3)", "sourceAfterFix": "mock.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleSheetsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GoogleSheetsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": "grammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}\ngrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}\ngrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}\n\t\tgrammarBuilder.append(\"  | ID          {$v = 3}\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");", "fixed": "grammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}\ngrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}\ngrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}\n\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");", "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}
{"fixCommitSHA1": "40a36841e2ed139a2a8714ccdafcaee49693f48f", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "                 grpbyExpr, new TypeCheckCtx(groupByInputRowResolver));\n             ExprNodeDesc grpbyExprNDesc = astToExprNDescMap.get(grpbyExpr);\n             if (grpbyExprNDesc == null)\n              throw new RuntimeException(\"Invalid Column Reference: \" + grpbyExpr.dump());\n             addToGBExpr(groupByOutputRowResolver, groupByInputRowResolver, grpbyExpr,\n                 grpbyExprNDesc, gbExprNDescLst, outputColumnNames);", "fixed": "                 grpbyExpr, new TypeCheckCtx(groupByInputRowResolver));\n             ExprNodeDesc grpbyExprNDesc = astToExprNDescMap.get(grpbyExpr);\n             if (grpbyExprNDesc == null)\n              throw new OptiqSemanticException(\"Invalid Column Reference: \" + grpbyExpr.dump());\n             addToGBExpr(groupByOutputRowResolver, groupByInputRowResolver, grpbyExpr,\n                 grpbyExprNDesc, gbExprNDescLst, outputColumnNames);", "sourceBeforeFix": "new RuntimeException(\"Invalid Column Reference: \" + grpbyExpr.dump())", "sourceAfterFix": "new OptiqSemanticException(\"Invalid Column Reference: \" + grpbyExpr.dump())"}
{"fixCommitSHA1": "fc80cf0f323b8f45dd7e80f5a4cc814ae6d691a7", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "fixed": "   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "02f1f95e522fd142dc0805c37e91d12880ab5996", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": " import static com.facebook.presto.sql.gen.Bootstrap.CALL_SITES_FIELD_NAME;\n import static java.lang.String.format;\npublic class ByteCodeUtils\n {\n     private ByteCodeUtils()\n     {", "fixed": " import static com.facebook.presto.sql.gen.Bootstrap.CALL_SITES_FIELD_NAME;\n import static java.lang.String.format;\npublic final class ByteCodeUtils\n {\n     private ByteCodeUtils()\n     {", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glGenTextures (int n, int[] textures, int offset) {\n\t\tGL.glGenTexturesEXT(n, toBuffer(textures, offset), 0);\n \t}\n \tpublic void glGetIntegerv (int pname, int[] params, int offset) {", "fixed": " \t}\n \tpublic void glGenTextures (int n, int[] textures, int offset) {\n\t\tGL.glGenTextures(n, toBuffer(textures, offset), 0);\n \t}\n \tpublic void glGetIntegerv (int pname, int[] params, int offset) {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "1b65b9c021feaab009ed5bf597d9e791c4c16727", "projectName": "Atmosphere.atmosphere", "bugType": "Change Binary Operator", "problem": "         }\n        if (servletClass != null && filterClass != null) {\n             ReflectorServletProcessor r = new ReflectorServletProcessor();\n             r.setServletClassName(servletClass);\n             r.setFilterClassName(filterClass);", "fixed": "         }\n        if (servletClass != null || filterClass != null) {\n             ReflectorServletProcessor r = new ReflectorServletProcessor();\n             r.setServletClassName(servletClass);\n             r.setFilterClassName(filterClass);", "sourceBeforeFix": "servletClass != null && filterClass != null", "sourceAfterFix": "servletClass != null || filterClass != null"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10950-10974 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15800", "sourceAfterFix": "id=10800"}
{"fixCommitSHA1": "12fc9a2b54118418712e3817bed82d52b8701244", "projectName": "checkstyle.checkstyle", "bugType": "Change Caller in Function Call", "problem": "     }\n    static class writer {\n \t\tpublic static void write(String line)\n \t\t{", "fixed": "     }\n    static class otherWriter {\n \t\tpublic static void write(String line)\n \t\t{", "sourceBeforeFix": "writer.write(line)", "sourceAfterFix": "otherWriter.write(line)"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n        return Short.valueOf(value.toString());\n     }\n     @Override", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n        return Short.parseShort(value.toString());\n     }\n     @Override", "sourceBeforeFix": "Short.valueOf(value.toString())", "sourceAfterFix": "Short.parseShort(value.toString())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "facd8dc5ca08d45214b47e394b78e59f71d588f5", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         ModelNode request = (ModelNode) ctx.get(\"OP_REQ\");\n         if(request == null) {\n            throw new CommandFormatException(\"Parsed request isn't available.\");\n         }\n         if(ctx.getConfig().isValidateOperationRequests()) {", "fixed": "         ModelNode request = (ModelNode) ctx.get(\"OP_REQ\");\n         if(request == null) {\n            throw new CommandLineException(\"Parsed request isn't available.\");\n         }\n         if(ctx.getConfig().isValidateOperationRequests()) {", "sourceBeforeFix": "new CommandFormatException(\"Communication error\",e)", "sourceAfterFix": "new CommandLineException(\"Communication error\",e)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "02f1f95e522fd142dc0805c37e91d12880ab5996", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "     public static ByteCodeNode handleNullValue(CompilerContext context,\n             LabelNode label,\n             Class<?> returnType,\n            List<? extends Class<?>> stackArgsToPop,\n             boolean clearNullFlag)\n     {\n         Block nullCheck = new Block(context)", "fixed": "     public static ByteCodeNode handleNullValue(CompilerContext context,\n             LabelNode label,\n             Class<?> returnType,\n            List<Class<?>> stackArgsToPop,\n             boolean clearNullFlag)\n     {\n         Block nullCheck = new Block(context)", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d7bdd87355d4c5b9d3145210eb25e7695decb9f9", "projectName": "alibaba.fastjson", "bugType": "Change Identifier Used", "problem": "         boolean isDoubleA = isDouble(clazzA);\n         boolean isDoubleB = isDouble(clazzB);\n        if ((isDoubleA && isDoubleB) || (isDoubleA && isIntA) || (isDoubleB && isIntA)) {\n             return a.doubleValue() == b.doubleValue();\n         }", "fixed": "         boolean isDoubleA = isDouble(clazzA);\n         boolean isDoubleB = isDouble(clazzB);\n        if ((isDoubleA && isDoubleB) || (isDoubleA && isIntB) || (isDoubleB && isIntA)) {\n             return a.doubleValue() == b.doubleValue();\n         }", "sourceBeforeFix": "isDoubleA && isIntA", "sourceAfterFix": "isDoubleA && isIntB"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7a7748e824e86bf5b7bdbfee026288e48913e2bc", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         private void assertInFlightInvocationsWereNotGrowing() {\n             assertTrue(\"There are no invocations to be observed!\", maxInvocationCountObserved > 0);\n            long maximumTolerableInvocationCount = (long) (maxInvocationCountObservedDuringWarmup * 1.2);\n             assertTrue(\"Apparently number of in-flight invocations is growing.\"\n                     + \" Max. number of in-flight invocation during first fifth of test duration: \"\n                     + maxInvocationCountObservedDuringWarmup", "fixed": "         private void assertInFlightInvocationsWereNotGrowing() {\n             assertTrue(\"There are no invocations to be observed!\", maxInvocationCountObserved > 0);\n            long maximumTolerableInvocationCount = (long) (maxInvocationCountObservedDuringWarmup * 2);\n             assertTrue(\"Apparently number of in-flight invocations is growing.\"\n                     + \" Max. number of in-flight invocation during first fifth of test duration: \"\n                     + maxInvocationCountObservedDuringWarmup", "sourceBeforeFix": "maxInvocationCountObservedDuringWarmup * 1.2", "sourceAfterFix": "maxInvocationCountObservedDuringWarmup * 2"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a421ca3133ddf727a147e87455a5511444d8d4bb", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "             if (interfaceMethod.getModifiers().contains(Modifier.ABSTRACT)) {\n               ExecutableType methodType = Elements2.getExecutableElementAsMemberOf(\n                   types, interfaceMethod, implementingType);\n              implemetationMethodDescriptors.add(new ImplemetationMethodDescriptor.Builder()\n                   .name(interfaceMethod.getSimpleName().toString())\n                   .returnType(getAnnotatedType(element).getQualifiedName().toString())\n                   .publicMethod()", "fixed": "             if (interfaceMethod.getModifiers().contains(Modifier.ABSTRACT)) {\n               ExecutableType methodType = Elements2.getExecutableElementAsMemberOf(\n                   types, interfaceMethod, implementingType);\n              implementationMethodDescriptors.add(new ImplementationMethodDescriptor.Builder()\n                   .name(interfaceMethod.getSimpleName().toString())\n                   .returnType(getAnnotatedType(element).getQualifiedName().toString())\n                   .publicMethod()", "sourceBeforeFix": "ImmutableSet.Builder<ImplemetationMethodDescriptor>", "sourceAfterFix": "ImmutableSet.Builder<ImplementationMethodDescriptor>"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @Override\n     protected void doPost(HttpServletRequest req,\n                           HttpServletResponse resp) throws ServletException, IOException {\n        final Task task = tasks.get(req.getServletPath());\n         if (task != null) {\n             try {\n                 resp.setContentType(MediaType.TEXT_PLAIN);", "fixed": "     @Override\n     protected void doPost(HttpServletRequest req,\n                           HttpServletResponse resp) throws ServletException, IOException {\n        final Task task = tasks.get(req.getPathInfo());\n         if (task != null) {\n             try {\n                 resp.setContentType(MediaType.TEXT_PLAIN);", "sourceBeforeFix": "req.getServletPath()", "sourceAfterFix": "req.getPathInfo()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3407a44922289dc4ddb3ff87687b8766affeaad9", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t\t}\n \t}\n\tprivate static class SpeedTestConsumer extends AbstractInvokable {\n \t\t@Override\n \t\tpublic void invoke() throws Exception {", "fixed": " \t\t}\n \t}\n\t\n\tpublic static class SpeedTestConsumer extends AbstractInvokable {\n \t\t@Override\n \t\tpublic void invoke() throws Exception {", "sourceBeforeFix": "10", "sourceAfterFix": "9"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8d2b29db30bafa130f414fcefec1f50fc0b1cd62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     @Override\n     public void testSendingAndReceivingMessages() throws Exception {\n         int expected = mediumQueueCount + messageCount;\n        setExpectedMessageCount(messageCount);\n         System.out.println(\"Sending \" + mediumQueueCount + \" messages first\");\n         sendLoop(0, mediumQueueCount);\n         System.out.println(\"Sent!\");\n        Thread.sleep(20000);", "fixed": "     @Override\n     public void testSendingAndReceivingMessages() throws Exception {\n         int expected = mediumQueueCount + messageCount;\n        setExpectedMessageCount(expected);\n         System.out.println(\"Sending \" + mediumQueueCount + \" messages first\");\n         sendLoop(0, mediumQueueCount);\n         System.out.println(\"Sent!\");\n        Thread.sleep(2000);", "sourceBeforeFix": "setExpectedMessageCount(messageCount)", "sourceAfterFix": "setExpectedMessageCount(expected)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Error_Response_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Error_Response_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xff", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastSedaEndpointBuilder\n             extends\n                 AdvancedHazelcastSedaEndpointConsumerBuilder, AdvancedHazelcastSedaEndpointProducerBuilder {\n         default HazelcastSedaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastSedaEndpointBuilder\n             extends\n                 AdvancedHazelcastSedaEndpointConsumerBuilder, AdvancedHazelcastSedaEndpointProducerBuilder {\n         default HazelcastSedaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "26f1133593498a87216f0dd4954ff7c07313b740", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    * Expects the JS to generate one bad-read error.\n    */\n   private void assertRedeclare(String js) {\n    testWarning(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n   /**", "fixed": "    * Expects the JS to generate one bad-read error.\n    */\n   private void assertRedeclare(String js) {\n    testError(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n   /**", "sourceBeforeFix": "testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)", "sourceAfterFix": "testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"To test special tags\", notes = \"To test special tags\", tags={ \"$another-fake?\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testSpecialTags(@Valid Client body);\n }", "fixed": "     @ApiOperation(value = \"To test special tags\", notes = \"To test special tags\", tags={ \"$another-fake?\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testSpecialTags(@Valid Client body) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
