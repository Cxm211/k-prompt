{"fixCommitSHA1": "72638160b5b9eac20db8abf0fffc1b2c206ea051", "projectName": "apache.flink", "bugType": "Same Function Swap Args", "problem": " \t\t\t\t\t\tcloseable.close();\n \t\t\t\t\t}\n \t\t\t\t} catch (Exception e) {\n\t\t\t\t\tcollectedExceptions = ExceptionUtils.firstOrSuppressed(collectedExceptions, e);\n \t\t\t\t}\n \t\t\t}", "fixed": " \t\t\t\t\t\tcloseable.close();\n \t\t\t\t\t}\n \t\t\t\t} catch (Exception e) {\n\t\t\t\t\tcollectedExceptions = ExceptionUtils.firstOrSuppressed(e, collectedExceptions);\n \t\t\t\t}\n \t\t\t}", "sourceBeforeFix": "ExceptionUtils.firstOrSuppressed(collectedExceptions,e)", "sourceAfterFix": "ExceptionUtils.firstOrSuppressed(e,collectedExceptions)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "80b65af84df3d54ebb4e4a4abe52c6b1fdc32b64", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     mAsyncPersistHandler = AsyncPersistHandler.Factory.create(new FileSystemMasterView(this));\n     mPermissionChecker = new PermissionChecker(mInodeTree);\n    registry.add(DefaultFileSystemMaster.class, this);\n     Metrics.registerGauges(this);\n   }", "fixed": "     mAsyncPersistHandler = AsyncPersistHandler.Factory.create(new FileSystemMasterView(this));\n     mPermissionChecker = new PermissionChecker(mInodeTree);\n    registry.add(FileSystemMaster.class, this);\n     Metrics.registerGauges(this);\n   }", "sourceBeforeFix": "DefaultFileSystemMaster.class", "sourceAfterFix": "FileSystemMaster.class"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface LuceneEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedLuceneEndpointBuilder advanced() {\n             return (AdvancedLuceneEndpointBuilder) this;\n         }", "fixed": "     \n    public interface LuceneEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedLuceneEndpointBuilder advanced() {\n             return (AdvancedLuceneEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "117c698c59a011648c50e261ff5b555e3ee236f8", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "             break;\n         }\n       } else {\n        log.error(\"Metric=[%s] has no StatsD type mapping\", statsDMetric);\n       }\n     }\n   }", "fixed": "             break;\n         }\n       } else {\n        log.debug(\"Metric=[%s] has no StatsD type mapping\", statsDMetric);\n       }\n     }\n   }", "sourceBeforeFix": "log.error(\"Metric=[%s] has no StatsD type mapping\",statsDMetric)", "sourceAfterFix": "log.debug(\"Metric=[%s] has no StatsD type mapping\",statsDMetric)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CoAPEndpointBuilder\n             extends\n                 CoAPEndpointConsumerBuilder, CoAPEndpointProducerBuilder {\n         default AdvancedCoAPEndpointBuilder advanced() {", "fixed": "     \n    public interface CoAPEndpointBuilder\n             extends\n                 CoAPEndpointConsumerBuilder, CoAPEndpointProducerBuilder {\n         default AdvancedCoAPEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),args.rest())"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTextureEXT(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "fixed": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTexture(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeOutEdge(Object edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> successors = getReference(successorsReference);\n     if (successors != null) {", "fixed": "   }\n   @Override\n  public N removeOutEdge(E edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> successors = getReference(successorsReference);\n     if (successors != null) {", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tprivate NSString convertKey (String key) {\r\n\t\treturn NSString.stringWithString(key);\r\n \t}\r\n \t@Override\r", "fixed": " \t}\r\n \tprivate NSString convertKey (String key) {\r\n\t\treturn NSString.alloc().initWithString(key);\r\n \t}\r\n \t@Override\r", "sourceBeforeFix": "pool.dealloc()", "sourceAfterFix": "pool.drain()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b7dfbc0a93d9a7135a1bbb1cc32fd715b2091eae", "projectName": "alibaba.druid", "bugType": "Change Identifier Used", "problem": "         value.setTestWhileIdle(this.isTestWhileIdle());\n         value.setDefaultAutoCommit(this.isDefaultAutoCommit());\n        value.setDefaultReadOnly(this.isDefaultAutoCommit());\n         value.setDefaultTransactionIsolation(this.getDefaultTransactionIsolation());\n         value.setLogicConnectErrorCount(connectErrorCount.getAndSet(0));", "fixed": "         value.setTestWhileIdle(this.isTestWhileIdle());\n         value.setDefaultAutoCommit(this.isDefaultAutoCommit());\n        value.setDefaultReadOnly(this.getDefaultReadOnly());\n         value.setDefaultTransactionIsolation(this.getDefaultTransactionIsolation());\n         value.setLogicConnectErrorCount(connectErrorCount.getAndSet(0));", "sourceBeforeFix": "this.isDefaultAutoCommit()", "sourceAfterFix": "this.getDefaultReadOnly()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "fixed": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "40e6bbe55f7141bd66a52261e108a1f3b575ca6f", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             } else {\n                 result = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             }\n             onPutIfAbsent(key, value, expiryPolicy, source, disableWriteThrough,", "fixed": "             } else {\n                 result = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onPutIfAbsent(key, value, expiryPolicy, source, disableWriteThrough,", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "27212f298ec3ee50204e5169f61ba48702346450", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       \"Redeclared variable: {0}\");\n   static final DiagnosticType AMBIGUOUS_FUNCTION_DECL =\n    DiagnosticType.disabled(\"AMBIGUOUS_FUNCTION_DECL\",\n         \"Ambiguous use of a named function: {0}.\");\n   static final DiagnosticType EARLY_REFERENCE_ERROR = DiagnosticType.error(", "fixed": "       \"Redeclared variable: {0}\");\n   static final DiagnosticType AMBIGUOUS_FUNCTION_DECL =\n    DiagnosticType.error(\"AMBIGUOUS_FUNCTION_DECL\",\n         \"Ambiguous use of a named function: {0}.\");\n   static final DiagnosticType EARLY_REFERENCE_ERROR = DiagnosticType.error(", "sourceBeforeFix": "DiagnosticType.disabled(\"AMBIGUOUS_FUNCTION_DECL\",\"Ambiguous use of a named function: {0}.\")", "sourceAfterFix": "DiagnosticType.error(\"AMBIGUOUS_FUNCTION_DECL\",\"Ambiguous use of a named function: {0}.\")"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n \t/**\n \t * Get a listing or important variables used in openmrs", "fixed": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t/**\n \t * Get a listing or important variables used in openmrs", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "         errors.add(formatDetailedMessage(message, sourceName, line));\n     }\n    private String formatDetailedMessage(\n         String message, String sourceName, int lineNumber) {\n       String details = message;\n       if (sourceName == null || lineNumber <= 0) {", "fixed": "         errors.add(formatDetailedMessage(message, sourceName, line));\n     }\n    private static String formatDetailedMessage(\n         String message, String sourceName, int lineNumber) {\n       String details = message;\n       if (sourceName == null || lineNumber <= 0) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "1356e1616848043c79acf8864e00d7787d57e6a3", "projectName": "alibaba.druid", "bugType": "Change Modifier", "problem": "     private DruidConnectionHolder[]          keepAliveConnections;\n    private ScheduledFuture<?>               destroySchedulerFuture;\n     private DestroyTask                      destroyTask;\n    private Future<?>                        createSchedulerFuture;\n     private CreateConnectionThread           createConnectionThread;\n     private DestroyConnectionThread          destroyConnectionThread;", "fixed": "     private DruidConnectionHolder[]          keepAliveConnections;\n    private volatile ScheduledFuture<?>      destroySchedulerFuture;\n     private DestroyTask                      destroyTask;\n    private volatile Future<?>               createSchedulerFuture;\n     private CreateConnectionThread           createConnectionThread;\n     private DestroyConnectionThread          destroyConnectionThread;", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "e1d74627f527eb147f041030d9b853190a5c1046", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": "  * @author Phillip Webb\n  * @author Andy Wilkinson\n  * @see AutoConfigureWebMvc\n  */\n @Configuration\n @ConditionalOnWebApplication\n @AutoConfigureAfter(WebMvcAutoConfiguration.class)\n @EnableConfigurationProperties\nclass MockMvcAutoConfiguration {\n \tprivate final WebApplicationContext context;", "fixed": "  * @author Phillip Webb\n  * @author Andy Wilkinson\n  * @see AutoConfigureWebMvc\n * @since 1.4.0\n  */\n @Configuration\n @ConditionalOnWebApplication\n @AutoConfigureAfter(WebMvcAutoConfiguration.class)\n @EnableConfigurationProperties\npublic class MockMvcAutoConfiguration {\n \tprivate final WebApplicationContext context;", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
