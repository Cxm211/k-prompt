{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 item ) { if ( item == null ) { throw new java.lang.NullPointerException ( ) ; } if ( ( n ) == ( VAR_1 . length ) ) { METHOD_2 ( ( INT_1 * ( VAR_1 . length ) ) ) ; } VAR_1 [ ( ( VAR_2 ) ++ ) ] = item ; ( n ) ++ ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 item ) { if ( item == null ) { throw new java.lang.NullPointerException ( ) ; } if ( ( VAR_2 ) == ( VAR_1 . length ) ) { METHOD_2 ( ( INT_1 * ( VAR_1 . length ) ) ) ; } VAR_1 [ ( ( VAR_2 ) ++ ) ] = item ; ( n ) ++ ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; TYPE_1 result = VAR_2 . METHOD_3 ( VAR_1 ) ; while ( result . METHOD_4 ( ) ) { java.lang.System.out.println ( ( STRING_1 + ( result . getString ( \"name\" ) ) ) ) ; } result . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_3 . METHOD_5 ( ) ; return result ; } catch ( TYPE_3 VAR_4 ) { VAR_4 . METHOD_6 ( ) ; } return null ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; TYPE_1 result = VAR_2 . METHOD_3 ( VAR_1 ) ; result . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_3 . METHOD_5 ( ) ; return result ; } catch ( TYPE_3 VAR_4 ) { VAR_4 . METHOD_6 ( ) ; } return null ; }\n"}
{"problem": "public static int METHOD_1 ( byte [ ] VAR_1 , int offset ) { int VAR_2 = VAR_1 [ offset ] ; int VAR_3 = VAR_1 [ ( offset + 1 ) ] ; if ( VAR_2 < 0 ) VAR_2 += INT_1 ; if ( VAR_3 < 0 ) VAR_2 += INT_1 ; return ( VAR_2 < < INT_2 ) + ( VAR_3 < < 0 ) ; }\n", "fixed": "public static int METHOD_1 ( byte [ ] VAR_1 , int offset ) { int VAR_2 = VAR_1 [ offset ] ; int VAR_3 = VAR_1 [ ( offset + 1 ) ] ; if ( VAR_2 < 0 ) VAR_2 += INT_1 ; if ( VAR_3 < 0 ) VAR_3 += INT_1 ; return ( VAR_2 < < INT_2 ) + ( VAR_3 < < 0 ) ; }\n"}
