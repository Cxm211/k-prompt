{"project": "Closure", "bugId": 120, "problem": " boolean isAssignedOnceInLifetime() {\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n           break;\n         } else if (block.isLoop) {\n           return false;", "fixed": " boolean isAssignedOnceInLifetime() {\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n          if (ref.getSymbol().getScope() != ref.scope) {\n            return false;\n          }\n           break;\n         } else if (block.isLoop) {\n           return false;", "observations": "", "repairActions": ["condBranIfAdd", "mcAdd", "retBranchAdd"], "repairPatterns": ["condBlockRetAdd"]}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "64bc69ef4c547771f44f6b6b103cda7be2f0922b", "projectName": "dropwizard.metrics", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic SortedMap<String, Histogram> getHistograms(MetricFilter filter) {\n\t\treturn adaptMetrics(Histogram.class, reg.getCounters(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Meter> getMeters() {", "fixed": " \t}\n \tpublic SortedMap<String, Histogram> getHistograms(MetricFilter filter) {\n\t\treturn adaptMetrics(Histogram.class, reg.getHistograms(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Meter> getMeters() {", "sourceBeforeFix": "reg.getCounters(transformFilter(filter))", "sourceAfterFix": "reg.getMeters(transformFilter(filter))"}
{"problem": "public int METHOD_1 ( android.content.Intent intent , int VAR_1 , int VAR_2 ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( STRING_3 , ( ( ( STRING_4 + VAR_2 ) + STRING_5 ) + intent ) ) ; TYPE_1 . METHOD_2 ( STRING_6 , STRING_7 ) ; return VAR_3 ; }\n", "fixed": "public int METHOD_1 ( android.content.Intent intent , int VAR_1 , int VAR_2 ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_4 ( ) ; METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( STRING_3 , ( ( ( STRING_4 + VAR_2 ) + STRING_5 ) + intent ) ) ; TYPE_1 . METHOD_2 ( STRING_6 , STRING_7 ) ; return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { if ( VAR_2 . isEmpty ( ) ) { VAR_1 . add ( STRING_1 ) ; } else { for ( java.lang.String name : VAR_2 ) { if ( TYPE_1 . METHOD_2 ( name ) ) { VAR_1 . add ( ( ( STRING_2 + name ) + STRING_3 ) ) ; } } } }\n", "fixed": "public void METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { if ( VAR_2 . isEmpty ( ) ) { VAR_1 . add ( STRING_1 ) ; } else { for ( java.lang.String name : VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( name ) ) ) { VAR_1 . add ( ( ( STRING_2 + name ) + STRING_3 ) ) ; } } } }\n"}
