{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "fixed": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(timeout)", "sourceAfterFix": "Long.parseLong(timeout)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param parameterDefAst parameter definition\n      * @return true if it is a multiple type catch, false otherwise\n      */\n    private boolean isMultipleTypeCatch(DetailAST parameterDefAst) {\n         final DetailAST typeAst = parameterDefAst.findFirstToken(TokenTypes.TYPE);\n         return typeAst.getFirstChild().getType() == TokenTypes.BOR;\n     }", "fixed": "      * @param parameterDefAst parameter definition\n      * @return true if it is a multiple type catch, false otherwise\n      */\n    private static boolean isMultipleTypeCatch(DetailAST parameterDefAst) {\n         final DetailAST typeAst = parameterDefAst.findFirstToken(TokenTypes.TYPE);\n         return typeAst.getFirstChild().getType() == TokenTypes.BOR;\n     }", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(50);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "fixed": "                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnablednHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "fixed": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a7fa6dab83a23d885554eff6786e3eee69fb795a", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 .toString();\n     }\n    public Set<String> getOnlyColumnAsSet()\n     {\n         checkState(types.size() == 1, \"result set must have exactly one column\");\n         return rows.stream()\n                .map(row -> (String) row.getField(0))\n                 .collect(toImmutableSet());\n     }", "fixed": "                 .toString();\n     }\n    public Set<Object> getOnlyColumnAsSet()\n     {\n         checkState(types.size() == 1, \"result set must have exactly one column\");\n         return rows.stream()\n                .map(row -> row.getField(0))\n                 .collect(toImmutableSet());\n     }", "sourceBeforeFix": "Set<String>", "sourceAfterFix": "Set<Object>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResponseClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader\")\n  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "   }\n   @GwtIncompatible(\"Reader\")\n  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\trpcEndpoint.shutDown();\n\t\tCompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\ttry {\n \t\t\tterminationFuture.get();", "fixed": " \t\trpcEndpoint.shutDown();\n\t\tCompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\ttry {\n \t\t\tterminationFuture.get();", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Olingo2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOlingo2EndpointProducerBuilder advanced() {", "fixed": "     \n    public interface Olingo2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOlingo2EndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "eba20b3dcc401fb4c873afc5948cc92fbcb00097", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\tint size = s.count();\n \t\t\tfloat[] ret = new float[size];\n \t\t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\t\tret[i] = ((Number) s.first()).intValue();\n \t\t\treturn ret;\n \t\t\t}\n \t}", "fixed": " \t\t\tint size = s.count();\n \t\t\tfloat[] ret = new float[size];\n \t\t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\t\tret[i] = ((Number) s.first()).floatValue();\n \t\t\treturn ret;\n \t\t\t}\n \t}", "sourceBeforeFix": "((Number)s.first()).intValue()", "sourceAfterFix": "((Number)s.first()).longValue()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSjmsEndpointBuilder\n             extends\n                 AdvancedSjmsEndpointConsumerBuilder, AdvancedSjmsEndpointProducerBuilder {\n         default SjmsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSjmsEndpointBuilder\n             extends\n                 AdvancedSjmsEndpointConsumerBuilder, AdvancedSjmsEndpointProducerBuilder {\n         default SjmsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a13c4373a5e57d322b143516b493e84f14909fec", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(15, tokens.size());\n   }\n   @Test", "fixed": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(13, tokens.size());\n   }\n   @Test", "sourceBeforeFix": "assertEquals(12,tokens.size())", "sourceAfterFix": "assertEquals(9,tokens.size())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "9c715f798811f010cdeb0a30a7a35c1d1acb56c9", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         Assert.assertEquals(\"mock:foo?retainFirst=1\", details.get(6).getEndpointUri());\n         Assert.assertEquals(\"45\", details.get(6).getLineNumber());\n         Assert.assertEquals(\"46\", details.get(6).getLineNumberEnd());\n        Assert.assertEquals(1456, details.get(6).getAbsolutePosition());\n         Assert.assertEquals(17, details.get(6).getLinePosition());\n         List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);", "fixed": "         Assert.assertEquals(\"mock:foo?retainFirst=1\", details.get(6).getEndpointUri());\n         Assert.assertEquals(\"45\", details.get(6).getLineNumber());\n         Assert.assertEquals(\"46\", details.get(6).getLineNumberEnd());\n        Assert.assertEquals(1455, details.get(6).getAbsolutePosition());\n         Assert.assertEquals(17, details.get(6).getLinePosition());\n         List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);", "sourceBeforeFix": "Assert.assertEquals(1456,details.get(6).getAbsolutePosition())", "sourceAfterFix": "Assert.assertEquals(1455,details.get(6).getAbsolutePosition())"}
{"fixCommitSHA1": "056486a1b81e9648a6d3dc795e7e2c6976f8388c", "projectName": "apache.flink", "bugType": "Same Function Swap Args", "problem": " \t\tfinal int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\tbucketerContext.update(context.timestamp(), currentProcessingTime, context.currentWatermark());\n \t\tfinal String bucketId = bucketer.getBucketId(value, bucketerContext);", "fixed": " \t\tfinal int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\tbucketerContext.update(context.timestamp(), context.currentWatermark(), currentProcessingTime);\n \t\tfinal String bucketId = bucketer.getBucketId(value, bucketerContext);", "sourceBeforeFix": "bucketerContext.update(context.timestamp(),currentProcessingTime,context.currentWatermark())", "sourceAfterFix": "bucketerContext.update(context.timestamp(),context.currentWatermark(),currentProcessingTime)"}
{"fixCommitSHA1": "aafd3788df73bd0d21c9411014a7cbda0a5bbd17", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   };\n   \n  private final PassFactory removeAbstractMethods =\n      new PassFactory(\"removeAbstractMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new GoogleCodeRemoval(compiler);\n     }\n   };", "fixed": "   };\n   \n  private final PassFactory closureCodeRemoval =\n      new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new ClosureCodeRemoval(compiler);\n     }\n   };", "sourceBeforeFix": "new GoogleCodeRemoval(compiler)", "sourceAfterFix": "new ClosureCodeRemoval(compiler)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ab45cc12ff4e9b8e62aa1b3776367df3b1020b93", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "         @Override\n         public Number getMaximumValue() {\n             if (maximum == null) {\n                AbstractRanking.refreshMinMax(this, graph);\n             }\n             return maximum;\n         }", "fixed": "         @Override\n         public Number getMaximumValue() {\n             if (maximum == null) {\n                DynamicAttributeRanking.refreshMinMax(this, graph);\n             }\n             return maximum;\n         }", "sourceBeforeFix": "AbstractRanking.refreshMinMax(this,graph)", "sourceAfterFix": "DynamicAttributeRanking.refreshMinMax(this,graph)"}
{"fixCommitSHA1": "f73c4f24ee36c671562840e941c914f79566cf97", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                     if (index == 0x7f) {\n                         state = READ_LITERAL_HEADER_NAME_LENGTH;\n                     } else {\n                        if (nameLength > maxHeadersLength - headersLength) {\n                             maxHeaderSizeExceeded();\n                         }\n                         nameLength = index;", "fixed": "                     if (index == 0x7f) {\n                         state = READ_LITERAL_HEADER_NAME_LENGTH;\n                     } else {\n                        if (index > maxHeadersLength - headersLength) {\n                             maxHeaderSizeExceeded();\n                         }\n                         nameLength = index;", "sourceBeforeFix": "nameLength > maxHeadersLength - headersLength", "sourceAfterFix": "index > maxHeadersLength - headersLength"}
{"fixCommitSHA1": "6618cef776cf1c9ce67ff8ee461412110ca5ada7", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\t\t\tqueryServiceAddressesFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<String> queryServiceAddresses, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.warn(\"Requesting paths for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tfor (String queryServiceAddress : queryServiceAddresses) {\n \t\t\t\t\t\t\t\tretrieveAndQueryMetrics(queryServiceAddress);", "fixed": " \t\t\t\tqueryServiceAddressesFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<String> queryServiceAddresses, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.debug(\"Requesting paths for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tfor (String queryServiceAddress : queryServiceAddresses) {\n \t\t\t\t\t\t\t\tretrieveAndQueryMetrics(queryServiceAddress);", "sourceBeforeFix": "LOG.warn(\"Exception while fetching metrics.\",e)", "sourceAfterFix": "LOG.debug(\"Exception while fetching metrics.\",e)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0da6b95ae7af2def88f785b72f886dd418a89d43", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "  */\n public final class NeverSuppress implements MatchSuppressor {\n     \n    public static final MatchSuppressor INSTANCE = new NeverSuppress();\n     \n     private NeverSuppress() {", "fixed": "  */\n public final class NeverSuppress implements MatchSuppressor {\n     \n    static final MatchSuppressor INSTANCE = new NeverSuppress();\n     \n     private NeverSuppress() {", "sourceBeforeFix": "25", "sourceAfterFix": "24"}
{"fixCommitSHA1": "00d52565fc7047090c947eb7d34ca0392cf47002", "projectName": "openmrs.openmrs-core", "bugType": "Change Unary Operator\t", "problem": "\t\tmodel.put(\"showDisclaimer\", Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser()));\r\n \t}\r\n }\r", "fixed": "\t\tmodel.put(\"showDisclaimer\", !Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser()));\r\n \t}\r\n }\r", "sourceBeforeFix": "Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())", "sourceAfterFix": "!Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())"}
{"fixCommitSHA1": "f5309e8856186f5105e0bfcefda1273330f36ac0", "projectName": "jersey.jersey", "bugType": "Same Function Less Args", "problem": " \t\tClientConfig jerseyConfig = new ClientConfig();\n \t\tClient client = ClientBuilder.newClient(jerseyConfig);\n\t\tclient = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_PASS, 1));\n \t\tWebTarget resource = client.target(getBaseUri()).path(\"auth-digest\");", "fixed": " \t\tClientConfig jerseyConfig = new ClientConfig();\n \t\tClient client = ClientBuilder.newClient(jerseyConfig);\n\t\tclient = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_PASS));\n \t\tWebTarget resource = client.target(getBaseUri()).path(\"auth-digest\");", "sourceBeforeFix": "new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS,1)", "sourceAfterFix": "new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS)"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tthis.container.stop();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nGetMethod get2 = new GetMethod(\"http:\n \t\tassertThat(client.executeMethod(get2), equalTo(200));", "fixed": " \t\tthis.container.stop();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nGetMethod get2 = new GetMethod(\"http:\n \t\tassertThat(client.executeMethod(get2), equalTo(200));", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "dbd9f9a45041633af588976b833f714e82f3a401", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "    *\n    * @return The id of the block's locker\n    */\n  int getLockId() {\n     return mLockId;\n   }", "fixed": "    *\n    * @return The id of the block's locker\n    */\n  public int getLockId() {\n     return mLockId;\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d31a409d8f87800c523f1cc4f7862f716cac7313", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                 List<ChannelSftp.LsEntry> files = operations.listFiles(file.getParent());\n                 for (ChannelSftp.LsEntry f : files) {\n                     if (f.getFilename().equals(file.getFileName())) {\n                        newLastModified = f.getAttrs().getATime();\n                         newLength = f.getAttrs().getSize();\n                     }\n                 }", "fixed": "                 List<ChannelSftp.LsEntry> files = operations.listFiles(file.getParent());\n                 for (ChannelSftp.LsEntry f : files) {\n                     if (f.getFilename().equals(file.getFileName())) {\n                        newLastModified = f.getAttrs().getMTime();\n                         newLength = f.getAttrs().getSize();\n                     }\n                 }", "sourceBeforeFix": "f.getAttrs().getATime()", "sourceAfterFix": "f.getAttrs().getMTime()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DataSetTestEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDataSetTestEndpointBuilder advanced() {", "fixed": "     \n    public interface DataSetTestEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDataSetTestEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "298964dc444ecebcd230db6f6547bf62c9019a95", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     }\n     public void testExchangeFailed() throws Exception {\n        getMockEndpoint(\"mock:event\").expectedMessageCount(5);\n         try {\n             template.sendBody(\"direct:fail\", \"Hello World\");", "fixed": "     }\n     public void testExchangeFailed() throws Exception {\n        getMockEndpoint(\"mock:event\").expectedMessageCount(6);\n         try {\n             template.sendBody(\"direct:fail\", \"Hello World\");", "sourceBeforeFix": "getMockEndpoint(\"mock:event\").expectedMessageCount(5)", "sourceAfterFix": "getMockEndpoint(\"mock:event\").expectedMessageCount(6)"}
{"fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }", "fixed": "                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }", "sourceBeforeFix": "invocation.logger.warning(\"'is-executing': \" + executing + \" -> \"+ invocation)", "sourceAfterFix": "invocation.logger.finest(\"'is-executing': \" + executing + \" -> \"+ invocation)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "fixed": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "sourceBeforeFix": "factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generatePositionEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "fixed": "                 .retInt();\n     }\n    private static void generatePositionEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "15f26883515231610c753d25e224c5e26cb4d641", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "                 xmlReader = xmlReaderPool.createXMLReader();\n             }\n         } catch (Exception ex) {\n            LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\", ex);\n         }\n         return new SAXSource(xmlReader, inputSource);\n     }", "fixed": "                 xmlReader = xmlReaderPool.createXMLReader();\n             }\n         } catch (Exception ex) {\n            LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\", ex.getMessage(), ex);\n         }\n         return new SAXSource(xmlReader, inputSource);\n     }", "sourceBeforeFix": "LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\",ex)", "sourceAfterFix": "LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\",ex.getMessage(),ex)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKubernetesServicesEndpointBuilder\n             extends\n                 AdvancedKubernetesServicesEndpointConsumerBuilder, AdvancedKubernetesServicesEndpointProducerBuilder {\n         default KubernetesServicesEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKubernetesServicesEndpointBuilder\n             extends\n                 AdvancedKubernetesServicesEndpointConsumerBuilder, AdvancedKubernetesServicesEndpointProducerBuilder {\n         default KubernetesServicesEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "fixed": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "8b8f4af8d8c097c1bdc34ad2660521c655341f52", "projectName": "hazelcast.hazelcast", "bugType": "Change Boolean Literal", "problem": "     }\n     public boolean returnsResponse() {\n        return true;\n     }\n     public Object getResponse() {", "fixed": "     }\n     public boolean returnsResponse() {\n        return false;\n     }\n     public Object getResponse() {", "sourceBeforeFix": "return true; ", "sourceAfterFix": "return false; "}
{"fixCommitSHA1": "996cadb3e79b248d2f2b3e584a1ea9e9f77fc1c2", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic float getPrefWidth () {\n\t\treturn Math.max(super.getPrefWidth(), titleLabel.getPrefWidth() + getPadLeft() + getPadRight());\n \t}\n \tpublic Table getTitleTable () {", "fixed": " \t}\n \tpublic float getPrefWidth () {\n\t\treturn Math.max(super.getPrefWidth(), titleTable.getPrefWidth() + getPadLeft() + getPadRight());\n \t}\n \tpublic Table getTitleTable () {", "sourceBeforeFix": "titleLabel.getPrefWidth()", "sourceAfterFix": "titleTable.getPrefWidth()"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "fixed": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "sourceBeforeFix": "logger.debug(\"MyQ binding received command '{}' for item '{}'\",command,itemName)", "sourceAfterFix": "logger.trace(\"MyQ binding received command '{}' for item '{}'\",command,itemName)"}
{"fixCommitSHA1": "e04a3bf7703544cf5012eb2f55626af8e0a2cb8c", "projectName": "apache.flink", "bugType": "Delete Throws Exception", "problem": " \t\t}\n \t\t@Override\n\t\tpublic List<Integer> snapshotState(long checkpointId, long timestamp) throws Exception {\n \t\t\treturn Collections.singletonList(saveRecordCnt);\n \t\t}\n \t\t@Override\n\t\tpublic void restoreState(List<Integer> state) throws Exception {\n \t\t\tfor (Integer i : state) {\n \t\t\t\tsaveRecordCnt += i;\n \t\t\t}", "fixed": " \t\t}\n \t\t@Override\n\t\tpublic List<Integer> snapshotState(long checkpointId, long timestamp) {\n \t\t\treturn Collections.singletonList(saveRecordCnt);\n \t\t}\n \t\t@Override\n\t\tpublic void restoreState(List<Integer> state) {\n \t\t\tfor (Integer i : state) {\n \t\t\t\tsaveRecordCnt += i;\n \t\t\t}", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "49203981ee544f1443c40991cc2adcf319345562", "projectName": "thinkaurelius.titan", "bugType": "Same Function More Args", "problem": "     public void testGraphTestSuite() throws Exception {\nthis.stopWatch();\n        doTestSuite(new GraphTestSuite(this), ImmutableSet.of(\"testStringRepresentation\"));\n         printTestPerformance(\"GraphTestSuite\", this.stopWatch());\n     }", "fixed": "     public void testGraphTestSuite() throws Exception {\nthis.stopWatch();\n        doTestSuite(new GraphTestSuite(this), ImmutableSet.of(\"testStringRepresentation\",\"testDataTypeValidationOnProperties\"));\n         printTestPerformance(\"GraphTestSuite\", this.stopWatch());\n     }", "sourceBeforeFix": "ImmutableSet.of(\"testStringRepresentation\")", "sourceAfterFix": "ImmutableSet.of(\"testStringRepresentation\",\"testDataTypeValidationOnProperties\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4af3d1f01144d5a959934641e66abfcb94644b0a", "projectName": "hazelcast.hazelcast", "bugType": "Delete Throws Exception", "problem": "     }\n     @Test\n    public void smoke_near_cache_population() throws Exception {\n         int cacheSize = 1000;", "fixed": "     }\n     @Test\n    public void smoke_near_cache_population() {\n         int cacheSize = 1000;", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9a861785b36e0b1132737bd8fa1f7caac5a41c87", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "         Thread.sleep(5);\n         replicatedMap.put(key, \"value2\");\n         long lastUpdateTime2 = replicatedMap.getReplicatedMapStats().getLastUpdateTime();\n        assertTrue(lastUpdateTime2 > lastUpdateTime);\n     }\n     @Test", "fixed": "         Thread.sleep(5);\n         replicatedMap.put(key, \"value2\");\n         long lastUpdateTime2 = replicatedMap.getReplicatedMapStats().getLastUpdateTime();\n        assertTrue(lastUpdateTime2 >= lastUpdateTime);\n     }\n     @Test", "sourceBeforeFix": "lastUpdateTime2 > lastUpdateTime", "sourceAfterFix": "lastUpdateTime2 >= lastUpdateTime"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.error(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "fixed": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.warn(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "sourceBeforeFix": "LOG.error(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)", "sourceAfterFix": "LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "20d8ac67dc04e9e0c4484af769b156bcd75ef00b", "projectName": "alibaba.canal", "bugType": "Change Identifier Used", "problem": "     private SocketChannel channel;\r\n    public MysqlQueryExecutor(MysqlConnector connector){\r\n         if (!connector.isConnected()) {\r\n            throw new RuntimeException(\"should execute connector.connect() first\");\r\n         }\r\n         this.channel = connector.getChannel();\r", "fixed": "     private SocketChannel channel;\r\n    public MysqlQueryExecutor(MysqlConnector connector) throws IOException{\r\n         if (!connector.isConnected()) {\r\n            throw new IOException(\"should execute connector.connect() first\");\r\n         }\r\n         this.channel = connector.getChannel();\r", "sourceBeforeFix": "new RuntimeException(\"should execute connector.connect() first\")", "sourceAfterFix": "new IOException(\"should execute connector.connect() first\")"}
{"fixCommitSHA1": "64140b52a44ae7ea10721b22fe72c4eb32847a0e", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Numeric Literal", "problem": "         try {\nResponse response = c.prepareGet(\"http:\n             assertNotNull(response);\n            assertEquals(response.getStatusCode(), 301);\n         } finally {\n             c.close();\n         }", "fixed": "         try {\nResponse response = c.prepareGet(\"http:\n             assertNotNull(response);\n            assertEquals(response.getStatusCode(), 302);\n         } finally {\n             c.close();\n         }", "sourceBeforeFix": "assertEquals(response.getStatusCode(),301)", "sourceAfterFix": "assertEquals(response.getStatusCode(),302)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "fixed": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId);\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a035959767074c70b0946e55fa61fb79c4be3bb8", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "     protected void resolvePluggableExpression(ModelNode node) {\n         String expression = node.asString();\n         if (expression.length() > 3) {\n            expression = expression.substring(2, expression.length() -2);\n             if (vaultReader != null && vaultReader.isVaultFormat(expression)) {\n                 node.set(vaultReader.retrieveFromVault(expression));\n             }", "fixed": "     protected void resolvePluggableExpression(ModelNode node) {\n         String expression = node.asString();\n         if (expression.length() > 3) {\n            expression = expression.substring(2, expression.length() -1);\n             if (vaultReader != null && vaultReader.isVaultFormat(expression)) {\n                 node.set(vaultReader.retrieveFromVault(expression));\n             }", "sourceBeforeFix": "expression.length() - 2", "sourceAfterFix": "expression.length() - 1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "79073cd40c3b9a32d4509381c9d2763be42045ba", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "     c.setClass(HConstants.REGION_IMPL, regionClass, HRegion.class);\n    c.setLong(\"hbase.hregion.memstore.flush.size\", 100000);\n     c.set(HConstants.HBASE_REGION_SPLIT_POLICY_KEY, ConstantSizeRegionSplitPolicy.class.getName());\n     c.setInt(\"hbase.hstore.compaction.min\",1);", "fixed": "     c.setClass(HConstants.REGION_IMPL, regionClass, HRegion.class);\n    c.setLong(\"hbase.hregion.memstore.flush.size\", 25000);\n     c.set(HConstants.HBASE_REGION_SPLIT_POLICY_KEY, ConstantSizeRegionSplitPolicy.class.getName());\n     c.setInt(\"hbase.hstore.compaction.min\",1);", "sourceBeforeFix": "c.setLong(\"hbase.hregion.memstore.flush.size\",100000)", "sourceAfterFix": "c.setLong(\"hbase.hregion.memstore.flush.size\",25000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "bf71d079f373a5f8761acb186472f89259612b5d", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "                 binder,\n                 \"druid.indexer.task.chathandler.type\",\n                 Key.get(ChatHandlerProvider.class),\n                Key.get(NoopChatHandlerProvider.class)\n             );\n             final MapBinder<String, ChatHandlerProvider> handlerProviderBinder = PolyBind.optionBinder(\n                 binder, Key.get(ChatHandlerProvider.class)", "fixed": "                 binder,\n                 \"druid.indexer.task.chathandler.type\",\n                 Key.get(ChatHandlerProvider.class),\n                Key.get(ServiceAnnouncingChatHandlerProvider.class)\n             );\n             final MapBinder<String, ChatHandlerProvider> handlerProviderBinder = PolyBind.optionBinder(\n                 binder, Key.get(ChatHandlerProvider.class)", "sourceBeforeFix": "NoopChatHandlerProvider.class", "sourceAfterFix": "ServiceAnnouncingChatHandlerProvider.class"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "fixed": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "0397639dc6f21b1336674d1fe72c9b3b06578570", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         assertNotNull(resultMessage.getBody(SerializableResponseDto.class));\n         assertNotNull(resultMessage.getHeader(\"requestObject\", SerializableRequestDto.class));\n         assertEquals(Boolean.TRUE, resultMessage.getHeader(\"boolean\", Boolean.class));\n        assertEquals((Long) 123l, resultMessage.getHeader(\"long\", Long.class));\n         assertEquals((Double) 1.23, resultMessage.getHeader(\"double\", Double.class));\n         assertEquals(\"hello\", resultMessage.getHeader(\"string\", String.class));\n         assertNotNull(resultMessage.getHeader(\"responseHeader\", SerializableResponseDto.class));", "fixed": "         assertNotNull(resultMessage.getBody(SerializableResponseDto.class));\n         assertNotNull(resultMessage.getHeader(\"requestObject\", SerializableRequestDto.class));\n         assertEquals(Boolean.TRUE, resultMessage.getHeader(\"boolean\", Boolean.class));\n        assertEquals((Long) 123L, resultMessage.getHeader(\"long\", Long.class));\n         assertEquals((Double) 1.23, resultMessage.getHeader(\"double\", Double.class));\n         assertEquals(\"hello\", resultMessage.getHeader(\"string\", String.class));\n         assertNotNull(resultMessage.getHeader(\"responseHeader\", SerializableResponseDto.class));", "sourceBeforeFix": "(Long)123l", "sourceAfterFix": "(Long)123L"}
{"fixCommitSHA1": "5fc52fe9ff921cb414dd7ecb3313e519a5d6fbb8", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "             Map<String, Object> result = Maps.newHashMap();\n             result.put(\"id\", message.getId());\n             if (filtered)\n                result.put(\"fields\", message.getFormattedFields());\n             else\n                 result.put(\"fields\", message.getFields());", "fixed": "             Map<String, Object> result = Maps.newHashMap();\n             result.put(\"id\", message.getId());\n             if (filtered)\n                result.put(\"fields\", message.getFilteredFields());\n             else\n                 result.put(\"fields\", message.getFields());", "sourceBeforeFix": "message.getFormattedFields()", "sourceAfterFix": "message.getFilteredFields()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bb5d7708d8ddd7791d61b7a3f145cdbfbefa6fc3", "projectName": "apache.flink", "bugType": "More Specific If", "problem": " \t\ttry {\n\t\t\twhile ((strLine = br.readLine()) != null) {\n \t\t\t\tfinal Matcher m = pattern.matcher(strLine);\n \t\t\t\tif (!m.matches()) {", "fixed": " \t\ttry {\n\t\t\twhile ((strLine = br.readLine()) != null && !strLine.isEmpty()) {\n \t\t\t\tfinal Matcher m = pattern.matcher(strLine);\n \t\t\t\tif (!m.matches()) {", "sourceBeforeFix": "(strLine=br.readLine()) != null", "sourceAfterFix": "(strLine=br.readLine()) != null && !strLine.isEmpty()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGitHubEndpointBuilder\n             extends\n                 AdvancedGitHubEndpointConsumerBuilder, AdvancedGitHubEndpointProducerBuilder {\n         default GitHubEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGitHubEndpointBuilder\n             extends\n                 AdvancedGitHubEndpointConsumerBuilder, AdvancedGitHubEndpointProducerBuilder {\n         default GitHubEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "425403eeed99d409a1c49ad5243a3a0bd86ed66c", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "      \"minimizeExitPoints\",\n      \"removeUnreachableCode\");\n  static final List<String> CODE_MOTION_PASSES = ImmutableList.of(\n       Compiler.CROSS_MODULE_CODE_MOTION_NAME, Compiler.CROSS_MODULE_METHOD_MOTION_NAME);\n   static final int MAX_LOOPS = 100;", "fixed": "      \"minimizeExitPoints\",\n      \"removeUnreachableCode\");\n  static final ImmutableList<String> CODE_MOTION_PASSES =\n      ImmutableList.of(\n       Compiler.CROSS_MODULE_CODE_MOTION_NAME, Compiler.CROSS_MODULE_METHOD_MOTION_NAME);\n   static final int MAX_LOOPS = 100;", "sourceBeforeFix": "List<String>", "sourceAfterFix": "ImmutableList<String>"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fBodyGeneric,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "cef07858664c489675c5beff7bf9a8619a2f2eee", "projectName": "apache.camel", "bugType": "Change Binary Operator", "problem": "         answer.append(\" selfProcessingTime=\\\"\").append(routeSelfTime).append(\"\\\"\");\n         answer.append(\" exchangesInflight=\\\"\").append(getInflightExchanges()).append(\"\\\"\");\n         InFlightKey oldestInflightEntry = getOldestInflightEntry();\n        if (oldestInflightEntry != null) {\n             answer.append(\" oldestInflightExchangeId=\\\"\\\"\");\n             answer.append(\" oldestInflightDuration=\\\"\\\"\");\n         } else {", "fixed": "         answer.append(\" selfProcessingTime=\\\"\").append(routeSelfTime).append(\"\\\"\");\n         answer.append(\" exchangesInflight=\\\"\").append(getInflightExchanges()).append(\"\\\"\");\n         InFlightKey oldestInflightEntry = getOldestInflightEntry();\n        if (oldestInflightEntry == null) {\n             answer.append(\" oldestInflightExchangeId=\\\"\\\"\");\n             answer.append(\" oldestInflightDuration=\\\"\\\"\");\n         } else {", "sourceBeforeFix": "oldestInflightEntry != null", "sourceAfterFix": "oldestInflightEntry == null"}
{"fixCommitSHA1": "c32df371abcbee7ebbb77e6bf6a429d3f3f4134b", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + bytesToCopy) + \", maximum is \" + data.limit());\n         }\n         dst.put(tmpBuf);\n     }", "fixed": "             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + bytesToCopy) + \", maximum is \" + buffer.limit());\n         }\n         dst.put(tmpBuf);\n     }", "sourceBeforeFix": "data.limit()", "sourceAfterFix": "buffer.limit()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "756e47a05af9db14879e349f7bde1dfa64b83af8", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Less Args", "problem": "         LocalizedMessages collector = new LocalizedMessages();\n         emptyCheck.setMessages(collector);\n        emptyCheck.log(0, \"msgKey\", null);\n         LocalizedMessage[] messages = collector.getMessages();\n         Assert.assertTrue(messages.length == 1);", "fixed": "         LocalizedMessages collector = new LocalizedMessages();\n         emptyCheck.setMessages(collector);\n        emptyCheck.log(0, \"msgKey\");\n         LocalizedMessage[] messages = collector.getMessages();\n         Assert.assertTrue(messages.length == 1);", "sourceBeforeFix": "emptyCheck.log(0,\"msgKey\",null)", "sourceAfterFix": "emptyCheck.log(0,\"msgKey\")"}
{"fixCommitSHA1": "9d87dbad9f0c649c8244586cfea3ca25731da893", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   \n  abstract void throwInternalError(String msg, Exception cause);\n   /**\n    * Gets the current coding convention.", "fixed": "   \n  abstract void throwInternalError(String msg, Throwable cause);\n   /**\n    * Gets the current coding convention.", "sourceBeforeFix": "Exception cause", "sourceAfterFix": "Throwable cause"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tinvalidateHierarchy();\r\n \t}\r\n\tpublic String getText () {\r\n \t\treturn text;\r\n \t}\r", "fixed": " \t\tinvalidateHierarchy();\r\n \t}\r\n\tpublic CharSequence getText () {\r\n \t\treturn text;\r\n \t}\r", "sourceBeforeFix": "String text", "sourceAfterFix": "CharSequence text"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bc09228e0d7291198a8e5f989450121fcbe2ac81", "projectName": "gephi.gephi", "bugType": "Change Unary Operator\t", "problem": "     private ClockwiseRotateLayoutUI ui = new ClockwiseRotateLayoutUI();\n     public Layout buildLayout() {\n        return new RotateLayout(this, -90);\n     }\n     public String getName() {", "fixed": "     private ClockwiseRotateLayoutUI ui = new ClockwiseRotateLayoutUI();\n     public Layout buildLayout() {\n        return new RotateLayout(this, 90);\n     }\n     public String getName() {", "sourceBeforeFix": "-90", "sourceAfterFix": "90"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see NormalizableKey\n \t */\n\tpublic void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "fixed": " \t * \n* @see NormalizableKey\n \t */\n\tpublic abstract void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     @Override\n     public void init(NodeEngine nodeEngine, Properties properties) {\n        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.registerLockStoreConstructor(MapService.SERVICE_NAME,\n                     new ObjectNamespaceLockStoreInfoConstructorFunction());", "fixed": "     @Override\n     public void init(NodeEngine nodeEngine, Properties properties) {\n        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.registerLockStoreConstructor(MapService.SERVICE_NAME,\n                     new ObjectNamespaceLockStoreInfoConstructorFunction());", "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).byteAt(0);\n         }\n        return Byte.valueOf(value.toString());\n     }\n     @Override", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).byteAt(0);\n         }\n        return Byte.parseByte(value.toString());\n     }\n     @Override", "sourceBeforeFix": "Float.valueOf(value.toString())", "sourceAfterFix": "Float.parseFloat(value.toString())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "a7f54a539a4c8f92f4895934480061a2ccbcd499", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeThreadPoolElements(XMLElement element, ThreadPoolResourceDefinition pool, XMLExtendedStreamWriter writer, ModelNode container) throws XMLStreamException {", "fixed": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeThreadPoolElements(XMLElement element, ThreadPoolResourceDefinition pool, XMLExtendedStreamWriter writer, ModelNode container) throws XMLStreamException {", "sourceBeforeFix": "attribute.getDefinition().getAttributeMarshaller()", "sourceAfterFix": "attribute.getDefinition().getMarshaller()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "     return list;\n   }\n  protected void setProperties(Properties props) {\n     super.setProperties(props);\n   }", "fixed": "     return list;\n   }\n  @InterfaceAudience.Private\n  public void setProperties(Properties props) {\n     super.setProperties(props);\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6207b66e20a807c1cc74c914f2734c5dab5bfea7", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "     final PlannerConfig plannerConfig = new PlannerConfig();\n     final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker);\n     final DruidOperatorTable operatorTable = new DruidOperatorTable(\n         ImmutableSet.of(new QuantileSqlAggregator(), new FixedBucketsHistogramQuantileSqlAggregator()),\n         ImmutableSet.of()", "fixed": "     final PlannerConfig plannerConfig = new PlannerConfig();\n     final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig);\n     final DruidOperatorTable operatorTable = new DruidOperatorTable(\n         ImmutableSet.of(new QuantileSqlAggregator(), new FixedBucketsHistogramQuantileSqlAggregator()),\n         ImmutableSet.of()", "sourceBeforeFix": "CalciteTests.createMockSystemSchema(druidSchema,walker)", "sourceAfterFix": "CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)"}
{"fixCommitSHA1": "42e0782a5258626a58177d154ca0cf3da87cdf7a", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "      * @param r {@link AtmosphereResource}\n      */\n     public void unRegisterUuidForFindCandidate(AtmosphereResource r) {\n        logger.debug(\"Removing: {}\", r);\n         resources.remove(r.uuid());\n     }", "fixed": "      * @param r {@link AtmosphereResource}\n      */\n     public void unRegisterUuidForFindCandidate(AtmosphereResource r) {\n        logger.trace(\"Removing: {}\", r);\n         resources.remove(r.uuid());\n     }", "sourceBeforeFix": "logger.debug(\"Removing: {}\",r)", "sourceAfterFix": "logger.trace(\"Removing: {}\",r)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSWFEndpointBuilder\n             extends\n                 AdvancedSWFEndpointConsumerBuilder, AdvancedSWFEndpointProducerBuilder {\n         default SWFEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSWFEndpointBuilder\n             extends\n                 AdvancedSWFEndpointConsumerBuilder, AdvancedSWFEndpointProducerBuilder {\n         default SWFEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a7ae8848fabd6fc4d7c0ee04d80eadc9ec02d43b", "projectName": "alibaba.druid", "bugType": "Change Modifier", "problem": "  * @param <K> the type of keys maintained by this map\r\n  * @param <V> the type of mapped values\r\n  */\r\npublic final class ConcurrentIdentityHashMap<K, V> extends AbstractMap<K, V> implements ConcurrentMap<K, V> {\r\n     /**\r\n      * The default initial capacity for this table, used when not otherwise specified in a constructor.\r", "fixed": "  * @param <K> the type of keys maintained by this map\r\n  * @param <V> the type of mapped values\r\n  */\r\npublic class ConcurrentIdentityHashMap<K, V> extends AbstractMap<K, V> implements ConcurrentMap<K, V> {\r\n     /**\r\n      * The default initial capacity for this table, used when not otherwise specified in a constructor.\r", "sourceBeforeFix": "17", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);", "fixed": " \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);", "sourceBeforeFix": "logger.debug(\"MyQ binding received command '{}' for item '{}'\",command,itemName)", "sourceAfterFix": "logger.trace(\"MyQ binding received command '{}' for item '{}'\",command,itemName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NeutronEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedNeutronEndpointBuilder advanced() {\n             return (AdvancedNeutronEndpointBuilder) this;\n         }", "fixed": "     \n    public interface NeutronEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedNeutronEndpointBuilder advanced() {\n             return (AdvancedNeutronEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ac8a4e23ff95e6795598adf0d1e73763978e49b0", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         buffer.append(KEY_CONTEXT + \"=\").append(ctxid).append(\",\");\n         buffer.append(KEY_ROUTE + \"=\").append(id).append(\",\");\n         buffer.append(KEY_TYPE + \"=\" + TYPE_PROCESSOR + \",\");\n        buffer.append(KEY_NODE_ID + \"=\").append(id).append(\",\");\n         buffer.append(KEY_NAME + \"=\").append(ObjectName.quote(processor.toString()));\n         return createObjectName(buffer);\n     }", "fixed": "         buffer.append(KEY_CONTEXT + \"=\").append(ctxid).append(\",\");\n         buffer.append(KEY_ROUTE + \"=\").append(id).append(\",\");\n         buffer.append(KEY_TYPE + \"=\" + TYPE_PROCESSOR + \",\");\n        buffer.append(KEY_NODE_ID + \"=\").append(nodeId).append(\",\");\n         buffer.append(KEY_NAME + \"=\").append(ObjectName.quote(processor.toString()));\n         return createObjectName(buffer);\n     }", "sourceBeforeFix": "buffer.append(KEY_NODE_ID + \"=\").append(id)", "sourceAfterFix": "buffer.append(KEY_NODE_ID + \"=\").append(nodeId)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKubernetesServicesEndpointBuilder\n             extends\n                 AdvancedKubernetesServicesEndpointConsumerBuilder, AdvancedKubernetesServicesEndpointProducerBuilder {\n         default KubernetesServicesEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKubernetesServicesEndpointBuilder\n             extends\n                 AdvancedKubernetesServicesEndpointConsumerBuilder, AdvancedKubernetesServicesEndpointProducerBuilder {\n         default KubernetesServicesEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "86f74100e3f5a30bf3ecaf4be00c0b59bda096ac", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     }\n     LOG.info(\"Loading image \" + path);\n     DataInputStream imageIs = new DataInputStream(ufs.open(path));\n    JsonParser parser = JsonObject.createObjectMapper().getJsonFactory().createJsonParser(imageIs);\n     info.loadImage(parser, path);\n     imageIs.close();", "fixed": "     }\n     LOG.info(\"Loading image \" + path);\n     DataInputStream imageIs = new DataInputStream(ufs.open(path));\n    JsonParser parser = JsonObject.createObjectMapper().getFactory().createParser(imageIs);\n     info.loadImage(parser, path);\n     imageIs.close();", "sourceBeforeFix": "JsonObject.createObjectMapper().getJsonFactory()", "sourceAfterFix": "JsonObject.createObjectMapper().getFactory()"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),args.rest())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFhirEndpointBuilder\n             extends\n                 AdvancedFhirEndpointConsumerBuilder, AdvancedFhirEndpointProducerBuilder {\n         default FhirEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFhirEndpointBuilder\n             extends\n                 AdvancedFhirEndpointConsumerBuilder, AdvancedFhirEndpointProducerBuilder {\n         default FhirEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9e6f96dbfc8bf1ae1ffbe0115f53f1de0fc86ffc", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             } else {\n                 result = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             }\n             onPutIfAbsent(key, value, expiryPolicy, source, disableWriteThrough,", "fixed": "             } else {\n                 result = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onPutIfAbsent(key, value, expiryPolicy, source, disableWriteThrough,", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "4fa38aeba48a4f6641e48b3f73e1bc0c55c18156", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\tif (!super.supports(type)) {\n \t\t\t\treturn false;\n \t\t\t}\n\t\t\tif (AnnotatedElementUtils.isAnnotated(type, Validated.class)) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\tif (type.getPackage().getName().startsWith(\"org.springframework.boot\")) {", "fixed": " \t\t\tif (!super.supports(type)) {\n \t\t\t\treturn false;\n \t\t\t}\n\t\t\tif (AnnotatedElementUtils.hasAnnotation(type, Validated.class)) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\tif (type.getPackage().getName().startsWith(\"org.springframework.boot\")) {", "sourceBeforeFix": "AnnotatedElementUtils.isAnnotated(type,Validated.class)", "sourceAfterFix": "AnnotatedElementUtils.hasAnnotation(type,Validated.class)"}
{"fixCommitSHA1": "734c7a8318f516e4825fd72ab53699f96fabbe68", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         getMockEndpoint(\"mock:result\").assertNoDuplicates(body());\n         ExecutorService executor = Executors.newFixedThreadPool(poolSize);\n        Map<Integer, Future> responses = new ConcurrentHashMap();\n         for (int i = 0; i < files; i++) {\n             final int index = i;\n             Future out = executor.submit(new Callable<Object>() {", "fixed": "         getMockEndpoint(\"mock:result\").assertNoDuplicates(body());\n         ExecutorService executor = Executors.newFixedThreadPool(poolSize);\n        Map<Integer, Future> responses = new ConcurrentHashMap<Integer, Future>();\n         for (int i = 0; i < files; i++) {\n             final int index = i;\n             Future out = executor.submit(new Callable<Object>() {", "sourceBeforeFix": "Thread.sleep(1000)", "sourceAfterFix": "Thread.sleep(2000)"}
{"fixCommitSHA1": "4cd605c0ba9ffb261eac64f17d17bf1cba8a1368", "projectName": "Graylog2.graylog2-server", "bugType": "Same Function More Args", "problem": "         for (String uri : uris) {\n             initialNodes[i++] = URI.create(uri);\n         }\n        final String timezone = app.configuration().getString(\"timezone\");\n         if (!timezone.isEmpty()) {\n             try {\n                 Tools.setApplicationTimeZone(DateTimeZone.forID(timezone));", "fixed": "         for (String uri : uris) {\n             initialNodes[i++] = URI.create(uri);\n         }\n        final String timezone = app.configuration().getString(\"timezone\", \"\");\n         if (!timezone.isEmpty()) {\n             try {\n                 Tools.setApplicationTimeZone(DateTimeZone.forID(timezone));", "sourceBeforeFix": "app.configuration().getString(\"timezone\")", "sourceAfterFix": "app.configuration().getString(\"timezone\",\"\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "5bbaa3482d2bad347cd5f3199f457050ab60a8ce", "projectName": "apache.camel", "bugType": "Change Operand ", "problem": "             getContext().addInterceptStrategy(delayer);\n         }\n         InflightRepository inflightRepository = getBeanForType(InflightRepository.class);\n        if (delayer != null) {\n             LOG.info(\"Using custom InflightRepository: \" + inflightRepository);\n             getContext().setInflightRepository(inflightRepository);\n         }", "fixed": "             getContext().addInterceptStrategy(delayer);\n         }\n         InflightRepository inflightRepository = getBeanForType(InflightRepository.class);\n        if (inflightRepository != null) {\n             LOG.info(\"Using custom InflightRepository: \" + inflightRepository);\n             getContext().setInflightRepository(inflightRepository);\n         }", "sourceBeforeFix": "delayer != null", "sourceAfterFix": "inflightRepository != null"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "4374760010679cae216f1c512564626520e00238", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t\t\tif (ClassReflection.isAssignableFrom(Enum.class, actualType)) {\n\t\t\t\tif (knownType == null || knownType != actualType) {\n \t\t\t\t\tif (actualType.getEnumConstants() == null) actualType = actualType.getSuperclass();", "fixed": " \t\t\tif (ClassReflection.isAssignableFrom(Enum.class, actualType)) {\n\t\t\t\tif (typeName != null && (knownType == null || knownType != actualType)) {\n \t\t\t\t\tif (actualType.getEnumConstants() == null) actualType = actualType.getSuperclass();", "sourceBeforeFix": "knownType != null", "sourceAfterFix": "typeName != null"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResponseClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "93c745c53b03deda947da3358b8948c5d539e05e", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Caller in Function Call", "problem": "      * @since 2.0.0\n      */\n     public boolean hasResponseFilters() {\n        return !requestFilters.isEmpty();\n     }\n     /**", "fixed": "      * @since 2.0.0\n      */\n     public boolean hasResponseFilters() {\n        return !responseFilters.isEmpty();\n     }\n     /**", "sourceBeforeFix": "requestFilters.isEmpty()", "sourceAfterFix": "responseFilters.isEmpty()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8474b292fc51555b81e43e67aded3edf94a5d6a5", "projectName": "NLPchina.ansj_seg", "bugType": "Same Function More Args", "problem": " \t\t\t\t}\r\n \t\t\t\tsetRealName(graph, result);\r\n\t\t\t\tFilterModifWord.modifResult(result);\r\n \t\t\t\treturn result;\r\n \t\t\t}\r\n \t\t};\r", "fixed": " \t\t\t\t}\r\n \t\t\t\tsetRealName(graph, result);\r\n\t\t\t\tFilterModifWord.modifResult(result,forests);\r\n \t\t\t\treturn result;\r\n \t\t\t}\r\n \t\t};\r", "sourceBeforeFix": "FilterModifWord.modifResult(result)", "sourceAfterFix": "FilterModifWord.modifResult(result,forests)"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   }\n   public void normalize() {\n    logger.info(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();", "fixed": "   }\n   public void normalize() {\n    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();", "sourceBeforeFix": "logger.info(\"Remove try/catch/finally\")", "sourceAfterFix": "logger.fine(\"Remove try/catch/finally\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e04a3bf7703544cf5012eb2f55626af8e0a2cb8c", "projectName": "apache.flink", "bugType": "Delete Throws Exception", "problem": " \t\t}\n \t\t@Override\n\t\tpublic List<Integer> snapshotState(long checkpointId, long timestamp) throws Exception {\n \t\t\treturn Collections.singletonList(saveRecordCnt);\n \t\t}\n \t\t@Override\n\t\tpublic void restoreState(List<Integer> state) throws Exception {\n \t\t\tfor (Integer i : state) {\n \t\t\t\tsaveRecordCnt += i;\n \t\t\t}", "fixed": " \t\t}\n \t\t@Override\n\t\tpublic List<Integer> snapshotState(long checkpointId, long timestamp) {\n \t\t\treturn Collections.singletonList(saveRecordCnt);\n \t\t}\n \t\t@Override\n\t\tpublic void restoreState(List<Integer> state) {\n \t\t\tfor (Integer i : state) {\n \t\t\t\tsaveRecordCnt += i;\n \t\t\t}", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "6b39c5db276e94dd4295254ac279e482703716af", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "fixed": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "sourceBeforeFix": "logger.error(\"Error connecting to Plex\",e)", "sourceAfterFix": "logger.debug(\"Error connecting to Plex\",e)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RestSwaggerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRestSwaggerEndpointBuilder advanced() {", "fixed": "     \n    public interface RestSwaggerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRestSwaggerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.debug(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "fixed": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "sourceBeforeFix": "logger.debug(\"Received MyQ  JSON: {}\",dataString)", "sourceAfterFix": "logger.trace(\"Received MyQ  JSON: {}\",dataString)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WebsocketEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWebsocketEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface WebsocketEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWebsocketEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {", "sourceBeforeFix": "context.var(\"long\")", "sourceAfterFix": "context.var(\"long\",2)"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"fixCommitSHA1": "e5d3850776174a63ddc2e0b5ead58409ca7c8706", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   protected void initTable() throws IOException {\n     super.initTable();\n    byte[] tableName = getTablename().getBytes();\n     HBaseAdmin admin = new HBaseAdmin(conf);\n     HTableDescriptor tableDesc = admin.getTableDescriptor(tableName);\n     LOG.info(\"Disabling table \" + getTablename());", "fixed": "   protected void initTable() throws IOException {\n     super.initTable();\n    byte[] tableName = getTablename().getName();\n     HBaseAdmin admin = new HBaseAdmin(conf);\n     HTableDescriptor tableDesc = admin.getTableDescriptor(tableName);\n     LOG.info(\"Disabling table \" + getTablename());", "sourceBeforeFix": "getTablename().getBytes()", "sourceAfterFix": "getTablename().getName()"}
{"fixCommitSHA1": "d41aad3b391de7aeb6b43e16692b974e5a35148e", "projectName": "JakeWharton.ActionBarSherlock", "bugType": "Change Identifier Used", "problem": "             final Object[] params = new Object[] { item };\r\n             try {\r\n                 if (mMethod.getReturnType() == Boolean.TYPE) {\r\n                    return (Boolean)mMethod.invoke(MenuInflater.this, params);\r\n                 }\r\n                 return false;\r\n             } catch (Exception e) {\r", "fixed": "             final Object[] params = new Object[] { item };\r\n             try {\r\n                 if (mMethod.getReturnType() == Boolean.TYPE) {\r\n                    return (Boolean)mMethod.invoke(mContext, params);\r\n                 }\r\n                 return false;\r\n             } catch (Exception e) {\r", "sourceBeforeFix": "MenuInflater.this.getClass()", "sourceAfterFix": "mContext.getClass()"}
{"fixCommitSHA1": "203b3e338e1941cfee5df5a431cd82e44d2c1a66", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     };\n   }\n  private static final Multiset<String> ELEMENTS_TO_FILTER_OUT = ImmutableMultiset.of(\n      \"foobar\", \"bazfoo\", \"foobar\", \"foobar\");\n   private static final Predicate<String> PREDICATE =\n       Predicates.not(Predicates.in(ELEMENTS_TO_FILTER_OUT));", "fixed": "     };\n   }\n  private static final ImmutableMultiset<String> ELEMENTS_TO_FILTER_OUT =\n      ImmutableMultiset.of(\"foobar\", \"bazfoo\", \"foobar\", \"foobar\");\n   private static final Predicate<String> PREDICATE =\n       Predicates.not(Predicates.in(ELEMENTS_TO_FILTER_OUT));", "sourceBeforeFix": "Multiset<String>", "sourceAfterFix": "ImmutableMultiset<String>"}
{"fixCommitSHA1": "028700818ccf660a02586a19fc31399684cb1b2e", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "     public void testToInputStreamFileWithCharsetUTF8() throws Exception {\n         File file = new File(\"src/test/resources/org/apache/camel/converter/german.utf-8.txt\");\n         InputStream in = IOConverter.toInputStream(file, \"UTF-8\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n         BufferedReader naiveReader = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"UTF-8\"));\n         try {   \n             String line = reader.readLine();", "fixed": "     public void testToInputStreamFileWithCharsetUTF8() throws Exception {\n         File file = new File(\"src/test/resources/org/apache/camel/converter/german.utf-8.txt\");\n         InputStream in = IOConverter.toInputStream(file, \"UTF-8\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"));\n         BufferedReader naiveReader = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"UTF-8\"));\n         try {   \n             String line = reader.readLine();", "sourceBeforeFix": "new InputStreamReader(in)", "sourceAfterFix": "new InputStreamReader(in,\"UTF-8\")"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "      */\n     private static String getFirstDomainsFromIdent(\n             final int firstPackageDomainsCount, final String packageFullPath) {\n        final StringBuilder builder = new StringBuilder();\n         final StringTokenizer tokens = new StringTokenizer(packageFullPath, \".\");\n         int count = firstPackageDomainsCount;", "fixed": "      */\n     private static String getFirstDomainsFromIdent(\n             final int firstPackageDomainsCount, final String packageFullPath) {\n        final StringBuilder builder = new StringBuilder(256);\n         final StringTokenizer tokens = new StringTokenizer(packageFullPath, \".\");\n         int count = firstPackageDomainsCount;", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(256)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}
{"fixCommitSHA1": "4a1fe28154e697fe94e5d611cf0586032bc95d63", "projectName": "facebook.presto", "bugType": "Change Binary Operator", "problem": "         else if (SEQUENCE_FILE_MAGIC.equals(magic)) {\n             byte sequenceFileVersion = input.readByte();\n            if (sequenceFileVersion == SEQUENCE_FILE_VERSION) {\n                 throw corrupt(\"File %s is a SequenceFile not an RCFile\", dataSource);\n             }", "fixed": "         else if (SEQUENCE_FILE_MAGIC.equals(magic)) {\n             byte sequenceFileVersion = input.readByte();\n            if (sequenceFileVersion != SEQUENCE_FILE_VERSION) {\n                 throw corrupt(\"File %s is a SequenceFile not an RCFile\", dataSource);\n             }", "sourceBeforeFix": "sequenceFileVersion == SEQUENCE_FILE_VERSION", "sourceAfterFix": "sequenceFileVersion != SEQUENCE_FILE_VERSION"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0c04572d3c4dfd164456a085aaa9782541c8d718", "projectName": "openhab.openhab", "bugType": "Same Function More Args", "problem": " \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "fixed": " \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp, serviceName);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "sourceBeforeFix": "historicState(item,timestamp)", "sourceAfterFix": "historicState(item,timestamp,serviceName)"}
{"fixCommitSHA1": "93b0ac77e59d936e91684ba016978a315d50d055", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \tpublic Item getItem(String name) throws ItemNotFoundException {\n \t\tfor(Collection<Item> items : itemMap.values()) {\n \t\t\tfor(Item item : items) {\n\t\t\t\tif(item.getName().matches(name)) {\n \t\t\t\t\treturn item;\n \t\t\t\t}\n \t\t\t}", "fixed": " \tpublic Item getItem(String name) throws ItemNotFoundException {\n \t\tfor(Collection<Item> items : itemMap.values()) {\n \t\t\tfor(Item item : items) {\n\t\t\t\tif(item.getName().equals(name)) {\n \t\t\t\t\treturn item;\n \t\t\t\t}\n \t\t\t}", "sourceBeforeFix": "item.getName().matches(name)", "sourceAfterFix": "item.getName().equals(name)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     }\n     if (LOG.isDebugEnabled()) {\n      LOG.debug(split.getRegionName().toString()\n          +\" no longer has references to \" + parent.toString());\n     }\n     BatchUpdate b = new BatchUpdate(parent);", "fixed": "     }\n     if (LOG.isDebugEnabled()) {\n      LOG.debug(split.getRegionNameAsString() +\n        \" no longer has references to \" + parent.toString());\n     }\n     BatchUpdate b = new BatchUpdate(parent);", "sourceBeforeFix": "info.getRegionName()", "sourceAfterFix": "info.getRegionNameAsString()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "1081d8964ee521042a0bf4db9f33be33b3f99991", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "  *     }\n  * </pre>\n  */\npublic class Verifier implements TestRule {\n \tpublic Statement apply(final Statement base, Description description) {\n \t\treturn new Statement() {\n \t\t\t@Override", "fixed": "  *     }\n  * </pre>\n  */\npublic abstract class Verifier implements TestRule {\n \tpublic Statement apply(final Statement base, Description description) {\n \t\treturn new Statement() {\n \t\t\t@Override", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "2439f7a68843ddff5b468a203e5856705e574599", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   }\n   private WAL getWAL(final String group) throws IOException {\n    WAL log = cached.get(walCacheLock);\n     if (null == log) {", "fixed": "   }\n   private WAL getWAL(final String group) throws IOException {\n    WAL log = cached.get(group);\n     if (null == log) {", "sourceBeforeFix": "cached.get(walCacheLock)", "sourceAfterFix": "cached.get(group)"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f877cc6742ba3c75739edd9debae662d834d191d", "projectName": "mybatis.mybatis-3", "bugType": "Change Identifier Used", "problem": "   Map<Integer, User<String>> getAMapOfUsers();\n   @Select(\"select id, name from users where id=1\")\n  Map<Integer, Object> getUserAsAMap();\n   @Select(\"select id, name from users\")\n  List<Map<Integer, Object>> getAListOfMaps();\n }", "fixed": "   Map<Integer, User<String>> getAMapOfUsers();\n   @Select(\"select id, name from users where id=1\")\n  Map<String, Object> getUserAsAMap();\n   @Select(\"select id, name from users\")\n  List<Map<String, Object>> getAListOfMaps();\n }", "sourceBeforeFix": "Map<Integer,Object>", "sourceAfterFix": "Map<String,Object>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8c68c5a3ae4d3d907528b64ec4b3daa5512d4be6", "projectName": "netty.netty", "bugType": "Change Unary Operator\t", "problem": "                if (config.isAutoRead() && !readPending) {\n                     removeReadOp();\n                 }\n             }", "fixed": "                if (!config.isAutoRead() && !readPending) {\n                     removeReadOp();\n                 }\n             }", "sourceBeforeFix": "config.isAutoRead()", "sourceAfterFix": "!config.isAutoRead()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ServerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedServerEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ServerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedServerEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "2657ce78877d8358f4ae686baf6f1f9a920f2f50", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": " import org.ehcache.event.CacheEvent;\n import org.ehcache.event.CacheEventListener;\npublic final class EhcacheConsumer extends DefaultConsumer implements CacheEventListener<Object, Object> {\n     private final EhcacheConfiguration configuration;\n     private final EhcacheManager manager;\n     private final Cache<Object, Object> cache;", "fixed": " import org.ehcache.event.CacheEvent;\n import org.ehcache.event.CacheEventListener;\npublic class EhcacheConsumer extends DefaultConsumer implements CacheEventListener<Object, Object> {\n     private final EhcacheConfiguration configuration;\n     private final EhcacheManager manager;\n     private final Cache<Object, Object> cache;", "sourceBeforeFix": "17", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "079bf9e8c2d461012d7c403081c5f9cf29372d28", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Binary Operator", "problem": "         catch (SQLException e)\n         {\n             long elapsed = System.currentTimeMillis() - start;\n            Assert.assertTrue(\"Didn't wait long enough for timeout\", (elapsed > config.getConnectionTimeout()));\n         }\n         finally\n         {", "fixed": "         catch (SQLException e)\n         {\n             long elapsed = System.currentTimeMillis() - start;\n            Assert.assertTrue(\"Didn't wait long enough for timeout\", (elapsed >= config.getConnectionTimeout()));\n         }\n         finally\n         {", "sourceBeforeFix": "elapsed > config.getConnectionTimeout()", "sourceAfterFix": "elapsed >= config.getConnectionTimeout()"}
{"fixCommitSHA1": "bc1adbde03308cb046dbc14e562a85b5e42d6ed1", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "         if (inputState != null)\n             inputState.setState(IOState.Type.TERMINATED);\n        return super.remove(input);\n     }\n     public boolean remove(IOState<MessageInput> inputState) {", "fixed": "         if (inputState != null)\n             inputState.setState(IOState.Type.TERMINATED);\n        return super.remove(inputState);\n     }\n     public boolean remove(IOState<MessageInput> inputState) {", "sourceBeforeFix": "super.remove(input)", "sourceAfterFix": "super.remove(inputState)"}
{"fixCommitSHA1": "f61d37c0735911586cd6d9ec1586b3598c32aeda", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "      * @return BroadcastAction that tell Atmosphere to invoke the next filter or not.\n      */\n     protected BroadcastAction filter(AtmosphereResource r, Object message, Object originalMessage) {\n        BroadcastAction transformed = new BroadcastAction(originalMessage);\n         for (PerRequestBroadcastFilter mf : perRequestFilters) {\n             synchronized (mf) {\n                transformed = mf.filter(r, message, transformed.message());\n                 if (transformed == null || transformed.action() == BroadcastAction.ACTION.ABORT) {\n                     return transformed;\n                 }", "fixed": "      * @return BroadcastAction that tell Atmosphere to invoke the next filter or not.\n      */\n     protected BroadcastAction filter(AtmosphereResource r, Object message, Object originalMessage) {\n        BroadcastAction transformed = new BroadcastAction(message);\n         for (PerRequestBroadcastFilter mf : perRequestFilters) {\n             synchronized (mf) {\n                transformed = mf.filter(r, originalMessage, transformed.message());\n                 if (transformed == null || transformed.action() == BroadcastAction.ACTION.ABORT) {\n                     return transformed;\n                 }", "sourceBeforeFix": "mf.filter(r,message,transformed.message())", "sourceAfterFix": "mf.filter(r,originalMessage,transformed.message())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedPgEventEndpointBuilder\n             extends\n                 AdvancedPgEventEndpointConsumerBuilder, AdvancedPgEventEndpointProducerBuilder {\n         default PgEventEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedPgEventEndpointBuilder\n             extends\n                 AdvancedPgEventEndpointConsumerBuilder, AdvancedPgEventEndpointProducerBuilder {\n         default PgEventEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "53694f29adf8c68992e1b966c86380219f438c14", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Farewell World\", Exchange.FILE_NAME, \"mysub/mysubsub/farewell.txt\");\n        Thread.sleep(100);\n         File file = new File(getScpPath() + \"/mysub/mysubsub/farewell.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Farewell World\", Exchange.FILE_NAME, \"mysub/mysubsub/farewell.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/mysub/mysubsub/farewell.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(200)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "fixed": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "sourceBeforeFix": "factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "f1409f751a94e935f116cf2eb3732b56c128b501", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "   @NotNull\n   private List<TieredBrokerSelectorStrategy> strategies = Arrays.asList(\n       new TimeBoundaryTieredBrokerSelectorStrategy(),\n      new PriorityTieredBrokerSelectorStrategy(1, 1)\n   );", "fixed": "   @NotNull\n   private List<TieredBrokerSelectorStrategy> strategies = Arrays.asList(\n       new TimeBoundaryTieredBrokerSelectorStrategy(),\n      new PriorityTieredBrokerSelectorStrategy(0, 1)\n   );", "sourceBeforeFix": "new PriorityTieredBrokerSelectorStrategy(1,1)", "sourceAfterFix": "new PriorityTieredBrokerSelectorStrategy(0,1)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "d21d70eadd9b64a4337151b80d9508826c7bcf84", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         stopTest.set(true);\n         shadowMember.join();\n        clearFromMember.start();\n         populateClientNearCache.join();\n         putFromMember.join();", "fixed": "         stopTest.set(true);\n         shadowMember.join();\n        clearFromMember.join();\n         populateClientNearCache.join();\n         putFromMember.join();", "sourceBeforeFix": "clearFromMember.start()", "sourceAfterFix": "clearFromMember.join()"}
{"fixCommitSHA1": "a161d8d1924d1fb49a4d229370d998be1493957c", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "             final long committedOffset = KafkaJournal.this.committedOffset.get();\n             final HashSet<LogSegment> logSegments = Sets.newHashSet(\n                    JavaConversions.asIterable(kafkaLog.logSegments(committedOffset, Long.MAX_VALUE))\n             );\n             loggerForCleaner.debug(\"[cleanup-committed] Keeping segments {}\", logSegments);\n             return kafkaLog.deleteOldSegments(new AbstractFunction1<LogSegment, Object>() {", "fixed": "             final long committedOffset = KafkaJournal.this.committedOffset.get();\n             final HashSet<LogSegment> logSegments = Sets.newHashSet(\n                    JavaConversions.asJavaIterable(kafkaLog.logSegments(committedOffset, Long.MAX_VALUE))\n             );\n             loggerForCleaner.debug(\"[cleanup-committed] Keeping segments {}\", logSegments);\n             return kafkaLog.deleteOldSegments(new AbstractFunction1<LogSegment, Object>() {", "sourceBeforeFix": "JavaConversions.asIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))", "sourceAfterFix": "JavaConversions.asJavaIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))"}
{"fixCommitSHA1": "6bd9731f77303b53b9a03b22be0c57438e096355", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "         HttpClient http = new HttpClient();\nUser user = new User(http.get(\"http:\n        assertFalse(user.isGeoEnabled());\n         assertFalse(user.isVerified());\n         assertEquals(id1, user.getName());\n         assertEquals(id1, user.getScreenName());", "fixed": "         HttpClient http = new HttpClient();\nUser user = new User(http.get(\"http:\n        assertTrue(user.isGeoEnabled());\n         assertFalse(user.isVerified());\n         assertEquals(id1, user.getName());\n         assertEquals(id1, user.getScreenName());", "sourceBeforeFix": "assertFalse(user.isGeoEnabled())", "sourceAfterFix": "assertTrue(user.isGeoEnabled())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedBeanValidatorEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default BeanValidatorEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedBeanValidatorEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default BeanValidatorEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "fixed": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "sourceBeforeFix": "id=15802", "sourceAfterFix": "id=10802"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtmosphereWebsocketEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtmosphereWebsocketEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AtmosphereWebsocketEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtmosphereWebsocketEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f3a55f30abec0d1445ef65a89b16e49e3a8e2a2d", "projectName": "swagger-api.swagger-core", "bugType": "Wrong Function Name", "problem": "                 if (getter != null) {\n                     if (paramType == null) {\n                        paramType = getter.getRawReturnType();\n                     }\n                     for (final Annotation fieldAnnotation : getter.annotations()) {", "fixed": "                 if (getter != null) {\n                     if (paramType == null) {\n                        paramType = getter.getType();\n                     }\n                     for (final Annotation fieldAnnotation : getter.annotations()) {", "sourceBeforeFix": "field.getRawType()", "sourceAfterFix": "field.getType()"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Override\n\tpublic CompletableFuture<Boolean> getTerminationFuture() {\n \t\treturn terminationFuture;\n \t}\n }", "fixed": " \t}\n \t@Override\n\tpublic CompletableFuture<Void> getTerminationFuture() {\n \t\treturn terminationFuture;\n \t}\n }", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformiv(program,location,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "      * base64-encoded and appear each on their own line. A length of -1 is used to encode a null\n      * array. The last line is optional. If present, it contains the TLS version.\n      */\n    public Entry(Source in) throws IOException {\n       try {\n         BufferedSource source = Okio.buffer(in);\n         url = source.readUtf8LineStrict();", "fixed": "      * base64-encoded and appear each on their own line. A length of -1 is used to encode a null\n      * array. The last line is optional. If present, it contains the TLS version.\n      */\n    Entry(Source in) throws IOException {\n       try {\n         BufferedSource source = Okio.buffer(in);\n         url = source.readUtf8LineStrict();", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "98390cf27b0ce41447e0a104a8963b2cfdc20795", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \tpublic void add (int value1, int value2, int value3, int value4) {\r\n \t\tint[] items = this.items;\r\n\t\tif (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.75f)));\r\n \t\titems[size] = value1;\r\n \t\titems[size + 1] = value2;\r\n \t\titems[size + 2] = value3;\r", "fixed": " \tpublic void add (int value1, int value2, int value3, int value4) {\r\n \t\tint[] items = this.items;\r\nif (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.8f)));\n \t\titems[size] = value1;\r\n \t\titems[size + 1] = value2;\r\n \t\titems[size + 2] = value3;\r", "sourceBeforeFix": "size * 1.75f", "sourceAfterFix": "size * 1.8f"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      *\n      * @return Type of exception\n      */\n    public Class<? extends Exception> exceptionClass() {\n         return this.exceptionClass;\n     }", "fixed": "      *\n      * @return Type of exception\n      */\n    public Class<? extends T> exceptionClass() {\n         return this.exceptionClass;\n     }", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "T exception"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                }\r\n                if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "fixed": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "cd70b8db19db4a22136c8411fd0b72252b2f975a", "projectName": "AsyncHttpClient.async-http-client", "bugType": "More Specific If", "problem": "     public String getResponseBody(String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "fixed": "     public String getResponseBody(String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "sourceBeforeFix": "contentType != null", "sourceAfterFix": "contentType != null && charset == null"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSmppEndpointBuilder\n             extends\n                 AdvancedSmppEndpointConsumerBuilder, AdvancedSmppEndpointProducerBuilder {\n         default SmppEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSmppEndpointBuilder\n             extends\n                 AdvancedSmppEndpointConsumerBuilder, AdvancedSmppEndpointProducerBuilder {\n         default SmppEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "270185aba54cef1d8ce59ec347b5623f2e502afe", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \telse\n \t\t{\n \t\tISeq s = RT.seq(sizeOrSeq);\n\t\tint size = s.count();\n \t\tlong[] ret = new long[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\tret[i] = ((Number) s.first()).longValue();", "fixed": " \telse\n \t\t{\n \t\tISeq s = RT.seq(sizeOrSeq);\n\t\tint size = RT.count(s);\n \t\tlong[] ret = new long[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\tret[i] = ((Number) s.first()).longValue();", "sourceBeforeFix": "s.count()", "sourceAfterFix": "RT.count(s)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CaffeineLoadCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCaffeineLoadCacheEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CaffeineLoadCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCaffeineLoadCacheEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic boolean invertNormalizedKey();", "fixed": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic abstract boolean invertNormalizedKey();", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "ff7d97dc1a7222e6c207a95f429aa5bfde5155ee", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     private String charset;\n     private int bpos;\n    public XMLStreamReaderInputStream(XMLStreamReader reader, String charset, XMLOutputFactory outfactory) {\n         this.reader = reader;\n         this.buffer = new byte[BUFFER_SIZE];\n         this.chunk = new TrimmableByteArrayOutputStream();", "fixed": "     private String charset;\n     private int bpos;\n    XMLStreamReaderInputStream(XMLStreamReader reader, String charset, XMLOutputFactory outfactory) {\n         this.reader = reader;\n         this.buffer = new byte[BUFFER_SIZE];\n         this.chunk = new TrimmableByteArrayOutputStream();", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "73a03b5e232d8f7049a03361e0454cb2eecb90c7", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "             initialPermits += rand;\n             assertEquals(initialPermits, semaphore.availablePermits());\n            instances[i].getLifecycleService().shutdown();\n             semaphore.acquire(rand);\n             initialPermits -= rand;", "fixed": "             initialPermits += rand;\n             assertEquals(initialPermits, semaphore.availablePermits());\n            instances[i].shutdown();\n             semaphore.acquire(rand);\n             initialPermits -= rand;", "sourceBeforeFix": "timeout=30000", "sourceAfterFix": "timeout=120000"}
{"fixCommitSHA1": "9420ad23cb25d0b48ba5b1f124437176a152f3d5", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "     public void read(ByteBuffer inBuffer) throws Exception {\n         while (inBuffer.hasRemaining()) {\n             if (packet == null) {\n                packet = new Packet(ioService.getPortableContext());\n             }\n             boolean complete = packet.readFrom(inBuffer);\n             if (complete) {", "fixed": "     public void read(ByteBuffer inBuffer) throws Exception {\n         while (inBuffer.hasRemaining()) {\n             if (packet == null) {\n                packet = new Packet();\n             }\n             boolean complete = packet.readFrom(inBuffer);\n             if (complete) {", "sourceBeforeFix": "new Packet(ioService.getPortableContext())", "sourceAfterFix": "new Packet()"}
{"fixCommitSHA1": "1c3c663ba7d55fcd33af1502ca426274d51d2ba1", "projectName": "apache.flink", "bugType": "Change Binary Operator", "problem": " \t\t}\n\t\tfor (int i = 0; i < maxIndex; i++) {\n \t\t\tfinal String fullKey = key + '.' + i;\n \t\t\tif (properties.containsKey(fullKey)) {", "fixed": " \t\t}\n\t\tfor (int i = 0; i <= maxIndex; i++) {\n \t\t\tfinal String fullKey = key + '.' + i;\n \t\t\tif (properties.containsKey(fullKey)) {", "sourceBeforeFix": "i < maxIndex", "sourceAfterFix": "i <= maxIndex"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnablednHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "fixed": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"rabbit\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"rabbit\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d33c0ebf8f8f52fb6fb82d615cec50a10627d267", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n\t\t\tthis.port = port.toString();\n \t\t}\n\t\tpublic String getPort() {\n \t\t\treturn this.port;\n \t\t}", "fixed": " \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n\t\t\tthis.port = port;\n \t\t}\n\t\tpublic Integer getPort() {\n \t\t\treturn this.port;\n \t\t}", "sourceBeforeFix": "public String getPort(){   return this.port; } ", "sourceAfterFix": "public Integer getPort(){   return this.port; } "}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesJobEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesJobEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KubernetesJobEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesJobEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5f78aa9c52a2f28419a5fa646ab28ee273e17e6a", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "         }\n     }\n    public void unblock(Address address) {\n         blockedAddresses.remove(address);\n         Connection connection = getConnection(address);\n         if (connection instanceof DroppingConnection) {", "fixed": "         }\n     }\n    public synchronized void unblock(Address address) {\n         blockedAddresses.remove(address);\n         Connection connection = getConnection(address);\n         if (connection instanceof DroppingConnection) {", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "bcb6eeec1d978d6d572ebec875d34dc64aeb5121", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.intValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "fixed": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.longValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "sourceBeforeFix": "n.intValue()", "sourceAfterFix": "n.floatValue()"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "         octree.initArchitecture();\n     }\n    public void updateSelection(GL2 gl, GLU glu) {\n         if (vizConfig.isSelectionEnable() && currentSelectionArea != null && currentSelectionArea.isEnabled()) {\n             float[] mp = Arrays.copyOf(graphIO.getMousePosition(), 2);\n             float[] cent = currentSelectionArea.getSelectionAreaCenter();", "fixed": "         octree.initArchitecture();\n     }\n    public synchronized void updateSelection(GL2 gl, GLU glu) {\n         if (vizConfig.isSelectionEnable() && currentSelectionArea != null && currentSelectionArea.isEnabled()) {\n             float[] mp = Arrays.copyOf(graphIO.getMousePosition(), 2);\n             float[] cent = currentSelectionArea.getSelectionAreaCenter();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "6a95dd35511f4216481d8d0ffd4952ed1893a1c4", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       setPermission(loadPath, FsPermission.valueOf(\"-rwxrwxrwx\"));\n       try (HTable table = (HTable)TEST_UTIL.getConnection().getTable(tableName)) {\n        TEST_UTIL.waitTableEnabled(tableName);\n         LoadIncrementalHFiles loader = new LoadIncrementalHFiles(conf);\n         loader.doBulkLoad(loadPath, table);\n       }", "fixed": "       setPermission(loadPath, FsPermission.valueOf(\"-rwxrwxrwx\"));\n       try (HTable table = (HTable)TEST_UTIL.getConnection().getTable(tableName)) {\n        TEST_UTIL.waitUntilAllRegionsAssigned(tableName);\n         LoadIncrementalHFiles loader = new LoadIncrementalHFiles(conf);\n         loader.doBulkLoad(loadPath, table);\n       }", "sourceBeforeFix": "TEST_UTIL.waitTableEnabled(tableName)", "sourceAfterFix": "TEST_UTIL.waitUntilAllRegionsAssigned(tableName)"}
{"fixCommitSHA1": "94fe91293c283842805aac48ee545ab6fce24f20", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\r\n\tpublic final Vector2 localAxis1 = new Vector2( );\r\n \t/**\r\n \t *  The constrained angle between the bodies: body2_angle - body1_angle.\r", "fixed": " \t\r\n\tpublic final Vector2 localAxis1 = new Vector2(1, 0);\r\n \t/**\r\n \t *  The constrained angle between the bodies: body2_angle - body1_angle.\r", "sourceBeforeFix": "new Vector2()", "sourceAfterFix": "new Vector2(1,0)"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResponseClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "204c2156da54922cb0bfc9d944036e3503056a2f", "projectName": "pardom.ActiveAndroid", "bugType": "Wrong Function Name", "problem": " \t\t\t\t}\n \t\t\t\telse if (ReflectionUtils.isTypeSerializer(discoveredClass)) {\n \t\t\t\t\tTypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();\n\t\t\t\t\tmTypeSerializers.put(typeSerializer.getClass(), typeSerializer);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassNotFoundException e) {", "fixed": " \t\t\t\t}\n \t\t\t\telse if (ReflectionUtils.isTypeSerializer(discoveredClass)) {\n \t\t\t\t\tTypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();\n\t\t\t\t\tmTypeSerializers.put(typeSerializer.getDeserializedType(), typeSerializer);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassNotFoundException e) {", "sourceBeforeFix": "typeSerializer.getClass()", "sourceAfterFix": "typeSerializer.getDeserializedType()"}
{"fixCommitSHA1": "8b59afeaaa4458b6d21d88b2edc0d22ed04d9798", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         });\n         context.start();\n        resultEndpoint.expectedBodiesReceived(\"one\", \"two\", \"three\");\n         sendMessage(\"1\", \"one\");\n         sendMessage(\"2\", \"two\");", "fixed": "         });\n         context.start();\n        resultEndpoint.expectedBodiesReceivedInAnyOrder(\"one\", \"two\", \"three\");\n         sendMessage(\"1\", \"one\");\n         sendMessage(\"2\", \"two\");", "sourceBeforeFix": "resultEndpoint.expectedBodiesReceived(\"one\",\"three\")", "sourceAfterFix": "resultEndpoint.expectedBodiesReceivedInAnyOrder(\"one\",\"three\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * Constructs a stack node for a method definition.\n          * @param ast AST for the method definition.\n          */\n        public MethodNode(DetailAST ast) {\n             method = ast;\n             callingSuper = false;\n         }", "fixed": "          * Constructs a stack node for a method definition.\n          * @param ast AST for the method definition.\n          */\n        MethodNode(DetailAST ast) {\n             method = ast;\n             callingSuper = false;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "      * Loads the import control file from a {@link InputSource}.\n      * @param source the source to load from.\n      * @param uri uri of the source being loaded.\n     * @return the root {@link PkgControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n    private static PkgControl load(final InputSource source,\n         final URI uri) throws CheckstyleException {\n         try {\n             final ImportControlLoader loader = new ImportControlLoader();", "fixed": "      * Loads the import control file from a {@link InputSource}.\n      * @param source the source to load from.\n      * @param uri uri of the source being loaded.\n     * @return the root {@link ImportControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n    private static ImportControl load(final InputSource source,\n         final URI uri) throws CheckstyleException {\n         try {\n             final ImportControlLoader loader = new ImportControlLoader();", "sourceBeforeFix": "new PkgControl(pkg,regex)", "sourceAfterFix": "new ImportControl(pkg,regex)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new DeleteCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName = \"--help\";", "fixed": "         command = new DeleteCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName = \"--help\";", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "63dad4b878aa4ee03201ec8669a1ba0edfa5e999", "projectName": "openmrs.openmrs-core", "bugType": "Same Function More Args", "problem": " \t\t\t\t}\r\n\t\t\t\tthrow new CustomChangeException(\"Failed to insert one or more concept map types\");\r\n \t\t\t}\r\n \t\t}\r\n \t\tcatch (DatabaseException e) {\r", "fixed": " \t\t\t\t}\r\n\t\t\t\tthrow new CustomChangeException(\"Failed to insert one or more concept map types\", be);\r\n \t\t\t}\r\n \t\t}\r\n \t\tcatch (DatabaseException e) {\r", "sourceBeforeFix": "new CustomChangeException(\"Failed to insert one or more concept map types\")", "sourceAfterFix": "new CustomChangeException(\"Failed to insert one or more concept map types\",be)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "fixed": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/test\");\n         servlet.service(request, response);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "adbf20a2896553db1f91fdf35f71668ece201599", "projectName": "Bukkit.Bukkit", "bugType": "Change Identifier Used", "problem": "      * @return immutable list of plugins that should consider this plugin a soft-dependency\n      */\n     public List<String> getLoadBefore() {\n        return softDepend;\n     }\n     public PluginLoadOrder getLoad() {", "fixed": "      * @return immutable list of plugins that should consider this plugin a soft-dependency\n      */\n     public List<String> getLoadBefore() {\n        return loadBefore;\n     }\n     public PluginLoadOrder getLoad() {", "sourceBeforeFix": "return softDepend; ", "sourceAfterFix": "return loadBefore; "}
{"fixCommitSHA1": "bae26ad317c876853159a7a2af7429c0d9d73455", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "   }\n   private int getTimeZone() {\n    return calendar.getTimeZone().getDSTSavings() / 3600000;\n   }\n   private boolean isDaylightSavingTime() {", "fixed": "   }\n   private int getTimeZone() {\n    return calendar.getTimeZone().getRawOffset() / 3600000;\n   }\n   private boolean isDaylightSavingTime() {", "sourceBeforeFix": "calendar.getTimeZone().getDSTSavings()", "sourceAfterFix": "calendar.getTimeZone().getRawOffset()"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testSamplingFromExchangeStream() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "fixed": "     public void testSamplingFromExchangeStream() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "sourceBeforeFix": "mock.expectedMessageCount(10)", "sourceAfterFix": "mock.expectedMinimumMessageCount(10)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "8cee8a4e0506ade4008e9add8ff36226fbd48251", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "             return;\n         }\n        path = FileUtil.compactPath(path);\n         if (!endpoint.getConfiguration().isStepwise()) {", "fixed": "             return;\n         }\n        path = FileUtil.compactPath(path, '/');\n         if (!endpoint.getConfiguration().isStepwise()) {", "sourceBeforeFix": "FileUtil.compactPath(path)", "sourceAfterFix": "FileUtil.compactPath(path,'/')"}
{"fixCommitSHA1": "79386c6487a53eba8b6690e3d03b90eda0e2d842", "projectName": "brettwooldridge.HikariCP", "bugType": "Same Function Less Args", "problem": "             final long now = clockSource.currentTime();\n             if (poolEntry.evict || (clockSource.elapsedMillis(poolEntry.lastAccessed, now) > ALIVE_BYPASS_WINDOW_MS && !isConnectionAlive(poolEntry.connection))) {\ncloseConnection(poolEntry, \"(connection evicted or dead)\");\n               timeout = hardTimeout - clockSource.elapsedMillis(startTime, now);\n             }\n             else {\n                metricsTracker.recordBorrowStats(poolEntry, startTime);", "fixed": "             final long now = clockSource.currentTime();\n             if (poolEntry.evict || (clockSource.elapsedMillis(poolEntry.lastAccessed, now) > ALIVE_BYPASS_WINDOW_MS && !isConnectionAlive(poolEntry.connection))) {\ncloseConnection(poolEntry, \"(connection evicted or dead)\");\n               timeout = hardTimeout - clockSource.elapsedMillis(startTime);\n             }\n             else {\n                metricsTracker.recordBorrowStats(poolEntry, startTime);", "sourceBeforeFix": "clockSource.elapsedMillis(startTime,now)", "sourceAfterFix": "clockSource.elapsedMillis(startTime)"}
{"fixCommitSHA1": "b0620242299e0510aaca0606ddfe8b9812803ade", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": " import org.junit.Assert;\npublic class TestUtils {\n     private TestUtils() {\n     }", "fixed": " import org.junit.Assert;\npublic final class TestUtils {\n     private TestUtils() {\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DirectVmEndpointBuilder\n             extends\n                 DirectVmEndpointConsumerBuilder, DirectVmEndpointProducerBuilder {\n         default AdvancedDirectVmEndpointBuilder advanced() {", "fixed": "     \n    public interface DirectVmEndpointBuilder\n             extends\n                 DirectVmEndpointConsumerBuilder, DirectVmEndpointProducerBuilder {\n         default AdvancedDirectVmEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);", "fixed": " \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);", "sourceBeforeFix": "logger.debug(\"rapidRefreshFuture scheduleing for {} millis\",millis)", "sourceAfterFix": "logger.trace(\"rapidRefreshFuture scheduleing for {} millis\",millis)"}
{"fixCommitSHA1": "ce53a6874b919d79f06e563b6edd0c7e8302e33f", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": " public class PropertyKey {\n   \n  private static Map<String, PropertyKey> DEFAULT_KEYS_MAP = new HashMap<>();\n   \n  private static Map<PropertyKey, Object> DEFAULT_VALUES = new HashMap<>();\n   public static final PropertyKey CONF_DIR =\n       create(Name.CONF_DIR, String.format(\"${%s}/conf\", Name.HOME));", "fixed": " public class PropertyKey {\n   \n  private static final Map<String, PropertyKey> DEFAULT_KEYS_MAP = new HashMap<>();\n   \n  private static final Map<PropertyKey, Object> DEFAULT_VALUES = new HashMap<>();\n   public static final PropertyKey CONF_DIR =\n       create(Name.CONF_DIR, String.format(\"${%s}/conf\", Name.HOME));", "sourceBeforeFix": "10", "sourceAfterFix": "26"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 18:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 18:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "fixed": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = this.response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f5309e8856186f5105e0bfcefda1273330f36ac0", "projectName": "jersey.jersey", "bugType": "Same Function Less Args", "problem": " \t\tClientConfig jerseyConfig = new ClientConfig();\n \t\tClient client = ClientBuilder.newClient(jerseyConfig);\n\t\tclient = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_PASS, 1));\n \t\tWebTarget resource = client.target(getBaseUri()).path(\"auth-digest\");", "fixed": " \t\tClientConfig jerseyConfig = new ClientConfig();\n \t\tClient client = ClientBuilder.newClient(jerseyConfig);\n\t\tclient = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_PASS));\n \t\tWebTarget resource = client.target(getBaseUri()).path(\"auth-digest\");", "sourceBeforeFix": "new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_INVALIDPASS,1)", "sourceAfterFix": "new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_INVALIDPASS)"}
{"fixCommitSHA1": "644b7c9e7c63b1967c205ee018f42c6a34c200be", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             }\n         }\n        return super.createDataFormat(camelContext);\n     }\n     @Override", "fixed": "             }\n         }\n        return super.doCreateDataFormat(camelContext);\n     }\n     @Override", "sourceBeforeFix": "super.createDataFormat(camelContext)", "sourceAfterFix": "super.doCreateDataFormat(camelContext)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 15809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n }", "fixed": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 10809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n }", "sourceBeforeFix": "id=15804", "sourceAfterFix": "id=10804"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertFalse(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "fixed": "         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WsEndpointBuilder\n             extends\n                 WsEndpointConsumerBuilder, WsEndpointProducerBuilder {\n         default AdvancedWsEndpointBuilder advanced() {", "fixed": "     \n    public interface WsEndpointBuilder\n             extends\n                 WsEndpointConsumerBuilder, WsEndpointProducerBuilder {\n         default AdvancedWsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         long taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 190);\n         watch.restart();\n         Thread.sleep(100);\n         taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 100 millis, was: \" + taken, taken > 90);\n     }\n     public void testStopWatchTaken() throws Exception {", "fixed": "         long taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 150);\n         watch.restart();\n         Thread.sleep(100);\n         taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 100 millis, was: \" + taken, taken > 50);\n     }\n     public void testStopWatchTaken() throws Exception {", "sourceBeforeFix": "taken > 190", "sourceAfterFix": "taken > 150"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4a19c2c078ddf5484e0cb8c1ac075451f158fa40", "projectName": "Atmosphere.atmosphere", "bugType": "Change Unary Operator\t", "problem": "                     switch (p2) {\n                         case AFTER_DEFAULT:\n                         case BEFORE_DEFAULT:\n                            orderResult = 1;\n                             break;\n                     }\n                     break;", "fixed": "                     switch (p2) {\n                         case AFTER_DEFAULT:\n                         case BEFORE_DEFAULT:\n                            orderResult = -1;\n                             break;\n                     }\n                     break;", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f0e67a1474fab9528737cc703fde6c35fdd5e288", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t}\r\n \tprivate void checkCapacity(int len) {\r\n\t\tif(len> bits.length) {\r\n \t\t\tlong[] newBits = new long[len+1];\r\n \t\t\tSystem.arraycopy(bits, 0, newBits, 0, bits.length);\r\n \t\t\tbits = newBits;\r", "fixed": " \t}\r\n \tprivate void checkCapacity(int len) {\r\n\t\tif(len>=bits.length) {\r\n \t\t\tlong[] newBits = new long[len+1];\r\n \t\t\tSystem.arraycopy(bits, 0, newBits, 0, bits.length);\r\n \t\t\tbits = newBits;\r", "sourceBeforeFix": "len > bits.length", "sourceAfterFix": "len >= bits.length"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username);\n     @GET\n     @Path(\"/login\")", "fixed": "         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username) throws Exception;\n     @GET\n     @Path(\"/login\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "fixed": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "7109f6f55968c830c5f43ff798e106ef2f14c71c", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "                 eq((byte) 0),\n                 eq(new GeneralDataCoding(\n                         false,\n                        false,\n                         MessageClass.CLASS1,\n                         Alphabet.ALPHA_DEFAULT)),\n                 eq((byte) 0),", "fixed": "                 eq((byte) 0),\n                 eq(new GeneralDataCoding(\n                         false,\n                        true,\n                         MessageClass.CLASS1,\n                         Alphabet.ALPHA_DEFAULT)),\n                 eq((byte) 0),", "sourceBeforeFix": "new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)", "sourceAfterFix": "new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleDriveEndpointBuilder\n             extends\n                 AdvancedGoogleDriveEndpointConsumerBuilder, AdvancedGoogleDriveEndpointProducerBuilder {\n         default GoogleDriveEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleDriveEndpointBuilder\n             extends\n                 AdvancedGoogleDriveEndpointConsumerBuilder, AdvancedGoogleDriveEndpointProducerBuilder {\n         default GoogleDriveEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "737a3508546a125e900be9d1bb123952c0a81f20", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": " \npublic class UdtChannelOption<T> extends ChannelOption<T> {\n     /**\n* See {@link OptionUDT", "fixed": " \npublic final class UdtChannelOption<T> extends ChannelOption<T> {\n     /**\n* See {@link OptionUDT", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastReplicatedmapEndpointBuilder\n             extends\n                 AdvancedHazelcastReplicatedmapEndpointConsumerBuilder, AdvancedHazelcastReplicatedmapEndpointProducerBuilder {\n         default HazelcastReplicatedmapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastReplicatedmapEndpointBuilder\n             extends\n                 AdvancedHazelcastReplicatedmapEndpointConsumerBuilder, AdvancedHazelcastReplicatedmapEndpointProducerBuilder {\n         default HazelcastReplicatedmapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid status value\", response = Void.class, responseContainer = \"List\") })\n    List<List<Pet>> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status);\n     @GET\n     @Path(\"/findByTags\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid status value\", response = Void.class, responseContainer = \"List\") })\n    List<Pet> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status) throws Exception;\n     @GET\n     @Path(\"/findByTags\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface StompEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedStompEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface StompEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedStompEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSamplingFromExchangeStream() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "fixed": "     public void testSamplingFromExchangeStream() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "94ddfa907427d4545237cfc4f881fc14c59ec7f5", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                 CastUtils.cast(parameters));\n         uri = httpUri.toString();\n        ServletEndpoint result = createServletEndpoint(uri, this, httpUri, clientParams, getHttpConnectionManager(), httpClientConfigurer);\n         if (httpBinding != null) {\n             result.setBinding(httpBinding);\n         }", "fixed": "                 CastUtils.cast(parameters));\n         uri = httpUri.toString();\n        ServletEndpoint result = createServletEndpoint(uri, this, httpUri, clientParams, getClientConnectionManager(), httpClientConfigurer);\n         if (httpBinding != null) {\n             result.setBinding(httpBinding);\n         }", "sourceBeforeFix": "getHttpConnectionManager()", "sourceAfterFix": "getClientConnectionManager()"}
{"fixCommitSHA1": "5f2f072d694275f750d1ee139386cc64a0670f4f", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                 allIdleTimeout =\n                     timer.newTimeout(this, allIdleTimeMillis, TimeUnit.MILLISECONDS);\n                 try {\n                    channelIdle(ctx, IdleState.ALL_IDLE, lastReadTime);\n                 } catch (Throwable t) {\n                     fireExceptionCaught(ctx, t);\n                 }", "fixed": "                 allIdleTimeout =\n                     timer.newTimeout(this, allIdleTimeMillis, TimeUnit.MILLISECONDS);\n                 try {\n                    channelIdle(ctx, IdleState.ALL_IDLE, lastIoTime);\n                 } catch (Throwable t) {\n                     fireExceptionCaught(ctx, t);\n                 }", "sourceBeforeFix": "channelIdle(ctx,IdleState.WRITER_IDLE,lastReadTime)", "sourceAfterFix": "channelIdle(ctx,IdleState.WRITER_IDLE,lastWriteTime)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b519eda44120933736f9fa62d75bba0c1ed47b3d", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": "  */\n @Component\n @Order(Ordered.HIGHEST_PRECEDENCE)\nclass ErrorPageFilter extends AbstractConfigurableEmbeddedServletContainer implements\n\t\tFilter, NonEmbeddedServletContainerFactory {\n \tprivate static Log logger = LogFactory.getLog(ErrorPageFilter.class);", "fixed": "  */\n @Component\n @Order(Ordered.HIGHEST_PRECEDENCE)\npublic class ErrorPageFilter extends AbstractConfigurableEmbeddedServletContainer\n\t\timplements Filter, NonEmbeddedServletContainerFactory {\n \tprivate static Log logger = LogFactory.getLog(ErrorPageFilter.class);", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "fixed": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t}\n \t\tfactory.setConfigurations(Arrays.asList(configurations[0], configurations[1]));\n \t\tfactory.addConfigurations(configurations[2], configurations[3]);\n\t\tthis.container = factory.getEmbdeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) configurations);\n \t\tfor (Configuration configuration : configurations) {\n \t\t\tordered.verify(configuration).configure((WebAppContext) anyObject());", "fixed": " \t\t}\n \t\tfactory.setConfigurations(Arrays.asList(configurations[0], configurations[1]));\n \t\tfactory.addConfigurations(configurations[2], configurations[3]);\n\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) configurations);\n \t\tfor (Configuration configuration : configurations) {\n \t\t\tordered.verify(configuration).configure((WebAppContext) anyObject());", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param file to be opened\n      * @return detail message of {@link FileNotFoundException}\n      */\n    private String getFileNotFoundDetail(File file) throws Exception {\n         try {", "fixed": "      * @param file to be opened\n      * @return detail message of {@link FileNotFoundException}\n      */\n    private static String getFileNotFoundDetail(File file) throws Exception {\n         try {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a5a28bef5e182a059f2dbe1718d7cde06e33cd78", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             }\n             modulePath = jbossHome + File.separatorChar + \"modules\";\n         } else {\n            modulePath = modulePath.split(File.pathSeparator)[1];\n         }\n         File moduleDir = new File(modulePath);\n         if (!moduleDir.exists()) {", "fixed": "             }\n             modulePath = jbossHome + File.separatorChar + \"modules\";\n         } else {\n            modulePath = modulePath.split(File.pathSeparator)[0];\n         }\n         File moduleDir = new File(modulePath);\n         if (!moduleDir.exists()) {", "sourceBeforeFix": "modulePath.split(File.pathSeparator)[1]", "sourceAfterFix": "modulePath.split(File.pathSeparator)[0]"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithArrayInput(@Valid List<User> body);\n     @POST\n     @Path(\"/createWithList\")", "fixed": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithArrayInput(@Valid List<User> body) throws Exception;\n     @POST\n     @Path(\"/createWithList\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6b7e05a672ddf95bd7ee066e878ab90389f5b02c", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tif (currentLocalTransform != renderable.localTransform)\n \t\t\tset(u_localTrans, (currentLocalTransform = renderable.localTransform) == null ? idtMatrix : renderable.localTransform);\n \t\tif (currentModelTransform != renderable.modelTransform)\n\t\t\tset(u_modelTrans, (currentWorldTransform = renderable.modelTransform) == null ? idtMatrix : renderable.modelTransform);\n \t\tif (currentLocalTransform == null && currentModelTransform == null)\n \t\t\tsetWorldTransform(idtMatrix, false);\n \t\telse if (currentLocalTransform == null)", "fixed": " \t\tif (currentLocalTransform != renderable.localTransform)\n \t\t\tset(u_localTrans, (currentLocalTransform = renderable.localTransform) == null ? idtMatrix : renderable.localTransform);\n \t\tif (currentModelTransform != renderable.modelTransform)\n\t\t\tset(u_modelTrans, (currentModelTransform = renderable.modelTransform) == null ? idtMatrix : renderable.modelTransform);\n \t\tif (currentLocalTransform == null && currentModelTransform == null)\n \t\t\tsetWorldTransform(idtMatrix, false);\n \t\telse if (currentLocalTransform == null)", "sourceBeforeFix": "currentWorldTransform=renderable.modelTransform", "sourceAfterFix": "currentModelTransform=renderable.modelTransform"}
{"fixCommitSHA1": "e0aff862bb608004841da3487d94aecb45964e17", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = FILES_BYTES * 1000L / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }", "fixed": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = FILES_BYTES * 1000.0 / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }", "sourceBeforeFix": "1000L * FILE_BYTES", "sourceAfterFix": "1000.0 * FILE_BYTES"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedServletEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default ServletEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedServletEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default ServletEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2b4a0c1d9d2f2b27558951c1bf7776d96bd495e1", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "       String wordString = new String(ca);\n      if (Character.isSpaceChar(origText.charAt(i)) || Character.isISOControl(origText.charAt(i))) {\n         seg = true;\n       } else {", "fixed": "       String wordString = new String(ca);\n      if (Character.isWhitespace(origText.charAt(i)) || Character.isISOControl(origText.charAt(i))) {\n         seg = true;\n       } else {", "sourceBeforeFix": "Character.isSpaceChar(origText.charAt(i))", "sourceAfterFix": "Character.isWhitespace(origText.charAt(i))"}
{"fixCommitSHA1": "3138105b24ae8e2e42f17343118fe801abc355dd", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "         }\n         private Object newOperationTimeoutException(int pollCount, long pollTimeoutMs) {\n            boolean hasResponse = potentialResponse == null;\n             int backupsExpected = expectedBackupCount;\n             int backupsCompleted = availableBackups;", "fixed": "         }\n         private Object newOperationTimeoutException(int pollCount, long pollTimeoutMs) {\n            boolean hasResponse = potentialResponse != null;\n             int backupsExpected = expectedBackupCount;\n             int backupsCompleted = availableBackups;", "sourceBeforeFix": "potentialResponse == null", "sourceAfterFix": "potentialResponse != null"}
{"fixCommitSHA1": "7dc9bddf9a64d9309755accddeb91976371792ed", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Test\n \tpublic void withSquareBrackets() throws Exception {\n\t\tchar[] delimeters = \"._[\".toCharArray();\n \t\tPropertyNamePatternsMatcher matcher = new DefaultPropertyNamePatternsMatcher(\n\t\t\t\tdelimeters, \"aaa\", \"bbbb\", \"ccccc\");\n \t\tassertTrue(matcher.matches(\"bbbb\"));\n \t\tassertTrue(matcher.matches(\"bbbb[4]\"));\n \t\tassertFalse(matcher.matches(\"bbb[4]\"));", "fixed": " \t@Test\n \tpublic void withSquareBrackets() throws Exception {\n\t\tchar[] delimiters = \"._[\".toCharArray();\n \t\tPropertyNamePatternsMatcher matcher = new DefaultPropertyNamePatternsMatcher(\n\t\t\t\tdelimiters, \"aaa\", \"bbbb\", \"ccccc\");\n \t\tassertTrue(matcher.matches(\"bbbb\"));\n \t\tassertTrue(matcher.matches(\"bbbb[4]\"));\n \t\tassertFalse(matcher.matches(\"bbb[4]\"));", "sourceBeforeFix": "new DefaultPropertyNamePatternsMatcher(delimeters,\"aaa\",\"bbbb\",\"ccccc\")", "sourceAfterFix": "new DefaultPropertyNamePatternsMatcher(delimiters,\"aaa\",\"bbbb\",\"ccccc\")"}
{"fixCommitSHA1": "26d97d9b4d5428b695de89ad729b8ef20e93fab1", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "        ErrorHandlerFactory builder = routeContext.getRoute().getErrorHandlerBuilder();\n         if (builder instanceof ErrorHandlerBuilderRef) {", "fixed": "        ErrorHandlerBuilder builder = (ErrorHandlerBuilder)routeContext.getRoute().getErrorHandlerBuilder();\n         if (builder instanceof ErrorHandlerBuilderRef) {", "sourceBeforeFix": "ErrorHandlerFactory builder=routeContext.getRoute().getErrorHandlerBuilder(); ", "sourceAfterFix": "ErrorHandlerBuilder builder=(ErrorHandlerBuilder)routeContext.getRoute().getErrorHandlerBuilder(); "}
{"fixCommitSHA1": "39fe5a830bb4e05a85bef3e52115c708f9409abf", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    TestSuiteEnvironment.getServerAddress(), serverPort);\n         }\n         protected abstract Policy getPolicy();", "fixed": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    CONTAINER_0.equals(containerId) ? TestSuiteEnvironment.getServerAddress() : TestSuiteEnvironment.getServerAddressNode1(),\n                    serverPort);\n         }\n         protected abstract Policy getPolicy();", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void compact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    compact(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void compact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    compact(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "c4669fc5bb8b622188422e3e75e470077eb7d6d2", "projectName": "cucumber.cucumber-jvm", "bugType": "Same Function Swap Args", "problem": "         String someName = \"someName\";\n         RuntimeOptions options = new RuntimeOptions(new Properties(), \"--name\", someName);\n         Pattern actualPattern = (Pattern) options.filters.iterator().next();\n        assertEquals(actualPattern.pattern(), someName);\n     }\n     @Test", "fixed": "         String someName = \"someName\";\n         RuntimeOptions options = new RuntimeOptions(new Properties(), \"--name\", someName);\n         Pattern actualPattern = (Pattern) options.filters.iterator().next();\n        assertEquals(someName, actualPattern.pattern());\n     }\n     @Test", "sourceBeforeFix": "assertEquals(actualPattern.pattern(),someName)", "sourceAfterFix": "assertEquals(someName,actualPattern.pattern())"}
{"fixCommitSHA1": "af87fe0e2580cafb6b563688f119b3d40ae100f2", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    TestSuiteEnvironment.getServerAddress(), serverPort);\n         }\n         protected abstract Policy getPolicy();", "fixed": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    CONTAINER_0.equals(containerId) ? TestSuiteEnvironment.getServerAddress() : TestSuiteEnvironment.getServerAddressNode1(),\n                    serverPort);\n         }\n         protected abstract Policy getPolicy();", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "28e013e68764d727ce67ac93663489e652562788", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t\tgrammarBuilder.append(\"}\\n\");\n \t\tgrammarBuilder.append(\"\\n\");\n \t\tgrammarBuilder.append(\"func (*LeafListener) ExitCall(ctx *CallContext) {\\n\");\n\t\tgrammarBuilder.append(\"\tfmt.Printf(\\\"%s %s\\\", ctx.E().GetStart().GetText(), ctx.EList())\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");\n \t\tgrammarBuilder.append(\"\\n\");\n \t\tgrammarBuilder.append(\"func (*LeafListener) ExitInt(ctx *IntContext) {\\n\");", "fixed": " \t\tgrammarBuilder.append(\"}\\n\");\n \t\tgrammarBuilder.append(\"\\n\");\n \t\tgrammarBuilder.append(\"func (*LeafListener) ExitCall(ctx *CallContext) {\\n\");\n\t\tgrammarBuilder.append(\"\tfmt.Printf(\\\"%s %s\\\", ctx.E().GetStart().GetText(), ctx.EList().String(nil, nil))\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");\n \t\tgrammarBuilder.append(\"\\n\");\n \t\tgrammarBuilder.append(\"func (*LeafListener) ExitInt(ctx *IntContext) {\\n\");", "sourceBeforeFix": "new StringBuilder(709)", "sourceAfterFix": "new StringBuilder(726)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "57ddaae5fd72ff2cef6d179568640b1fac8f4f08", "projectName": "apache.storm", "bugType": "Same Function More Args", "problem": "               }\n             }\n         } catch(IOException e) {\n            throw new RuntimeException(e);\n         }\n     }", "fixed": "               }\n             }\n         } catch(IOException e) {\n            throw new RuntimeException(\"Error during multilang processing\", e);\n         }\n     }", "sourceBeforeFix": "new RuntimeException(e)", "sourceAfterFix": "new RuntimeException(\"Error when launching multilang subprocess\",e)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedWeatherEndpointBuilder\n             extends\n                 AdvancedWeatherEndpointConsumerBuilder, AdvancedWeatherEndpointProducerBuilder {\n         default WeatherEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedWeatherEndpointBuilder\n             extends\n                 AdvancedWeatherEndpointConsumerBuilder, AdvancedWeatherEndpointProducerBuilder {\n         default WeatherEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ae1c9a922bd43a580f838ca538824dd2a86b64f5", "projectName": "brianfrankcooper.YCSB", "bugType": "Change Identifier Used", "problem": "\t\tlong st=System.currentTimeMillis();\n \t\tdb.read(table,keyname,fields,new HashMap<String,ByteIterator>());\n \t\tdb.update(table,keyname,values);\n\t\tlong en=System.currentTimeMillis();\n\t\tMeasurements.getMeasurements().measure(\"READ-MODIFY-WRITE\", (int)(en-st));\n \t}\n \tpublic void doTransactionScan(DB db)", "fixed": "\t\tlong st=System.nanoTime();\n \t\tdb.read(table,keyname,fields,new HashMap<String,ByteIterator>());\n \t\tdb.update(table,keyname,values);\n\t\tlong en=System.nanoTime();\n\t\tMeasurements.getMeasurements().measure(\"READ-MODIFY-WRITE\", (int)((en-st)/1000));\n \t}\n \tpublic void doTransactionScan(DB db)", "sourceBeforeFix": "System.currentTimeMillis()", "sourceAfterFix": "System.nanoTime()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1a5b454c115a5c4ea1239834dd236d806ce0e949", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t */\r\n \tpublic void scrollTexture (float xAmount, float yAmount) {\r\n \t\tfloat[] vertices = this.vertices;\r\n\t\tif (xAmount > 0) {\r\n \t\t\tfloat u = (vertices[U1] + xAmount) % 1;\r\n \t\t\tfloat u2 = u + width / texture.getWidth();\r\n \t\t\tvertices[U1] = u;\r", "fixed": " \t */\r\n \tpublic void scrollTexture (float xAmount, float yAmount) {\r\n \t\tfloat[] vertices = this.vertices;\r\n\t\tif (xAmount != 0) {\r\n \t\t\tfloat u = (vertices[U1] + xAmount) % 1;\r\n \t\t\tfloat u2 = u + width / texture.getWidth();\r\n \t\t\tvertices[U1] = u;\r", "sourceBeforeFix": "xAmount > 0", "sourceAfterFix": "xAmount != 0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e0aff862bb608004841da3487d94aecb45964e17", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = FILES_BYTES * 1000L / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }", "fixed": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = FILES_BYTES * 1000.0 / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }", "sourceBeforeFix": "FILES_BYTES * 1000L", "sourceAfterFix": "FILES_BYTES * 1000.0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CxfRsEndpointBuilder\n             extends\n                 CxfRsEndpointConsumerBuilder, CxfRsEndpointProducerBuilder {\n         default AdvancedCxfRsEndpointBuilder advanced() {", "fixed": "     \n    public interface CxfRsEndpointBuilder\n             extends\n                 CxfRsEndpointConsumerBuilder, CxfRsEndpointProducerBuilder {\n         default AdvancedCxfRsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tthrow new MandatoryModuleException(ex.getModuleId(), \"Got an error while starting a mandatory module: \"\r\n \t\t\t\t\t        + e.getMessage() + \". Check the server logs for more information\");\r\n \t\t\t\t}\r\n\t\t\t\tcatch (Throwable t2) {\r\n \t\t\t\t\tlog.warn(\"caught another error: \", t2);\r", "fixed": " \t\t\t\t\tthrow new MandatoryModuleException(ex.getModuleId(), \"Got an error while starting a mandatory module: \"\r\n \t\t\t\t\t        + e.getMessage() + \". Check the server logs for more information\");\r\n \t\t\t\t}\r\n\t\t\t\tcatch (Exception t2) {\r\n \t\t\t\t\tlog.warn(\"caught another error: \", t2);\r", "sourceBeforeFix": "Throwable t2", "sourceAfterFix": "Exception t2"}
{"fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     \n     private static final String ALLOW_ELEMENT_NAME = \"allow\";\n    \n    private final Deque<PkgControl> stack = new ArrayDeque<>();\n     static {\n         DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);", "fixed": "     \n     private static final String ALLOW_ELEMENT_NAME = \"allow\";\n    \n    private final Deque<ImportControl> stack = new ArrayDeque<>();\n     static {\n         DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);", "sourceBeforeFix": "{@link PkgControl}", "sourceAfterFix": "{@link ImportControl}"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "fixed": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "sourceBeforeFix": "logger.debug(\"rapidRefreshFutureEnd stopping\")", "sourceAfterFix": "logger.trace(\"rapidRefreshFutureEnd stopping\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SlackEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSlackEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SlackEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSlackEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface OpenshiftBuildConfigsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOpenshiftBuildConfigsEndpointBuilder advanced() {", "fixed": "     \n    public interface OpenshiftBuildConfigsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOpenshiftBuildConfigsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.debug(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "fixed": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")", "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "fixed": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic abstract int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AMQPEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAMQPEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AMQPEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAMQPEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "85d8d2fce8253c065ccaa9b02d8a30a58bbea67b", "projectName": "swagger-api.swagger-core", "bugType": "Wrong Function Name", "problem": "                 if (getter != null) {\n                     if (paramType == null) {\n                        paramType = getter.getRawReturnType();\n                     }\n                     for (final Annotation fieldAnnotation : getter.annotations()) {", "fixed": "                 if (getter != null) {\n                     if (paramType == null) {\n                        paramType = getter.getType();\n                     }\n                     for (final Annotation fieldAnnotation : getter.annotations()) {", "sourceBeforeFix": "getter.getRawReturnType()", "sourceAfterFix": "getter.getType()"}
{"fixCommitSHA1": "cbb7f2cf26daf213a6265a99fc27980bfcf4ff89", "projectName": "apache.camel", "bugType": "Delete Throws Exception", "problem": "         return BeanInfo.createParameterMappingStrategy(context);\n     }\n    protected Object lookupBean() throws Exception {\n         return registry.lookup(name);\n     }\n }", "fixed": "         return BeanInfo.createParameterMappingStrategy(context);\n     }\n    protected Object lookupBean() {\n         return registry.lookup(name);\n     }\n }", "sourceBeforeFix": "4", "sourceAfterFix": "4"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "42412be4319b3c5c63368ac7474956f2025db34c", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "                 thread.shutdown();\n             }\n             synchronized (ticket) {\n                ticket.notify();\n             }\n         }\n     }", "fixed": "                 thread.shutdown();\n             }\n             synchronized (ticket) {\n                ticket.notifyAll();\n             }\n         }\n     }", "sourceBeforeFix": "ticket.notify()", "sourceAfterFix": "ticket.notifyAll()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ZendeskEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedZendeskEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ZendeskEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedZendeskEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyGeneric,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "9cbe9bcbaa33825a866bdc8a9bf92f270723d423", "projectName": "apache.hadoop", "bugType": "Same Function More Args", "problem": "         writer.append(logKey, logValue);\n       } catch (Exception e) {\n         LOG.error(\"Couldn't upload logs for \" + containerId\n            + \". Skipping this container.\");\n         return new HashSet<Path>();\n       }\n       this.uploadedFileMeta.addAll(logValue", "fixed": "         writer.append(logKey, logValue);\n       } catch (Exception e) {\n         LOG.error(\"Couldn't upload logs for \" + containerId\n            + \". Skipping this container.\", e);\n         return new HashSet<Path>();\n       }\n       this.uploadedFileMeta.addAll(logValue", "sourceBeforeFix": "LOG.error(\"Cannot create writer for app \" + this.applicationId + \". Skip log upload this time. \")", "sourceAfterFix": "LOG.error(\"Cannot create writer for app \" + this.applicationId + \". Skip log upload this time. \",e1)"}
{"fixCommitSHA1": "183a6fccd65bc0cd6de129aa2c7b35b13bfd2797", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "                     return item;\n                 }\n             }\n            LOGGER.error(\"no property for \" + type + \", \" + format);\n             return null;\n         }", "fixed": "                     return item;\n                 }\n             }\n            LOGGER.debug(\"no property for \" + type + \", \" + format);\n             return null;\n         }", "sourceBeforeFix": "LOGGER.error(\"no property for \" + type + \", \"+ format)", "sourceAfterFix": "LOGGER.debug(\"no property for \" + type + \", \"+ format)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "d33c0ebf8f8f52fb6fb82d615cec50a10627d267", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n\t\t\tthis.port = port.toString();\n \t\t}\n\t\tpublic String getPort() {\n \t\t\treturn this.port;\n \t\t}", "fixed": " \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n\t\t\tthis.port = port;\n \t\t}\n\t\tpublic Integer getPort() {\n \t\t\treturn this.port;\n \t\t}", "sourceBeforeFix": "public String getPort(){   return this.port; } ", "sourceAfterFix": "public Integer getPort(){   return this.port; } "}
{"fixCommitSHA1": "74f9a84ea9679e743f44a5a743b235c3266958e3", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": "  * Abstract base class for nested conditions.\n  *\n  * @author Phillip Webb\n  */\nabstract class AbstractNestedCondition extends SpringBootCondition\n \t\timplements ConfigurationCondition {\n \tprivate final ConfigurationPhase configurationPhase;", "fixed": "  * Abstract base class for nested conditions.\n  *\n  * @author Phillip Webb\n * @since 2.0.1\n  */\npublic abstract class AbstractNestedCondition extends SpringBootCondition\n \t\timplements ConfigurationCondition {\n \tprivate final ConfigurationPhase configurationPhase;", "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result3\");\n        mock.expectedBodiesReceived(\"Hello World 2\", \"Hello World 4\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result3\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\", \"Hello World 4\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World 2\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\")"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @param from The element to copy.\n \t * @return A copy of the given element.\n \t */\n\tpublic T createCopy(T from);\n \t/**\n \t * Creates a copy from the given element, storing the copied result in the given target element.", "fixed": " \t * @param from The element to copy.\n \t * @return A copy of the given element.\n \t */\n\tpublic abstract T createCopy(T from);\n \t/**\n \t * Creates a copy from the given element, storing the copied result in the given target element.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e75b06a12cc6de7b6ffaa998c4c8540230ef5514", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\t\tcase SORT_BOTH_MERGE:      return 2;\n \t\t\tcase SORT_FIRST_MERGE:     return 1;\n \t\t\tcase SORT_SECOND_MERGE:    return 1;\n\t\t\tcase MERGE:                return 0;\n \t\t\tcase HYBRIDHASH_FIRST:     return 1;\n \t\t\tcase HYBRIDHASH_SECOND:    return 1;\n \t\t\tcase MMHASH_FIRST:         return 1;", "fixed": " \t\t\tcase SORT_BOTH_MERGE:      return 2;\n \t\t\tcase SORT_FIRST_MERGE:     return 1;\n \t\t\tcase SORT_SECOND_MERGE:    return 1;\n\t\t\tcase MERGE:                return 1;\n \t\t\tcase HYBRIDHASH_FIRST:     return 1;\n \t\t\tcase HYBRIDHASH_SECOND:    return 1;\n \t\t\tcase MMHASH_FIRST:         return 1;", "sourceBeforeFix": "return 0; ", "sourceAfterFix": "return 1; "}
{"fixCommitSHA1": "a27f765d8c91708483d0e1c6fe8a37676b7bd24d", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "   @Test\n   public void createFileWithTtlTest() throws Exception {\n     CreateFileOptions options =\n        CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(1);\n     long fileId = mFileSystemMaster.createFile(NESTED_FILE_URI, options);\n     FileInfo fileInfo = mFileSystemMaster.getFileInfo(fileId);\n     Assert.assertEquals(fileInfo.getFileId(), fileId);", "fixed": "   @Test\n   public void createFileWithTtlTest() throws Exception {\n     CreateFileOptions options =\n        CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(0);\n     long fileId = mFileSystemMaster.createFile(NESTED_FILE_URI, options);\n     FileInfo fileInfo = mFileSystemMaster.getFileInfo(fileId);\n     Assert.assertEquals(fileInfo.getFileId(), fileId);", "sourceBeforeFix": "CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(1)", "sourceAfterFix": "CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(0)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7f0866434aad634834f152a160dfc87461ef4a15", "projectName": "wildfly.wildfly", "bugType": "Less Specific If", "problem": "             final Map<String, String> baseConfiguration = Collections.unmodifiableMap(tempBaseConfiguration);\n             final Map<String, Map<String, String>> selectedMechanisms = new LinkedHashMap<>();\n            if (overrideDeploymentConfig) {\n                 final Map<String, String> mechanismConfiguration = baseConfiguration;\n                 availableMechanisms.forEach(n -> selectedMechanisms.put(n, mechanismConfiguration));\n             } else {\n                final List<AuthMethodConfig> authMethods = loginConfig == null ? Collections.<AuthMethodConfig> emptyList() : loginConfig.getAuthMethods();\n                 if (authMethods.isEmpty()) {\n                     throw ROOT_LOGGER.noMechanismsSelected();\n                 }", "fixed": "             final Map<String, String> baseConfiguration = Collections.unmodifiableMap(tempBaseConfiguration);\n             final Map<String, Map<String, String>> selectedMechanisms = new LinkedHashMap<>();\n            if (overrideDeploymentConfig || (loginConfig == null)) {\n                 final Map<String, String> mechanismConfiguration = baseConfiguration;\n                 availableMechanisms.forEach(n -> selectedMechanisms.put(n, mechanismConfiguration));\n             } else {\n                final List<AuthMethodConfig> authMethods = loginConfig.getAuthMethods();\n                 if (authMethods.isEmpty()) {\n                     throw ROOT_LOGGER.noMechanismsSelected();\n                 }", "sourceBeforeFix": "overrideDeploymentConfig", "sourceAfterFix": "overrideDeploymentConfig || (loginConfig == null)"}
{"fixCommitSHA1": "2585513b6be984cf2f9219d8e23edb6a84e22ac9", "projectName": "openmrs.openmrs-core", "bugType": "Change Boolean Literal", "problem": " \t\t\tmap.put(\"forms\", Context.getFormService().getForms());\r\n \t\t\tString reason = \"\";\r\n\t\t\tfor (Obs o : encounter.getObsAtTopLevel(false)) {\r\n \t\t\t\tif (o.isVoided()){\r", "fixed": " \t\t\tmap.put(\"forms\", Context.getFormService().getForms());\r\n \t\t\tString reason = \"\";\r\n\t\t\tfor (Obs o : encounter.getObsAtTopLevel(true)) {\r\n \t\t\t\tif (o.isVoided()){\r", "sourceBeforeFix": "encounter.getObsAtTopLevel(false)", "sourceAfterFix": "encounter.getObsAtTopLevel(true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTextureEXT(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "fixed": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTexture(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)", "sourceAfterFix": "GL.glGenTextures(n,toBuffer(textures,offset),0)"}
{"fixCommitSHA1": "a421ca3133ddf727a147e87455a5511444d8d4bb", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "           if (supertypeMethod.getModifiers().contains(Modifier.ABSTRACT)) {\n             ExecutableType methodType = Elements2.getExecutableElementAsMemberOf(\n                 types, supertypeMethod, extendingType);\n            implemetationMethodDescriptors.add(new ImplemetationMethodDescriptor.Builder()\n                 .name(supertypeMethod.getSimpleName().toString())\n                 .returnType(getAnnotatedType(element).getQualifiedName().toString())\n                 .publicMethod()", "fixed": "           if (supertypeMethod.getModifiers().contains(Modifier.ABSTRACT)) {\n             ExecutableType methodType = Elements2.getExecutableElementAsMemberOf(\n                 types, supertypeMethod, extendingType);\n            implementationMethodDescriptors.add(new ImplementationMethodDescriptor.Builder()\n                 .name(supertypeMethod.getSimpleName().toString())\n                 .returnType(getAnnotatedType(element).getQualifiedName().toString())\n                 .publicMethod()", "sourceBeforeFix": "ImmutableSet.Builder<ImplemetationMethodDescriptor>", "sourceAfterFix": "ImmutableSet.Builder<ImplementationMethodDescriptor>"}
{"fixCommitSHA1": "38a6c7171c5c3d76d348d8db8c550412f59b5e7d", "projectName": "pardom.ActiveAndroid", "bugType": "Change Identifier Used", "problem": "\tprotected final <E extends Model> List<E> getMany(Class<? extends Model> type, String foreignKey) {\n \t\treturn new Select().from(type).where(Cache.getTableName(type) + \".\" + foreignKey + \"=?\", getId()).execute();\n \t}", "fixed": "\tprotected final <T extends Model> List<T> getMany(Class<T> type, String foreignKey) {\n \t\treturn new Select().from(type).where(Cache.getTableName(type) + \".\" + foreignKey + \"=?\", getId()).execute();\n \t}", "sourceBeforeFix": "E extends Model", "sourceAfterFix": "T extends Model"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e87c925a50c793e04e8791259fddcf218ae704c8", "projectName": "Atmosphere.atmosphere", "bugType": "Less Specific If", "problem": "         String servletPath = config.getInitParameter(ApplicationConfig.JSR356_MAPPING_PATH);\n         if (servletPath == null) {\n             servletPath = IOUtils.guestServletPath(config);\n            if (servletPath.equals(\"/\")) {\n                 servletPath = PATH +\"}\";\n             }\n         }", "fixed": "         String servletPath = config.getInitParameter(ApplicationConfig.JSR356_MAPPING_PATH);\n         if (servletPath == null) {\n             servletPath = IOUtils.guestServletPath(config);\n            if (servletPath.equals(\"/\") || servletPath.equals(\"/*\")) {\n                 servletPath = PATH +\"}\";\n             }\n         }", "sourceBeforeFix": "servletPath.equals(\"/\")", "sourceAfterFix": "servletPath.equals(\"/\") || servletPath.equals(\"/*\")"}
{"fixCommitSHA1": "6cdc9df75435ba869cf4a4d6a5f2d398439a16f1", "projectName": "alibaba.druid", "bugType": "Wrong Function Name", "problem": "                         try {\n                             notEmpty.signalAll();\n                         } finally {\n                            lock.lock();\n                         }\n                     }", "fixed": "                         try {\n                             notEmpty.signalAll();\n                         } finally {\n                            lock.unlock();\n                         }\n                     }", "sourceBeforeFix": "lock.lock()", "sourceAfterFix": "lock.unlock()"}
{"fixCommitSHA1": "40ae31b260a4fe2205b21cc5c446ae9428faac06", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     private void writeDomainController(final XMLExtendedStreamWriter writer, final ModelNode modelNode) throws XMLStreamException {\n         writer.writeStartElement(Element.DOMAIN_CONTROLLER.getLocalName());\n        if (modelNode.has(LOCAL)) {\n             writer.writeEmptyElement(Element.LOCAL.getLocalName());\n         }\n        if (modelNode.has(REMOTE)) {\n             writer.writeStartElement(Element.REMOTE.getLocalName());\n             final ModelNode remote = modelNode.get(REMOTE);\n             if (remote.has(HOST)) {", "fixed": "     private void writeDomainController(final XMLExtendedStreamWriter writer, final ModelNode modelNode) throws XMLStreamException {\n         writer.writeStartElement(Element.DOMAIN_CONTROLLER.getLocalName());\n        if (modelNode.hasDefined(LOCAL)) {\n             writer.writeEmptyElement(Element.LOCAL.getLocalName());\n         }\n        else if (modelNode.hasDefined(REMOTE)) {\n             writer.writeStartElement(Element.REMOTE.getLocalName());\n             final ModelNode remote = modelNode.get(REMOTE);\n             if (remote.has(HOST)) {", "sourceBeforeFix": "modelNode.has(LOCAL)", "sourceAfterFix": "modelNode.hasDefined(LOCAL)"}
{"fixCommitSHA1": "c2014d82a6ede8518962a250d1ad7130a93b1575", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "    * @return the percentage of the file stored in the given tier\n    */\n   public int getOnTierPercentage(String tierAlias) {\n    Long sizeOnTier = mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0;\n     return (int) (100 * sizeOnTier / mSize);\n   }", "fixed": "    * @return the percentage of the file stored in the given tier\n    */\n   public int getOnTierPercentage(String tierAlias) {\n    Long sizeOnTier = mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0L;\n     return (int) (100 * sizeOnTier / mSize);\n   }", "sourceBeforeFix": "mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0", "sourceAfterFix": "mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0L"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.debug(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "fixed": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")", "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0e8e5ba702fbbea71f8cffc063e2d873cbebe83e", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForNone\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForNone\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();", "fixed": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();", "sourceBeforeFix": "hazelcastFactory.newHazelcastInstance()", "sourceAfterFix": "hazelcastFactory.newHazelcastInstance(newConfig())"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param methodDef method definition token.\n      * @return true if a method can be overridden in a subclass.\n      */\n    private boolean canBeOverridden(DetailAST methodDef) {\n         final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);\n         return ScopeUtils.getSurroundingScope(methodDef).isIn(Scope.PROTECTED)\n             && !ScopeUtils.isInInterfaceOrAnnotationBlock(methodDef)", "fixed": "      * @param methodDef method definition token.\n      * @return true if a method can be overridden in a subclass.\n      */\n    private static boolean canBeOverridden(DetailAST methodDef) {\n         final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);\n         return ScopeUtils.getSurroundingScope(methodDef).isIn(Scope.PROTECTED)\n             && !ScopeUtils.isInInterfaceOrAnnotationBlock(methodDef)", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c882d23367e3d5dbec8574b8fef5d7be176e76aa", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Binary Operator", "problem": "       }\n     }\n     boolean overwriteOriginalNer = false;\n    if (prevNerEndIndex != (start-1) && nextNerStartIndex != end) {\n     } else if (startNer == null) {", "fixed": "       }\n     }\n     boolean overwriteOriginalNer = false;\n    if (prevNerEndIndex != (start-1) || nextNerStartIndex != end) {\n     } else if (startNer == null) {", "sourceBeforeFix": "prevNerEndIndex != (start - 1) && nextNerStartIndex != end", "sourceAfterFix": "prevNerEndIndex != (start - 1) || nextNerStartIndex != end"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "1841a0dde698ed6d828aaf92d616fe16fe432868", "projectName": "gephi.gephi", "bugType": "More Specific If", "problem": "         markTime++;\n        if (vizConfig.isShowArrows() && dataBridge.isDirected()) {\n             gl.glBegin(GL2.GL_TRIANGLES);\n             for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n                 EdgeModel obj = itr.next();", "fixed": "         markTime++;\n        if (edgeClass.isEnabled() && vizConfig.isShowArrows() && dataBridge.isDirected()) {\n             gl.glBegin(GL2.GL_TRIANGLES);\n             for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n                 EdgeModel obj = itr.next();", "sourceBeforeFix": "vizConfig.isShowArrows() && dataBridge.isDirected()", "sourceAfterFix": "edgeClass.isEnabled() && vizConfig.isShowArrows() && dataBridge.isDirected()"}
{"fixCommitSHA1": "5d105e75982c88ffc958ef9de14266ae8522a0f9", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "     final boolean useCache = query.getContextUseCache(true)\n         && strategy != null\n        && cacheConfig.isPopulateCache();\n     final Cache.NamedKey key;\n     if(strategy != null && (useCache || populateCache)) {", "fixed": "     final boolean useCache = query.getContextUseCache(true)\n         && strategy != null\n        && cacheConfig.isUseCache();\n     final Cache.NamedKey key;\n     if(strategy != null && (useCache || populateCache)) {", "sourceBeforeFix": "cacheConfig.isPopulateCache()", "sourceAfterFix": "cacheConfig.isUseCache()"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result3\");\n        mock.expectedBodiesReceived(\"Hello World 2\", \"Hello World 4\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result3\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\", \"Hello World 4\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World 3\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World 3\")"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "353cfe61160ef9355cc5e09fa135e81cb0cf0450", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         try {\n             SimpleRegistry registry = new SimpleRegistry();\n            registry.put(\"myConf\", new XmlConfiguration(getClass().getResource(\"/ehcache/ehcache-file-config.xml\")));\n             context = new DefaultCamelContext(registry);\n             context.addRoutes(new RouteBuilder() {", "fixed": "         try {\n             SimpleRegistry registry = new SimpleRegistry();\n            registry.bind(\"myConf\", new XmlConfiguration(getClass().getResource(\"/ehcache/ehcache-file-config.xml\")));\n             context = new DefaultCamelContext(registry);\n             context.addRoutes(new RouteBuilder() {", "sourceBeforeFix": "registry.put(\"myManager\",cacheManager)", "sourceAfterFix": "registry.bind(\"myManager\",cacheManager)"}
{"fixCommitSHA1": "fb8fc104115926f045d7898b0c58b647f30fb602", "projectName": "neo4j.neo4j", "bugType": "Same Function Swap Args", "problem": "         JaxRsResponse response = httpPostIndexRelationshipRoot( JsonHelper.createJsonFrom( indexSpecification ) );\n         assertEquals( 201, response.getStatus() );\n         assertNotNull( response.getHeaders().get( \"Location\" ).get( 0 ) );\n        assertEquals( helper.getRelationshipIndexes().length, 1 );\n         assertNotNull( helper.getRelationshipIndex( indexName ) );\n     }", "fixed": "         JaxRsResponse response = httpPostIndexRelationshipRoot( JsonHelper.createJsonFrom( indexSpecification ) );\n         assertEquals( 201, response.getStatus() );\n         assertNotNull( response.getHeaders().get( \"Location\" ).get( 0 ) );\n        assertEquals( 1, helper.getRelationshipIndexes().length);\n         assertNotNull( helper.getRelationshipIndex( indexName ) );\n     }", "sourceBeforeFix": "assertEquals(helper.getRelationshipIndexes().length,1)", "sourceAfterFix": "assertEquals(1,helper.getRelationshipIndexes().length)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface YammerEndpointBuilder\n             extends\n                 YammerEndpointConsumerBuilder, YammerEndpointProducerBuilder {\n         default AdvancedYammerEndpointBuilder advanced() {", "fixed": "     \n    public interface YammerEndpointBuilder\n             extends\n                 YammerEndpointConsumerBuilder, YammerEndpointProducerBuilder {\n         default AdvancedYammerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.debug(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "fixed": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.trace(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "sourceBeforeFix": "logger.debug(\"myq ReturnCode: {}\",returnCode)", "sourceAfterFix": "logger.trace(\"myq ReturnCode: {}\",returnCode)"}
{"fixCommitSHA1": "ff34b04700d0417df1049e4d749fdf430076965b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     }\n    private static void appendNodeText(StringBuffer result, Node node, boolean fixLinks) {\n         final String name = transformXmlToJavaDocName(node.getNodeName());\n         final boolean list = \"ol\".equals(name) || \"ul\".equals(name);\n         final boolean newLineOpenBefore = list || \"p\".equals(name) || \"pre\".equals(name)", "fixed": "     }\n    private static void appendNodeText(StringBuilder result, Node node, boolean fixLinks) {\n         final String name = transformXmlToJavaDocName(node.getNodeName());\n         final boolean list = \"ol\".equals(name) || \"ul\".equals(name);\n         final boolean newLineOpenBefore = list || \"p\".equals(name) || \"pre\".equals(name)", "sourceBeforeFix": "final StringBuffer result=new StringBuffer(20); ", "sourceAfterFix": "final StringBuilder result=new StringBuilder(20); "}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NatsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedNatsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface NatsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedNatsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Ignoring duplicate class \" + className)", "sourceAfterFix": "LOG.warn(\"Ignoring duplicate class \" + className)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GrpcEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGrpcEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GrpcEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGrpcEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f2338bb71559d99dd76563b5cca93b8bd518b4d7", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "    *\n    * @param subject the parent subject, set to null if not present\n    */\n  private FileSystemContext(Subject subject) {\n     mParentSubject = subject;\n     init();\n   }", "fixed": "    *\n    * @param subject the parent subject, set to null if not present\n    */\n  public FileSystemContext(Subject subject) {\n     mParentSubject = subject;\n     init();\n   }", "sourceBeforeFix": "33", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "0fdbc8a43243c636f2d551e904c39f580ad69bf0", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": "     moveByMinutes(9 * 60 * 24);\n    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000, 200);", "fixed": "     moveByMinutes(9 * 60 * 24);\n    executeJobExecutorForTime(10000, 200);", "sourceBeforeFix": "waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000,200)", "sourceAfterFix": "executeJobExecutorForTime(10000,200)"}
{"fixCommitSHA1": "3ae343b768bae5973a5634c8e287ae1173e30248", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "             assert amt > 0;\n             prioritizableForTree -= amt;\n             if (parent != null) {\n                parent.decrementPrioritizableForTree(amt);\n             }\n         }", "fixed": "             assert amt > 0;\n             prioritizableForTree -= amt;\n             if (parent != null) {\n                parent.decrementPrioritizableForTree0(amt);\n             }\n         }", "sourceBeforeFix": "parent.incrementPrioritizableForTree(amt,oldParent)", "sourceAfterFix": "parent.incrementPrioritizableForTree0(amt,oldParent)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "78cee55f0fc0c43885fc2254e2b14939e17224ee", "projectName": "apache.flink", "bugType": "Same Function Less Args", "problem": " \t\t}\n \t\tfinal int numSubtasks = getNumberOfSubtasks();\n\t\tfinal List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(numSubtasks);\n \t\tList<FileStatus> files = new ArrayList<FileStatus>();", "fixed": " \t\t}\n \t\tfinal int numSubtasks = getNumberOfSubtasks();\n\t\tfinal List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>();\n \t\tList<FileStatus> files = new ArrayList<FileStatus>();", "sourceBeforeFix": "new ArrayList<FileInputSplit>(numSubtasks)", "sourceAfterFix": "new ArrayList<FileInputSplit>()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n     /**", "fixed": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n     /**", "sourceBeforeFix": "id=15800", "sourceAfterFix": "id=10800"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IOTAEndpointBuilder\n             extends\n                 IOTAEndpointConsumerBuilder, IOTAEndpointProducerBuilder {\n         default AdvancedIOTAEndpointBuilder advanced() {", "fixed": "     \n    public interface IOTAEndpointBuilder\n             extends\n                 IOTAEndpointConsumerBuilder, IOTAEndpointProducerBuilder {\n         default AdvancedIOTAEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic boolean invertNormalizedKey();", "fixed": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic abstract boolean invertNormalizedKey();", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "8018d1af58330b6d21c858fa5ebfee6a66cd10b3", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "           out.println(keyName + \" has been successfully deleted.\");\n           printProviderWritten();\n         } catch (IOException e) {\n          out.println(keyName + \" has not been deleted.\");\n           throw e;\n         }\n       }", "fixed": "           out.println(keyName + \" has been successfully deleted.\");\n           printProviderWritten();\n         } catch (IOException e) {\n          out.println(keyName + \" has not been deleted. \" + e.toString());\n           throw e;\n         }\n       }", "sourceBeforeFix": "e.getMessage()", "sourceAfterFix": "e.toString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a2eab9e8e70af1aee9585bda90a1bce3ee6276dd", "projectName": "wildfly.wildfly", "bugType": "More Specific If", "problem": "             final String server = SERVER.resolveModelAttribute(context, subModel).asString();\n             final ServiceController<?> controller = context.getServiceRegistry(false).getService(UndertowService.deploymentServiceName(server, host, path));\nif (controller.getState() != ServiceController.State.UP){\n                 return;\n             }", "fixed": "             final String server = SERVER.resolveModelAttribute(context, subModel).asString();\n             final ServiceController<?> controller = context.getServiceRegistry(false).getService(UndertowService.deploymentServiceName(server, host, path));\nif (controller != null && controller.getState() != ServiceController.State.UP){\n                 return;\n             }", "sourceBeforeFix": "controller.getState() != ServiceController.State.UP", "sourceAfterFix": "controller != null && controller.getState() != ServiceController.State.UP"}
{"fixCommitSHA1": "f296eecca996e1a71884330e20388dd28ddc790b", "projectName": "google.closure-compiler", "bugType": "Same Function More Args", "problem": "    */\n   @Override\n   public ObjectType getInstanceType() {\n    Preconditions.checkState(hasInstanceType());\n     return typeOfThis.toObjectType();\n   }", "fixed": "    */\n   @Override\n   public ObjectType getInstanceType() {\n    Preconditions.checkState(hasInstanceType(), \"Expected a constructor; got %s\", this);\n     return typeOfThis.toObjectType();\n   }", "sourceBeforeFix": "Preconditions.checkState(hasInstanceType())", "sourceAfterFix": "Preconditions.checkState(hasInstanceType(),\"Expected a constructor; got %s\",this)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJMXEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default JMXEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJMXEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default JMXEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGitEndpointBuilder\n             extends\n                 AdvancedGitEndpointConsumerBuilder, AdvancedGitEndpointProducerBuilder {\n         default GitEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGitEndpointBuilder\n             extends\n                 AdvancedGitEndpointConsumerBuilder, AdvancedGitEndpointProducerBuilder {\n         default GitEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "849b3ba2b1282a89d8cf60a10891ea11a9e16bb4", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "                            HttpServletRequest request,\n                            HttpServletResponse response) throws IOException, ServletException {\n             if (\"GET\".equalsIgnoreCase(request.getMethod())) {\n                response.addHeader(\"target\", r.getUri().toString());\n                 response.setStatus(HttpServletResponse.SC_OK);\n} else {\n                 response.sendError(HttpServletResponse.SC_FORBIDDEN);", "fixed": "                            HttpServletRequest request,\n                            HttpServletResponse response) throws IOException, ServletException {\n             if (\"GET\".equalsIgnoreCase(request.getMethod())) {\n                response.addHeader(\"target\", r.getUri().getPath());\n                 response.setStatus(HttpServletResponse.SC_OK);\n} else {\n                 response.sendError(HttpServletResponse.SC_FORBIDDEN);", "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}
{"fixCommitSHA1": "cb84b2788aeed6aad2bc4b1acb98290e060861e2", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       Assert.assertEquals(1, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "fixed": "       Assert.assertEquals(1, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "sourceBeforeFix": "ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())", "sourceAfterFix": "ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "48ea8f3eaa9a3047893d0acd5304035912ebb681", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         requireNonNull(systemMemoryContext, \"systemMemoryContext is null\");\n         this.bufferMemoryUsage = systemMemoryContext.newLocalMemoryContext();\n         this.fixedMemoryUsage = systemMemoryContext.newLocalMemoryContext();\n        this.fixedMemoryUsage.setBytes(sliceInput.length());\n         if (!decompressor.isPresent()) {\n             this.current = sliceInput;", "fixed": "         requireNonNull(systemMemoryContext, \"systemMemoryContext is null\");\n         this.bufferMemoryUsage = systemMemoryContext.newLocalMemoryContext();\n         this.fixedMemoryUsage = systemMemoryContext.newLocalMemoryContext();\n        this.fixedMemoryUsage.setBytes(sliceInput.getRetainedSize());\n         if (!decompressor.isPresent()) {\n             this.current = sliceInput;", "sourceBeforeFix": "sliceInput.length()", "sourceAfterFix": "sliceInput.getRetainedSize()"}
{"fixCommitSHA1": "7ce110d5b6334d4e13fca74bae58f0522afc9fed", "projectName": "alibaba.druid", "bugType": "Change Numeric Literal", "problem": "         assertEquals(2, visitor.getColumns().size());\n        assertEquals(4, visitor.getTables().size());\n     }\n     public void test_1() throws Exception {", "fixed": "         assertEquals(2, visitor.getColumns().size());\n        assertEquals(2, visitor.getTables().size());\n     }\n     public void test_1() throws Exception {", "sourceBeforeFix": "assertEquals(4,visitor.getTables().size())", "sourceAfterFix": "assertEquals(2,visitor.getTables().size())"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"redis\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"redis\")"}
{"fixCommitSHA1": "fdac963d5ccdb0397cc069d701bccd6bd04eae5e", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tchaining = false;\n\t\tStreamLoop iteration = new StreamLoop(iterationID, getStreamNode(iterationHead), timeOut);\n \t\tstreamLoops.put(iterationID, iteration);\n \t\tvertexIDtoLoop.put(vertexID, iteration);", "fixed": " \t\tchaining = false;\n\t\tStreamLoop iteration = new StreamLoop(iterationID, getStreamNode(vertexID), timeOut);\n \t\tstreamLoops.put(iterationID, iteration);\n \t\tvertexIDtoLoop.put(vertexID, iteration);", "sourceBeforeFix": "getStreamNode(iterationHead)", "sourceAfterFix": "getStreamNode(vertexID)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "fixed": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic abstract boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();", "fixed": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "b1aa0100b3f37551bcd8507d168449d8b03c5c57", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "             expand(view, absNode);\n         }\n        graphVersion.incNodeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "fixed": "             expand(view, absNode);\n         }\n        graphVersion.incNodeAndEdgeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "sourceBeforeFix": "graphVersion.incNodeVersion()", "sourceAfterFix": "graphVersion.incNodeAndEdgeVersion()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "c2d5b41fb48cc2b913a2a04d2b68aa4369acac6a", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Set parse tree.\n      * @param parseTree DetailAST parse tree.\n      */\n    final void setParseTree(DetailAST parseTree) {\n         ((AST) root).setFirstChild(parseTree);\n     }", "fixed": "      * Set parse tree.\n      * @param parseTree DetailAST parse tree.\n      */\n    protected final void setParseTree(DetailAST parseTree) {\n         ((AST) root).setFirstChild(parseTree);\n     }", "sourceBeforeFix": "16", "sourceAfterFix": "20"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "93facb514e158589060eacc69e50cc7ff76082b2", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (keys.isEmpty()) {\n             return;\n         }\n        final Collection<Data> dataKeys = convertKeysToData(keys);\n         if (replaceExistingValues) {\n             invalidateNearCache(dataKeys);\n         }", "fixed": "         if (keys.isEmpty()) {\n             return;\n         }\n        final List<Data> dataKeys = convertKeysToData(keys);\n         if (replaceExistingValues) {\n             invalidateNearCache(dataKeys);\n         }", "sourceBeforeFix": "Collection<Data>", "sourceAfterFix": "List<Data>"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "02759f2d8c58092421f6b34f3585256baaf44f9d", "projectName": "apache.hbase", "bugType": "Same Function More Args", "problem": "     }\n     if (qualifierName[start] == '.' || qualifierName[start] == '-') {\n      throw new IllegalArgumentException(\"Illegal first character <\" + qualifierName[0] +\n                                         \"> at 0. Namespaces can only start with alphanumeric \" +\n                                          \"characters': i.e. [a-zA-Z_0-9]: \" +\n                                         Bytes.toString(qualifierName));\n     }\n     for (int i = start; i < end; i++) {\n       if (Character.isLetterOrDigit(qualifierName[i]) ||", "fixed": "     }\n     if (qualifierName[start] == '.' || qualifierName[start] == '-') {\n      throw new IllegalArgumentException(\"Illegal first character <\" + qualifierName[start] +\n                                         \"> at 0. \" + (isSnapshot ? \"Snapshot\" : \"User-space table\") +\n                                         \" qualifiers can only start with 'alphanumeric \" +\n                                          \"characters': i.e. [a-zA-Z_0-9]: \" +\n                                         Bytes.toString(qualifierName, start, end));\n     }\n     for (int i = start; i < end; i++) {\n       if (Character.isLetterOrDigit(qualifierName[i]) ||", "sourceBeforeFix": "Bytes.toString(qualifierName)", "sourceAfterFix": "Bytes.toString(qualifierName,start,end)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "d0d25198716e23bb206e278f35ee4eeb6d00ba2c", "projectName": "netty.netty", "bugType": "Change Unary Operator\t", "problem": "     }\n     public boolean isEndOfInput() throws Exception {\n        return hasNextChunk();\n     }\n     public void close() throws Exception {", "fixed": "     }\n     public boolean isEndOfInput() throws Exception {\n        return !hasNextChunk();\n     }\n     public void close() throws Exception {", "sourceBeforeFix": "hasNextChunk()", "sourceAfterFix": "!hasNextChunk()"}
{"fixCommitSHA1": "463750c397e836dbcea5cee0d960c4551f6cebaf", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);", "fixed": "       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);", "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}
{"fixCommitSHA1": "fcea9dfeb6b2e12cb04602baac67b3a1c3cb58c9", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "     SimpleAttributeDefinition VALUE = SimpleAttributeDefinitionBuilder.create(\"value\", ModelType.STRING).build();\n    SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create(\"new-level\", ModelType.STRING).\n             setCorrector(CaseParameterCorrector.TO_UPPER).\n             setValidator(new LogLevelValidator(true)).\n             build();", "fixed": "     SimpleAttributeDefinition VALUE = SimpleAttributeDefinitionBuilder.create(\"value\", ModelType.STRING).build();\n    SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create(\"new-level\", ModelType.STRING, true).\n             setCorrector(CaseParameterCorrector.TO_UPPER).\n             setValidator(new LogLevelValidator(true)).\n             build();", "sourceBeforeFix": "SimpleAttributeDefinitionBuilder.create(\"max-level\",ModelType.STRING)", "sourceAfterFix": "SimpleAttributeDefinitionBuilder.create(\"max-level\",ModelType.STRING,true)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,value)"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "3ce5556c31e627cc5e47fddf0a639f9e1fa32a3b", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     }\n     if (!MIME_TYPE.equalsIgnoreCase(body.mimeType())) {\n      throw new IllegalArgumentException(\"Expected a proto but was: \" + body.mimeType());\n     }\n     InputStream in = null;", "fixed": "     }\n     if (!MIME_TYPE.equalsIgnoreCase(body.mimeType())) {\n      throw new ConversionException(\"Expected a proto but was: \" + body.mimeType());\n     }\n     InputStream in = null;", "sourceBeforeFix": "new IllegalArgumentException(\"Expected a proto but was: \" + body.mimeType())", "sourceAfterFix": "new ConversionException(\"Expected a proto but was: \" + body.mimeType())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CordaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCordaEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CordaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCordaEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c9a1cc9df3dc4fe2eef78ad6090a9b1d95a02557", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             .setXmlName(Attribute.FLUSH_LOCK_TIMEOUT.getLocalName())\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(1))\n             .build();\n     static final SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.MODIFICATION_QUEUE_SIZE, ModelType.INT, true)", "fixed": "             .setXmlName(Attribute.FLUSH_LOCK_TIMEOUT.getLocalName())\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(1L))\n             .build();\n     static final SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.MODIFICATION_QUEUE_SIZE, ModelType.INT, true)", "sourceBeforeFix": "new ModelNode().set(25000)", "sourceAfterFix": "new ModelNode().set(25000L)"}
{"fixCommitSHA1": "378e87f1e3bf8b2451ca511668954b707680b843", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "  * @author <a href=\"mailto:checkstyle@puppycrawl.com\">Oliver Burn</a>\n  * @version 1.0\n  */\nclass LocalizedMessage\n     implements Comparable\n {\n     ", "fixed": "  * @author <a href=\"mailto:checkstyle@puppycrawl.com\">Oliver Burn</a>\n  * @version 1.0\n  */\npublic class LocalizedMessage\n     implements Comparable\n {\n     ", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f20b7f01e498c2f2f0e17a86e238f68a9e9460e4", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "             config = new DefaultAsyncHttpClientConfig.Builder().build();\n             client = new DefaultAsyncHttpClient(config);\n         } else {\n            client = new DefaultAsyncHttpClient();\n         }\n         return client;\n     }", "fixed": "             config = new DefaultAsyncHttpClientConfig.Builder().build();\n             client = new DefaultAsyncHttpClient(config);\n         } else {\n            client = new DefaultAsyncHttpClient(config);\n         }\n         return client;\n     }", "sourceBeforeFix": "new DefaultAsyncHttpClient()", "sourceAfterFix": "new DefaultAsyncHttpClient(config)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "213109c115e65588b265650eee80fad7652b2129", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\ttry {\r\n \t\t\tLwjglMusic music = new LwjglMusic(((LwjglFileHandle)file));\r\n \t\t\treturn music;\r\n\t\t} catch (Exception e) {\r\n \t\t\tthrow new GdxRuntimeException(\"Couldn't create Music instance from file '\" + file + \"'\", e);\r\n \t\t}\r\n \t}\r", "fixed": " \t\ttry {\r\n \t\t\tLwjglMusic music = new LwjglMusic(((LwjglFileHandle)file));\r\n \t\t\treturn music;\r\n\t\t} catch (Throwable e) {\r\n \t\t\tthrow new GdxRuntimeException(\"Couldn't create Music instance from file '\" + file + \"'\", e);\r\n \t\t}\r\n \t}\r", "sourceBeforeFix": "Exception e", "sourceAfterFix": "Throwable e"}
{"fixCommitSHA1": "619ff2bc073d1b8859c8c8e1fa351b7858529670", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public String toString() {\n        return END + \" End Message Interceptor\";\n     }\n }", "fixed": "     @Override\n     public String toString() {\n        return end + \" End Message Interceptor\";\n     }\n }", "sourceBeforeFix": "END + \" End Message Interceptor\"", "sourceAfterFix": "end + \" End Message Interceptor\""}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node1)", "sourceAfterFix": "node1.isEquivalentTo(node1)"}
{"fixCommitSHA1": "3066e39a4024e88b26e3346a93bd5b9b56dcefed", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "setLowHighExpected(lowResults, highResults, expectedResults, BLANC_F1, 46.00, 47.25, 46.68);\nsetLowHighExpected(lowResults, highResults, expectedResults, CONLL_SCORE, 53.75, 54.00, 54.01);\n     BenchmarkingHelper.benchmarkResults(results, lowResults, highResults, expectedResults);\n   }", "fixed": "setLowHighExpected(lowResults, highResults, expectedResults, BLANC_F1, 46.00, 47.25, 46.68);\nsetLowHighExpected(lowResults, highResults, expectedResults, CONLL_SCORE, 53.75, 54.10, 54.01);\n     BenchmarkingHelper.benchmarkResults(results, lowResults, highResults, expectedResults);\n   }", "sourceBeforeFix": "setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,54.01)", "sourceAfterFix": "setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.10,54.01)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                         public void process(Exchange exchange) throws Exception {\n                             Random ran = new Random();\n                            int delay = ran.nextInt(500) + 10;\n                             Thread.sleep(delay);\n                         }\n                     }).to(\"mock:result\");", "fixed": "                         public void process(Exchange exchange) throws Exception {\n                             Random ran = new Random();\n                            int delay = ran.nextInt(250) + 10;\n                             Thread.sleep(delay);\n                         }\n                     }).to(\"mock:result\");", "sourceBeforeFix": "ran.nextInt(500)", "sourceAfterFix": "ran.nextInt(250)"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fc57b927e19dd54c6c79b4d0987f0d3b97b6c22f", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "         }\n     }\n    private class EmptyIterator implements Iterator {\n         @Override\n         public boolean hasNext() {", "fixed": "         }\n     }\n    private static class EmptyIterator implements Iterator {\n         @Override\n         public boolean hasNext() {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "6569d3735d3e5bc95a0bbe3302a8471d98bd4b11", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         if (data == null) {\n             return false;\n         }\n        final String[] strList = bytesToString(data).split(\"&\");\n         return authenticate(command, strList[0], strList.length > 1 ? strList[1] : null);\n     }", "fixed": "         if (data == null) {\n             return false;\n         }\n        final String[] strList = bytesToString(data).split(\"&\", -1);\n         return authenticate(command, strList[0], strList.length > 1 ? strList[1] : null);\n     }", "sourceBeforeFix": "bytesToString(data).split(\"&\")", "sourceAfterFix": "bytesToString(data).split(\"&\",-1)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "fixed": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "28474aa30adebc397ecdb993d62317e5659fce4a", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": "  *\n  * @author Gary Russell\n  * @author Stephane Nicoll\n  * @since 1.5.0\n  */\n @ConfigurationProperties(prefix = \"spring.kafka\")", "fixed": "  *\n  * @author Gary Russell\n  * @author Stephane Nicoll\n * @author Artem Bilan\n  * @since 1.5.0\n  */\n @ConfigurationProperties(prefix = \"spring.kafka\")", "sourceBeforeFix": "Long autoCommitInterval", "sourceAfterFix": "Integer autoCommitInterval"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),args.rest())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retLong();\n     }\n    private void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "fixed": "                 .retLong();\n     }\n    private static void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(LLOAD, context.var(\"long\"));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n         _seperator(mw, context);", "fixed": "         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n         _seperator(mw, context);", "sourceBeforeFix": "context.var(\"long\")", "sourceAfterFix": "context.var(\"long\",2)"}
{"fixCommitSHA1": "6ad626ae51a157306ddf4165f13ff5eb5b4d5e8b", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t@AfterClass\n \tpublic static void tearDown() throws Exception {\n \t\tif (NIO_GROUP != null) {\n\t\t\tNIO_GROUP.shutdownGracefully();\n \t\t}\n \t}", "fixed": " \t@AfterClass\n \tpublic static void tearDown() throws Exception {\n \t\tif (NIO_GROUP != null) {\n\t\t\tNIO_GROUP.shutdownGracefully(0, 10, TimeUnit.SECONDS);\n \t\t}\n \t}", "sourceBeforeFix": "group.shutdownGracefully()", "sourceAfterFix": "group.shutdownGracefully(0,10,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n \t/**\n \t * Get a listing or important variables used in openmrs", "fixed": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t/**\n \t * Get a listing or important variables used in openmrs", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DirectVmEndpointBuilder\n             extends\n                 DirectVmEndpointConsumerBuilder, DirectVmEndpointProducerBuilder {\n         default AdvancedDirectVmEndpointBuilder advanced() {", "fixed": "     \n    public interface DirectVmEndpointBuilder\n             extends\n                 DirectVmEndpointConsumerBuilder, DirectVmEndpointProducerBuilder {\n         default AdvancedDirectVmEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 Optional.empty());\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypes()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", null)", "fixed": "                 Optional.empty());\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", null)", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\tfield.setAccessible(true);\r\n \t\t\tinit((ServletConfig) field.get(this));\r\n \t\t}\r\n\t\tcatch (Throwable ex) {\r\n \t\t\tlog.error(ex);\r\n \t\t}\r\n \t}\r", "fixed": " \t\t\tfield.setAccessible(true);\r\n \t\t\tinit((ServletConfig) field.get(this));\r\n \t\t}\r\n\t\tcatch (Exception ex) {\r\n \t\t\tlog.error(ex);\r\n \t\t}\r\n \t}\r", "sourceBeforeFix": "Throwable ex", "sourceAfterFix": "Exception ex"}
{"fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n    assertEquals(4, stopwatch.elapsedMillis());\n   }\n   public void testElapsedMillis_multipleSegments() {", "fixed": "     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n    assertEquals(4, stopwatch.elapsed(MILLISECONDS));\n   }\n   public void testElapsedMillis_multipleSegments() {", "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL11.glGetFloat(pname,params)", "sourceAfterFix": "GL11.glGetFloatv(pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generateHashRowMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes)\n     {\n         Parameter position = arg(\"position\", int.class);\n         Parameter blocks = arg(\"blocks\", Block[].class);", "fixed": "                 .retInt();\n     }\n    private static void generateHashRowMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes)\n     {\n         Parameter position = arg(\"position\", int.class);\n         Parameter blocks = arg(\"blocks\", Block[].class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "2a8f12e49c15a3a369ce9fa67f5b1953c9f23578", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "                 .setForceLocalScheduling(false)\n                 .setMaxConcurrentFileRenames(20)\n                 .setRecursiveDirWalkerEnabled(false)\n                .setDfsTimeout(new Duration(10, TimeUnit.SECONDS))\n                 .setIpcPingInterval(new Duration(10, TimeUnit.SECONDS))\n                 .setDfsConnectTimeout(new Duration(500, TimeUnit.MILLISECONDS))\n                 .setDfsConnectMaxRetries(5)", "fixed": "                 .setForceLocalScheduling(false)\n                 .setMaxConcurrentFileRenames(20)\n                 .setRecursiveDirWalkerEnabled(false)\n                .setDfsTimeout(new Duration(60, TimeUnit.SECONDS))\n                 .setIpcPingInterval(new Duration(10, TimeUnit.SECONDS))\n                 .setDfsConnectTimeout(new Duration(500, TimeUnit.MILLISECONDS))\n                 .setDfsConnectMaxRetries(5)", "sourceBeforeFix": "new Duration(10,TimeUnit.SECONDS)", "sourceAfterFix": "new Duration(60,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.datatype : cp.baseType);\n     }\n     private String getJSDocTypeWithBraces(CodegenParameter cp) {\n         return \"{\" + getJSDocType(cp) + \"}\";\n     }\n     private String getJSDocType(CodegenParameter cp) {\n         String dataType = trimBrackets(cp.dataType);", "fixed": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.datatype : cp.baseType);\n     }\n    \n     private String getJSDocType(CodegenParameter cp) {\n         String dataType = trimBrackets(cp.dataType);", "sourceBeforeFix": "getJSDocTypeWithBraces(cm,var)", "sourceAfterFix": "getJSDocType(cm,var)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FtpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFtpEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface FtpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFtpEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "48295e16fc304221123fc38f9c492d711f05c897", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tExclusion(String groupId, String artifactId) {\n \t\t\tAssert.notNull(groupId, \"GroupId must not be null\");\n\t\t\tAssert.notNull(groupId, \"ArtifactId must not be null\");\n \t\t\tthis.groupId = groupId;\n \t\t\tthis.artifactId = artifactId;\n \t\t}", "fixed": " \t\tExclusion(String groupId, String artifactId) {\n \t\t\tAssert.notNull(groupId, \"GroupId must not be null\");\n\t\t\tAssert.notNull(artifactId, \"ArtifactId must not be null\");\n \t\t\tthis.groupId = groupId;\n \t\t\tthis.artifactId = artifactId;\n \t\t}", "sourceBeforeFix": "Assert.notNull(groupId,\"ArtifactId must not be null\")", "sourceAfterFix": "Assert.notNull(artifactId,\"ArtifactId must not be null\")"}
{"fixCommitSHA1": "5ee951ff70fe47c3ac6c7ace3e8b802c99598d14", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     return ImmutableList.copyOf(symbol.references.values());\n   }\n  public Iterable<Symbol> getAllSymbols() {\n     return ImmutableList.copyOf(symbols.values());\n   }", "fixed": "     return ImmutableList.copyOf(symbol.references.values());\n   }\n  public ImmutableList<Symbol> getAllSymbols() {\n     return ImmutableList.copyOf(symbols.values());\n   }", "sourceBeforeFix": "Iterable<Symbol>", "sourceAfterFix": "ImmutableList<Symbol>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5ac0dcd1b04e38a3dbe11a94897cc0a34ef2d5ec", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Override\n\tpublic void log (String tag, String message, Exception exception) {\n \t\tif (logLevel >= LOG_INFO) Log.i(tag, message, exception);\n \t}", "fixed": " \t}\n \t@Override\n\tpublic void log (String tag, String message, Throwable exception) {\n \t\tif (logLevel >= LOG_INFO) Log.i(tag, message, exception);\n \t}", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "Throwable exception"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fBodyGeneric,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "66c325e004dc7d1ffb6b97e8af093a8455756d53", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n\t\tContext.setLocale(Context.getLocale());\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r", "fixed": " \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "26604fde31e9f4586c18209285b7b5c3bc80d51e", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         }\n     }\n    private boolean isSchedulingSource(PlanNodeId sourceId)\n     {\n         return !sourceStartOrder.isEmpty() && sourceStartOrder.peek().equals(sourceId);\n     }\n    private void scheduleUnpartitionedSource(TaskSource source, Map<PlanNodeId, TaskSource> updatedUnpartitionedSources)\n     {\n         TaskSource newSource;", "fixed": "         }\n     }\n    private synchronized boolean isSchedulingSource(PlanNodeId sourceId)\n     {\n         return !sourceStartOrder.isEmpty() && sourceStartOrder.peek().equals(sourceId);\n     }\n    private synchronized void scheduleUnpartitionedSource(TaskSource source, Map<PlanNodeId, TaskSource> updatedUnpartitionedSources)\n     {\n         TaskSource newSource;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3b4ff661c53e36133d3d287908592029d97d66f1", "projectName": "jersey.jersey", "bugType": "Change Numeric Literal", "problem": "         @Path(\"timeout\")\n         public String getTimeout() {\n             try {\n                Thread.sleep(2000);\n             } catch (InterruptedException e) {\n                 e.printStackTrace();\n             }", "fixed": "         @Path(\"timeout\")\n         public String getTimeout() {\n             try {\n                Thread.sleep(5000);\n             } catch (InterruptedException e) {\n                 e.printStackTrace();\n             }", "sourceBeforeFix": "Thread.sleep(2000)", "sourceAfterFix": "Thread.sleep(5000)"}
{"fixCommitSHA1": "c5ccaee5065a52110a4124505002d6afeb7c13ca", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         }\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n            StringBuilder sb = new StringBuilder(64);\n             while (sao.pos < sao.limit) {\n                 byte nextByte = sao.bytes[sao.pos++];\n                 if (nextByte == HttpConstants.CR) {", "fixed": "         }\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n            ByteBuf line = buffer(64);\n             while (sao.pos < sao.limit) {\n                 byte nextByte = sao.bytes[sao.pos++];\n                 if (nextByte == HttpConstants.CR) {", "sourceBeforeFix": "sb.toString()", "sourceAfterFix": "line.toString(charset)"}
{"fixCommitSHA1": "bd1e046a1936703ac62a693a0e44fbb88398a927", "projectName": "dropwizard.dropwizard", "bugType": "Change Modifier", "problem": "     }\n     @VisibleForTesting\n    static void setLog(Logger newLog) {\n        log = newLog;\n     }\n }", "fixed": "     }\n     @VisibleForTesting\n    static synchronized void setLog(Logger newLog) {\n        log = newLog;\n     }\n }", "sourceBeforeFix": "8", "sourceAfterFix": "40"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Wrong Function Name", "problem": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n     private String getJSDocTypeWithBraces(CodegenOperation co) {\n         String jsDocType = getJSDocType(co);\n         return jsDocType == null ? null : \"{\" + jsDocType + \"}\";\n     }\n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);", "fixed": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n    \n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);", "sourceBeforeFix": "getJSDocTypeWithBraces(operation)", "sourceAfterFix": "getJSDocType(operation)"}
{"fixCommitSHA1": "98f6b35ce69cf3fcaf74e8e657e657dcfc80d58f", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 return new TxnRemoveAllOperation();\n             }\n         };\n        constructors[TXN_REMOVE_ALL] = new ConstructorFunction<Integer, IdentifiedDataSerializable>() {\n             public IdentifiedDataSerializable createNew(Integer arg) {\n                 return new TxnRemoveAllBackupOperation();\n             }", "fixed": "                 return new TxnRemoveAllOperation();\n             }\n         };\n        constructors[TXN_REMOVE_ALL_BACKUP] = new ConstructorFunction<Integer, IdentifiedDataSerializable>() {\n             public IdentifiedDataSerializable createNew(Integer arg) {\n                 return new TxnRemoveAllBackupOperation();\n             }", "sourceBeforeFix": "constructors[TXN_REMOVE_ALL]", "sourceAfterFix": "constructors[TXN_REMOVE_ALL_BACKUP]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "409f0c6a5ca0bfd80b3d7bb1750a870291a3a6f2", "projectName": "jersey.jersey", "bugType": "Change Numeric Literal", "problem": "     public void testDontFollow() {\n         WebTarget t = target(\"test/redirect\");\n         t.configuration().setProperty(ClientProperties.FOLLOW_REDIRECTS, false);\n        assertEquals(302, t.request().get().getStatus());\n     }\n }", "fixed": "     public void testDontFollow() {\n         WebTarget t = target(\"test/redirect\");\n         t.configuration().setProperty(ClientProperties.FOLLOW_REDIRECTS, false);\n        assertEquals(303, t.request().get().getStatus());\n     }\n }", "sourceBeforeFix": "assertEquals(302,t.request().get().getStatus())", "sourceAfterFix": "assertEquals(303,t.request().get().getStatus())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "10b391e13590e61c2ec80e4c5522362cc7e9b646", "projectName": "xetorthio.jedis", "bugType": "Change Unary Operator\t", "problem": "           + \" only supports SCAN commands with non-empty MATCH patterns\");\n     }\n    if (JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)) {\n       throw new IllegalArgumentException(JedisCluster.class.getSimpleName()\n           + \" only supports SCAN commands with MATCH patterns containing hash-tags ( curly-brackets enclosed strings )\");\n     }", "fixed": "           + \" only supports SCAN commands with non-empty MATCH patterns\");\n     }\n    if (!JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)) {\n       throw new IllegalArgumentException(JedisCluster.class.getSimpleName()\n           + \" only supports SCAN commands with MATCH patterns containing hash-tags ( curly-brackets enclosed strings )\");\n     }", "sourceBeforeFix": "JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)", "sourceAfterFix": "!JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         };\n         verify(checkConfig,\n                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n     }\n     @Test", "fixed": "         };\n         verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "2d0eeff752d0d83b0d34b40bb67ed9329be3a708", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     public void testRouteStartupOrder() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(0);\n         template.sendBody(\"direct:start\", \"Hello World\");", "fixed": "     public void testRouteStartupOrder() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(1);\n         template.sendBody(\"direct:start\", \"Hello World\");", "sourceBeforeFix": "mock.expectedMessageCount(0)", "sourceAfterFix": "mock.expectedMessageCount(1)"}
{"fixCommitSHA1": "a13c4373a5e57d322b143516b493e84f14909fec", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(12, tokens.size());\n     List<CoreLabel> sentenceTwoTokens = sentences.get(1).get(CoreAnnotations.TokensAnnotation.class);\n     String sentenceTwo = SentenceUtils.listToString(sentenceTwoTokens);", "fixed": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(9, tokens.size());\n     List<CoreLabel> sentenceTwoTokens = sentences.get(1).get(CoreAnnotations.TokensAnnotation.class);\n     String sentenceTwo = SentenceUtils.listToString(sentenceTwoTokens);", "sourceBeforeFix": "assertEquals(15,tokens.size())", "sourceAfterFix": "assertEquals(13,tokens.size())"}
{"fixCommitSHA1": "66c325e004dc7d1ffb6b97e8af093a8455756d53", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n\t\tContext.setLocale(Context.getLocale());\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r", "fixed": " \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "4083c721f2ee2ce54c624488a49ed08f7c3b3c39", "projectName": "spring-projects.spring-boot", "bugType": "Same Function More Args", "problem": " \tprivate static final String CURRENT_DIR = \"/./\";\n\tprivate static final Pattern CURRENT_DIR_PATTERN = Pattern.compile(CURRENT_DIR);\n \tprivate static final String PARENT_DIR = \"/../\";", "fixed": " \tprivate static final String CURRENT_DIR = \"/./\";\n\tprivate static final Pattern CURRENT_DIR_PATTERN = Pattern.compile(CURRENT_DIR, Pattern.LITERAL);\n \tprivate static final String PARENT_DIR = \"/../\";", "sourceBeforeFix": "Pattern.compile(CURRENT_DIR)", "sourceAfterFix": "Pattern.compile(CURRENT_DIR,Pattern.LITERAL)"}
{"fixCommitSHA1": "ec57f0c31f8c41db175aa7dcaab5089c22b2a8a8", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n \t\t}\n \t\t@Bean", "fixed": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.responder());\n \t\t}\n \t\t@Bean", "sourceBeforeFix": "messageHandler.serverResponder()", "sourceAfterFix": "messageHandler.responder()"}
{"fixCommitSHA1": "bc61b7eb2f40cb6ff6027d59ad68ee5cc2d3fae0", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             rootName = options.get(ROOT_NAME);\n         }\n         if (options.containsKey(ELEMENT_NAME)) {\n            encoding = options.get(ELEMENT_NAME);\n         }\n         if (options.containsKey(ARRAY_NAME)) {\n            elementName = options.get(ARRAY_NAME);\n         }\n         if (options.containsKey(EXPANDABLE_PROPERTIES)) {\n             expandableProperties = Arrays.asList(options.get(EXPANDABLE_PROPERTIES).split(\" \"));", "fixed": "             rootName = options.get(ROOT_NAME);\n         }\n         if (options.containsKey(ELEMENT_NAME)) {\n            elementName = options.get(ELEMENT_NAME);\n         }\n         if (options.containsKey(ARRAY_NAME)) {\n            arrayName = options.get(ARRAY_NAME);\n         }\n         if (options.containsKey(EXPANDABLE_PROPERTIES)) {\n             expandableProperties = Arrays.asList(options.get(EXPANDABLE_PROPERTIES).split(\" \"));", "sourceBeforeFix": "elementName=options.get(ARRAY_NAME)", "sourceAfterFix": "arrayName=options.get(ARRAY_NAME)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "fixed": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "sourceBeforeFix": "logger.debug(\"Requsting URL {}\",url)", "sourceAfterFix": "logger.trace(\"Requsting URL {}\",url)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d70b3da5ef0e941229c009f7ce3d8e6e62d40552", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     @Override\n     protected void manageTransaction() throws Throwable {\n        final Transaction transaction = this.transactionsRepository.removeTransaction(this.xidTransactionID);\n         this.resumeTransaction(transaction);\n         try {", "fixed": "     @Override\n     protected void manageTransaction() throws Throwable {\n        final Transaction transaction = this.transactionsRepository.getTransaction(this.xidTransactionID);\n         this.resumeTransaction(transaction);\n         try {", "sourceBeforeFix": "this.transactionsRepository.removeTransaction(this.xidTransactionID)", "sourceAfterFix": "this.transactionsRepository.getTransaction(this.xidTransactionID)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "16b799dae56b54f82a14dc0e0ad24977f06df6f6", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   public void testBulkOutputWithTsvImporterTextMapper() throws Exception {\n     String table = \"test-\" + UUID.randomUUID();\n     String FAMILY = \"FAM\";\n    Path bulkOutputPath = new Path(util.getDataTestDir(table),\"hfiles\");\n     String[] args =\n         new String[] {", "fixed": "   public void testBulkOutputWithTsvImporterTextMapper() throws Exception {\n     String table = \"test-\" + UUID.randomUUID();\n     String FAMILY = \"FAM\";\n    Path bulkOutputPath = new Path(util.getDataTestDirOnTestFS(table),\"hfiles\");\n     String[] args =\n         new String[] {", "sourceBeforeFix": "util.getDataTestDir(table)", "sourceAfterFix": "util.getDataTestDirOnTestFS(table)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "eba7e984d0999606f90689ca3b89ee644b1e92a4", "projectName": "Graylog2.graylog2-server", "bugType": "Change Caller in Function Call", "problem": "         stats.order(TermsStatsFacet.ComparatorType.fromString(order.toString().toLowerCase()));\n         stats.size(size);\n        terms.facetFilter(standardFilters(range, filter));\n         srb.addFacet(stats);", "fixed": "         stats.order(TermsStatsFacet.ComparatorType.fromString(order.toString().toLowerCase()));\n         stats.size(size);\n        stats.facetFilter(standardFilters(range, filter));\n         srb.addFacet(stats);", "sourceBeforeFix": "terms.facetFilter(standardFilters(range,filter))", "sourceAfterFix": "stats.facetFilter(standardFilters(range,filter))"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUser(@Valid User body);\n     @POST\n     @Path(\"/createWithArray\")", "fixed": "     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUser(@Valid User body) throws Exception;\n     @POST\n     @Path(\"/createWithArray\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface VmEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedVmEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface VmEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedVmEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JcrEndpointBuilder\n             extends\n                 JcrEndpointConsumerBuilder, JcrEndpointProducerBuilder {\n         default AdvancedJcrEndpointBuilder advanced() {", "fixed": "     \n    public interface JcrEndpointBuilder\n             extends\n                 JcrEndpointConsumerBuilder, JcrEndpointProducerBuilder {\n         default AdvancedJcrEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "15a26dc6061cd3162d9bea82d0b1cf10beca07e2", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   }\n   @Test\n  public void reportLostFileTest() {\n     long fileId = 1;\n     mThrown.expect(LineageDoesNotExistException.class);\n     mThrown.expectMessage(ExceptionMessage.LINEAGE_OUTPUT_FILE_NOT_EXIST.getMessage(fileId));\n    mLineageStore.requestFilePersistence(fileId);\n   }\n   @Test", "fixed": "   }\n   @Test\n  public void reportLostFileTest() throws LineageDoesNotExistException {\n     long fileId = 1;\n     mThrown.expect(LineageDoesNotExistException.class);\n     mThrown.expectMessage(ExceptionMessage.LINEAGE_OUTPUT_FILE_NOT_EXIST.getMessage(fileId));\n    mLineageStore.reportLostFile(fileId);\n   }\n   @Test", "sourceBeforeFix": "mLineageStore.requestFilePersistence(fileId)", "sourceAfterFix": "mLineageStore.reportLostFile(fileId)"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.set(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "fixed": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.get(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\twithInputs(difference);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\t\twithInputs(difference);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "fixed": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "sourceBeforeFix": "GL.glDrawArraysEXT(mode,first,count)", "sourceAfterFix": "GL.glDrawArrays(mode,first,count)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d9cee23da79c7368a47a894f1bf861f04fdb6f00", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (type == 0) {\n             return null;\n         } else if (type == 1) {\n            return in.readInt();\n         } else if (type == 2) {\n             return in.readInt();\n         } else if (type == 3) {", "fixed": "         if (type == 0) {\n             return null;\n         } else if (type == 1) {\n            return in.readLong();\n         } else if (type == 2) {\n             return in.readInt();\n         } else if (type == 3) {", "sourceBeforeFix": "in.readInt()", "sourceAfterFix": "in.readLong()"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AsteriskEndpointBuilder\n             extends\n                 AsteriskEndpointConsumerBuilder, AsteriskEndpointProducerBuilder {\n         default AdvancedAsteriskEndpointBuilder advanced() {", "fixed": "     \n    public interface AsteriskEndpointBuilder\n             extends\n                 AsteriskEndpointConsumerBuilder, AsteriskEndpointProducerBuilder {\n         default AdvancedAsteriskEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ca90ef4529782f76edc2fa3882e509e7d52f26f7", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     protected static final String WSDL_URL_PROP = \"wsdlURL=classpath:person.wsdl\";\nprotected static final String SERVICE_ADDRESS = \"http:\nprotected static String FROM_URI = \"cxf:\n         + PORT_NAME_PROP + \"&\" + SERVICE_NAME_PROP + \"&\" + WSDL_URL_PROP + \"&dataFormat=\" + DataFormat.PAYLOAD;\nprotected static String DETAILS = \"<detail><UnknownPersonFault xmlns=\\\"http:\n         + \"<personId></personId></UnknownPersonFault></detail>\";\n     @Override\n     protected RouteBuilder createRouteBuilder() {", "fixed": "     protected static final String WSDL_URL_PROP = \"wsdlURL=classpath:person.wsdl\";\nprotected static final String SERVICE_ADDRESS = \"http:\nprotected static final String FROM_URI = \"cxf:\n         + PORT_NAME_PROP + \"&\" + SERVICE_NAME_PROP + \"&\" + WSDL_URL_PROP + \"&dataFormat=\" + DataFormat.PAYLOAD;\nprotected static final String DETAILS = \"<detail><UnknownPersonFault xmlns=\\\"http:\n         + \"<personId></personId></UnknownPersonFault></detail>\";\n     @Override\n     protected RouteBuilder createRouteBuilder() {", "sourceBeforeFix": "12", "sourceAfterFix": "28"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n     /**", "fixed": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n     /**", "sourceBeforeFix": "id=15808", "sourceAfterFix": "id=10808"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ServletEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedServletEndpointBuilder advanced() {\n             return (AdvancedServletEndpointBuilder) this;\n         }", "fixed": "     \n    public interface ServletEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedServletEndpointBuilder advanced() {\n             return (AdvancedServletEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a091e3c4af00b17456e583298e4bcba6ac9b13e9", "projectName": "Atmosphere.atmosphere", "bugType": "More Specific If", "problem": "     public WebSocket resource(AtmosphereResource r) {\n        if (this.r != null) {\n             AtmosphereResourceImpl.class.cast(r).cloneState(this.r);\n         }", "fixed": "     public WebSocket resource(AtmosphereResource r) {\n        if (this.r != null && r != null) {\n             AtmosphereResourceImpl.class.cast(r).cloneState(this.r);\n         }", "sourceBeforeFix": "this.r != null", "sourceAfterFix": "this.r != null && r != null"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "fixed": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "fixed": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "sourceBeforeFix": "logger.debug(\"MyQ binding received command '{}' for item '{}'\",command,itemName)", "sourceAfterFix": "logger.trace(\"MyQ binding received command '{}' for item '{}'\",command,itemName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "3b2bcc69cfa47b6f81daf4a7bb645b489072f2a0", "projectName": "apache.camel", "bugType": "More Specific If", "problem": "         if (exchange.hasOut()) {\n             JmsMessage out = (JmsMessage) exchange.getOut();\n             try {\n                if (out != null) {\n                     out.setMessageId(out.getJmsMessage().getJMSMessageID());\n                 }\n             } catch (JMSException e) {", "fixed": "         if (exchange.hasOut()) {\n             JmsMessage out = (JmsMessage) exchange.getOut();\n             try {\n                if (out != null && out.getJmsMessage() != null) {\n                     out.setMessageId(out.getJmsMessage().getJMSMessageID());\n                 }\n             } catch (JMSException e) {", "sourceBeforeFix": "out != null", "sourceAfterFix": "out != null && out.getJmsMessage() != null"}
{"fixCommitSHA1": "12fc9a2b54118418712e3817bed82d52b8701244", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     }\n    static class writer {\n \t\tpublic static void write(String line)\n \t\t{", "fixed": "     }\n    static class otherWriter {\n \t\tpublic static void write(String line)\n \t\t{", "sourceBeforeFix": "writer.write(line)", "sourceAfterFix": "otherWriter.write(line)"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   private void externExports() {\n    logger.info(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n     ExternExportsPass pass = new ExternExportsPass(this);", "fixed": "   }\n   private void externExports() {\n    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n     ExternExportsPass pass = new ExternExportsPass(this);", "sourceBeforeFix": "logger.info(\"Computing Control Flow Graph\")", "sourceAfterFix": "logger.fine(\"Computing Control Flow Graph\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesReplicationControllersEndpointBuilder\n             extends\n                 KubernetesReplicationControllersEndpointConsumerBuilder, KubernetesReplicationControllersEndpointProducerBuilder {\n         default AdvancedKubernetesReplicationControllersEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesReplicationControllersEndpointBuilder\n             extends\n                 KubernetesReplicationControllersEndpointConsumerBuilder, KubernetesReplicationControllersEndpointProducerBuilder {\n         default AdvancedKubernetesReplicationControllersEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "b7e092e821021b7c0dbd91eacfe369181bfa28b8", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverAcceptor());\n \t\t}\n \t}", "fixed": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n \t\t}\n \t}", "sourceBeforeFix": "rSocketMessageHandler.serverAcceptor()", "sourceAfterFix": "rSocketMessageHandler.serverResponder()"}
{"fixCommitSHA1": "dea7ef0e0aae5ba4aef9d104cd10af986be9fc53", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     static class ConstantReader extends Reader {\n         private char[] constant;\n        public ConstantReader(char[] constant) {\n             this.constant = constant;\n         }", "fixed": "     static class ConstantReader extends Reader {\n         private char[] constant;\n        ConstantReader(char[] constant) {\n             this.constant = constant;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ec1d0e8f15f589678cfeae6ffc717691499266d6", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         MockEndpoint bar = getMockEndpoint(\"mock:bar\");\n         bar.expectedMinimumMessageCount(1);\n        bar.setResultWaitTime(1000);\n         template.sendBody(\"seda:foo\", \"A\");\n         template.sendBody(\"seda:foo\", \"B\");", "fixed": "         MockEndpoint bar = getMockEndpoint(\"mock:bar\");\n         bar.expectedMinimumMessageCount(1);\n        bar.setResultWaitTime(3500);\n         template.sendBody(\"seda:foo\", \"A\");\n         template.sendBody(\"seda:foo\", \"B\");", "sourceBeforeFix": "bar.setResultWaitTime(1000)", "sourceAfterFix": "bar.setResultWaitTime(3500)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "fixed": " \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFlatpackEndpointBuilder\n             extends\n                 AdvancedFlatpackEndpointConsumerBuilder, AdvancedFlatpackEndpointProducerBuilder {\n         default FlatpackEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFlatpackEndpointBuilder\n             extends\n                 AdvancedFlatpackEndpointConsumerBuilder, AdvancedFlatpackEndpointProducerBuilder {\n         default FlatpackEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "be91a5326f6a289ae9d34437a63c8ba8434fe2b2", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "   public static final long FIXED_OVERHEAD = ClassSize.align(\n       (4 * Bytes.SIZEOF_LONG) + Bytes.SIZEOF_BOOLEAN +\n      (22 * ClassSize.REFERENCE) + ClassSize.OBJECT + Bytes.SIZEOF_INT);\n   public static final long DEEP_OVERHEAD = ClassSize.align(FIXED_OVERHEAD +\n       (ClassSize.OBJECT * 2) + (2 * ClassSize.ATOMIC_BOOLEAN) +", "fixed": "   public static final long FIXED_OVERHEAD = ClassSize.align(\n       (4 * Bytes.SIZEOF_LONG) + Bytes.SIZEOF_BOOLEAN +\n      (23 * ClassSize.REFERENCE) + ClassSize.OBJECT + Bytes.SIZEOF_INT);\n   public static final long DEEP_OVERHEAD = ClassSize.align(FIXED_OVERHEAD +\n       (ClassSize.OBJECT * 2) + (2 * ClassSize.ATOMIC_BOOLEAN) +", "sourceBeforeFix": "22 * ClassSize.REFERENCE", "sourceAfterFix": "23 * ClassSize.REFERENCE"}
{"fixCommitSHA1": "ee9817dbd92495886965eeecd65325e09a78d5fc", "projectName": "hazelcast.hazelcast", "bugType": "Change Unary Operator\t", "problem": "                            Object valueAfterProcess, EntryEventType eventType) {\n         final String mapName = name;\n         final MapServiceContext mapServiceContext = getMapServiceContext();\n        if (mapServiceContext.hasRegisteredListener(mapName) || eventType == NO_NEED_TO_FIRE_EVENT) {\n             return;\n         }\n         final Data oldValue = mapServiceContext.toData(valueBeforeProcess);", "fixed": "                            Object valueAfterProcess, EntryEventType eventType) {\n         final String mapName = name;\n         final MapServiceContext mapServiceContext = getMapServiceContext();\n        if (!mapServiceContext.hasRegisteredListener(mapName) || eventType == NO_NEED_TO_FIRE_EVENT) {\n             return;\n         }\n         final Data oldValue = mapServiceContext.toData(valueBeforeProcess);", "sourceBeforeFix": "mapServiceContext.hasRegisteredListener(mapName)", "sourceAfterFix": "!mapServiceContext.hasRegisteredListener(mapName)"}
{"fixCommitSHA1": "624fe959786106291c0b422f5e3d95f16ce9ff1f", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t\t\treturn parameterizedMethod;\n \t\t}\n \t\tcatch(Exception e) {\n\t\t\tthrow new RuntimeException(\"Could not extract lambda method out of function.\", e);\n \t\t}\n \t}\n }", "fixed": " \t\t\treturn parameterizedMethod;\n \t\t}\n \t\tcatch(Exception e) {\n\t\t\tthrow new RuntimeException(\"Could not extract lambda method out of function: \" + e.getClass().getSimpleName() + \" - \" + e.getMessage(), e);\n \t\t}\n \t}\n }", "sourceBeforeFix": "Class.forName(className.replace('/','.'))", "sourceAfterFix": "Class.forName(className.replace('/','.'),true,Thread.currentThread().getContextClassLoader())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1cb815170a2fd69558f737d92f5665c9d64cebd1", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t\t\t\t\t+ \" with this method. Use ByteBuffer and one of GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT or GL_FLOAT for type. Blame LWJGL\");\r\n \t\t} else if (buffer instanceof FloatBuffer) {\r\n \t\t\tif (type == GL_FLOAT)\r\n\t\t\t\tGL20.glVertexAttribPointer(indx, size, normalized, stride, (FloatBuffer)buffer);\r\n \t\t\telse\r\n \t\t\t\tthrow new GdxRuntimeException(\"Can't use \" + buffer.getClass().getName() + \" with type \" + type\r\n \t\t\t\t\t+ \" with this method.\");\r", "fixed": " \t\t\t\t\t\t+ \" with this method. Use ByteBuffer and one of GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT or GL_FLOAT for type. Blame LWJGL\");\r\n \t\t} else if (buffer instanceof FloatBuffer) {\r\n \t\t\tif (type == GL_FLOAT)\r\n\t\t\t\tGL20.glVertexAttribPointer(indx, size, type, normalized, stride, (FloatBuffer)buffer);\r\n \t\t\telse\r\n \t\t\t\tthrow new GdxRuntimeException(\"Can't use \" + buffer.getClass().getName() + \" with type \" + type\r\n \t\t\t\t\t+ \" with this method.\");\r", "sourceBeforeFix": "GL20.glVertexAttribPointer(indx,size,normalized,stride,(FloatBuffer)buffer)", "sourceAfterFix": "GL20.glVertexAttribPointer(indx,size,type,normalized,stride,(FloatBuffer)buffer)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n\t\t\t\tcatch (Throwable t) {\n \t\t\t\t\tif (log.isDebugEnabled()) {\n \t\t\t\t\t\tlog.debug(\"Could not clean fields for class \" + clazz.getName(), t);\n \t\t\t\t\t}", "fixed": " \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n\t\t\t\tcatch (Exception t) {\n \t\t\t\t\tif (log.isDebugEnabled()) {\n \t\t\t\t\t\tlog.debug(\"Could not clean fields for class \" + clazz.getName(), t);\n \t\t\t\t\t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f96aeff677f2874dfbab1578decfed57438b4361", "projectName": "swagger-api.swagger-core", "bugType": "Wrong Function Name", "problem": "                     return item;\n                 }\n             }\n            LOGGER.error(\"no property for \" + type + \", \" + format);\n             return null;\n         }", "fixed": "                     return item;\n                 }\n             }\n            LOGGER.debug(\"no property for \" + type + \", \" + format);\n             return null;\n         }", "sourceBeforeFix": "LOGGER.error(\"no property for \" + type + \", \"+ format)", "sourceAfterFix": "LOGGER.debug(\"no property for \" + type + \", \"+ format)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SmppEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSmppEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SmppEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSmppEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3df3be852c308ed68fc81c1e44eb5714aafcf0bf", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "       String pkg = packageNameOf(c);\n       Object module = CLASS_GET_MODULE_METHOD.invoke(c);\n       return (Boolean) MODULE_IS_EXPORTED_METHOD.invoke(module, pkg);\n    } catch (ReflectiveOperationException e) {\n       return false;\n     }\n   }", "fixed": "       String pkg = packageNameOf(c);\n       Object module = CLASS_GET_MODULE_METHOD.invoke(c);\n       return (Boolean) MODULE_IS_EXPORTED_METHOD.invoke(module, pkg);\n    } catch (Exception e) {\n       return false;\n     }\n   }", "sourceBeforeFix": "ReflectiveOperationException e", "sourceAfterFix": "Exception e"}
{"fixCommitSHA1": "14ceda3b0cb8b2055a05c6c6984aa785b8864563", "projectName": "brettwooldridge.HikariCP", "bugType": "Wrong Function Name", "problem": "                connection.isValid(1);\n             }\n             catch (Throwable e) {\n               LOGGER.warn(\"{} - Failed to execute isValid() for connection, configure connection test query. ({})\", poolName, e.getMessage());\n                throw e;\n             }\n          }", "fixed": "                connection.isValid(1);\n             }\n             catch (Throwable e) {\n               LOGGER.error(\"{} - Failed to execute isValid() for connection, configure connection test query. ({})\", poolName, e.getMessage());\n                throw e;\n             }\n          }", "sourceBeforeFix": "LOGGER.warn(\"{} - Failed to execute connection test query. ({})\",poolName,e.getMessage())", "sourceAfterFix": "LOGGER.error(\"{} - Failed to execute connection test query. ({})\",poolName,e.getMessage())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedApnsEndpointBuilder\n             extends\n                 AdvancedApnsEndpointConsumerBuilder, AdvancedApnsEndpointProducerBuilder {\n         default ApnsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedApnsEndpointBuilder\n             extends\n                 AdvancedApnsEndpointConsumerBuilder, AdvancedApnsEndpointProducerBuilder {\n         default ApnsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5038fc76c950029c78681dff816d7465f6acbb91", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       long size = 0;\n       for (Cell c : results) {\n        size += CellUtil.estimatedHeapSizeOf(c);\n       }\n       return size;", "fixed": "       long size = 0;\n       for (Cell c : results) {\n        size += CellUtil.estimatedHeapSizeOfWithoutTags(c);\n       }\n       return size;", "sourceBeforeFix": "CellUtil.estimatedHeapSizeOf(c)", "sourceAfterFix": "CellUtil.estimatedHeapSizeOfWithoutTags(c)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "         String query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file\";\n         gen.get().addSnippet( \"query1\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         gen.get()\n                 .addSnippet( \"result1\", createQueryResultSnippet( result ) );", "fixed": "         String query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file\";\n         gen.get().addSnippet( \"query1\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         gen.get()\n                 .addSnippet( \"result1\", createQueryResultSnippet( result ) );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "8097cb4e299f056973c04abeaad879eb55f44775", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "ddfab2213db771b738d1f971e36e664f5a02f4ab", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     ExecDriverTaskHandle th = (ExecDriverTaskHandle)t;\n     RunningJob rj = th.getRunningJob();\n     this.mapProgress = Math.round(rj.mapProgress() * 100);\n    this.reduceProgress = Math.round(rj.mapProgress() * 100);\n     taskCounters.put(\"CNTR_NAME_\" + getId() + \"_MAP_PROGRESS\", Long.valueOf(this.mapProgress));\n     taskCounters.put(\"CNTR_NAME_\" + getId() + \"_REDUCE_PROGRESS\", Long.valueOf(this.reduceProgress));\n     Counters ctrs = th.getCounters();", "fixed": "     ExecDriverTaskHandle th = (ExecDriverTaskHandle)t;\n     RunningJob rj = th.getRunningJob();\n     this.mapProgress = Math.round(rj.mapProgress() * 100);\n    this.reduceProgress = Math.round(rj.reduceProgress() * 100);\n     taskCounters.put(\"CNTR_NAME_\" + getId() + \"_MAP_PROGRESS\", Long.valueOf(this.mapProgress));\n     taskCounters.put(\"CNTR_NAME_\" + getId() + \"_REDUCE_PROGRESS\", Long.valueOf(this.reduceProgress));\n     Counters ctrs = th.getCounters();", "sourceBeforeFix": "rj.mapProgress()", "sourceAfterFix": "rj.reduceProgress()"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username);\n     @GET\n     @Path(\"/{username}\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username) throws Exception;\n     @GET\n     @Path(\"/{username}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "a342d002b78a0cfa20c853e8b8df046ab0dc235a", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         final String key = \"key\";\n        map.set(key, \"value\", 1, TimeUnit.SECONDS);\n         map.set(key, \"value2\");", "fixed": "         final String key = \"key\";\n        map.set(key, \"value\", 5, TimeUnit.SECONDS);\n         map.set(key, \"value2\");", "sourceBeforeFix": "map.set(key,\"value\",1,TimeUnit.SECONDS)", "sourceAfterFix": "map.set(key,\"value\",5,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "0d753e38ffde13e4c76d6d0ff075c92c7a8365f5", "projectName": "Alluxio.alluxio", "bugType": "Missing Throws Exception", "problem": "   }\n   @Test\n  public void chooseClosestTier() {\n     List<BlockWorkerInfo> workers = new ArrayList<>();\n     workers.add(worker(Constants.GB, \"node2\", \"rack3\"));\n     workers.add(worker(Constants.GB, \"node3\", \"rack2\"));", "fixed": "   }\n   @Test\n  public void chooseClosestTier() throws Exception {\n     List<BlockWorkerInfo> workers = new ArrayList<>();\n     workers.add(worker(Constants.GB, \"node2\", \"rack3\"));\n     workers.add(worker(Constants.GB, \"node3\", \"rack2\"));", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "2c62b9e6e3665b68d8859ce0db6b39cc927b94f3", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": " {\n   @JsonProperty\n   @Min(0)\n  private int numConnections = 5;\n   @JsonProperty\n   private Period readTimeout = new Period(\"PT15M\");", "fixed": " {\n   @JsonProperty\n   @Min(0)\n  private int numConnections = 20;\n   @JsonProperty\n   private Period readTimeout = new Period(\"PT15M\");", "sourceBeforeFix": "numConnections=5", "sourceAfterFix": "numConnections=20"}
{"fixCommitSHA1": "e2ff3aba4529be755b56da7a8f2a034856f12181", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "         numberId = p.getProperty(\"numberid.user\");\n         numberPass = p.getProperty(\"numberid.password\");\n        numberIdId = Integer.valueOf(p.getProperty(\"numberid.id\"));\n         twitter1 = new TwitterFactory(conf1).getInstance();", "fixed": "         numberId = p.getProperty(\"numberid.user\");\n         numberPass = p.getProperty(\"numberid.password\");\n        numberIdId = Long.valueOf(p.getProperty(\"numberid.id\"));\n         twitter1 = new TwitterFactory(conf1).getInstance();", "sourceBeforeFix": "Integer.valueOf(p.getProperty(\"numberid.id\"))", "sourceAfterFix": "Long.valueOf(p.getProperty(\"numberid.id\"))"}
{"fixCommitSHA1": "26b56d3addb34b409bf10b819a1e70ea2ad46b71", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         try {\n             if (byteBufsOnly) {\n                 while (i < srcEndIdx) {\n                    T m = src[srcIdx];\n                     if (m == null) {\n                         throw new NullPointerException(\"src[\" + srcIdx + ']');\n                     }", "fixed": "         try {\n             if (byteBufsOnly) {\n                 while (i < srcEndIdx) {\n                    T m = src[i];\n                     if (m == null) {\n                         throw new NullPointerException(\"src[\" + srcIdx + ']');\n                     }", "sourceBeforeFix": "src[srcIdx]", "sourceAfterFix": "src[i]"}
{"fixCommitSHA1": "c6852c9956205b986fde8fe4c3c5d22ba4646912", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "    */\n   protected void runWorker() throws IOException, ConnectionFailedException {\n     mWorker = new DefaultAlluxioWorker();\n    Whitebox.setInternalState(AlluxioWorker.class, \"sAlluxioWorker\", mWorker);\n     Runnable runWorker = new Runnable() {\n       @Override", "fixed": "    */\n   protected void runWorker() throws IOException, ConnectionFailedException {\n     mWorker = new DefaultAlluxioWorker();\n    Whitebox.setInternalState(DefaultAlluxioWorker.class, \"sAlluxioWorker\", mWorker);\n     Runnable runWorker = new Runnable() {\n       @Override", "sourceBeforeFix": "AlluxioWorker.class", "sourceAfterFix": "DefaultAlluxioWorker.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "376e6647bb5cb36b5dd37d303a5ad7fb1460daa0", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\tcollisionPoints.get(2).set( this.getVertices()[10], this.getVertices()[11]);\n \t\tcollisionPoints.get(3).set( this.getVertices()[15], this.getVertices()[16]);\n\t\tcollisionCenter.set(collisionPoints.get(2)).scl(0.5f).add(collisionPoints.get(0));\n \t\tvelocity.scl( (float) Math.pow(0.97f, delta * 30.f));\n \t\tposition.add(velocity.x * delta, velocity.y * delta);", "fixed": " \t\tcollisionPoints.get(2).set( this.getVertices()[10], this.getVertices()[11]);\n \t\tcollisionPoints.get(3).set( this.getVertices()[15], this.getVertices()[16]);\n\t\tcollisionCenter.set(collisionPoints.get(0)).add(collisionPoints.get(2)).scl(0.5f);\n \t\tvelocity.scl( (float) Math.pow(0.97f, delta * 30.f));\n \t\tposition.add(velocity.x * delta, velocity.y * delta);", "sourceBeforeFix": "collisionPoints.get(2)", "sourceAfterFix": "collisionPoints.get(0)"}
{"fixCommitSHA1": "27fb87cfcea241c2d7961baf68e84ce97f2dee7a", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "       }\n       statsData.setBinaryStats(binaryStats);\n       statsObj.setStatsData(statsData);\n    } else if (columnType.equalsIgnoreCase(\"decimal\")) {\n       DecimalColumnStatsData decimalStats = new DecimalColumnStatsData();\n       decimalStats.setNumNullsIsSet(false);\n       decimalStats.setNumDVsIsSet(false);", "fixed": "       }\n       statsData.setBinaryStats(binaryStats);\n       statsObj.setStatsData(statsData);\n} else if (columnType.toLowerCase().startsWith(\"decimal\")) {\n       DecimalColumnStatsData decimalStats = new DecimalColumnStatsData();\n       decimalStats.setNumNullsIsSet(false);\n       decimalStats.setNumDVsIsSet(false);", "sourceBeforeFix": "columnType.equalsIgnoreCase(\"date\")", "sourceAfterFix": "columnType.equalsIgnoreCase(\"date\") || columnType.equalsIgnoreCase(\"timestamp\")"}
{"fixCommitSHA1": "3cf2913580b49ddde420be7442e806aba7766da3", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": "  */\n @Configuration\n @ConditionalOnNotWebApplication\npublic class FreeMarkerNonWebConfiguration extends AbstractFreeMarkerConfiguration {\n\tpublic FreeMarkerNonWebConfiguration(FreeMarkerProperties properties) {\n \t\tsuper(properties);\n \t}", "fixed": "  */\n @Configuration\n @ConditionalOnNotWebApplication\nclass FreeMarkerNonWebConfiguration extends AbstractFreeMarkerConfiguration {\n\tFreeMarkerNonWebConfiguration(FreeMarkerProperties properties) {\n \t\tsuper(properties);\n \t}", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "05ff546482a53f3f7f145a9d9058e84c50e5187b", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "     }\n   }\n  private synchronized boolean isRMActive() {\n     return HAServiceState.ACTIVE == rmContext.getHAServiceState();\n   }", "fixed": "     }\n   }\n  private boolean isRMActive() {\n     return HAServiceState.ACTIVE == rmContext.getHAServiceState();\n   }", "sourceBeforeFix": "34", "sourceAfterFix": "2"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "* @see\n* @see NormalizableKey\n \t */\n\tpublic void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;\n \t/**\n \t * Reads the record back while de-normalizing the key fields. This must only be used when", "fixed": "* @see\n* @see NormalizableKey\n \t */\n\tpublic abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;\n \t/**\n \t * Reads the record back while de-normalizing the key fields. This must only be used when", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "7a90cfe13f0b030f6e091154c1d0091c685039f1", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     public BufferInfo getBufferInfo() {\n         try {\n             return new BufferInfo(\n                    api.path(routes.BufferResource().utilization(), BuffersResponse.class)\n                             .node(this)\n                             .execute());\n         } catch (Exception e) {", "fixed": "     public BufferInfo getBufferInfo() {\n         try {\n             return new BufferInfo(\n                    api.path(routes.BuffersResource().utilization(), BuffersResponse.class)\n                             .node(this)\n                             .execute());\n         } catch (Exception e) {", "sourceBeforeFix": "routes.BufferResource()", "sourceAfterFix": "routes.BuffersResource()"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         NagiosConfiguration config = new NagiosConfiguration();\n         config.setPassword(\"secret\");\n         config.setHost(\"127.0.0.1\");\n        config.setPort(25667);\n         JndiRegistry jndi = super.createRegistry();\n         jndi.bind(\"nagiosConf\", config);", "fixed": "         NagiosConfiguration config = new NagiosConfiguration();\n         config.setPassword(\"secret\");\n         config.setHost(\"127.0.0.1\");\n        config.setPort(25668);\n         JndiRegistry jndi = super.createRegistry();\n         jndi.bind(\"nagiosConf\", config);", "sourceBeforeFix": "new NagiosNscaStub(25667,\"secret\")", "sourceAfterFix": "new NagiosNscaStub(25668,\"secret\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "f0d1b6f9bdbb98855186505d307274bf2741d700", "projectName": "mybatis.mybatis-3", "bugType": "Change Modifier", "problem": "    * A simple interface that specifies how to test classes to determine if they\n    * are to be included in the results produced by the ResolverUtil.\n    */\n  public static interface Test {\n     /**\n      * Will be called repeatedly with candidate classes. Must return True if a class\n      * is to be included in the results, false otherwise.", "fixed": "    * A simple interface that specifies how to test classes to determine if they\n    * are to be included in the results produced by the ResolverUtil.\n    */\n  public interface Test {\n     /**\n      * Will be called repeatedly with candidate classes. Must return True if a class\n      * is to be included in the results, false otherwise.", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "53b0527a5dd35cd2e36650a6352b882cc32f714f", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    * @throws IOException\n    */\n   public void put(Put put, Integer lockid) throws IOException {\n    this.put(put, lockid, put.writeToWAL());\n   }\n   /**", "fixed": "    * @throws IOException\n    */\n   public void put(Put put, Integer lockid) throws IOException {\n    this.put(put, lockid, put.getWriteToWAL());\n   }\n   /**", "sourceBeforeFix": "put.writeToWAL()", "sourceAfterFix": "put.getWriteToWAL()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   }\n  private boolean isIdentifierPart(char ch) {", "fixed": "     }\n   }\n  private static boolean isIdentifierPart(char ch) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7ff29fca9771b86caa93d665ae547d4f66127ad0", "projectName": "wildfly.wildfly", "bugType": "Change Binary Operator", "problem": "         if (this.timeout == null) return false;\n         Date lastAccessedTime = this.entry.getLastAccessedTime();\n         long timeout = this.timeout.convert(TimeUnit.MILLISECONDS);\n        return (lastAccessedTime != null) && (timeout > 0) ? ((System.currentTimeMillis() - lastAccessedTime.getTime()) > timeout) : false;\n     }\n     @Override", "fixed": "         if (this.timeout == null) return false;\n         Date lastAccessedTime = this.entry.getLastAccessedTime();\n         long timeout = this.timeout.convert(TimeUnit.MILLISECONDS);\n        return (lastAccessedTime != null) && (timeout > 0) ? ((System.currentTimeMillis() - lastAccessedTime.getTime()) >= timeout) : false;\n     }\n     @Override", "sourceBeforeFix": "(System.currentTimeMillis() - lastAccessedTime.getTime()) > timeout", "sourceAfterFix": "(System.currentTimeMillis() - lastAccessedTime.getTime()) >= timeout"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKubernetesNodesEndpointBuilder\n             extends\n                 AdvancedKubernetesNodesEndpointConsumerBuilder, AdvancedKubernetesNodesEndpointProducerBuilder {\n         default KubernetesNodesEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKubernetesNodesEndpointBuilder\n             extends\n                 AdvancedKubernetesNodesEndpointConsumerBuilder, AdvancedKubernetesNodesEndpointProducerBuilder {\n         default KubernetesNodesEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.error(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "fixed": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.warn(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "sourceBeforeFix": "LOG.error(\"Failed to get files from \" + baseDirectory.getAbsolutePath())", "sourceAfterFix": "LOG.warn(\"Failed to get files from \" + baseDirectory.getAbsolutePath())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArraysEXT(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "fixed": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArrays(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glGenTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "618a5b9c8d211763f94a6be08b589b28fef48f49", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": " public class TestClusterMemoryManager\n {\n    @Test(timeOut = 30_000, expectedExceptions = RuntimeException.class, expectedExceptionsMessageRegExp = \".*Query exceeded max memory size of 1kB.*\")\n     public void testQueryMemoryLimit()\n             throws Exception\n     {", "fixed": " public class TestClusterMemoryManager\n {\n    @Test(timeOut = 240_000, expectedExceptions = RuntimeException.class, expectedExceptionsMessageRegExp = \".*Query exceeded max memory size of 1kB.*\")\n     public void testQueryMemoryLimit()\n             throws Exception\n     {", "sourceBeforeFix": "timeOut=30_000", "sourceAfterFix": "timeOut=240_000"}
{"fixCommitSHA1": "3a564d67f9c0fa529d7c930a0109cff96d882fb8", "projectName": "wildfly.wildfly", "bugType": "Change Operand ", "problem": "             final SessionBeanMetaData sessionBeanMetadata = (SessionBeanMetaData) metaData;\n             final LifecycleCallbacksMetaData prePassivates = sessionBeanMetadata.getPrePassivates();\n            if (preDestroys != null) {\n                 for (final LifecycleCallbackMetaData prePassivate : prePassivates) {\n                     final InterceptorClassDescription.Builder builder = InterceptorClassDescription.builder();\n                     final String methodName = prePassivate.getMethodName();", "fixed": "             final SessionBeanMetaData sessionBeanMetadata = (SessionBeanMetaData) metaData;\n             final LifecycleCallbacksMetaData prePassivates = sessionBeanMetadata.getPrePassivates();\n            if (prePassivates != null) {\n                 for (final LifecycleCallbackMetaData prePassivate : prePassivates) {\n                     final InterceptorClassDescription.Builder builder = InterceptorClassDescription.builder();\n                     final String methodName = prePassivate.getMethodName();", "sourceBeforeFix": "preDestroys != null", "sourceAfterFix": "prePassivates != null"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "25740b0e4a50aa6446b962871d64ef475326ac84", "projectName": "apache.camel", "bugType": "Less Specific If", "problem": "             return true;\n         }        \n         if (lastUpdate != null) {\n            if (lastUpdate.after(updated)) {\n                 LOG.debug(\"Entry is older than lastupdate=[{}], no valid entry=[{}]\", lastUpdate, entry);\n                 return false;\n             }", "fixed": "             return true;\n         }        \n         if (lastUpdate != null) {\n            if (lastUpdate.after(updated) || lastUpdate.equals(updated)) {\n                 LOG.debug(\"Entry is older than lastupdate=[{}], no valid entry=[{}]\", lastUpdate, entry);\n                 return false;\n             }", "sourceBeforeFix": "lastUpdate.after(updated)", "sourceAfterFix": "lastUpdate.after(updated) || lastUpdate.equals(updated)"}
{"fixCommitSHA1": "4de7095031109d5fddc611d5e8158c43562e57f6", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "     String status = jedis.set(bfoo, binaryValue);\n     assertTrue(Keyword.OK.name().equalsIgnoreCase(status));\n    String statusSuccess = jedis.set(bfoo, binaryValue, setParams().nx().ex(expireSeconds));\n     assertTrue(Keyword.OK.name().equalsIgnoreCase(statusSuccess));\n     byte[] value = jedis.get(bfoo);", "fixed": "     String status = jedis.set(bfoo, binaryValue);\n     assertTrue(Keyword.OK.name().equalsIgnoreCase(status));\n    String statusSuccess = jedis.set(bfoo, binaryValue, setParams().xx().ex(expireSeconds));\n     assertTrue(Keyword.OK.name().equalsIgnoreCase(statusSuccess));\n     byte[] value = jedis.get(bfoo);", "sourceBeforeFix": "setParams().nx()", "sourceAfterFix": "setParams().xx()"}
{"fixCommitSHA1": "1cb815170a2fd69558f737d92f5665c9d64cebd1", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t\t\t\t\t+ \" with this method. Use ByteBuffer and one of GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT or GL_FLOAT for type. Blame LWJGL\");\r\n \t\t} else if (buffer instanceof FloatBuffer) {\r\n \t\t\tif (type == GL_FLOAT)\r\n\t\t\t\tGL20.glVertexAttribPointer(indx, size, normalized, stride, (FloatBuffer)buffer);\r\n \t\t\telse\r\n \t\t\t\tthrow new GdxRuntimeException(\"Can't use \" + buffer.getClass().getName() + \" with type \" + type\r\n \t\t\t\t\t+ \" with this method.\");\r", "fixed": " \t\t\t\t\t\t+ \" with this method. Use ByteBuffer and one of GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT or GL_FLOAT for type. Blame LWJGL\");\r\n \t\t} else if (buffer instanceof FloatBuffer) {\r\n \t\t\tif (type == GL_FLOAT)\r\n\t\t\t\tGL20.glVertexAttribPointer(indx, size, type, normalized, stride, (FloatBuffer)buffer);\r\n \t\t\telse\r\n \t\t\t\tthrow new GdxRuntimeException(\"Can't use \" + buffer.getClass().getName() + \" with type \" + type\r\n \t\t\t\t\t+ \" with this method.\");\r", "sourceBeforeFix": "GL20.glGetActiveUniform(program,index,256,typeTmp)", "sourceAfterFix": "GL20.glGetActiveUniform(program,index,256,size,typeTmp)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FhirEndpointBuilder\n             extends\n                 FhirEndpointConsumerBuilder, FhirEndpointProducerBuilder {\n         default AdvancedFhirEndpointBuilder advanced() {", "fixed": "     \n    public interface FhirEndpointBuilder\n             extends\n                 FhirEndpointConsumerBuilder, FhirEndpointProducerBuilder {\n         default AdvancedFhirEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResultWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface VmEndpointBuilder\n             extends\n                 VmEndpointConsumerBuilder, VmEndpointProducerBuilder {\n         default AdvancedVmEndpointBuilder advanced() {", "fixed": "     \n    public interface VmEndpointBuilder\n             extends\n                 VmEndpointConsumerBuilder, VmEndpointProducerBuilder {\n         default AdvancedVmEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t\t}\r\n \t\t\t\t\t}\r\n\t\t\t\t\tstatesAndStartDates.add(patientState.getState().getId() + \"\" + patientState.getStartDate());\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r", "fixed": " \t\t\t\t\t\t}\r\n \t\t\t\t\t}\r\n\t\t\t\t\tstatesAndStartDates.add(patientState.getState().getUuid() + \"\" + patientState.getStartDate());\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r", "sourceBeforeFix": "patientState.getState().getId()", "sourceAfterFix": "patientState.getState().getUuid()"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "71457e50581dd7f16b18cf8faaec3f0aa21cd880", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     assertNotNull(compressedProto);\n    assertTrue(\"\" + compressedProto.length, compressedProto.length < 390200);\n     assertTrue(\"\" + uncompressedProto.length, uncompressedProto.length < 2100000);\n   }", "fixed": "     assertNotNull(compressedProto);\n    assertTrue(\"\" + compressedProto.length, compressedProto.length < 391000);\n     assertTrue(\"\" + uncompressedProto.length, uncompressedProto.length < 2100000);\n   }", "sourceBeforeFix": "compressedProto.length < 390200", "sourceAfterFix": "compressedProto.length < 391000"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesJobEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesJobEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KubernetesJobEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesJobEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f24efb632299bc0b1be935f6ad10bae2493e934b", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "       }\n      Comparator<PropertyKey> pC = new ConfigurationDocGenerator().new PropertyKeyComparator();\n       List<PropertyKey> dfkeys = new ArrayList<>(defaultKeys);\n       Collections.sort(dfkeys, pC);", "fixed": "       }\n      Comparator<PropertyKey> pC = new PropertyKeyComparator();\n       List<PropertyKey> dfkeys = new ArrayList<>(defaultKeys);\n       Collections.sort(dfkeys, pC);", "sourceBeforeFix": "18", "sourceAfterFix": "26"}
{"fixCommitSHA1": "dc936e03bc02c2ac536b2929b676594bebb7124f", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         }\n         if (timeoutCheckerExecutorService != null) {\n            camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService);\n         }\n         ServiceHelper.stopServices(timeoutMap, processor, deadLetterProducerTemplate);", "fixed": "         }\n         if (timeoutCheckerExecutorService != null) {\n            camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService);\n         }\n         ServiceHelper.stopServices(timeoutMap, processor, deadLetterProducerTemplate);", "sourceBeforeFix": "camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService)", "sourceAfterFix": "camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService)"}
{"fixCommitSHA1": "d64a44547c2b2b69c771b16d9ac4e1ef5f8d8ce1", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tthis.pool.setMaxIdle(getMaxIdle());\n \t\tthis.pool.setMinIdle(getMinIdle());\n \t\tthis.pool.setTestOnBorrow(isTestOnBorrow());\n\t\tthis.pool.setTestOnReturn(isTestOnBorrow());\n \t\tthis.pool.setValidationQuery(getValidationQuery());\n \t\treturn this.pool;\n \t}", "fixed": " \t\tthis.pool.setMaxIdle(getMaxIdle());\n \t\tthis.pool.setMinIdle(getMinIdle());\n \t\tthis.pool.setTestOnBorrow(isTestOnBorrow());\n\t\tthis.pool.setTestOnReturn(isTestOnReturn());\n \t\tthis.pool.setValidationQuery(getValidationQuery());\n \t\treturn this.pool;\n \t}", "sourceBeforeFix": "isTestOnBorrow()", "sourceAfterFix": "isTestOnReturn()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0adf369fda5c2d4231881d66e3bc0bd12fb86c9a", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "    CoreLabel token = document.tokens().get(10);\n     System.out.println(\"Example: token\");\n     System.out.println(token);\n     System.out.println();", "fixed": "    CoreLabel token = document.tokens().get(9);\n     System.out.println(\"Example: token\");\n     System.out.println(token);\n     System.out.println();", "sourceBeforeFix": "document.tokens().get(10)", "sourceAfterFix": "document.tokens().get(9)"}
{"fixCommitSHA1": "d6683d7a2ec72295c4beb49fe36858eb639ee032", "projectName": "openmrs.openmrs-core", "bugType": "Change Numeric Literal", "problem": " \t        throws Exception {\r\n \t\tVector<Object> providers = service.findProvider(\"provider\", true, 0, 10);\r\n\t\tAssert.assertEquals(3, providers.size());\r\n \t\tAssert.assertTrue(CollectionUtils.exists(providers, new Predicate() {\r", "fixed": " \t        throws Exception {\r\n \t\tVector<Object> providers = service.findProvider(\"provider\", true, 0, 10);\r\n\t\tAssert.assertEquals(4, providers.size());\r\n \t\tAssert.assertTrue(CollectionUtils.exists(providers, new Predicate() {\r", "sourceBeforeFix": "Assert.assertEquals(3,providers.size())", "sourceAfterFix": "Assert.assertEquals(4,providers.size())"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     protected CamelContext createCamelContext() throws Exception {\n         NagiosEventNotifier notifier = new NagiosEventNotifier();\n         notifier.getConfiguration().setHost(\"localhost\");\n        notifier.getConfiguration().setPort(25667);\n         notifier.getConfiguration().setPassword(\"password\");\n         CamelContext context = super.createCamelContext();", "fixed": "     protected CamelContext createCamelContext() throws Exception {\n         NagiosEventNotifier notifier = new NagiosEventNotifier();\n         notifier.getConfiguration().setHost(\"localhost\");\n        notifier.getConfiguration().setPort(25669);\n         notifier.getConfiguration().setPassword(\"password\");\n         CamelContext context = super.createCamelContext();", "sourceBeforeFix": "notifier.getConfiguration().setPort(25667)", "sourceAfterFix": "notifier.getConfiguration().setPort(25669)"}
{"fixCommitSHA1": "71ca4705df961c60993178197646aee30d3b6311", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         return getNode(random.nextInt(cluster.size()));\n     }\n    public void terminateRandomNode(){\n         HazelcastInstance node = getRandomNode();\n        node.getLifecycleService().terminate();\n         cluster.remove(node);\n     }", "fixed": "         return getNode(random.nextInt(cluster.size()));\n     }\n    public void shutdownRandomNode(){\n         HazelcastInstance node = getRandomNode();\n        node.getLifecycleService().shutdown();\n         cluster.remove(node);\n     }", "sourceBeforeFix": "node.getLifecycleService().terminate()", "sourceAfterFix": "node.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "cddf42c30c1b839e44c03e017ccdb3619d3aa967", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\tif (person.isPersonVoided()) {\r\n\t\t\tif (!StringUtils.hasLength(person.getVoidReason()))\r\n \t\t\t\tthrow new APIException(\r\n \t\t\t\t        \"The voided bit was set to true, so a void reason is required at save time for person: \" + person);\r", "fixed": " \t\tif (person.isPersonVoided()) {\r\n\t\t\tif (!StringUtils.hasLength(person.getPersonVoidReason()))\r\n \t\t\t\tthrow new APIException(\r\n \t\t\t\t        \"The voided bit was set to true, so a void reason is required at save time for person: \" + person);\r", "sourceBeforeFix": "person.getVoidReason()", "sourceAfterFix": "person.getPersonVoidReason()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "fixed": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic abstract int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastAtomicnumberEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default HazelcastAtomicnumberEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastAtomicnumberEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default HazelcastAtomicnumberEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\ngetResponse(\"http:", "fixed": " \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\ngetResponse(\"http:", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "     return secret;\n   }\n  String getPercentEncodedKey() {\n     return percentEncodedKey;\n   }", "fixed": "     return secret;\n   }\n  public String getPercentEncodedKey() {\n     return percentEncodedKey;\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "fixed": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic abstract int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "f9e60b9fa8dfcbf5dc37b2a88922f57cb292c7dd", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "         Host undertowHost = getUndertowHost(hostInfo);\n         if (undertowHost != null && !undertowHost.getServer().getListeners().isEmpty()) {\n             if (!securePort) {\n                return undertowHost.getServer().getListeners().get(0).getBinding().getValue().getPort();\n             } else {\n                 for(ListenerService<?> listener : undertowHost.getServer().getListeners()) {\n                     if (listener.isSecure()) {", "fixed": "         Host undertowHost = getUndertowHost(hostInfo);\n         if (undertowHost != null && !undertowHost.getServer().getListeners().isEmpty()) {\n             if (!securePort) {\n                return undertowHost.getServer().getListeners().get(0).getBinding().getValue().getAbsolutePort();\n             } else {\n                 for(ListenerService<?> listener : undertowHost.getServer().getListeners()) {\n                     if (listener.isSecure()) {", "sourceBeforeFix": "undertowHost.getServer().getListeners().get(0).getBinding().getValue().getPort()", "sourceAfterFix": "undertowHost.getServer().getListeners().get(0).getBinding().getValue().getAbsolutePort()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean scrolled (int amount) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].scrolled(amount)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean scrolled (int amount) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).scrolled(amount)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedUndertowEndpointBuilder\n             extends\n                 AdvancedUndertowEndpointConsumerBuilder, AdvancedUndertowEndpointProducerBuilder {\n         default UndertowEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedUndertowEndpointBuilder\n             extends\n                 AdvancedUndertowEndpointConsumerBuilder, AdvancedUndertowEndpointProducerBuilder {\n         default UndertowEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(littleEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "fixed": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DdbEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedDdbEndpointBuilder advanced() {\n             return (AdvancedDdbEndpointBuilder) this;\n         }", "fixed": "     \n    public interface DdbEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedDdbEndpointBuilder advanced() {\n             return (AdvancedDdbEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "17de6689ab43b6d8fc8b60b87eb1155ba55b26f6", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": " \t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {\n\t\t\tlogger.error(\"Could not parse VCAP_APPLICATION\", ex);\n \t\t}\n \t\treturn properties;\n \t}", "fixed": " \t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {\n\t\t\tlogger.error(\"Could not parse VCAP_SERVICES\", ex);\n \t\t}\n \t\treturn properties;\n \t}", "sourceBeforeFix": "Integer.MIN_VALUE + 11", "sourceAfterFix": "Integer.MIN_VALUE + 9"}
{"fixCommitSHA1": "04a9a6c7b384192c93813053ba1a2e102f2bdf74", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         try {\n             Getter parent = null;\n             List<String> possibleMethodNames = new ArrayList<String>(INITIAL_CAPACITY);\n            for (final String name : attribute.split(\"\\\\.\")) {\n                 Getter localGetter = null;\n                 possibleMethodNames.clear();\n                 possibleMethodNames.add(name);", "fixed": "         try {\n             Getter parent = null;\n             List<String> possibleMethodNames = new ArrayList<String>(INITIAL_CAPACITY);\n            for (final String name : paramAttribute.split(\"\\\\.\")) {\n                 Getter localGetter = null;\n                 possibleMethodNames.clear();\n                 possibleMethodNames.add(name);", "sourceBeforeFix": "attribute.split(\"\\\\.\")", "sourceAfterFix": "paramAttribute.split(\"\\\\.\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "2de99a4f38d67e7e2744a2d815ddb1910ef63b1a", "projectName": "Bukkit.Bukkit", "bugType": "Change Binary Operator", "problem": "      */\n     public static DyeColor getByWoolData(final byte data) {\n         int i = 0xff & data;\n        if (i > BY_WOOL_DATA.length) {\n             return null;\n         }\n         return BY_WOOL_DATA[i];", "fixed": "      */\n     public static DyeColor getByWoolData(final byte data) {\n         int i = 0xff & data;\n        if (i >= BY_WOOL_DATA.length) {\n             return null;\n         }\n         return BY_WOOL_DATA[i];", "sourceBeforeFix": "i > BY_WOOL_DATA.length", "sourceAfterFix": "i >= BY_WOOL_DATA.length"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback);\n     @GET\n     @Consumes({ \"*/*\" })", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback) throws Exception;\n     @GET\n     @Consumes({ \"*/*\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "b366b2fb1840d4df542a69a8021a2e5498f7eec2", "projectName": "google.guava", "bugType": "Same Function Swap Args", "problem": "             assertNull(q.peek());\n             assertNull(q.poll());\n             assertNull(q.poll(0, MILLISECONDS));\n            assertEquals(q.toString(), \"[]\");\n             assertTrue(Arrays.equals(q.toArray(), new Object[0]));\n             assertFalse(q.iterator().hasNext());\n             try {", "fixed": "             assertNull(q.peek());\n             assertNull(q.poll());\n             assertNull(q.poll(0, MILLISECONDS));\n            assertEquals(\"[]\", q.toString());\n             assertTrue(Arrays.equals(q.toArray(), new Object[0]));\n             assertFalse(q.iterator().hasNext());\n             try {", "sourceBeforeFix": "assertEquals(q.toString(),\"[]\")", "sourceAfterFix": "assertEquals(\"[]\",q.toString())"}
{"fixCommitSHA1": "71b5386e09c6f6e781220b1d781ce3aaf0bce816", "projectName": "Atmosphere.atmosphere", "bugType": "Change Unary Operator\t", "problem": "         r.getRequest().setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE, r);\n         r.getRequest().setAttribute(FrameworkConfig.ATMOSPHERE_HANDLER, this);\n         try {\n            if (wrapRequest) {\n                 wrapper.service(r.getRequest(), r.getResponse());\n             } else {\n                 wrapper.service(new AtmosphereRequestWrapper(r.getRequest()), new AtmosphereResponseWrapper(r.getResponse()));", "fixed": "         r.getRequest().setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE, r);\n         r.getRequest().setAttribute(FrameworkConfig.ATMOSPHERE_HANDLER, this);\n         try {\n            if (!wrapRequest) {\n                 wrapper.service(r.getRequest(), r.getResponse());\n             } else {\n                 wrapper.service(new AtmosphereRequestWrapper(r.getRequest()), new AtmosphereResponseWrapper(r.getResponse()));", "sourceBeforeFix": "wrapRequest", "sourceAfterFix": "!wrapRequest"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "e3c87cba0bbed00c739e01599e29a5621c9ef3b3", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n \t\t}\n \t\t@Bean", "fixed": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.responder());\n \t\t}\n \t\t@Bean", "sourceBeforeFix": "messageHandler.serverResponder()", "sourceAfterFix": "messageHandler.responder()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "1176e8a1ba798ec3d6967b911f5d8f1c5f754691", "projectName": "libgdx.libgdx", "bugType": "Change Boolean Literal", "problem": " \t@Override\r\n \tpublic void create () {\r\n \t\tGdx.app.log(\"MD5 Test\", \"created\");\r\n\t\tmodel = MD5Loader.loadModel(Gdx.files.internal(\"data/zfat.md5mesh\").read(), false);\r\n \t\tanim = MD5Loader.loadAnimation(Gdx.files.internal(\"data/walk1.md5anim\").read());\r\n \t\tskeleton = new MD5Joints();\r\n \t\tskeleton.joints = new float[anim.frames[0].joints.length];\r", "fixed": " \t@Override\r\n \tpublic void create () {\r\n \t\tGdx.app.log(\"MD5 Test\", \"created\");\r\n\t\tmodel = MD5Loader.loadModel(Gdx.files.internal(\"data/zfat.md5mesh\").read(), true);\r\n \t\tanim = MD5Loader.loadAnimation(Gdx.files.internal(\"data/walk1.md5anim\").read());\r\n \t\tskeleton = new MD5Joints();\r\n \t\tskeleton.joints = new float[anim.frames[0].joints.length];\r", "sourceBeforeFix": "MD5Loader.loadModel(Gdx.files.internal(\"data/zfat.md5mesh\").read(),false)", "sourceAfterFix": "MD5Loader.loadModel(Gdx.files.internal(\"data/zfat.md5mesh\").read(),true)"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result4\");\n        mock.expectedBodiesReceived(\"Hello World 3\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result4\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World 3\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World 3\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World 3\")"}
{"fixCommitSHA1": "8af2dd3da2bacbd93965edb9de9d5ba3a8bf9ca4", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "                   HConstants.HREGION_EDITS_REPLAY_SKIP_ERRORS + \" instead.\");\n         }\n         if (skipErrors) {\n          Path p = WALSplitter.moveAsideBadEditsFile(walFS, edits);\n           LOG.error(HConstants.HREGION_EDITS_REPLAY_SKIP_ERRORS\n               + \"=true so continuing. Renamed \" + edits +\n               \" as \" + p, e);", "fixed": "                   HConstants.HREGION_EDITS_REPLAY_SKIP_ERRORS + \" instead.\");\n         }\n         if (skipErrors) {\n          Path p = WALSplitter.moveAsideBadEditsFile(fs, edits);\n           LOG.error(HConstants.HREGION_EDITS_REPLAY_SKIP_ERRORS\n               + \"=true so continuing. Renamed \" + edits +\n               \" as \" + p, e);", "sourceBeforeFix": "WALSplitter.moveAsideBadEditsFile(walFS,edits)", "sourceAfterFix": "WALSplitter.moveAsideBadEditsFile(fs,edits)"}
{"fixCommitSHA1": "facd8dc5ca08d45214b47e394b78e59f71d588f5", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         ModelNode request = (ModelNode) ctx.get(\"OP_REQ\");\n         if(request == null) {\n            throw new CommandFormatException(\"Parsed request isn't available.\");\n         }\n         if(ctx.getConfig().isValidateOperationRequests()) {", "fixed": "         ModelNode request = (ModelNode) ctx.get(\"OP_REQ\");\n         if(request == null) {\n            throw new CommandLineException(\"Parsed request isn't available.\");\n         }\n         if(ctx.getConfig().isValidateOperationRequests()) {", "sourceBeforeFix": "new CommandFormatException(\"Failed to execute operation.\",e)", "sourceAfterFix": "new CommandLineException(\"Failed to execute operation.\",e)"}
{"fixCommitSHA1": "4281cc1c5d3aa51b56db9d9e251c761c52a855e3", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * before growing the backing table. */\r\n \tpublic ObjectIntMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "fixed": " \t * before growing the backing table. */\r\n \tpublic ObjectIntMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "55fcf189eb1c1c4d776ce3b3ad7835fb404b21d8", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Implements the SAX document handler interfaces, so they do not\n      * appear in the public API of the ConfigurationLoader.\n      */\n    private class InternalLoader extends AbstractLoader\n     {\n         \n         private static final String MODULE = \"module\";", "fixed": "      * Implements the SAX document handler interfaces, so they do not\n      * appear in the public API of the ConfigurationLoader.\n      */\n    private final class InternalLoader\n        extends AbstractLoader\n     {\n         \n         private static final String MODULE = \"module\";", "sourceBeforeFix": "2", "sourceAfterFix": "18"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "    * @param methodName the name of the method\n    * @param methodParams the method parameter types\n    */\n  public OptionalMethod(Class<?> returnType, String methodName, Class... methodParams) {\n     this.returnType = returnType;\n     this.methodName = methodName;\n     this.methodParams = methodParams;", "fixed": "    * @param methodName the name of the method\n    * @param methodParams the method parameter types\n    */\n  OptionalMethod(Class<?> returnType, String methodName, Class... methodParams) {\n     this.returnType = returnType;\n     this.methodName = methodName;\n     this.methodParams = methodParams;", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink result = new Sink(\"result.json\").withInputs(join);\n \t\texpectedPlan.setSinks(result);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink result = new Sink(\"result.json\").withInputs(join);\n \t\texpectedPlan.setSinks(result);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClientModel(@Valid Client body);\n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })", "fixed": "     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClientModel(@Valid Client body) throws Exception;\n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n        return Short.valueOf(value.toString());\n     }\n     @Override", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n        return Short.parseShort(value.toString());\n     }\n     @Override", "sourceBeforeFix": "Double.valueOf(value.toString())", "sourceAfterFix": "Double.parseDouble(value.toString())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testSamplingFromExchangeStream() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "fixed": "     public void testSamplingFromExchangeStream() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "4ef3a770a316068a6748f05a2c80969c3d6ffde1", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "         index.getDataInterval(),\n         VirtualColumns.EMPTY,\n         Granularities.ALL,\n        false\n     );\n     final List<Double> results = Sequences.toList(", "fixed": "         index.getDataInterval(),\n         VirtualColumns.EMPTY,\n         Granularities.ALL,\n        false,\n        null\n     );\n     final List<Double> results = Sequences.toList(", "sourceBeforeFix": "adapter.makeCursors(null,index.getDataInterval(),VirtualColumns.EMPTY,Granularities.ALL,false)", "sourceAfterFix": "adapter.makeCursors(null,index.getDataInterval(),VirtualColumns.EMPTY,Granularities.ALL,false,null)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMasterEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default MasterEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMasterEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default MasterEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void completeFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void completeFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "d18446f8da47a778fa65b9c0ca77019740879a21", "projectName": "cucumber.cucumber-jvm", "bugType": "Wrong Function Name", "problem": "     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n     @Test\n    public void does_not_match_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(4L)));\n        assertFalse(predicate.apply(pickleEvent));\n     }\n     @Test", "fixed": "     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n     @Test\n    public void matches_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(8L)));\n        assertTrue(predicate.apply(pickleEvent));\n     }\n     @Test", "sourceBeforeFix": "assertFalse(predicate.apply(pickleEvent))", "sourceAfterFix": "assertTrue(predicate.apply(pickleEvent))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "c652becda0968455eb91a6eed511c161ae77388b", "projectName": "scribejava.scribejava", "bugType": "Change Modifier", "problem": " public class RSASha1SignatureServiceTest {\n    RSASha1SignatureService service = new RSASha1SignatureService(getPrivateKey());\n     @Test\n     public void shouldReturnSignatureMethodString() {", "fixed": " public class RSASha1SignatureServiceTest {\n    private RSASha1SignatureService service = new RSASha1SignatureService(getPrivateKey());\n     @Test\n     public void shouldReturnSignatureMethodString() {", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface UndertowEndpointBuilder\n             extends\n                 UndertowEndpointConsumerBuilder, UndertowEndpointProducerBuilder {\n         default AdvancedUndertowEndpointBuilder advanced() {", "fixed": "     \n    public interface UndertowEndpointBuilder\n             extends\n                 UndertowEndpointConsumerBuilder, UndertowEndpointProducerBuilder {\n         default AdvancedUndertowEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "b1aa0100b3f37551bcd8507d168449d8b03c5c57", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "             expand(view, absNode);\n         }\n        graphVersion.incNodeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "fixed": "             expand(view, absNode);\n         }\n        graphVersion.incNodeAndEdgeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "sourceBeforeFix": "graphVersion.incNodeVersion()", "sourceAfterFix": "graphVersion.incNodeAndEdgeVersion()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Advanced builder for endpoint for the Web3j Ethereum Blockchain\n      * component.\n      */\n    public static interface AdvancedWeb3jEndpointBuilder\n             extends\n                 AdvancedWeb3jEndpointConsumerBuilder, AdvancedWeb3jEndpointProducerBuilder {\n         default Web3jEndpointBuilder basic() {", "fixed": "      * Advanced builder for endpoint for the Web3j Ethereum Blockchain\n      * component.\n      */\n    public interface AdvancedWeb3jEndpointBuilder\n             extends\n                 AdvancedWeb3jEndpointConsumerBuilder, AdvancedWeb3jEndpointProducerBuilder {\n         default Web3jEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477c6ea32082b4741375c84fa3d2c9e8d8822c0c", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "      */\n     public static InputStream loadResourceAsStream(String name, ClassLoader loader) {\n         try {\n            URL res = loadResourceAsURL(name);\n             return res != null ? res.openStream() : null;\n         } catch (IOException e) {\n             return null;", "fixed": "      */\n     public static InputStream loadResourceAsStream(String name, ClassLoader loader) {\n         try {\n            URL res = loadResourceAsURL(name, loader);\n             return res != null ? res.openStream() : null;\n         } catch (IOException e) {\n             return null;", "sourceBeforeFix": "loadResourceAsURL(name)", "sourceAfterFix": "loadResourceAsURL(name,loader)"}
{"fixCommitSHA1": "a7704d7675b90c86d8de21be0683a387e09dac23", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         ModelNode op = new ModelNode();\n         op.get(\"operation\").set(\"read-children-names\");\n         op.get(\"child-type\").set(\"server-config\");\n        op.get(\"address\").set(\"host\", host);\n         ModelNode result = executeForResult(OperationBuilder.Factory.create(op).build());\n         Set<String> servers = new HashSet<String>();\n         for (ModelNode server : result.asList()) {", "fixed": "         ModelNode op = new ModelNode();\n         op.get(\"operation\").set(\"read-children-names\");\n         op.get(\"child-type\").set(\"server-config\");\n        op.get(\"address\").add(\"host\", host);\n         ModelNode result = executeForResult(OperationBuilder.Factory.create(op).build());\n         Set<String> servers = new HashSet<String>();\n         for (ModelNode server : result.asList()) {", "sourceBeforeFix": "op.get(\"address\").set(\"host\",host)", "sourceAfterFix": "op.get(\"address\").add(\"host\",host)"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeInEdge(Object edge, boolean isSelfLoop) {\n     N node = super.removeInEdge(edge, isSelfLoop);\n     Multiset<N> predecessors = getReference(predecessorsReference);\n     if (predecessors != null) {", "fixed": "   }\n   @Override\n  public N removeInEdge(E edge, boolean isSelfLoop) {\n     N node = super.removeInEdge(edge, isSelfLoop);\n     Multiset<N> predecessors = getReference(predecessorsReference);\n     if (predecessors != null) {", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "46125686874f5b69bcdb6f4c9bef3f900a7057c6", "projectName": "netty.netty", "bugType": "Change Numeric Literal", "problem": "                 wakenUp.set(false);\n                 try {\n                    int selectedKeyCount = selector.select(500);", "fixed": "                 wakenUp.set(false);\n                 try {\n                    int selectedKeyCount = selector.select(10);", "sourceBeforeFix": "selector.select(500)", "sourceAfterFix": "selector.select(10)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cfa8eba2d2d6b3d15b2e81a1f4360bf87ebc6520", "projectName": "wildfly.wildfly", "bugType": "More Specific If", "problem": "                     fail(\"Didn't fail: \" + result.asString());\n                 }\n                 String failureDesc = result.get(FAILURE_DESCRIPTION).asString();\n                if (!failureDesc.contains(\"14807\") && !failureDesc.contains(\"14883\")) {\n                     fail(\"Incorrect failure type: \" + result.asString());\n                 }\n                 break;", "fixed": "                     fail(\"Didn't fail: \" + result.asString());\n                 }\n                 String failureDesc = result.get(FAILURE_DESCRIPTION).asString();\n                if (!failureDesc.contains(\"14807\") && !failureDesc.contains(\"14883\") && !failureDesc.contains(\"11340\")) {\n                     fail(\"Incorrect failure type: \" + result.asString());\n                 }\n                 break;", "sourceBeforeFix": "!failureDesc.contains(\"14807\") && !failureDesc.contains(\"14883\")", "sourceAfterFix": "!failureDesc.contains(\"14807\") && !failureDesc.contains(\"14883\") && !failureDesc.contains(\"11340\")"}
{"fixCommitSHA1": "97f40446edd5f66145bde79c4a7c0de6a88716e9", "projectName": "square.javapoet", "bugType": "Change Modifier", "problem": "     this(out, \"  \");\n   }\n  public CodeWriter(Appendable out, String indent) {\n     this(out, indent, Collections.<String, ClassName>emptyMap());\n   }\n  public CodeWriter(Appendable out, String indent, Map<String, ClassName> importedTypes) {\n     this.out = checkNotNull(out, \"out == null\");\n     this.indent = checkNotNull(indent, \"indent == null\");\n     this.importedTypes = checkNotNull(importedTypes, \"importedTypes == null\");", "fixed": "     this(out, \"  \");\n   }\n  CodeWriter(Appendable out, String indent) {\n     this(out, indent, Collections.<String, ClassName>emptyMap());\n   }\n  CodeWriter(Appendable out, String indent, Map<String, ClassName> importedTypes) {\n     this.out = checkNotNull(out, \"out == null\");\n     this.indent = checkNotNull(indent, \"indent == null\");\n     this.importedTypes = checkNotNull(importedTypes, \"importedTypes == null\");", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithListInput(@Valid List<User> body);\n     @DELETE\n     @Path(\"/{username}\")", "fixed": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithListInput(@Valid List<User> body) throws Exception;\n     @DELETE\n     @Path(\"/{username}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0365cf723f8073528dc2c379b2c6f8fb9e6669d3", "projectName": "square.okhttp", "bugType": "Change Identifier Used", "problem": "   private void reusedConnectionFailsWithPost(TransferKind transferKind, int requestSize)\n       throws Exception {\n    server.enqueue(new MockResponse().setBody(\"A\").setSocketPolicy(SHUTDOWN_INPUT_AT_END));\n     server.enqueue(new MockResponse().setBody(\"B\"));\n     server.enqueue(new MockResponse().setBody(\"C\"));\n     server.play();", "fixed": "   private void reusedConnectionFailsWithPost(TransferKind transferKind, int requestSize)\n       throws Exception {\n    server.enqueue(new MockResponse().setBody(\"A\").setSocketPolicy(DISCONNECT_AT_END));\n     server.enqueue(new MockResponse().setBody(\"B\"));\n     server.enqueue(new MockResponse().setBody(\"C\"));\n     server.play();", "sourceBeforeFix": "new MockResponse().setBody(\"A\").setSocketPolicy(SHUTDOWN_INPUT_AT_END)", "sourceAfterFix": "new MockResponse().setBody(\"A\").setSocketPolicy(DISCONNECT_AT_END)"}
{"fixCommitSHA1": "1aca2ceab66757dabb1d5bd8cff6c5f793ce4669", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "                         if (mapStoreConfig != null && mapStoreConfig.isEnabled()) {\n                             cmap.setInitState(InitializationState.INITIALIZING);\n                             try {\n                                ExecutorService es = getExecutorService();\n                                 final Set<Member> members = new HashSet<Member>(getCluster().getMembers());\n                                 members.remove(node.localMember);\n                                 final MultiTask task = new MultiTask(new InitializeMap(mProxy.getName()), members);", "fixed": "                         if (mapStoreConfig != null && mapStoreConfig.isEnabled()) {\n                             cmap.setInitState(InitializationState.INITIALIZING);\n                             try {\n                                ExecutorService es = getExecutorService(\"hz.initialization\");\n                                 final Set<Member> members = new HashSet<Member>(getCluster().getMembers());\n                                 members.remove(node.localMember);\n                                 final MultiTask task = new MultiTask(new InitializeMap(mProxy.getName()), members);", "sourceBeforeFix": "getExecutorService()", "sourceAfterFix": "getExecutorService(\"hz.initialization\")"}
{"fixCommitSHA1": "e3b94b6ab4c29b8dddb99ce9fd2efa36e097d455", "projectName": "facebook.presto", "bugType": "Change Binary Operator", "problem": "             }\n            while (!queuedPages.isEmpty() && bufferedBytes >= maxBufferedBytes) {\n                 QueuedPage queuedPage = queuedPages.removeFirst();\n                 addInternal(queuedPage.getPage());\n                 queuedPage.getFuture().set(null);", "fixed": "             }\n            while (!queuedPages.isEmpty() && bufferedBytes < maxBufferedBytes) {\n                 QueuedPage queuedPage = queuedPages.removeFirst();\n                 addInternal(queuedPage.getPage());\n                 queuedPage.getFuture().set(null);", "sourceBeforeFix": "bufferedBytes >= maxBufferedBytes", "sourceAfterFix": "bufferedBytes < maxBufferedBytes"}
{"fixCommitSHA1": "7926d45bf0b4b2877603d033a70f089324af4696", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "  */\n public class DefaultProducerCacheTest extends ContextTestSupport {\n    private static final AtomicInteger counter = new AtomicInteger();\n     public void testCacheProducerAcquireAndRelease() throws Exception {\n         ProducerCache cache = new ProducerCache(this, context);", "fixed": "  */\n public class DefaultProducerCacheTest extends ContextTestSupport {\n    private static final AtomicInteger COUNTER = new AtomicInteger();\n     public void testCacheProducerAcquireAndRelease() throws Exception {\n         ProducerCache cache = new ProducerCache(this, context);", "sourceBeforeFix": "2", "sourceAfterFix": "18"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "99ed41cc78fe7dbc36ea17d9a6a1a56b51bcb12d", "projectName": "gephi.gephi", "bugType": "Change Numeric Literal", "problem": "         assertEquals(inDegree3, 1.0);\r\n         assertEquals(degree1, 2.0);\r\n         assertEquals(outDegree5, 1.0);\r\n        assertEquals(avDegree, 2.0);\r\n     }\r\n     @Test\r", "fixed": "         assertEquals(inDegree3, 1.0);\r\n         assertEquals(degree1, 2.0);\r\n         assertEquals(outDegree5, 1.0);\r\n        assertEquals(avDegree, 1.0);\r\n     }\r\n     @Test\r", "sourceBeforeFix": "assertEquals(avDegree,2.0)", "sourceAfterFix": "assertEquals(avDegree,1.0)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n        return Short.valueOf(value.toString());\n     }\n     @Override", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n        return Short.parseShort(value.toString());\n     }\n     @Override", "sourceBeforeFix": "Float.valueOf(value.toString())", "sourceAfterFix": "Float.parseFloat(value.toString())"}
{"fixCommitSHA1": "3a534d35b632476ca1a01520005a63914168d24c", "projectName": "google.guava", "bugType": "Change Binary Operator", "problem": "   try {\n     testCase.tearDown();\n   } catch (Throwable t) {\n    if (failure != null) {\n       failure = t;\n     }\n   }", "fixed": "   try {\n     testCase.tearDown();\n   } catch (Throwable t) {\n    if (failure == null) {\n       failure = t;\n     }\n   }", "sourceBeforeFix": "failure != null", "sourceAfterFix": "failure == null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedIgniteSetEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default IgniteSetEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedIgniteSetEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default IgniteSetEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7b1dba9a494ca50e2fde047544a675df6c702e54", "projectName": "apache.camel", "bugType": "More Specific If", "problem": "             return false;\n         }\n        if (expression.indexOf(\"${\") >= 0) {\n             return true;\n         }", "fixed": "             return false;\n         }\n        if (\"simple\".equalsIgnoreCase(language) && expression.indexOf(\"${\") >= 0) {\n             return true;\n         }", "sourceBeforeFix": "expression.indexOf(\"${\") >= 0", "sourceAfterFix": "\"simple\".equalsIgnoreCase(language) && expression.indexOf(\"${\") >= 0"}
{"fixCommitSHA1": "04ad420f594bedd8cd5c40160d67585f70686a9c", "projectName": "aws.aws-sdk-java", "bugType": "Change Identifier Used", "problem": "             try {\n                 rawJsonContent = IOUtils.toString(httpResponse.getContent());\n             } catch (Exception e) {\n                LOG.error(\"Unable to read HTTP response content\", e);\n             }\n             return new JsonContent(rawJsonContent);", "fixed": "             try {\n                 rawJsonContent = IOUtils.toString(httpResponse.getContent());\n             } catch (Exception e) {\n                LOG.info(\"Unable to read HTTP response content\", e);\n             }\n             return new JsonContent(rawJsonContent);", "sourceBeforeFix": "LOG.error(\"Unable to parse HTTP response content\",e)", "sourceAfterFix": "LOG.info(\"Unable to parse HTTP response content\",e)"}
{"fixCommitSHA1": "6031e948694c50252def3e1df5a65323567e03ed", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         super.compare(modelA, modelB);\n        assertRemoveSubsystemResources(servicesA);\n     }", "fixed": "         super.compare(modelA, modelB);\n        assertRemoveSubsystemResources(servicesB);\n     }", "sourceBeforeFix": "assertRemoveSubsystemResources(servicesA)", "sourceAfterFix": "assertRemoveSubsystemResources(servicesB)"}
{"fixCommitSHA1": "2a30b5aba207ce85e6cff7645a6d17f8dbda9521", "projectName": "checkstyle.checkstyle", "bugType": "Change Numeric Literal", "problem": "     };\n     \n    private static final int DEFAULT_MAX_METHODS = 999;\n     \n     private int mMaxPrivate = DEFAULT_MAX_METHODS;\n     ", "fixed": "     };\n     \n    private static final int DEFAULT_MAX_METHODS = 100;\n     \n     private int mMaxPrivate = DEFAULT_MAX_METHODS;\n     ", "sourceBeforeFix": "DEFAULT_MAX_METHODS=999", "sourceAfterFix": "DEFAULT_MAX_METHODS=100"}
{"fixCommitSHA1": "d298a84f8d65d9b4edf47c7b742921ec134648d1", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     @UriPath @Metadata(required = \"true\")\n     private String clientId;\n    @UriPath @Metadata(required = \"true\")\n     private String username;\n    @UriPath @Metadata(required = \"true\")\n     private String password;\n     @UriParam\n     private String domain;", "fixed": "     @UriPath @Metadata(required = \"true\")\n     private String clientId;\n    @UriParam @Metadata(required = \"true\")\n     private String username;\n    @UriParam @Metadata(required = \"true\")\n     private String password;\n     @UriParam\n     private String domain;", "sourceBeforeFix": "@UriPath", "sourceAfterFix": "@UriParam"}
{"fixCommitSHA1": "c26f75c7940a77e85f38406258c453a08ff75376", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             }\n         });\n         MockEndpoint result = MockEndpoint.resolve(ctx, \"mock:result\");\n        registry.put(\"amazonSQSClient\", clientMock);\n         clientMock.setScheduler(ctx.getExecutorServiceManager().newScheduledThreadPool(clientMock, \"ClientMock Scheduler\", 1));\n         result.expectedMessageCount(1);", "fixed": "             }\n         });\n         MockEndpoint result = MockEndpoint.resolve(ctx, \"mock:result\");\n        registry.bind(\"amazonSQSClient\", clientMock);\n         clientMock.setScheduler(ctx.getExecutorServiceManager().newScheduledThreadPool(clientMock, \"ClientMock Scheduler\", 1));\n         result.expectedMessageCount(1);", "sourceBeforeFix": "registry.put(\"amazonSQSClient\",clientMock)", "sourceAfterFix": "registry.bind(\"amazonSQSClient\",clientMock)"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2e4508e11e0b6d8a4634dff159a8ce3e50c133ca", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t\t\t\tfor (JsonValue meshPart = meshParts.child; meshPart != null; meshPart = meshPart.next) {\r\n \t\t\t\t\tModelMeshPart jsonPart = new ModelMeshPart();\r\n \t\t\t\t\tString partId = meshPart.getString(\"id\", null);\r\n\t\t\t\t\tif (id == null) {\r\n \t\t\t\t\t\tthrow new GdxRuntimeException(\"Not id given for mesh part\");\r\n \t\t\t\t\t}\r\n \t\t\t\t\tfor (ModelMeshPart other : parts) {\r", "fixed": " \t\t\t\tfor (JsonValue meshPart = meshParts.child; meshPart != null; meshPart = meshPart.next) {\r\n \t\t\t\t\tModelMeshPart jsonPart = new ModelMeshPart();\r\n \t\t\t\t\tString partId = meshPart.getString(\"id\", null);\r\n\t\t\t\t\tif (partId == null) {\r\n \t\t\t\t\t\tthrow new GdxRuntimeException(\"Not id given for mesh part\");\r\n \t\t\t\t\t}\r\n \t\t\t\t\tfor (ModelMeshPart other : parts) {\r", "sourceBeforeFix": "id == null", "sourceAfterFix": "partId == null"}
{"fixCommitSHA1": "7e69b806137604da52bdded56b711041943a3893", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       if (types.size() > 1) {\n         if (isFwd) {\n           warnings.add(JSError.make(\n              callNode, NOT_UNIQUE_INSTANTIATION, funType.toString(),\n               UniqueNameGenerator.getOriginalName(typeParam),\n              types.toString()));\n         }\n         builder.put(typeParam, JSType.UNKNOWN);\n       } else if (types.size() == 1) {", "fixed": "       if (types.size() > 1) {\n         if (isFwd) {\n           warnings.add(JSError.make(\n              callNode, NOT_UNIQUE_INSTANTIATION,\n              Integer.toString(types.size()),\n               UniqueNameGenerator.getOriginalName(typeParam),\n              types.toString(),\n              funType.toString()));\n         }\n         builder.put(typeParam, JSType.UNKNOWN);\n       } else if (types.size() == 1) {", "sourceBeforeFix": "funType.toString()", "sourceAfterFix": "Integer.toString(types.size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         long taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 190);\n         watch.restart();\n         Thread.sleep(100);\n         taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 100 millis, was: \" + taken, taken > 90);\n     }\n     public void testStopWatchTaken() throws Exception {", "fixed": "         long taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 150);\n         watch.restart();\n         Thread.sleep(100);\n         taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 100 millis, was: \" + taken, taken > 50);\n     }\n     public void testStopWatchTaken() throws Exception {", "sourceBeforeFix": "taken > 190", "sourceAfterFix": "taken > 150"}
{"fixCommitSHA1": "dbc011c3f40c093057dfb9fd1cedf4bc783bd250", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": "     }\n     private void setValue(int id, byte val) {\n        memoryMap[id] = (short) ((memoryMap[id] & UPPER_BYTE_MASK) | val);\n     }\n     private byte depth(int id) {", "fixed": "     }\n     private void setValue(int id, byte val) {\n        memoryMap[id] = (short) (memoryMap[id] & UPPER_BYTE_MASK | val);\n     }\n     private byte depth(int id) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "83546b1062b34cc2431812517a1e3723a5e4b508", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "     \n    static final boolean UNSAFE_AVAILABLE;\n     \n    static final Unsafe UNSAFE;\n     private static final ILogger LOGGER = Logger.getLogger(UnsafeUtil.class);", "fixed": "     \n    public static final boolean UNSAFE_AVAILABLE;\n     \n    public static final Unsafe UNSAFE;\n     private static final ILogger LOGGER = Logger.getLogger(UnsafeUtil.class);", "sourceBeforeFix": "24", "sourceAfterFix": "25"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "bc6815fa67ef06bd49f0845c45f41532c93ebfe8", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "     }\r\n     public void setCategoryWithApiModel(CategoryWithApiModel category) {\r\n        this.categoryWithApiModel = categoryWithApiModel;\r\n     }\r\n     @XmlElement(name = \"name\")\r", "fixed": "     }\r\n     public void setCategoryWithApiModel(CategoryWithApiModel category) {\r\n        this.categoryWithApiModel = category;\r\n     }\r\n     @XmlElement(name = \"name\")\r", "sourceBeforeFix": "this.categoryWithApiModel=categoryWithApiModel", "sourceAfterFix": "this.categoryWithApiModel=category"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "356ec6bd0161edfd46b42ffe55961d52884eb7f0", "projectName": "wildfly.wildfly", "bugType": "Change Binary Operator", "problem": "         if (offset < 0) {\n             offset = 0;\n         }\n        if (offset >= 0) {\n             update = Util.getWriteAttributeOperation(address, SOCKET_BINDING_PORT_OFFSET, offset);\n         }\n         updates.add(update);", "fixed": "         if (offset < 0) {\n             offset = 0;\n         }\n        if (offset > 0) {\n             update = Util.getWriteAttributeOperation(address, SOCKET_BINDING_PORT_OFFSET, offset);\n         }\n         updates.add(update);", "sourceBeforeFix": "bindingGroup.get(PORT_OFFSET).asInt() >= 0", "sourceAfterFix": "bindingGroup.get(PORT_OFFSET).asInt() > 0"}
{"fixCommitSHA1": "10c93df27435ffbc037cde5e6063c9dbc6c0eb3f", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "     private static Socket createSocksSocket(HostAndPort proxy)\n     {\n        SocketAddress address = InetSocketAddress.createUnresolved(proxy.getHostText(), proxy.getPort());\n         return new Socket(new Proxy(Proxy.Type.SOCKS, address));\n     }", "fixed": "     private static Socket createSocksSocket(HostAndPort proxy)\n     {\n        SocketAddress address = InetSocketAddress.createUnresolved(proxy.getHost(), proxy.getPort());\n         return new Socket(new Proxy(Proxy.Type.SOCKS, address));\n     }", "sourceBeforeFix": "proxy.getHostText()", "sourceAfterFix": "proxy.getHost()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "                          boolean closeInfoAfterUse,\n                          OutputStream errorStream,\n                          boolean closeErrorAfterUse,\n                         AuditEvemtFormatter messageFormatter) {\n         closeInfo = closeInfoAfterUse;\n         closeError = closeErrorAfterUse;\n         final Writer infoStreamWriter = new OutputStreamWriter(infoStream, StandardCharsets.UTF_8);", "fixed": "                          boolean closeInfoAfterUse,\n                          OutputStream errorStream,\n                          boolean closeErrorAfterUse,\n                         AuditEventFormatter messageFormatter) {\n         closeInfo = closeInfoAfterUse;\n         closeError = closeErrorAfterUse;\n         final Writer infoStreamWriter = new OutputStreamWriter(infoStream, StandardCharsets.UTF_8);", "sourceBeforeFix": "AuditEvemtFormatter messageFormatter", "sourceAfterFix": "AuditEventFormatter messageFormatter"}
{"fixCommitSHA1": "0e2a0eede5bf85f3c1f64e5752501eddf9ab7202", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     CONSTANT_VALUES_PAIRED_STATS = accumulator.snapshot();\n   }\n  static final List<PairedStats> ALL_PAIRED_STATS =\n       ImmutableList.of(\n           EMPTY_PAIRED_STATS,\n           ONE_VALUE_PAIRED_STATS,", "fixed": "     CONSTANT_VALUES_PAIRED_STATS = accumulator.snapshot();\n   }\n  static final ImmutableList<PairedStats> ALL_PAIRED_STATS =\n       ImmutableList.of(\n           EMPTY_PAIRED_STATS,\n           ONE_VALUE_PAIRED_STATS,", "sourceBeforeFix": "List<PairedStats>", "sourceAfterFix": "ImmutableList<PairedStats>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0355f17f04738ad9315d0c8ecad1b282f836e7f3", "projectName": "antlr.antlr4", "bugType": "Wrong Function Name", "problem": " \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n \t}\n }", "fixed": " \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n \t}\n }", "sourceBeforeFix": "getTokenNames()", "sourceAfterFix": "getTokenDisplayNames()"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),args.rest())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "615135aaa2ec18ea6c0b4785749079df4db5fd7a", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Change Identifier Used", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "c107859092914bf1f6c684ee202f309eb60330e2", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": " \t\t\txml.append(\"<time-to-live-seconds>\").append(m.getTimeToLiveSeconds()).append(\"</time-to-live-seconds>\");\n \t\t\txml.append(\"<max-idle-seconds>\").append(m.getMaxIdleSeconds()).append(\"</max-idle-seconds>\");\n \t\t\txml.append(\"<cache-value>\").append(m.isCacheValue()).append(\"</cache-value>\");\n\t\t\txml.append(\"<read-backup-data>\").append(m.isCacheValue()).append(\"</read-backup-data>\");\n \t\t\txml.append(\"<merge-policy>\").append(m.getMergePolicy()).append(\"</merge-policy>\");\n \t\t\tif(m.getMapStoreConfig() != null) {", "fixed": " \t\t\txml.append(\"<time-to-live-seconds>\").append(m.getTimeToLiveSeconds()).append(\"</time-to-live-seconds>\");\n \t\t\txml.append(\"<max-idle-seconds>\").append(m.getMaxIdleSeconds()).append(\"</max-idle-seconds>\");\n \t\t\txml.append(\"<cache-value>\").append(m.isCacheValue()).append(\"</cache-value>\");\n\t\t\txml.append(\"<read-backup-data>\").append(m.isReadBackupData()).append(\"</read-backup-data>\");\n \t\t\txml.append(\"<merge-policy>\").append(m.getMergePolicy()).append(\"</merge-policy>\");\n \t\t\tif(m.getMapStoreConfig() != null) {", "sourceBeforeFix": "m.isCacheValue()", "sourceAfterFix": "m.isReadBackupData()"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "fixed": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "sourceBeforeFix": "mock.expectedMessageCount(10)", "sourceAfterFix": "mock.expectedMinimumMessageCount(10)"}
{"fixCommitSHA1": "85ab63427be9f51f13f5042715fe7e8eba0aede8", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "                     if (!compliant) {\n                         if (token != null && token.startsWith(\"<\") && !token.startsWith(\"<?\")) {\n                            LOG.error(\"XMLStreamReader {} not supporting Location\");\n                             throw new XMLStreamException(\"reader not supporting Location\");\n                         }\n                         compliant = true;", "fixed": "                     if (!compliant) {\n                         if (token != null && token.startsWith(\"<\") && !token.startsWith(\"<?\")) {\n                            LOG.error(\"XMLStreamReader not supporting Location\");\n                             throw new XMLStreamException(\"reader not supporting Location\");\n                         }\n                         compliant = true;", "sourceBeforeFix": "LOG.error(\"XMLStreamReader {} not supporting Location\")", "sourceAfterFix": "LOG.error(\"XMLStreamReader {} not supporting Location\",reader)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Mina2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMina2EndpointProducerBuilder advanced() {", "fixed": "     \n    public interface Mina2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMina2EndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6550ca67932a2e1ea9400bc020024742e937e2b6", "projectName": "openhab.openhab", "bugType": "Change Modifier", "problem": "         }\n        final boolean result = sendTweet(tweetTxt, fileToAttach);\n         if (deleteTemporaryFile) {\n         \tFileUtils.deleteQuietly(fileToAttach);", "fixed": "         }\n        boolean result = sendTweet(tweetTxt, fileToAttach);\n         if (deleteTemporaryFile) {\n         \tFileUtils.deleteQuietly(fileToAttach);", "sourceBeforeFix": "16", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSparkEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default SparkEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSparkEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default SparkEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "         ret = getMS().updateTableColumnStatistics(colStats);\n         return ret;\n       } finally {\n        endFunction(\"write_column_statistics: \", ret != false);\n       }\n     }", "fixed": "         ret = getMS().updateTableColumnStatistics(colStats);\n         return ret;\n       } finally {\n        endFunction(\"write_column_statistics: \", ret != false, null);\n       }\n     }", "sourceBeforeFix": "endFunction(\"delete_column_statistics_by_partition: \",ret != false)", "sourceAfterFix": "endFunction(\"delete_column_statistics_by_partition: \",ret != false,null)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJingEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JingEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJingEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JingEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ControlBusEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedControlBusEndpointBuilder advanced() {", "fixed": "     \n    public interface ControlBusEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedControlBusEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "fixed": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "sourceBeforeFix": "GL.glBindTextureEXT(target,texture)", "sourceAfterFix": "GL.glBindTexture(target,texture)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformiv(program,location,params)"}
{"fixCommitSHA1": "a975408b7c90e2d545a7a490687cddb717d43807", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   public static boolean matchingRow(final Cell left, final byte[] buf) {\n     if (buf == null) {\n      return left.getQualifierLength() == 0;\n     }\n     return matchingRow(left, buf, 0, buf.length);\n   }", "fixed": "   public static boolean matchingRow(final Cell left, final byte[] buf) {\n     if (buf == null) {\n      return left.getRowLength() == 0;\n     }\n     return matchingRow(left, buf, 0, buf.length);\n   }", "sourceBeforeFix": "left.getQualifierLength()", "sourceAfterFix": "left.getRowLength()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.set(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "fixed": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.get(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "1142a1aa062ec85ca3d2f3465afdaee56fff586b", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "             remoteAddress = nioChannel.receive(byteBuffer);\n             failure = false;\n        } catch (AsynchronousCloseException e) {\n         } catch (Throwable t) {\n             fireExceptionCaught(channel, t);", "fixed": "             remoteAddress = nioChannel.receive(byteBuffer);\n             failure = false;\n        } catch (ClosedChannelException e) {\n         } catch (Throwable t) {\n             fireExceptionCaught(channel, t);", "sourceBeforeFix": "AsynchronousCloseException e", "sourceAfterFix": "ClosedChannelException e"}
{"fixCommitSHA1": "d3eafb4cd35a17740adc2a9f69741604811b749f", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "   @Deployment(resources = { \"org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml\" })\n   public void testQueryStartedAfter() throws Exception {\n     Calendar calendar = new GregorianCalendar();\n    calendar.set(Calendar.YEAR, 2200);\n     calendar.set(Calendar.MONTH, 8);\n     calendar.set(Calendar.DAY_OF_MONTH, 30);\n     calendar.set(Calendar.HOUR_OF_DAY, 12);", "fixed": "   @Deployment(resources = { \"org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml\" })\n   public void testQueryStartedAfter() throws Exception {\n     Calendar calendar = new GregorianCalendar();\n    calendar.set(Calendar.YEAR, 2030);\n     calendar.set(Calendar.MONTH, 8);\n     calendar.set(Calendar.DAY_OF_MONTH, 30);\n     calendar.set(Calendar.HOUR_OF_DAY, 12);", "sourceBeforeFix": "calendar.set(Calendar.YEAR,2200)", "sourceAfterFix": "calendar.set(Calendar.YEAR,2030)"}
{"fixCommitSHA1": "55a4b30e72ad36e69499aa5db9b25f63ea7884ac", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\n         result.expectedMessageCount(2);\n         MockEndpoint error = getMockEndpoint(\"mock:error\");\n        error.expectedMessageCount(1);\n         template.sendBody(\"direct:start\", \"Hello World\");\n         template.sendBody(\"direct:start\", \"Bye World\");", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\n         result.expectedMessageCount(2);\n         MockEndpoint error = getMockEndpoint(\"mock:error\");\n        error.expectedMinimumMessageCount(1);\n         template.sendBody(\"direct:start\", \"Hello World\");\n         template.sendBody(\"direct:start\", \"Bye World\");", "sourceBeforeFix": "error.expectedMessageCount(2)", "sourceAfterFix": "error.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void majorCompact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    majorCompact(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void majorCompact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    majorCompact(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "fixed": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NettyHttpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedNettyHttpEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface NettyHttpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedNettyHttpEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "         @ApiResponse(code = 200, message = \"successful operation\", response = Order.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n    Order getOrderById(@PathParam(\"order_id\") @Min(1) @Max(5) @ApiParam(\"ID of pet that needs to be fetched\") Long orderId);\n     @POST\n     @Path(\"/order\")", "fixed": "         @ApiResponse(code = 200, message = \"successful operation\", response = Order.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n    Order getOrderById(@PathParam(\"order_id\") @Min(1) @Max(5) @ApiParam(\"ID of pet that needs to be fetched\") Long orderId) throws Exception;\n     @POST\n     @Path(\"/order\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "58ce4c40970fc29d00e5740bc6098eb475668e86", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "  * <p>\n  * Checks the Javadoc of a method or constructor.\n  * By default, does not check for unused throws.\n * To check for unused throws, set property checkUnusedThrows to true.\n  * The scope to verify is specified using the {@link Scope} class and\n* defaults to {@link Scope\n  * set property scope to one of the {@link Scope} constants.", "fixed": "  * <p>\n  * Checks the Javadoc of a method or constructor.\n  * By default, does not check for unused throws.\n * To allow documented <code>java.lang.RuntimeException</code>s\n * that are not declared, set property allowUndeclaredRTE to true.\n  * The scope to verify is specified using the {@link Scope} class and\n* defaults to {@link Scope\n  * set property scope to one of the {@link Scope} constants.", "sourceBeforeFix": "if (mCheckUnusedThrows) {   processImport(aAST); } ", "sourceAfterFix": "if (mAllowUndeclaredRTE) {   processImport(aAST); } "}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "fixed": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
