{"id": "/data/all/data/winderica/KanColleSource", "bugType": "prefer-rest-params", "problem": "            function e() {\r\n                return null !== t && t.apply(this, arguments) || this\r\n            }\r", "fixed": "            function e() {\r\n                var e = t.call(this) || this;\r\n                return e._layer = new PIXI.Container, e._layer.y = -30, e.addChild(e._layer), e._img3 = new PIXI.Sprite, e._layer.addChild(e._img3), e._img2 = new PIXI.Sprite, e._layer.addChild(e._img2), e._img1 = new PIXI.Sprite, e._layer.addChild(e._img1), e._basePos1 = new PIXI.Point, e._basePos2 = new PIXI.Point, e._basePos3 = new PIXI.Point, e._tweens = [], e\r\n            }\r", "message": "Use the rest parameters instead of 'arguments'."}
{"id": "/data/all/data/marko-js/marko", "bugType": "no-invalid-this", "problem": "    this.containingWidgetNode = null;\n    this.containingWidgetExtendNode = null;\n    return null;", "fixed": "    this.containingWidgetNode = null;\n    return null;", "message": "Unexpected 'this'."}
{"id": "/data/all/data/pouchdb-community/pouchdb-load", "bugType": "prefer-rest-params", "problem": "    var args = new Array(len);\n    var i = -1;\n    while (++i < len) {\n      args[i] = arguments[i];\n    }", "fixed": "      fun.apply(this, args);\n    }", "message": "Use the rest parameters instead of 'arguments'."}
{"id": "/data/all/data/mozilla/high-fidelity", "bugType": "no-unused-vars", "problem": "        request.addEventListener('progress', function(event) {\n            console.info('eventProgress', _this.get('_chunkCount'));", "fixed": "        request.addEventListener('progress', function() {\n            console.info('eventProgress', _this.get('_chunkCount'));", "message": "Unused variable."}
{"id": "/data/all/data/gulp-cookery/gulp-chef", "bugType": "no-dupe-keys", "problem": "    \n    styles: {\n        dest: 'css',    ", "fixed": "    \n    'styles:2': {\n        dest: 'css',    ", "message": "Duplicate key 'styles'."}
{"id": "/data/all/data/DigixGlobal/contest", "bugType": "prefer-spread", "problem": "      const fn = type !== 'transact' ? method.call : method;\n      const promise = fn.apply(null, params);\n      return handler({ promise, params, expected, transformers });", "fixed": "      const fn = type !== 'transact' ? method.call : method;\n      const promise = fn(...params);\n      return handler({ promise, params, expected, transformers });", "message": "Use the spread operator instead of '.apply()'."}
{"id": "/data/all/data/multiparty/jiff", "bugType": "no-throw-literal", "problem": "      if (!share.jiff.helpers.array_equals(share.holders, o.holders)) {\n        throw 'shares must be held by the same parties (/)';\n      }", "fixed": "      if (!share.jiff.helpers.array_equals(share.holders, o.holders)) {\n        throw new Error('shares must be held by the same parties (/)');\n      }", "message": "Expected an object to be thrown."}
{"id": "/data/all/data/highfidelity/hifi", "bugType": "prefer-rest-params", "problem": "            .replace('JSON', JSON.stringify(tmp, 0, 2).replace(/\\n/g, '<br />'));\n        if (arguments[3] === '_overlayWebWindow') {\n            bridgedSettings.sendEvent({", "fixed": "            .replace('JSON', JSON.stringify(tmp, 0, 2).replace(/\\n/g, '<br />'));\n        if (/WebWindowEx/.test(navigator.userAgent) ) {\n            bridgedSettings.sendEvent({", "message": "Use the rest parameters instead of 'arguments'."}
{"id": "/data/all/data/FreddyFY/material-datepicker", "bugType": "no-cond-assign", "problem": "    this.picker.style.zIndex = this.settings.zIndex;\n    if (this.settings.position =! null) {\n      this.picker.style.position = this.settings.position;", "fixed": "    this.picker.style.zIndex = this.settings.zIndex;\n    if (this.settings.position != null) {\n      this.picker.style.position = this.settings.position;", "message": "Expected a conditional expression and instead saw an assignment."}
{"id": "/data/all/data/arskom/qxsoap", "bugType": "comma-style", "problem": "            ,\"unsignedlong\": \"Number\"\n            ,\"nonnegativeinteger\": \"Number\"", "fixed": "            ,\"unsignedlong\": \"Number\"\n            ,\"integer\": \"Integer\"\n            ,\"nonnegativeinteger\": \"Number\"", "message": "',' should be placed last."}
