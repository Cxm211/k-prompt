{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != 0 ) { VAR_1 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_2 ) ; } else { if ( ! ( TYPE_2 . isEmpty ( VAR_4 ) ) ) { VAR_1 . METHOD_2 ( VAR_3 ) . METHOD_4 ( VAR_4 ) ; } } return super . METHOD_1 ( VAR_1 ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != 0 ) { VAR_1 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_2 ) ; } if ( ! ( TYPE_2 . isEmpty ( VAR_4 ) ) ) { VAR_1 . METHOD_2 ( VAR_3 ) . METHOD_4 ( VAR_4 ) ; } return super . METHOD_1 ( VAR_1 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMQEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MQEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMQEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MQEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"problem": "public static void METHOD_1 ( java.lang.String path , java.lang.Object ... data ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 class . METHOD_2 ( ) . METHOD_3 ( path ) ) ; TYPE_2 VAR_3 = VAR_4 < TYPE_2 > METHOD_4 ( ) ; VAR_3 . METHOD_5 ( data ) ; VAR_1 . METHOD_4 ( ) ; TYPE_3 VAR_5 = new TYPE_3 ( VAR_1 . METHOD_6 ( ) ) ; VAR_6 . METHOD_1 ( VAR_5 ) ; } catch ( java.io.IOException VAR_7 ) { VAR_7 . METHOD_7 ( ) ; } }\n", "fixed": "public static void METHOD_1 ( java.lang.String path , java.lang.Object ... data ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 class . METHOD_2 ( ) . METHOD_3 ( path ) ) ; TYPE_3 VAR_5 = new TYPE_3 ( VAR_1 . METHOD_6 ( ) ) ; VAR_4 < TYPE_2 > METHOD_4 ( ) . METHOD_5 ( data ) ; VAR_6 . METHOD_1 ( VAR_5 ) ; } catch ( java.io.IOException VAR_7 ) { VAR_7 . METHOD_7 ( ) ; } }\n"}
{"problem": "private void METHOD_1 ( ) { VAR_1 . get ( 0 ) . METHOD_2 ( METHOD_3 ( VAR_2 ) ) ; VAR_1 . get ( 1 ) . METHOD_2 ( METHOD_3 ( VAR_3 ) ) ; VAR_1 . get ( INT_1 ) . METHOD_2 ( METHOD_3 ( VAR_4 ) ) ; VAR_1 . get ( INT_2 ) . METHOD_2 ( METHOD_3 ( VAR_5 ) ) ; }\n", "fixed": "protected void METHOD_1 ( ) { VAR_1 . get ( 0 ) . METHOD_2 ( METHOD_3 ( VAR_2 ) ) ; VAR_1 . get ( 1 ) . METHOD_2 ( METHOD_3 ( VAR_3 ) ) ; VAR_1 . get ( INT_1 ) . METHOD_2 ( METHOD_3 ( VAR_4 ) ) ; VAR_1 . get ( INT_2 ) . METHOD_2 ( METHOD_3 ( VAR_5 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , java.lang.String VAR_3 , java.lang.String value ) { TYPE_1 VAR_4 = VAR_5 ; VAR_4 . METHOD_2 ( ) . METHOD_3 ( ( ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) + STRING_1 ) + VAR_3 ) , value ) . METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , java.lang.String VAR_3 , java.lang.String value ) { TYPE_1 VAR_4 = VAR_5 ; VAR_4 . METHOD_2 ( ) . METHOD_3 ( ( ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) + STRING_1 ) + VAR_3 ) , value ) . commit ( ) ; }\n"}
{"problem": "public void METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { if ( ! ( VAR_2 ) ) return ; if ( ( VAR_1 . size ( ) ) == 0 ) { VAR_3 . METHOD_2 ( STRING_1 ) ; return ; } VAR_3 . METHOD_2 ( STRING_2 , VAR_1 . size ( ) ) ; TYPE_1 VAR_4 = VAR_5 . METHOD_3 ( VAR_1 ) ; VAR_6 . METHOD_4 ( VAR_4 ) ; VAR_3 . METHOD_2 ( STRING_3 ) ; }\n", "fixed": "private void METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { if ( ! ( VAR_2 ) ) return ; if ( ( VAR_1 . size ( ) ) == 0 ) { VAR_3 . METHOD_2 ( STRING_1 ) ; return ; } VAR_3 . METHOD_2 ( STRING_2 , VAR_1 . size ( ) ) ; TYPE_1 VAR_4 = VAR_5 . METHOD_3 ( VAR_1 ) ; VAR_6 . METHOD_4 ( VAR_4 ) ; VAR_3 . METHOD_2 ( STRING_3 ) ; }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 . METHOD_1 ( 0 ) ) ; while ( true ) { TYPE_3 VAR_3 = VAR_1 . METHOD_1 ( VAR_4 ) ; VAR_5 . METHOD_2 ( VAR_3 ) ; try { java.lang.Thread . METHOD_3 ( ( ( long ) ( ( 1.0F / ( VAR_6 ) ) * INT_1 ) ) ) ; } catch ( TYPE_4 VAR_7 ) { VAR_7 . METHOD_4 ( ) ; } } }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; while ( true ) { TYPE_3 VAR_3 = VAR_1 . METHOD_1 ( VAR_4 ) ; VAR_5 . METHOD_2 ( VAR_3 ) ; try { java.lang.Thread . METHOD_3 ( ( ( long ) ( ( 1.0F / ( VAR_6 ) ) * INT_1 ) ) ) ; } catch ( TYPE_4 VAR_7 ) { VAR_7 . METHOD_4 ( ) ; } } }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : if ( VAR_2 . METHOD_3 ( VAR_3 ) ) { TYPE_2 . METHOD_4 ( this , VAR_3 ) ; } return true ; case VAR_4 : android.content.Intent intent = new android.content.Intent ( this , VAR_5 class ) ; METHOD_5 ( intent ) ; return true ; default : return super . METHOD_1 ( item ) ; } }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_4 : android.content.Intent intent = new android.content.Intent ( this , VAR_5 class ) ; METHOD_5 ( intent ) ; return true ; default : return super . METHOD_1 ( item ) ; } }\n"}
{"problem": "private boolean METHOD_1 ( java.lang.String str , int index , int offset , int VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( this , index , offset , VAR_1 ) ; int i ; for ( i = ( str . length ( ) ) - 1 ; i >= 0 ; i -- ) { if ( ( VAR_2 . METHOD_2 ( ) ) == ( str . METHOD_3 ( i ) ) ) offset -- ; else break ; } return i == ( - 1 ) ; }\n", "fixed": "private boolean METHOD_1 ( java.lang.String str , int index , int offset , int VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( this , index , offset , VAR_1 ) ; int i ; for ( i = ( str . length ( ) ) - 1 ; i >= 0 ; i -- ) { if ( ( VAR_2 . METHOD_2 ( ) ) == ( str . METHOD_3 ( i ) ) ) break ; } return i == ( - 1 ) ; }\n"}
{"problem": "public static java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; for ( java.io.File f : TYPE_1 . METHOD_2 ( ) ) { java.lang.String filename = f . getName ( ) ; try { TYPE_1 VAR_2 = TYPE_1 . METHOD_3 ( filename ) ; VAR_1 . add ( VAR_2 ) ; } catch ( java.io.IOException VAR_3 ) { java.lang.System.err.println ( ( ( STRING_1 + ( f . getName ( ) ) ) + STRING_2 ) ) ; } } return VAR_1 ; }\n", "fixed": "public static java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; for ( java.io.File f : TYPE_1 . METHOD_2 ( ) ) { java.lang.String filename = f . getName ( ) ; try { TYPE_1 VAR_2 = TYPE_1 . METHOD_3 ( filename ) ; VAR_1 . add ( VAR_2 ) ; } catch ( java.io.IOException VAR_3 ) { } } return VAR_1 ; }\n"}
{"project": "Closure", "bugId": 73, "problem": " static String strEscape(String s, char quote,\n            if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {", "fixed": " static String strEscape(String s, char quote,\n            if (c > 0x1f && c < 0x7f) {\n               sb.append(c);\n             } else {", "observations": "", "repairActions": ["condExpMod"], "repairPatterns": ["expLogicMod", "singleLine"]}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; java.lang.String VAR_2 = java.lang.String.format ( STRING_1 , VAR_1 . METHOD_2 ( VAR_3 ) , VAR_1 . METHOD_2 ( VAR_4 ) ) ; TYPE_4 VAR_5 = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) . build ( ) ; return VAR_5 . METHOD_5 ( ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { java.lang.String VAR_2 = java.lang.String.format ( STRING_1 , VAR_1 . METHOD_2 ( VAR_3 ) , VAR_1 . METHOD_2 ( VAR_4 ) ) ; TYPE_4 VAR_5 = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) . build ( ) ; return VAR_5 . METHOD_5 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"problem": "private java.util.Set < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Set < TYPE_1 > VAR_2 = new java.util.HashSet < > ( ) ; for ( int i = INT_1 ; i <= INT_2 ; i ++ ) { java.lang.Integer VAR_3 = METHOD_2 ( VAR_1 , i ) ; if ( METHOD_3 ( VAR_3 ) ) { VAR_2 . add ( VAR_4 . get ( i ) ) ; } } return VAR_2 ; }\n", "fixed": "private java.util.Set < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Set < TYPE_1 > VAR_2 = new java.util.HashSet < > ( ) ; for ( int i = INT_1 ; i <= INT_2 ; i ++ ) { int VAR_3 = METHOD_2 ( VAR_1 , i ) ; if ( METHOD_3 ( VAR_3 ) ) { VAR_2 . add ( VAR_4 . get ( i ) ) ; } } return VAR_2 ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { float VAR_2 = VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; float VAR_3 = VAR_1 . METHOD_2 ( METHOD_4 ( ) ) ; float VAR_4 = METHOD_5 ( ) . getValue ( ) ; java.lang.System.out.println ( ( ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_3 ) + STRING_3 ) + VAR_4 ) ) ; return ( VAR_2 > INT_1 ) && ( ( VAR_4 - VAR_3 ) < INT_1 ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { float VAR_3 = VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; float VAR_2 = VAR_1 . METHOD_2 ( METHOD_4 ( ) ) ; float VAR_4 = METHOD_5 ( ) . getValue ( ) ; java.lang.System.out.println ( ( ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_3 ) + STRING_3 ) + VAR_4 ) ) ; return ( VAR_2 > INT_1 ) && ( VAR_3 > INT_1 ) ; }\n"}
{"problem": "public synchronized void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ( ( STRING_1 + ( this . VAR_1 ) ) + STRING_2 ) ) ; TYPE_1 . METHOD_2 ( ( STRING_3 + ( this . VAR_2 ) ) ) ; TYPE_1 . METHOD_2 ( ( STRING_4 + ( this . VAR_3 ) ) ) ; TYPE_1 . METHOD_2 ( ( STRING_5 + ( this . VAR_4 ) ) ) ; TYPE_1 . METHOD_2 ( ( STRING_6 + ( this . VAR_5 ) ) ) ; }\n", "fixed": "public synchronized void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ( ( STRING_1 + ( this . VAR_1 ) ) + STRING_2 ) ) ; TYPE_1 . METHOD_2 ( ( STRING_3 + ( this . VAR_2 ) ) ) ; TYPE_1 . METHOD_2 ( ( STRING_4 + ( this . VAR_3 ) ) ) ; TYPE_1 . METHOD_2 ( ( STRING_5 + ( this . VAR_4 ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { TYPE_3 VAR_1 = new TYPE_3 ( ) ; VAR_1 . METHOD_2 ( TYPE_4 . METHOD_3 ( ) ) ; TYPE_5 . METHOD_4 ( new TYPE_1 ( STRING_1 ) ) . METHOD_5 ( VAR_2 ) . METHOD_6 ( VAR_1 ) ; VAR_3 . METHOD_7 ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { TYPE_3 VAR_1 = new TYPE_3 ( ) ; VAR_1 . METHOD_2 ( TYPE_4 . METHOD_3 ( ) ) ; METHOD_4 ( new TYPE_1 ( STRING_1 ) ) . METHOD_5 ( VAR_2 ) . METHOD_6 ( VAR_1 ) ; VAR_3 . METHOD_7 ( VAR_1 ) ; }\n"}
{"project": "Closure", "bugId": 72, "problem": " private void makeLocalNamesUnique(Node fnNode, boolean isCallInLoop) {\n                 \"inline_\",\n                 isCallInLoop)));\n   }\n   static class LabelNameSupplier implements Supplier<String> {", "fixed": " private void makeLocalNamesUnique(Node fnNode, boolean isCallInLoop) {\n                 \"inline_\",\n                 isCallInLoop)));\n    new RenameLabels(compiler, new LabelNameSupplier(idSupplier), false)\n        .process(null, fnNode);\n   }\n   static class LabelNameSupplier implements Supplier<String> {", "observations": "Instantiates an anonymous object and make a method call on it.", "repairActions": ["condExpExpand", "mcAdd", "objInstAdd"], "repairPatterns": ["expLogicExpand", "missComp"]}
{"problem": "public void METHOD_1 ( ) { this . VAR_1 = new TYPE_1 ( ) ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { java.lang.Thread . METHOD_3 ( INT_1 ) ; } catch ( TYPE_2 VAR_2 ) { VAR_2 . METHOD_4 ( ) ; } } TYPE_3 . METHOD_5 ( TYPE_4 . METHOD_6 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { this . VAR_1 = new TYPE_1 ( ) ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { java.lang.Thread . METHOD_3 ( INT_1 ) ; } catch ( TYPE_2 VAR_2 ) { VAR_2 . METHOD_4 ( ) ; } } }\n"}
{"problem": "public int compareTo ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; if ( ( ( this . VAR_3 . equals ( VAR_4 ) ) && ( ( this . VAR_5 ) == ( VAR_6 ) ) ) && ( ( this . VAR_7 ) == ( VAR_8 ) ) ) { return 0 ; } else if ( this . VAR_3 . METHOD_1 ( VAR_4 ) ) { return - 1 ; } return 1 ; }\n", "fixed": "public boolean equals ( java.lang.Object obj ) { if ( ( obj == null ) || ( ( obj . getClass ( ) ) != ( this . getClass ( ) ) ) ) { return false ; } TYPE_1 VAR_2 = ( ( TYPE_1 ) ( obj ) ) ; return ( ( this . VAR_3 . equals ( VAR_4 ) ) && ( ( this . VAR_5 ) == ( VAR_6 ) ) ) && ( ( this . VAR_7 ) == ( VAR_8 ) ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) ) . METHOD_3 ( STRING_2 , VAR_1 . METHOD_5 ( ) ) . METHOD_3 ( STRING_3 , VAR_1 . METHOD_6 ( ) ) ; METHOD_7 ( ) . METHOD_8 ( STRING_4 , VAR_2 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) ) . METHOD_3 ( STRING_2 , VAR_1 . METHOD_5 ( ) . toLowerCase ( ) ) . METHOD_3 ( STRING_3 , VAR_1 . METHOD_6 ( ) . toLowerCase ( ) ) ; METHOD_7 ( ) . METHOD_8 ( STRING_4 , VAR_2 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 ) ; VAR_2 . METHOD_2 ( FLOAT_1 ) ; VAR_2 . METHOD_3 ( ( - FLOAT_2 ) ) ; return VAR_2 ; } else { TYPE_1 VAR_2 = VAR_3 . METHOD_4 ( VAR_4 ) ; if ( VAR_2 != null ) { return VAR_2 ; } else { VAR_3 . METHOD_5 ( VAR_4 , 0 , 0 , VAR_5 ) ; } return VAR_6 ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 ) ; VAR_2 . METHOD_2 ( FLOAT_1 ) ; VAR_2 . METHOD_3 ( ( - FLOAT_2 ) ) ; return VAR_2 ; } else { TYPE_1 VAR_2 = VAR_3 . METHOD_4 ( VAR_4 ) ; if ( VAR_2 != null ) { return VAR_2 ; } else { VAR_3 . METHOD_5 ( VAR_4 , 0 , 0 , VAR_5 ) ; } return null ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "fixed": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic abstract void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "private void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_3 . add ( VAR_1 ) ; } data = TYPE_2 . METHOD_2 ( VAR_3 ) ; VAR_4 = new TYPE_3 < TYPE_1 > ( data ) ; if ( VAR_3 . isEmpty ( ) ) VAR_4 = null ; }\n", "fixed": "protected void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_3 . add ( VAR_1 ) ; } data = TYPE_2 . METHOD_2 ( VAR_3 ) ; VAR_4 = new TYPE_3 < TYPE_1 > ( data ) ; if ( VAR_3 . isEmpty ( ) ) VAR_4 = null ; }\n"}
{"problem": "protected java.lang.String build ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; VAR_1 . append ( name ) ; VAR_1 . append ( STRING_1 ) ; VAR_1 . append ( type . toString ( ) ) ; METHOD_1 ( VAR_1 ) ; VAR_1 . append ( STRING_2 ) ; return VAR_1 . toString ( ) ; }\n", "fixed": "protected java.lang.String build ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; VAR_1 . append ( name ) ; VAR_1 . append ( STRING_1 ) ; VAR_1 . append ( type . toString ( ) ) ; METHOD_1 ( VAR_1 ) ; return VAR_1 . toString ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; java.lang.String VAR_3 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( METHOD_5 ( VAR_3 ) ) ; VAR_2 . METHOD_6 ( VAR_1 ) ; VAR_4 . METHOD_7 ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_6 ( VAR_1 ) ; java.lang.String VAR_3 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( METHOD_5 ( VAR_3 ) ) ; VAR_4 . METHOD_7 ( VAR_2 ) ; }\n"}
{"fixCommitSHA1": "860774b8e958fd4bdf90ec9f5d3e7994e1bd80f4", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         ClientMessage response = (ClientMessage) invokerWrapper.invoke(request);\n         Collection<Map.Entry<Data, Data>> result\n                = EnterpriseMapPublisherCreateWithValueCodec.decodeResponse(response).entries;\n         populateWithValues(queryCache, result);\n     }", "fixed": "         ClientMessage response = (ClientMessage) invokerWrapper.invoke(request);\n         Collection<Map.Entry<Data, Data>> result\n                = EnterpriseMapPublisherCreateWithValueCodec.decodeResponse(response).response;\n         populateWithValues(queryCache, result);\n     }", "sourceBeforeFix": "EnterpriseMapPublisherCreateCodec.decodeResponse(response).list", "sourceAfterFix": "EnterpriseMapPublisherCreateCodec.decodeResponse(response).response"}
{"problem": "public int METHOD_1 ( ) { switch ( size ) { case 1 : return 0 ; case INT_1 : return INT_2 ; case INT_3 : return INT_4 ; case INT_2 : return INT_5 ; case INT_6 : return INT_7 ; case INT_8 : return INT_9 ; case INT_10 : return INT_11 ; case INT_4 : return INT_12 ; case INT_13 : return INT_14 ; case INT_15 : return INT_14 ; default : return STRING_1 ; } }\n", "fixed": "public int METHOD_1 ( ) { switch ( size ) { case 1 : return 0 ; case INT_1 : return INT_2 ; case INT_3 : return INT_4 ; case INT_2 : return INT_5 ; case INT_6 : return INT_7 ; case INT_8 : return INT_9 ; case INT_10 : return INT_11 ; case INT_4 : return INT_12 ; case INT_13 : return INT_14 ; case INT_15 : return INT_14 ; default : return 0 ; } }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3b508f55d24ab4baa5164189d052fb3b320bce02", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         }\n         javaClass.getJavaDoc().setFullText(doc);\n        String prefix = \"camel.dataformat.\" + model.getModelName();\n         javaClass.addAnnotation(\"org.springframework.boot.context.properties.ConfigurationProperties\").setStringValue(\"prefix\", prefix);\n         for (DataFormatOptionModel option : model.getDataFormatOptions()) {", "fixed": "         }\n         javaClass.getJavaDoc().setFullText(doc);\n        String prefix = \"camel.dataformat.\" + model.getName();\n         javaClass.addAnnotation(\"org.springframework.boot.context.properties.ConfigurationProperties\").setStringValue(\"prefix\", prefix);\n         for (DataFormatOptionModel option : model.getDataFormatOptions()) {", "sourceBeforeFix": "model.getModelName()", "sourceAfterFix": "model.getName()"}
{"problem": "void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( ! ( ( VAR_2 ) == INT_1 ) ) { METHOD_2 ( VAR_1 . METHOD_3 ( ( ( METHOD_4 ( ) ) * INT_2 ) , ( ( METHOD_5 ( ) ) * INT_2 ) , METHOD_6 ( ) ) ) ; } else { METHOD_2 ( VAR_1 . METHOD_7 ( ( ( METHOD_4 ( ) ) * INT_3 ) , ( ( METHOD_5 ( ) ) * INT_4 ) , METHOD_6 ( ) ) ) ; } }\n", "fixed": "void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( ! ( ( VAR_2 ) == INT_1 ) ) { METHOD_2 ( VAR_1 . METHOD_3 ( ( ( METHOD_4 ( ) ) * INT_2 ) , ( ( METHOD_5 ( ) ) * INT_2 ) , METHOD_6 ( ) ) ) ; } else { METHOD_2 ( VAR_1 . METHOD_7 ( ( ( METHOD_4 ( ) ) * INT_4 ) , ( ( METHOD_5 ( ) ) * INT_4 ) , METHOD_6 ( ) ) ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 != null ) { final TYPE_4 VAR_3 = TYPE_5 . METHOD_4 ( VAR_2 , VAR_4 ) ; TYPE_6 . METHOD_5 ( new TYPE_7 ( ) { public void METHOD_6 ( ) { VAR_3 . show ( ) ; } } ) ; return true ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 != null ) { final TYPE_4 VAR_3 = TYPE_5 . METHOD_4 ( VAR_2 , true , VAR_4 ) ; TYPE_6 . METHOD_5 ( new TYPE_7 ( ) { public void METHOD_6 ( ) { VAR_3 . show ( ) ; } } ) ; return true ; } return false ; }\n"}
{"problem": "private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 , VAR_3 ) ; java.lang.String result = METHOD_3 ( VAR_2 , STRING_1 , null ) ; if ( ( result != null ) && ( ( result . length ( ) ) > 0 ) ) return result ; java.lang.String VAR_4 = VAR_1 . getName ( ) ; if ( VAR_4 . METHOD_4 ( STRING_2 ) ) return VAR_4 . substring ( 0 , ( ( VAR_4 . length ( ) ) - 1 ) ) ; return VAR_4 ; }\n", "fixed": "private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 , VAR_3 ) ; java.lang.String result = METHOD_3 ( VAR_2 , STRING_1 , null ) ; if ( ( result != null ) && ( ( result . length ( ) ) > 0 ) ) return result ; java.lang.String VAR_4 = VAR_1 . getName ( ) ; if ( VAR_4 . METHOD_4 ( STRING_2 ) ) return VAR_4 . substring ( 0 , ( ( VAR_4 . length ( ) ) - 1 ) ) ; return VAR_4 ; }\n"}
{"fixCommitSHA1": "358697a54dd0ac6743f84084a8138f1c8d7f2a21", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\t\tLOG.debug(\"Initializing sortmerger...\");\n \t\t\tSorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,\n\t\t\t\tthis.parentTask, this.serializer, this.comparator, 32 * 1024 * 1024);\n\t\t\trunPartialSorter(sorter, NUM_RECORDS, 28);\n \t\t}\n \t\tcatch (Exception t) {\n \t\t\tt.printStackTrace();", "fixed": " \t\t\tLOG.debug(\"Initializing sortmerger...\");\n \t\t\tSorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,\n\t\t\t\tthis.parentTask, this.serializer, this.comparator, 10 * 1024 * 1024);\n\t\t\trunPartialSorter(sorter, NUM_RECORDS, 25);\n \t\t}\n \t\tcatch (Exception t) {\n \t\t\tt.printStackTrace();", "sourceBeforeFix": "runPartialSorter(sorter,NUM_RECORDS,28)", "sourceAfterFix": "runPartialSorter(sorter,NUM_RECORDS,25)"}
{"problem": "public static java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; java.util.Calendar VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 ) ; int VAR_3 = VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; java.lang.String offset = java.lang.String.format ( STRING_1 , ( VAR_3 / ( INT_1 * INT_2 ) ) ) ; return offset ; }\n", "fixed": "private java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; java.util.Calendar VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 ) ; int VAR_3 = VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; java.lang.String offset = java.lang.String.format ( STRING_1 , ( VAR_3 / ( INT_1 * INT_2 ) ) ) ; return offset ; }\n"}
{"problem": "private int METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_3 . set ( VAR_4 , ( VAR_1 - INT_1 ) ) ; if ( VAR_1 == INT_2 ) { if ( VAR_5 . METHOD_2 ( VAR_2 ) ) { return VAR_3 . METHOD_3 ( VAR_6 ) ; } else { return ( VAR_3 . METHOD_3 ( VAR_6 ) ) - 1 ; } } else { return VAR_3 . METHOD_3 ( VAR_6 ) ; } }\n", "fixed": "private int METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_3 . set ( VAR_4 , ( VAR_1 - INT_1 ) ) ; if ( VAR_1 == INT_2 ) { if ( VAR_5 . METHOD_2 ( VAR_2 ) ) { return ( VAR_3 . METHOD_3 ( VAR_6 ) ) + 1 ; } else { return VAR_3 . METHOD_3 ( VAR_6 ) ; } } else { return VAR_3 . METHOD_3 ( VAR_6 ) ; } }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 temp = VAR_1 . get ( VAR_2 ) ; temp . name = VAR_3 . getText ( ) . toString ( ) ; VAR_4 = ( ( VAR_5 ) == null ) ? VAR_4 : TYPE_2 . METHOD_2 ( VAR_5 ) ; VAR_6 . METHOD_3 ( VAR_2 . id ) . setValue ( temp ) ; }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 temp = VAR_1 . get ( VAR_2 ) ; temp . name = VAR_3 . getText ( ) . toString ( ) ; VAR_4 = ( ( VAR_5 ) == null ) ? VAR_4 : TYPE_2 . METHOD_2 ( VAR_5 ) ; VAR_6 . setValue ( VAR_1 ) ; }\n"}
{"problem": "public static void METHOD_1 ( ) { VAR_1 . values ( ) . METHOD_2 ( ) . METHOD_3 ( ( VAR_2 ) - > { VAR_2 . values ( ) . METHOD_2 ( ) . METHOD_3 ( ( out ) - > { out . METHOD_4 ( ) ; } ) ; } ) ; VAR_1 . METHOD_5 ( ) ; }\n", "fixed": "public static void METHOD_1 ( ) { VAR_1 . values ( ) . METHOD_2 ( ) . METHOD_3 ( ( VAR_2 ) - > VAR_2 . values ( ) . METHOD_2 ( ) . METHOD_3 ( ( out ) - > out . METHOD_4 ( ) ) ) ; VAR_1 . METHOD_5 ( ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 ; try { VAR_2 = TYPE_3 . METHOD_3 ( VAR_1 , VAR_3 ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; TYPE_4 . METHOD_5 ( this , STRING_1 , VAR_5 ) . show ( ) ; } catch ( java.lang.Exception VAR_6 ) { VAR_6 . METHOD_6 ( ) ; } }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 ; try { VAR_2 = TYPE_3 . METHOD_3 ( VAR_1 , VAR_3 ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; } catch ( java.lang.Exception VAR_6 ) { VAR_6 . METHOD_6 ( ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public double METHOD_1 ( ) { double VAR_1 = 1.0 ; for ( int i = 0 ; i < ( METHOD_2 ( ) ) ; i ++ ) { VAR_1 *= java.lang.Math.abs ( ( ( VAR_2 . METHOD_3 ( ) [ i ] ) - ( VAR_3 . METHOD_3 ( ) [ i ] ) ) ) ; } return VAR_1 ; }\n", "fixed": "public double METHOD_1 ( ) { double VAR_1 = 1.0 ; double [ ] VAR_2 = this . VAR_2 . METHOD_3 ( ) ; double [ ] VAR_3 = this . VAR_3 . METHOD_3 ( ) ; for ( int i = 0 ; i < ( METHOD_2 ( ) ) ; i ++ ) { VAR_1 *= java.lang.Math.abs ( ( ( VAR_2 [ i ] ) - ( VAR_3 [ i ] ) ) ) ; } return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String name ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( null ) ; if ( VAR_1 . getName ( ) . equals ( STRING_1 ) ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( getString ( VAR_2 ) ) ; } else { METHOD_4 ( name ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String name ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( null ) ; if ( VAR_1 . getName ( ) . equals ( STRING_1 ) ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( getString ( VAR_2 ) ) ; } else { METHOD_4 ( name , STRING_1 ) ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final java.lang.String VAR_2 , final TYPE_3 VAR_3 ) { final TYPE_1 output = ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( VAR_2 , VAR_4 ) ) ) ; if ( output == null ) { TYPE_4 . info ( STRING_1 , VAR_2 ) ; } return output ; }\n", "fixed": "private TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final java.lang.String VAR_2 , final TYPE_3 VAR_3 ) { final TYPE_1 output = ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ) ) ; if ( output == null ) { TYPE_4 . info ( STRING_1 , VAR_2 ) ; } return output ; }\n"}
{"problem": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 expr ) { TYPE_3 VAR_2 = new TYPE_4 ( VAR_3 , VAR_1 ) ; TYPE_3 VAR_4 = new TYPE_5 ( VAR_2 , VAR_5 , expr ) ; return new TYPE_1 ( VAR_1 , new TYPE_5 ( expr , VAR_6 , VAR_4 ) ) ; }\n", "fixed": "protected static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 expr ) { TYPE_3 VAR_2 = new TYPE_4 ( VAR_3 , VAR_1 ) ; TYPE_3 VAR_4 = new TYPE_5 ( VAR_2 , VAR_5 , expr ) ; return new TYPE_1 ( VAR_1 , new TYPE_5 ( expr , VAR_6 , VAR_4 ) ) ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , float [ ] VAR_2 , float [ ] src ) { if ( VAR_1 == null ) { throw new TYPE_2 ( STRING_1 ) ; } final long result = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , src ) ; return new TYPE_1 ( result ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , float [ ] VAR_2 , float [ ] src ) { if ( VAR_1 == null ) { throw new TYPE_2 ( STRING_1 ) ; } final long result = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , src ) ; if ( result != 0 ) { return new TYPE_1 ( result ) ; } else { return null ; } }\n"}
{"problem": "public static void METHOD_1 ( final android.content.Context context , final java.lang.String VAR_1 , final java.lang.String VAR_2 , final TYPE_1 msg , final int VAR_3 ) { final TYPE_2 VAR_4 = TYPE_3 . METHOD_2 ( context , context . getString ( VAR_5 ) ) ; VAR_4 . METHOD_3 ( VAR_6 . toString ( ) ) . METHOD_4 ( VAR_7 ) . METHOD_5 ( VAR_3 ) ; context . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_4 . build ( ) , VAR_1 , VAR_2 , msg ) ) ; }\n", "fixed": "public static void METHOD_1 ( final android.content.Context context , final java.lang.String VAR_1 , final java.lang.String VAR_2 , final TYPE_1 msg , final int VAR_3 ) { if ( ( VAR_6 ) == null ) { return ; } final TYPE_2 VAR_4 = TYPE_3 . METHOD_2 ( context , context . getString ( VAR_5 ) ) ; VAR_4 . METHOD_3 ( VAR_6 . toString ( ) ) . METHOD_4 ( VAR_7 ) . METHOD_5 ( VAR_3 ) ; context . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_4 . build ( ) , VAR_1 , VAR_2 , msg ) ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item ) { item . METHOD_2 ( true ) ; switch ( item . METHOD_3 ( ) ) { case VAR_1 : METHOD_4 ( new android.content.Intent ( this , VAR_2 class ) ) ; break ; case VAR_3 : METHOD_4 ( new android.content.Intent ( this , VAR_4 class ) ) ; break ; } VAR_5 . METHOD_5 ( VAR_6 ) ; return false ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 item ) { item . METHOD_2 ( true ) ; switch ( item . METHOD_3 ( ) ) { case VAR_1 : break ; case VAR_3 : METHOD_4 ( new android.content.Intent ( this , VAR_4 class ) ) ; break ; } VAR_5 . METHOD_5 ( VAR_6 ) ; return false ; }\n"}
{"problem": "private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = null ; if ( ( TYPE_2 . get ( VAR_1 ) ) == null ) { return null ; } else { TYPE_3 < java.lang.String , java.lang.Object > VAR_3 = TYPE_2 . get ( VAR_1 ) ; VAR_2 = ( ( java.util.List < TYPE_1 > ) ( VAR_3 . get ( STRING_1 ) ) ) ; } return VAR_2 ; }\n", "fixed": "private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { java.util.List < TYPE_1 > VAR_2 ; if ( ( TYPE_2 . get ( VAR_1 ) ) == null ) { return null ; } else { TYPE_3 < java.lang.String , java.lang.Object > VAR_3 = TYPE_2 . get ( VAR_1 ) ; VAR_2 = ( ( java.util.List < TYPE_1 > ) ( VAR_3 . get ( STRING_1 ) ) ) ; } return VAR_2 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; METHOD_4 ( VAR_3 ) ; METHOD_3 ( VAR_5 ) . METHOD_5 ( VAR_6 ) ; METHOD_3 ( VAR_7 ) . METHOD_5 ( VAR_6 ) ; METHOD_3 ( VAR_8 ) . METHOD_5 ( VAR_9 ) ; METHOD_3 ( VAR_10 ) . METHOD_5 ( VAR_9 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_5 ) . METHOD_5 ( VAR_6 ) ; METHOD_3 ( VAR_7 ) . METHOD_5 ( VAR_6 ) ; METHOD_3 ( VAR_8 ) . METHOD_5 ( VAR_9 ) ; METHOD_3 ( VAR_10 ) . METHOD_5 ( VAR_9 ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { VAR_1 = VAR_1 . trim ( ) ; for ( TYPE_1 c : VAR_2 ) { java.lang.String name = c . getName ( ) ; if ( name . METHOD_2 ( VAR_1 ) ) { return name ; } } return STRING_1 ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String str = VAR_1 . trim ( ) ; for ( TYPE_1 c : VAR_2 ) { java.lang.String name = c . getName ( ) ; if ( name . METHOD_2 ( str ) ) { return name ; } } return STRING_1 ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.util.Map < java.lang.String , java.lang.String > VAR_2 = new java.util.HashMap < > ( ) ; VAR_2 . put ( STRING_1 , STRING_2 ) ; VAR_2 . put ( STRING_3 , STRING_4 ) ; VAR_2 . put ( STRING_5 , STRING_4 ) ; VAR_2 . put ( STRING_6 , STRING_4 ) ; VAR_2 . put ( STRING_7 , STRING_8 ) ; VAR_2 . put ( STRING_9 , STRING_10 ) ; return VAR_2 . get ( VAR_1 ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.util.Map < java.lang.String , java.lang.String > VAR_2 = new java.util.HashMap < > ( ) ; VAR_2 . put ( STRING_1 , STRING_2 ) ; VAR_2 . put ( STRING_3 , STRING_4 ) ; VAR_2 . put ( STRING_5 , STRING_4 ) ; VAR_2 . put ( STRING_6 , STRING_4 ) ; VAR_2 . put ( STRING_7 , STRING_4 ) ; VAR_2 . put ( STRING_9 , STRING_10 ) ; return VAR_2 . get ( VAR_1 ) ; }\n"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeOutEdge(Object edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> successors = getReference(successorsReference);\n     if (successors != null) {", "fixed": "   }\n   @Override\n  public N removeOutEdge(E edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> successors = getReference(successorsReference);\n     if (successors != null) {", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJMXEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default JMXEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJMXEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default JMXEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { try { VAR_2 . METHOD_2 ( null ) ; } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } VAR_2 . METHOD_4 ( null ) ; VAR_2 . METHOD_5 ( ) ; VAR_4 . METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_4 ( null ) ; try { VAR_2 . METHOD_2 ( null ) ; } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } VAR_2 . METHOD_5 ( ) ; VAR_2 = null ; } if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_6 ( ) ; VAR_4 = null ; } }\n"}
{"fixCommitSHA1": "86be57325cc9593d2ff5cf6fd0d16c2e692e4933", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": " \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tlogger.debug(\"NODE {}: Calling handleApplicationCommandRequest.\", this.getNode().getNodeId());\n\t\t\t\t\tzwaveCommandClass.handleApplicationCommandRequest(serialMessage, offset + 2, 1);\n \t\t\t\t}\n \t\t\t}", "fixed": " \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tlogger.debug(\"NODE {}: Calling handleApplicationCommandRequest.\", this.getNode().getNodeId());\n\t\t\t\t\tzwaveCommandClass.handleApplicationCommandRequest(serialMessage, offset + 2, 0);\n \t\t\t\t}\n \t\t\t}", "sourceBeforeFix": "zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,1)", "sourceAfterFix": "zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,0)"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_3 . METHOD_5 ( VAR_2 . METHOD_6 ( ) . METHOD_7 ( ) ) ) ; } TYPE_3 VAR_4 = new TYPE_3 ( new java.util.Date ( ) . getTime ( ) ) ; VAR_1 . METHOD_8 ( VAR_4 ) ; VAR_3 . METHOD_9 ( VAR_1 ) ; return VAR_3 . METHOD_5 ( VAR_1 . METHOD_7 ( ) , 1 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_3 VAR_4 = new TYPE_3 ( new java.util.Date ( ) . getTime ( ) ) ; VAR_1 . METHOD_8 ( VAR_4 ) ; VAR_3 . METHOD_9 ( VAR_1 ) ; return VAR_3 . METHOD_5 ( VAR_1 . METHOD_7 ( ) , 1 ) ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"problem": "public static void METHOD_1 ( TYPE_1 key , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( STRING_1 , key . getType ( ) . VAR_3 . METHOD_3 ( ) ) ; VAR_2 . METHOD_2 ( STRING_2 , key . getName ( ) ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; TYPE_4 VAR_4 = TYPE_4 . METHOD_5 ( ) ; VAR_1 . METHOD_6 ( VAR_4 . getId ( key ) ) ; }\n", "fixed": "public static void METHOD_1 ( TYPE_1 key , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( STRING_1 , key . getType ( ) . VAR_3 . METHOD_3 ( ) ) ; VAR_2 . METHOD_2 ( STRING_2 , key . getName ( ) ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; TYPE_4 VAR_4 = TYPE_4 . METHOD_5 ( ) ; if ( VAR_4 != null ) { VAR_1 . METHOD_6 ( VAR_4 . getId ( key ) ) ; } }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_2 ( VAR_3 , INT_1 ) ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( false ) ; METHOD_5 ( VAR_4 ) ; VAR_5 = new android.widget.LinearLayout ( VAR_3 ) ; TYPE_1 VAR_6 = new TYPE_1 ( VAR_7 , TYPE_2 . METHOD_2 ( VAR_3 , INT_1 ) ) ; VAR_5 . METHOD_6 ( VAR_8 ) ; VAR_5 . METHOD_7 ( VAR_9 ) ; VAR_5 . METHOD_8 ( VAR_10 ) ; METHOD_9 ( VAR_5 , VAR_6 ) ; }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_7 ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( false ) ; METHOD_5 ( VAR_4 ) ; VAR_5 = new android.widget.LinearLayout ( VAR_3 ) ; TYPE_1 VAR_6 = new TYPE_1 ( VAR_7 , TYPE_2 . METHOD_2 ( VAR_3 , INT_1 ) ) ; VAR_5 . METHOD_6 ( VAR_8 ) ; VAR_5 . METHOD_7 ( VAR_9 ) ; VAR_5 . METHOD_8 ( VAR_10 ) ; METHOD_9 ( VAR_5 , VAR_6 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 p ) { VAR_1 . METHOD_2 ( p . getName ( ) ) . METHOD_3 ( ( ( ( VAR_2 ) + STRING_1 ) + ( METHOD_4 ( ) . get ( p . METHOD_5 ( ) ) ) ) ) ; METHOD_6 ( p ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 p ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( p . getName ( ) ) . METHOD_3 ( ( ( ( VAR_2 ) + STRING_1 ) + ( METHOD_4 ( ) . get ( p . METHOD_5 ( ) ) ) ) ) ; METHOD_6 ( p ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; TYPE_3 context = TYPE_2 . METHOD_2 ( VAR_3 class ) ; TYPE_2 . METHOD_3 ( context . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) . METHOD_6 ( VAR_1 ) ; VAR_4 . METHOD_7 ( context ) ; VAR_4 . METHOD_8 ( ) ; java.util.Map < java.lang.String , java.lang.Object > VAR_5 = VAR_4 . METHOD_9 ( ) ; TYPE_5 . assertEquals ( 0 , VAR_5 . METHOD_10 ( ) . size ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 class ) ; TYPE_3 context = METHOD_2 ( VAR_3 class ) ; METHOD_3 ( context . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) . METHOD_6 ( VAR_1 ) ; VAR_4 . METHOD_7 ( context ) ; VAR_4 . METHOD_8 ( ) ; java.util.Map < java.lang.String , java.lang.Object > VAR_5 = VAR_4 . METHOD_9 ( ) ; assertEquals ( 0 , VAR_5 . METHOD_10 ( ) . size ( ) ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 writer , long VAR_1 , java.lang.Throwable VAR_2 ) { writer . METHOD_2 ( ) . position ( ( VAR_1 + ( VAR_3 ) ) ) ; METHOD_3 ( writer , VAR_2 ) ; METHOD_4 ( ( VAR_1 + ( VAR_4 ) ) , true , writer . METHOD_2 ( ) ) ; return null ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 writer , long VAR_1 , java.lang.Throwable VAR_2 ) { writer . METHOD_2 ( ) . position ( ( VAR_1 + ( VAR_3 ) ) ) ; METHOD_3 ( writer , VAR_2 ) ; METHOD_4 ( VAR_1 , true , writer . METHOD_2 ( ) ) ; return null ; }\n"}
{"problem": "public boolean METHOD_1 ( int index , java.util.Collection < ? extends TYPE_1 > c ) { if ( c == null ) throw new java.lang.NullPointerException ( STRING_1 ) ; if ( index < ( - 1 ) ) throw new TYPE_2 ( STRING_2 ) ; METHOD_2 ( ) . METHOD_1 ( index , c ) ; METHOD_3 ( c . size ( ) ) ; return false ; }\n", "fixed": "public boolean METHOD_1 ( int index , java.util.Collection < ? extends TYPE_1 > c ) { if ( c == null ) throw new java.lang.NullPointerException ( STRING_1 ) ; if ( index < 0 ) throw new TYPE_2 ( STRING_2 ) ; METHOD_2 ( ) . METHOD_1 ( index , c ) ; METHOD_3 ( c . size ( ) ) ; return false ; }\n"}
{"problem": "private void METHOD_1 ( final java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( new TYPE_1 ( ) { public void METHOD_3 ( TYPE_2 VAR_3 ) { if ( VAR_3 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ) { VAR_5 . METHOD_8 ( VAR_6 ) ; } else { VAR_5 . METHOD_8 ( VAR_7 ) ; } } public void METHOD_9 ( TYPE_3 VAR_8 ) { } } ) ; }\n", "fixed": "public void METHOD_1 ( final java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( new TYPE_1 ( ) { public void METHOD_3 ( TYPE_2 VAR_3 ) { if ( VAR_3 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ) { VAR_5 . METHOD_8 ( VAR_6 ) ; } else { VAR_5 . METHOD_8 ( VAR_7 ) ; } } public void METHOD_9 ( TYPE_3 VAR_8 ) { } } ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"problem": "public static void METHOD_1 ( java.util.List < ? > data ) throws java.lang.Exception { java.lang.Class VAR_1 = data . get ( 0 ) . getClass ( ) ; java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_2 , data ) ; }\n", "fixed": "public static void METHOD_1 ( java.util.List < ? > data ) throws java.lang.Exception { java.lang.Class VAR_1 = data . get ( 0 ) . getClass ( ) ; java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; java.lang.System.out.println ( VAR_2 ) ; TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_2 , data ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_3 = VAR_4 . METHOD_4 ( ) ; VAR_5 = VAR_4 . METHOD_5 ( ) ; TYPE_2 VAR_6 = new TYPE_2 ( VAR_3 , VAR_5 ) ; VAR_2 . METHOD_6 ( new TYPE_3 ( ) . position ( VAR_6 ) . title ( STRING_1 ) ) ; TYPE_4 VAR_7 = METHOD_7 ( ) ; VAR_7 . METHOD_8 ( VAR_8 , VAR_9 , this ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; METHOD_2 ( ) ; METHOD_3 ( ) ; if ( ( VAR_4 ) != null ) { VAR_3 = VAR_4 . METHOD_4 ( ) ; VAR_5 = VAR_4 . METHOD_5 ( ) ; TYPE_2 VAR_6 = new TYPE_2 ( VAR_3 , VAR_5 ) ; VAR_2 . METHOD_6 ( new TYPE_3 ( ) . position ( VAR_6 ) . title ( STRING_1 ) ) ; TYPE_4 VAR_7 = METHOD_7 ( ) ; VAR_7 . METHOD_8 ( VAR_8 , VAR_9 , this ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   }\n   public void normalize() {\n    logger.info(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();", "fixed": "   }\n   public void normalize() {\n    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();", "sourceBeforeFix": "logger.info(\"Remove try/catch/finally\")", "sourceAfterFix": "logger.fine(\"Remove try/catch/finally\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"problem": "public java.lang.String METHOD_1 ( ) { if ( ( this . VAR_1 ) != null ) return VAR_1 ; else { try { if ( VAR_2 ) this . VAR_1 = TYPE_1 . METHOD_2 ( VAR_3 ) . METHOD_3 ( ) ; else this . VAR_1 = TYPE_2 . toString ( VAR_3 , 0 , VAR_3 . length , true ) ; return this . VAR_1 ; } catch ( java.io.IOException x ) { throw new TYPE_3 ( VAR_4 . getString ( STRING_1 ) , x ) ; } } }\n", "fixed": "public java.lang.String METHOD_1 ( ) { if ( ( this . VAR_1 ) != null ) return VAR_1 ; else { try { byte [ ] VAR_3 = this . VAR_3 ; if ( VAR_2 ) this . VAR_1 = TYPE_1 . METHOD_2 ( VAR_3 ) . METHOD_3 ( ) ; else this . VAR_1 = TYPE_2 . toString ( VAR_3 , 0 , VAR_3 . length , true ) ; return this . VAR_1 ; } catch ( java.io.IOException x ) { throw new TYPE_3 ( VAR_4 . getString ( STRING_1 ) , x ) ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "28474aa30adebc397ecdb993d62317e5659fce4a", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t * Frequency in milliseconds that the consumer offsets are auto-committed to Kafka\n \t\t * if 'enable.auto.commit' true.\n \t\t */\n\t\tprivate Long autoCommitInterval;\n \t\t/**\n \t\t * What to do when there is no initial offset in Kafka or if the current offset", "fixed": " \t\t * Frequency in milliseconds that the consumer offsets are auto-committed to Kafka\n \t\t * if 'enable.auto.commit' true.\n \t\t */\n\t\tprivate Integer autoCommitInterval;\n \t\t/**\n \t\t * What to do when there is no initial offset in Kafka or if the current offset", "sourceBeforeFix": "public Long getAutoCommitInterval(){   return this.autoCommitInterval; } ", "sourceAfterFix": "public Integer getAutoCommitInterval(){   return this.autoCommitInterval; } "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 < TYPE_1 > METHOD_3 ( ) , TYPE_2 . METHOD_3 ( new TYPE_3 ( 1 ) ) , VAR_3 ) ; VAR_1 . METHOD_4 ( 1 ) ; VAR_1 . METHOD_5 ( 1L ) ; TYPE_4 . METHOD_6 ( VAR_4 . METHOD_7 ( ) ) . METHOD_8 ( TYPE_2 . METHOD_3 ( 1L ) ) ; TYPE_5 VAR_5 = VAR_6 . METHOD_9 ( ) ; TYPE_6 . assertEquals ( 0 , VAR_5 . METHOD_10 ( ) . size ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 < TYPE_1 > METHOD_3 ( ) , TYPE_2 . METHOD_3 ( new TYPE_3 ( 1L ) ) , VAR_3 ) ; VAR_1 . METHOD_4 ( 1L ) ; VAR_1 . METHOD_5 ( 1L ) ; TYPE_4 . METHOD_6 ( VAR_4 . METHOD_7 ( ) ) . METHOD_8 ( TYPE_2 . METHOD_3 ( 1L ) ) ; TYPE_5 VAR_5 = VAR_6 . METHOD_9 ( ) ; TYPE_6 . assertEquals ( 0 , VAR_5 . METHOD_10 ( ) . size ( ) ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 TYPE_2 ) { output . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) ) + STRING_1 ) ) ; if ( TYPE_2 instanceof TYPE_3 ) return METHOD_1 ( ( ( TYPE_3 ) ( TYPE_2 ) ) ) ; else if ( TYPE_2 instanceof TYPE_4 ) return METHOD_1 ( ( ( TYPE_4 ) ( TYPE_2 ) ) ) ; throw new TYPE_5 ( STRING_2 ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String name , TYPE_1 TYPE_2 ) { output . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) ) + STRING_1 ) ) ; if ( TYPE_2 instanceof TYPE_3 ) return METHOD_1 ( name , ( ( TYPE_3 ) ( TYPE_2 ) ) ) ; else if ( TYPE_2 instanceof TYPE_4 ) return METHOD_1 ( ( ( TYPE_4 ) ( TYPE_2 ) ) ) ; throw new TYPE_5 ( STRING_2 ) ; }\n"}
{"fixCommitSHA1": "b9c41e9ff3fc13529a73bd488d9e9d86b33d0871", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "             property.substring(CUSTOM_ANNOTATOR_PREFIX.length());\n         final String customClassName = inputProps.getProperty(property);\n         logger.info(\"Registering annotator \" + customName + \" with class \" + customClassName);\n        pool.register(customName, inputProps, Lazy.of(() -> annotatorImplementation.custom(inputProps, customName)));\n       }\n     }\n   }", "fixed": "             property.substring(CUSTOM_ANNOTATOR_PREFIX.length());\n         final String customClassName = inputProps.getProperty(property);\n         logger.info(\"Registering annotator \" + customName + \" with class \" + customClassName);\n        pool.register(customName, inputProps, Lazy.of(() -> annotatorImplementation.custom(inputProps, property)));\n       }\n     }\n   }", "sourceBeforeFix": "annotatorImplementation.custom(inputProps,customName)", "sourceAfterFix": "annotatorImplementation.custom(inputProps,property)"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String name , TYPE_2 VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . get ( name ) ; if ( VAR_3 == null ) { synchronized ( VAR_5 ) { VAR_3 = VAR_4 . get ( name ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_1 ( name , VAR_1 ) ; VAR_4 . put ( name , VAR_3 ) ; if ( VAR_2 ) { TYPE_3 . METHOD_2 ( ( STRING_1 + name ) , VAR_3 ) ; } } } } return VAR_3 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String name , TYPE_2 VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . get ( name ) ; if ( VAR_3 == null ) { synchronized ( VAR_5 ) { VAR_3 = VAR_4 . get ( name ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_1 ( name , VAR_1 , VAR_2 ) ; VAR_4 . put ( name , VAR_3 ) ; } } } return VAR_3 ; }\n"}
{"problem": "public static < TYPE_1 extends TYPE_2 > void METHOD_1 ( TYPE_3 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_2 == null ) { VAR_1 . METHOD_1 ( 0 ) ; } else { VAR_1 . METHOD_1 ( ( ( TYPE_4 ) ( VAR_1 . METHOD_2 ( ) ) ) . METHOD_3 ( VAR_2 ) ) ; } }\n", "fixed": "public static < TYPE_1 extends TYPE_2 > void METHOD_1 ( TYPE_3 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_2 == null ) { VAR_1 . METHOD_1 ( 0 ) ; } else { VAR_1 . METHOD_1 ( ( ( TYPE_4 < TYPE_1 > ) ( VAR_1 . METHOD_2 ( ) ) ) . METHOD_3 ( VAR_2 ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 , boolean VAR_2 ) { if ( ! VAR_2 ) { java.lang.String VAR_3 = VAR_4 . getText ( ) . toString ( ) ; if ( TYPE_1 . METHOD_2 ( VAR_3 ) ) { VAR_4 . METHOD_3 ( VAR_5 ) ; TYPE_2 . METHOD_4 ( this , STRING_1 , VAR_6 ) . show ( ) ; } else { VAR_4 . METHOD_3 ( VAR_7 ) ; } if ( VAR_8 . METHOD_5 ( ) ) { METHOD_6 ( VAR_1 ) ; } } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 , boolean VAR_2 ) { if ( ! VAR_2 ) { java.lang.String VAR_3 = VAR_4 . getText ( ) . toString ( ) ; if ( ! ( TYPE_1 . METHOD_2 ( VAR_3 ) ) ) { VAR_4 . METHOD_3 ( VAR_5 ) ; TYPE_2 . METHOD_4 ( this , STRING_1 , VAR_6 ) . show ( ) ; } else { VAR_4 . METHOD_3 ( VAR_7 ) ; } if ( VAR_8 . METHOD_5 ( ) ) { METHOD_6 ( VAR_1 ) ; } } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( int VAR_1 , TYPE_2 VAR_2 ) { for ( int VAR_3 : VAR_4 . METHOD_2 ( ) ) { if ( ( TYPE_3 . METHOD_3 ( VAR_3 , VAR_1 ) ) >= ( TYPE_3 . METHOD_4 ( ) ) ) { return VAR_4 . get ( VAR_3 ) ; } } return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int VAR_1 ) { for ( int VAR_3 : VAR_4 . METHOD_2 ( ) ) { if ( ( TYPE_3 . METHOD_3 ( VAR_3 , VAR_1 ) ) >= ( TYPE_3 . METHOD_4 ( ) ) ) { return VAR_4 . get ( VAR_3 ) ; } } return null ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e0c6e82e0ca28c45cb2eae9dd11d9b1fab0d02e3", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         getMockEndpoint(\"mock:b\").expectedMinimumMessageCount(1);\n         getMockEndpoint(\"mock:result\").expectedMessageCount(0);\n        getMockEndpoint(\"mock:line\").expectedMinimumMessageCount(1);\n         template.sendBody(\"direct:start\", \"Tiger,Donkey,Camel\");", "fixed": "         getMockEndpoint(\"mock:b\").expectedMinimumMessageCount(1);\n         getMockEndpoint(\"mock:result\").expectedMessageCount(0);\n        getMockEndpoint(\"mock:line\").expectedMinimumMessageCount(0);\n         template.sendBody(\"direct:start\", \"Tiger,Donkey,Camel\");", "sourceBeforeFix": "getMockEndpoint(\"mock:line\").expectedMinimumMessageCount(1)", "sourceAfterFix": "getMockEndpoint(\"mock:line\").expectedMinimumMessageCount(0)"}
{"problem": "private void METHOD_1 ( ) throws java.lang.Exception { boolean VAR_1 ; VAR_1 = METHOD_2 ( STRING_1 ) ; if ( VAR_1 == true ) { METHOD_3 ( STRING_1 ) ; } while ( VAR_1 == true ) { METHOD_4 ( STRING_1 ) ; VAR_1 = METHOD_2 ( STRING_1 ) ; if ( VAR_1 == true ) { METHOD_3 ( STRING_1 ) ; java.lang.Thread . METHOD_5 ( INT_1 ) ; } } }\n", "fixed": "private void METHOD_1 ( ) throws java.lang.Exception { boolean VAR_1 ; VAR_1 = METHOD_2 ( STRING_1 ) ; if ( VAR_1 == true ) { while ( VAR_1 == true ) { METHOD_3 ( STRING_1 ) ; java.lang.Thread . METHOD_5 ( INT_1 ) ; VAR_1 = METHOD_2 ( STRING_1 ) ; } } }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( java.lang.String method , java.lang.String VAR_1 , TYPE_1 parameters ) { java.lang.String content = METHOD_2 ( method , VAR_1 , parameters ) ; try { TYPE_1 response = new TYPE_1 ( content ) ; METHOD_3 ( response ) ; return response ; } catch ( java.lang.Exception VAR_2 ) { METHOD_4 ( STRING_1 ) ; } return null ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( java.lang.String method , java.lang.String VAR_1 , TYPE_1 parameters ) { java.lang.String content = METHOD_2 ( method , VAR_1 , parameters ) ; TYPE_1 response = null ; try { response = new TYPE_1 ( content ) ; METHOD_3 ( response ) ; } catch ( java.lang.Exception VAR_2 ) { METHOD_4 ( STRING_1 ) ; response = null ; } return response ; }\n"}
{"problem": "TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Map < TYPE_3 < TYPE_4 > , TYPE_4 > VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_4 VAR_3 : VAR_2 . values ( ) ) { if ( VAR_3 instanceof TYPE_5 ) { return new TYPE_6 ( ( ( TYPE_5 ) ( VAR_3 ) ) ) ; } } return new TYPE_7 ( ) ; }\n", "fixed": "TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Map < TYPE_3 < TYPE_4 > , TYPE_4 > VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_4 VAR_3 : VAR_2 . values ( ) ) { if ( VAR_3 instanceof TYPE_5 ) { ( ( TYPE_5 ) ( VAR_3 ) ) . update ( ) ; return new TYPE_6 ( ( ( TYPE_5 ) ( VAR_3 ) ) ) ; } } return new TYPE_7 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { double VAR_1 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , 0 , 0 ) , TYPE_2 . METHOD_3 ( INT_1 , INT_2 , INT_2 ) , VAR_2 ) ; double VAR_3 = ( INT_3 * INT_4 ) + INT_2 ; assertEquals ( ( VAR_3 * INT_5 ) , VAR_1 , VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( ) { double VAR_1 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , 0 , 0 ) , TYPE_2 . METHOD_3 ( INT_1 , INT_2 , INT_2 ) , VAR_2 ) ; double VAR_3 = ( INT_3 * INT_4 ) + INT_2 ; assertEquals ( ( ( VAR_3 * INT_5 ) / INT_4 ) , VAR_1 , VAR_4 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixMessagingEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtomixMessagingEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AtomixMessagingEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtomixMessagingEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ReactiveStreamsEndpointBuilder\n             extends\n                 ReactiveStreamsEndpointConsumerBuilder, ReactiveStreamsEndpointProducerBuilder {\n         default AdvancedReactiveStreamsEndpointBuilder advanced() {", "fixed": "     \n    public interface ReactiveStreamsEndpointBuilder\n             extends\n                 ReactiveStreamsEndpointConsumerBuilder, ReactiveStreamsEndpointProducerBuilder {\n         default AdvancedReactiveStreamsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = this . VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) . getName ( ) ) ; } return VAR_2 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = this . VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) . getName ( ) ) ; this . VAR_3 . put ( VAR_1 . METHOD_2 ( ) , VAR_2 ) ; } return VAR_2 ; }\n"}
{"problem": "public static void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 , int VAR_3 ) { java.util.List < TYPE_1 > VAR_4 = TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; int VAR_5 = VAR_4 . size ( ) ; if ( VAR_3 > VAR_5 ) { TYPE_4 VAR_6 = TYPE_3 . METHOD_3 ( VAR_4 ) ; throw TYPE_5 . METHOD_4 ( new TYPE_6 ( VAR_3 , VAR_5 ) , VAR_2 , VAR_6 ) ; } TYPE_7 . METHOD_5 ( VAR_4 ) ; TYPE_8 . METHOD_6 ( VAR_4 , VAR_2 ) ; }\n", "fixed": "public static void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 , int VAR_3 ) { java.util.List < TYPE_1 > VAR_4 = TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; int VAR_5 = VAR_4 . size ( ) ; if ( VAR_3 > VAR_5 ) { TYPE_4 VAR_6 = TYPE_3 . METHOD_3 ( VAR_4 ) ; throw TYPE_5 . METHOD_4 ( new TYPE_6 ( VAR_3 , VAR_5 ) , VAR_2 , VAR_6 ) ; } TYPE_8 . METHOD_6 ( VAR_4 , VAR_2 ) ; }\n"}
{"fixCommitSHA1": "0b16787d9e5afdb12015e3142fd16a46e8008557", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         try{\n             context.commitTransaction();\n             fail(\"commit should throw exception !\");\n        } catch (TransactionException e){\n             context.rollbackTransaction();\n             latch.countDown();\n         }", "fixed": "         try{\n             context.commitTransaction();\n             fail(\"commit should throw exception !\");\n        } catch (Exception e){\n             context.rollbackTransaction();\n             latch.countDown();\n         }", "sourceBeforeFix": "TransactionException e", "sourceAfterFix": "Exception e"}
{"problem": "private java.lang.String METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , java.lang.String msg ) { java.lang.String [ ] VAR_3 = new java.lang.String [ ] { VAR_4 . METHOD_2 ( ) , java.lang.String . METHOD_3 ( VAR_1 ) , VAR_2 , msg } ; TYPE_1 . METHOD_4 ( VAR_3 ) ; return TYPE_2 . METHOD_5 ( ( ( ( ( VAR_3 [ 0 ] ) + ( VAR_3 [ 1 ] ) ) + ( VAR_3 [ INT_1 ] ) ) + ( VAR_3 [ INT_2 ] ) ) ) ; }\n", "fixed": "private java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String msg ) { java.lang.String [ ] VAR_3 = new java.lang.String [ ] { VAR_4 . METHOD_2 ( ) , VAR_1 , VAR_2 , msg } ; TYPE_1 . METHOD_4 ( VAR_3 ) ; return TYPE_2 . METHOD_5 ( ( ( ( ( VAR_3 [ 0 ] ) + ( VAR_3 [ 1 ] ) ) + ( VAR_3 [ INT_1 ] ) ) + ( VAR_3 [ INT_2 ] ) ) ) ; }\n"}
{"problem": "public static java.util.ArrayList < TYPE_1 > METHOD_1 ( java.util.ArrayList < TYPE_2 > VAR_1 , java.lang.String VAR_2 ) { java.util.ArrayList < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 VAR_4 : VAR_1 ) { VAR_3 . add ( VAR_4 . METHOD_2 ( VAR_2 ) ) ; } return VAR_3 ; }\n", "fixed": "public static java.util.ArrayList < TYPE_1 > METHOD_1 ( java.util.ArrayList < TYPE_2 > VAR_1 , java.lang.String VAR_2 ) { java.util.ArrayList < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) for ( TYPE_2 VAR_4 : VAR_1 ) { VAR_3 . add ( VAR_4 . METHOD_2 ( VAR_2 ) ) ; } return VAR_3 ; }\n"}
{"fixCommitSHA1": "7ea3d0ec30b6b88358ca298a7e8e752a15dfbc2f", "projectName": "apache.camel", "bugType": "Change Caller in Function Call", "problem": "         if (configuration.getSslContextParameters() != null) {\n             SslFilter filter = new SslFilter(configuration.getSslContextParameters().createSSLContext(), configuration.isAutoStartTls());\n             filter.setUseClientMode(true);\n            acceptor.getFilterChain().addFirst(\"sslFilter\", filter);\n         }\n         configureCodecFactory(\"Mina2Producer\", connector);\n         connector.setConnectTimeoutMillis(timeout);", "fixed": "         if (configuration.getSslContextParameters() != null) {\n             SslFilter filter = new SslFilter(configuration.getSslContextParameters().createSSLContext(), configuration.isAutoStartTls());\n             filter.setUseClientMode(true);\n            connector.getFilterChain().addFirst(\"sslFilter\", filter);\n         }\n         configureCodecFactory(\"Mina2Producer\", connector);\n         connector.setConnectTimeoutMillis(timeout);", "sourceBeforeFix": "acceptor.getFilterChain()", "sourceAfterFix": "connector.getFilterChain()"}
{"problem": "public double METHOD_1 ( int [ ] [ ] VAR_1 , int [ ] [ ] VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_4 ) ; VAR_3 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; double VAR_5 = VAR_3 . METHOD_4 ( ) ; VAR_3 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; double VAR_6 = VAR_3 . METHOD_4 ( ) ; double VAR_7 = TYPE_2 . min ( VAR_5 , VAR_6 ) ; return VAR_7 == 0 ? 1 : VAR_7 ; }\n", "fixed": "public double METHOD_1 ( int [ ] [ ] VAR_1 , int [ ] [ ] VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_4 ) ; VAR_3 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; double VAR_5 = VAR_3 . METHOD_4 ( ) ; VAR_3 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; double VAR_6 = VAR_3 . METHOD_4 ( ) ; return TYPE_2 . min ( VAR_5 , VAR_6 ) ; }\n"}
{"problem": "private void METHOD_1 ( int VAR_1 , byte VAR_2 ) { if ( ( VAR_1 < 0 ) || ( VAR_1 > INT_1 ) ) throw new TYPE_1 ( ( STRING_1 + VAR_1 ) ) ; int VAR_3 = ( ( this . VAR_4 . getValue ( ) ) > > INT_2 ) & INT_2 ; int VAR_5 = ( VAR_3 < < INT_2 ) | VAR_1 ; this . VAR_6 . set ( VAR_5 , VAR_2 ) ; }\n", "fixed": "private void METHOD_1 ( int VAR_1 , byte VAR_2 ) { if ( ( VAR_1 < 0 ) || ( VAR_1 > INT_1 ) ) throw new TYPE_1 ( ( STRING_1 + VAR_1 ) ) ; int VAR_3 = ( ( this . VAR_4 . getValue ( ) ) > > > INT_2 ) & INT_2 ; int VAR_5 = ( VAR_3 < < INT_2 ) | VAR_1 ; this . VAR_6 . set ( VAR_5 , VAR_2 ) ; }\n"}
{"problem": "public boolean METHOD_1 ( ) { if ( VAR_1 ) return true ; try { java.io.FileOutputStream out = new java.io.FileOutputStream ( VAR_2 ) ; VAR_1 = METHOD_1 ( out ) ; out . METHOD_2 ( ) ; } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } if ( ( VAR_2 . METHOD_4 ( ) ) && ( ( VAR_2 . length ( ) ) == 0 ) ) VAR_2 . delete ( ) ; return false ; }\n", "fixed": "public boolean METHOD_1 ( ) { if ( VAR_1 ) return true ; try { java.io.FileOutputStream out = new java.io.FileOutputStream ( VAR_2 ) ; VAR_1 = METHOD_1 ( out ) ; out . METHOD_2 ( ) ; } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } if ( ( VAR_2 . METHOD_4 ( ) ) && ( ( VAR_2 . length ( ) ) == 0 ) ) VAR_2 . delete ( ) ; return VAR_2 . METHOD_4 ( ) ; }\n"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUser(@Valid User body);\n     @POST\n     @Path(\"/createWithArray\")", "fixed": "     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUser(@Valid User body) throws Exception;\n     @POST\n     @Path(\"/createWithArray\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"problem": "public void METHOD_1 ( java.lang.String name , java.lang.String type , TYPE_1 VAR_1 ) { java.lang.String VAR_2 = type ; if ( type . equals ( STRING_1 ) ) { VAR_2 = STRING_2 ; } VAR_2 = TYPE_2 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; TYPE_3 param = new TYPE_3 ( VAR_2 , STRING_3 , name ) ; TYPE_4 node = VAR_3 . METHOD_4 ( this , param ) ; node . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( ) ; VAR_4 . METHOD_1 ( param , TYPE_2 . METHOD_2 ( type ) ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String name , java.lang.String type , TYPE_1 VAR_1 ) { java.lang.String VAR_2 = type ; if ( type . equals ( STRING_1 ) ) { VAR_2 = STRING_2 ; } VAR_2 = TYPE_2 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; TYPE_3 param = new TYPE_3 ( VAR_2 , STRING_3 , name ) ; TYPE_4 node = VAR_3 . METHOD_4 ( this , param ) ; node . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( ) ; VAR_4 . METHOD_1 ( param , type ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "370ead7395fc9194a3dc2d05afc4b3409f6b27da", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     }\n   }\n  private HashMap<String, ASTNode> doPhase1GetAggregationsFromSelect(\n       ASTNode selExpr) {\n    HashMap<String, ASTNode> aggregationTrees = new HashMap<String, ASTNode>();\n     for (int i = 0; i < selExpr.getChildCount(); ++i) {\n       ASTNode sel = (ASTNode) selExpr.getChild(i).getChild(0);\n       doPhase1GetAllAggregations(sel, aggregationTrees);", "fixed": "     }\n   }\n  private LinkedHashMap<String, ASTNode> doPhase1GetAggregationsFromSelect(\n       ASTNode selExpr) {\n    LinkedHashMap<String, ASTNode> aggregationTrees = new LinkedHashMap<String, ASTNode>();\n     for (int i = 0; i < selExpr.getChildCount(); ++i) {\n       ASTNode sel = (ASTNode) selExpr.getChild(i).getChild(0);\n       doPhase1GetAllAggregations(sel, aggregationTrees);", "sourceBeforeFix": "HashMap<String,ASTNode>", "sourceAfterFix": "LinkedHashMap<String,ASTNode>"}
{"fixCommitSHA1": "8e55a16169d3ef6a9e01596ddb6063b6e625029a", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "       DirContext ctx = new InitialDirContext(env);\n       ctx.close();\n     } catch (NamingException e) {\n      throw new AuthenticationException(\"Error validating LDAP user\");\n     }\n   return;\n   }", "fixed": "       DirContext ctx = new InitialDirContext(env);\n       ctx.close();\n     } catch (NamingException e) {\n      throw new AuthenticationException(\"Error validating LDAP user\", e);\n     }\n   return;\n   }", "sourceBeforeFix": "new AuthenticationException(\"Error validating LDAP user\")", "sourceAfterFix": "new AuthenticationException(\"Error validating LDAP user\",e)"}
{"problem": "public TYPE_1 METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( TYPE_3 : : METHOD_1 ) . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ; java.util.List < TYPE_5 > VAR_2 = METHOD_6 ( ) . METHOD_3 ( TYPE_6 : : METHOD_1 ) . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ; return new TYPE_1 ( name , VAR_1 , VAR_2 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( name , METHOD_2 ( ) . METHOD_3 ( TYPE_3 : : METHOD_1 ) . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) , METHOD_6 ( ) . METHOD_3 ( TYPE_6 : : METHOD_1 ) . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) ; }\n"}
{"problem": "private static java.util.ArrayList < java.util.ArrayList < TYPE_1 > > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return new java.util.ArrayList < java.util.ArrayList < TYPE_1 > > ( ) ; } java.util.ArrayList < java.util.ArrayList < TYPE_1 > > VAR_2 = new java.util.ArrayList < > ( ) ; while ( VAR_1 . METHOD_3 ( ) ) { java.util.ArrayList < TYPE_1 > VAR_3 = TYPE_4 . METHOD_4 ( VAR_1 ) ; if ( VAR_3 != null ) { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; }\n", "fixed": "private static java.util.ArrayList < java.util.ArrayList < TYPE_1 > > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { java.util.ArrayList < java.util.ArrayList < TYPE_1 > > VAR_2 = new java.util.ArrayList < > ( ) ; while ( VAR_1 . METHOD_3 ( ) ) { java.util.ArrayList < TYPE_1 > VAR_3 = TYPE_4 . METHOD_4 ( VAR_1 ) ; if ( VAR_3 != null ) { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; }\n"}
{"problem": "private double METHOD_1 ( java.util.Map < java.lang.Integer , TYPE_1 > VAR_1 ) { double sum = 0.0 ; for ( java.util.Map.Entry < java.lang.Integer , TYPE_1 > VAR_2 : VAR_1 . METHOD_2 ( ) ) { sum += VAR_2 . getValue ( ) . METHOD_3 ( ) ; } return sum ; }\n", "fixed": "private double METHOD_1 ( java.util.Map < java.lang.Integer , TYPE_1 > VAR_1 ) { double sum = 0.0 ; for ( java.util.Map.Entry < java.lang.Integer , TYPE_1 > VAR_2 : VAR_1 . METHOD_2 ( ) ) { if ( ( VAR_2 . getValue ( ) . METHOD_3 ( ) ) > sum ) { if ( ( VAR_2 . getValue ( ) . METHOD_3 ( ) ) > sum ) { sum = VAR_2 . getValue ( ) . METHOD_3 ( ) ; } } } return sum ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) == 0 ) { VAR_2 = 1 ; } else { VAR_2 = 0 ; } java.lang.System.out.println ( ( STRING_1 + ( VAR_2 ) ) ) ; VAR_3 . METHOD_2 ( VAR_4 , VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) == true ) { VAR_2 = false ; } else { VAR_2 = true ; } java.lang.System.out.println ( ( STRING_1 + ( VAR_2 ) ) ) ; VAR_3 . METHOD_2 ( VAR_4 , ( VAR_2 ? ( ( byte ) ( 1 ) ) : 0 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( java.util.List list ) { for ( int i = 0 ; i < ( list . size ( ) ) ; i ++ ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( list . get ( i ) ) ) ; TYPE_2 . METHOD_2 ( STRING_1 , ( ( ( STRING_2 + i ) + STRING_3 ) + ( VAR_1 . METHOD_3 ( ) ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( java.util.List list ) { for ( int i = 0 ; i < ( list . size ( ) ) ; i ++ ) { TYPE_2 . METHOD_2 ( STRING_1 , ( ( ( STRING_2 + i ) + STRING_3 ) + ( ( ( TYPE_1 ) ( list . get ( i ) ) ) . METHOD_3 ( ) ) ) ) ; } }\n"}
{"fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "         public OutType get()\n         {\n           try {\n            waitLatch.await(25, TimeUnit.MILLISECONDS);\n           }\n           catch (Exception e) {\n             throw Throwables.propagate(e);", "fixed": "         public OutType get()\n         {\n           try {\n            waitLatch.await(1000, TimeUnit.MILLISECONDS);\n           }\n           catch (Exception e) {\n             throw Throwables.propagate(e);", "sourceBeforeFix": "queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)"}
{"problem": "private java.lang.String METHOD_1 ( java.lang.String [ ] args ) { java.lang.String VAR_1 = STRING_1 ; for ( int i = 0 ; i < ( args.length ) ; i ++ ) { VAR_1 += args [ i ] ; if ( i != ( ( args.length ) - 1 ) ) VAR_1 += STRING_2 ; } return ( ( ( VAR_2 ) + VAR_1 ) + STRING_3 ) + ( VAR_3 ) ; }\n", "fixed": "private java.lang.String METHOD_1 ( java.lang.String [ ] args ) { java.lang.String VAR_1 = STRING_1 ; for ( int i = 0 ; i < ( args.length ) ; i ++ ) { VAR_1 += args [ i ] . trim ( ) ; if ( i != ( ( args.length ) - 1 ) ) VAR_1 += STRING_2 ; } return ( ( ( VAR_2 ) + VAR_1 ) + STRING_3 ) + ( VAR_3 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . getData ( ) ) != null ) { VAR_2 . setText ( ( ( STRING_1 + ( VAR_1 . getData ( ) . size ( ) ) ) + STRING_2 ) ) ; VAR_3 . METHOD_2 ( VAR_1 . getData ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_1 . getData ( ) ) != null ) && ( ( VAR_1 . getData ( ) . size ( ) ) != 0 ) ) { VAR_2 . setText ( ( ( STRING_1 + ( VAR_1 . getData ( ) . size ( ) ) ) + STRING_2 ) ) ; VAR_3 . METHOD_2 ( VAR_1 . getData ( ) ) ; } }\n"}
{"problem": "public void init ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( VAR_1 == null ) { throw new TYPE_3 ( STRING_1 ) ; } this . context = VAR_1 . METHOD_1 ( ) ; final boolean VAR_2 = METHOD_2 ( VAR_1 , VAR_3 , true ) ; this . VAR_1 = VAR_1 ; try { VAR_4 = new TYPE_4 ( VAR_2 ) ; } catch ( java.lang.Exception VAR_5 ) { final java.lang.String message = STRING_2 ; VAR_6 . error ( message , VAR_5 ) ; throw new TYPE_2 ( message , VAR_5 ) ; } }\n", "fixed": "public void init ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( VAR_1 == null ) { throw new TYPE_3 ( STRING_1 ) ; } this . context = VAR_1 . METHOD_1 ( ) ; final boolean VAR_2 = METHOD_2 ( VAR_1 , VAR_3 , true ) ; try { VAR_4 = new TYPE_4 ( VAR_2 ) ; } catch ( java.lang.Exception VAR_5 ) { final java.lang.String message = STRING_2 ; VAR_6 . error ( message , VAR_5 ) ; throw new TYPE_2 ( message , VAR_5 ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( this . METHOD_3 ( ) ) ) { return false ; } if ( ( VAR_1 ) == true ) { return true ; } long VAR_2 = TYPE_2 . METHOD_4 ( ) ; VAR_1 = ( VAR_2 - ( VAR_3 ) ) > INT_1 ; return VAR_1 ; }\n", "fixed": "public boolean METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( this . METHOD_3 ( ) ) ) { return false ; } if ( VAR_1 ) { return true ; } long VAR_2 = TYPE_2 . METHOD_4 ( ) ; VAR_1 = ( VAR_2 - ( VAR_3 ) ) > INT_1 ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return A deep copy of this comparator instance.\n \t */\n\tpublic TypeComparator<T> duplicate();\n }", "fixed": " \t * \n \t * @return A deep copy of this comparator instance.\n \t */\n\tpublic abstract TypeComparator<T> duplicate();\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "public static final void remove ( final java.lang.String VAR_1 ) { boolean result = VAR_2 . METHOD_1 ( VAR_1 , VAR_3 ) ; if ( ! result ) { VAR_2 . METHOD_2 ( VAR_1 , VAR_3 ) ; } TYPE_1 . METHOD_3 ( STRING_1 , VAR_1 , VAR_3 ) ; }\n", "fixed": "public static final void remove ( final java.lang.String VAR_1 ) { boolean result = VAR_2 . METHOD_1 ( VAR_1 , VAR_3 ) ; if ( ! result ) { VAR_2 . METHOD_2 ( VAR_1 , VAR_3 ) ; TYPE_1 . METHOD_3 ( STRING_1 , VAR_1 , VAR_3 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { if ( METHOD_2 ( ) ) { TYPE_4 VAR_4 = new TYPE_4 ( ) ; VAR_4 . METHOD_3 ( VAR_2 . getContext ( ) , VAR_2 , VAR_3 , new TYPE_5 ( ) { public void METHOD_4 ( ) { TYPE_6 . METHOD_5 ( VAR_1 ) ; } public void METHOD_6 ( ) { TYPE_6 . METHOD_5 ( VAR_1 ) ; } } ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 VAR_4 = new TYPE_4 ( ) ; VAR_4 . METHOD_3 ( VAR_2 . getContext ( ) , VAR_2 , VAR_3 , new TYPE_5 ( ) { public void METHOD_4 ( ) { TYPE_6 . METHOD_5 ( VAR_1 ) ; } public void METHOD_6 ( ) { TYPE_6 . METHOD_5 ( VAR_1 ) ; } } ) ; }\n"}
{"problem": "private boolean METHOD_1 ( java.lang.String title ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , false , false ) ; java.util.List < TYPE_2 > VAR_4 = VAR_1 . METHOD_3 ( ) ; if ( VAR_4 != null ) { for ( TYPE_2 t : VAR_4 ) { if ( t . METHOD_4 ( ) . equals ( title ) ) return true ; } } return false ; }\n", "fixed": "private boolean METHOD_1 ( java.lang.String title ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , false , false , 0 ) ; java.util.List < TYPE_2 > VAR_4 = VAR_1 . METHOD_3 ( ) ; if ( VAR_4 != null ) { for ( TYPE_2 t : VAR_4 ) { if ( t . METHOD_4 ( ) . equals ( title ) ) return true ; } } return false ; }\n"}
{"problem": "public int METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 , java.util.ArrayList < java.lang.Integer > VAR_2 ) { int VAR_3 = ( ( int ) ( ( METHOD_2 ( VAR_1 ) ) * FLOAT_1 ) ) ; if ( VAR_3 != 0 ) VAR_3 -= this . VAR_4 ; else VAR_3 += this . VAR_4 ; ( this . VAR_4 ) ++ ; return VAR_3 ; }\n", "fixed": "public int METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 , java.util.ArrayList < java.lang.Integer > VAR_2 ) { int VAR_3 = ( ( int ) ( ( METHOD_2 ( VAR_1 ) ) * FLOAT_1 ) ) ; if ( VAR_3 > 0 ) VAR_3 -= this . VAR_4 ; else VAR_3 += this . VAR_4 ; ( this . VAR_4 ) ++ ; return VAR_3 ; }\n"}
{"problem": "public void update ( long VAR_1 ) { if ( VAR_2 ) { if ( ( VAR_3 ) != null ) { VAR_3 . update ( this , VAR_1 ) ; } else { position = position . METHOD_1 ( VAR_4 . METHOD_2 ( ( VAR_1 / FLOAT_1 ) ) ) ; } } VAR_5 += VAR_1 ; METHOD_3 ( ( ( ( VAR_5 ) > 0 ) && ( VAR_6 ) ) ) ; VAR_7 . METHOD_4 ( ) ; }\n", "fixed": "public void update ( long VAR_1 ) { if ( VAR_2 ) { if ( ( VAR_3 ) != null ) { VAR_3 . update ( this , VAR_1 ) ; } else { position = position . METHOD_1 ( VAR_4 . METHOD_2 ( ( VAR_1 / FLOAT_1 ) ) ) ; } } VAR_5 += VAR_1 ; METHOD_3 ( ( ( ( VAR_5 ) > 0 ) && ( VAR_6 ) ) ) ; if ( ( VAR_7 ) != null ) VAR_7 . METHOD_4 ( this , VAR_1 ) ; }\n"}
{"problem": "public static boolean METHOD_1 ( char [ ] VAR_1 , char [ ] VAR_2 ) { boolean VAR_3 = false ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { if ( ( VAR_1 [ i ] ) != ( VAR_2 [ i ] ) ) { if ( VAR_3 ) return false ; VAR_3 = true ; } } return true ; }\n", "fixed": "public static boolean METHOD_1 ( char [ ] VAR_1 , char [ ] VAR_2 ) { boolean VAR_3 = false ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { if ( ( VAR_1 [ i ] ) != ( VAR_2 [ i ] ) ) { if ( VAR_3 ) return false ; VAR_3 = true ; } } return true ; }\n"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; this . VAR_1 = new java.util.HashMap < > ( ) ; this . VAR_2 = new java.util.HashMap < > ( ) ; this . context = null ; this . VAR_3 = null ; this . VAR_2 = new java.util.HashMap < > ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ! ( this . state ) ) return ; METHOD_2 ( STRING_1 ) ; this . VAR_1 = new java.util.HashMap < > ( ) ; this . VAR_2 = new java.util.HashMap < > ( ) ; this . context = null ; this . VAR_3 = null ; this . VAR_2 = new java.util.HashMap < > ( ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_3 ( id . getText ( ) . toString ( ) ) ; VAR_3 . METHOD_4 ( name . getText ( ) . toString ( ) ) ; VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_5 ( VAR_3 ) ; VAR_2 . METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_3 ( id . getText ( ) . toString ( ) ) ; VAR_3 . METHOD_4 ( name . getText ( ) . toString ( ) ) ; VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_5 ( VAR_3 ) ; VAR_2 . METHOD_6 ( ) ; }\n"}
{"problem": "protected final java.lang.String getString ( java.lang.String name , int VAR_1 ) { java.lang.String VAR_2 = getString ( name ) ; if ( ! ( TYPE_1 . isEmpty ( VAR_2 ) ) ) { if ( ( VAR_2 . METHOD_1 ( ) . length ) > VAR_1 ) { VAR_2 = TYPE_2 . METHOD_2 ( VAR_2 ) . text ( VAR_1 ) ; } } return VAR_2 ; }\n", "fixed": "public final java.lang.String getString ( java.lang.String name , int VAR_1 ) { java.lang.String VAR_2 = getString ( name ) ; if ( ! ( TYPE_1 . isEmpty ( VAR_2 ) ) ) { if ( ( VAR_2 . METHOD_1 ( ) . length ) > VAR_1 ) { VAR_2 = TYPE_2 . METHOD_2 ( VAR_2 ) . text ( VAR_1 ) ; } } return VAR_2 ; }\n"}
{"problem": "public boolean equals ( java.lang.Object VAR_1 ) { if ( ( this ) == VAR_1 ) return true ; if ( ( VAR_1 == null ) || ( ( getClass ( ) ) != ( VAR_1 . getClass ( ) ) ) ) return false ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; if ( ( ( VAR_3 ) == null ) || ( ! ( VAR_3 . equals ( VAR_4 ) ) ) ) return false ; return true ; }\n", "fixed": "public boolean equals ( java.lang.Object VAR_1 ) { if ( ( this ) == VAR_1 ) return true ; if ( ( VAR_1 == null ) || ( ( getClass ( ) ) != ( VAR_1 . getClass ( ) ) ) ) return false ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; if ( ( VAR_3 ) != null ? ! ( VAR_3 . equals ( VAR_4 ) ) : ( VAR_4 ) != null ) return false ; return true ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 , new TYPE_2 ( ) ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ; assertEquals ( STRING_2 , VAR_1 . METHOD_4 ( ) ) ; assertEquals ( STRING_3 , VAR_1 . METHOD_5 ( ) ) ; assertEquals ( VAR_2 , VAR_1 . METHOD_6 ( ) ) ; assertEquals ( new TYPE_2 ( ) . toString ( ) , VAR_1 . METHOD_7 ( ) . toString ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 , new TYPE_2 ( ) , new java.util.Date ( ) ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ; assertEquals ( STRING_2 , VAR_1 . METHOD_4 ( ) ) ; assertEquals ( STRING_3 , VAR_1 . METHOD_5 ( ) ) ; assertEquals ( VAR_2 , VAR_1 . METHOD_6 ( ) ) ; assertEquals ( new TYPE_2 ( ) . toString ( ) , VAR_1 . METHOD_7 ( ) . toString ( ) ) ; }\n"}
{"problem": "public boolean isEmpty ( ) { if ( this . VAR_1 . isEmpty ( ) ) { return true ; } for ( TYPE_1 < TYPE_2 > VAR_2 : this . VAR_1 ) { if ( ! ( VAR_2 . METHOD_1 ( ) . isEmpty ( ) ) ) { return false ; } } return true ; }\n", "fixed": "public boolean isEmpty ( ) { if ( VAR_1 . isEmpty ( ) ) { return true ; } for ( TYPE_1 < TYPE_2 > VAR_2 : VAR_1 ) { if ( ! ( VAR_2 . METHOD_1 ( ) . isEmpty ( ) ) ) { return false ; } } return true ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { VAR_3 . METHOD_3 ( false ) ; VAR_4 . METHOD_3 ( false ) ; VAR_5 . METHOD_3 ( false ) ; VAR_6 . METHOD_3 ( false ) ; VAR_7 . METHOD_3 ( false ) ; } else { VAR_3 . METHOD_3 ( true ) ; VAR_4 . METHOD_3 ( true ) ; VAR_5 . METHOD_3 ( true ) ; VAR_6 . METHOD_3 ( true ) ; VAR_7 . METHOD_3 ( true ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { VAR_3 . METHOD_3 ( false ) ; VAR_4 . METHOD_3 ( false ) ; VAR_5 . METHOD_3 ( false ) ; VAR_6 . METHOD_3 ( true ) ; VAR_7 . METHOD_3 ( true ) ; } else { VAR_3 . METHOD_3 ( true ) ; VAR_4 . METHOD_3 ( true ) ; VAR_5 . METHOD_3 ( true ) ; VAR_6 . METHOD_3 ( true ) ; VAR_7 . METHOD_3 ( true ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != ( - 1 ) ) { try { VAR_3 . set ( VAR_2 , VAR_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , null ) ) ; } catch ( TYPE_2 VAR_5 ) { java.util.logging.Logger.getLogger ( VAR_6 class . getName ( ) ) . METHOD_4 ( VAR_7 , null , VAR_5 ) ; } METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != ( - 1 ) ) { try { if ( ( VAR_2 ) < ( VAR_3 . size ( ) ) ) { VAR_3 . set ( VAR_2 , VAR_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , null ) ) ; } } catch ( TYPE_2 VAR_5 ) { java.util.logging.Logger.getLogger ( VAR_6 class . getName ( ) ) . METHOD_4 ( VAR_7 , null , VAR_5 ) ; } METHOD_5 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( final int VAR_1 , final int VAR_2 ) { if ( VAR_1 >= 0 ) { METHOD_1 ( ( ( long ) ( VAR_1 ) ) , ( ( long ) ( VAR_2 ) ) ) ; } METHOD_1 ( ( VAR_1 & INT_1 ) , ( VAR_2 & INT_1 ) ) ; }\n", "fixed": "public void METHOD_1 ( final int VAR_1 , final int VAR_2 ) { if ( VAR_1 >= 0 ) { METHOD_1 ( ( ( long ) ( VAR_1 ) ) , ( ( long ) ( VAR_2 ) ) ) ; } else { METHOD_1 ( ( VAR_1 & INT_1 ) , ( VAR_2 & INT_1 ) ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , TYPE_4 file ) { if ( VAR_4 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; return STRING_3 ; } if ( file == null ) VAR_3 . METHOD_4 ( STRING_4 ) ; else VAR_3 . METHOD_4 ( VAR_5 . METHOD_5 ( file ) ) ; VAR_6 . METHOD_6 ( VAR_3 , VAR_1 ) ; return STRING_5 + VAR_1 ; }\n", "fixed": "public java.lang.String METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , TYPE_4 file ) { if ( VAR_4 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; return STRING_3 ; } if ( file . isEmpty ( ) ) VAR_3 . METHOD_4 ( STRING_4 ) ; else VAR_3 . METHOD_4 ( VAR_5 . METHOD_5 ( file ) ) ; VAR_6 . METHOD_6 ( VAR_3 , VAR_1 ) ; return STRING_5 + VAR_1 ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.util.Collection < TYPE_2 > words ) { TYPE_3 VAR_1 = new TYPE_3 ( ) ; VAR_1 . init ( VAR_2 , words , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; if ( VAR_7 ) { java.lang.System.err.println ( STRING_1 ) ; METHOD_2 ( VAR_1 , words ) ; } else java.lang.System.err.println ( STRING_2 ) ; METHOD_3 ( VAR_1 , words ) ; VAR_1 . METHOD_4 ( ) ; TYPE_1 VAR_8 = new TYPE_1 ( VAR_1 ) ; return VAR_8 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.util.Collection < TYPE_2 > words ) { TYPE_3 VAR_1 = new TYPE_3 ( ) ; VAR_1 . init ( VAR_2 , words , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; if ( VAR_7 ) { java.lang.System.err.println ( STRING_1 ) ; METHOD_2 ( VAR_1 , words ) ; } else { java.lang.System.err.println ( STRING_2 ) ; METHOD_3 ( VAR_1 , words ) ; } VAR_1 . METHOD_4 ( ) ; TYPE_1 VAR_8 = new TYPE_1 ( VAR_1 ) ; return VAR_8 ; }\n"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"redis\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"redis\")"}
{"fixCommitSHA1": "59b25b4bc0d483dfbf1cc9004fd6a6083de89313", "projectName": "NanoHttpd.nanohttpd", "bugType": "Less Specific If", "problem": "                     String mpline = in.readLine();\n                     headerLines++;\n                    if (!mpline.contains(boundary)) {\n                         throw new ResponseException(Response.Status.BAD_REQUEST, \"BAD REQUEST: Content type is multipart/form-data but chunk does not start with boundary.\");\n                     }", "fixed": "                     String mpline = in.readLine();\n                     headerLines++;\n                    if (mpline == null || !mpline.contains(boundary)) {\n                         throw new ResponseException(Response.Status.BAD_REQUEST, \"BAD REQUEST: Content type is multipart/form-data but chunk does not start with boundary.\");\n                     }", "sourceBeforeFix": "!mpline.contains(boundary)", "sourceAfterFix": "mpline == null || !mpline.contains(boundary)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"problem": "private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , double VAR_2 , double VAR_3 ) { double VAR_4 = VAR_2 * ( TYPE_2 . METHOD_2 ( VAR_3 ) ) ; double VAR_5 = VAR_2 * ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; TYPE_1 VAR_6 = VAR_1 . METHOD_4 ( ) ; VAR_6 . METHOD_5 ( ( ( int ) ( TYPE_2 . METHOD_6 ( VAR_4 ) ) ) , ( ( int ) ( TYPE_2 . METHOD_6 ( VAR_5 ) ) ) ) ; return VAR_6 ; }\n", "fixed": "private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , double VAR_2 , double VAR_3 ) { double VAR_4 = VAR_2 * ( TYPE_2 . METHOD_2 ( VAR_3 ) ) ; double VAR_5 = ( VAR_2 * ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ) * ( - 1 ) ; TYPE_1 VAR_6 = VAR_1 . METHOD_4 ( ) ; VAR_6 . METHOD_5 ( ( ( int ) ( TYPE_2 . METHOD_6 ( VAR_4 ) ) ) , ( ( int ) ( TYPE_2 . METHOD_6 ( VAR_5 ) ) ) ) ; return VAR_6 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 , TYPE_2 < TYPE_3 , TYPE_4 > VAR_3 , TYPE_2 < TYPE_3 , TYPE_4 > VAR_4 , java.lang.String VAR_5 , TYPE_5 < java.lang.String , TYPE_6 > VAR_6 ) { VAR_7 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , VAR_3 . METHOD_4 ( ) , VAR_4 . METHOD_4 ( ) , VAR_5 , VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 , TYPE_2 < TYPE_3 , TYPE_4 > VAR_3 , TYPE_2 < TYPE_3 , TYPE_4 > VAR_4 , java.lang.String VAR_5 , TYPE_5 < java.lang.String , TYPE_6 > VAR_6 ) { VAR_7 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , VAR_3 . METHOD_4 ( ) , ( VAR_4 == null ? null : VAR_4 . METHOD_4 ( ) ) , VAR_5 , VAR_6 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setText ( VAR_1 . METHOD_2 ( ) ) ; VAR_3 . setText ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_1 . METHOD_4 ( ) ) { java.lang.String VAR_4 = VAR_1 . METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( VAR_5 . getContext ( ) ) . METHOD_7 ( true ) ; TYPE_2 . METHOD_6 ( VAR_5 . getContext ( ) ) . METHOD_8 ( VAR_4 ) . METHOD_9 ( VAR_5 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setText ( VAR_1 . METHOD_2 ( ) ) ; VAR_3 . setText ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_1 . METHOD_4 ( ) ) { java.lang.String VAR_4 = VAR_1 . METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( VAR_5 . getContext ( ) ) . METHOD_8 ( VAR_4 ) . METHOD_9 ( VAR_5 ) ; } }\n"}
{"fixCommitSHA1": "f9374238b2870cad6c090589ec18933983e1c902", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      */\n     private void addTag(String text, int line)\n     {\n        final Tag tag = new Tag(text, line);\n         tags.add(tag);\n     }\n }", "fixed": "      */\n     private void addTag(String text, int line)\n     {\n        final Tag tag = new Tag(text, line, this);\n         tags.add(tag);\n     }\n }", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { try { try { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , STRING_1 , VAR_2 . METHOD_3 ( ) ) ; } catch ( java.lang.Exception VAR_5 ) { TYPE_2 . METHOD_4 ( STRING_2 , VAR_5 ) ; } } catch ( java.lang.Exception VAR_5 ) { TYPE_2 . METHOD_4 ( STRING_3 , VAR_5 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { try { try { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , STRING_1 , VAR_2 . METHOD_3 ( ) ) ; } catch ( java.lang.Exception VAR_5 ) { TYPE_2 . METHOD_4 ( ( STRING_2 + VAR_5 ) ) ; } } catch ( java.lang.Exception VAR_5 ) { TYPE_2 . METHOD_4 ( ( STRING_3 + VAR_5 ) ) ; } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . add ( TYPE_2 . METHOD_2 ( STRING_2 , STRING_3 , VAR_2 ) ) ; VAR_1 . add ( TYPE_2 . METHOD_2 ( STRING_3 , STRING_1 , VAR_3 ) ) ; VAR_1 . add ( TYPE_2 . METHOD_2 ( STRING_4 , STRING_1 , VAR_2 ) ) ; VAR_1 . add ( TYPE_2 . METHOD_2 ( STRING_4 , STRING_2 , VAR_4 ) ) ; return VAR_1 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . add ( TYPE_2 . METHOD_2 ( STRING_2 , STRING_3 , VAR_2 ) ) ; VAR_1 . add ( TYPE_2 . METHOD_2 ( STRING_3 , STRING_1 , VAR_4 ) ) ; VAR_1 . add ( TYPE_2 . METHOD_2 ( STRING_4 , STRING_1 , VAR_2 ) ) ; VAR_1 . add ( TYPE_2 . METHOD_2 ( STRING_4 , STRING_2 , VAR_4 ) ) ; return VAR_1 ; }\n"}
{"problem": "public static void METHOD_1 ( java.lang.String [ ] args ) { try { java.lang.System.out.println ( STRING_1 ) ; if ( TYPE_1 . METHOD_2 ( ) ) { java.lang.System.out.println ( STRING_2 ) ; TYPE_1 . METHOD_3 ( ) ; java.lang.System.out.println ( STRING_3 ) ; java.lang.System.exit ( 0 ) ; } } catch ( java.lang.Exception VAR_1 ) { TYPE_2 . METHOD_4 ( STRING_4 , STRING_5 , VAR_1 ) ; TYPE_2 . METHOD_5 ( ) ; } }\n", "fixed": "public static void METHOD_1 ( java.lang.String [ ] args ) { try { if ( TYPE_1 . METHOD_2 ( ) ) { java.lang.System.out.println ( STRING_2 ) ; TYPE_1 . METHOD_3 ( ) ; java.lang.System.out.println ( STRING_3 ) ; java.lang.System.exit ( 0 ) ; } } catch ( java.lang.Exception VAR_1 ) { TYPE_2 . METHOD_4 ( STRING_4 , STRING_5 , VAR_1 ) ; TYPE_2 . METHOD_5 ( ) ; } }\n"}
{"problem": "public static long METHOD_1 ( byte [ ] key ) { TYPE_1 buffer = TYPE_1 . METHOD_2 ( ( ( VAR_1 ) / ( VAR_2 ) ) ) ; buffer . put ( key ) ; buffer . METHOD_3 ( ) ; return buffer . METHOD_4 ( ) ; }\n", "fixed": "public static long METHOD_1 ( byte [ ] key ) { TYPE_1 buffer = TYPE_1 . METHOD_2 ( ( ( VAR_1 ) / ( VAR_2 ) ) ) ; buffer . put ( key , 0 , ( ( VAR_1 ) / ( VAR_2 ) ) ) ; buffer . METHOD_3 ( ) ; return buffer . METHOD_4 ( ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final java.lang.String VAR_2 ) throws java.io.IOException , TYPE_3 { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 tmp = VAR_4 . METHOD_3 ( VAR_3 . getString ( STRING_1 ) , VAR_1 . METHOD_4 ( ) ) ; if ( tmp == null ) { METHOD_5 ( VAR_1 , VAR_3 ) ; } return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final java.lang.String VAR_2 ) throws java.io.IOException , TYPE_3 { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 , VAR_2 , false ) ; TYPE_1 tmp = VAR_4 . METHOD_3 ( VAR_3 . getString ( STRING_1 ) , VAR_1 . METHOD_4 ( ) ) ; if ( tmp == null ) { METHOD_5 ( VAR_1 , VAR_3 ) ; } return VAR_3 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void update ( ) { METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ; VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) . METHOD_6 ( ) ) ; VAR_3 . METHOD_2 ( ) . add ( VAR_4 ) ; }\n", "fixed": "private void update ( ) { METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ; VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) . METHOD_6 ( ) ) ; if ( ! ( VAR_3 . METHOD_2 ( ) . contains ( VAR_4 ) ) ) VAR_3 . METHOD_2 ( ) . add ( VAR_4 ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = false ; if ( METHOD_2 ( VAR_1 ) ) { TYPE_2 VAR_3 = VAR_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_3 VAR_5 = VAR_6 . METHOD_5 ( VAR_3 ) ; VAR_4 . METHOD_6 ( VAR_3 , VAR_5 ) ; VAR_6 . METHOD_7 ( VAR_4 ) ; VAR_2 = true ; METHOD_8 ( ) ; METHOD_9 ( ) ; } else if ( ! ( VAR_7 ) ) VAR_8 . add ( STRING_1 ) ; return VAR_2 ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = false ; if ( METHOD_2 ( VAR_1 ) ) { TYPE_2 VAR_3 = VAR_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_3 VAR_5 = VAR_6 . METHOD_5 ( VAR_3 ) ; VAR_4 . METHOD_6 ( VAR_3 , VAR_5 ) ; VAR_6 . METHOD_7 ( VAR_4 ) ; VAR_2 = true ; METHOD_8 ( ) ; } else if ( ! ( VAR_7 ) ) VAR_8 . add ( STRING_1 ) ; return VAR_2 ; }\n"}
{"fixCommitSHA1": "f86baa60b64682aeaeafe54055df03f4d3f8c5d1", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       obj.setBucketName(mBucketName);\n       obj.setDataInputFile(mFile);\n       obj.setContentLength(mFile.length());\n      obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n       if (mHash != null) {\n         obj.setMd5Hash(mHash.digest());\n       } else {", "fixed": "       obj.setBucketName(mBucketName);\n       obj.setDataInputFile(mFile);\n       obj.setContentLength(mFile.length());\n      obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n       if (mHash != null) {\n         obj.setMd5Hash(mHash.digest());\n       } else {", "sourceBeforeFix": "obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)", "sourceAfterFix": "obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)"}
{"problem": "private void METHOD_1 ( int status , java.lang.String message , TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( status ) ; TYPE_3 [ ] VAR_2 = java.lang.Thread . METHOD_3 ( ) . METHOD_4 ( ) ; java.lang.String VAR_3 = VAR_2 [ ( ( VAR_2 . length ) - INT_1 ) ] . METHOD_5 ( ) ; if ( TYPE_2 . METHOD_6 ( ) ) METHOD_7 ( VAR_3 , status , message , VAR_1 ) ; if ( TYPE_2 . METHOD_8 ( ) ) METHOD_9 ( VAR_3 , status , message , VAR_1 ) ; }\n", "fixed": "private void METHOD_1 ( int status , java.lang.String message , TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( status ) ; TYPE_3 [ ] VAR_2 = java.lang.Thread . METHOD_3 ( ) . METHOD_4 ( ) ; java.lang.String VAR_3 = VAR_2 [ INT_1 ] . METHOD_5 ( ) ; if ( TYPE_2 . METHOD_6 ( ) ) METHOD_7 ( VAR_3 , status , message , VAR_1 ) ; if ( TYPE_2 . METHOD_8 ( ) ) METHOD_9 ( VAR_3 , status , message , VAR_1 ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { java.lang.System.out.println ( VAR_1 ) ; TYPE_4 out = response . METHOD_2 ( ) ; TYPE_5 VAR_2 = new TYPE_5 ( ) ; java.lang.String VAR_3 = VAR_2 . METHOD_3 ( VAR_4 ) ; out . METHOD_4 ( VAR_3 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { TYPE_4 out = response . METHOD_2 ( ) ; TYPE_5 VAR_2 = new TYPE_5 ( ) ; java.lang.String VAR_3 = VAR_2 . METHOD_3 ( VAR_4 ) ; out . METHOD_4 ( VAR_3 ) ; }\n"}
{"problem": "public < TYPE_1 extends TYPE_2 > void METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 VAR_2 , TYPE_5 VAR_3 ) { TYPE_6 VAR_4 = METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) VAR_5 . METHOD_1 ( VAR_1 , TYPE_7 . METHOD_3 ( ) , VAR_6 , VAR_2 , VAR_3 ) ; METHOD_1 ( VAR_4 , VAR_2 , VAR_3 ) ; }\n", "fixed": "public < TYPE_1 extends TYPE_2 > void METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 VAR_2 , TYPE_5 VAR_3 ) { TYPE_6 VAR_4 = METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) VAR_5 . METHOD_1 ( VAR_1 , TYPE_7 . METHOD_3 ( ) , VAR_6 , VAR_2 , VAR_3 ) ; else METHOD_1 ( VAR_4 , VAR_2 , VAR_3 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastListEndpointBuilder\n             extends\n                 HazelcastListEndpointConsumerBuilder, HazelcastListEndpointProducerBuilder {\n         default AdvancedHazelcastListEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastListEndpointBuilder\n             extends\n                 HazelcastListEndpointConsumerBuilder, HazelcastListEndpointProducerBuilder {\n         default AdvancedHazelcastListEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 , STRING_1 , STRING_2 ) . METHOD_6 ( ) . METHOD_5 ( VAR_3 , STRING_3 ) . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_3 ( ) . METHOD_9 ( new TYPE_2 ( ) , VAR_4 class ) . METHOD_10 ( ) . METHOD_11 ( METHOD_11 ( ) ) . METHOD_12 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_7 ( ) . METHOD_6 ( ) . METHOD_3 ( ) . METHOD_9 ( new TYPE_2 ( ) , VAR_4 class ) . METHOD_10 ( ) . METHOD_11 ( METHOD_11 ( ) ) . METHOD_12 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 . size ( ) ) > 0 ) { METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) ) ; VAR_3 . METHOD_4 ( ) ; } else { TYPE_2 . METHOD_5 ( context , STRING_1 , VAR_4 ) . show ( ) ; } VAR_3 . METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 . size ( ) ) > 0 ) { METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) ) ; } else { TYPE_2 . METHOD_5 ( context , STRING_1 , VAR_4 ) . show ( ) ; } VAR_3 . METHOD_4 ( ) ; }\n"}
{"project": "Mockito", "bugId": 17, "problem": "     private Object spiedInstance;\r\n     private Answer<Object> defaultAnswer;\r\n     private MockName mockName;\r\n     public MockSettings serializable() {\r\n        return this.extraInterfaces(java.io.Serializable.class);\r\n     }\r\n     public MockSettings extraInterfaces(Class<?>... extraInterfaces) {\r", "fixed": "     private Object spiedInstance;\r\n     private Answer<Object> defaultAnswer;\r\n     private MockName mockName;\r\n    private boolean serializable;\r\n     public MockSettings serializable() {\r\n        this.serializable = true;\r\n        return this;\r\n     }\r\n     public MockSettings extraInterfaces(Class<?>... extraInterfaces) {\r", "observations": "", "repairActions": ["assignAdd", "mcAdd", "mcRem", "objInstAdd", "retExpChange", "varAdd"], "repairPatterns": ["expLogicMod", "wrapsIfElse"]}
{"problem": "public void METHOD_1 ( TYPE_1 out , int value ) throws java.io.IOException { switch ( this ) { case VAR_1 : out . METHOD_2 ( value ) ; case VAR_2 : out . METHOD_3 ( value ) ; case VAR_3 : out . METHOD_4 ( value ) ; default : throw new TYPE_2 ( ( STRING_1 + ( this ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 out , int value ) throws java.io.IOException { switch ( this ) { case VAR_1 : out . METHOD_2 ( value ) ; break ; case VAR_2 : out . METHOD_3 ( value ) ; break ; case VAR_3 : out . METHOD_4 ( value ) ; break ; default : throw new TYPE_2 ( ( STRING_1 + ( this ) ) ) ; } }\n"}
{"problem": "public < TYPE_1 > TYPE_1 METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 ) { if ( VAR_2 class . equals ( VAR_1 ) ) { return ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) ; } else if ( VAR_1 . METHOD_3 ( VAR_3 class ) ) { return ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_4 ( ) ) ) ; } return TYPE_2 . METHOD_5 ( ) . METHOD_1 ( this , VAR_1 ) ; }\n", "fixed": "public java.lang.Object METHOD_1 ( java.lang.Class VAR_1 ) { if ( VAR_2 class . equals ( VAR_1 ) ) { return METHOD_2 ( ) ; } else if ( VAR_1 . METHOD_3 ( VAR_3 class ) ) { return METHOD_2 ( ) . METHOD_4 ( ) ; } return TYPE_2 . METHOD_5 ( ) . METHOD_1 ( this , VAR_1 ) ; }\n"}
{"fixCommitSHA1": "da5e1827cf1c86cb1bddf3886a83736990a36430", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         if (leftValue instanceof Comparable) {\n            Object value = converter.convertTo(leftValue.getClass(), rightValue);\n             if (value != null) {\n                 return ((Comparable) leftValue).compareTo(value);\n             }", "fixed": "         if (leftValue instanceof Comparable) {\n            Object value = converter.tryConvertTo(leftValue.getClass(), rightValue);\n             if (value != null) {\n                 return ((Comparable) leftValue).compareTo(value);\n             }", "sourceBeforeFix": "converter.convertTo(rightValue.getClass(),leftValue)", "sourceAfterFix": "converter.tryConvertTo(rightValue.getClass(),leftValue)"}
{"problem": "private void METHOD_1 ( ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { VAR_2 = VAR_1 . get ( 0 ) ; java.lang.String [ ] VAR_3 = VAR_2 . split ( STRING_1 ) ; VAR_4 . setText ( ( ( ( VAR_3 [ 0 ] ) + STRING_2 ) + ( VAR_3 [ 1 ] ) ) ) ; VAR_1 . remove ( 0 ) ; } else { VAR_2 = VAR_5 ; VAR_4 . setText ( VAR_5 ) ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { VAR_2 = VAR_1 . get ( 0 ) ; VAR_4 . setText ( VAR_2 . getName ( ) ) ; VAR_1 . remove ( 0 ) ; } else { VAR_2 = null ; VAR_4 . setText ( VAR_5 ) ; } }\n"}
{"problem": "private static int [ ] METHOD_1 ( final int [ ] VAR_1 , final int VAR_2 ) { final int VAR_3 = VAR_1 . length ; final int [ ] VAR_4 = new int [ VAR_2 ] ; TYPE_1 . METHOD_2 ( VAR_4 , ( - 1 ) ) ; for ( int VAR_5 = 0 ; VAR_5 < VAR_3 ; ++ VAR_5 ) { final int VAR_6 = VAR_1 [ VAR_5 ] ; if ( VAR_6 >= 0 ) VAR_4 [ VAR_5 ] = VAR_5 ; } return VAR_4 ; }\n", "fixed": "private static int [ ] METHOD_1 ( final int [ ] VAR_1 , final int VAR_2 ) { final int VAR_3 = VAR_1 . length ; final int [ ] VAR_4 = new int [ VAR_2 ] ; TYPE_1 . METHOD_2 ( VAR_4 , ( - 1 ) ) ; for ( int VAR_5 = 0 ; VAR_5 < VAR_3 ; ++ VAR_5 ) { final int VAR_6 = VAR_1 [ VAR_5 ] ; if ( VAR_6 >= 0 ) VAR_4 [ VAR_6 ] = VAR_5 ; } return VAR_4 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { java.lang.System.out.println ( VAR_1 ) ; if ( METHOD_2 ( ) ) { TYPE_1 p = new TYPE_2 ( ( ( VAR_2 ) + ( ( VAR_3 . METHOD_3 ( ) . VAR_4 ) / INT_1 ) ) , ( ( VAR_5 ) + ( VAR_3 . METHOD_3 ( ) . height ) ) , VAR_6 , ( ( VAR_7 ) - INT_2 ) ) ; VAR_8 . add ( p ) ; TYPE_3 . METHOD_4 ( STRING_1 ) ; VAR_1 = VAR_9 ; } }\n", "fixed": "public void METHOD_1 ( ) { java.lang.System.out.println ( VAR_1 ) ; if ( METHOD_2 ( ) ) { TYPE_1 p = new TYPE_2 ( VAR_2 , ( ( VAR_5 ) - ( VAR_3 . METHOD_3 ( ) . height ) ) , VAR_6 , ( ( - ( VAR_7 ) ) - INT_2 ) ) ; VAR_8 . add ( p ) ; TYPE_3 . METHOD_4 ( STRING_1 ) ; VAR_1 = VAR_9 ; } }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { VAR_1 = STRING_1 ; java.lang.String fileName = VAR_1 + STRING_2 ; java.util.List < java.lang.String > VAR_2 = METHOD_2 ( fileName ) ; java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( java.lang.String VAR_4 : VAR_2 ) { TYPE_1 VAR_5 = new TYPE_1 ( VAR_4 ) ; java.lang.System.out.println ( VAR_4 ) ; } return VAR_3 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { VAR_1 = STRING_1 ; java.lang.String fileName = VAR_1 + STRING_2 ; java.util.List < java.lang.String > VAR_2 = METHOD_2 ( fileName ) ; java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( java.lang.String VAR_4 : VAR_2 ) { TYPE_1 VAR_5 = new TYPE_1 ( VAR_4 ) ; VAR_3 . add ( VAR_5 ) ; } return VAR_3 ; }\n"}
{"problem": "private int METHOD_1 ( ) { int VAR_1 = VAR_2 ; int VAR_3 = - 1 ; for ( int i = 0 ; i < ( VAR_4 . length ) ; i ++ ) { if ( ! ( VAR_5 [ i ] ) ) { if ( VAR_1 > ( VAR_4 [ i ] ) ) { VAR_3 = i ; VAR_1 = VAR_4 [ i ] ; } } } return VAR_3 ; }\n", "fixed": "private int METHOD_1 ( ) { int VAR_1 = VAR_2 ; int VAR_3 = - 1 ; for ( int i = 0 ; i < ( VAR_4 . length ) ; i ++ ) { if ( ! ( VAR_5 [ i ] ) ) { if ( VAR_1 >= ( VAR_4 [ i ] ) ) { VAR_3 = i ; VAR_1 = VAR_4 [ i ] ; } } } return VAR_3 ; }\n"}
{"problem": "public java.lang.Boolean METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { for ( TYPE_2 VAR_2 : VAR_3 ) { try { return VAR_2 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_1 VAR_4 ) { java.lang.System.err.println ( ( STRING_1 + ( VAR_2 . name ( ) ) ) ) ; } } throw new TYPE_1 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) ; }\n", "fixed": "public java.lang.Boolean METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { for ( TYPE_2 VAR_2 : VAR_3 ) { try { return VAR_2 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_1 VAR_4 ) { } } throw new TYPE_1 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) ; }\n"}
{"fixCommitSHA1": "83b016ec7fc76f8f293c25b6438995f135cf8723", "projectName": "javaee-samples.javaee7-samples", "bugType": "Wrong Function Name", "problem": "             .addAsResource(\"META-INF/persistence.xml\")\n             .addAsResource(\"META-INF/load.sql\")\n             .addAsWebInfResource(\n                new StringAsset(beansXml.createAlternatives()\n                     .clazz(MovieBeanAlternative.class.getName()).up().exportAsString()),\n                 beansXml.getDescriptorName());\n         System.out.println(war.toString(true));", "fixed": "             .addAsResource(\"META-INF/persistence.xml\")\n             .addAsResource(\"META-INF/load.sql\")\n             .addAsWebInfResource(\n                new StringAsset(beansXml.getOrCreateAlternatives()\n                     .clazz(MovieBeanAlternative.class.getName()).up().exportAsString()),\n                 beansXml.getDescriptorName());\n         System.out.println(war.toString(true));", "sourceBeforeFix": "beansXml.createAlternatives()", "sourceAfterFix": "beansXml.getOrCreateAlternatives()"}
{"problem": "void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 ) == null ) { VAR_3 = METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( ) { synchronized ( VAR_2 ) { VAR_3 = null ; VAR_2 . METHOD_5 ( VAR_4 ) ; } } } , true ) ; } } }\n", "fixed": "void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) == null ) || ( VAR_1 == null ) ) return ; synchronized ( VAR_2 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 ) == null ) { VAR_3 = METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( ) { synchronized ( VAR_2 ) { VAR_3 = null ; VAR_2 . METHOD_5 ( VAR_4 ) ; } } } , true ) ; } } }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 class . METHOD_3 ( ) , new TYPE_1 ( ) ) ; VAR_1 . METHOD_4 ( VAR_2 class . METHOD_3 ( ) , VAR_3 class . METHOD_3 ( ) , new TYPE_2 ( ) ) ; TYPE_3 response = ( ( TYPE_3 ) ( VAR_1 . METHOD_5 ( VAR_4 , new TYPE_4 ( ) ) ) ) ; TYPE_5 . assertEquals ( STRING_1 , VAR_4 . METHOD_6 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 class . METHOD_3 ( ) , new TYPE_1 ( ) ) ; VAR_1 . METHOD_4 ( VAR_2 class . METHOD_3 ( ) , VAR_3 class . METHOD_3 ( ) , new TYPE_2 ( ) ) ; VAR_1 . METHOD_5 ( VAR_4 , new TYPE_4 ( ) ) ; TYPE_5 . assertEquals ( STRING_1 , VAR_4 . METHOD_6 ( ) ) ; }\n"}
{"problem": "public static void error ( java.lang.String VAR_1 , java.lang.String message ) { TYPE_1 . METHOD_1 ( ) . error ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + message ) ) ; java.lang.System.err.println ( ( ( ( STRING_3 + VAR_1 ) + STRING_2 ) + message ) ) ; }\n", "fixed": "public static void error ( java.lang.String VAR_1 , java.lang.String message ) { java.lang.System.err.println ( ( ( ( STRING_3 + VAR_1 ) + STRING_2 ) + message ) ) ; TYPE_1 . METHOD_1 ( ) . error ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + message ) ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( VAR_2 . getText ( ) . toString ( ) . equals ( STRING_1 ) ) ) { VAR_3 . METHOD_2 ( java.lang.Integer.parseInt ( VAR_2 . getText ( ) . toString ( ) ) ) ; VAR_3 . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( java.lang.Integer.parseInt ( VAR_5 . getText ( ) . toString ( ) ) ) ; } VAR_6 = false ; METHOD_6 ( ) ; VAR_7 . METHOD_7 ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( VAR_2 . getText ( ) . toString ( ) . equals ( STRING_1 ) ) ) { VAR_3 . METHOD_2 ( java.lang.Integer.parseInt ( VAR_2 . getText ( ) . toString ( ) ) ) ; VAR_3 . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( java.lang.Integer.parseInt ( VAR_5 . getText ( ) . toString ( ) ) ) ; } VAR_6 = true ; METHOD_6 ( ) ; VAR_7 . METHOD_7 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String file , TYPE_1 VAR_1 ) { if ( VAR_2 ) java.lang.System.out.println ( STRING_1 ) ; METHOD_2 ( STRING_2 ) ; METHOD_3 ( ) ; VAR_3 = false ; try { METHOD_4 ( ) . METHOD_1 ( file ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_2 ( STRING_3 ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String file , TYPE_1 VAR_1 ) { if ( VAR_2 ) java.lang.System.out.println ( STRING_1 ) ; METHOD_2 ( STRING_2 ) ; METHOD_3 ( ) ; try { METHOD_4 ( ) . METHOD_1 ( file ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_2 ( STRING_3 ) ; } }\n"}
{"problem": "private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { TYPE_4 VAR_3 = METHOD_2 ( VAR_2 , VAR_4 ) ; if ( VAR_3 != null ) { TYPE_5 VAR_5 = VAR_6 . METHOD_3 ( VAR_3 ) ; VAR_7 . METHOD_4 ( VAR_5 ) ; for ( TYPE_1 VAR_8 : VAR_1 ) { TYPE_6 value = getValue ( VAR_2 , VAR_8 ) ; if ( value != null ) { METHOD_5 ( VAR_3 , VAR_8 , value ) ; } } } }\n", "fixed": "private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { TYPE_4 VAR_3 = METHOD_2 ( VAR_2 , VAR_4 ) ; if ( VAR_3 != null ) { for ( TYPE_1 VAR_8 : VAR_1 ) { TYPE_6 value = getValue ( VAR_2 , VAR_8 ) ; if ( value != null ) { METHOD_5 ( VAR_3 , VAR_8 , value ) ; } } } }\n"}
{"problem": "public boolean METHOD_1 ( ) { boolean status = true ; for ( TYPE_1 VAR_1 : this . VAR_2 . METHOD_2 ( ) ) { try { java.lang.String VAR_3 = ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ; this . VAR_3 . execute ( VAR_3 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; } catch ( TYPE_3 VAR_4 ) { TYPE_2 . error ( ( STRING_3 + ( VAR_4 . METHOD_5 ( ) ) ) ) ; status = false ; } } return status ; }\n", "fixed": "public boolean METHOD_1 ( ) { boolean status = true ; for ( TYPE_1 VAR_1 : this . VAR_2 . METHOD_2 ( ) ) { try { java.lang.String VAR_3 = ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ; this . VAR_3 . execute ( VAR_3 ) ; } catch ( TYPE_3 VAR_4 ) { TYPE_2 . error ( ( STRING_3 + ( VAR_4 . METHOD_5 ( ) ) ) ) ; status = false ; } } return status ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( int number ) { java.lang.String VAR_1 = STRING_1 ; while ( number > 0 ) { for ( int i = number ; i >= 0 ; i -- ) { if ( VAR_2 . METHOD_2 ( i ) ) { VAR_1 += ( ( java.lang.String ) ( VAR_2 . get ( i ) ) ) ; number -= i ; } } } return VAR_1 ; }\n", "fixed": "public java.lang.String METHOD_1 ( int number ) { java.lang.String VAR_1 = STRING_1 ; while ( number >= 1 ) { for ( int i = number ; i >= 1 ; i -- ) { if ( number <= 0 ) { break ; } if ( VAR_2 . METHOD_2 ( i ) ) { VAR_1 += ( ( java.lang.String ) ( VAR_2 . get ( i ) ) ) ; number -= i ; } } } return VAR_1 ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; METHOD_4 ( ) . METHOD_5 ( false ) ; int VAR_5 = ( METHOD_6 ( ) . METHOD_7 ( ) . VAR_6 ) & ( VAR_7 ) ; if ( ( VAR_5 == ( VAR_8 ) ) || ( VAR_5 == ( VAR_9 ) ) ) VAR_10 = false ; if ( VAR_10 ) METHOD_8 ( VAR_11 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; METHOD_4 ( ) . METHOD_5 ( false ) ; int VAR_5 = ( METHOD_6 ( ) . METHOD_7 ( ) . VAR_6 ) & ( VAR_7 ) ; if ( ( VAR_5 == ( VAR_8 ) ) || ( VAR_5 == ( VAR_9 ) ) ) if ( VAR_10 ) METHOD_8 ( VAR_11 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { try { VAR_2 . METHOD_1 ( ) ; VAR_3 . METHOD_1 ( ) ; } catch ( java.io.IOException VAR_4 ) { VAR_5 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ; } finally { VAR_1 . METHOD_4 ( ) ; } } VAR_1 = null ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { try { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( ) ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_1 ( ) ; } } catch ( java.io.IOException VAR_4 ) { VAR_5 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ; } finally { VAR_1 . METHOD_4 ( ) ; } } VAR_1 = null ; }\n"}
{"problem": "public final void METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; } else if ( VAR_1 . METHOD_5 ( ) ) { METHOD_3 ( VAR_2 . METHOD_6 ( ) ) ; } else { METHOD_7 ( VAR_2 . METHOD_8 ( METHOD_9 ( ) ) ) ; } }\n", "fixed": "public final void METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; } else if ( VAR_1 . METHOD_5 ( ) ) { METHOD_3 ( VAR_2 . METHOD_6 ( ) ) ; } else { METHOD_7 ( VAR_2 . METHOD_8 ( ) ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) { java.lang.String result = STRING_1 ; for ( java.lang.Integer key : VAR_1 . METHOD_2 ( ) ) result += ( ( ( STRING_2 + key ) + STRING_3 ) + ( VAR_1 . get ( key ) ) ) + STRING_4 ; return result ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { java.lang.String result = STRING_1 ; synchronized ( VAR_1 ) { for ( java.lang.Integer key : VAR_1 . METHOD_2 ( ) ) result += ( ( ( STRING_2 + key ) + STRING_3 ) + ( VAR_1 . get ( key ) ) ) + STRING_4 ; } return result ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 view , int VAR_1 , int VAR_2 , int VAR_3 ) { java.lang.System.out.println ( ( ( ( ( VAR_2 + STRING_1 ) + VAR_3 ) + STRING_1 ) + VAR_1 ) ) ; android.widget.Button VAR_4 = ( ( android.widget.Button ) ( this . getActivity ( ) . METHOD_2 ( VAR_5 . date ) ) ) ; VAR_4 . setText ( ( ( ( ( VAR_2 + STRING_1 ) + VAR_3 ) + STRING_1 ) + VAR_1 ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 view , int VAR_1 , int VAR_2 , int VAR_3 ) { android.widget.Button VAR_4 = ( ( android.widget.Button ) ( this . getActivity ( ) . METHOD_2 ( VAR_5 . date ) ) ) ; VAR_4 . setText ( ( ( ( ( ( VAR_2 + 1 ) + STRING_1 ) + VAR_3 ) + STRING_1 ) + VAR_1 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; context = getActivity ( ) ; VAR_2 = new TYPE_2 ( context ) ; TYPE_3 . METHOD_2 ( this , view ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; if ( VAR_1 != null ) { METHOD_6 ( VAR_1 ) ; state = VAR_1 ; } }\n", "fixed": "public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; TYPE_3 . METHOD_2 ( this , view ) ; context = getActivity ( ) ; VAR_2 = new TYPE_2 ( context ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; if ( VAR_1 != null ) { METHOD_6 ( VAR_1 ) ; state = VAR_1 ; } }\n"}
{"fixCommitSHA1": "b7dfbc0a93d9a7135a1bbb1cc32fd715b2091eae", "projectName": "alibaba.druid", "bugType": "Change Identifier Used", "problem": "         value.setTestWhileIdle(this.isTestWhileIdle());\n         value.setDefaultAutoCommit(this.isDefaultAutoCommit());\n        value.setDefaultReadOnly(this.isDefaultAutoCommit());\n         value.setDefaultTransactionIsolation(this.getDefaultTransactionIsolation());\n         value.setLogicConnectErrorCount(connectErrorCount.getAndSet(0));", "fixed": "         value.setTestWhileIdle(this.isTestWhileIdle());\n         value.setDefaultAutoCommit(this.isDefaultAutoCommit());\n        value.setDefaultReadOnly(this.getDefaultReadOnly());\n         value.setDefaultTransactionIsolation(this.getDefaultTransactionIsolation());\n         value.setLogicConnectErrorCount(connectErrorCount.getAndSet(0));", "sourceBeforeFix": "this.isDefaultAutoCommit()", "sourceAfterFix": "this.getDefaultReadOnly()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "93b1b656013a941b03c51936ea2c95cd7952fbc5", "projectName": "apache.storm", "bugType": "Wrong Function Name", "problem": "     }\n     private IBatchBolt newTransactionalBolt() {\n        return Utils.deserialize(_boltSer, IBatchBolt.class);\n     }\n }", "fixed": "     }\n     private IBatchBolt newTransactionalBolt() {\n        return Utils.javaDeserialize(_boltSer, IBatchBolt.class);\n     }\n }", "sourceBeforeFix": "Utils.deserialize(_boltSer,IBatchBolt.class)", "sourceAfterFix": "Utils.javaDeserialize(_boltSer,IBatchBolt.class)"}
{"fixCommitSHA1": "df2d6b370eaa8d29822b928b0f307cb6918dfe4f", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tload(CustomArgumentResolvers.class);\n \t\tRequestMappingHandlerAdapter adapter = this.context\n \t\t\t\t.getBean(RequestMappingHandlerAdapter.class);\n\t\tassertThat(adapter.getArgumentResolvers()).contains(\n \t\t\t\tthis.context.getBean(\"firstResolver\",\n \t\t\t\t\t\tHandlerMethodArgumentResolver.class),\n \t\t\t\tthis.context.getBean(\"secondResolver\",", "fixed": " \t\tload(CustomArgumentResolvers.class);\n \t\tRequestMappingHandlerAdapter adapter = this.context\n \t\t\t\t.getBean(RequestMappingHandlerAdapter.class);\n\t\tassertThat(adapter.getCustomArgumentResolvers()).contains(\n \t\t\t\tthis.context.getBean(\"firstResolver\",\n \t\t\t\t\t\tHandlerMethodArgumentResolver.class),\n \t\t\t\tthis.context.getBean(\"secondResolver\",", "sourceBeforeFix": "adapter.getArgumentResolvers()", "sourceAfterFix": "adapter.getCustomArgumentResolvers()"}
{"problem": "public void METHOD_1 ( java.lang.Object VAR_1 ) { try { final int VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) . getInt ( STRING_1 ) ; final java.lang.String response = ( ( TYPE_1 ) ( VAR_1 ) ) . getString ( STRING_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( response ) ; METHOD_2 ( VAR_3 ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_3 ( ) ; } METHOD_4 ( new TYPE_3 ( ) { public void METHOD_5 ( ) { VAR_5 . METHOD_6 ( ) ; } } ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.Object VAR_1 ) { try { final int VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) . getInt ( STRING_1 ) ; final java.lang.String response = ( ( TYPE_1 ) ( VAR_1 ) ) . getString ( STRING_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( response ) ; METHOD_2 ( VAR_3 ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_3 ( ) ; } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( \"name\" , VAR_1 ) . METHOD_4 ( ) ; if ( VAR_2 == null ) { return METHOD_5 ( 1 , STRING_1 ) ; } return METHOD_5 ( 0 , VAR_2 . METHOD_6 ( ) ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( \"name\" , VAR_1 ) . METHOD_4 ( ) ; if ( VAR_2 == null ) { return METHOD_5 ( 1 , STRING_1 ) ; } return METHOD_5 ( 0 , VAR_2 . METHOD_1 ( ) ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "89b6af6a05d3c7820afac94137ae105cf800c457", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Less Args", "problem": "                         && typeMods.branchContains(TokenTypes.LITERAL_STATIC);\n         final FieldFrame frame =\n            new FieldFrame(currentFrame, isStaticInnerType, type,\n                 type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF\n                     ? ast.findFirstToken(TokenTypes.IDENT).getText()\n                     : null", "fixed": "                         && typeMods.branchContains(TokenTypes.LITERAL_STATIC);\n         final FieldFrame frame =\n            new FieldFrame(currentFrame, isStaticInnerType,\n                 type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF\n                     ? ast.findFirstToken(TokenTypes.IDENT).getText()\n                     : null", "sourceBeforeFix": "new FieldFrame(null,true,null,null)", "sourceAfterFix": "new FieldFrame(null,true,null)"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.debug(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "fixed": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "sourceBeforeFix": "logger.debug(\"attempting to login\")", "sourceAfterFix": "logger.trace(\"attempting to login\")"}
{"problem": "private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = false ; for ( TYPE_2 VAR_3 : VAR_1 . METHOD_2 ( ) ) { if ( VAR_3 . METHOD_3 ( ) ) { TYPE_3 . METHOD_4 ( VAR_3 ) ; VAR_2 = true ; } } return VAR_2 ; }\n", "fixed": "public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = false ; for ( TYPE_2 VAR_3 : VAR_1 . METHOD_2 ( ) ) { if ( VAR_3 . METHOD_3 ( ) ) { TYPE_3 . METHOD_4 ( VAR_3 ) ; VAR_2 = true ; } } return VAR_2 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "3accf765e68d502ebcd7771252cf92d806a8f302", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "     resourceList.add(pool.acquire());\n     pool.release(resourceList.get(0));\n    manualClock.addTimeMs(1020);\n     Thread.sleep(1000);", "fixed": "     resourceList.add(pool.acquire());\n     pool.release(resourceList.get(0));\n    manualClock.addTimeMs(1001);\n     Thread.sleep(1000);", "sourceBeforeFix": "manualClock.addTimeMs(1020)", "sourceAfterFix": "manualClock.addTimeMs(1001)"}
{"problem": "public static void METHOD_1 ( java.io.InputStream VAR_1 , TYPE_1 out ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; java.io.BufferedReader VAR_3 = new java.io.BufferedReader ( VAR_2 ) ; TYPE_3 VAR_4 = new TYPE_3 ( out ) ; java.lang.String VAR_5 = VAR_3 . METHOD_2 ( ) ; while ( ! ( VAR_5 . equals ( null ) ) ) { VAR_5 = ( VAR_3 . METHOD_2 ( ) ) + \"\\n\" ; VAR_4 . METHOD_3 ( VAR_5 ) ; } VAR_3 . METHOD_4 ( ) ; VAR_4 . METHOD_4 ( ) ; }\n", "fixed": "public static void METHOD_1 ( java.io.InputStream VAR_1 , TYPE_1 out ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; java.io.BufferedReader VAR_3 = new java.io.BufferedReader ( VAR_2 ) ; TYPE_3 VAR_4 = new TYPE_3 ( out ) ; java.lang.String VAR_5 = VAR_3 . METHOD_2 ( ) ; while ( VAR_5 != null ) { VAR_4 . METHOD_3 ( VAR_5 ) ; VAR_5 = VAR_3 . METHOD_2 ( ) ; } VAR_3 . METHOD_4 ( ) ; VAR_4 . METHOD_4 ( ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 < TYPE_1 > VAR_3 = new TYPE_4 ( VAR_2 ) ; if ( ! ( VAR_3 . METHOD_3 ( ) ) ) { throw new TYPE_5 ( STRING_1 ) ; } return VAR_3 . get ( ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_2 ) ; if ( ! ( VAR_3 . METHOD_3 ( ) ) ) { throw new TYPE_5 ( STRING_1 ) ; } return VAR_3 . METHOD_1 ( ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = getContext ( ) . METHOD_2 ( VAR_2 , VAR_3 ) ; java.lang.String VAR_4 = VAR_1 . getString ( VAR_5 , STRING_1 ) ; if ( ( VAR_4 != null ) && ( ( VAR_4 . length ( ) ) > 0 ) ) { TYPE_2 . METHOD_3 ( ) . VAR_4 = VAR_4 ; METHOD_4 ( ) ; } }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = getContext ( ) . METHOD_2 ( VAR_2 , VAR_3 ) ; java.lang.String VAR_4 = VAR_1 . getString ( VAR_5 , STRING_1 ) ; if ( ( VAR_4 != null ) && ( ( VAR_4 . length ( ) ) > 0 ) ) { this . VAR_4 = VAR_4 ; METHOD_4 ( ) ; } }\n"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     public TaskServlet(Iterable<Task> tasks) {\n         final ImmutableMap.Builder<String, Task> builder = ImmutableMap.builder();\n         for (Task task : tasks) {\n            builder.put(\"/tasks/\" + task.getName(), task);\n         }\n         this.tasks = builder.build();\n     }", "fixed": "     public TaskServlet(Iterable<Task> tasks) {\n         final ImmutableMap.Builder<String, Task> builder = ImmutableMap.builder();\n         for (Task task : tasks) {\n            builder.put(\"/\" + task.getName(), task);\n         }\n         this.tasks = builder.build();\n     }", "sourceBeforeFix": "req.getServletPath()", "sourceAfterFix": "req.getPathInfo()"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( this , VAR_2 ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 , new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 VAR_1 , int VAR_5 ) { if ( VAR_5 == 0 ) { METHOD_5 ( new android.content.Intent ( VAR_6 this , VAR_7 class ) ) ; } } } ) . METHOD_6 ( ) ; VAR_1 . show ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( this ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 , new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 VAR_1 , int VAR_5 ) { if ( VAR_5 == 0 ) { METHOD_5 ( new android.content.Intent ( VAR_6 this , VAR_7 class ) ) ; } } } ) . METHOD_6 ( ) ; VAR_1 . show ( ) ; }\n"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 , boolean VAR_4 ) throws java.lang.Exception { super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; if ( VAR_4 ) { TYPE_3 . METHOD_2 ( VAR_5 , STRING_1 ) ; } else { TYPE_3 . METHOD_2 ( VAR_5 , STRING_2 ) ; } if ( ( VAR_6 ) != null ) VAR_6 . METHOD_3 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 , boolean VAR_4 ) throws java.lang.Exception { super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; if ( VAR_4 ) { TYPE_3 . METHOD_2 ( VAR_5 , STRING_1 ) ; if ( ( VAR_6 ) != null ) VAR_6 . METHOD_3 ( ) ; } else { TYPE_3 . METHOD_2 ( VAR_5 , STRING_2 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( ) ; int VAR_1 = METHOD_3 ( ) ; int VAR_2 = ( ( int ) ( ( java.lang.Math.random ( ) ) * ( VAR_3 . size ( ) ) ) ) ; METHOD_4 ( VAR_1 , VAR_2 ) ; METHOD_2 ( ) ; METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( ) ; int VAR_1 = METHOD_3 ( ) ; int VAR_2 = ( ( int ) ( ( java.lang.Math.random ( ) ) * ( VAR_3 . size ( ) ) ) ) ; if ( ( VAR_3 . size ( ) ) > 0 ) { METHOD_4 ( VAR_1 , VAR_2 ) ; } METHOD_2 ( ) ; METHOD_5 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { try { java.lang.System.out.println ( STRING_1 ) ; key . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_4 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { try { java.lang.System.out.println ( STRING_1 ) ; if ( ( key ) != null ) key . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_4 ( ) ; } } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { double VAR_2 = ( VAR_3 ) * ( VAR_4 ) ; for ( int k = 0 ; k < ( VAR_5 ) ; k ++ ) { for ( int VAR_6 = 0 ; VAR_6 < ( VAR_7 ) ; VAR_6 ++ ) { if ( VAR_8 . METHOD_2 ( VAR_6 ) ) { VAR_9 . METHOD_3 ( k , VAR_6 , ( ( VAR_9 . METHOD_4 ( k , VAR_6 ) ) + ( VAR_10 . METHOD_4 ( k , VAR_6 ) ) ) ) ; } } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { double VAR_2 = ( VAR_3 ) * ( VAR_4 ) ; for ( int k = 0 ; k < ( VAR_5 ) ; k ++ ) { for ( int VAR_6 = 0 ; VAR_6 < ( VAR_7 ) ; VAR_6 ++ ) { if ( VAR_8 . METHOD_2 ( VAR_6 ) ) { VAR_9 . METHOD_3 ( VAR_6 , k , ( ( VAR_9 . METHOD_4 ( VAR_6 , k ) ) + ( VAR_10 . METHOD_4 ( k , VAR_6 ) ) ) ) ; } } } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 = this . VAR_2 . METHOD_2 ( this . VAR_3 , VAR_4 ) . METHOD_3 ( TYPE_4 : : METHOD_4 , TYPE_3 : : new , TYPE_3 : : METHOD_5 ) ; TYPE_5 . assertNotNull ( VAR_1 ) ; }\n", "fixed": "public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( ) { TYPE_1 < TYPE_2 , TYPE_3 > result = this . VAR_2 . METHOD_2 ( this . VAR_3 , VAR_4 ) . METHOD_3 ( TYPE_4 : : METHOD_4 , TYPE_3 : : new , TYPE_3 : : METHOD_5 ) ; TYPE_5 . assertNotNull ( result ) ; return result ; }\n"}
{"problem": "private boolean METHOD_1 ( int VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; boolean VAR_3 = false ; if ( VAR_1 == ( VAR_4 ) ) { VAR_5 = VAR_6 . getText ( ) . toString ( ) ; if ( ( VAR_5 . trim ( ) . length ( ) ) > 0 ) { METHOD_3 ( VAR_5 ) ; VAR_3 = true ; METHOD_4 ( ) ; } else { VAR_6 . setText ( STRING_2 ) ; } } return VAR_3 ; }\n", "fixed": "private boolean METHOD_1 ( int VAR_1 ) { boolean VAR_3 = false ; if ( VAR_1 == ( VAR_4 ) ) { VAR_5 = VAR_6 . getText ( ) . toString ( ) ; if ( ( VAR_5 . trim ( ) . length ( ) ) > 0 ) { METHOD_3 ( VAR_5 ) ; VAR_3 = true ; METHOD_4 ( ) ; } else { VAR_6 . setText ( STRING_2 ) ; } } return VAR_3 ; }\n"}
{"problem": "private void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 , final TYPE_3 VAR_3 , final java.lang.Throwable VAR_4 ) { if ( VAR_1 != null ) VAR_1 . METHOD_2 ( VAR_4 ) ; try { if ( VAR_1 != null ) VAR_1 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_5 ) { TYPE_4 . error ( TYPE_5 . METHOD_4 ( VAR_6 , VAR_2 . METHOD_5 ( ) , VAR_2 . METHOD_6 ( ) , VAR_2 . METHOD_7 ( ) ) , STRING_1 , VAR_5 ) ; } }\n", "fixed": "private void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 , final TYPE_3 VAR_3 , final java.lang.Throwable VAR_4 ) { try { if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( VAR_4 ) ; VAR_1 . METHOD_3 ( ) ; } } catch ( java.io.IOException VAR_5 ) { TYPE_4 . error ( TYPE_5 . METHOD_4 ( VAR_6 , VAR_2 . METHOD_5 ( ) , VAR_2 . METHOD_6 ( ) , VAR_2 . METHOD_7 ( ) ) , STRING_1 , VAR_5 ) ; } }\n"}
{"problem": "void METHOD_1 ( java.util.List < TYPE_1 > list ) { if ( ( list == null ) || ( ( list . size ( ) ) == 0 ) ) { return ; } METHOD_2 ( ) ; for ( int i = 0 , size = list . size ( ) ; i < size ; i ++ ) { if ( list . get ( i ) . METHOD_3 ( ) ) { METHOD_4 ( i ) ; } } }\n", "fixed": "void METHOD_1 ( java.util.List < TYPE_1 > list ) { if ( ( list == null ) || ( ( list . size ( ) ) == 0 ) ) { return ; } for ( int i = 0 , size = list . size ( ) ; i < size ; i ++ ) { if ( list . get ( i ) . METHOD_3 ( ) ) { METHOD_4 ( i ) ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_4 = STRING_1 ; try { TYPE_1 VAR_5 = VAR_6 . METHOD_3 ( ) . list ( ) . METHOD_4 ( java.lang.String.format ( STRING_2 , VAR_2 ) ) . execute ( ) ; VAR_4 = METHOD_5 ( VAR_5 , STRING_3 ) ; } catch ( java.io.IOException VAR_7 ) { } return VAR_4 ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_4 = STRING_1 ; try { TYPE_1 VAR_5 = VAR_6 . METHOD_3 ( ) . list ( ) . METHOD_4 ( java.lang.String.format ( STRING_2 , VAR_2 ) ) . execute ( ) ; VAR_4 = METHOD_5 ( VAR_5 , STRING_3 ) ; } catch ( java.io.IOException VAR_7 ) { } return VAR_4 ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGitHubEndpointBuilder\n             extends\n                 AdvancedGitHubEndpointConsumerBuilder, AdvancedGitHubEndpointProducerBuilder {\n         default GitHubEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGitHubEndpointBuilder\n             extends\n                 AdvancedGitHubEndpointConsumerBuilder, AdvancedGitHubEndpointProducerBuilder {\n         default GitHubEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private java.lang.Integer METHOD_1 ( java.lang.String VAR_1 ) { java.lang.Integer VAR_2 = 0 ; TYPE_1 VAR_3 = this . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; VAR_3 . METHOD_4 ( ) ; if ( ( VAR_3 . METHOD_5 ( ) ) > 0 ) { VAR_2 = ( ( java.lang.Integer ) ( VAR_3 . first ( ) . METHOD_6 ( STRING_3 ) ) ) ; } return VAR_2 ; }\n", "fixed": "public java.lang.Integer METHOD_1 ( java.lang.String VAR_1 ) { java.lang.Integer VAR_2 = 0 ; TYPE_1 VAR_3 = this . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; VAR_3 . METHOD_4 ( ) ; if ( ( VAR_3 . METHOD_5 ( ) ) > 0 ) { VAR_2 = ( ( java.lang.Integer ) ( VAR_3 . first ( ) . METHOD_6 ( STRING_3 ) ) ) ; } return VAR_2 ; }\n"}
{"problem": "public static TYPE_1 error ( java.lang.String VAR_1 , java.lang.Throwable VAR_2 ) { TYPE_1 VAR_3 = TYPE_1 . error ( VAR_1 , VAR_2 ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_1 ) ; VAR_4 . METHOD_1 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_4 . build ( ) ) ; return VAR_3 ; }\n", "fixed": "public static TYPE_1 error ( java.lang.String VAR_1 , java.lang.Throwable VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_2 ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_1 ) ; VAR_4 . METHOD_1 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_4 . build ( ) ) ; return VAR_3 ; }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; if ( TYPE_2 . METHOD_3 ( ) ) { VAR_2 = null ; } else { METHOD_4 ( VAR_2 ) ; if ( VAR_1 ) METHOD_5 ( ) . METHOD_6 ( true ) ; } return VAR_2 ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; if ( TYPE_2 . METHOD_3 ( ) ) { VAR_2 = null ; } else { METHOD_4 ( VAR_2 ) ; if ( VAR_1 && ( ! ( TYPE_2 . METHOD_3 ( ) ) ) ) { METHOD_5 ( ) . METHOD_6 ( true ) ; } } return VAR_2 ; }\n"}
{"fixCommitSHA1": "d4394e3727c822cd62e1e916335493df61ee409d", "projectName": "alibaba.fastjson", "bugType": "More Specific If", "problem": "             mw.visitLabel(forItemNullElse_);\n             Label forItemClassIfEnd_ = new Label(), forItemClassIfElse_ = new Label();\n            if (elementClass != null) {\n                 mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\n                 mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Object\", \"getClass\", \"()Ljava/lang/Class;\");\n                 mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(elementClass)));", "fixed": "             mw.visitLabel(forItemNullElse_);\n             Label forItemClassIfEnd_ = new Label(), forItemClassIfElse_ = new Label();\n            if (elementClass != null && Modifier.isPublic(elementClass.getModifiers())) {\n                 mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\n                 mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Object\", \"getClass\", \"()Ljava/lang/Class;\");\n                 mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(elementClass)));", "sourceBeforeFix": "elementClass != null", "sourceAfterFix": "elementClass != null && Modifier.isPublic(elementClass.getModifiers())"}
{"problem": "public static int delete ( int VAR_1 , int VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; try { TYPE_1 VAR_4 = TYPE_2 . METHOD_1 ( ) . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( 1 , VAR_1 ) ; VAR_4 . METHOD_3 ( INT_1 , VAR_2 ) ; return VAR_4 . METHOD_4 ( ) ; } catch ( java.lang.Exception VAR_5 ) { return 0 ; } }\n", "fixed": "public static int delete ( int VAR_1 , int VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; try { TYPE_1 VAR_4 = TYPE_2 . METHOD_1 ( ) . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( 1 , VAR_2 ) ; VAR_4 . METHOD_3 ( INT_1 , VAR_1 ) ; return VAR_4 . METHOD_4 ( ) ; } catch ( java.lang.Exception VAR_5 ) { return 0 ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; for ( int i = 0 ; i < ( n ) ; i ++ ) { if ( ( ( VAR_2 [ i ] [ 0 ] ) != 0 ) && ( ( VAR_2 [ i ] [ 1 ] ) != 0 ) ) { VAR_1 . METHOD_2 ( i , 0 , i , 1 ) ; } } return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; for ( int i = 0 ; i < ( n ) ; i ++ ) { if ( ( ( VAR_2 [ i ] [ 0 ] ) != 0 ) && ( ( VAR_2 [ i ] [ 1 ] ) != 0 ) ) { VAR_1 . METHOD_2 ( i , 0 , i , 1 ) ; break ; } } return VAR_1 ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"problem": "public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int position , TYPE_2 output ) { try { long VAR_3 = type . METHOD_2 ( VAR_2 , position ) ; buffer . METHOD_3 ( 0 ) ; VAR_4 . METHOD_4 ( buffer , VAR_3 ) ; for ( int index = 0 ; index < ( buffer . length ( ) ) ; index ++ ) { output . METHOD_5 ( buffer . METHOD_6 ( index ) ) ; } } catch ( java.io.IOException VAR_5 ) { throw TYPE_3 . METHOD_7 ( VAR_5 ) ; } }\n", "fixed": "public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int position , TYPE_2 output ) { long VAR_3 = type . METHOD_2 ( VAR_2 , position ) ; buffer . METHOD_3 ( 0 ) ; VAR_4 . METHOD_4 ( buffer , VAR_3 ) ; for ( int index = 0 ; index < ( buffer . length ( ) ) ; index ++ ) { output . METHOD_5 ( buffer . METHOD_6 ( index ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; if ( ( TYPE_2 . METHOD_4 ( VAR_1 . METHOD_2 ( ) ) ) && ( TYPE_2 . METHOD_5 ( VAR_1 . METHOD_2 ( ) ) ) ) { TYPE_2 . METHOD_6 ( VAR_1 . METHOD_2 ( ) ) ; return ; } TYPE_2 . METHOD_7 ( VAR_1 . METHOD_2 ( ) , ( TYPE_2 . METHOD_4 ( VAR_1 . METHOD_2 ( ) ) ? VAR_3 : VAR_4 ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( TYPE_2 . METHOD_4 ( VAR_1 . METHOD_2 ( ) ) ) && ( TYPE_2 . METHOD_5 ( VAR_1 . METHOD_2 ( ) ) ) ) { TYPE_2 . METHOD_6 ( VAR_1 . METHOD_2 ( ) ) ; return ; } TYPE_2 . METHOD_7 ( VAR_1 . METHOD_2 ( ) , ( TYPE_2 . METHOD_4 ( VAR_1 . METHOD_2 ( ) ) ? VAR_3 : VAR_4 ) ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String n ) throws java.io.IOException { int i = METHOD_2 ( n ) ; VAR_1 . METHOD_3 ( n , false ) ; VAR_1 . attribute ( STRING_1 , ( STRING_2 + ( java.lang.Integer.toString ( i ) ) ) ) ; VAR_1 . element ( STRING_3 , null ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String n ) throws java.io.IOException { int i = METHOD_2 ( n ) ; if ( i >= 0 ) { VAR_1 . METHOD_3 ( n , false ) ; VAR_1 . attribute ( STRING_1 , ( STRING_2 + ( java.lang.Integer.toString ( i ) ) ) ) ; VAR_1 . element ( STRING_3 , null ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; VAR_2 . setText ( VAR_1 . getName ( ) ) ; java.lang.String VAR_3 = METHOD_2 ( ) ; VAR_4 . setValue ( VAR_3 ) ; VAR_5 . setText ( java.lang.Double . toString ( VAR_1 . METHOD_3 ( ) ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; VAR_2 . setText ( VAR_1 . getName ( ) ) ; java.lang.String VAR_3 = METHOD_2 ( ) ; VAR_4 . setValue ( VAR_3 ) ; VAR_5 . setText ( java.lang.Integer.toString ( VAR_1 . METHOD_3 ( ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { try { if ( ( new java.net.URL ( VAR_1 . getText ( ) ) . METHOD_2 ( ) ) != STRING_1 ) VAR_2 . METHOD_3 ( METHOD_4 ( new java.io.File ( new java.net.URL ( VAR_1 . getText ( ) ) . METHOD_2 ( ) ) ) ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { if ( ! ( new java.net.URL ( VAR_1 . getText ( ) ) . METHOD_2 ( ) . equals ( STRING_1 ) ) ) VAR_2 . METHOD_3 ( METHOD_4 ( new java.io.File ( new java.net.URL ( VAR_1 . getText ( ) ) . METHOD_2 ( ) ) ) ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,value)"}
{"problem": "public static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String message ) { TYPE_1 . METHOD_2 ( ) . METHOD_1 ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + message ) ) ; java.lang.System.err.println ( ( ( ( STRING_3 + VAR_1 ) + STRING_2 ) + message ) ) ; }\n", "fixed": "public static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String message ) { java.lang.System.err.println ( ( ( ( STRING_3 + VAR_1 ) + STRING_2 ) + message ) ) ; TYPE_1 . METHOD_2 ( ) . METHOD_1 ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + message ) ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; this . VAR_2 = false ; TYPE_2 VAR_3 = new TYPE_2 ( this , this . VAR_4 ) ; this . VAR_5 = TYPE_3 . METHOD_3 ( this , this . VAR_4 ) ; this . VAR_6 = VAR_3 . METHOD_4 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; this . VAR_2 = true ; TYPE_2 VAR_3 = new TYPE_2 ( this , this . VAR_4 ) ; this . VAR_5 = TYPE_3 . METHOD_3 ( this , this . VAR_4 ) ; this . VAR_6 = VAR_3 . METHOD_4 ( ) ; }\n"}
{"problem": "private int METHOD_1 ( ) { int VAR_1 = 0 ; for ( int VAR_2 = 1 ; VAR_2 < ( METHOD_2 ( ) . size ( ) ) ; VAR_2 ++ ) { TYPE_1 VAR_3 = METHOD_2 ( ) . get ( VAR_2 ) ; VAR_1 = VAR_1 + ( VAR_3 . METHOD_3 ( ) ) ; } return VAR_1 ; }\n", "fixed": "private int METHOD_1 ( ) { int VAR_1 = 0 ; for ( int VAR_2 = 0 ; VAR_2 < ( METHOD_2 ( ) . size ( ) ) ; VAR_2 ++ ) { TYPE_1 VAR_3 = METHOD_2 ( ) . get ( VAR_2 ) ; VAR_1 = VAR_1 + ( VAR_3 . METHOD_3 ( ) ) ; } return VAR_1 ; }\n"}
{"problem": "private void METHOD_1 ( java.lang.String [ ] VAR_1 , java.lang.String [ ] VAR_2 , java.lang.String [ ] names , TYPE_1 [ ] VAR_3 ) { for ( int i = 0 ; i < ( VAR_3 . length ) ; i ++ ) { METHOD_2 ( VAR_1 [ pattern [ i ] ] , VAR_2 [ VAR_4 [ i ] ] , names [ i ] , VAR_3 [ i ] ) ; } VAR_5 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( STRING_1 ) ; new TYPE_2 ( VAR_3 ) ; }\n", "fixed": "private void METHOD_1 ( java.lang.String [ ] VAR_1 , java.lang.String [ ] VAR_2 , java.lang.String [ ] names , TYPE_1 [ ] VAR_3 ) { for ( int i = 0 ; i < ( VAR_3 . length ) ; i ++ ) { METHOD_2 ( VAR_1 [ pattern [ i ] ] , VAR_2 [ VAR_4 [ i ] ] , names [ i ] , VAR_3 [ i ] ) ; } VAR_5 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( STRING_1 ) ; new TYPE_2 ( VAR_3 , VAR_6 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; VAR_1 . METHOD_4 ( METHOD_5 ( ) ) ; TYPE_2 VAR_2 = VAR_3 . METHOD_6 ( TYPE_3 . METHOD_7 ( VAR_1 , VAR_4 ) ) ; TYPE_4 . assertThat ( VAR_2 , TYPE_5 . METHOD_8 ( TYPE_5 . METHOD_9 ( VAR_5 class ) ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; VAR_1 . METHOD_4 ( METHOD_5 ( ) ) ; TYPE_2 VAR_2 = VAR_3 . METHOD_6 ( TYPE_3 . METHOD_7 ( VAR_1 ) ) ; TYPE_4 . assertThat ( VAR_2 , TYPE_5 . METHOD_8 ( TYPE_5 . METHOD_9 ( VAR_5 class ) ) ) ; }\n"}
{"problem": "void METHOD_1 ( int VAR_1 , long VAR_2 ) { long VAR_3 = TYPE_1 . METHOD_2 ( ) ; VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_3 ( VAR_5 , VAR_1 , VAR_2 , ( ( METHOD_4 ( ) ) * INT_1 ) ) ; VAR_6 = TYPE_3 . METHOD_5 ( VAR_3 ) ; VAR_7 . METHOD_6 ( STRING_1 , VAR_4 . getClass ( ) . METHOD_7 ( ) , VAR_6 , ( ( ( ( double ) ( VAR_4 . METHOD_8 ( ) ) ) / VAR_2 ) * INT_2 ) , VAR_2 ) ; }\n", "fixed": "void METHOD_1 ( int VAR_1 , long VAR_2 ) { long VAR_3 = TYPE_1 . METHOD_2 ( ) ; VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_3 ( VAR_5 , VAR_1 , VAR_2 , METHOD_4 ( ) ) ; VAR_6 = TYPE_3 . METHOD_5 ( VAR_3 ) ; VAR_7 . METHOD_6 ( STRING_1 , VAR_4 . getClass ( ) . METHOD_7 ( ) , VAR_6 , ( ( ( ( double ) ( VAR_4 . METHOD_8 ( ) ) ) / VAR_2 ) * INT_2 ) , VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { VAR_3 . METHOD_2 ( ) ; try { java.util.Collection < TYPE_1 > VAR_4 = VAR_5 . get ( VAR_2 ) ; if ( VAR_4 == null ) { VAR_4 = new TYPE_2 < > ( ) ; VAR_5 . put ( VAR_2 , VAR_4 ) ; } VAR_4 . add ( VAR_1 ) ; } finally { VAR_3 . METHOD_3 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { if ( VAR_2 == null ) throw new java.lang.NullPointerException ( ) ; VAR_3 . METHOD_2 ( ) ; try { java.util.Collection < TYPE_1 > VAR_4 = VAR_5 . get ( VAR_2 ) ; if ( VAR_4 == null ) { VAR_4 = new TYPE_2 < > ( ) ; VAR_5 . put ( VAR_2 , VAR_4 ) ; } VAR_4 . add ( VAR_1 ) ; } finally { VAR_3 . METHOD_3 ( ) ; } }\n"}
{"problem": "public static void METHOD_1 ( TYPE_1 [ ] a , int start , int end ) { for ( int i = start + 1 ; i <= end ; i ++ ) { for ( int j = i ; j > 0 ; j -- ) { if ( ( a [ ( j - 1 ) ] . compareTo ( a [ j ] ) ) > 0 ) { TYPE_2 . METHOD_2 ( a , ( j - 1 ) , j ) ; } else break ; } } }\n", "fixed": "public static void METHOD_1 ( TYPE_1 [ ] a , int start , int end ) { for ( int i = start + 1 ; i < ( end + 1 ) ; i ++ ) { for ( int j = i ; j > 0 ; j -- ) { if ( ( a [ ( j - 1 ) ] . compareTo ( a [ j ] ) ) > 0 ) { TYPE_2 . METHOD_2 ( a , ( j - 1 ) , j ) ; } else break ; } } }\n"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 . equals ( STRING_1 ) ) { METHOD_2 ( VAR_2 ) ; } else if ( VAR_1 . equals ( STRING_2 ) ) { METHOD_2 ( VAR_3 ) ; } else if ( VAR_1 . equals ( STRING_3 ) ) { METHOD_2 ( VAR_4 ) ; } else { throw new TYPE_1 ( STRING_4 ) ; } }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 . equals ( STRING_2 ) ) { METHOD_2 ( VAR_3 ) ; } else if ( VAR_1 . equals ( STRING_3 ) ) { METHOD_2 ( VAR_4 ) ; } else { throw new TYPE_1 ( STRING_4 ) ; } }\n"}
{"problem": "private int METHOD_1 ( int i , int j ) { if ( i < 0 ) { return 0 ; } else if ( i >= ( n ) ) { return ( VAR_1 ) - 1 ; } return ( ( ( n ) * i ) + j ) + 1 ; }\n", "fixed": "private int METHOD_1 ( int i , int j ) { if ( i < 1 ) { return 0 ; } else if ( i > ( n ) ) { return ( VAR_1 ) - 1 ; } return ( ( ( n ) * ( i - 1 ) ) + ( j - 1 ) ) + 1 ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Set < TYPE_2 > VAR_2 = VAR_1 . METHOD_2 ( ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; } java.util.Set < TYPE_2 > VAR_4 = new java.util.HashSet ( this . METHOD_2 ( ) ) ; for ( TYPE_2 VAR_3 : VAR_4 ) { VAR_4 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; } VAR_2 . METHOD_5 ( VAR_4 ) ; return ! ( VAR_2 . isEmpty ( ) ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Set < TYPE_2 > VAR_2 = new java.util.HashSet < > ( VAR_1 . METHOD_2 ( ) ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; } java.util.Set < TYPE_2 > VAR_4 = new java.util.HashSet ( this . METHOD_2 ( ) ) ; for ( TYPE_2 VAR_3 : VAR_4 ) { VAR_4 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; } VAR_2 . METHOD_5 ( VAR_4 ) ; return ! ( VAR_2 . isEmpty ( ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( android.content.Context context ) { super . METHOD_1 ( context ) ; if ( context instanceof TYPE_1 ) { VAR_1 = ( ( TYPE_1 ) ( context ) ) ; } else { throw new TYPE_2 ( ( ( context . toString ( ) ) + STRING_1 ) ) ; } }\n", "fixed": "public void METHOD_1 ( android.content.Context context ) { this . context = context ; super . METHOD_1 ( context ) ; if ( context instanceof TYPE_1 ) { VAR_1 = ( ( TYPE_1 ) ( context ) ) ; } else { throw new TYPE_2 ( ( ( context . toString ( ) ) + STRING_1 ) ) ; } }\n"}
{"problem": "private boolean METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = null ; boolean type = false ; VAR_1 . toUpperCase ( ) ; for ( TYPE_1 obj : TYPE_1 . values ( ) ) { if ( obj . toString ( ) . equals ( VAR_1 ) ) { type = true ; VAR_2 = obj ; } } return type ; }\n", "fixed": "private boolean METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = null ; boolean type = false ; VAR_1 = VAR_1 . toUpperCase ( ) ; for ( TYPE_1 obj : TYPE_1 . values ( ) ) { if ( obj . toString ( ) . equals ( VAR_1 ) ) { type = true ; VAR_2 = obj ; } } return type ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "TYPE_1 < ? > METHOD_1 ( ) { TYPE_2 . info ( STRING_1 ) ; java.util.List < TYPE_3 > VAR_1 = VAR_2 . METHOD_1 ( ) ; if ( VAR_1 == null ) { TYPE_2 . error ( STRING_2 ) ; return new TYPE_1 ( new TYPE_4 ( STRING_2 ) , VAR_3 ) ; } return new TYPE_1 ( VAR_1 , VAR_4 ) ; }\n", "fixed": "TYPE_1 < ? > METHOD_1 ( ) { TYPE_2 . info ( STRING_1 ) ; java.util.List < TYPE_3 > VAR_1 = VAR_2 . METHOD_1 ( ) ; if ( VAR_1 . isEmpty ( ) ) { TYPE_2 . error ( STRING_2 ) ; return new TYPE_1 ( new TYPE_4 ( STRING_2 ) , VAR_3 ) ; } return new TYPE_1 ( VAR_1 , VAR_4 ) ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String name ) { java.lang.String VAR_1 = name . toUpperCase ( ) ; for ( TYPE_1 VAR_2 : TYPE_2 . METHOD_2 ( VAR_3 class ) ) { if ( VAR_4 . equals ( VAR_1 ) ) { return VAR_2 ; } } return null ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String name ) { if ( name == null ) { return null ; } java.lang.String VAR_1 = name . toUpperCase ( ) ; for ( TYPE_1 VAR_2 : TYPE_2 . METHOD_2 ( VAR_3 class ) ) { if ( VAR_4 . toUpperCase ( ) . equals ( VAR_1 ) ) { return VAR_2 ; } } return null ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { VAR_2 = VAR_1 ; if ( ( ( VAR_1 == null ) || ( ( VAR_1 . length ) <= 0 ) ) || ( ( VAR_1 [ 0 ] ) == null ) ) { VAR_3 . METHOD_2 ( null ) ; } else { VAR_3 . METHOD_2 ( VAR_1 [ 0 ] ) ; } TYPE_2 . METHOD_3 ( ) ; }\n", "fixed": "protected void METHOD_2 ( TYPE_1 [ ] VAR_1 ) { if ( ( ( VAR_1 == null ) || ( ( VAR_1 . length ) <= 0 ) ) || ( ( VAR_1 [ 0 ] ) == null ) ) { VAR_3 . METHOD_2 ( null ) ; } else { VAR_3 . METHOD_2 ( VAR_1 [ 0 ] ) ; } }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.String , java.lang.Object > parameters = new java.util.HashMap < java.lang.String , java.lang.Object > ( INT_1 ) ; parameters . put ( \"id\" , VAR_1 . getId ( ) ) ; parameters . put ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; this . VAR_2 . execute ( parameters ) ; return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.String , java.lang.Object > parameters = new java.util.HashMap < java.lang.String , java.lang.Object > ( INT_1 ) ; parameters . put ( \"id\" , VAR_1 . getId ( ) ) ; parameters . put ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; this . VAR_2 . execute ( parameters ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "d222fc981c938bd3543ee61f22422d20efcdcd94", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(800);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(800)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"problem": "private int METHOD_1 ( ) throws java.io.IOException { java.io.BufferedReader VAR_1 = new java.io.BufferedReader ( new TYPE_1 ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) ) ; int VAR_5 = 0 ; java.lang.String line ; while ( ( line = VAR_1 . METHOD_3 ( ) ) != null ) { if ( ! ( line . contains ( STRING_1 ) ) ) { VAR_5 ++ ; } } return VAR_5 ; }\n", "fixed": "private int METHOD_1 ( ) throws java.io.IOException { java.io.BufferedReader VAR_1 = new java.io.BufferedReader ( new TYPE_1 ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) ) ; int VAR_5 = 0 ; java.lang.String line ; while ( ( line = VAR_1 . METHOD_3 ( ) ) != null ) { if ( line . contains ( STRING_1 ) ) { VAR_5 ++ ; } } return VAR_5 ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String title , java.lang.String VAR_1 , int VAR_2 ) throws TYPE_1 { boolean result = false ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( title ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; TYPE_3 VAR_4 = TYPE_3 . METHOD_5 ( ) ; TYPE_4 VAR_5 = VAR_4 . METHOD_6 ( ) ; try { result = VAR_5 . METHOD_7 ( VAR_3 ) ; } catch ( TYPE_5 VAR_6 ) { throw new TYPE_1 ( STRING_1 , VAR_6 ) ; } return result ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_2 VAR_3 ) throws TYPE_1 { boolean result = false ; TYPE_3 VAR_4 = TYPE_3 . METHOD_5 ( ) ; TYPE_4 VAR_5 = VAR_4 . METHOD_6 ( ) ; try { result = VAR_5 . METHOD_7 ( VAR_3 ) ; } catch ( TYPE_5 VAR_6 ) { throw new TYPE_1 ( STRING_1 , VAR_6 ) ; } return result ; }\n"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"problem": "public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_2 obj = new TYPE_2 ( ) ; TYPE_3 t = new TYPE_3 ( VAR_1 , METHOD_2 ( ) , true ) ; obj . put ( STRING_1 , TYPE_4 . METHOD_3 ( t . METHOD_4 ( ) ) ) ; return TYPE_1 . METHOD_5 ( obj . METHOD_6 ( ) ) . build ( ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_2 obj = new TYPE_2 ( ) ; TYPE_3 t = new TYPE_3 ( VAR_1 , METHOD_2 ( ) , true ) ; obj . put ( STRING_1 , t . METHOD_4 ( ) ) ; return TYPE_1 . METHOD_5 ( obj . METHOD_6 ( ) ) . build ( ) ; }\n"}
{"problem": "static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) { return false ; } java.util.Date VAR_2 = TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; java.util.Date VAR_3 = new java.util.Date ( ) ; return ! ( VAR_2 . METHOD_5 ( VAR_3 ) ) ; }\n", "fixed": "static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) { return false ; } java.util.Date VAR_2 = TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; java.util.Date VAR_3 = new java.util.Date ( ) ; return ( VAR_2 == null ) || ( ! ( VAR_2 . METHOD_5 ( VAR_3 ) ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private java.lang.Object execute ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 context ) { TYPE_2 VAR_3 = VAR_2 [ VAR_4 ] ; for ( TYPE_4 < TYPE_2 , java.lang.String > VAR_5 : VAR_6 ) { TYPE_2 VAR_7 = VAR_5 . first ( ) ; if ( ( VAR_7 == null ) || ( VAR_7 . equals ( VAR_3 ) ) ) { return context . METHOD_1 ( VAR_5 . METHOD_2 ( ) ) ; } } return context . METHOD_1 ( VAR_8 ) ; }\n", "fixed": "private java.lang.Object execute ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 context ) { TYPE_2 VAR_3 = VAR_2 [ VAR_4 ] ; for ( TYPE_4 < TYPE_2 , java.lang.String > VAR_5 : VAR_6 ) { TYPE_2 VAR_7 = VAR_5 . first ( ) ; if ( VAR_7 . equals ( VAR_3 ) ) { return context . METHOD_1 ( VAR_5 . METHOD_2 ( ) ) ; } } return context . METHOD_1 ( VAR_8 ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( VAR_2 . getText ( ) . toString ( ) ) ) { ( VAR_3 ) ++ ; VAR_4 . setText ( VAR_5 ) ; VAR_4 . METHOD_3 ( TYPE_1 . getColor ( this , VAR_6 ) ) ; } else { VAR_4 . setText ( VAR_7 ) ; VAR_4 . METHOD_3 ( TYPE_1 . getColor ( this , VAR_8 ) ) ; } ( VAR_9 ) ++ ; VAR_2 . setEnabled ( false ) ; VAR_10 . setEnabled ( false ) ; }\n", "fixed": "private void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( VAR_2 . getText ( ) . toString ( ) ) ) { ( VAR_3 ) ++ ; VAR_4 . setText ( VAR_5 ) ; VAR_4 . METHOD_3 ( TYPE_1 . getColor ( this , VAR_6 ) ) ; } else { VAR_4 . setText ( VAR_7 ) ; VAR_4 . METHOD_3 ( TYPE_1 . getColor ( this , VAR_8 ) ) ; } ( VAR_9 ) ++ ; VAR_10 . setEnabled ( false ) ; }\n"}
{"problem": "private void init ( ) { this . METHOD_1 ( new TYPE_1 ( ) { public void METHOD_2 ( TYPE_2 VAR_1 ) { VAR_2 . METHOD_3 ( ) ; } } ) ; this . METHOD_4 ( new TYPE_3 ( ) { public void METHOD_5 ( TYPE_4 VAR_1 ) { VAR_2 . METHOD_6 ( ) ; } } ) ; this . METHOD_7 ( null ) ; this . METHOD_8 ( VAR_3 ) ; VAR_4 = true ; }\n", "fixed": "private void init ( ) { this . METHOD_1 ( new TYPE_1 ( ) { public void METHOD_2 ( TYPE_2 VAR_1 ) { VAR_2 . METHOD_3 ( ) ; } } ) ; this . METHOD_4 ( new TYPE_3 ( ) { public void METHOD_5 ( TYPE_4 VAR_1 ) { VAR_2 . METHOD_6 ( ) ; } } ) ; this . METHOD_7 ( null ) ; this . METHOD_8 ( VAR_3 ) ; VAR_4 = false ; }\n"}
{"problem": "public void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . get ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; VAR_4 . put ( VAR_2 . getId ( ) , VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . get ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; VAR_4 . put ( VAR_1 , VAR_3 ) ; }\n"}
{"problem": "private static void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { TYPE_1 c = VAR_1 . get ( i ) ; if ( ( VAR_2 ) != i ) { throw new TYPE_2 ( ( ( ( STRING_1 + i ) + STRING_2 ) + ( c . id ) ) ) ; } } }\n", "fixed": "private static void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { final int size = VAR_1 . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { final TYPE_1 c = VAR_1 . get ( i ) ; if ( ( VAR_2 ) != i ) { throw new TYPE_2 ( ( ( ( STRING_1 + i ) + STRING_2 ) + ( c . id ) ) ) ; } } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( false ) ; VAR_2 . METHOD_3 ( new TYPE_3 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 ) ) ; VAR_2 . METHOD_4 ( false ) ; VAR_2 . METHOD_5 ( null ) ; VAR_3 . setText ( VAR_2 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( false ) ; VAR_2 . METHOD_3 ( new TYPE_3 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 ) ) ; VAR_2 . METHOD_4 ( false ) ; VAR_2 . METHOD_5 ( null ) ; if ( ( VAR_2 . METHOD_6 ( ) ) != null ) VAR_3 . setText ( VAR_2 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }\n"}
{"problem": "private void METHOD_1 ( ) throws java.io.IOException { int VAR_1 = ( VAR_2 . METHOD_2 ( ) ) ? VAR_3 : VAR_4 ; VAR_5 . METHOD_3 ( ) ; try { VAR_6 . METHOD_4 ( VAR_7 , 0 , VAR_2 . METHOD_5 ( ) ) ; } catch ( TYPE_1 VAR_8 ) { return ; } METHOD_6 ( ) ; if ( ( VAR_9 ) == ( VAR_10 ) ) { java.util.List < TYPE_2 > VAR_11 = new java.util.ArrayList < TYPE_2 > ( ) ; METHOD_7 ( VAR_1 , VAR_11 ) ; } }\n", "fixed": "private void METHOD_1 ( ) throws java.io.IOException { int VAR_1 = ( VAR_2 . METHOD_2 ( ) ) ? VAR_3 : VAR_4 ; VAR_5 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 , 0 , VAR_2 . METHOD_5 ( ) ) ; METHOD_6 ( ) ; if ( ( VAR_9 ) == ( VAR_10 ) ) { java.util.List < TYPE_2 > VAR_11 = new java.util.ArrayList < TYPE_2 > ( ) ; METHOD_7 ( VAR_1 , VAR_11 ) ; } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( final int VAR_1 ) { for ( TYPE_1 VAR_2 : TYPE_1 . values ( ) ) { if ( ( VAR_2 . METHOD_2 ( ) ) == VAR_1 ) { return VAR_2 ; } } if ( ( TYPE_2 . METHOD_1 ( VAR_1 ) ) == ( VAR_3 ) ) return null ; else return VAR_4 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( final int VAR_1 ) { for ( TYPE_1 VAR_2 : TYPE_1 . values ( ) ) { if ( ( VAR_2 . METHOD_2 ( ) ) == VAR_1 ) { return VAR_2 ; } } return ( TYPE_2 . METHOD_1 ( VAR_1 ) ) == ( VAR_3 ) ? null : VAR_4 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"problem": "public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) . equals ( TYPE_2 ) ) && ( VAR_2 . equals ( VAR_3 ) ) ) { try { return TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) , VAR_4 ) ; } catch ( TYPE_4 VAR_5 ) { VAR_5 . METHOD_6 ( ) ; } } return TYPE_3 . METHOD_3 ( VAR_1 , VAR_2 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { if ( ( TYPE_2 . equals ( VAR_1 . METHOD_2 ( ) ) ) && ( VAR_2 . equals ( VAR_3 ) ) ) { try { return TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) , VAR_4 ) ; } catch ( TYPE_4 VAR_5 ) { VAR_5 . METHOD_6 ( ) ; } } return TYPE_3 . METHOD_3 ( VAR_1 , VAR_2 ) ; }\n"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "fixed": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "sourceBeforeFix": "mock.expectedMessageCount(3)", "sourceAfterFix": "mock.expectedMinimumMessageCount(3)"}
{"problem": "private void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) { VAR_1 . setEnabled ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . contains ( ( ( ( VAR_4 ) + STRING_1 ) + ( VAR_5 ) ) ) ) ; VAR_2 . setEnabled ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . contains ( ( ( ( VAR_4 ) + STRING_1 ) + ( VAR_6 ) ) ) ) ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) { VAR_1 . setEnabled ( VAR_3 . METHOD_3 ( ) . contains ( ( ( ( VAR_4 ) + STRING_1 ) + ( VAR_5 ) ) ) ) ; VAR_2 . setEnabled ( VAR_3 . METHOD_3 ( ) . contains ( ( ( ( VAR_4 ) + STRING_1 ) + ( VAR_6 ) ) ) ) ; } }\n"}
{"problem": "public static void METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_2 ) == null ) ) { return ; } if ( ( TYPE_1 . METHOD_2 ( ) . size ( ) ) == 1 ) { VAR_2 . METHOD_3 ( false ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; VAR_1 = null ; } }\n", "fixed": "public static void METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_2 ) == null ) ) { return ; } if ( ( TYPE_1 . METHOD_2 ( ) . size ( ) ) == 1 ) { TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; VAR_1 = null ; VAR_2 = null ; } }\n"}
{"fixCommitSHA1": "eab3e07e39e5ef5e14db8a77f71a2741dd261ca4", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "     conf.setInt(\"hbase.hregion.memstore.flush.size\", 1024*1024);\n    conf.setInt(\"hbase.hregion.memstore.block.multiplier\", 10);\n     this.cluster = null;\n   }", "fixed": "     conf.setInt(\"hbase.hregion.memstore.flush.size\", 1024*1024);\n    conf.setInt(\"hbase.hregion.memstore.block.multiplier\", 100);\n     this.cluster = null;\n   }", "sourceBeforeFix": "conf.setInt(\"hbase.hregion.memstore.block.multiplier\",10)", "sourceAfterFix": "conf.setInt(\"hbase.hregion.memstore.block.multiplier\",100)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { try { VAR_1 . METHOD_3 ( VAR_2 . getActivity ( ) , VAR_3 ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_4 ( ) ; } } else { METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { try { VAR_1 . METHOD_3 ( VAR_2 . getActivity ( ) , VAR_3 ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_4 ( ) ; } } else { METHOD_5 ( VAR_1 . METHOD_6 ( ) , VAR_3 ) ; } }\n"}
{"project": "Closure", "bugId": 3, "problem": " public void enterScope(NodeTraversal t) {\n     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);\n     reachingUses.analyze();\n     for (Candidate c : candidates) {\n      if (c.canInline()) {\n         c.inlineVariable();", "fixed": " public void enterScope(NodeTraversal t) {\n     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);\n     reachingUses.analyze();\n     for (Candidate c : candidates) {\n      if (c.canInline(t.getScope())) {\n         c.inlineVariable();", "observations": "", "repairActions": ["assignAdd", "condBranCaseAdd", "condBranIfAdd", "condExpMod", "mcAdd", "mcParAdd", "mcRepl", "mdParAdd", "retBranchAdd", "varAdd"], "repairPatterns": ["condBlockOthersAdd", "condBlockRetAdd"]}
{"problem": "public void METHOD_1 ( ) { if ( this . VAR_1 ) { return ; } int VAR_2 = this . METHOD_2 ( ) ; if ( TYPE_1 . METHOD_3 ( VAR_2 ) ) { java.lang.System.out.println ( STRING_1 ) ; this . VAR_3 . METHOD_4 ( this . VAR_4 , this . VAR_5 , this . VAR_6 , VAR_7 , INT_1 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( this . VAR_1 ) { return ; } int VAR_2 = this . METHOD_2 ( ) ; if ( TYPE_1 . METHOD_3 ( VAR_2 ) ) { this . VAR_3 . METHOD_4 ( this . VAR_4 , this . VAR_5 , this . VAR_6 , VAR_7 , INT_1 ) ; } }\n"}
{"problem": "public static int METHOD_1 ( int [ ] VAR_1 ) { if ( ( VAR_1 . length ) <= 1 ) { return - 1 ; } int min = VAR_2 ; int diff = 0 ; for ( int n : VAR_1 ) { diff = TYPE_1 . METHOD_2 ( ( n - min ) , diff ) ; min = TYPE_1 . min ( n , min ) ; } return diff != 0 ? diff : - 1 ; }\n", "fixed": "public static int METHOD_1 ( int [ ] VAR_1 ) { if ( ( VAR_1 . length ) <= 1 ) { return - 1 ; } int min = VAR_1 [ 0 ] ; int diff = 0 ; for ( int n : VAR_1 ) { diff = TYPE_1 . METHOD_2 ( ( n - min ) , diff ) ; min = TYPE_1 . min ( n , min ) ; } return diff != 0 ? diff : - 1 ; }\n"}
{"problem": "public static < TYPE_1 > TYPE_1 METHOD_1 ( final java.lang.String path , final java.lang.Class < TYPE_1 > VAR_1 ) throws java.io.IOException { TYPE_2 . assertNotNull ( path , STRING_1 ) ; TYPE_2 . assertNotNull ( VAR_1 , STRING_2 ) ; TYPE_1 result ; try ( java.io.FileInputStream VAR_2 = TYPE_3 . METHOD_2 ( path ) ) { result = TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ; } return result ; }\n", "fixed": "public static < TYPE_1 > TYPE_1 METHOD_1 ( final java.lang.String path , final java.lang.Class < TYPE_1 > VAR_1 ) throws java.io.IOException { TYPE_2 . assertNotNull ( path , STRING_1 ) ; TYPE_2 . assertNotNull ( VAR_1 , STRING_2 ) ; TYPE_1 result ; try ( java.io.FileInputStream VAR_2 = new java.io.FileInputStream ( path ) ) { result = TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ; } return result ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception , TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; for ( TYPE_3 VAR_2 : list ) { VAR_3 . put ( VAR_2 , ( ( INT_1 * ( VAR_4 . METHOD_3 ( VAR_1 , VAR_2 ) . size ( ) ) ) / ( VAR_2 . METHOD_4 ( ) ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception , TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; for ( TYPE_3 VAR_2 : list ) { VAR_3 . put ( VAR_2 , VAR_4 . METHOD_3 ( VAR_1 , VAR_2 ) . size ( ) ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 , TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ; if ( VAR_1 instanceof TYPE_4 ) { return ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_1 ( ) ; } throw new TYPE_5 ( STRING_1 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 , TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ; if ( VAR_1 instanceof TYPE_4 ) { return ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_1 ( ) ; } return null ; }\n"}
{"fixCommitSHA1": "3b4ff661c53e36133d3d287908592029d97d66f1", "projectName": "jersey.jersey", "bugType": "Change Numeric Literal", "problem": "     @Override\n     protected void configureClient(ClientConfig clientConfig) {\n        clientConfig.property(ClientProperties.READ_TIMEOUT, 1000);\n     }\n     @Test", "fixed": "     @Override\n     protected void configureClient(ClientConfig clientConfig) {\n        clientConfig.property(ClientProperties.READ_TIMEOUT, 2000);\n     }\n     @Test", "sourceBeforeFix": "Thread.sleep(2000)", "sourceAfterFix": "Thread.sleep(5000)"}
{"fixCommitSHA1": "93427d90431acb1ec83e5708bd0ef6c0281369c9", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\t\trect(i000, i100, i110, i010);\r\n \t\t\trect(i101, i001, i011, i111);\r\n \t\t\tindex(i000, i001, i010, i011, i110, i111, i100, i101);\r\n\t\t} else if (primitiveType != GL10.GL_POINTS) {\r\n \t\t\tensureRectangleIndices(2);\r\n \t\t\trect(i000, i100, i110, i010);\r\n \t\t\trect(i101, i001, i011, i111);\r", "fixed": " \t\t\trect(i000, i100, i110, i010);\r\n \t\t\trect(i101, i001, i011, i111);\r\n \t\t\tindex(i000, i001, i010, i011, i110, i111, i100, i101);\r\n\t\t} else if (primitiveType == GL10.GL_POINTS) {\r\n \t\t\tensureRectangleIndices(2);\r\n \t\t\trect(i000, i100, i110, i010);\r\n \t\t\trect(i101, i001, i011, i111);\r", "sourceBeforeFix": "primitiveType != GL10.GL_POINTS", "sourceAfterFix": "primitiveType == GL10.GL_POINTS"}
{"problem": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( ) ; VAR_2 = TYPE_2 . METHOD_2 ( ) ; while ( true ) { try { java.lang.Thread . METHOD_3 ( INT_1 ) ; } catch ( TYPE_3 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } VAR_1 . METHOD_5 ( VAR_1 ) ; } }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( ) ; VAR_2 = TYPE_2 . METHOD_2 ( ) ; while ( true ) { try { java.lang.Thread . METHOD_3 ( INT_1 ) ; } catch ( TYPE_3 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } } }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . i ( VAR_2 , STRING_1 ) ; if ( ( ( TYPE_2 . METHOD_2 ( this , VAR_3 ) ) != ( VAR_4 ) ) || ( ( TYPE_2 . METHOD_2 ( this , VAR_5 ) ) != ( VAR_4 ) ) ) { TYPE_3 . METHOD_3 ( this , new java.lang.String [ ] { VAR_3 , VAR_5 } , VAR_6 ) ; } else { METHOD_4 ( ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . i ( VAR_2 , STRING_1 ) ; if ( ( ( TYPE_2 . METHOD_2 ( this , VAR_3 ) ) != ( VAR_4 ) ) || ( ( TYPE_2 . METHOD_2 ( this , VAR_5 ) ) != ( VAR_4 ) ) ) { TYPE_3 . METHOD_3 ( this , new java.lang.String [ ] { VAR_5 } , VAR_6 ) ; } else { METHOD_4 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( boolean VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 ) { TYPE_1 . i ( this . getClass ( ) . METHOD_2 ( ) , ( STRING_1 + ( VAR_2 ) ) ) ; METHOD_3 ( new TYPE_2 < TYPE_3 > ( getActivity ( ) , VAR_2 , STRING_2 ) ) ; TYPE_4 . METHOD_4 ( getActivity ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( boolean VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 && ( ( VAR_2 ) != null ) ) { TYPE_1 . i ( this . getClass ( ) . METHOD_2 ( ) , ( STRING_1 + ( VAR_2 ) ) ) ; METHOD_3 ( new TYPE_2 < TYPE_3 > ( getActivity ( ) , VAR_2 , STRING_2 ) ) ; TYPE_4 . METHOD_4 ( getActivity ( ) ) ; } }\n"}
{"problem": "void METHOD_1 ( ) throws TYPE_1 { c . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { VAR_1 . METHOD_4 ( VAR_2 [ 0 ] ) ; VAR_1 . METHOD_4 ( VAR_2 [ 1 ] ) ; VAR_1 . METHOD_4 ( VAR_2 [ INT_1 ] ) ; METHOD_5 ( ) ; } } ) ; METHOD_6 ( ) ; }\n", "fixed": "void METHOD_1 ( ) throws TYPE_1 { c . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { VAR_1 . METHOD_4 ( VAR_2 [ 0 ] ) ; VAR_1 . METHOD_4 ( VAR_2 [ 1 ] ) ; VAR_1 . METHOD_4 ( VAR_2 [ INT_1 ] ) ; METHOD_5 ( ) ; } } ) ; }\n"}
{"problem": "public boolean METHOD_1 ( int VAR_1 , java.lang.Object key ) { if ( ( VAR_2 . get ( ) ) != null ) METHOD_2 ( VAR_1 , key ) ; METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; try { METHOD_3 ( ) ; METHOD_5 ( ) ; return METHOD_2 ( VAR_1 , key ) ; } finally { VAR_3 . METHOD_6 ( ) ; } }\n", "fixed": "public boolean METHOD_1 ( int VAR_1 , java.lang.Object key ) { if ( ( VAR_2 . get ( ) ) != null ) { return METHOD_2 ( VAR_1 , key ) ; } METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; try { METHOD_3 ( ) ; METHOD_5 ( ) ; return METHOD_2 ( VAR_1 , key ) ; } finally { VAR_3 . METHOD_6 ( ) ; } }\n"}
{"project": "Closure", "bugId": 39, "problem": " String toStringHelper(boolean forAnnotations) {\n       prettyPrint = true;\n       return sb.toString();\n     } else {\n      return \"{...}\";\n     }\n   }", "fixed": " String toStringHelper(boolean forAnnotations) {\n       prettyPrint = true;\n       return sb.toString();\n     } else {\n      return forAnnotations ? \"?\" : \"{...}\";\n     }\n   }", "observations": "If-else implicit in \"exp?a:b\" construct", "repairActions": ["condBranIfElseAdd", "condExpExpand", "mcParAdd", "mcRepl", "retExpChange"], "repairPatterns": ["expLogicExpand", "wrapsIfElse", "wrongMethodRef"]}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public long METHOD_1 ( int position ) { if ( position == 0 ) { return VAR_1 ? VAR_2 : VAR_3 . METHOD_1 ( 0 ) ; } else { return position == ( VAR_3 . METHOD_2 ( ) ) ? VAR_2 : VAR_3 . METHOD_1 ( position ) ; } }\n", "fixed": "public long METHOD_1 ( int position ) { if ( position == 0 ) { return VAR_1 ? VAR_2 : VAR_3 . METHOD_1 ( 0 ) ; } else { if ( VAR_1 ) { return ( position - 1 ) >= ( VAR_3 . METHOD_2 ( ) ) ? VAR_2 : VAR_3 . METHOD_1 ( ( position - 1 ) ) ; } else { return position >= ( VAR_3 . METHOD_2 ( ) ) ? VAR_2 : VAR_3 . METHOD_1 ( position ) ; } } }\n"}
{"problem": "public void METHOD_1 ( char VAR_1 ) { if ( ( n ) == 0 ) { METHOD_2 ( ) ; VAR_2 += VAR_1 ; if ( ( ( ( VAR_2 ) - VAR_1 ) & INT_1 ) != ( ( VAR_2 ) & INT_1 ) ) { METHOD_2 ( ) ; } VAR_2 -= INT_2 ; } }\n", "fixed": "public void METHOD_1 ( char VAR_1 ) { if ( ( n ) == 0 ) { METHOD_2 ( ) ; VAR_2 += VAR_1 ; if ( ( ( ( VAR_2 ) - VAR_1 ) & INT_1 ) != ( ( VAR_2 ) & INT_1 ) ) { METHOD_2 ( ) ; } } }\n"}
{"problem": "private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 < java.lang.String , java.lang.String > VAR_2 = super . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = VAR_2 . METHOD_3 ( ) ; java.lang.String VAR_4 = VAR_2 . METHOD_4 ( ) ; if ( ! ( VAR_3 . equals ( VAR_5 ) ) ) { throw new TYPE_2 ( this , ( ( VAR_3 + ( VAR_6 ) ) + VAR_4 ) ) ; } java.io.File file = new java.io.File ( VAR_7 , VAR_4 ) ; return ( ( VAR_7 ) + STRING_1 ) + VAR_4 ; }\n", "fixed": "private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 < java.lang.String , java.lang.String > VAR_2 = super . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = VAR_2 . METHOD_3 ( ) ; java.lang.String VAR_4 = VAR_2 . METHOD_4 ( ) ; if ( ! ( VAR_3 . equals ( VAR_5 ) ) ) { throw new TYPE_2 ( this , ( ( VAR_3 + ( VAR_6 ) ) + VAR_4 ) ) ; } return ( ( VAR_7 ) + STRING_1 ) + VAR_4 ; }\n"}
{"problem": "public void handle ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( ( STRING_1 + VAR_1 ) ) ; if ( ( VAR_1 . METHOD_1 ( ) ) == ( VAR_2 ) ) { METHOD_2 ( ) ; } else if ( ( VAR_1 . METHOD_1 ( ) ) == ( VAR_3 ) ) { METHOD_3 ( ) ; } }\n", "fixed": "public void handle ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_1 ( ) ) == ( VAR_2 ) ) { METHOD_2 ( ) ; } else if ( ( VAR_1 . METHOD_1 ( ) ) == ( VAR_3 ) ) { METHOD_3 ( ) ; } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 file , boolean VAR_1 , java.util.List < java.lang.String > VAR_2 , int VAR_3 ) throws java.io.IOException { if ( VAR_1 ) { return new TYPE_3 ( VAR_1 , VAR_3 ) . METHOD_2 ( file ) ; } else { return TYPE_1 . METHOD_3 ( file , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 file , boolean VAR_1 , java.util.List < java.lang.String > VAR_2 , int VAR_3 ) throws java.io.IOException { if ( VAR_1 ) { return new TYPE_3 ( VAR_1 , VAR_3 ) . METHOD_2 ( file ) ; } else { return TYPE_1 . METHOD_3 ( file , VAR_2 , VAR_3 , VAR_4 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { while ( VAR_1 ) { java.lang.String message = VAR_2 . METHOD_2 ( ) ; if ( message . startsWith ( STRING_1 ) ) { VAR_2 . METHOD_3 ( java.lang.Integer.parseInt ( message . split ( STRING_2 ) [ 1 ] ) ) ; METHOD_4 ( ( STRING_3 + ( VAR_2 . METHOD_5 ( ) ) ) ) ; java.lang.System.out.println ( ( STRING_3 + ( VAR_2 . METHOD_5 ( ) ) ) ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { while ( VAR_1 ) { java.lang.String message = VAR_2 . METHOD_2 ( ) ; if ( message . startsWith ( STRING_1 ) ) { VAR_2 . METHOD_3 ( java.lang.Integer.parseInt ( message . split ( STRING_2 ) [ 1 ] ) ) ; METHOD_4 ( ( STRING_3 + ( VAR_2 . METHOD_5 ( ) ) ) ) ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2071f9b5421f853e8515f309b2874399c895c43a", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "         final SeverityLevelCounter counter = new SeverityLevelCounter(SeverityLevel.ERROR);\n         final AuditEvent event = new AuditEvent(this, \"ATest.java\", null);\n         assertEquals(0, counter.getCount());\n        counter.addException(event, new IllegalStateException());\n         assertEquals(1, counter.getCount());\n     }", "fixed": "         final SeverityLevelCounter counter = new SeverityLevelCounter(SeverityLevel.ERROR);\n         final AuditEvent event = new AuditEvent(this, \"ATest.java\", null);\n         assertEquals(0, counter.getCount());\n        counter.addException(event, new IllegalStateException(\"Test IllegalStateException\"));\n         assertEquals(1, counter.getCount());\n     }", "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Test IllegalStateException\")"}
{"fixCommitSHA1": "35bb9eb5c0f3b2b4a2e7c212cdd97edeca4b0594", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "     }\n     public void testFavoriteMethods() throws Exception {\n        Status status = twitter1.getHomeTimeline(new Paging().count(1)).get(0);\n         assertNotNull(DataObjectFactory.getRawJSON(status));\n         assertEquals(status, DataObjectFactory.createStatus(DataObjectFactory.getRawJSON(status)));\n         status = twitter2.createFavorite(status.getId());", "fixed": "     }\n     public void testFavoriteMethods() throws Exception {\n        Status status = twitter1.getPublicTimeline().get(0);\n         assertNotNull(DataObjectFactory.getRawJSON(status));\n         assertEquals(status, DataObjectFactory.createStatus(DataObjectFactory.getRawJSON(status)));\n         status = twitter2.createFavorite(status.getId());", "sourceBeforeFix": "twitter1.getHomeTimeline(new Paging().count(1))", "sourceAfterFix": "twitter1.getPublicTimeline()"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = VAR_2 . METHOD_2 ( VAR_3 class ) ; VAR_1 . add ( VAR_4 , VAR_5 , TYPE_3 . toString ( ) ) ; VAR_1 . add ( VAR_6 , VAR_5 , VAR_7 . METHOD_3 ( ) ) ; if ( ( VAR_1 . METHOD_4 ( ) ) != null ) { try { VAR_2 . remove ( VAR_1 . METHOD_4 ( ) ) ; } catch ( java.lang.Exception VAR_8 ) { VAR_9 . METHOD_5 ( STRING_1 ) ; } } }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = VAR_2 . METHOD_2 ( VAR_3 class ) ; VAR_1 . add ( VAR_4 , VAR_5 , TYPE_3 . toString ( ) ) ; VAR_1 . add ( VAR_6 , VAR_5 , VAR_7 . METHOD_3 ( ) ) ; java.util.List < TYPE_2 > list = VAR_1 . list ( ) ; if ( ( list . size ( ) ) > 0 ) { for ( TYPE_2 p : list ) { VAR_2 . remove ( p ) ; } } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String id ) { java.lang.String [ ] VAR_1 = TYPE_2 . split ( id , CHAR_1 ) ; if ( ( VAR_1 . length ) != INT_1 ) { throw new TYPE_3 ( STRING_1 ) ; } return new TYPE_1 ( VAR_1 [ 1 ] , VAR_1 [ 0 ] ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String id ) { java.lang.String [ ] VAR_1 = TYPE_2 . split ( id , CHAR_1 ) ; if ( ( VAR_1 . length ) != INT_1 ) { return null ; } return new TYPE_1 ( VAR_1 [ 1 ] , VAR_1 [ 0 ] ) ; }\n"}
{"problem": "public int METHOD_1 ( int id , TYPE_1 VAR_1 ) { TYPE_2 item = VAR_2 . METHOD_2 ( ) . METHOD_3 ( id , VAR_1 ) ; if ( item != null ) { VAR_2 . METHOD_4 ( VAR_3 , item ) ; return 0 ; } else { return 1 ; } }\n", "fixed": "public int METHOD_1 ( int id , TYPE_1 VAR_1 ) { TYPE_2 item = VAR_2 . METHOD_2 ( ) . METHOD_3 ( id , VAR_1 ) ; if ( ( item != null ) && ( VAR_2 . METHOD_4 ( VAR_3 , item ) ) ) { return 0 ; } else { return 1 ; } }\n"}
{"problem": "public java.lang.Object METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , int x , int y , int VAR_4 ) { try { TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 , VAR_3 . METHOD_3 ( new TYPE_4 ( x , y , VAR_4 ) ) ) ; } catch ( java.lang.NullPointerException VAR_5 ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( VAR_5 . toString ( ) ) ; java.lang.System.exit ( 1 ) ; } if ( VAR_6 . METHOD_4 ( VAR_1 ) ) { return VAR_6 . get ( VAR_1 ) ; } return null ; }\n", "fixed": "public java.lang.Object METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , int x , int y , int VAR_4 ) { TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 , VAR_3 . METHOD_3 ( new TYPE_4 ( x , y , VAR_4 ) ) ) ; if ( VAR_6 . METHOD_4 ( VAR_1 ) ) { return VAR_6 . get ( VAR_1 ) ; } return null ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.Integer VAR_1 ) { java.util.Iterator < java.lang.String > i = VAR_2 . METHOD_2 ( ) . iterator ( ) ; if ( i . METHOD_3 ( ) ) { java.lang.String fileName = i . METHOD_4 ( ) ; java.lang.System.out.println ( STRING_1 ) ; for ( int k = 0 ; k < VAR_1 ; k ++ ) { java.lang.System.out.print ( STRING_2 ) ; } java.lang.System.out.print ( fileName ) ; VAR_2 . get ( fileName ) . METHOD_1 ( ( VAR_1 + 1 ) ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.Integer VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; for ( int k = 0 ; k < VAR_1 ; k ++ ) { java.lang.System.out.print ( STRING_2 ) ; } java.lang.System.out.print ( fileName ) ; for ( java.lang.String fileName : VAR_2 . METHOD_2 ( ) ) { VAR_2 . get ( fileName ) . METHOD_1 ( ( VAR_1 + 1 ) ) ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( java.util.Date VAR_1 , java.util.Date VAR_2 , TYPE_2 VAR_3 , TYPE_2 target , TYPE_3 VAR_4 ) { TYPE_1 VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_2 ( VAR_1 ) ; VAR_5 . METHOD_3 ( VAR_2 ) ; VAR_5 . METHOD_4 ( target ) ; VAR_5 . METHOD_5 ( VAR_3 ) ; VAR_5 . METHOD_6 ( VAR_4 ) ; VAR_6 . METHOD_7 ( VAR_5 ) ; return VAR_5 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.util.Date VAR_2 , java.util.Date VAR_1 , TYPE_2 VAR_3 , TYPE_2 target , TYPE_3 VAR_4 ) { TYPE_1 VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_2 ( VAR_1 ) ; VAR_5 . METHOD_3 ( VAR_2 ) ; VAR_5 . METHOD_4 ( target ) ; VAR_5 . METHOD_5 ( VAR_3 ) ; VAR_5 . METHOD_6 ( VAR_4 ) ; VAR_6 . METHOD_7 ( VAR_5 ) ; return VAR_5 ; }\n"}
{"problem": "public boolean equals ( java.lang.Object obj ) { if ( obj == ( this ) ) { return true ; } if ( obj == null ) { return false ; } if ( obj instanceof TYPE_1 ) { TYPE_1 node = ( ( TYPE_1 ) ( obj ) ) ; if ( ( start ) != ( node . METHOD_1 ( ) ) ) { return false ; } if ( ( end ) == ( node . METHOD_2 ( ) ) ) { return false ; } return true ; } return false ; }\n", "fixed": "public boolean equals ( java.lang.Object obj ) { if ( obj == ( this ) ) { return true ; } if ( obj == null ) { return false ; } if ( obj instanceof TYPE_1 ) { TYPE_1 node = ( ( TYPE_1 ) ( obj ) ) ; if ( ( start ) != ( node . METHOD_1 ( ) ) ) { return false ; } if ( ( end ) != ( node . METHOD_2 ( ) ) ) { return false ; } return true ; } return false ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 == null ) VAR_1 = STRING_1 ; if ( value == null ) value = STRING_1 ; return new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( this , VAR_3 . METHOD_4 ( VAR_4 , VAR_1 , value ) ) , this ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String value ) { if ( VAR_1 == null ) VAR_1 = STRING_1 ; if ( value == null ) value = STRING_1 ; VAR_2 . METHOD_2 ( ) ; return new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( this , VAR_3 . METHOD_4 ( VAR_4 , VAR_1 , value ) ) , this ) ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 != null ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 instanceof TYPE_4 ) { TYPE_4 VAR_3 = ( ( TYPE_4 ) ( VAR_2 ) ) ; return VAR_3 . METHOD_3 ( ) ; } } return null ; }\n", "fixed": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 != null ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 instanceof TYPE_4 ) { TYPE_4 VAR_3 = ( ( TYPE_4 ) ( VAR_2 ) ) ; return VAR_3 . METHOD_3 ( ) ; } } return null ; }\n"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) == null ) { VAR_1 = new android.content.Intent ( getActivity ( ) , VAR_2 class ) ; getActivity ( ) . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; getActivity ( ) . METHOD_3 ( VAR_1 ) ; } METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) == null ) { VAR_1 = new android.content.Intent ( getActivity ( ) , VAR_2 class ) ; getActivity ( ) . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; getActivity ( ) . METHOD_3 ( VAR_1 ) ; } }\n"}
{"fixCommitSHA1": "e981384cc21ca3c1958acd4b494a6ddd147c0a60", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "             if (ssl.has(CommonAttributes.CIPHER_SUITE))\n                 config.setSslCiphers(ssl.get(CommonAttributes.CIPHER_SUITE).asString());\n             if (ssl.has(CommonAttributes.PROTOCOL))\n                config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString());\n             if (ssl.has(CommonAttributes.CA_CERTIFICATE_FILE))\n                 config.setSslTrustStore(ssl.get(CommonAttributes.CA_CERTIFICATE_FILE).asString());\n             if (ssl.has(CommonAttributes.CA_REVOCATION_URL))", "fixed": "             if (ssl.has(CommonAttributes.CIPHER_SUITE))\n                 config.setSslCiphers(ssl.get(CommonAttributes.CIPHER_SUITE).asString());\n             if (ssl.has(CommonAttributes.PROTOCOL))\n                config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString());\n             if (ssl.has(CommonAttributes.CA_CERTIFICATE_FILE))\n                 config.setSslTrustStore(ssl.get(CommonAttributes.CA_CERTIFICATE_FILE).asString());\n             if (ssl.has(CommonAttributes.CA_REVOCATION_URL))", "sourceBeforeFix": "config.setProxyList(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString())", "sourceAfterFix": "config.setAdvertiseSecurityKey(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public boolean METHOD_1 ( long VAR_1 ) { TYPE_1 < TYPE_2 > query = VAR_2 . METHOD_2 ( VAR_3 class ) ; query . METHOD_3 ( \"id\" , VAR_1 ) ; TYPE_2 result = query . METHOD_4 ( ) ; if ( result == null ) { return false ; } else { result . METHOD_5 ( ) ; return true ; } }\n", "fixed": "public boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 < TYPE_2 > query = VAR_2 . METHOD_2 ( VAR_3 class ) ; query . METHOD_3 ( \"id\" , VAR_1 ) ; TYPE_2 result = query . METHOD_4 ( ) ; if ( result == null ) { return false ; } else { result . METHOD_5 ( ) ; return true ; } }\n"}
{"fixCommitSHA1": "55c9e1fc7d030a0a381af34ba726cf2d4a19e953", "projectName": "apache.storm", "bugType": "Change Modifier", "problem": " public class DefaultResourceDeclarer<T extends DefaultResourceDeclarer> implements ResourceDeclarer<T>, ITridentResource {\n     private Map<String, Number> resources = new HashMap<>();\n    private Map conf = Utils.readStormConfig();\n     @Override\n     public T setMemoryLoad(Number onHeap) {", "fixed": " public class DefaultResourceDeclarer<T extends DefaultResourceDeclarer> implements ResourceDeclarer<T>, ITridentResource {\n     private Map<String, Number> resources = new HashMap<>();\n    private static Map conf = Utils.readStormConfig();\n     @Override\n     public T setMemoryLoad(Number onHeap) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { c . METHOD_2 ( VAR_2 ) ; } else { TYPE_2 . METHOD_3 ( VAR_3 , VAR_1 . METHOD_4 ( ) ) ; c . METHOD_2 ( VAR_4 ) ; VAR_5 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { c . METHOD_2 ( VAR_2 ) ; VAR_5 . METHOD_5 ( ) ; } else { TYPE_2 . METHOD_3 ( VAR_3 , VAR_1 . METHOD_4 ( ) ) ; c . METHOD_2 ( VAR_4 ) ; VAR_5 . METHOD_5 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( ( VAR_1 ) > 0 ) && ( ( METHOD_2 ( ) ) >= INT_1 ) ) { METHOD_3 ( ) ; } if ( ( ( VAR_1 ) < 0 ) && ( ( METHOD_2 ( ) ) <= INT_2 ) ) { METHOD_3 ( ) ; } METHOD_4 ( ( ( METHOD_2 ( ) ) + ( VAR_1 ) ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ( ( VAR_1 ) > 0 ) && ( ( METHOD_2 ( ) ) >= INT_1 ) ) { METHOD_3 ( true ) ; } if ( ( ( VAR_1 ) < 0 ) && ( ( METHOD_2 ( ) ) <= INT_2 ) ) { METHOD_3 ( true ) ; } METHOD_4 ( ( ( METHOD_2 ( ) ) + ( VAR_1 ) ) ) ; }\n"}
{"problem": "private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_2 VAR_2 = null ; boolean VAR_3 = false ; for ( TYPE_1 c : VAR_1 ) { if ( c . getName ( ) . equals ( STRING_1 ) ) VAR_2 = ( ( TYPE_2 ) ( c ) ) ; if ( c . getName ( ) . equals ( STRING_2 ) ) { VAR_3 = true ; break ; } } if ( VAR_3 ) VAR_2 . METHOD_2 ( true ) ; }\n", "fixed": "private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_2 VAR_2 = null ; boolean VAR_3 = false ; for ( TYPE_1 c : VAR_1 ) { if ( c . getName ( ) . equals ( STRING_1 ) ) VAR_2 = ( ( TYPE_2 ) ( c ) ) ; if ( c . getName ( ) . equals ( STRING_2 ) ) { VAR_3 = true ; break ; } } if ( ( VAR_2 != null ) && VAR_3 ) VAR_2 . METHOD_2 ( true ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { VAR_1 = VAR_1 . toLowerCase ( ) ; java.util.List < ? > VAR_2 = ( ( java.util.List < ? > ) ( METHOD_2 ( VAR_1 ) ) ) ; if ( ( VAR_2 . size ( ) ) == 0 ) return STRING_1 ; else { java.lang.Object VAR_3 = VAR_2 . get ( 0 ) ; if ( VAR_3 == null ) return STRING_1 ; else return VAR_3 . toString ( ) ; } }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.util.List < ? > VAR_2 = ( ( java.util.List < ? > ) ( METHOD_2 ( VAR_1 ) ) ) ; if ( ( VAR_2 . size ( ) ) == 0 ) return STRING_1 ; else { java.lang.Object VAR_3 = VAR_2 . get ( 0 ) ; if ( VAR_3 == null ) return STRING_1 ; else return VAR_3 . toString ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { VAR_1 = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; } TYPE_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( VAR_1 ) ; if ( ( VAR_4 ) == null ) { VAR_4 = TYPE_4 . METHOD_7 ( 1 ) ; } METHOD_8 ( VAR_5 , VAR_4 ) ; TYPE_5 . METHOD_9 ( VAR_3 , TYPE_3 . METHOD_10 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { VAR_1 = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; } TYPE_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( VAR_1 ) ; VAR_4 = TYPE_4 . METHOD_7 ( 1 ) ; METHOD_8 ( VAR_5 , VAR_4 ) ; TYPE_5 . METHOD_9 ( VAR_3 , TYPE_3 . METHOD_10 ( ) ) ; }\n"}
{"problem": "public int METHOD_1 ( TYPE_1 VAR_1 , java.lang.String buffer , int VAR_2 , java.util.List < java.lang.String > VAR_3 ) { TYPE_2 VAR_4 = new TYPE_2 ( VAR_5 . METHOD_2 ( ) , buffer , VAR_2 ) ; METHOD_1 ( VAR_4 ) ; for ( TYPE_3 VAR_6 : VAR_4 . METHOD_3 ( ) ) { VAR_3 . add ( VAR_6 . METHOD_4 ( ) ) ; } return VAR_4 . METHOD_5 ( ) ; }\n", "fixed": "public int METHOD_1 ( TYPE_1 VAR_1 , java.lang.String buffer , int VAR_2 , java.util.List < java.lang.String > VAR_3 ) { TYPE_2 VAR_4 = new TYPE_2 ( VAR_5 . METHOD_2 ( ) , buffer , VAR_2 ) ; METHOD_1 ( VAR_4 ) ; for ( TYPE_3 VAR_6 : VAR_4 . METHOD_3 ( ) ) { VAR_3 . add ( VAR_6 . METHOD_4 ( ) ) ; } if ( VAR_4 . METHOD_3 ( ) . isEmpty ( ) ) { return - 1 ; } return VAR_4 . METHOD_5 ( ) ; }\n"}
{"problem": "public void output ( final TYPE_1 VAR_1 , final java.io.File file , final boolean VAR_2 ) throws TYPE_2 , java.io.IOException , TYPE_3 { final TYPE_4 writer = new java.io.FileWriter ( file ) ; this . output ( VAR_1 , writer , VAR_2 ) ; writer . METHOD_1 ( ) ; }\n", "fixed": "public void output ( final TYPE_1 VAR_1 , final java.io.File file , final boolean VAR_2 ) throws TYPE_2 , java.io.IOException , TYPE_3 { final TYPE_4 writer = new java.io.FileWriter ( file ) ; try { this . output ( VAR_1 , writer , VAR_2 ) ; } finally { writer . METHOD_1 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 [ ] VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 { try { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } catch ( TYPE_2 VAR_4 ) { try { if ( METHOD_2 ( ) ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } } catch ( TYPE_3 VAR_5 ) { java.lang.String message = STRING_1 ; VAR_6 . error ( message , VAR_5 ) ; throw new TYPE_2 ( message , VAR_5 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 [ ] VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 { try { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } catch ( TYPE_2 VAR_4 ) { try { if ( METHOD_2 ( ) ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } else { throw VAR_4 ; } } catch ( TYPE_3 VAR_5 ) { java.lang.String message = STRING_1 ; VAR_6 . error ( message , VAR_5 ) ; throw new TYPE_2 ( message , VAR_5 ) ; } } }\n"}
{"problem": "public static java.lang.String METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = context . METHOD_2 ( ) . query ( VAR_1 , null , null , null , null ) ; VAR_2 . METHOD_3 ( ) ; int VAR_3 = VAR_2 . METHOD_4 ( VAR_4 ) ; return VAR_2 . getString ( VAR_3 ) ; }\n", "fixed": "public static java.lang.String METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = null ; int VAR_3 = 0 ; if ( VAR_1 != null ) { VAR_2 = context . METHOD_2 ( ) . query ( VAR_1 , null , null , null , null ) ; VAR_2 . METHOD_3 ( ) ; VAR_3 = VAR_2 . METHOD_4 ( VAR_4 ) ; } return VAR_2 . getString ( VAR_3 ) ; }\n"}
{"problem": "public static void METHOD_1 ( long VAR_1 , long VAR_2 , java.lang.String VAR_3 ) throws TYPE_1 , TYPE_2 { TYPE_3 VAR_4 = TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 . trim ( ) . equals ( STRING_1 ) ) { TYPE_4 . METHOD_3 ( VAR_4 ) ; } else { VAR_4 . METHOD_4 ( VAR_3 ) ; TYPE_4 . METHOD_1 ( VAR_4 ) ; } }\n", "fixed": "public static void METHOD_1 ( long VAR_1 , long VAR_2 , java.lang.String VAR_3 ) throws TYPE_1 , TYPE_2 { TYPE_3 VAR_4 = TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 . trim ( ) . equals ( STRING_1 ) ) { TYPE_4 . METHOD_3 ( VAR_4 ) ; } else { VAR_4 . METHOD_4 ( VAR_3 . trim ( ) ) ; TYPE_4 . METHOD_1 ( VAR_4 ) ; } }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( VAR_2 ) ) ; java.lang.System.err.println ( ( STRING_1 + VAR_1 ) ) ; try { VAR_1 . METHOD_1 ( ) ; } catch ( TYPE_3 VAR_3 ) { VAR_3 . METHOD_2 ( ) ; } java.lang.System.out.println ( STRING_2 ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( VAR_2 ) ) ; try { VAR_1 . METHOD_1 ( ) ; } catch ( TYPE_3 VAR_3 ) { VAR_3 . METHOD_2 ( ) ; } java.lang.System.out.println ( STRING_2 ) ; }\n"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "fixed": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "sourceBeforeFix": "logger.debug(\"rapidRefreshFutureEnd stopping\")", "sourceAfterFix": "logger.trace(\"rapidRefreshFutureEnd stopping\")"}
{"fixCommitSHA1": "27301617876b102c50f758608843f9ccf9456a1b", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     private final String tableName;\n     private final URI uri;\n     private final boolean remotelyAccessible;\n    private final ImmutableList<HostAddress> addresses;\n     @JsonCreator\n     public ExampleSplit(", "fixed": "     private final String tableName;\n     private final URI uri;\n     private final boolean remotelyAccessible;\n    private final List<HostAddress> addresses;\n     @JsonCreator\n     public ExampleSplit(", "sourceBeforeFix": "ImmutableList<HostAddress>", "sourceAfterFix": "List<HostAddress>"}
{"problem": "public static void main ( java.lang.String [ ] args ) { TYPE_1 p = TYPE_1 . METHOD_1 ( ) ; TYPE_2 VAR_1 = p . METHOD_2 ( INT_1 ) . get ( 0 ) ; java.lang.System.out.println ( VAR_1 . METHOD_3 ( p ) . toString ( ) ) ; java.lang.System.out.println ( ( STRING_1 + ( VAR_1 . METHOD_4 ( ) ) ) ) ; java.lang.System.exit ( 0 ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_1 p = TYPE_1 . METHOD_1 ( ) ; TYPE_2 VAR_1 = p . METHOD_2 ( INT_1 ) . get ( 0 ) ; java.lang.System.out.println ( VAR_1 . METHOD_3 ( p ) . toString ( ) ) ; java.lang.System.exit ( 0 ) ; }\n"}
{"problem": "public static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( VAR_1 . getName ( ) , VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_4 . replaceAll ( STRING_1 , VAR_2 . format ( VAR_3 ) ) ) ; }\n", "fixed": "public static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( VAR_1 . getName ( ) , VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_4 . replace ( STRING_1 , VAR_2 . format ( VAR_3 ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( STRING_1 , 0 ) ; intent . METHOD_2 ( STRING_2 , VAR_3 . METHOD_3 ( ) ) ; METHOD_4 ( intent , 1 ) ; VAR_4 . METHOD_5 ( VAR_5 ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( STRING_1 , 0 ) ; intent . METHOD_2 ( STRING_2 , ( ( VAR_3 . METHOD_3 ( ) ) + 1 ) ) ; METHOD_4 ( intent , 1 ) ; VAR_4 . METHOD_5 ( VAR_5 ) ; }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_1 . METHOD_1 ( VAR_4 ) ; VAR_1 . METHOD_2 ( INT_1 , INT_2 ) ; VAR_1 . METHOD_3 ( INT_3 , INT_4 ) ; VAR_1 . METHOD_4 ( false ) ; VAR_1 . METHOD_5 ( true ) ; VAR_1 . add ( VAR_2 ) ; VAR_1 . METHOD_6 ( VAR_3 ) ; VAR_5 . METHOD_7 ( ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_1 . add ( VAR_2 ) ; VAR_1 . METHOD_6 ( VAR_3 ) ; VAR_1 . METHOD_1 ( VAR_4 ) ; VAR_1 . METHOD_2 ( INT_1 , INT_2 ) ; VAR_1 . METHOD_3 ( INT_3 , INT_4 ) ; VAR_1 . METHOD_4 ( false ) ; VAR_1 . METHOD_5 ( true ) ; VAR_5 . METHOD_7 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( this ) . METHOD_4 ( this ) ; TYPE_3 . METHOD_5 ( this , VAR_1 ) ; METHOD_6 ( true ) ; VAR_2 . METHOD_7 ( ( VAR_3 ? VAR_4 : VAR_5 ) ) ; VAR_2 . METHOD_8 ( ( VAR_3 ? VAR_6 : 0 ) ) ; METHOD_9 ( ) . METHOD_10 ( 0 , null , this ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( this ) . METHOD_4 ( this ) ; TYPE_3 . METHOD_5 ( this , VAR_1 ) ; METHOD_6 ( true ) ; VAR_2 . METHOD_7 ( ( VAR_3 ? VAR_4 : VAR_5 ) ) ; VAR_2 . METHOD_8 ( ( VAR_3 ? VAR_6 : 0 ) ) ; METHOD_9 ( ) . METHOD_10 ( 0 , null , this ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}
{"problem": "private int METHOD_1 ( java.lang.Integer [ ] VAR_1 ) { double [ ] VAR_2 = new double [ VAR_1 . length ] ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { VAR_2 [ i ] = ( ( double ) ( VAR_1 [ i ] ) ) ; } return TYPE_1 . select ( TYPE_1 . METHOD_2 ( ) , VAR_2 ) ; }\n", "fixed": "private int METHOD_1 ( java.lang.Integer [ ] VAR_1 ) { double [ ] VAR_2 = new double [ VAR_1 . length ] ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { VAR_2 [ i ] = ( ( double ) ( VAR_1 [ i ] ) ) ; } return TYPE_1 . select ( VAR_2 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 type , TYPE_3 VAR_1 , TYPE_4 VAR_2 , TYPE_5 context ) { if ( TYPE_6 . METHOD_2 ( type ) ) { return this ; } if ( ( this . value ) == null ) { return null ; } TYPE_1 VAR_3 = this . value . METHOD_1 ( type , VAR_1 , VAR_2 , context ) ; if ( VAR_3 == null ) { return null ; } this . value = VAR_3 ; return this ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 type , TYPE_3 VAR_1 , TYPE_4 VAR_2 , TYPE_5 context ) { if ( TYPE_6 . METHOD_2 ( type ) ) { return this ; } if ( ( this . value ) == null ) { return null ; } return this . value . METHOD_1 ( type , VAR_1 , VAR_2 , context ) ; }\n"}
{"fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     public static DetailAST annotatingWhat(DetailAST ast)\n     {\n         if (ast == null) {\n            throw new NullPointerException(\"the ast is null\");\n         }\n         if (ast.getType() != TokenTypes.ANNOTATION) {", "fixed": "     public static DetailAST annotatingWhat(DetailAST ast)\n     {\n         if (ast == null) {\n            throw new IllegalArgumentException(\"the ast is null\");\n         }\n         if (ast.getType() != TokenTypes.ANNOTATION) {", "sourceBeforeFix": "new NullPointerException(\"the ast is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the ast is null\")"}
{"problem": "private java.lang.String [ ] [ ] METHOD_1 ( ) { for ( int i = VAR_1 . size ( ) ; i > 0 ; i -- ) delete ( i ) ; java.lang.String VAR_2 = new java.lang.String ( STRING_1 ) ; VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_2 ( ) ; return METHOD_3 ( new java.util.ArrayList < TYPE_1 > ( ) , VAR_2 ) ; }\n", "fixed": "private java.lang.String [ ] [ ] METHOD_1 ( ) { for ( int i = VAR_1 . size ( ) ; i > 0 ; i -- ) delete ( null , i ) ; java.lang.String VAR_2 = new java.lang.String ( STRING_1 ) ; VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_2 ( ) ; return METHOD_3 ( new java.util.ArrayList < TYPE_1 > ( ) , VAR_2 ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"problem": "private TYPE_1 < TYPE_2 < TYPE_3 > > METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( VAR_2 . METHOD_2 ( ) ) != null ) && ( ( VAR_2 . METHOD_2 ( ) . length ( ) ) > 0 ) ) { TYPE_4 . METHOD_3 ( STRING_1 , ( STRING_2 + VAR_1 ) ) ; return VAR_3 . METHOD_4 ( VAR_4 , VAR_1 ) ; } else { TYPE_4 . METHOD_3 ( STRING_1 , ( STRING_3 + VAR_1 ) ) ; return VAR_5 . METHOD_4 ( VAR_4 , VAR_1 ) ; } }\n", "fixed": "private TYPE_1 < TYPE_2 < TYPE_3 > > METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( VAR_2 . METHOD_2 ( ) ) != null ) && ( ( VAR_2 . METHOD_2 ( ) . length ( ) ) > 0 ) ) { return VAR_3 . METHOD_4 ( VAR_4 , VAR_1 ) ; } else { return VAR_5 . METHOD_4 ( VAR_4 , VAR_1 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "62e7eb06d62b50ba6a03c25070c6ee1164c0962f", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "      * creation\n      */\n     protected ConnectionFactory createListenerConnectionFactory() {\n        return getConnectionFactory();\n     }\n     /**", "fixed": "      * creation\n      */\n     protected ConnectionFactory createListenerConnectionFactory() {\n        return getOrCreateConnectionFactory();\n     }\n     /**", "sourceBeforeFix": "getConnectionFactory()", "sourceAfterFix": "getOrCreateConnectionFactory()"}
{"fixCommitSHA1": "82b4e26900db7848de77ff9ed57682222c4fa517", "projectName": "jersey.jersey", "bugType": "Change Identifier Used", "problem": "                         warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\\n');\n                         break;\n                     case HINT:\n                        warnings.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\\n');\n                         break;\n                 }\n             }", "fixed": "                         warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\\n');\n                         break;\n                     case HINT:\n                        hints.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\\n');\n                         break;\n                 }\n             }", "sourceBeforeFix": "warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))", "sourceAfterFix": "hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))"}
{"fixCommitSHA1": "47ac10ca185ef128ccdd055cb83fea5def7428c3", "projectName": "alibaba.canal", "bugType": "Change Binary Operator", "problem": "                     if (batchMode.isMemSize()) {\n                         ackMemSize.addAndGet(memsize);\n                        for (long index = sequence + 1; index <= next; index++) {\nentries[getIndex(index)] = null;\n                         }\n                     }", "fixed": "                     if (batchMode.isMemSize()) {\n                         ackMemSize.addAndGet(memsize);\n                        for (long index = sequence + 1; index < next; index++) {\nentries[getIndex(index)] = null;\n                         }\n                     }", "sourceBeforeFix": "index <= next", "sourceAfterFix": "index < next"}
{"problem": "public void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) != null ) { android.view.View VAR_1 = getView ( ) ; android.widget.LinearLayout VAR_2 = ( ( android.widget.LinearLayout ) ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) ; TYPE_2 VAR_4 = new TYPE_2 ( getContext ( ) ) ; METHOD_4 ( ) ; VAR_4 . setText ( VAR_5 . toString ( ) ) ; VAR_2 . METHOD_5 ( VAR_4 ) ; TYPE_1 . METHOD_6 ( null ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) != null ) { android.view.View VAR_1 = getView ( ) ; android.widget.LinearLayout VAR_2 = ( ( android.widget.LinearLayout ) ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) ; TYPE_2 VAR_4 = new TYPE_2 ( getContext ( ) ) ; VAR_4 . setText ( TYPE_1 . METHOD_2 ( ) ) ; VAR_2 . METHOD_5 ( VAR_4 ) ; TYPE_1 . METHOD_6 ( null ) ; } }\n"}
{"problem": "private static void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return ; } VAR_1 = new java.util.Properties ( ) ; try { java.io.InputStream VAR_2 = VAR_3 class . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_2 . METHOD_4 ( ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_5 ( ) ; } }\n", "fixed": "private static void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return ; } VAR_1 = new java.util.Properties ( ) ; try ( java.io.InputStream VAR_2 = VAR_3 class . METHOD_2 ( STRING_1 ) ) { VAR_1 . METHOD_3 ( VAR_2 ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_5 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.util.List < TYPE_1 > list , int VAR_1 , int VAR_2 ) { if ( VAR_2 > 0 ) { this . VAR_3 = VAR_2 ; } if ( VAR_1 > 0 ) { this . VAR_4 = VAR_1 ; } METHOD_2 ( list ) ; METHOD_3 ( ) ; boolean VAR_5 = METHOD_4 ( ) ; VAR_6 . METHOD_5 ( VAR_5 ) ; if ( ! VAR_5 ) { METHOD_6 ( null ) ; } else { METHOD_7 ( ) ; } VAR_6 . METHOD_8 ( ) ; }\n", "fixed": "public void METHOD_1 ( java.util.List < TYPE_1 > list , int VAR_1 , int VAR_2 ) { if ( VAR_2 > 0 ) { this . VAR_3 = VAR_2 ; } if ( VAR_1 >= 0 ) { this . VAR_4 = VAR_1 ; } METHOD_2 ( list ) ; METHOD_3 ( ) ; boolean VAR_5 = METHOD_4 ( ) ; VAR_6 . METHOD_5 ( VAR_5 ) ; if ( ! VAR_5 ) { METHOD_6 ( null ) ; } else { METHOD_7 ( ) ; } VAR_6 . METHOD_8 ( ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 15808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n     /**", "fixed": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 10808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n     /**", "sourceBeforeFix": "id=15803", "sourceAfterFix": "id=10803"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( METHOD_2 ( ) . METHOD_3 ( ) ) > 1 ) { METHOD_2 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; } else if ( VAR_2 != null ) { if ( ! ( VAR_2 . METHOD_6 ( VAR_3 ) ) ) { VAR_2 . METHOD_7 ( VAR_3 ) ; } } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( METHOD_2 ( ) . METHOD_3 ( ) ) > 1 ) { METHOD_2 ( ) . METHOD_4 ( ) ; } else if ( VAR_2 != null ) { if ( ! ( VAR_2 . METHOD_6 ( VAR_3 ) ) ) { VAR_2 . METHOD_7 ( VAR_3 ) ; } } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_1 b = VAR_1 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ( ( VAR_2 ) * INT_1 ) , 0 ) ) ; return new TYPE_1 ( ( ( INT_1 * ( VAR_2 ) ) + ( b . METHOD_3 ( ) ) ) , b . METHOD_4 ( ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_2 ( ( ( VAR_2 ) * INT_1 ) , 0 ) ) ; TYPE_1 b = VAR_1 . METHOD_1 ( ) ; return new TYPE_1 ( ( ( INT_1 * ( VAR_2 ) ) + ( b . METHOD_3 ( ) ) ) , b . METHOD_4 ( ) ) ; }\n"}
{"problem": "private static void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { } } ) ; } catch ( TYPE_3 VAR_1 ) { throw new TYPE_4 ( VAR_1 ) ; } catch ( TYPE_5 VAR_1 ) { throw new TYPE_4 ( VAR_1 ) ; } }\n", "fixed": "public static void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { } } ) ; } catch ( TYPE_3 VAR_1 ) { throw new TYPE_4 ( VAR_1 ) ; } catch ( TYPE_5 VAR_1 ) { throw new TYPE_4 ( VAR_1 ) ; } }\n"}
{"problem": "public static boolean METHOD_1 ( java.lang.String name , int VAR_1 ) { if ( VAR_2 . METHOD_2 ( name ) ) { VAR_2 . get ( name ) . METHOD_3 ( VAR_1 ) ; return false ; } else { TYPE_1 p = new TYPE_1 ( name , VAR_1 ) ; VAR_2 . put ( name , p ) ; VAR_3 . add ( p ) ; return true ; } }\n", "fixed": "public static boolean METHOD_1 ( java.lang.String name , int VAR_1 ) { TYPE_1 p = new TYPE_1 ( name , VAR_1 ) ; VAR_3 . add ( p ) ; if ( VAR_2 . METHOD_2 ( name ) ) { VAR_2 . get ( name ) . METHOD_3 ( VAR_1 ) ; return false ; } else { VAR_2 . put ( name , p ) ; return true ; } }\n"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class) })\n    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId);\n     @PUT\n     @Consumes({ \"application/json\", \"application/xml\" })", "fixed": "         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class) })\n    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId) throws Exception;\n     @PUT\n     @Consumes({ \"application/json\", \"application/xml\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : this . VAR_3 . METHOD_2 ( ) ) { if ( VAR_1 . contains ( new java.lang.Integer ( VAR_2 . getId ( ) ) . toString ( ) ) ) { VAR_2 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) + 1 ) ) ; } } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : this . VAR_3 . METHOD_2 ( ) ) { if ( VAR_1 . contains ( java.lang.Integer.toString ( VAR_2 . getId ( ) ) ) ) { VAR_2 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) + 1 ) ) ; } } }\n"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "fixed": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private static void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; for ( TYPE_2 VAR_2 : VAR_1 . METHOD_8 ( ) ) { TYPE_3 VAR_3 = VAR_2 . METHOD_9 ( ) ; if ( VAR_3 . METHOD_10 ( STRING_1 ) ) { VAR_3 . get ( STRING_1 ) . METHOD_11 ( true ) ; } } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; for ( TYPE_2 VAR_2 : VAR_1 . METHOD_8 ( ) ) { TYPE_3 VAR_3 = VAR_2 . METHOD_9 ( ) ; if ( VAR_3 . METHOD_10 ( STRING_1 ) ) { VAR_3 . get ( STRING_1 ) . setEnabled ( true ) . METHOD_11 ( true ) ; } } }\n"}
{"problem": "public java.util.Map < java.lang.String , java.lang.Double > METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) { java.lang.System.err.println ( STRING_1 ) ; return null ; } if ( ( VAR_2 . get ( VAR_1 ) ) == null ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; METHOD_2 ( VAR_3 ) ; } return VAR_2 . get ( VAR_1 ) ; }\n", "fixed": "public java.util.Map < java.lang.String , java.lang.Double > METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) { java.lang.System.err.println ( STRING_1 ) ; return null ; } if ( ( VAR_2 . get ( VAR_1 ) ) == null ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; VAR_3 . add ( VAR_1 ) ; METHOD_2 ( VAR_3 ) ; } return VAR_2 . get ( VAR_1 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private synchronized void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_1 . METHOD_4 ( new TYPE_1 [ VAR_1 . size ( ) ] ) ) ; VAR_1 . METHOD_5 ( ) ; } }\n", "fixed": "private synchronized void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_1 . METHOD_4 ( new TYPE_1 [ VAR_1 . size ( ) ] ) ) ; VAR_1 . METHOD_5 ( ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 = METHOD_2 ( VAR_1 ) ; int VAR_2 = ( VAR_3 . METHOD_3 ( ) ) + 1 ; if ( VAR_2 > 1 ) return VAR_1 ; VAR_1 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( VAR_1 ) ; return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 = METHOD_2 ( VAR_1 ) ; int VAR_2 = ( ( VAR_3 ) == null ) ? 1 : ( VAR_3 . METHOD_3 ( ) ) + 1 ; if ( VAR_2 > 1 ) return VAR_1 ; VAR_1 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( VAR_1 ) ; return VAR_1 ; }\n"}
{"problem": "private double METHOD_1 ( ) { double [ ] values = METHOD_2 ( ) ; double result = 1.0 ; for ( int i = 0 ; i < ( values . length ) ; i ++ ) { result *= java.lang.Math.pow ( values [ i ] , ( 1.0 / ( ( double ) ( values . length ) ) ) ) ; } return result ; }\n", "fixed": "private double METHOD_1 ( ) { double [ ] values = METHOD_2 ( ) ; double result = 1.0 ; for ( int i = 0 ; i < ( values . length ) ; i ++ ) { result *= java.lang.Math.pow ( ( ( values [ i ] ) + 1.0 ) , ( 1.0 / ( ( double ) ( values . length ) ) ) ) ; } return result - 1.0 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_2 = true ; TYPE_3 VAR_3 = new TYPE_3 ( new TYPE_4 ( VAR_4 , VAR_5 ) , new TYPE_4 ( VAR_6 , VAR_7 ) ) ; TYPE_2 . METHOD_2 ( STRING_1 , VAR_3 . toString ( ) ) ; TYPE_5 VAR_8 = TYPE_6 . METHOD_3 ( VAR_3 , INT_1 ) ; VAR_9 . METHOD_4 ( VAR_8 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_9 ) == null ) return ; TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_2 = true ; TYPE_3 VAR_3 = new TYPE_3 ( new TYPE_4 ( VAR_4 , VAR_5 ) , new TYPE_4 ( VAR_6 , VAR_7 ) ) ; TYPE_2 . METHOD_2 ( STRING_1 , VAR_3 . toString ( ) ) ; TYPE_5 VAR_8 = TYPE_6 . METHOD_3 ( VAR_3 , INT_1 ) ; VAR_9 . METHOD_4 ( VAR_8 ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { for ( int i = 0 ; i < ( height ) ; i ++ ) { for ( int j = 0 ; j < ( VAR_1 ) ; j ++ ) { VAR_2 [ i ] [ j ] = TYPE_1 . METHOD_2 ( METHOD_3 ( j , i , VAR_3 ) ) ; } } }\n", "fixed": "private void METHOD_1 ( ) { for ( int i = 0 ; i < ( height ) ; i ++ ) { for ( int j = 0 ; j < ( VAR_1 ) ; j ++ ) { VAR_2 [ i ] [ j ] = METHOD_3 ( j , i , VAR_3 ) ; } } }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.Object VAR_3 ) { if ( ( getValue ( VAR_2 ) . equals ( VAR_3 ) ) && ( ( ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( ! ( METHOD_3 ( VAR_1 ) ) ) ) || ( ( ( java.lang.Boolean ) ( getValue ( VAR_4 ) ) ) && ( ! ( ( METHOD_4 ( ) ) == VAR_1 ) ) ) ) ) { return TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.Object VAR_3 ) { if ( ( ( ( getValue ( VAR_2 ) . equals ( VAR_3 ) ) && ( ! ( METHOD_2 ( VAR_1 ) ) ) ) && ( ! ( METHOD_3 ( VAR_1 ) ) ) ) && ( ( ! ( ( java.lang.Boolean ) ( getValue ( VAR_4 ) ) ) ) || ( ( METHOD_4 ( ) ) == VAR_1 ) ) ) { return TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; } return true ; }\n"}
{"problem": "public void METHOD_1 ( final int target ) { TYPE_1 . METHOD_2 ( ) ; VAR_1 = TYPE_2 . show ( this , STRING_1 , STRING_2 ) ; new java.lang.Thread ( new TYPE_3 ( ) { public void METHOD_3 ( ) { METHOD_4 ( target ) ; } } ) . start ( ) ; TYPE_1 . METHOD_5 ( ) ; }\n", "fixed": "private void METHOD_1 ( final int target ) { TYPE_1 . METHOD_2 ( ) ; VAR_1 = TYPE_2 . show ( this , STRING_1 , STRING_2 ) ; new java.lang.Thread ( new TYPE_3 ( ) { public void METHOD_3 ( ) { METHOD_4 ( target ) ; } } ) . start ( ) ; TYPE_1 . METHOD_5 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; VAR_2 . METHOD_2 ( 0 ) ; VAR_2 . METHOD_3 ( 0 ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( ( VAR_3 ) - > { VAR_4 . METHOD_6 ( VAR_5 . METHOD_7 ( ) , VAR_5 . METHOD_8 ( ) ) ; } ) ; VAR_1 . METHOD_9 ( ) . METHOD_5 ( ( VAR_3 ) - > { VAR_4 . METHOD_6 ( VAR_5 . METHOD_7 ( ) , VAR_5 . METHOD_8 ( ) ) ; } ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; VAR_2 . METHOD_2 ( 0 ) ; VAR_2 . METHOD_3 ( 0 ) ; VAR_5 . METHOD_4 ( ) . METHOD_5 ( ( VAR_3 ) - > { VAR_4 . METHOD_6 ( VAR_5 . METHOD_7 ( ) , VAR_5 . METHOD_8 ( ) ) ; } ) ; VAR_5 . METHOD_9 ( ) . METHOD_5 ( ( VAR_3 ) - > { VAR_4 . METHOD_6 ( VAR_5 . METHOD_7 ( ) , VAR_5 . METHOD_8 ( ) ) ; } ) ; }\n"}
{"problem": "public void METHOD_1 ( long VAR_1 ) throws java.io.IOException { synchronized ( VAR_2 ) { METHOD_2 ( ) ; if ( ( VAR_3 ) >= ( str . size ( ) ) ) return ; VAR_3 += VAR_1 ; if ( 0 > ( VAR_3 ) ) VAR_3 = 0 ; if ( ( VAR_3 ) > ( str . size ( ) ) ) VAR_3 = str . size ( ) ; } }\n", "fixed": "public void METHOD_1 ( long VAR_1 ) throws java.io.IOException { synchronized ( VAR_2 ) { METHOD_2 ( ) ; VAR_3 += VAR_1 ; if ( 0 > ( VAR_3 ) ) VAR_3 = 0 ; if ( ( VAR_3 ) > ( str . size ( ) ) ) VAR_3 = str . size ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.util.Properties VAR_1 ) { TYPE_1 source = new TYPE_2 ( ) ; java.util.List < java.lang.Object > list = null ; switch ( VAR_2 ) { case STRING_1 : list = source . METHOD_2 ( VAR_1 ) ; TYPE_3 target = new TYPE_4 ( ) ; target . METHOD_3 ( list ) ; break ; case STRING_2 : break ; case STRING_3 : break ; } }\n", "fixed": "public void METHOD_1 ( java.util.Properties VAR_1 ) { TYPE_1 source = new TYPE_2 ( ) ; java.util.List < java.lang.Object > list = null ; switch ( VAR_2 ) { case STRING_1 : list = source . METHOD_2 ( VAR_1 ) ; TYPE_3 target = new TYPE_4 ( ) ; target . METHOD_3 ( list , VAR_1 ) ; break ; case STRING_2 : break ; case STRING_3 : break ; } }\n"}
{"problem": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { final TYPE_3 VAR_2 = new TYPE_3 ( TYPE_4 . METHOD_2 ( VAR_1 ) ) ; return new TYPE_1 ( ) { public void METHOD_3 ( TYPE_5 VAR_3 ) { VAR_2 . METHOD_4 ( VAR_3 ) ; } public void METHOD_5 ( TYPE_5 VAR_3 , long VAR_4 ) { VAR_2 . METHOD_6 ( VAR_3 , VAR_4 ) ; } public void METHOD_7 ( TYPE_5 VAR_3 ) { VAR_2 . METHOD_8 ( VAR_3 ) ; } } ; }\n", "fixed": "private static TYPE_1 METHOD_1 ( final TYPE_3 VAR_2 ) { return new TYPE_1 ( ) { public void METHOD_3 ( TYPE_5 VAR_3 ) { VAR_2 . METHOD_4 ( VAR_3 ) ; } public void METHOD_5 ( TYPE_5 VAR_3 , long VAR_4 ) { VAR_2 . METHOD_6 ( VAR_3 , VAR_4 ) ; } public void METHOD_7 ( TYPE_5 VAR_3 ) { VAR_2 . METHOD_8 ( VAR_3 ) ; } } ; }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( new TYPE_3 < TYPE_2 > ( ) { public void METHOD_5 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_4 < TYPE_2 > response ) { METHOD_6 ( response . METHOD_7 ( ) ) ; } public void METHOD_8 ( TYPE_1 < TYPE_2 > VAR_1 , java.lang.Throwable t ) { } } ) ; }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_4 ( new TYPE_3 < TYPE_2 > ( ) { public void METHOD_5 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_4 < TYPE_2 > response ) { METHOD_6 ( response . METHOD_7 ( ) ) ; } public void METHOD_8 ( TYPE_1 < TYPE_2 > VAR_1 , java.lang.Throwable t ) { } } ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { int VAR_3 = VAR_1 . METHOD_2 ( getString ( VAR_4 ) ) ; if ( VAR_3 != ( - 1 ) ) { long id = VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( id ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_1 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_2 ( getString ( VAR_4 ) ) ; if ( VAR_3 != ( - 1 ) ) { long id = VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( id ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; VAR_3 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; VAR_3 . METHOD_8 ( ( ( ( VAR_4 ) + STRING_1 ) + ( VAR_5 ) ) ) ; VAR_3 . METHOD_9 ( VAR_1 . METHOD_10 ( ) . toString ( ) ) ; VAR_3 . METHOD_11 ( VAR_6 ) ; return VAR_2 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; VAR_2 . METHOD_8 ( ( ( ( VAR_4 ) + STRING_1 ) + ( VAR_5 ) ) ) ; VAR_2 . METHOD_9 ( VAR_1 . METHOD_10 ( ) . toString ( ) ) ; VAR_2 . METHOD_11 ( VAR_6 ) ; return VAR_2 ; }\n"}
{"problem": "public boolean METHOD_1 ( int x , int y ) { boolean VAR_1 = true ; try { if ( ( VAR_2 [ x ] [ y ] ) >= INT_1 ) { java.lang.System.out.println ( ( STRING_1 + ( VAR_2 [ x ] [ y ] ) ) ) ; VAR_1 = false ; } } catch ( java.lang.Exception VAR_3 ) { java.lang.System.out.println ( ( STRING_2 + VAR_3 ) ) ; } return VAR_1 ; }\n", "fixed": "public boolean METHOD_1 ( int x , int y ) { boolean VAR_1 = true ; try { if ( ( VAR_2 [ y ] [ x ] ) >= INT_1 ) { VAR_1 = false ; } } catch ( java.lang.Exception VAR_3 ) { java.lang.System.out.println ( ( STRING_2 + VAR_3 ) ) ; } return VAR_1 ; }\n"}
{"problem": "public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . isEmpty ( ) ) || ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 ) ) ) { return true ; } TYPE_2 VAR_3 = TYPE_2 . get ( VAR_1 ) ; return ! ( VAR_3 . METHOD_3 ( ) ) ; }\n", "fixed": "public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . isEmpty ( ) ) { return true ; } if ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 ) ) { return false ; } TYPE_2 VAR_3 = TYPE_2 . get ( VAR_1 ) ; return ! ( VAR_3 . METHOD_3 ( ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( ( STRING_1 + VAR_1 ) ) ; TYPE_1 VAR_2 = this . VAR_3 . METHOD_1 ( VAR_1 ) ; for ( TYPE_2 VAR_4 : VAR_1 . METHOD_2 ( ) ) { VAR_4 . METHOD_3 ( ) . add ( VAR_1 ) ; this . VAR_5 . METHOD_4 ( VAR_4 ) ; } return VAR_2 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = this . VAR_3 . METHOD_1 ( VAR_1 ) ; for ( TYPE_2 VAR_4 : VAR_1 . METHOD_2 ( ) ) { VAR_4 . METHOD_3 ( ) . add ( VAR_1 ) ; this . VAR_5 . METHOD_4 ( VAR_4 ) ; } return VAR_2 ; }\n"}
{"problem": "public void handle ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) < ( ( VAR_3 . size ( ) ) - 1 ) ) { TYPE_2 VAR_4 = VAR_3 . get ( VAR_2 ) ; TYPE_2 VAR_5 = VAR_3 . get ( ( ( VAR_2 ) + 1 ) ) ; VAR_3 . set ( VAR_2 , VAR_5 ) ; VAR_3 . set ( ( ( VAR_2 ) + 1 ) , VAR_4 ) ; METHOD_1 ( ( ( VAR_2 ) + 1 ) ) ; } }\n", "fixed": "public void handle ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) > 0 ) { TYPE_2 VAR_4 = VAR_3 . get ( VAR_2 ) ; VAR_3 . set ( VAR_2 , VAR_3 . get ( ( ( VAR_2 ) - 1 ) ) ) ; VAR_3 . set ( ( ( VAR_2 ) - 1 ) , VAR_4 ) ; METHOD_1 ( ( ( VAR_2 ) - 1 ) ) ; } }\n"}
{"problem": "public void start ( ) { try { VAR_1 = TYPE_1 . METHOD_1 ( ) . METHOD_2 ( new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 } ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; this . VAR_3 = VAR_1 . METHOD_4 ( ) ; this . VAR_4 = VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_2 . METHOD_7 ( ) ; } catch ( java.lang.Exception VAR_5 ) { } }\n", "fixed": "public void start ( ) { try { VAR_1 = TYPE_1 . METHOD_1 ( ) . METHOD_2 ( new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 } ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; this . VAR_3 = VAR_1 . METHOD_4 ( ) ; METHOD_6 ( ) ; VAR_2 . METHOD_7 ( ) ; } catch ( java.lang.Exception VAR_5 ) { } }\n"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 cacheRecordStore.updateRecordWithExpiry(keyData, value, record, expiryPolicy, now, false);\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNano(System.nanoTime() - start);\n                 }\n                 break;\n             case REMOVE:", "fixed": "                 cacheRecordStore.updateRecordWithExpiry(keyData, value, record, expiryPolicy, now, false);\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 break;\n             case REMOVE:", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public boolean equals ( java.lang.Object obj ) { if ( obj == null ) { return false ; } if ( ( getClass ( ) ) != ( obj . getClass ( ) ) ) { return false ; } final TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; return TYPE_2 . equals ( this . VAR_2 , VAR_3 ) ; }\n", "fixed": "public boolean equals ( java.lang.Object obj ) { if ( obj == null ) { return false ; } if ( ( getClass ( ) ) != ( obj . getClass ( ) ) ) { return false ; } final TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; return TYPE_2 . equals ( this . name , VAR_1 . name ) ; }\n"}
{"problem": "public static final void METHOD_1 ( final TYPE_1 TYPE_2 , final double VAR_1 , double VAR_2 ) { final java.lang.String VAR_3 = TYPE_2 . METHOD_2 ( ) . getName ( ) ; while ( ( ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) > VAR_1 ) | ( VAR_2 < 0 ) ) { VAR_2 -= FLOAT_1 ; TYPE_2 . METHOD_5 ( new TYPE_3 ( VAR_3 , VAR_2 ) ) ; } }\n", "fixed": "public static final void METHOD_1 ( final TYPE_1 TYPE_2 , final double VAR_1 , double VAR_2 ) { final java.lang.String VAR_3 = TYPE_2 . METHOD_2 ( ) . getName ( ) ; while ( ( ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) > VAR_1 ) && ( VAR_2 > 0 ) ) { VAR_2 -= FLOAT_1 ; TYPE_2 . METHOD_5 ( new TYPE_3 ( VAR_3 , VAR_2 ) ) ; } }\n"}
{"fixCommitSHA1": "ffdbddae1854ebb628466d7c5ec5248f1a9b5459", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "         final List<String> perms = Lists.newArrayList(permissions);\n         perms.removeAll(this.permissions.userSelfEditPermissions(getName()));\n        fields.put(PERMISSIONS, permissions);\n     }\n     @Override", "fixed": "         final List<String> perms = Lists.newArrayList(permissions);\n         perms.removeAll(this.permissions.userSelfEditPermissions(getName()));\n        fields.put(PERMISSIONS, perms);\n     }\n     @Override", "sourceBeforeFix": "fields.put(PERMISSIONS,permissions)", "sourceAfterFix": "fields.put(PERMISSIONS,perms)"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 . i ( STRING_1 , ( ( VAR_1 . METHOD_2 ( ) ) + STRING_2 ) ) ; if ( ( VAR_1 . METHOD_2 ( ) ) >= ( VAR_2 ) ) { java.lang.String line = TYPE_2 . getContext ( ) . getString ( VAR_3 ) ; line = line . METHOD_3 ( STRING_3 , java.lang.String . METHOD_4 ( VAR_2 ) ) ; TYPE_3 . METHOD_5 ( TYPE_2 . getContext ( ) , line , VAR_4 ) . show ( ) ; return ; } VAR_1 . METHOD_6 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) >= ( VAR_2 ) ) { java.lang.String line = TYPE_2 . getContext ( ) . getString ( VAR_3 ) ; line = line . METHOD_3 ( STRING_3 , java.lang.String . METHOD_4 ( VAR_2 ) ) ; TYPE_3 . METHOD_5 ( TYPE_2 . getContext ( ) , line , VAR_4 ) . show ( ) ; return ; } VAR_1 . METHOD_6 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 = TYPE_1 . METHOD_3 ( ) ; VAR_2 = TYPE_1 . METHOD_3 ( ) ; VAR_3 = 0 ; VAR_4 = 0 ; VAR_5 = false ; VAR_6 = false ; VAR_7 = new TYPE_2 ( ) ; VAR_7 . METHOD_4 ( new TYPE_3 ( ) { public void METHOD_5 ( ) { METHOD_6 ( ) ; java.lang.System.out.println ( STRING_1 ) ; METHOD_7 ( ) ; } } , INT_1 , INT_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 = TYPE_1 . METHOD_3 ( ) ; VAR_2 = TYPE_1 . METHOD_3 ( ) ; VAR_3 = 0 ; VAR_4 = 0 ; VAR_5 = false ; VAR_6 = false ; VAR_7 = new TYPE_2 ( ) ; VAR_7 . METHOD_4 ( new TYPE_3 ( ) { public void METHOD_5 ( ) { METHOD_6 ( ) ; METHOD_7 ( ) ; } } , INT_1 , INT_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_3 ( ) ; int VAR_3 = INT_1 ; TYPE_4 . assertTrue ( ( ( VAR_2 . size ( ) ) == VAR_3 ) , ( ( ( ( ( ( STRING_2 + ( TYPE_5 . METHOD_4 ( ) ) ) + STRING_3 ) + VAR_3 ) + ( TYPE_5 . METHOD_4 ( ) ) ) + STRING_4 ) + ( VAR_2 . size ( ) ) ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_3 ( ) ; int VAR_3 = 1 ; TYPE_4 . assertTrue ( ( ( VAR_2 . size ( ) ) == VAR_3 ) , ( ( ( ( ( ( STRING_2 + ( TYPE_5 . METHOD_4 ( ) ) ) + STRING_3 ) + VAR_3 ) + ( TYPE_5 . METHOD_4 ( ) ) ) + STRING_4 ) + ( VAR_2 . size ( ) ) ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( int x , int y ) { if ( ( ( ( x < 0 ) || ( y < 0 ) ) || ( x > ( VAR_1 ) ) ) || ( y > ( VAR_2 ) ) ) { return null ; } else { return VAR_3 [ x ] [ y ] . METHOD_1 ( ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( int x , int y ) { if ( ( ( ( x < 0 ) || ( y < 0 ) ) || ( x >= ( VAR_1 ) ) ) || ( y >= ( VAR_2 ) ) ) { return null ; } else { return VAR_3 [ x ] [ y ] . METHOD_1 ( ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"problem": "public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) throws TYPE_2 { TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 ) { TYPE_3 . METHOD_3 ( ) . METHOD_1 ( VAR_1 ) ; } return TYPE_3 . METHOD_4 ( ) . METHOD_1 ( VAR_1 ) ; }\n", "fixed": "public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) throws TYPE_2 { TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 ) { return TYPE_3 . METHOD_3 ( ) . METHOD_1 ( VAR_1 ) ; } return TYPE_3 . METHOD_4 ( ) . METHOD_1 ( VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 . METHOD_2 ( ( ( ( VAR_3 ) + STRING_1 ) + ( VAR_4 ) ) ) ; METHOD_3 ( VAR_5 ) . METHOD_4 ( VAR_6 ) ; METHOD_3 ( VAR_7 ) . METHOD_4 ( VAR_6 ) ; VAR_1 . METHOD_5 ( ) ; METHOD_3 ( VAR_8 ) . METHOD_4 ( VAR_9 ) ; METHOD_3 ( VAR_10 ) . METHOD_4 ( VAR_9 ) ; METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 . METHOD_2 ( ( ( ( VAR_3 ) + STRING_1 ) + ( VAR_4 ) ) ) ; METHOD_3 ( VAR_5 ) . METHOD_4 ( VAR_6 ) ; METHOD_3 ( VAR_7 ) . METHOD_4 ( VAR_6 ) ; VAR_1 . METHOD_5 ( ) ; METHOD_3 ( VAR_8 ) . METHOD_4 ( VAR_9 ) ; METHOD_3 ( VAR_10 ) . METHOD_4 ( VAR_9 ) ; METHOD_6 ( ( ( ( VAR_3 ) + STRING_1 ) + ( VAR_4 ) ) ) ; }\n"}
{"problem": "public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( INT_1 , STRING_1 , new TYPE_2 ( ) . METHOD_3 ( STRING_1 ) ) ; TYPE_1 . METHOD_4 ( new TYPE_3 ( VAR_1 ) , new java.lang.Object [ ] { VAR_2 , VAR_3 , new TYPE_3 ( VAR_4 , 1 , INT_2 ) } ) ; }\n", "fixed": "public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( STRING_1 ) , STRING_1 ) ; TYPE_1 . METHOD_4 ( new TYPE_3 ( VAR_1 ) , new java.lang.Object [ ] { VAR_2 , VAR_3 , new TYPE_3 ( VAR_4 , 1 , INT_2 ) } ) ; }\n"}
{"problem": "private java.lang.String METHOD_1 ( ) { java.lang.String line ; java.lang.String VAR_1 = STRING_1 ; try ( java.util.Scanner VAR_2 = new java.util.Scanner ( new java.io.FileReader ( STRING_2 ) ) ) { while ( VAR_2 . METHOD_2 ( ) ) { line = VAR_2 . METHOD_3 ( ) . METHOD_4 ( \"\\n\" ) ; VAR_1 += line ; } return VAR_1 ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } return null ; }\n", "fixed": "private java.lang.String METHOD_1 ( ) { java.lang.String line ; java.lang.String VAR_1 = STRING_1 ; try ( java.util.Scanner VAR_2 = new java.util.Scanner ( new java.io.FileReader ( STRING_2 ) ) ) { while ( VAR_2 . METHOD_2 ( ) ) { line = ( VAR_2 . METHOD_3 ( ) ) + \"\\n\" ; VAR_1 += line ; } return VAR_1 . trim ( ) ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } return null ; }\n"}
{"problem": "private void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 . METHOD_2 ( ) ) <= 0 ) { return ; } final int VAR_2 = METHOD_3 ( ) ; byte [ ] buf = new byte [ VAR_2 ] ; int VAR_3 ; while ( ( VAR_3 = VAR_1 . METHOD_4 ( buf ) ) >= 0 ) { VAR_4 . update ( buf , 0 , VAR_3 ) ; } }\n", "fixed": "private void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 . METHOD_2 ( ) ) <= 0 ) { return ; } final int VAR_2 = METHOD_3 ( ) ; byte [ ] buf = new byte [ VAR_2 ] ; int VAR_3 ; while ( ( VAR_3 = METHOD_4 ( buf ) ) >= 0 ) { if ( ( VAR_4 ) != null ) { VAR_4 . update ( buf , 0 , VAR_3 ) ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a4c66dc2824221d05e1fcfd54e4f1f4e2c125c40", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "     @Override\n     protected void wakeup(boolean inEventLoop) {\n        if (wakenUp.compareAndSet(false, true)) {\n             selector.wakeup();\n         }\n     }", "fixed": "     @Override\n     protected void wakeup(boolean inEventLoop) {\n        if (!inEventLoop && wakenUp.compareAndSet(false, true)) {\n             selector.wakeup();\n         }\n     }", "sourceBeforeFix": "processSelectedKeys()", "sourceAfterFix": "runAllTasks()"}
{"problem": "public void set ( double time , TYPE_1 position , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_3 VAR_3 ) { METHOD_1 ( time ) ; this . position . set ( position ) ; this . VAR_1 . set ( VAR_1 ) ; this . VAR_2 . set ( VAR_2 ) ; this . VAR_3 . set ( VAR_3 ) ; }\n", "fixed": "public void set ( double time , TYPE_1 position , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_3 VAR_3 ) { this . time . set ( time ) ; this . position . set ( position ) ; this . VAR_1 . set ( VAR_1 ) ; this . VAR_2 . set ( VAR_2 ) ; this . VAR_3 . set ( VAR_3 ) ; }\n"}
{"problem": "public static void METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 ) . first ( ) ; int VAR_3 = VAR_2 . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( STRING_2 , STRING_3 ) ; if ( VAR_4 . METHOD_6 ( ) ) { params . METHOD_7 ( ) ; VAR_4 . METHOD_8 ( ) ; } METHOD_9 ( VAR_2 , VAR_3 ) ; }\n", "fixed": "public static void METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 ) . first ( ) ; int VAR_3 = VAR_2 . METHOD_4 ( ) ; if ( VAR_4 . METHOD_6 ( ) ) { params . METHOD_7 ( ) ; VAR_4 . METHOD_8 ( ) ; } METHOD_9 ( VAR_2 , VAR_3 ) ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_1 . add ( TYPE_2 . METHOD_2 ( VAR_2 ) ) ; VAR_1 . add ( TYPE_2 . METHOD_3 ( VAR_3 , INT_1 ) ) ; TYPE_3 . METHOD_4 ( ) . METHOD_5 ( INT_1 ) ; return VAR_1 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_1 . add ( TYPE_2 . METHOD_2 ( VAR_2 ) ) ; VAR_1 . add ( TYPE_2 . METHOD_2 ( VAR_3 ) ) ; TYPE_3 . METHOD_4 ( ) . METHOD_5 ( INT_1 ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "    */\n   @Nullable\n  abstract byte[] getCacheKey();\n }", "fixed": "    */\n   @Nullable\n  public abstract byte[] getCacheKey();\n }", "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",", "fixed": "                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"problem": "public void METHOD_1 ( java.lang.String title , java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . get ( title ) ; TYPE_2 VAR_5 = VAR_3 . METHOD_2 ( ) ; VAR_5 . add ( VAR_2 ) ; VAR_6 . put ( VAR_5 . METHOD_3 ( ( ( VAR_5 . METHOD_4 ( ) ) - 1 ) ) . toString ( ) , VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String title , java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . get ( title ) ; TYPE_2 VAR_5 = VAR_3 . METHOD_2 ( ) ; java.lang.System.out.println ( VAR_5 . METHOD_3 ( 0 ) ) ; VAR_5 . add ( VAR_2 ) ; VAR_6 . put ( VAR_5 . METHOD_3 ( ( ( VAR_5 . METHOD_4 ( ) ) - 1 ) ) . toString ( ) , VAR_1 ) ; }\n"}
{"problem": "public boolean METHOD_1 ( ) { try { TYPE_1 data = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( data != null ) { VAR_3 = data . METHOD_3 ( ) ; VAR_4 = VAR_5 ; VAR_6 = VAR_7 ; } } catch ( java.io.IOException VAR_8 ) { VAR_8 . METHOD_4 ( ) ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( ) { try { TYPE_1 data = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( data != null ) { VAR_3 = data . METHOD_3 ( ) ; VAR_4 = VAR_5 ; VAR_6 = VAR_7 ; return true ; } } catch ( java.io.IOException VAR_8 ) { VAR_8 . METHOD_4 ( ) ; } return false ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { if ( TYPE_1 . METHOD_2 ( ) ) java.lang.System.exit ( 0 ) ; VAR_1 = new TYPE_2 ( STRING_1 ) ; VAR_2 = new TYPE_3 ( new TYPE_4 ( TYPE_5 . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_5 ( INT_1 , INT_2 ) ; VAR_1 . METHOD_6 ( true ) ; VAR_2 . METHOD_7 ( true ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { if ( TYPE_1 . METHOD_2 ( ) ) return ; VAR_1 = new TYPE_2 ( STRING_1 ) ; VAR_2 = new TYPE_3 ( new TYPE_4 ( TYPE_5 . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_5 ( INT_1 , INT_2 ) ; VAR_1 . METHOD_6 ( true ) ; VAR_2 . METHOD_7 ( true ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( STRING_1 , STRING_3 ) ; METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( STRING_1 , STRING_4 ) ; METHOD_5 ( ) ; TYPE_1 . METHOD_2 ( STRING_1 , STRING_5 ) ; METHOD_6 ( true ) ; TYPE_1 . METHOD_2 ( STRING_1 , STRING_6 ) ; VAR_1 . METHOD_7 ( ) ; METHOD_8 ( ) ; super . METHOD_1 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_3 ) ; METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( STRING_1 , STRING_4 ) ; METHOD_5 ( ) ; TYPE_1 . METHOD_2 ( STRING_1 , STRING_5 ) ; METHOD_6 ( true ) ; TYPE_1 . METHOD_2 ( STRING_1 , STRING_6 ) ; VAR_1 . METHOD_7 ( ) ; METHOD_8 ( ) ; super . METHOD_1 ( ) ; }\n"}
{"problem": "public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( ) ) < ( VAR_2 . METHOD_2 ( ) ) ) { return 1 ; } else if ( ( VAR_1 . METHOD_2 ( ) ) > ( VAR_2 . METHOD_2 ( ) ) ) { return INT_1 ; } return 0 ; }\n", "fixed": "public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( ) ) < ( VAR_2 . METHOD_2 ( ) ) ) { return - 1 ; } else if ( ( VAR_1 . METHOD_2 ( ) ) > ( VAR_2 . METHOD_2 ( ) ) ) { return 1 ; } return 0 ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"problem": "public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( VAR_2 . METHOD_5 ( ) , VAR_1 . METHOD_3 ( ) . METHOD_6 ( ) ) ) ; TYPE_3 listener = VAR_1 . METHOD_3 ( ) . METHOD_7 ( ) ; listener . METHOD_8 ( ) ; METHOD_9 ( METHOD_10 ( ) . getString ( VAR_3 ) ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( METHOD_5 ( ) , VAR_1 . METHOD_3 ( ) . METHOD_6 ( ) ) ) ; TYPE_3 listener = VAR_1 . METHOD_3 ( ) . METHOD_7 ( ) ; listener . METHOD_8 ( ) ; METHOD_9 ( METHOD_10 ( ) . getString ( VAR_3 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { try ( TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( new java.io.FileOutputStream ( STRING_1 ) ) ) ) { for ( java.lang.String VAR_2 : this . VAR_2 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; } VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; } catch ( TYPE_3 VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try ( TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( new java.io.FileOutputStream ( STRING_1 ) ) ) ) { for ( java.lang.String VAR_2 : this . VAR_2 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( \"\\n\" ) ; } VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; } catch ( TYPE_3 VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; if ( ! ( METHOD_3 ( VAR_2 ) ) ) { double VAR_3 = 0 ; try { VAR_3 = java.lang.Double . METHOD_4 ( VAR_2 ) ; } catch ( TYPE_2 VAR_4 ) { super . METHOD_5 ( ) ; return ; } METHOD_6 ( VAR_3 ) ; } else { super . METHOD_7 ( ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; if ( ! ( METHOD_3 ( VAR_2 ) ) ) { double VAR_3 = 0 ; try { VAR_3 = java.lang.Double . METHOD_4 ( VAR_2 ) ; } catch ( TYPE_2 VAR_4 ) { super . METHOD_5 ( ) ; return ; } METHOD_6 ( VAR_3 , 1 ) ; } else { super . METHOD_7 ( ) ; } }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 ) != ( VAR_2 ) ) { VAR_1 = VAR_2 ; if ( ! ( VAR_3 ) ) { if ( ( VAR_4 ) && ( VAR_5 ) ) { if ( ( VAR_6 ) != null ) { VAR_6 . METHOD_1 ( ) ; } } else { if ( ( VAR_7 ) != null ) { VAR_7 . METHOD_1 ( ) ; } } } else { if ( ( VAR_8 ) != null ) { VAR_8 . METHOD_1 ( ) ; } } } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 ) != ( VAR_2 ) ) { VAR_1 = VAR_2 ; if ( ! ( VAR_3 ) ) { if ( ( VAR_4 ) && ( VAR_5 ) ) { if ( ( VAR_6 ) != null ) { VAR_6 . METHOD_1 ( ) ; } } else { VAR_7 . METHOD_1 ( ) ; } } else { VAR_8 . METHOD_1 ( ) ; } } }\n"}
{"problem": "public void METHOD_1 ( java.util.ArrayList < TYPE_1 < TYPE_2 , java.lang.String > > VAR_1 ) { for ( TYPE_1 < TYPE_2 , java.lang.String > VAR_2 : VAR_1 ) { for ( TYPE_3 VAR_3 : TYPE_3 . values ( ) ) { if ( VAR_4 . contains ( VAR_5 ) ) { if ( METHOD_2 ( VAR_3 , VAR_2 . first ) ) { } else { } } } VAR_6 . METHOD_3 ( this ) ; } METHOD_4 ( ) ; update ( null , null ) ; }\n", "fixed": "public void METHOD_1 ( java.util.ArrayList < TYPE_1 < TYPE_2 , java.lang.String > > VAR_1 ) { for ( TYPE_1 < TYPE_2 , java.lang.String > VAR_2 : VAR_1 ) { for ( TYPE_3 VAR_3 : TYPE_3 . values ( ) ) { if ( VAR_4 . contains ( VAR_5 ) ) { METHOD_2 ( VAR_3 , VAR_2 . first ) ; } } VAR_6 . METHOD_3 ( this ) ; } METHOD_4 ( ) ; update ( null , null ) ; }\n"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( this , STRING_1 , VAR_2 ) . show ( ) ; if ( ( VAR_3 ) == ( TYPE_3 . METHOD_3 ( ) ) ) { METHOD_4 ( ) ; } else if ( ( VAR_3 ) == ( TYPE_4 . METHOD_3 ( ) ) ) { METHOD_5 ( ) ; } METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_3 ) == ( TYPE_3 . METHOD_3 ( ) ) ) { METHOD_4 ( ) ; } else if ( ( VAR_3 ) == ( TYPE_4 . METHOD_3 ( ) ) ) { METHOD_5 ( ) ; } METHOD_6 ( ) ; }\n"}
{"fixCommitSHA1": "6e4943ae3ed462faadda268f20c12cf5e5b75e4d", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     }\n     private PulsarClient concurrentPulsarClient() throws PulsarClientException {\n        return new ClientBuilderImpl().serviceUrl(getPulsarBrokerUrl()).ioThreads(2).listenerThreads(5).build();\n     }\n     @Test\n     public void testMultipleMessageConsumedByClusterwithConcurrentConfiguration() throws Exception {\n        to.expectedMessageCount(NUMBER_OF_CONSUMERS);\n         Producer<String> producer = concurrentPulsarClient().newProducer(Schema.STRING).producerName(PRODUCER).topic(TOPIC_URI).create();", "fixed": "     }\n     private PulsarClient concurrentPulsarClient() throws PulsarClientException {\n        return new ClientBuilderImpl().serviceUrl(getPulsarBrokerUrl()).ioThreads(5).listenerThreads(5).build();\n     }\n     @Test\n     public void testMultipleMessageConsumedByClusterwithConcurrentConfiguration() throws Exception {\n        to.expectedMinimumMessageCount(1);\n         Producer<String> producer = concurrentPulsarClient().newProducer(Schema.STRING).producerName(PRODUCER).topic(TOPIC_URI).create();", "sourceBeforeFix": "new ClientBuilderImpl().serviceUrl(getPulsarBrokerUrl()).ioThreads(2)", "sourceAfterFix": "new ClientBuilderImpl().serviceUrl(getPulsarBrokerUrl()).ioThreads(5)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { TYPE_2 . METHOD_2 ( getActivity ( ) , ( STRING_1 + position ) , VAR_2 ) . show ( ) ; VAR_3 . METHOD_3 ( VAR_4 . get ( position ) . getId ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { TYPE_2 . METHOD_2 ( getActivity ( ) , ( STRING_1 + position ) , VAR_2 ) . show ( ) ; VAR_3 . METHOD_3 ( VAR_4 . get ( ( position - 1 ) ) . getId ( ) ) ; }\n"}
{"problem": "private TYPE_1 [ ] METHOD_1 ( TYPE_1 [ ] VAR_1 , int VAR_2 ) { TYPE_2 . METHOD_2 ( VAR_1 , 0 , ( VAR_2 - 1 ) , new TYPE_3 ( ) ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { VAR_3 . info ( ( ( ( VAR_1 [ i ] . METHOD_3 ( ) ) + \"\\t\" ) + ( VAR_1 [ i ] . getValue ( ) ) ) ) ; } return VAR_1 ; }\n", "fixed": "private TYPE_1 [ ] METHOD_1 ( TYPE_1 [ ] VAR_1 , int VAR_2 ) { TYPE_2 . METHOD_2 ( VAR_1 , 0 , VAR_2 , new TYPE_3 ( ) ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { VAR_3 . info ( ( ( ( VAR_1 [ i ] . METHOD_3 ( ) ) + \"\\t\" ) + ( VAR_1 [ i ] . getValue ( ) ) ) ) ; } return VAR_1 ; }\n"}
{"problem": "public void build ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . length ) > ( VAR_3 . METHOD_1 ( ) ) ) { VAR_4 = VAR_5 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_2 . length , title ) ; } else { VAR_4 = VAR_5 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 , title ) ; } METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }\n", "fixed": "public void build ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . length ) > ( VAR_3 . METHOD_1 ( ) ) ) { VAR_4 = VAR_5 . METHOD_2 ( ) . METHOD_3 ( null , VAR_2 . length , title ) ; } else { VAR_4 = VAR_5 . METHOD_2 ( ) . METHOD_3 ( null , VAR_3 , title ) ; } METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String data , java.lang.String VAR_1 ) { for ( int i = 0 ; i < ( VAR_1 . length ( ) ) ; i ++ ) { if ( ( data . METHOD_2 ( i ) ) != ( VAR_1 . METHOD_2 ( i ) ) ) { VAR_2 . METHOD_3 ( ( STRING_1 + ( data . METHOD_2 ( i ) ) ) ) ; return false ; } } return true ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String data , java.lang.String VAR_1 ) { for ( int i = 0 ; i < ( VAR_1 . length ( ) ) ; i ++ ) { VAR_2 . METHOD_3 ( ( STRING_1 + ( data . METHOD_2 ( i ) ) ) ) ; if ( ( data . METHOD_2 ( i ) ) != ( VAR_1 . METHOD_2 ( i ) ) ) { VAR_2 . METHOD_3 ( ( STRING_1 + ( data . METHOD_2 ( i ) ) ) ) ; return false ; } } return true ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String type ) throws TYPE_2 { if ( STRING_1 . equals ( type ) ) { return new TYPE_3 ( VAR_1 , VAR_2 , VAR_3 ) ; } else { throw new TYPE_2 ( ( ( STRING_2 + type ) + STRING_3 ) ) ; } }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String type , java.lang.String VAR_3 ) throws TYPE_2 { if ( STRING_1 . equals ( type ) ) { return new TYPE_3 ( VAR_1 , VAR_2 , VAR_3 ) ; } else { throw new TYPE_2 ( ( ( STRING_2 + type ) + STRING_3 ) ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = new TYPE_3 ( ) ; VAR_1 . url ( VAR_2 ) ; if ( ( VAR_3 ) != null ) VAR_1 . METHOD_2 ( VAR_3 ) ; else if ( ( VAR_4 ) != null ) VAR_1 . METHOD_2 ( VAR_4 ) ; else if ( ( VAR_5 ) != null ) VAR_1 . METHOD_3 ( VAR_5 ) ; TYPE_1 VAR_6 = VAR_1 . build ( ) ; return VAR_6 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = new TYPE_3 ( ) ; VAR_1 . url ( VAR_2 ) ; if ( ( VAR_3 ) != null ) VAR_1 . METHOD_2 ( VAR_3 ) ; else if ( ( VAR_4 ) != null ) VAR_1 . METHOD_2 ( VAR_4 ) ; if ( ( VAR_5 ) != null ) VAR_1 . METHOD_3 ( VAR_5 ) ; TYPE_1 VAR_6 = VAR_1 . build ( ) ; return VAR_6 ; }\n"}
{"problem": "private void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { if ( ( VAR_2 ) > 0 ) ( VAR_2 ) -- ; } else ( VAR_2 ) ++ ; if ( ( ( VAR_2 ) >= ( VAR_3 ) ) || ( ( VAR_2 ) == 0 ) ) { VAR_2 = 0 ; VAR_3 = 0 ; } METHOD_2 ( ) ; }\n", "fixed": "private void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { if ( ( VAR_2 ) > 0 ) ( VAR_2 ) -- ; } else ( VAR_2 ) ++ ; if ( ( ( VAR_2 ) > ( VAR_3 ) ) || ( ( VAR_2 ) == 0 ) ) { VAR_2 = 0 ; VAR_3 = 0 ; } }\n"}
{"problem": "public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_2 < TYPE_1 > VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 ) . METHOD_4 ( 0L ) . METHOD_5 ( 0 ) . METHOD_6 ( TYPE_3 . METHOD_7 ( ) ) ; return VAR_3 ; }\n", "fixed": "public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_2 < TYPE_1 > VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 ) . METHOD_4 ( 0L ) . METHOD_5 ( 1 ) . METHOD_6 ( TYPE_3 . METHOD_7 ( ) ) ; return VAR_3 ; }\n"}
{"problem": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; VAR_5 = ( ( TYPE_4 ) ( view . METHOD_3 ( VAR_6 . list ) ) ) ; ( ( TYPE_5 < TYPE_6 > ) ( VAR_5 ) ) . METHOD_4 ( VAR_7 ) ; VAR_5 . METHOD_5 ( this ) ; VAR_5 . METHOD_6 ( this ) ; return view ; }\n", "fixed": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; VAR_5 = ( ( TYPE_4 ) ( view . METHOD_3 ( VAR_6 . list ) ) ) ; VAR_5 . METHOD_4 ( VAR_7 ) ; VAR_5 . METHOD_5 ( this ) ; VAR_5 . METHOD_6 ( this ) ; return view ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final java.lang.String VAR_2 , final java.lang.String VAR_3 , final java.lang.String VAR_4 , final java.lang.String VAR_5 , final boolean VAR_6 ) throws TYPE_3 , TYPE_4 { final TYPE_5 VAR_7 = new TYPE_5 ( ) ; VAR_7 . METHOD_2 ( VAR_2 ) ; VAR_7 . METHOD_3 ( VAR_3 ) ; VAR_7 . METHOD_4 ( VAR_4 ) ; VAR_7 . METHOD_5 ( VAR_5 ) ; VAR_7 . METHOD_6 ( VAR_6 ) ; return TYPE_6 . METHOD_1 ( VAR_1 , VAR_7 ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final java.lang.String VAR_2 , final java.lang.String VAR_3 , final java.lang.String VAR_4 , final java.lang.String VAR_5 , final boolean VAR_6 ) throws TYPE_3 , TYPE_4 { final TYPE_5 VAR_7 = new TYPE_5 ( ) ; VAR_7 . METHOD_2 ( VAR_2 ) ; VAR_7 . METHOD_3 ( VAR_3 ) ; VAR_7 . METHOD_4 ( VAR_4 ) ; VAR_7 . METHOD_5 ( VAR_5 ) ; VAR_7 . METHOD_6 ( VAR_6 ) ; return TYPE_6 . METHOD_1 ( VAR_1 , VAR_2 , VAR_7 ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 values = new TYPE_1 ( ) ; values . put ( VAR_2 , VAR_1 . getName ( ) ) ; if ( VAR_1 . METHOD_2 ( ) ) { values . put ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; } return values ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 values = new TYPE_1 ( ) ; values . put ( VAR_2 , VAR_1 . getName ( ) ) ; if ( VAR_1 . METHOD_2 ( ) ) { values . put ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; } else { values . put ( VAR_3 , ( ( java.lang.String ) ( null ) ) ) ; } return values ; }\n"}
{"problem": "public java.lang.Boolean METHOD_1 ( java.lang.Integer VAR_1 , java.lang.Integer VAR_2 ) { java.lang.Integer VAR_3 = super . METHOD_2 ( STRING_1 ) ; java.lang.String query = STRING_2 ; VAR_4 . info ( ( ( ( ( ( ( ( query + STRING_3 ) + VAR_3 ) + STRING_4 ) + VAR_1 ) + STRING_5 ) + VAR_2 ) + STRING_6 ) ) ; int result = VAR_5 . update ( query , new java.lang.Object [ ] { VAR_3 , VAR_1 , VAR_2 } ) ; return result == 1 ? true : false ; }\n", "fixed": "public java.lang.Boolean METHOD_1 ( java.lang.Integer VAR_1 , java.lang.Integer VAR_2 ) { java.lang.Integer VAR_3 = super . METHOD_2 ( ) ; java.lang.String query = STRING_2 ; VAR_4 . info ( ( ( ( ( ( ( ( query + STRING_3 ) + VAR_3 ) + STRING_4 ) + VAR_1 ) + STRING_5 ) + VAR_2 ) + STRING_6 ) ) ; int result = VAR_5 . update ( query , new java.lang.Object [ ] { VAR_3 , VAR_1 , VAR_2 } ) ; return result == 1 ? true : false ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( new TYPE_1 ( ) { public void METHOD_3 ( final TYPE_2 VAR_1 ) { VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( ) ; } public void METHOD_6 ( final TYPE_2 VAR_1 ) { VAR_2 . METHOD_4 ( VAR_5 ) ; } public void METHOD_7 ( final TYPE_2 VAR_1 ) { VAR_2 . METHOD_4 ( VAR_5 ) ; } } ) ; }\n", "fixed": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( new TYPE_1 ( ) { public void METHOD_3 ( final TYPE_2 VAR_1 ) { VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( ) ; } public void METHOD_6 ( final TYPE_2 VAR_1 ) { VAR_2 . METHOD_4 ( VAR_5 ) ; VAR_4 . METHOD_5 ( ) ; } public void METHOD_7 ( final TYPE_2 VAR_1 ) { VAR_2 . METHOD_4 ( VAR_5 ) ; } } ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 = VAR_1 . METHOD_2 ( ) ; VAR_2 = TYPE_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( 1 ) ; TYPE_2 . METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( ) ; VAR_3 = new TYPE_3 ( TYPE_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 = VAR_1 . METHOD_2 ( ) ; VAR_2 = TYPE_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( 0 ) ; TYPE_2 . METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( ) ; VAR_3 = new TYPE_3 ( TYPE_1 ) ; }\n"}
{"problem": "private static int METHOD_1 ( final java.lang.String fieldName , final java.lang.StringBuilder VAR_1 , final int index ) { int position = index ; final char c = fieldName . METHOD_2 ( position ) ; if ( ! ( TYPE_1 . METHOD_3 ( c ) ) ) { if ( index < ( fieldName . length ( ) ) ) { VAR_1 . append ( TYPE_1 . toUpperCase ( fieldName . METHOD_2 ( ( ++ position ) ) ) ) ; } } else { VAR_1 . append ( c ) ; } return position ; }\n", "fixed": "private static int METHOD_1 ( final java.lang.String name , final java.lang.StringBuilder VAR_1 , final int index ) { int position = index ; final char c = name . METHOD_2 ( position ) ; if ( ( ! ( TYPE_1 . METHOD_3 ( c ) ) ) && ( index < ( ( name . length ( ) ) - 1 ) ) ) { VAR_1 . append ( TYPE_1 . toUpperCase ( name . METHOD_2 ( ( ++ position ) ) ) ) ; } else { VAR_1 . append ( c ) ; } return position ; }\n"}
{"problem": "private int METHOD_1 ( int VAR_1 , TYPE_1 n ) { VAR_2 += VAR_1 ; VAR_3 = 0 ; if ( ( ( VAR_4 ) + ( VAR_5 ) ) < ( VAR_6 ) ) { VAR_3 = METHOD_2 ( VAR_7 , n , VAR_3 , VAR_2 ) ; VAR_8 . put ( ( ++ ( VAR_9 ) ) , VAR_7 ) ; } else { VAR_8 . put ( ( ++ ( VAR_9 ) ) , n ) ; } ( VAR_10 ) ++ ; return VAR_3 ; }\n", "fixed": "private int METHOD_1 ( int VAR_1 , TYPE_1 n ) { VAR_2 += VAR_1 ; VAR_3 = 0 ; if ( ( ( VAR_4 ) + ( VAR_5 ) ) < ( VAR_6 ) ) { VAR_8 . put ( ( ++ ( VAR_9 ) ) , VAR_7 ) ; VAR_3 = METHOD_2 ( VAR_7 , n , VAR_3 , VAR_2 ) ; } else { VAR_8 . put ( ( ++ ( VAR_9 ) ) , n ) ; } return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != null ) { for ( int i = 0 ; i < ( VAR_3 . METHOD_2 ( ) ) ; i ++ ) { VAR_3 . METHOD_3 ( i ) . METHOD_4 ( VAR_4 ) ; } VAR_2 . METHOD_1 ( VAR_1 , VAR_5 . get ( VAR_1 ) ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != null ) { for ( int i = 0 ; i < ( VAR_3 . METHOD_2 ( ) ) ; i ++ ) { } VAR_2 . METHOD_1 ( VAR_1 , VAR_5 . get ( VAR_1 ) ) ; } }\n"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "d9fdfaf3134f4a1968f3d643369b76dae9c55560", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\tlogger.error(\"NODE {}: AssignReturnRoute command failed.\", nodeId);\n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssignReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));\n\t\t\tincomingMessage.setTransActionCanceled(true);\n \t\t}\n \t\treturn true;", "fixed": " \t\t\tlogger.error(\"NODE {}: AssignReturnRoute command failed.\", nodeId);\n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssignReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));\n\t\t\tincomingMessage.setTransactionCanceled(true);\n \t\t}\n \t\treturn true;", "sourceBeforeFix": "incomingMessage.setTransActionCanceled(true)", "sourceAfterFix": "incomingMessage.setTransactionCanceled(true)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 [ a ] . getText ( ) . equals ( STRING_1 ) ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_3 ) ) { TYPE_2 VAR_4 = new TYPE_2 ( VAR_5 , VAR_6 , java.lang.Integer.parseInt ( VAR_2 [ a ] . getText ( ) ) ) ; } else if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_7 ) ) { message . setText ( STRING_2 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 [ a ] . getText ( ) . equals ( STRING_1 ) ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_3 ) ) { TYPE_2 VAR_4 = new TYPE_2 ( VAR_5 , VAR_6 , java.lang.Integer.parseInt ( VAR_2 [ a ] . getText ( ) ) ) ; } else if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_7 ) ) { } } }\n"}
{"project": "Closure", "bugId": 110, "problem": " private void findAliases(NodeTraversal t) {\n         Node n = v.getNode();\n         Node parent = n.getParent();\n         boolean isVar = parent.isVar();\n         if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {\n           recordAlias(v);\n         } else if (v.isBleedingFunction()) {", "fixed": " private void findAliases(NodeTraversal t) {\n         Node n = v.getNode();\n         Node parent = n.getParent();\n         boolean isVar = parent.isVar();\n        boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);\n         if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {\n           recordAlias(v);\n         } else if (v.isBleedingFunction()) {", "observations": "", "repairActions": ["assignAdd", "assignExpChange", "condBranIfAdd", "condBranIfElseAdd", "condExpExpand", "condExpMod", "exThrowsAdd", "mcAdd", "mcRem", "objInstAdd", "retExpChange", "varAdd"], "repairPatterns": ["condBlockExcAdd", "condBlockOthersAdd", "expLogicExpand", "expLogicMod", "initFix", "missNullCheckN", "missNullCheckP", "wrapsIfElse"]}
{"problem": "public void METHOD_1 ( ) { if ( ( this . VAR_1 ) == null ) { return ; } TYPE_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( ) ; try { this . VAR_2 . METHOD_4 ( this . VAR_3 ) ; this . VAR_2 . METHOD_1 ( ) ; this . VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Exception VAR_4 ) { TYPE_1 . METHOD_6 ( ( STRING_2 + ( VAR_4 . METHOD_7 ( ) ) ) ) ; } this . VAR_2 = null ; this . VAR_1 = null ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ( this . VAR_1 ) == null ) { return ; } TYPE_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( ) ; try { this . VAR_2 . METHOD_4 ( this . VAR_3 ) ; this . VAR_2 . METHOD_1 ( ) ; } catch ( java.lang.Exception VAR_4 ) { TYPE_1 . error ( ( STRING_2 + ( VAR_4 . METHOD_7 ( ) ) ) ) ; } this . VAR_2 = null ; this . VAR_1 = null ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; try { VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; } catch ( TYPE_3 VAR_3 ) { throw new TYPE_3 ( ( ( VAR_1 . toString ( ) ) + STRING_1 ) ) ; } VAR_4 . METHOD_2 ( this ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; try { VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; } catch ( TYPE_3 VAR_3 ) { throw new TYPE_3 ( ( ( VAR_1 . toString ( ) ) + STRING_1 ) ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public java.lang.String [ ] METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return target . path ( STRING_1 ) . path ( STRING_2 ) . path ( VAR_1 ) . path ( VAR_2 ) . METHOD_2 ( VAR_3 ) . get ( java.lang.String [ ] . class ) ; }\n", "fixed": "public java.lang.String [ ] METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( VAR_1 == null ) { return null ; } return target . path ( STRING_1 ) . path ( STRING_2 ) . path ( VAR_1 ) . path ( VAR_2 ) . METHOD_2 ( VAR_3 ) . get ( java.lang.String [ ] . class ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 { try { VAR_1 . METHOD_2 ( ) ; java.lang.System.out.println ( STRING_1 ) ; int VAR_2 = ( VAR_3 ) + ( VAR_4 ) ; while ( ( VAR_2 == ( VAR_5 ) ) || ( ! ( VAR_6 ) ) ) VAR_7 . METHOD_3 ( ) ; java.lang.System.out.println ( STRING_2 ) ; VAR_6 = false ; } finally { VAR_1 . METHOD_4 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) throws TYPE_1 { try { VAR_1 . METHOD_2 ( ) ; int VAR_2 = ( VAR_3 ) + ( VAR_4 ) ; while ( ( VAR_2 == ( VAR_5 ) ) || ( ! ( VAR_6 ) ) ) { VAR_7 . METHOD_3 ( ) ; VAR_2 = ( VAR_3 ) + ( VAR_4 ) ; } VAR_6 = false ; } finally { VAR_1 . METHOD_4 ( ) ; } }\n"}
{"problem": "public java.lang.String toString ( ) { METHOD_1 ( this ) ; java.lang.String VAR_1 ; try { VAR_1 = METHOD_2 ( ) . getTime ( ) . toString ( ) ; } catch ( java.lang.Exception VAR_2 ) { VAR_1 = null ; } return java.lang.String.format ( VAR_3 , METHOD_3 ( ) , METHOD_4 ( ) , METHOD_5 ( ) , METHOD_6 ( ) , VAR_1 , METHOD_7 ( ) , METHOD_8 ( ) , METHOD_9 ( ) ) ; }\n", "fixed": "public java.lang.String toString ( ) { java.lang.String VAR_1 ; try { VAR_1 = METHOD_2 ( ) . getTime ( ) . toString ( ) ; } catch ( java.lang.Exception VAR_2 ) { VAR_1 = null ; } return java.lang.String.format ( VAR_3 , METHOD_3 ( ) , METHOD_4 ( ) , METHOD_5 ( ) , METHOD_6 ( ) , VAR_1 , METHOD_7 ( ) , METHOD_8 ( ) , METHOD_9 ( ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( ) { if ( VAR_1 ) { event = new TYPE_1 ( ) ; event . METHOD_2 ( VAR_2 ) ; event . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) ) ; event . METHOD_5 ( STRING_1 ) ; event . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_4 . METHOD_8 ( ) ) ) ; TYPE_3 . i ( VAR_5 , event . toString ( ) ) ; TYPE_4 . METHOD_9 ( METHOD_10 ( ) ) . METHOD_11 ( event ) ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( VAR_1 ) { event = new TYPE_1 ( ) ; event . METHOD_2 ( VAR_2 ) ; event . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) ) ; event . METHOD_5 ( STRING_1 ) ; event . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_4 . METHOD_8 ( ) ) ) ; TYPE_3 . i ( VAR_5 , event . toString ( ) ) ; } }\n"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"problem": "protected java.util.Map < java.lang.Integer , java.lang.Double > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.Integer , java.lang.Double > VAR_2 = new java.util.HashMap < java.lang.Integer , java.lang.Double > ( ) ; for ( java.lang.Integer VAR_3 : VAR_1 . METHOD_2 ( ) ) { double VAR_4 = VAR_1 . METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_2 , VAR_4 , VAR_5 . get ( VAR_3 ) ) ; } return VAR_2 ; }\n", "fixed": "protected java.util.Map < java.lang.Integer , java.lang.Double > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.Integer , java.lang.Double > VAR_2 = new java.util.HashMap < java.lang.Integer , java.lang.Double > ( ) ; for ( java.lang.Integer VAR_3 : VAR_1 . METHOD_2 ( ) ) { double VAR_4 = VAR_1 . METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_2 , VAR_4 , VAR_5 [ VAR_3 ] ) ; } return VAR_2 ; }\n"}
{"problem": "private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } METHOD_3 ( true ) ; VAR_1 = new TYPE_1 ( ) . METHOD_4 ( METHOD_5 ( ) ) . METHOD_6 ( new TYPE_2 ( ) ) . METHOD_7 ( VAR_2 ) . METHOD_8 ( VAR_3 ) . METHOD_9 ( VAR_4 ) . build ( ) ; VAR_1 . start ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return ; } METHOD_3 ( true ) ; VAR_1 = new TYPE_1 ( ) . METHOD_4 ( METHOD_5 ( ) ) . METHOD_6 ( new TYPE_2 ( ) ) . METHOD_7 ( VAR_2 ) . METHOD_8 ( VAR_3 ) . METHOD_9 ( VAR_4 ) . build ( ) ; VAR_1 . start ( ) ; }\n"}
{"problem": "public boolean METHOD_1 ( ) { boolean VAR_1 = false ; int count = 0 ; for ( TYPE_1 c : TYPE_1 . values ( ) ) { if ( ( METHOD_2 ( c ) ) >= INT_1 ) { VAR_2 . add ( c ) ; count ++ ; } } if ( count >= INT_2 ) { VAR_1 = true ; } return VAR_1 ; }\n", "fixed": "public boolean METHOD_1 ( ) { boolean VAR_1 = false ; int count = 0 ; for ( TYPE_1 c : TYPE_1 . values ( ) ) { if ( ( METHOD_2 ( c ) ) >= INT_1 ) { if ( count <= INT_1 ) { VAR_2 . add ( c ) ; } count ++ ; } } if ( count >= INT_2 ) { VAR_1 = true ; } return VAR_1 ; }\n"}
{"problem": "private TYPE_1 < java.lang.Integer , ? > METHOD_1 ( TYPE_1 < java.lang.Integer , java.lang.Object > VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { VAR_1 . setText ( TYPE_3 . toString ( VAR_3 . METHOD_2 ( ) [ VAR_2 ] ) ) ; VAR_1 . METHOD_3 ( null ) ; VAR_1 . METHOD_4 ( ( VAR_4 ) - > ( ( TYPE_4 < java.lang.Object > ) ( VAR_3 . getValue ( VAR_4 . getValue ( ) , VAR_2 ) ) ) ) ; return VAR_1 ; }\n", "fixed": "private TYPE_1 < java.lang.Integer , ? > METHOD_1 ( TYPE_1 < java.lang.Integer , ? > VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { VAR_1 . setText ( TYPE_3 . toString ( VAR_3 . METHOD_2 ( ) [ VAR_2 ] ) ) ; VAR_1 . METHOD_3 ( null ) ; VAR_1 . METHOD_4 ( ( VAR_4 ) - > ( ( TYPE_4 ) ( VAR_3 . getValue ( VAR_4 . getValue ( ) , VAR_2 ) ) ) ) ; return VAR_1 ; }\n"}
{"problem": "public static java.lang.Integer METHOD_1 ( java.util.List < java.lang.String > args , java.util.Map < java.lang.String , java.lang.String > params , java.lang.String VAR_1 ) throws java.lang.Exception { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( args ) ; java.lang.String VAR_3 = TYPE_1 . METHOD_3 ( params ) ; java.lang.String VAR_4 = java.lang.String.format ( STRING_1 , VAR_5 , VAR_3 , VAR_2 ) ; return TYPE_1 . METHOD_4 ( VAR_4 , VAR_1 , true ) ; }\n", "fixed": "public static java.lang.Integer METHOD_1 ( java.util.List < java.lang.String > args , java.util.Map < java.lang.String , java.lang.String > params , java.lang.String VAR_1 ) throws java.lang.Exception { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( args ) ; java.lang.String VAR_3 = TYPE_1 . METHOD_3 ( params ) ; java.lang.String VAR_4 = java.lang.String.format ( STRING_1 , VAR_5 , VAR_3 , VAR_2 ) ; return TYPE_1 . METHOD_4 ( VAR_4 , VAR_1 ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomixMultiMapEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AtomixMultiMapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomixMultiMapEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AtomixMultiMapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private void METHOD_1 ( ) { try { java.io.BufferedReader VAR_1 = new java.io.BufferedReader ( new TYPE_1 ( VAR_2 ) ) ; java.lang.String msg = null ; while ( ( msg = VAR_1 . METHOD_2 ( ) ) != null ) { if ( ! ( STRING_1 . equals ( msg ) ) ) { TYPE_2 target = new TYPE_2 ( msg ) ; METHOD_3 ( target ) ; } else { VAR_3 = true ; VAR_4 . METHOD_4 ( ) ; break ; } } } catch ( java.io.IOException VAR_5 ) { VAR_5 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { java.io.BufferedReader VAR_1 = new java.io.BufferedReader ( new TYPE_1 ( VAR_2 ) ) ; java.lang.String msg = null ; while ( ( msg = VAR_1 . METHOD_2 ( ) ) != null ) { if ( ! ( STRING_1 . equals ( msg ) ) ) { TYPE_2 target = new TYPE_2 ( msg ) ; METHOD_3 ( target ) ; } else { VAR_3 = true ; VAR_4 . METHOD_4 ( ) ; break ; } } } catch ( java.io.IOException VAR_5 ) { VAR_5 . METHOD_5 ( ) ; } }\n"}
{"problem": "public static void METHOD_1 ( java.util.Collection < TYPE_1 > VAR_1 ) { try { java.io.FileWriter writer = new java.io.FileWriter ( STRING_1 , false ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { writer.write ( VAR_2 . toString ( ) ) ; writer.write ( STRING_2 ) ; } writer . METHOD_2 ( ) ; } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } }\n", "fixed": "public static void METHOD_1 ( java.util.Collection < TYPE_1 > VAR_1 ) throws java.io.IOException { java.io.FileWriter writer = null ; try { writer = new java.io.FileWriter ( STRING_1 , false ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { writer.write ( VAR_2 . toString ( ) ) ; writer.write ( STRING_2 ) ; } } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } finally { writer . METHOD_2 ( ) ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_2 ( STRING_1 ) ; return new TYPE_2 ( VAR_2 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) , VAR_4 , VAR_5 , TYPE_3 . METHOD_5 ( ) , VAR_3 . METHOD_6 ( ) , ( ( VAR_6 ) == null ? VAR_3 . METHOD_7 ( ) : VAR_6 ) , null , VAR_7 , VAR_3 . METHOD_8 ( ) ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_2 ( STRING_1 ) ; return new TYPE_2 ( VAR_2 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) , VAR_4 , VAR_5 , TYPE_3 . METHOD_5 ( ) , VAR_3 . METHOD_6 ( ) , VAR_6 , null , VAR_7 , VAR_3 . METHOD_8 ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 file ) { VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_2 = ( getString ( VAR_3 ) ) + ( file . METHOD_3 ( ) ) ; for ( int i = 0 ; i < ( data . size ( ) ) ; i ++ ) { java.lang.String VAR_4 = data . get ( i ) ; if ( METHOD_4 ( VAR_4 ) . equals ( VAR_2 ) ) { VAR_5 = i ; METHOD_5 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 file ) { java.lang.String VAR_2 = ( getString ( VAR_3 ) ) + ( file . METHOD_3 ( ) ) ; for ( int i = 0 ; i < ( data . size ( ) ) ; i ++ ) { java.lang.String VAR_4 = data . get ( i ) ; if ( METHOD_4 ( VAR_4 ) . equals ( VAR_2 ) ) { VAR_5 = i ; METHOD_5 ( ) ; return ; } } }\n"}
{"problem": "public static boolean isEmpty ( java.lang.String [ ] args ) { if ( ( args == null ) || ( ( args.length ) == 0 ) ) { return false ; } for ( java.lang.String str : args ) { if ( TYPE_1 . isEmpty ( str ) ) { return true ; } } return false ; }\n", "fixed": "public static boolean isEmpty ( java.lang.String [ ] args ) { if ( ( args == null ) || ( ( args.length ) == 0 ) ) { return true ; } for ( java.lang.String str : args ) { if ( TYPE_1 . isEmpty ( str ) ) { return true ; } } return false ; }\n"}
{"problem": "private void METHOD_1 ( ) throws java.io.IOException { if ( null != ( buffer ) ) { final int p = buffer . position ( ) ; buffer . METHOD_2 ( p ) ; position += p ; buffer . position ( 0 ) ; assert p == ( buffer . METHOD_3 ( ) ) ; file . METHOD_4 ( buffer ) ; } }\n", "fixed": "private void METHOD_1 ( ) throws java.io.IOException { if ( null != ( buffer ) ) { final int p = buffer . position ( ) ; buffer . METHOD_2 ( p ) ; buffer . position ( 0 ) ; assert p == ( buffer . METHOD_3 ( ) ) ; file . METHOD_4 ( buffer , position ) ; position += p ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"problem": "public void METHOD_1 ( TYPE_1 item , int count ) { if ( ( count < 1 ) || ( item == null ) ) { return ; } if ( VAR_1 . METHOD_2 ( item ) ) { VAR_1 . put ( item , ( ( VAR_1 . get ( item ) ) + count ) ) ; } else { VAR_1 . put ( item , count ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 item , int count ) throws java.lang.Exception { if ( ( count < 1 ) || ( item == null ) ) { return ; } if ( VAR_1 . METHOD_2 ( item ) ) { VAR_1 . put ( item , ( ( VAR_1 . get ( item ) ) + count ) ) ; } else { VAR_1 . put ( item , count ) ; } if ( ( VAR_1 . get ( item ) ) < 0 ) { throw new java.lang.Exception ( ) ; } }\n"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 , java.util.List < TYPE_1 > VAR_2 ) { for ( TYPE_1 node : VAR_2 ) { try { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 , node ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_3 . METHOD_4 ( ) ; } catch ( java.lang.Exception VAR_5 ) { java.lang.System.out.println ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + node ) ) ; } } }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 , java.util.List < TYPE_1 > VAR_2 ) { TYPE_2 VAR_3 = null ; for ( TYPE_1 node : VAR_2 ) { try { VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 , node ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; } catch ( java.lang.Exception VAR_5 ) { java.lang.System.out.println ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + node ) ) ; } finally { if ( VAR_3 != null ) VAR_3 . METHOD_4 ( ) ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private byte [ ] METHOD_1 ( java.lang.String id ) { byte [ ] VAR_1 = METHOD_2 ( id ) ; if ( VAR_1 != null ) { return VAR_1 ; } try { return METHOD_3 ( id ) ; } catch ( java.lang.Exception VAR_2 ) { if ( ( VAR_2 . METHOD_4 ( ) ) instanceof TYPE_1 ) { throw VAR_2 ; } } throw new TYPE_2 ( VAR_3 ) ; }\n", "fixed": "private byte [ ] METHOD_1 ( java.lang.String id ) { byte [ ] VAR_1 = METHOD_2 ( id ) ; if ( VAR_1 != null ) { return VAR_1 ; } try { return METHOD_3 ( id ) ; } catch ( java.lang.Exception VAR_2 ) { if ( ( VAR_2 . METHOD_4 ( ) ) instanceof TYPE_1 ) { throw VAR_2 ; } throw new TYPE_2 ( VAR_3 , VAR_2 ) ; } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Object data = VAR_1 . getData ( ) ; TYPE_2 . METHOD_2 ( STRING_1 , ( ( ( STRING_2 + ( new java.util.Date ( ) . getTime ( ) ) ) + STRING_3 ) + data ) ) ; VAR_2 . METHOD_1 ( STRING_1 , data ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String name , java.lang.Object data ) { TYPE_2 . METHOD_2 ( name , ( ( ( STRING_2 + ( new java.util.Date ( ) . getTime ( ) ) ) + STRING_3 ) + data ) ) ; VAR_2 . METHOD_1 ( STRING_1 , data ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "afa23f7192a27a30797fac848c59081b94cbe34c", "projectName": "wildfly.wildfly", "bugType": "Change Modifier", "problem": " public interface StatelessSession extends EJBObject {\n     \n    public String echo(String arg) throws RemoteException;\n     \n    public void noop() throws RemoteException;\n     \n    public ReturnData getData() throws RemoteException;\n }", "fixed": " public interface StatelessSession extends EJBObject {\n     \n    String echo(String arg) throws RemoteException;\n     \n    void noop() throws RemoteException;\n     \n    ReturnData getData() throws RemoteException;\n }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"problem": "public java.lang.String [ ] METHOD_1 ( ) { java.util.List < java.lang.String > values = new java.util.ArrayList < java.lang.String > ( ) ; for ( TYPE_1 VAR_1 : VAR_2 ) { values . add ( VAR_1 . getValue ( ) ) ; } return ( ( java.lang.String [ ] ) ( values . METHOD_2 ( ) ) ) ; }\n", "fixed": "public java.lang.String [ ] METHOD_1 ( ) { java.util.List < java.lang.String > values = new java.util.ArrayList < java.lang.String > ( ) ; for ( TYPE_1 VAR_1 : VAR_2 ) { values . add ( VAR_1 . getValue ( ) ) ; } return values . METHOD_2 ( new java.lang.String [ 0 ] ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { try { TYPE_1 . assertEquals ( STRING_1 , TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , STRING_2 ) ) ; TYPE_1 . assertEquals ( STRING_3 , TYPE_2 . METHOD_2 ( VAR_3 , VAR_2 , STRING_4 ) ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_3 ( ) ; TYPE_1 . fail ( VAR_4 . METHOD_4 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { TYPE_1 . assertEquals ( STRING_1 , TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) ; TYPE_1 . assertEquals ( STRING_3 , TYPE_2 . METHOD_2 ( VAR_3 , STRING_4 ) ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_3 ( ) ; TYPE_1 . fail ( VAR_4 . METHOD_4 ( ) ) ; } }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( context ) ; VAR_2 = VAR_1 . getBoolean ( STRING_1 , false ) ; VAR_3 = VAR_1 . getBoolean ( STRING_2 , false ) ; VAR_4 = VAR_1 . getBoolean ( STRING_3 , true ) ; VAR_5 = VAR_1 . getBoolean ( STRING_4 , true ) ; VAR_6 = VAR_1 . getBoolean ( STRING_5 , true ) ; }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( context ) ; VAR_2 = VAR_1 . getBoolean ( STRING_1 , false ) ; VAR_3 = VAR_1 . getBoolean ( STRING_2 , true ) ; VAR_4 = VAR_1 . getBoolean ( STRING_3 , true ) ; VAR_5 = VAR_1 . getBoolean ( STRING_4 , true ) ; VAR_6 = VAR_1 . getBoolean ( STRING_5 , true ) ; }\n"}
{"problem": "private static TYPE_1 METHOD_1 ( ) { int VAR_1 = INT_1 ; int VAR_2 = INT_2 ; int VAR_3 = INT_3 ; TYPE_2 VAR_4 = VAR_5 ; TYPE_3 < TYPE_4 > VAR_6 = new TYPE_3 < TYPE_4 > ( ) ; TYPE_5 VAR_7 = new TYPE_5 ( ) ; return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_7 ) ; }\n", "fixed": "private static TYPE_1 METHOD_1 ( ) { int VAR_1 = INT_1 ; int VAR_2 = INT_3 ; int VAR_3 = INT_3 ; TYPE_2 VAR_4 = VAR_5 ; TYPE_3 < TYPE_4 > VAR_6 = new TYPE_3 < TYPE_4 > ( ) ; TYPE_5 VAR_7 = new TYPE_5 ( ) ; return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_7 ) ; }\n"}
{"fixCommitSHA1": "a0cb51880d250a4db339312a0d1c62e42ffafdf0", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         SimpleRegistry registry = new SimpleRegistry();\n        registry.put(\"blogService\", new BlogService());\n         context = new DefaultCamelContext(registry);", "fixed": "         SimpleRegistry registry = new SimpleRegistry();\n        registry.bind(\"blogService\", new BlogService());\n         context = new DefaultCamelContext(registry);", "sourceBeforeFix": "registry.put(\"blogService\",new BlogService())", "sourceAfterFix": "registry.bind(\"blogService\",new BlogService())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return null ; } java.lang.String result = null ; try { result = TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; } catch ( TYPE_2 VAR_2 ) { result = VAR_1 ; } return result ; }\n", "fixed": "public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return null ; } java.lang.String result = null ; try { result = TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; } catch ( TYPE_2 VAR_2 ) { result = VAR_1 ; } result = result . trim ( ) ; return result ; }\n"}
{"problem": "void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) == 0 ) ) { if ( ( ( TYPE_1 . METHOD_2 ( ) ) - ( VAR_3 ) ) < ( VAR_4 ) ) { if ( ( ( TYPE_1 . METHOD_2 ( ) ) - ( VAR_5 ) ) > ( VAR_6 ) ) { VAR_5 += VAR_6 ; y += VAR_7 ; VAR_8 = y ; } } } }\n", "fixed": "void METHOD_1 ( ) { if ( ( VAR_1 ) && ( ( VAR_2 ) == 0 ) ) { if ( ( ( TYPE_1 . METHOD_2 ( ) ) - ( VAR_3 ) ) < ( VAR_4 ) ) { if ( ( ( TYPE_1 . METHOD_2 ( ) ) - ( VAR_5 ) ) > ( VAR_6 ) ) { VAR_5 += VAR_6 ; y += VAR_7 ; VAR_8 = y ; } } } }\n"}
{"fixCommitSHA1": "996cadb3e79b248d2f2b3e584a1ea9e9f77fc1c2", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic float getPrefWidth () {\n\t\treturn Math.max(super.getPrefWidth(), titleLabel.getPrefWidth() + getPadLeft() + getPadRight());\n \t}\n \tpublic Table getTitleTable () {", "fixed": " \t}\n \tpublic float getPrefWidth () {\n\t\treturn Math.max(super.getPrefWidth(), titleTable.getPrefWidth() + getPadLeft() + getPadRight());\n \t}\n \tpublic Table getTitleTable () {", "sourceBeforeFix": "titleLabel.getPrefWidth()", "sourceAfterFix": "titleTable.getPrefWidth()"}
{"fixCommitSHA1": "efa5b54542e6ccd1357433f3ae340e94efdd9f6e", "projectName": "apache.hive", "bugType": "Same Function Swap Args", "problem": "             transactionalListenerResponses =\n                 MetaStoreListenerNotifier.notifyEvent(transactionalListeners,\n                                                       EventType.DROP_TABLE,\n                                                      new DropTableEvent(tbl, deleteData, true, this),\n                                                       envContext);\n           }\n           success = ms.commitTransaction();", "fixed": "             transactionalListenerResponses =\n                 MetaStoreListenerNotifier.notifyEvent(transactionalListeners,\n                                                       EventType.DROP_TABLE,\n                                                      new DropTableEvent(tbl, true, deleteData, this),\n                                                       envContext);\n           }\n           success = ms.commitTransaction();", "sourceBeforeFix": "new DropTableEvent(tbl,deleteData,success,this)", "sourceAfterFix": "new DropTableEvent(tbl,success,deleteData,this)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "void METHOD_1 ( int VAR_1 , int b ) { if ( VAR_1 > ( ( VAR_2 ) - 1 ) ) { VAR_3 . METHOD_2 ( ( STRING_1 + VAR_1 ) ) ; } data [ VAR_1 ] = ( ( byte ) ( b & INT_1 ) ) ; }\n", "fixed": "void METHOD_1 ( int VAR_1 , int b ) { if ( ( VAR_1 < 0 ) || ( VAR_1 > ( ( VAR_2 ) - 1 ) ) ) { VAR_3 . METHOD_2 ( ( STRING_1 + VAR_1 ) ) ; } else { data [ VAR_1 ] = ( ( byte ) ( b & INT_1 ) ) ; } }\n"}
{"problem": "private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String [ ] VAR_2 = new java.lang.String [ VAR_1 . METHOD_2 ( ) ] ; for ( int i = 0 ; i < ( VAR_1 . METHOD_2 ( ) ) ; i ++ ) { VAR_2 [ i ] = java.lang.Double . METHOD_3 ( VAR_1 . METHOD_4 ( i ) ) . toString ( ) ; } return TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ; }\n", "fixed": "private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String [ ] VAR_2 = new java.lang.String [ VAR_1 . METHOD_2 ( ) ] ; for ( int i = 0 ; i < ( VAR_1 . METHOD_2 ( ) ) ; i ++ ) { VAR_2 [ i ] = java.lang.Double . METHOD_3 ( VAR_1 . METHOD_4 ( i ) ) . toString ( ) ; } return TYPE_2 . METHOD_5 ( VAR_2 , \"\\t\" ) ; }\n"}
{"problem": "private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_1 VAR_3 = VAR_2 ; while ( VAR_3 != null ) { if ( VAR_1 . equals ( VAR_3 ) ) { return true ; } VAR_3 = VAR_2 . METHOD_2 ( ) ; } return false ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_1 VAR_3 = VAR_2 ; while ( VAR_3 != null ) { if ( VAR_1 . equals ( VAR_3 ) ) { return true ; } VAR_3 = VAR_3 . METHOD_2 ( ) ; } return false ; }\n"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.valueOf(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "fixed": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"problem": "public static void METHOD_1 ( ) { if ( ( ( VAR_1 [ ( ( VAR_1 . length ) - 1 ) ] ) > ( VAR_2 ) ) && ( ( VAR_3 [ ( ( VAR_3 . length ) - 1 ) ] ) > ( VAR_2 ) ) ) { VAR_4 = true ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( ( VAR_1 [ ( ( VAR_1 . length ) - 1 ) ] ) > ( VAR_2 ) ) && ( ( VAR_3 [ ( ( VAR_3 . length ) - 1 ) ] ) > ( VAR_2 ) ) ) { VAR_4 = true ; } }\n"}
{"fixCommitSHA1": "b102d67173da3ca972abf7fcd0a2f779ef9870a3", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "   public Optional<ResourceManagementScheduler> getResourceManagementScheduler()\n   {\n     if (leading) {\n      return Optional.of(resourceManagementScheduler);\n     } else {\n       return Optional.absent();\n     }", "fixed": "   public Optional<ResourceManagementScheduler> getResourceManagementScheduler()\n   {\n     if (leading) {\n      return Optional.fromNullable(resourceManagementScheduler);\n     } else {\n       return Optional.absent();\n     }", "sourceBeforeFix": "Optional.of(resourceManagementScheduler)", "sourceAfterFix": "Optional.fromNullable(resourceManagementScheduler)"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 n ) { if ( ( VAR_1 ) == ( VAR_2 ) ) return null ; java.util.List < TYPE_1 > values = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_3 node : n . METHOD_2 ( ) ) { TYPE_1 VAR_3 = null ; if ( node instanceof TYPE_4 ) { VAR_3 = METHOD_3 ( ( ( TYPE_4 ) ( node ) ) ) ; } values . add ( VAR_3 ) ; } return TYPE_5 . METHOD_4 ( values ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 n ) { if ( ( VAR_1 ) == ( VAR_2 ) ) return null ; java.util.List < TYPE_1 > values = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_3 node : n . METHOD_2 ( ) ) { TYPE_1 VAR_3 = null ; if ( node instanceof TYPE_4 ) { VAR_3 = METHOD_3 ( ( ( TYPE_4 ) ( node ) ) ) ; values . add ( VAR_3 ) ; } } return TYPE_5 . METHOD_4 ( values ) ; }\n"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( context . METHOD_2 ( ) , VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 , VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_4 , VAR_5 , INT_1 ) ; TYPE_2 VAR_6 = TYPE_2 . METHOD_5 ( context ) ; VAR_6 . METHOD_6 ( VAR_7 , VAR_2 ) ; if ( VAR_8 ) { TYPE_3 . METHOD_7 ( context , ( STRING_1 + ( TYPE_4 . METHOD_8 ( VAR_1 ) ) ) ) ; } }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( context . METHOD_2 ( ) , VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 , VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_4 , VAR_5 , INT_1 ) ; TYPE_2 VAR_6 = TYPE_2 . METHOD_5 ( context ) ; VAR_6 . METHOD_6 ( VAR_7 , VAR_2 ) ; if ( VAR_8 ) { TYPE_3 . METHOD_7 ( context , ( STRING_1 + VAR_1 ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String key , TYPE_1 VAR_1 ) { java.lang.Object VAR_2 = TYPE_2 . METHOD_2 ( key ) ; if ( VAR_1 != null ) { if ( VAR_2 == null ) { VAR_1 . METHOD_3 ( ( STRING_1 + key ) ) ; } else { VAR_1 . METHOD_3 ( null , java.lang.String . METHOD_4 ( VAR_2 ) ) ; } } }\n", "fixed": "public void METHOD_1 ( java.lang.String key , TYPE_1 VAR_1 ) { java.lang.Object VAR_2 = TYPE_2 . METHOD_2 ( key ) ; if ( VAR_1 != null ) { if ( VAR_2 == null ) { VAR_1 . METHOD_3 ( ( STRING_1 + key ) ) ; } else { VAR_1 . METHOD_3 ( null , VAR_2 ) ; } } }\n"}
{"problem": "private void METHOD_1 ( final TYPE_1 VAR_1 ) { this . VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( null != ( VAR_2 . METHOD_3 ( ) ) ) { this . VAR_3 = METHOD_4 ( VAR_2 . METHOD_3 ( ) . METHOD_5 ( ) ) ; open ( ) ; } }\n", "fixed": "private void METHOD_1 ( final TYPE_1 VAR_1 ) { this . VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( null != ( VAR_2 ) ) && ( null != ( VAR_2 . METHOD_3 ( ) ) ) ) { this . VAR_3 = METHOD_4 ( VAR_2 . METHOD_3 ( ) . METHOD_5 ( ) ) ; open ( ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 response ) { TYPE_4 VAR_3 = VAR_2 . METHOD_2 ( ) ; TYPE_5 VAR_4 = ( ( TYPE_5 ) ( VAR_3 . METHOD_3 ( VAR_5 ) ) ) ; if ( VAR_4 == null ) { VAR_3 . METHOD_4 ( ) ; return STRING_1 ; } else { return VAR_6 ; } }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_4 VAR_3 = VAR_2 . METHOD_2 ( ) ; TYPE_5 VAR_4 = ( ( TYPE_5 ) ( VAR_3 . METHOD_3 ( VAR_5 ) ) ) ; if ( VAR_4 == null ) { return STRING_1 ; } else { return VAR_6 ; } }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ! ( this . VAR_1 ) ) { VAR_2 = FLOAT_1 / FLOAT_2 ; VAR_3 = false ; METHOD_2 ( ( ( 1 + ( ( TYPE_1 . METHOD_3 ( FLOAT_3 ) ) / FLOAT_4 ) ) / INT_1 ) , FLOAT_5 , FLOAT_6 , 0.0 , VAR_4 ) ; } }\n", "fixed": "public synchronized void METHOD_1 ( ) { if ( ! ( this . VAR_1 ) ) { VAR_2 = FLOAT_1 / FLOAT_2 ; VAR_3 = false ; METHOD_2 ( ( ( 1 + ( ( TYPE_1 . METHOD_3 ( FLOAT_3 ) ) / FLOAT_4 ) ) / INT_1 ) , FLOAT_5 , FLOAT_6 , 0.0 , VAR_4 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ; VAR_4 = TYPE_3 . METHOD_4 ( getActivity ( ) ) . METHOD_5 ( VAR_2 ) ; METHOD_6 ( true ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ; if ( ( VAR_4 ) == null ) VAR_4 = TYPE_3 . METHOD_4 ( getActivity ( ) ) . METHOD_5 ( VAR_2 ) ; }\n"}
{"problem": "private int METHOD_1 ( ) { switch ( VAR_1 ) { case 0 : return INT_1 ; case 1 : return INT_2 ; case INT_3 : return INT_4 ; case INT_5 : return 0 ; case INT_6 : return 0 ; case INT_1 : return 1 ; case INT_2 : return INT_3 ; case INT_4 : return INT_6 ; default : return 0 ; } }\n", "fixed": "private int METHOD_1 ( ) { switch ( VAR_1 ) { case 0 : return INT_1 ; case 1 : return INT_2 ; case INT_3 : return INT_4 ; case INT_5 : return INT_6 ; case INT_6 : return 0 ; case INT_1 : return 1 ; case INT_2 : return INT_3 ; case INT_4 : return INT_5 ; default : return 0 ; } }\n"}
{"problem": "public void start ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; TYPE_2 VAR_3 = TYPE_3 . METHOD_1 ( new TYPE_4 ( VAR_2 ) ) ; boolean VAR_4 = VAR_2 . METHOD_2 ( VAR_5 ) ; if ( VAR_4 ) { METHOD_3 ( ) ; } TYPE_5 VAR_6 = VAR_3 . METHOD_4 ( VAR_7 class ) ; TYPE_6 VAR_8 = VAR_3 . METHOD_4 ( VAR_9 class ) ; METHOD_5 ( VAR_6 , VAR_2 , VAR_8 ) ; }\n", "fixed": "public void start ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; TYPE_2 VAR_3 = TYPE_3 . METHOD_1 ( new TYPE_4 ( VAR_2 ) ) ; boolean VAR_4 = VAR_2 . METHOD_2 ( VAR_5 , false ) ; if ( VAR_4 ) { METHOD_3 ( ) ; } TYPE_5 VAR_6 = VAR_3 . METHOD_4 ( VAR_7 class ) ; TYPE_6 VAR_8 = VAR_3 . METHOD_4 ( VAR_9 class ) ; METHOD_5 ( VAR_6 , VAR_2 , VAR_8 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSlackEndpointBuilder\n             extends\n                 AdvancedSlackEndpointConsumerBuilder, AdvancedSlackEndpointProducerBuilder {\n         default SlackEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSlackEndpointBuilder\n             extends\n                 AdvancedSlackEndpointConsumerBuilder, AdvancedSlackEndpointProducerBuilder {\n         default SlackEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "28012b50ce6ee39b180978ae71682657cc461eb8", "projectName": "apache.hbase", "bugType": "Less Specific If", "problem": "     if (curOps > 0) {\n       long curTime = this.getPreviousIntervalAverageTime();\n       long totalTime = curTime * curOps;\n      if (totalTime / curTime == curOps) {\n         super.inc(curOps, totalTime);\n       } else {\n         LOG.info(\"Stats for \" + this.getName() + \" overflowed! resetting\");", "fixed": "     if (curOps > 0) {\n       long curTime = this.getPreviousIntervalAverageTime();\n       long totalTime = curTime * curOps;\n      if (curTime == 0 || totalTime / curTime == curOps) {\n         super.inc(curOps, totalTime);\n       } else {\n         LOG.info(\"Stats for \" + this.getName() + \" overflowed! resetting\");", "sourceBeforeFix": "totalTime / curTime == curOps", "sourceAfterFix": "curTime == 0 || totalTime / curTime == curOps"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 item ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( METHOD_3 ( ) ) . METHOD_4 ( ) ; VAR_1 . setValue ( item ) ; item . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; VAR_3 . put ( VAR_1 . METHOD_6 ( ) , item ) ; return item ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 item ) { TYPE_2 VAR_1 = VAR_2 . METHOD_4 ( ) ; VAR_1 . setValue ( item ) ; item . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; VAR_3 . put ( VAR_1 . METHOD_6 ( ) , item ) ; return item ; }\n"}
{"problem": "public boolean METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { if ( ( VAR_2 + VAR_3 ) > ( VAR_4 ) ) return false ; for ( int i = 0 ; i < VAR_3 ; i ++ ) { if ( ( VAR_5 [ VAR_1 ] [ ( VAR_2 + i ) ] ) == true ) return false ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { if ( ( VAR_2 + VAR_3 ) >= ( VAR_4 ) ) return false ; for ( int i = 0 ; i < VAR_3 ; i ++ ) { if ( ( VAR_5 [ VAR_1 ] [ ( VAR_2 + i ) ] ) == true ) return false ; } return true ; }\n"}
{"problem": "private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_3 . METHOD_2 ( 0 ) ; VAR_3 . METHOD_3 ( new java.lang.Float ( ( ( VAR_4 ) / INT_1 ) ) ) ; VAR_3 . METHOD_4 ( new java.lang.Float ( ( ( VAR_4 ) / INT_2 ) ) ) ; VAR_1 . METHOD_5 ( VAR_3 ) ; }\n", "fixed": "private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_3 . METHOD_2 ( 0 ) ; VAR_3 . METHOD_3 ( ( ( VAR_4 ) / INT_1 ) ) ; VAR_3 . METHOD_4 ( ( ( VAR_4 ) / INT_2 ) ) ; VAR_1 . METHOD_5 ( VAR_3 ) ; }\n"}
{"problem": "java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 query = VAR_1 . METHOD_3 ( STRING_1 ) ; java.util.List VAR_2 = query . METHOD_4 ( ) ; java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( java.lang.Object VAR_4 : VAR_2 ) { VAR_3 . add ( ( ( TYPE_1 ) ( VAR_4 ) ) ) ; } VAR_1 . METHOD_5 ( ) ; TYPE_3 . METHOD_5 ( ) ; return VAR_3 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 query = VAR_1 . METHOD_3 ( STRING_1 ) ; java.util.List VAR_2 = query . METHOD_4 ( ) ; java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( java.lang.Object VAR_4 : VAR_2 ) { VAR_3 . add ( ( ( TYPE_1 ) ( VAR_4 ) ) ) ; } VAR_1 . METHOD_5 ( ) ; return VAR_3 ; }\n"}
{"problem": "private void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; if ( VAR_1 != null ) { VAR_3 = VAR_1 ; } else { throw new TYPE_1 ( VAR_4 ) ; } if ( STRING_1 . equals ( VAR_3 ) ) { TYPE_2 VAR_5 = TYPE_3 . METHOD_4 ( ) ; VAR_3 = VAR_5 . METHOD_5 ( ) . METHOD_6 ( ) ; } }\n", "fixed": "private void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; if ( VAR_1 == null ) { throw new TYPE_1 ( VAR_4 ) ; } VAR_3 = VAR_1 ; if ( STRING_1 . equals ( VAR_3 ) ) { TYPE_2 VAR_5 = TYPE_3 . METHOD_4 ( ) ; VAR_3 = VAR_5 . METHOD_5 ( ) . METHOD_6 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( ( VAR_1 . METHOD_3 ( ) ) > 1 ) { if ( ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_4 ( ) ) ) { VAR_3 . METHOD_5 ( null ) ; } VAR_1 . METHOD_6 ( ) ; } else { super . METHOD_1 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( ( VAR_1 . METHOD_3 ( ) ) > 0 ) { if ( ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_4 ( ) ) ) { VAR_3 . METHOD_5 ( null ) ; } VAR_1 . METHOD_6 ( ) ; } else { super . METHOD_1 ( ) ; } }\n"}
{"problem": "public java.util.Map < java.lang.Integer , TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Map < java.lang.Integer , TYPE_1 > result = TYPE_3 . METHOD_2 ( ) ; for ( TYPE_4 c : VAR_2 . values ( ) ) { result . put ( VAR_3 , new TYPE_1 ( c , VAR_4 ) ) ; } return result ; }\n", "fixed": "private static java.util.Map < java.lang.Integer , TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Map < java.lang.Integer , TYPE_1 > result = TYPE_3 . METHOD_2 ( ) ; for ( TYPE_4 c : VAR_2 . values ( ) ) { result . put ( VAR_3 , new TYPE_1 ( c , VAR_4 ) ) ; } return result ; }\n"}
{"problem": "public void METHOD_1 ( ) { boolean VAR_1 = VAR_2 . METHOD_2 ( VAR_3 . getText ( ) , VAR_4 , path , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ; TYPE_1 . METHOD_3 ( ) . METHOD_4 ( false ) ; if ( VAR_1 ) { VAR_4 . METHOD_5 ( STRING_1 ) ; TYPE_2 . METHOD_6 ( this , STRING_1 , STRING_2 , VAR_10 ) ; } else { VAR_4 . METHOD_5 ( STRING_3 ) ; TYPE_2 . METHOD_6 ( this , STRING_3 , STRING_4 , VAR_11 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { boolean VAR_1 = VAR_2 . METHOD_2 ( VAR_3 . getText ( ) , VAR_4 , path , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ; TYPE_1 . METHOD_3 ( ) . METHOD_4 ( false ) ; if ( VAR_1 ) { VAR_4 . METHOD_5 ( STRING_1 ) ; } else { VAR_4 . METHOD_5 ( STRING_3 ) ; } }\n"}
{"problem": "protected java.lang.Object METHOD_1 ( java.lang.String name ) { java.lang.Object VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) , name ) ; TYPE_1 . METHOD_2 ( ) . METHOD_5 ( VAR_2 . METHOD_4 ( ) , name , null ) ; return VAR_1 ; }\n", "fixed": "private java.lang.Object METHOD_1 ( java.lang.String name ) { java.lang.Object VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) , name ) ; TYPE_1 . METHOD_2 ( ) . METHOD_5 ( VAR_2 . METHOD_4 ( ) , name , null ) ; return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View view ) { VAR_1 . METHOD_2 ( STRING_1 , ( ( ( ( TYPE_1 ) ( METHOD_3 ( VAR_2 . token ) ) ) . getText ( ) ) + STRING_2 ) ) ; VAR_1 . commit ( ) ; METHOD_4 ( ) ; android.content.Intent intent = new android.content.Intent ( METHOD_5 ( ) , VAR_3 class ) ; intent . METHOD_6 ( VAR_4 ) ; METHOD_5 ( ) . METHOD_7 ( intent ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { VAR_1 . METHOD_2 ( STRING_1 , ( ( ( ( TYPE_1 ) ( METHOD_3 ( VAR_2 . token ) ) ) . getText ( ) ) + STRING_2 ) ) ; VAR_1 . commit ( ) ; METHOD_4 ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; intent . METHOD_6 ( VAR_4 ) ; this . METHOD_7 ( intent ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { throw new TYPE_2 ( ) ; } TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 [ VAR_3 ] ) ) ; if ( ! ( METHOD_2 ( ) ) ) { ( VAR_4 ) -- ; } return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { throw new TYPE_2 ( ) ; } TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 [ ( ( VAR_3 ) ++ ) ] ) ) ; if ( ! ( METHOD_2 ( ) ) ) { ( VAR_4 ) -- ; } return VAR_1 ; }\n"}
{"problem": "private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return false ; } java.lang.String VAR_2 = METHOD_2 ( ) . getString ( VAR_3 ) ; if ( VAR_2 == null ) { return false ; } VAR_4 = new java.io.File ( VAR_2 ) ; return true ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return false ; } java.lang.String VAR_2 = VAR_1 . getString ( VAR_3 ) ; if ( VAR_2 == null ) { return false ; } VAR_4 = new java.io.File ( VAR_2 ) ; return true ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 , STRING_1 , VAR_2 ) ; } if ( ( VAR_3 ) != null ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 , STRING_2 , VAR_3 ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( VAR_2 ) != null ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 , STRING_1 , VAR_2 ) ; } if ( ( VAR_3 ) != null ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 , STRING_2 , VAR_3 ) ; } }\n"}
{"problem": "public java.lang.String [ ] METHOD_1 ( ) { java.lang.String [ ] output = new java.lang.String [ METHOD_2 ( ) ] ; for ( int i = 0 ; i < ( METHOD_2 ( ) ) ; i ++ ) { output [ i ] = VAR_1 [ i ] . METHOD_3 ( ) ; } return output ; }\n", "fixed": "public java.lang.String [ ] METHOD_1 ( ) { java.lang.String [ ] output = new java.lang.String [ METHOD_2 ( ) ] ; for ( int i = 0 ; i < ( METHOD_2 ( ) ) ; i ++ ) { output [ i ] = VAR_1 [ i ] . getName ( ) ; } return output ; }\n"}
{"fixCommitSHA1": "6692574f6a113ff93038c6abad9b2b1420499f82", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Binary Operator", "problem": "       }\n     }\n     boolean overwriteOriginalNer = false;\n    if (prevNerEndIndex != (start-1) || nextNerStartIndex != end) {\n     } else if (startNer == null) {", "fixed": "       }\n     }\n     boolean overwriteOriginalNer = false;\n    if (prevNerEndIndex != (start-1) && nextNerStartIndex != end) {\n     } else if (startNer == null) {", "sourceBeforeFix": "prevNerEndIndex != (start - 1) || nextNerStartIndex != end", "sourceAfterFix": "prevNerEndIndex != (start - 1) && nextNerStartIndex != end"}
{"fixCommitSHA1": "82b4e26900db7848de77ff9ed57682222c4fa517", "projectName": "jersey.jersey", "bugType": "Change Caller in Function Call", "problem": "                         warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\\n');\n                         break;\n                     case HINT:\n                        warnings.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\\n');\n                         break;\n                 }\n             }", "fixed": "                         warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\\n');\n                         break;\n                     case HINT:\n                        hints.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\\n');\n                         break;\n                 }\n             }", "sourceBeforeFix": "warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))", "sourceAfterFix": "hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))"}
{"problem": "void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_2 . setEnabled ( true ) ; VAR_3 . METHOD_2 ( false ) ; } VAR_1 = this ; VAR_4 . METHOD_2 ( true ) ; VAR_5 . setEnabled ( false ) ; if ( ! ( VAR_6 . get ( position ) . equals ( VAR_7 . METHOD_3 ( ) ) ) ) { VAR_7 . METHOD_4 ( VAR_6 . get ( position ) ) ; VAR_8 . METHOD_5 ( VAR_7 ) ; } }\n", "fixed": "void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_3 . METHOD_2 ( false ) ; } VAR_1 = this ; VAR_4 . METHOD_2 ( true ) ; if ( ! ( VAR_6 . get ( position ) . equals ( VAR_7 . METHOD_3 ( ) ) ) ) { VAR_7 . METHOD_4 ( VAR_6 . get ( position ) ) ; VAR_8 . METHOD_5 ( VAR_7 ) ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DockerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDockerEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DockerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDockerEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( double VAR_1 , double VAR_2 ) { this . VAR_1 = VAR_1 ; this . VAR_2 = VAR_2 ; for ( TYPE_1 VAR_3 : VAR_4 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; } for ( TYPE_1 VAR_3 : VAR_5 ) { VAR_3 . METHOD_2 ( VAR_2 ) ; } for ( TYPE_1 VAR_3 : VAR_6 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; } for ( TYPE_1 VAR_3 : VAR_7 ) { VAR_3 . METHOD_2 ( VAR_2 ) ; } }\n", "fixed": "public void METHOD_1 ( double VAR_1 , double VAR_2 ) { this . VAR_1 = VAR_1 ; this . VAR_2 = VAR_2 ; for ( TYPE_1 VAR_3 : VAR_6 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; } for ( TYPE_1 VAR_3 : VAR_7 ) { VAR_3 . METHOD_2 ( VAR_2 ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.Boolean b ) { if ( b == true ) { java.lang.String VAR_1 = n . getText ( ) . toString ( ) ; java.lang.String VAR_2 = VAR_3 . getText ( ) . toString ( ) ; int VAR_4 = METHOD_2 ( VAR_2 ) ; if ( VAR_4 >= 0 ) { char [ ] VAR_5 = TYPE_1 . METHOD_3 ( VAR_1 , VAR_4 ) ; java.lang.String output = METHOD_4 ( VAR_6 , VAR_5 ) ; return output ; } else return STRING_1 ; } else { return STRING_1 ; } }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.Boolean b ) { if ( b == true ) { java.lang.String VAR_1 = n . getText ( ) . toString ( ) ; java.lang.String VAR_2 = VAR_3 . getText ( ) . toString ( ) ; int VAR_4 = METHOD_2 ( VAR_2 ) ; if ( VAR_4 >= 0 ) { char [ ] VAR_5 = METHOD_3 ( VAR_1 , VAR_4 ) ; java.lang.String output = METHOD_4 ( VAR_6 , VAR_5 ) ; return output ; } else return STRING_1 ; } else { return STRING_1 ; } }\n"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; if ( ! ( METHOD_3 ( ) ) ) { return ; } METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_3 = STRING_1 ; VAR_4 = new TYPE_2 ( this ) ; VAR_5 = this ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ! ( METHOD_3 ( ) ) ) { return ; } METHOD_2 ( VAR_2 ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_3 = STRING_1 ; VAR_4 = new TYPE_2 ( this ) ; VAR_5 = this ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "77407490afdacb115dcd80dc3905fcf831e7f38c", "projectName": "apache.hive", "bugType": "More Specific If", "problem": "   public void closeAndOpen(TezSessionState sessionState, HiveConf conf)\n       throws Exception {\n     HiveConf sessionConf = sessionState.getConf();\n    if (sessionConf.get(\"tez.queue.name\") != null) {\n       conf.set(\"tez.queue.name\", sessionConf.get(\"tez.queue.name\"));\n     }\n     close(sessionState);", "fixed": "   public void closeAndOpen(TezSessionState sessionState, HiveConf conf)\n       throws Exception {\n     HiveConf sessionConf = sessionState.getConf();\n    if (sessionConf != null && sessionConf.get(\"tez.queue.name\") != null) {\n       conf.set(\"tez.queue.name\", sessionConf.get(\"tez.queue.name\"));\n     }\n     close(sessionState);", "sourceBeforeFix": "sessionConf.get(\"tez.queue.name\") != null", "sourceAfterFix": "sessionConf != null && sessionConf.get(\"tez.queue.name\") != null"}
{"problem": "public int METHOD_1 ( java.lang.String TYPE_1 ) { int result = 1 ; int VAR_1 = 0 ; for ( char c : TYPE_1 . METHOD_2 ( ) ) { if ( c == CHAR_1 ) { VAR_1 ++ ; } else { VAR_1 -- ; } if ( VAR_1 < 0 ) { result = 0 ; break ; } } return result ; }\n", "fixed": "public int METHOD_1 ( java.lang.String TYPE_1 ) { int result = 1 ; int VAR_1 = 0 ; for ( char c : TYPE_1 . METHOD_2 ( ) ) { if ( c == CHAR_1 ) { VAR_1 ++ ; } else { VAR_1 -- ; } if ( VAR_1 < 0 ) { result = 0 ; break ; } } if ( VAR_1 != 0 ) { result = 0 ; } return result ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_4 = VAR_5 ; VAR_3 . key = STRING_1 ; VAR_3 . pattern = VAR_2 . pattern ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_6 . add ( VAR_2 ) ; } }\n", "fixed": "private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( null != VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_4 = VAR_5 ; VAR_3 . key = STRING_1 ; VAR_3 . pattern = VAR_2 . pattern ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_6 . add ( VAR_2 ) ; } } }\n"}
{"problem": "private void METHOD_1 ( ) { java.util.ArrayList < java.lang.String > words = this . VAR_1 . METHOD_2 ( new java.lang.String ( this . VAR_2 , 0 , this . VAR_3 ) ) ; if ( words . isEmpty ( ) ) { METHOD_3 ( false ) ; } else { this . VAR_4 . METHOD_4 ( words ) ; METHOD_3 ( true ) ; } }\n", "fixed": "private void METHOD_1 ( ) { java.util.ArrayList < java.lang.String > words ; if ( ( this . VAR_2 . length ) > 0 ) { words = this . VAR_1 . METHOD_2 ( new java.lang.String ( this . VAR_2 , 0 , this . VAR_3 ) ) ; } else { words = new java.util.ArrayList < java.lang.String > ( ) ; } if ( words . isEmpty ( ) ) { METHOD_3 ( false ) ; } else { this . VAR_4 . METHOD_4 ( words ) ; METHOD_3 ( true ) ; } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( VAR_1 ) ) { throw new TYPE_3 ( STRING_1 ) ; } if ( TYPE_4 . METHOD_3 ( VAR_1 ) ) { return VAR_2 ; } if ( TYPE_4 . METHOD_4 ( VAR_1 ) ) { return VAR_3 ; } return VAR_4 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( ! ( TYPE_4 . METHOD_2 ( VAR_1 ) ) ) { throw new TYPE_3 ( STRING_1 ) ; } if ( TYPE_4 . METHOD_3 ( VAR_1 ) ) { return VAR_2 ; } if ( TYPE_4 . METHOD_4 ( VAR_1 ) ) { return VAR_3 ; } return VAR_4 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { try { int VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; VAR_6 . METHOD_3 ( STRING_1 , VAR_2 ) ; VAR_1 . METHOD_4 ( java.lang.String.format ( STRING_2 , VAR_2 ) ) ; } catch ( java.io.IOException VAR_7 ) { VAR_7 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { try { int VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; VAR_1 . METHOD_4 ( java.lang.String.format ( STRING_2 , VAR_2 ) ) ; } catch ( java.io.IOException VAR_7 ) { VAR_7 . METHOD_5 ( ) ; } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { int id = VAR_2 . METHOD_2 ( ) ; java.lang.String VAR_3 = METHOD_3 ( id ) ; VAR_4 . set ( VAR_1 . METHOD_4 ( ) , VAR_3 ) ; VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { int id = VAR_2 . METHOD_2 ( ) ; java.lang.String VAR_3 = METHOD_3 ( id ) ; VAR_4 . set ( VAR_1 . METHOD_4 ( ) , VAR_3 ) ; VAR_4 . set ( VAR_3 , VAR_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 ) >= ( VAR_2 ) ) { return ; } java.lang.String VAR_3 = context . getString ( VAR_4 ) ; java.lang.String VAR_5 = context . getString ( VAR_6 ) ; TYPE_1 VAR_7 = new TYPE_1 ( VAR_8 , VAR_3 , VAR_9 ) ; VAR_7 . METHOD_2 ( VAR_5 ) ; VAR_7 . METHOD_3 ( true ) ; VAR_10 . METHOD_4 ( VAR_7 ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 ) < ( VAR_2 ) ) { return ; } java.lang.String VAR_3 = context . getString ( VAR_4 ) ; java.lang.String VAR_5 = context . getString ( VAR_6 ) ; TYPE_1 VAR_7 = new TYPE_1 ( VAR_8 , VAR_3 , VAR_9 ) ; VAR_7 . METHOD_2 ( VAR_5 ) ; VAR_7 . METHOD_3 ( true ) ; VAR_10 . METHOD_4 ( VAR_7 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { long VAR_1 = VAR_2 . METHOD_2 ( ) ; long VAR_3 = VAR_2 . METHOD_3 ( ) ; double VAR_4 = ( ( double ) ( VAR_1 ) ) / ( ( double ) ( VAR_3 ) ) ; double VAR_5 = METHOD_4 ( VAR_4 ) ; return new TYPE_1 ( VAR_5 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { long VAR_1 = VAR_2 . METHOD_2 ( ) ; long VAR_3 = VAR_2 . METHOD_3 ( ) ; double VAR_5 ; if ( VAR_3 > 0 ) { double VAR_4 = ( ( double ) ( VAR_1 ) ) / ( ( double ) ( VAR_3 ) ) ; VAR_5 = METHOD_4 ( VAR_4 ) ; } else { VAR_5 = 0 ; } return new TYPE_1 ( VAR_5 ) ; }\n"}
{"problem": "private static void METHOD_1 ( java.lang.StringBuilder VAR_1 , java.util.List < TYPE_1 > VAR_2 ) { if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_1 . append ( STRING_1 ) ; for ( TYPE_1 p : VAR_2 ) { TYPE_2 . METHOD_1 ( VAR_1 , STRING_2 , p ) ; } } for ( TYPE_1 p : VAR_2 ) { TYPE_2 . METHOD_1 ( VAR_1 , STRING_2 , p ) ; } }\n", "fixed": "private static void METHOD_1 ( java.lang.StringBuilder VAR_1 , java.util.List < TYPE_1 > VAR_2 ) { if ( ! ( VAR_2 . isEmpty ( ) ) ) { VAR_1 . append ( STRING_1 ) ; for ( TYPE_1 p : VAR_2 ) { TYPE_2 . METHOD_1 ( VAR_1 , STRING_2 , p ) ; } } for ( TYPE_1 p : VAR_2 ) { TYPE_2 . METHOD_1 ( VAR_1 , STRING_2 , p ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; java.util.List < TYPE_1 > VAR_3 = VAR_1 . METHOD_4 ( TYPE_3 . METHOD_5 ( STRING_1 ) ) ; java.lang.System.out.println ( ( ( java.lang.Integer.toString ( VAR_3 . size ( ) ) ) + STRING_2 ) ) ; java.lang.System.out.println ( ( STRING_3 + ( java.lang.Integer.toString ( METHOD_6 ( VAR_1 , VAR_2 ) ) ) ) ) ; return VAR_3 . get ( METHOD_6 ( VAR_1 , VAR_2 ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; java.util.List < TYPE_1 > VAR_3 = VAR_1 . METHOD_4 ( TYPE_3 . METHOD_5 ( STRING_1 ) ) ; return VAR_3 . get ( METHOD_6 ( VAR_1 , VAR_2 ) ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 ; int VAR_3 = TYPE_1 . METHOD_2 ( this , VAR_1 ) ; if ( VAR_3 == ( VAR_4 ) ) { TYPE_2 . METHOD_3 ( this , new java.lang.String [ ] { VAR_1 } , 1 ) ; } VAR_5 . METHOD_4 ( VAR_6 , 0 , 0 , VAR_7 ) ; }\n", "fixed": "private void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 ; int VAR_3 = TYPE_1 . METHOD_2 ( this , VAR_1 ) ; if ( VAR_3 != ( VAR_4 ) ) { TYPE_2 . METHOD_3 ( this , new java.lang.String [ ] { VAR_1 } , 1 ) ; } VAR_5 . METHOD_4 ( VAR_6 , 0 , 0 , VAR_7 ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { METHOD_2 ( ) ; try { boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 ) { java.lang.System.err.println ( STRING_1 ) ; METHOD_4 ( ) ; return ; } } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_5 ( ) ; } try { VAR_3 . METHOD_6 ( VAR_1 ) ; } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_5 ( ) ; } METHOD_4 ( ) ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String VAR_1 ) { boolean status = false ; METHOD_2 ( ) ; try { boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 ) { java.lang.System.err.println ( STRING_1 ) ; METHOD_4 ( ) ; return status ; } } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_5 ( ) ; } try { VAR_3 . METHOD_6 ( VAR_1 ) ; status = true ; } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_5 ( ) ; } METHOD_4 ( ) ; return status ; }\n"}
{"problem": "public boolean METHOD_1 ( float VAR_1 ) { if ( ( ( METHOD_2 ( ) ) != ( VAR_2 ) ) && ( VAR_1 > 0.0F ) ) { VAR_3 = ( ( VAR_3 ) + VAR_1 ) - FLOAT_1 ; if ( ( VAR_3 ) >= 0.0F ) { setState ( VAR_4 ) ; } } return false ; }\n", "fixed": "public boolean METHOD_1 ( float VAR_1 ) { if ( ( ( METHOD_2 ( ) ) != ( VAR_2 ) ) && ( VAR_1 > 0.0F ) ) { VAR_3 = ( ( VAR_3 ) + VAR_1 ) - FLOAT_1 ; if ( ( VAR_3 ) >= 0.0F ) { setState ( VAR_4 ) ; } return true ; } return false ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; if ( VAR_3 != null ) { java.lang.String VAR_4 = STRING_1 ; if ( ( VAR_3 . METHOD_3 ( ) ) != null ) { VAR_4 = VAR_3 . METHOD_5 ( ) . getName ( ) ; } VAR_2 . METHOD_6 ( ) . METHOD_7 ( VAR_3 . METHOD_8 ( ) , VAR_4 ) ; } } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; if ( VAR_3 != null ) { java.lang.String VAR_4 = STRING_1 ; if ( ( VAR_3 . METHOD_5 ( ) ) != null ) { VAR_4 = VAR_3 . METHOD_5 ( ) . getName ( ) ; } VAR_2 . METHOD_6 ( ) . METHOD_7 ( VAR_3 . METHOD_8 ( ) , VAR_4 ) ; } } }\n"}
{"fixCommitSHA1": "338d4a036b25526d2e5bf53c5e49f56ccbbf356f", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t */\r\n \tpublic void beginCache () {\r\n \t\tif (currentCache != null) throw new IllegalStateException(\"endCache must be called before begin.\");\r\n\t\tcurrentCache = new Cache(caches.size(), mesh.getNumVertices() / 2 * 6);\r\n \t\tcaches.add(currentCache);\r\n \t\tmesh.getVerticesBuffer().compact();\r\n \t}\r", "fixed": " \t */\r\n \tpublic void beginCache () {\r\n \t\tif (currentCache != null) throw new IllegalStateException(\"endCache must be called before begin.\");\r\n\t\tcurrentCache = new Cache(caches.size(), mesh.getNumVertices() / 4 * 6);\r\n \t\tcaches.add(currentCache);\r\n \t\tmesh.getVerticesBuffer().compact();\r\n \t}\r", "sourceBeforeFix": "offset * 12", "sourceAfterFix": "offset * 6"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 . METHOD_2 ( ) ; this . VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; this . VAR_3 = VAR_1 . METHOD_5 ( ) ; this . VAR_4 = VAR_1 . METHOD_6 ( ) ; this . VAR_5 = VAR_1 . METHOD_7 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 . METHOD_2 ( ) ; this . VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; this . VAR_3 = VAR_1 . METHOD_5 ( ) ; this . VAR_4 . METHOD_3 ( VAR_1 . METHOD_6 ( ) ) ; this . VAR_5 = VAR_1 . METHOD_7 ( ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; TYPE_3 VAR_4 = METHOD_4 ( ) . METHOD_5 ( ) ; VAR_4 . replace ( VAR_5 , VAR_2 ) ; VAR_4 . METHOD_6 ( null ) ; VAR_4 . commit ( ) ; return true ; } default : return super . METHOD_1 ( item ) ; } }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; TYPE_3 VAR_4 = METHOD_4 ( ) . METHOD_5 ( ) ; VAR_4 . replace ( VAR_5 , VAR_2 ) ; VAR_4 . commit ( ) ; return true ; } default : return super . METHOD_1 ( item ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; for ( int i = 0 ; i < ( VAR_3 . length ) ; i ++ ) { for ( int j = 0 ; j < ( VAR_3 [ i ] . length ) ; j ++ ) { VAR_3 [ i ] [ j ] = VAR_4 ; } } return VAR_2 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; for ( int i = 0 ; i < ( VAR_3 . length ) ; i ++ ) { for ( int j = 0 ; j < ( VAR_3 [ i ] . length ) ; j ++ ) { } } return VAR_2 ; }\n"}
{"problem": "private java.util.ArrayList < java.util.HashMap < java.lang.String , TYPE_1 > > METHOD_1 ( java.util.HashMap < java.lang.String , TYPE_1 > VAR_1 ) { java.util.ArrayList < java.util.HashMap < java.lang.String , TYPE_1 > > VAR_2 = new java.util.ArrayList < java.util.HashMap < java.lang.String , TYPE_1 > > ( ) ; for ( int i = 0 ; i < ( VAR_3 ) ; i ++ ) { java.util.HashMap < java.lang.String , TYPE_1 > VAR_4 = this . METHOD_2 ( VAR_1 ) ; VAR_2 . add ( VAR_4 ) ; } return VAR_2 ; }\n", "fixed": "private java.util.ArrayList < java.util.HashMap < java.lang.String , TYPE_1 > > METHOD_1 ( java.util.HashMap < java.lang.String , TYPE_1 > VAR_1 ) { java.util.ArrayList < java.util.HashMap < java.lang.String , TYPE_1 > > VAR_2 = new java.util.ArrayList < java.util.HashMap < java.lang.String , TYPE_1 > > ( ) ; for ( int i = 0 ; i < ( this . VAR_3 ) ; i ++ ) { java.util.HashMap < java.lang.String , TYPE_1 > VAR_4 = this . METHOD_2 ( VAR_1 ) ; VAR_2 . add ( VAR_4 ) ; } return VAR_2 ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastQueueEndpointBuilder\n             extends\n                 HazelcastQueueEndpointConsumerBuilder, HazelcastQueueEndpointProducerBuilder {\n         default AdvancedHazelcastQueueEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastQueueEndpointBuilder\n             extends\n                 HazelcastQueueEndpointConsumerBuilder, HazelcastQueueEndpointProducerBuilder {\n         default AdvancedHazelcastQueueEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public boolean execute ( ) { if ( ( ( VAR_1 . METHOD_1 ( ) ) - ( VAR_2 ) ) > INT_1 ) { VAR_3 . remove ( this ) ; VAR_4 . add ( this ) ; } return this . VAR_5 . build ( this . VAR_6 , this . VAR_7 ) ; }\n", "fixed": "public boolean execute ( ) { if ( ( ( this . VAR_1 . METHOD_1 ( ) ) - ( this . VAR_2 ) ) > INT_1 ) { this . VAR_3 . remove ( this ) ; this . VAR_4 . add ( this ) ; } return this . VAR_5 . build ( this . VAR_6 , this . VAR_7 ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String name , java.lang.String text ) throws java.lang.Exception { boolean value = ( \"true\" . METHOD_2 ( text ) ) || ( STRING_1 . METHOD_2 ( text ) ) ; VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) , java.lang.Boolean . METHOD_5 ( value ) ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String name , java.lang.String text ) throws java.lang.Exception { if ( null != text ) text = text . trim ( ) ; boolean value = ( \"true\" . METHOD_2 ( text ) ) || ( STRING_1 . METHOD_2 ( text ) ) ; VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) , java.lang.Boolean . METHOD_5 ( value ) ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { java.lang.String value = ( ( java.lang.String ) ( VAR_2 ) ) ; boolean VAR_3 = value . equals ( VAR_4 ) ; VAR_5 . METHOD_2 ( VAR_6 . getString ( ( VAR_3 ? VAR_7 : VAR_8 ) ) ) ; VAR_1 . METHOD_3 ( VAR_6 . getString ( ( VAR_3 ? VAR_9 : VAR_10 ) ) ) ; return true ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { java.lang.String value = ( ( java.lang.String ) ( VAR_2 ) ) ; boolean VAR_3 = ( null != value ) && ( value . equals ( VAR_4 ) ) ; VAR_5 . METHOD_2 ( VAR_6 . getString ( ( VAR_3 ? VAR_7 : VAR_8 ) ) ) ; VAR_1 . METHOD_3 ( VAR_6 . getString ( ( VAR_3 ? VAR_9 : VAR_10 ) ) ) ; return true ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"problem": "public static boolean METHOD_1 ( java.lang.String VAR_1 ) { java.util.Scanner VAR_2 = new java.util.Scanner ( VAR_3 ) ; java.lang.System.out.println ( ( VAR_1 + STRING_1 ) ) ; java.lang.String result = VAR_2 . METHOD_2 ( ) ; if ( result . equals ( STRING_2 ) ) { return true ; } else if ( result . equals ( STRING_3 ) ) { return false ; } java.lang.System.out.println ( STRING_4 ) ; return TYPE_1 . METHOD_1 ( VAR_1 ) ; }\n", "fixed": "public static boolean METHOD_1 ( java.lang.String VAR_1 ) { java.util.Scanner VAR_2 = new java.util.Scanner ( VAR_3 ) ; java.lang.System.out.println ( ( VAR_1 + STRING_1 ) ) ; java.lang.String result = VAR_2 . METHOD_2 ( ) ; if ( result . equals ( STRING_2 ) ) { return true ; } else if ( result . equals ( STRING_3 ) ) { return false ; } else { java.lang.System.out.println ( STRING_4 ) ; return TYPE_1 . METHOD_1 ( VAR_1 ) ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedStubEndpointBuilder\n             extends\n                 AdvancedStubEndpointConsumerBuilder, AdvancedStubEndpointProducerBuilder {\n         default StubEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedStubEndpointBuilder\n             extends\n                 AdvancedStubEndpointConsumerBuilder, AdvancedStubEndpointProducerBuilder {\n         default StubEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public boolean METHOD_1 ( java.lang.String query ) { if ( ! ( query . equals ( STRING_1 ) ) ) { VAR_1 = new TYPE_1 ( this , TYPE_2 . METHOD_2 ( this ) . METHOD_3 ( query ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String query ) { if ( ! ( query . equals ( STRING_1 ) ) ) { VAR_1 = new TYPE_1 ( this , TYPE_2 . METHOD_2 ( this ) . METHOD_3 ( query ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; } else { VAR_2 . METHOD_4 ( null ) ; } return false ; }\n"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "fixed": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "public static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { VAR_1 = new TYPE_3 ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ; } VAR_2 . add ( VAR_1 ) ; if ( ( VAR_3 ) && ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( ) ; if ( TYPE_4 . init ) { VAR_1 . init ( ) ; if ( VAR_4 ) VAR_1 . METHOD_4 ( ) ; } } }\n", "fixed": "private static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { VAR_1 = new TYPE_3 ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ; } VAR_2 . add ( VAR_1 ) ; if ( ( VAR_3 ) && ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( ) ; if ( TYPE_4 . init ) { VAR_1 . init ( ) ; if ( VAR_4 ) VAR_1 . METHOD_4 ( ) ; } } }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( this . VAR_1 ) == null ) { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; java.lang.String VAR_3 = ( ( java.lang.String ) ( VAR_2 . get ( STRING_1 ) ) ) ; TYPE_3 VAR_4 = METHOD_5 ( ) . METHOD_6 ( VAR_3 ) ; java.lang.System.out.println ( VAR_4 . METHOD_7 ( ) ) ; this . VAR_1 = VAR_4 . METHOD_8 ( ) ; } return VAR_1 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; java.lang.String VAR_3 = ( ( java.lang.String ) ( VAR_2 . get ( STRING_1 ) ) ) ; TYPE_3 VAR_4 = METHOD_5 ( ) . METHOD_6 ( VAR_3 ) ; java.lang.System.out.println ( VAR_4 . METHOD_7 ( ) ) ; this . VAR_1 = VAR_4 . METHOD_8 ( ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     private String fileLocation;\n     \n    private PkgControl root;\n     \n     private String inPkg;", "fixed": "     private String fileLocation;\n     \n    private ImportControl root;\n     \n     private String inPkg;", "sourceBeforeFix": "/**   * The root package controller.   */ private PkgControl root; ", "sourceAfterFix": "/**   * The root package controller.   */ private ImportControl root; "}
{"problem": "private void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( ) ) { TYPE_2 . METHOD_3 ( STRING_1 , VAR_2 . toString ( ) , node , VAR_1 . METHOD_4 ( ) ) ; } try { VAR_3 . METHOD_5 ( node , VAR_1 , new TYPE_3 ( this ) ) ; } catch ( TYPE_4 VAR_4 ) { TYPE_2 . error ( VAR_4 . METHOD_6 ( ) , VAR_4 ) ; VAR_5 . set ( false ) ; } }\n", "fixed": "private void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( ) ) { TYPE_2 . METHOD_3 ( STRING_1 , VAR_2 . toString ( ) , node , VAR_1 . METHOD_4 ( ) ) ; } try { VAR_3 . METHOD_5 ( node , VAR_1 , this ) ; } catch ( TYPE_4 VAR_4 ) { TYPE_2 . error ( VAR_4 . METHOD_6 ( ) , VAR_4 ) ; VAR_5 . set ( false ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { synchronized ( VAR_1 ) { try { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; } } finally { if ( ! ( VAR_3 . METHOD_3 ( ) ) ) { try { VAR_3 . METHOD_1 ( ) ; } catch ( java.io.IOException VAR_4 ) { TYPE_1 . METHOD_4 ( STRING_1 , VAR_4 ) ; } } } } }\n", "fixed": "public void METHOD_1 ( ) { try { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; } } finally { if ( ! ( VAR_3 . METHOD_3 ( ) ) ) { try { VAR_3 . METHOD_1 ( ) ; } catch ( java.io.IOException VAR_4 ) { TYPE_1 . METHOD_4 ( STRING_1 , VAR_4 ) ; } } } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { ( VAR_2 ) ++ ; TYPE_3 . METHOD_2 ( STRING_1 , VAR_1 . toString ( ) ) ; if ( ( VAR_1 . getInt ( STRING_2 ) ) == 1 ) { if ( ! ( VAR_3 ) ) { } VAR_4 . METHOD_3 ( STRING_3 ) ; } METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { ( VAR_2 ) ++ ; TYPE_3 . METHOD_2 ( STRING_1 , VAR_1 . toString ( ) ) ; if ( ( VAR_1 . getInt ( STRING_2 ) ) == 1 ) { VAR_4 . METHOD_3 ( STRING_3 ) ; } METHOD_4 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( android.content.Context context , long VAR_1 , java.lang.String date ) { TYPE_1 . METHOD_2 ( ) . METHOD_1 ( VAR_1 , context ) ; if ( ! ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( date ) ) ) { TYPE_1 . METHOD_2 ( ) . METHOD_4 ( context , TYPE_2 . METHOD_2 ( ) . METHOD_5 ( date ) ) ; } }\n", "fixed": "public void METHOD_1 ( android.content.Context context , long VAR_1 , java.lang.String date ) { TYPE_1 . METHOD_2 ( ) . METHOD_1 ( VAR_1 , context ) ; if ( ! ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( date ) ) ) { TYPE_1 . METHOD_2 ( ) . METHOD_4 ( context , TYPE_2 . METHOD_2 ( ) . METHOD_5 ( date ) , false ) ; } }\n"}
{"problem": "public java.lang.String toString ( ) { if ( ( ( this . VAR_1 ) == null ) || ( ( this . VAR_1 . size ( ) ) == 0 ) ) return STRING_1 ; java.lang.String VAR_2 = STRING_2 + ( VAR_1 . get ( 0 ) . toString ( ) ) ; for ( int i = 1 ; i < ( VAR_1 . size ( ) ) ; i ++ ) VAR_2 = ( VAR_2 + STRING_3 ) + ( VAR_1 . get ( i ) . toString ( ) ) ; return VAR_2 + STRING_4 ; }\n", "fixed": "public java.lang.String toString ( ) { if ( ( ( this . VAR_1 ) == null ) || ( this . VAR_1 . isEmpty ( ) ) ) return STRING_1 ; java.lang.String VAR_2 = STRING_2 + ( VAR_1 . get ( 0 ) . toString ( ) ) ; for ( int i = 1 ; i < ( VAR_1 . size ( ) ) ; i ++ ) VAR_2 = ( VAR_2 + STRING_3 ) + ( VAR_1 . get ( i ) . toString ( ) ) ; return VAR_2 + STRING_4 ; }\n"}
{"problem": "public static java.lang.Integer METHOD_1 ( java.lang.Object value ) throws TYPE_1 { TYPE_2 n = TYPE_3 . METHOD_2 ( value , VAR_1 class ) ; if ( n instanceof java.lang.Integer ) { return ( ( java.lang.Integer ) ( n ) ) ; } else { return new java.lang.Integer ( n . intValue ( ) ) ; } }\n", "fixed": "public static java.lang.Integer METHOD_1 ( java.lang.Object value ) throws TYPE_1 { TYPE_2 n = TYPE_3 . METHOD_2 ( value , VAR_1 class ) ; if ( n instanceof java.lang.Integer ) { return ( ( java.lang.Integer ) ( n ) ) ; } else { return n . intValue ( ) ; } }\n"}
{"problem": "public void init ( ) { VAR_1 . METHOD_1 ( ) ; for ( java.lang.String VAR_2 : VAR_3 ) { for ( int i = 0 ; i < INT_1 ; i ++ ) { TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 , i ) ; VAR_1 . add ( VAR_4 ) ; } } }\n", "fixed": "public void init ( ) { VAR_1 . METHOD_1 ( ) ; for ( java.lang.String VAR_2 : VAR_3 ) { for ( int i = 1 ; i <= INT_1 ; i ++ ) { TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 , i ) ; VAR_1 . add ( VAR_4 ) ; } } }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.System.out.println ( ( STRING_1 + ( VAR_1 ) ) ) ; VAR_1 = new java.util.Date ( ( ( new java.util.Date ( ) . getTime ( ) ) + ( ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) * ( VAR_2 [ VAR_3 ] ) ) ) ) ; if ( ( VAR_3 ) < ( ( VAR_2 . length ) - 1 ) ) ( VAR_3 ) ++ ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = new java.util.Date ( ( ( new java.util.Date ( ) . getTime ( ) ) + ( ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) * ( VAR_2 [ VAR_3 ] ) ) ) ) ; if ( ( VAR_3 ) < ( ( VAR_2 . length ) - 1 ) ) ( VAR_3 ) ++ ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String [ ] args ) { java.lang.String VAR_1 ; java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { java.util.Scanner VAR_3 = new java.util.Scanner ( VAR_4 ) ; VAR_1 = VAR_3 . METHOD_2 ( ) ; TYPE_1 VAR_5 = TYPE_2 . METHOD_3 ( VAR_1 ) ; VAR_5 . METHOD_4 ( VAR_2 , VAR_5 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { java.lang.String VAR_1 ; java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { java.util.Scanner VAR_3 = new java.util.Scanner ( VAR_4 ) ; VAR_1 = VAR_3 . METHOD_2 ( ) ; TYPE_1 VAR_5 = TYPE_2 . METHOD_3 ( VAR_1 ) ; VAR_5 . METHOD_4 ( VAR_2 , VAR_5 ) ; } }\n"}
{"problem": "protected static boolean METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( VAR_1 == null ) { return false ; } for ( TYPE_1 VAR_2 : VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) && ( VAR_2 instanceof TYPE_1 ) ) { boolean VAR_3 = ( ( TYPE_1 ) ( VAR_2 ) ) . METHOD_3 ( ) ; if ( VAR_3 ) return true ; } } return false ; }\n", "fixed": "protected static boolean METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( VAR_1 == null ) { return false ; } for ( TYPE_1 VAR_2 : VAR_1 ) { if ( ( VAR_2 instanceof TYPE_1 ) && ( VAR_2 . METHOD_2 ( ) ) ) { boolean VAR_3 = ( ( TYPE_1 ) ( VAR_2 ) ) . METHOD_3 ( ) ; if ( VAR_3 ) return true ; } } return false ; }\n"}
{"fixCommitSHA1": "6cdc9df75435ba869cf4a4d6a5f2d398439a16f1", "projectName": "alibaba.druid", "bugType": "Change Identifier Used", "problem": "                         try {\n                             notEmpty.signalAll();\n                         } finally {\n                            lock.lock();\n                         }\n                     }", "fixed": "                         try {\n                             notEmpty.signalAll();\n                         } finally {\n                            lock.unlock();\n                         }\n                     }", "sourceBeforeFix": "lock.lock()", "sourceAfterFix": "lock.unlock()"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"problem": "public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = VAR_4 [ VAR_2 ] [ VAR_1 ] ; float VAR_5 = ( VAR_6 ) / INT_1 ; return new TYPE_1 ( ( ( VAR_3 . x ) - VAR_5 ) , ( ( VAR_3 . y ) - VAR_5 ) , ( ( VAR_3 . x ) + VAR_5 ) , ( ( VAR_3 . y ) + VAR_5 ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = VAR_4 [ VAR_2 ] [ VAR_1 ] ; float VAR_5 = ( VAR_6 ) / INT_1 ; return new TYPE_1 ( ( ( VAR_3 . x ) - VAR_5 ) , ( ( VAR_3 . y ) - VAR_5 ) , VAR_6 , VAR_6 ) ; }\n"}
{"problem": "public void METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( ( ( ( int ) ( VAR_1 ) ) / INT_1 ) ) ; if ( ( VAR_3 . METHOD_3 ( ) ) == false ) { VAR_4 . METHOD_4 ( ) ; } if ( ( VAR_5 ) != null ) { VAR_2 . METHOD_5 ( VAR_5 . METHOD_6 ( ) ) ; } else { VAR_2 . METHOD_5 ( STRING_1 ) ; } }\n", "fixed": "public void METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( ( ( ( int ) ( VAR_1 ) ) / INT_1 ) ) ; if ( ( ( VAR_3 . METHOD_3 ( ) ) == false ) && ( ( VAR_4 ) != null ) ) { VAR_4 . METHOD_4 ( ) ; } if ( ( VAR_5 ) != null ) { VAR_2 . METHOD_5 ( VAR_5 . METHOD_6 ( ) ) ; } else { VAR_2 . METHOD_5 ( STRING_1 ) ; } }\n"}
{"problem": "protected int METHOD_1 ( int VAR_1 , int VAR_2 , TYPE_1 path ) { VAR_3 . METHOD_2 ( ) ; for ( int VAR_4 = 0 ; VAR_4 < ( VAR_5 ) ; VAR_4 ++ ) { TYPE_2 node = path . METHOD_3 ( VAR_4 ) ; double VAR_6 = METHOD_4 ( VAR_1 , VAR_2 , node ) ; VAR_3 . add ( VAR_6 ) ; } return VAR_3 . METHOD_5 ( ) ; }\n", "fixed": "protected int METHOD_1 ( int VAR_1 , int VAR_2 , TYPE_1 path ) { VAR_3 . METHOD_2 ( ) ; for ( int VAR_4 = 0 ; VAR_4 < ( VAR_5 ) ; VAR_4 ++ ) { TYPE_2 node = path . METHOD_3 ( VAR_4 ) ; if ( node != null ) { double VAR_6 = METHOD_4 ( VAR_1 , VAR_2 , node ) ; VAR_3 . add ( VAR_6 ) ; } else { VAR_3 . add ( 0.0 ) ; } } return VAR_3 . METHOD_5 ( ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 context ) { try { context . METHOD_2 ( ) . METHOD_3 ( ) ; try { METHOD_4 ( context ) ; context . METHOD_2 ( ) . METHOD_5 ( VAR_1 ) ; } catch ( TYPE_3 VAR_2 ) { context . METHOD_6 ( ) ; throw context . METHOD_7 ( ) . METHOD_8 ( VAR_2 . METHOD_9 ( ) ) ; } } catch ( TYPE_4 VAR_3 ) { throw VAR_3 ; } finally { context . METHOD_2 ( ) . METHOD_10 ( ) ; } return this ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 context ) { try { context . METHOD_2 ( ) . METHOD_3 ( ) ; try { METHOD_4 ( context ) ; context . METHOD_2 ( ) . METHOD_5 ( VAR_1 ) ; } catch ( TYPE_3 VAR_2 ) { context . METHOD_6 ( ) ; throw context . METHOD_7 ( ) . METHOD_8 ( VAR_2 . METHOD_9 ( ) ) ; } } finally { context . METHOD_2 ( ) . METHOD_10 ( ) ; } return this ; }\n"}
{"problem": "public static TYPE_1 getType ( java.lang.String type ) { if ( type . contains ( STRING_1 ) ) { return new TYPE_1 ( VAR_1 , INT_1 , ( - 1 ) , ( - 1 ) ) ; } try { int VAR_2 = TYPE_2 . METHOD_1 ( type ) ; if ( VAR_2 == ( - 1 ) ) return null ; return new TYPE_1 ( VAR_2 ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_2 ( ) ; return null ; } }\n", "fixed": "public static TYPE_1 getType ( java.lang.String type ) { if ( type . equals ( STRING_1 ) ) { return new TYPE_1 ( VAR_1 , INT_1 , ( - 1 ) , ( - 1 ) ) ; } try { int VAR_2 = TYPE_2 . METHOD_1 ( type ) ; if ( VAR_2 == ( - 1 ) ) return null ; return new TYPE_1 ( VAR_2 ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_2 ( ) ; return null ; } }\n"}
{"problem": "public void METHOD_1 ( ) { long VAR_1 = java.lang.Thread . METHOD_2 ( ) . getId ( ) ; long VAR_2 = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) ; java.lang.System.out.println ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_4 , VAR_5 ) ; TYPE_3 . assertNotNull ( VAR_3 ) ; VAR_3 . METHOD_5 ( ) . METHOD_6 ( STRING_3 ) ; TYPE_4 VAR_6 = TYPE_4 . METHOD_7 ( VAR_5 ) ; TYPE_3 . assertNotNull ( VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( ) { long VAR_1 = java.lang.Thread . METHOD_2 ( ) . getId ( ) ; long VAR_2 = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) ; java.lang.System.out.println ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; TYPE_4 VAR_6 = TYPE_4 . METHOD_7 ( VAR_5 ) ; TYPE_3 . assertNotNull ( VAR_6 ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( this . VAR_1 ) == null ) { this . VAR_1 = STRING_1 ; this . VAR_1 += VAR_1 ; this . VAR_1 += \"\\n\" ; } else { this . VAR_1 = ( ( VAR_1 + \"\\n\" ) + ( this . VAR_1 ) ) + \"\\n\" ; } METHOD_2 ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( this . VAR_1 ) == null ) { this . VAR_1 = STRING_1 ; this . VAR_1 += VAR_1 ; this . VAR_1 += \"\\n\" ; } else { this . VAR_1 = ( VAR_1 + \"\\n\" ) + ( this . VAR_1 ) ; } METHOD_2 ( ) ; }\n"}
{"problem": "protected void METHOD_1 ( ) { java.util.Map.Entry < TYPE_1 , TYPE_2 > [ ] VAR_1 = this . METHOD_2 ( ) . METHOD_3 ( new java.util.Map.Entry [ 0 ] ) ; for ( ; ; ) { this . METHOD_4 ( VAR_2 ) ; TYPE_3 . METHOD_5 ( this . VAR_3 [ 0 ] , null ) ; TYPE_3 . METHOD_5 ( this . VAR_3 [ 1 ] , null ) ; if ( ( METHOD_6 ( VAR_1 ) ) == null ) break ; } }\n", "fixed": "protected void METHOD_1 ( ) { java.util.Set < java.util.Map.Entry < TYPE_1 , TYPE_2 > > VAR_1 = this . METHOD_2 ( ) ; for ( ; ; ) { this . METHOD_4 ( VAR_2 ) ; TYPE_3 . METHOD_5 ( this . VAR_3 [ 0 ] , null ) ; TYPE_3 . METHOD_5 ( this . VAR_3 [ 1 ] , null ) ; if ( ( METHOD_6 ( VAR_1 ) ) == null ) break ; } }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item ) { int id = item . METHOD_2 ( ) ; if ( id == ( VAR_1 ) ) { return true ; } if ( id == ( VAR_2 ) ) { TYPE_2 . METHOD_3 ( this ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_4 ( intent ) ; } return super . METHOD_1 ( item ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 item ) { int id = item . METHOD_2 ( ) ; if ( id == ( VAR_1 ) ) { } if ( id == ( VAR_2 ) ) { TYPE_2 . METHOD_3 ( this ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_4 ( intent ) ; } return super . METHOD_1 ( item ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ClientEndpointBuilder\n             extends\n                 ClientEndpointConsumerBuilder, ClientEndpointProducerBuilder {\n         default AdvancedClientEndpointBuilder advanced() {", "fixed": "     \n    public interface ClientEndpointBuilder\n             extends\n                 ClientEndpointConsumerBuilder, ClientEndpointProducerBuilder {\n         default AdvancedClientEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; ( VAR_2 ) ++ ; if ( ( VAR_2 ) < INT_1 ) { VAR_3 . METHOD_3 ( VAR_4 , INT_2 ) ; } else { VAR_1 . METHOD_4 ( ) ; METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; ( VAR_2 ) ++ ; if ( ( VAR_2 ) < INT_1 ) { VAR_3 . METHOD_3 ( VAR_4 , INT_2 ) ; } else { VAR_1 . METHOD_4 ( ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_4 ( ) ; } METHOD_5 ( ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public java.lang.Object start ( ) { try { VAR_1 . remove ( VAR_2 , VAR_3 , null ) ; VAR_1 . METHOD_1 ( ) ; } catch ( java.io.IOException | TYPE_1 VAR_4 ) { TYPE_2 . METHOD_2 ( ( STRING_1 + STRING_2 ) , VAR_4 ) ; } catch ( final TYPE_3 VAR_4 ) { TYPE_2 . METHOD_2 ( STRING_3 , VAR_4 ) ; } return null ; }\n", "fixed": "public java.lang.Object start ( ) { try { VAR_1 . remove ( VAR_2 , VAR_3 , null ) ; VAR_1 . METHOD_1 ( ) ; } catch ( java.io.IOException | TYPE_1 VAR_4 ) { TYPE_2 . error ( ( STRING_1 + STRING_2 ) , VAR_4 ) ; } catch ( final TYPE_3 VAR_4 ) { TYPE_2 . error ( STRING_3 , VAR_4 ) ; } return null ; }\n"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"problem": "public void METHOD_1 ( ) { this . VAR_1 = 0 ; this . VAR_2 = false ; this . VAR_3 = this . p ; this . VAR_4 . put ( this . p , new TYPE_1 ( this . p , 0 , 0 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; this . VAR_1 = 0 ; this . VAR_3 = this . p ; this . VAR_4 . put ( this . p , new TYPE_1 ( this . p , 0 , 0 ) ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 ) != null ) { if ( ( VAR_2 . METHOD_3 ( STRING_2 ) ) && ( ! ( VAR_2 . METHOD_4 ( STRING_2 ) . METHOD_5 ( ) ) ) ) { VAR_3 = VAR_2 . METHOD_4 ( STRING_2 ) . METHOD_6 ( ) ; } VAR_4 . METHOD_7 ( VAR_5 , VAR_6 ) ; } }\n", "fixed": "private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 ) != null ) { if ( ( VAR_2 . METHOD_3 ( STRING_2 ) ) && ( ! ( VAR_2 . get ( STRING_2 ) . METHOD_5 ( ) ) ) ) { VAR_3 = VAR_2 . METHOD_4 ( STRING_2 ) . METHOD_6 ( ) ; } VAR_4 . METHOD_7 ( VAR_5 , VAR_6 ) ; } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 source , TYPE_5 VAR_4 ) { VAR_2 = TYPE_6 . METHOD_2 ( VAR_2 , VAR_5 ) ; if ( VAR_1 instanceof TYPE_7 ) { TYPE_7 VAR_6 = ( ( TYPE_7 ) ( VAR_1 ) ) ; if ( VAR_6 . METHOD_3 ( ) ) { return VAR_6 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ; } } return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_3 . METHOD_6 ( ) . VAR_7 , source , VAR_4 ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 source , TYPE_5 VAR_4 ) { VAR_2 = TYPE_6 . METHOD_2 ( VAR_2 , VAR_5 ) ; return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_3 . METHOD_6 ( ) . VAR_7 , source , VAR_4 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { java.io.BufferedReader VAR_1 = new java.io.BufferedReader ( new TYPE_1 ( VAR_2 . METHOD_2 ( ) ) , 1 ) ; try { int c = 0 ; while ( ( c = VAR_1 . METHOD_3 ( ) ) != ( - 1 ) ) { VAR_3 . METHOD_4 ( ( ( char ) ( c ) ) ) ; } } catch ( java.io.IOException VAR_4 ) { } }\n", "fixed": "public void METHOD_1 ( ) { java.io.BufferedReader VAR_1 = new java.io.BufferedReader ( new TYPE_1 ( VAR_2 . METHOD_2 ( ) ) , 1 ) ; try { int c = 0 ; if ( VAR_3 != null ) while ( ( c = VAR_1 . METHOD_3 ( ) ) != ( - 1 ) ) { VAR_3 . METHOD_4 ( ( ( char ) ( c ) ) ) ; } } catch ( java.io.IOException VAR_4 ) { } }\n"}
{"problem": "protected boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { boolean VAR_3 = false ; TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 , VAR_1 ) ; if ( VAR_4 != null ) if ( ( VAR_4 . METHOD_3 ( ) ) != CHAR_1 ) VAR_3 = true ; return VAR_3 ; }\n", "fixed": "protected boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { boolean VAR_3 = false ; TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_4 != null ) if ( ( VAR_4 . METHOD_3 ( ) ) != CHAR_1 ) VAR_3 = true ; return VAR_3 ; }\n"}
{"problem": "private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( VAR_2 ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; VAR_1 . METHOD_8 ( METHOD_9 ( ) ) ; VAR_1 . METHOD_10 ( METHOD_11 ( ) ) ; VAR_1 . METHOD_12 ( METHOD_3 ( ) ) ; }\n", "fixed": "private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( VAR_2 ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; VAR_1 . METHOD_8 ( METHOD_9 ( ) ) ; VAR_1 . METHOD_10 ( METHOD_11 ( ) ) ; VAR_1 . METHOD_12 ( new java.util.Date ( ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String name ) { java.lang.String str = getString ( name ) . trim ( ) ; if ( ( str != null ) && ( ! ( str . isEmpty ( ) ) ) ) { if ( str . contains ( VAR_1 ) ) { return null ; } return new TYPE_1 ( str ) ; } return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String name ) { java.lang.String str = getString ( name ) ; if ( str == null ) { return null ; } str = str . trim ( ) ; if ( ! ( str . isEmpty ( ) ) ) { if ( str . contains ( VAR_1 ) ) { return null ; } return new TYPE_1 ( str ) ; } return null ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 field , java.lang.Object VAR_1 , java.lang.Object value ) { if ( field != null ) { try { field . METHOD_2 ( true ) ; field . set ( VAR_1 , value ) ; } catch ( java.lang.Throwable VAR_2 ) { VAR_3 . error ( ( STRING_1 + ( value . getClass ( ) . METHOD_3 ( ) ) ) , VAR_2 ) ; } } }\n", "fixed": "private void METHOD_1 ( TYPE_1 field , java.lang.Object VAR_1 , java.lang.Object value ) { if ( field != null ) { try { field . METHOD_2 ( true ) ; field . set ( VAR_1 , value ) ; } catch ( java.lang.Exception VAR_2 ) { VAR_3 . error ( ( STRING_1 + ( value . getClass ( ) . METHOD_3 ( ) ) ) , VAR_2 ) ; } } }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 target ) { if ( ( ( path ) != null ) && ( path . get ( ( ( path . size ( ) ) - 1 ) ) . equals ( target ) ) ) return ; else path = new TYPE_2 ( METHOD_2 ( ) , target , ( ( TYPE_3 ) ( METHOD_3 ( ) ) ) . METHOD_4 ( ) . METHOD_5 ( ) ) . METHOD_6 ( true ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 target ) { if ( ( ( ( path ) != null ) && ( ( path . size ( ) ) > 0 ) ) && ( path . get ( ( ( path . size ( ) ) - 1 ) ) . equals ( target ) ) ) return ; else path = new TYPE_2 ( METHOD_2 ( ) , target , ( ( TYPE_3 ) ( METHOD_3 ( ) ) ) . METHOD_4 ( ) . METHOD_5 ( ) ) . METHOD_6 ( true ) ; }\n"}
{"problem": "private boolean METHOD_1 ( int index , java.lang.String token ) { if ( ( index + ( token . length ( ) ) ) >= ( VAR_1 . length ( ) ) ) return false ; for ( int i = 0 ; i < ( token . length ( ) ) ; i ++ ) { if ( ( VAR_1 . METHOD_2 ( ( index + i ) ) ) != ( token . METHOD_2 ( i ) ) ) return false ; } return true ; }\n", "fixed": "private boolean METHOD_1 ( int index , java.lang.String token ) { if ( ( index + ( token . length ( ) ) ) > ( VAR_1 . length ( ) ) ) return false ; for ( int i = 0 ; i < ( token . length ( ) ) ; i ++ ) { if ( ( VAR_1 . METHOD_2 ( ( index + i ) ) ) != ( token . METHOD_2 ( i ) ) ) return false ; } return true ; }\n"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<NodeModel> getSelectedNodes() {\n         List<NodeModel> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<NodeModel> getSelectedNodes() {\n         List<NodeModel> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCassandraEndpointBuilder\n             extends\n                 AdvancedCassandraEndpointConsumerBuilder, AdvancedCassandraEndpointProducerBuilder {\n         default CassandraEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCassandraEndpointBuilder\n             extends\n                 AdvancedCassandraEndpointConsumerBuilder, AdvancedCassandraEndpointProducerBuilder {\n         default CassandraEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . i ( VAR_1 , event . toString ( ) ) ; if ( event . METHOD_2 ( ) ) { METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_3 . message ) ; return ; } if ( VAR_4 ) { METHOD_6 ( getString ( VAR_5 ) ) ; VAR_6 = false ; VAR_7 = false ; VAR_8 . METHOD_7 ( TYPE_4 . METHOD_8 ( VAR_9 ) ) ; return ; } METHOD_9 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . i ( VAR_1 , event . toString ( ) ) ; if ( event . METHOD_2 ( ) ) { METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_3 . type , VAR_3 . message ) ; return ; } if ( VAR_4 ) { METHOD_6 ( getString ( VAR_5 ) ) ; VAR_6 = false ; VAR_7 = false ; VAR_8 . METHOD_7 ( TYPE_4 . METHOD_8 ( VAR_9 ) ) ; return ; } METHOD_9 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View view , android.content.Context context , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_4 ( ) . get ( STRING_1 ) ) ; VAR_4 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ; VAR_5 . getView ( VAR_4 , view ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view , android.content.Context context , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_4 ( ) . get ( STRING_1 ) ) ; VAR_4 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ; VAR_5 . getView ( VAR_1 , VAR_4 , view ) ; }\n"}
{"problem": "public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return false ; } java.util.Date VAR_2 = VAR_1 ; long VAR_3 = TYPE_2 . METHOD_2 ( ) ; long VAR_4 = VAR_2 . getTime ( ) ; java.lang.System.out.println ( ( VAR_3 - VAR_4 ) ) ; java.lang.System.out.println ( ( ( VAR_5 ) * INT_1 ) ) ; return ( VAR_3 - VAR_4 ) < ( ( VAR_5 ) * INT_1 ) ; }\n", "fixed": "public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return false ; } java.util.Date VAR_2 = VAR_1 ; long VAR_3 = TYPE_2 . METHOD_2 ( ) ; long VAR_4 = VAR_2 . getTime ( ) ; return ( VAR_3 - VAR_4 ) < ( ( VAR_5 ) * INT_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 , int VAR_2 ) throws TYPE_1 { if ( ( new TYPE_2 ( ) . METHOD_2 ( VAR_1 ) ) == STRING_1 ) { TYPE_3 VAR_3 = TYPE_4 . METHOD_3 ( ) ; TYPE_5 VAR_4 = VAR_5 . METHOD_4 ( VAR_6 ) ; VAR_4 . METHOD_5 ( 1 , VAR_2 ) ; TYPE_6 VAR_7 = VAR_4 . METHOD_6 ( ) ; VAR_4 . METHOD_7 ( ) ; VAR_7 . METHOD_7 ( ) ; } }\n", "fixed": "public void METHOD_1 ( int VAR_1 , int VAR_2 ) throws TYPE_1 { TYPE_3 VAR_3 = TYPE_4 . METHOD_3 ( ) ; TYPE_5 VAR_4 = VAR_3 . METHOD_4 ( VAR_6 ) ; VAR_4 . METHOD_5 ( 1 , VAR_2 ) ; TYPE_6 VAR_7 = VAR_4 . METHOD_6 ( ) ; VAR_4 . METHOD_7 ( ) ; VAR_7 . METHOD_7 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . info ( STRING_1 ) ; try { VAR_1 . info ( ( STRING_2 + ( TYPE_1 . METHOD_2 ( STRING_3 ) . METHOD_3 ( INT_1 ) ) ) ) ; } catch ( java.io.IOException VAR_2 ) { VAR_1 . error ( VAR_2 . METHOD_4 ( ) ) ; } VAR_1 . info ( STRING_4 ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . info ( STRING_1 ) ; try { VAR_1 . info ( ( STRING_2 + ( TYPE_1 . METHOD_2 ( STRING_3 ) . METHOD_3 ( INT_1 ) ) ) ) ; } catch ( java.io.IOException VAR_2 ) { VAR_1 . error ( VAR_2 . METHOD_4 ( ) , VAR_2 ) ; } VAR_1 . info ( STRING_4 ) ; }\n"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.error(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "fixed": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "sourceBeforeFix": "LOG.error(\"Failed to look for classes in \" + jarFileName + \": \"+ ioEx)", "sourceAfterFix": "LOG.warn(\"Failed to look for classes in \" + jarFileName + \": \"+ ioEx)"}
{"problem": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = true ; if ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) { VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ; METHOD_6 ( 0 , 0 ) ; METHOD_7 ( ) ; return ; } if ( TYPE_1 . METHOD_8 ( ) ) { TYPE_1 . METHOD_9 ( this ) ; return ; } if ( VAR_2 . METHOD_10 ( ) ) { METHOD_7 ( ) ; return ; } VAR_2 . METHOD_11 ( ) ; }\n", "fixed": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = true ; if ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) { VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ; return ; } if ( TYPE_1 . METHOD_8 ( ) ) { TYPE_1 . METHOD_9 ( this ) ; return ; } if ( VAR_2 . METHOD_10 ( ) ) { VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ; return ; } VAR_2 . METHOD_11 ( ) ; }\n"}
{"problem": "private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = STRING_1 ; for ( int i = ( VAR_1 . length ( ) ) - 1 ; i >= 0 ; i -- ) { VAR_2 = VAR_2 + ( VAR_1 . METHOD_2 ( i ) ) ; return VAR_2 ; } }\n", "fixed": "private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = STRING_1 ; for ( int i = ( VAR_1 . length ( ) ) - 1 ; i >= 0 ; i -- ) { VAR_2 = VAR_2 + ( VAR_1 . METHOD_2 ( i ) ) ; } return VAR_2 ; }\n"}
{"fixCommitSHA1": "8d1af7d7a8d8e028a3058a848c3b0cd9862f297d", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     LoadMetadataOptions options = LoadMetadataOptions.defaults();\n     options.setCreateAncestors(isCreateAncestors);\n     options.setLoadDirectChildren(isLoadDirectChildren);\n    options.setUnderFileStatus(new UnderFileStatus(\"dummy\", isDirectory));\n     Assert.assertEquals(isCreateAncestors, options.isCreateAncestors());\n     Assert.assertEquals(isLoadDirectChildren, options.isLoadDirectChildren());\n     Assert.assertEquals(isDirectory, options.getUnderFileStatus().isDirectory());", "fixed": "     LoadMetadataOptions options = LoadMetadataOptions.defaults();\n     options.setCreateAncestors(isCreateAncestors);\n     options.setLoadDirectChildren(isLoadDirectChildren);\n    options.setUnderFileStatus(\n        new UnderFileStatus(\"dummy\", 0L, isDirectory, 0L, \"owner\", \"group\", (short) 077));\n     Assert.assertEquals(isCreateAncestors, options.isCreateAncestors());\n     Assert.assertEquals(isLoadDirectChildren, options.isLoadDirectChildren());\n     Assert.assertEquals(isDirectory, options.getUnderFileStatus().isDirectory());", "sourceBeforeFix": "new UnderFileStatus(\"dummy\",isDirectory)", "sourceAfterFix": "new UnderFileStatus(\"dummy\",0L,isDirectory,0L,\"owner\",\"group\",(short)077)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_3 . METHOD_2 ( ) ) { for ( TYPE_1 VAR_4 : VAR_2 . METHOD_3 ( ) ) { if ( VAR_4 . getId ( ) . equals ( VAR_1 ) ) { return VAR_4 ; } } } return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_3 . METHOD_2 ( ) ) { for ( TYPE_1 VAR_4 : VAR_2 . METHOD_3 ( ) ) { if ( VAR_4 . getId ( ) . toString ( ) . equals ( VAR_1 ) ) { return VAR_4 ; } } } return null ; }\n"}
{"problem": "private void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( this ) ) { VAR_1 = new TYPE_2 ( this ) . METHOD_3 ( VAR_2 ) . METHOD_4 ( this ) . METHOD_5 ( this ) . build ( ) ; VAR_1 . METHOD_6 ( ) ; } else { TYPE_3 VAR_3 = TYPE_1 . METHOD_7 ( this ) ; if ( VAR_3 != null ) VAR_3 . show ( ) ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( this ) ) { VAR_1 = new TYPE_2 ( this ) . METHOD_3 ( VAR_2 ) . METHOD_4 ( this ) . METHOD_5 ( this ) . build ( ) ; VAR_1 . METHOD_6 ( ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { byte [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String result = STRING_1 ; for ( byte b : VAR_2 ) { int VAR_3 = b ; for ( int i = 1 ; i < INT_1 ; i ++ ) { result += ( ( VAR_3 & INT_2 ) == 0 ) ? 0 : 1 ; VAR_3 <<= 1 ; } } return result + STRING_2 ; }\n", "fixed": "public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { byte [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String result = STRING_1 ; for ( byte b : VAR_2 ) { int VAR_3 = b ; for ( int i = 0 ; i < INT_1 ; i ++ ) { if ( i == 0 ) { VAR_3 <<= 1 ; continue ; } result += ( ( VAR_3 & INT_2 ) == 0 ) ? 0 : 1 ; VAR_3 <<= 1 ; } } return result + STRING_2 ; }\n"}
{"problem": "public static void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , java.lang.ClassNotFoundException { java.io.File f = new java.io.File ( ( ( TYPE_2 . METHOD_2 ( ) ) + STRING_1 ) ) ; if ( ! ( f . METHOD_3 ( ) ) ) { return ; } TYPE_3 VAR_1 = new TYPE_3 ( new java.io.FileInputStream ( f ) ) ; VAR_2 = ( ( TYPE_4 ) ( VAR_1 . METHOD_4 ( ) ) ) ; VAR_1 . METHOD_5 ( ) ; }\n", "fixed": "public static void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , java.lang.ClassNotFoundException { java.io.File f = new java.io.File ( ( ( TYPE_2 . METHOD_2 ( ) ) + STRING_1 ) ) ; if ( ! ( f . METHOD_3 ( ) ) ) { VAR_2 = new TYPE_4 ( ) ; return ; } TYPE_3 VAR_1 = new TYPE_3 ( new java.io.FileInputStream ( f ) ) ; VAR_2 = ( ( TYPE_4 ) ( VAR_1 . METHOD_4 ( ) ) ) ; VAR_1 . METHOD_5 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 ) ; TYPE_1 . assertThat ( VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , 0 ) ) . METHOD_4 ( INT_1 ) ; TYPE_1 . assertThat ( VAR_1 . METHOD_3 ( VAR_2 , STRING_3 , 0 ) ) . METHOD_4 ( 0 ) ; METHOD_2 ( STRING_4 ) ; TYPE_1 . assertThat ( VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , 0 ) ) . METHOD_4 ( 0 ) . METHOD_5 ( STRING_5 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 ) ; TYPE_1 . assertThat ( VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , 0 ) ) . METHOD_4 ( INT_1 ) ; TYPE_1 . assertThat ( VAR_1 . METHOD_3 ( VAR_2 , STRING_3 , 0 ) ) . METHOD_4 ( 0 ) ; METHOD_2 ( STRING_4 ) ; TYPE_1 . assertThat ( VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , 0 ) ) . METHOD_5 ( STRING_5 ) . METHOD_4 ( 0 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "715113fb25e3eaa18df0fdaf2df54211bf691fbe", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "  */\r\n public class DefaultManagementMBeanAssembler implements ManagementMBeanAssembler {\r\n  private static final Logger LOG = LoggerFactory.getLogger(DefaultManagementAgent.class);\r\n   protected final MBeanInfoAssembler assembler;\r", "fixed": "  */\r\n public class DefaultManagementMBeanAssembler implements ManagementMBeanAssembler {\r\n  private static final Logger LOG = LoggerFactory.getLogger(DefaultManagementMBeanAssembler.class);\r\n   protected final MBeanInfoAssembler assembler;\r", "sourceBeforeFix": "DefaultManagementAgent.class", "sourceAfterFix": "DefaultManagementMBeanAssembler.class"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , float VAR_3 , int VAR_4 ) { java.lang.String VAR_5 ; java.lang.String VAR_6 ; if ( ( VAR_1 == STRING_1 ) && ( VAR_2 == STRING_1 ) ) { VAR_5 = STRING_2 + ( VAR_7 ) ; VAR_6 = ( STRING_3 + ( ( VAR_8 ) + 1 ) ) + STRING_4 ; } else { VAR_5 = VAR_1 ; VAR_6 = VAR_2 ; } view . METHOD_2 ( VAR_5 , VAR_6 , VAR_3 , VAR_4 ) ; }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , float VAR_3 , int VAR_4 ) { java.lang.String VAR_5 ; java.lang.String VAR_6 ; if ( ( VAR_1 == STRING_1 ) && ( VAR_2 == STRING_1 ) ) { VAR_5 = STRING_2 + ( VAR_7 ) ; VAR_6 = ( STRING_3 + ( ( VAR_8 ) + 1 ) ) + STRING_4 ; } else { VAR_5 = VAR_1 ; VAR_6 = VAR_2 ; } view . METHOD_2 ( VAR_5 , VAR_6 , VAR_3 , VAR_4 , true ) ; }\n"}
{"problem": "private static TYPE_1 METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) != ( VAR_3 ) ) continue ; TYPE_1 VAR_4 = TYPE_2 . METHOD_4 ( VAR_2 ) ; assert VAR_4 != null : ( STRING_1 + ( VAR_2 . METHOD_5 ( ) ) ) + STRING_2 ; if ( TYPE_3 . METHOD_6 ( new java.io.File ( VAR_4 . METHOD_5 ( ) ) ) ) { return VAR_4 ; } } return null ; }\n", "fixed": "private static TYPE_1 METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) != ( VAR_3 ) ) continue ; TYPE_1 VAR_4 = TYPE_2 . METHOD_4 ( VAR_2 ) ; if ( ( VAR_4 != null ) && ( TYPE_3 . METHOD_6 ( new java.io.File ( VAR_4 . METHOD_5 ( ) ) ) ) ) { return VAR_4 ; } } return null ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"To test special tags\", notes = \"To test special tags\", tags={ \"$another-fake?\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testSpecialTags(@Valid Client body);\n }", "fixed": "     @ApiOperation(value = \"To test special tags\", notes = \"To test special tags\", tags={ \"$another-fake?\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testSpecialTags(@Valid Client body) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"problem": "private void METHOD_1 ( final java.util.Calendar date ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , true ) ; VAR_3 . setValue ( true ) ; TYPE_1 . METHOD_4 ( date , new TYPE_2 < TYPE_3 , TYPE_4 > ( ) { public void METHOD_5 ( TYPE_3 result ) { VAR_3 . setValue ( false ) ; METHOD_1 ( result ) ; } public void METHOD_6 ( TYPE_4 result ) { new TYPE_5 ( VAR_4 this , result ) . METHOD_7 ( false ) . show ( ) ; } } ) ; }\n", "fixed": "private void METHOD_1 ( final java.lang.String id ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , true ) ; VAR_3 . setValue ( true ) ; TYPE_1 . METHOD_4 ( id , new TYPE_2 < TYPE_3 , TYPE_4 > ( ) { public void METHOD_5 ( TYPE_3 result ) { VAR_3 . setValue ( false ) ; METHOD_1 ( result ) ; } public void METHOD_6 ( TYPE_4 result ) { new TYPE_5 ( VAR_4 this , result ) . METHOD_7 ( false ) . show ( ) ; } } ) ; }\n"}
{"fixCommitSHA1": "97d07253e2933dbca0d08cd19072503506bda863", "projectName": "netty.netty", "bugType": "Change Numeric Literal", "problem": "             return OK;\n         case 1:\n             return PROTOCOL_ERROR;\n        case 11:\n             return INTERNAL_ERROR;\n         }", "fixed": "             return OK;\n         case 1:\n             return PROTOCOL_ERROR;\n        case 2:\n             return INTERNAL_ERROR;\n         }", "sourceBeforeFix": "new SpdySessionStatus(11,\"INTERNAL_ERROR\")", "sourceAfterFix": "new SpdySessionStatus(2,\"INTERNAL_ERROR\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"problem": "public void METHOD_1 ( android.view.View view ) { try { VAR_1 . METHOD_2 ( java.lang.Integer . METHOD_3 ( VAR_2 . getText ( ) . toString ( ) ) , java.lang.Integer . METHOD_3 ( VAR_3 . getText ( ) . toString ( ) ) ) ; } catch ( TYPE_1 VAR_4 ) { VAR_4 . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( this , STRING_1 , VAR_5 ) . show ( ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { try { VAR_1 . METHOD_2 ( java.lang.Integer.parseInt ( VAR_2 . getText ( ) . toString ( ) ) , java.lang.Integer.parseInt ( VAR_3 . getText ( ) . toString ( ) ) ) ; } catch ( TYPE_1 VAR_4 ) { VAR_4 . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( this , STRING_1 , VAR_5 ) . show ( ) ; } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { for ( java.lang.Integer i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) { TYPE_1 VAR_3 = VAR_2 . get ( i ) ; for ( TYPE_2 id : VAR_4 ) { if ( id == VAR_1 ) { return VAR_3 ; } } } return null ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) { TYPE_1 VAR_3 = VAR_2 . get ( i ) ; for ( TYPE_2 id : VAR_4 ) { if ( id == VAR_1 ) { return VAR_3 ; } } } return null ; }\n"}
{"problem": "public void METHOD_1 ( int id ) { int VAR_1 = 0 ; this . VAR_2 = STRING_1 ; this . values = new TYPE_1 ( ) ; this . values . put ( STRING_2 , STRING_3 ) ; this . VAR_3 = STRING_4 + id ; this . VAR_4 = null ; VAR_1 = this . METHOD_2 ( this . VAR_2 , this . values , this . VAR_3 , this . VAR_4 ) ; VAR_5 . METHOD_3 ( STRING_5 , ( ( STRING_6 + VAR_1 ) + STRING_7 ) ) ; }\n", "fixed": "public void METHOD_1 ( int id ) { int VAR_1 = 0 ; this . VAR_2 = STRING_1 ; this . values = new TYPE_1 ( ) ; this . values . put ( STRING_2 , STRING_3 ) ; this . VAR_3 = STRING_4 + id ; this . VAR_4 = null ; VAR_1 = this . METHOD_2 ( this . VAR_2 , this . values , this . VAR_3 , this . VAR_4 ) ; }\n"}
{"problem": "public void METHOD_1 ( float VAR_1 , float VAR_2 , int VAR_3 , int VAR_4 , boolean VAR_5 ) { if ( ( ( VAR_6 ) == null ) || ( ( VAR_6 ) instanceof TYPE_1 ) ) { VAR_7 = new TYPE_2 ( ) ; VAR_8 = false ; } }\n", "fixed": "public void METHOD_1 ( float VAR_1 , float VAR_2 , int VAR_3 , int VAR_4 , boolean VAR_5 ) { if ( ( ( VAR_6 ) == null ) || ( ( VAR_6 ) instanceof TYPE_1 ) ) { VAR_7 = new TYPE_2 ( ) ; VAR_8 = false ; } else { VAR_7 = VAR_6 ; } }\n"}
{"problem": "public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_2 . METHOD_2 ( ) . METHOD_4 ( STRING_1 ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_4 ( ( ( ( VAR_3 . METHOD_5 ( ) ) + STRING_2 ) + ( VAR_3 . METHOD_6 ( ) ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_2 . METHOD_2 ( ) . METHOD_4 ( STRING_1 ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_4 ( VAR_3 ) ; } }\n"}
{"problem": "public void update ( int id ) { source = TYPE_1 . METHOD_1 ( VAR_1 ) ; source . open ( ) ; java.util.ArrayList < TYPE_2 > VAR_2 = source . METHOD_2 ( id ) ; source . METHOD_3 ( ) ; if ( ( VAR_2 . size ( ) ) != 0 ) { VAR_3 = VAR_2 ; VAR_4 = METHOD_4 ( ) ; VAR_5 . update ( ) ; } }\n", "fixed": "public void update ( int id ) { source = TYPE_1 . METHOD_1 ( VAR_1 ) ; source . open ( ) ; java.util.ArrayList < TYPE_2 > VAR_2 = source . METHOD_2 ( id ) ; source . METHOD_3 ( ) ; VAR_3 = VAR_2 ; VAR_4 = METHOD_4 ( ) ; VAR_5 . update ( ) ; }\n"}
{"fixCommitSHA1": "6fe8de61d192f14262b455497dc5cc174d88659c", "projectName": "naver.pinpoint", "bugType": "Change Numeric Literal", "problem": "         LinkDataDuplexMap select = bfsLinkSelector.select(APP_A, range, option);\n        Assert.assertEquals(select.size(), 1);\n     }", "fixed": "         LinkDataDuplexMap select = bfsLinkSelector.select(APP_A, range, option);\n        Assert.assertEquals(select.size(), 0);\n     }", "sourceBeforeFix": "Assert.assertEquals(select.size(),1)", "sourceAfterFix": "Assert.assertEquals(select.size(),0)"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; java.util.ArrayList < TYPE_3 > VAR_3 = new java.util.ArrayList < > ( ) ; TYPE_3 VAR_4 = new TYPE_3 ( ) ; TYPE_4 VAR_5 = new TYPE_4 ( ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; VAR_1 . METHOD_2 ( STRING_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( STRING_3 , VAR_4 ) ; int n = 0 ; VAR_1 . METHOD_2 ( STRING_4 , VAR_5 ) ; VAR_1 . METHOD_3 ( STRING_5 ) ; return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; java.util.ArrayList < TYPE_3 > VAR_3 = new java.util.ArrayList < > ( ) ; TYPE_3 VAR_4 = new TYPE_3 ( ) ; TYPE_4 VAR_5 = new TYPE_4 ( ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; VAR_1 . METHOD_2 ( STRING_2 , VAR_3 ) ; int n = 0 ; VAR_1 . METHOD_2 ( STRING_4 , VAR_5 ) ; VAR_1 . METHOD_3 ( STRING_5 ) ; return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; VAR_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( INT_1 ) ; VAR_1 . METHOD_4 ( ) ; TYPE_1 . METHOD_3 ( INT_1 ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 . METHOD_3 ( INT_1 ) ; VAR_2 . METHOD_6 ( ) ; if ( ( VAR_2 . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) ) != null ) { TYPE_2 . assertNotNull ( VAR_2 . METHOD_9 ( ) ) ; } else { java.lang.System.out.println ( STRING_2 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; VAR_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( INT_1 ) ; VAR_1 . METHOD_4 ( ) ; TYPE_1 . METHOD_3 ( INT_1 ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 . METHOD_3 ( INT_1 ) ; VAR_2 . METHOD_6 ( ) ; TYPE_1 . METHOD_3 ( INT_1 ) ; if ( ( VAR_2 . METHOD_8 ( ) ) != null ) { TYPE_2 . assertNotNull ( VAR_2 . METHOD_9 ( ) ) ; } else { java.lang.System.out.println ( STRING_2 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) VAR_1 . METHOD_2 ( ) ; TYPE_1 b = new TYPE_1 ( ) ; b . METHOD_3 ( VAR_2 , false ) ; if ( ( ( getIntent ( ) ) != null ) && ( getIntent ( ) . METHOD_4 ( VAR_2 , false ) ) ) { b . METHOD_3 ( VAR_2 , true ) ; METHOD_5 ( new TYPE_2 ( ) , false , b , VAR_3 class . METHOD_6 ( ) ) ; } }\n", "fixed": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 b = new TYPE_1 ( ) ; b . METHOD_3 ( VAR_2 , false ) ; if ( ( ( getIntent ( ) ) != null ) && ( getIntent ( ) . METHOD_4 ( VAR_2 , false ) ) ) { b . METHOD_3 ( VAR_2 , true ) ; METHOD_5 ( new TYPE_2 ( ) , false , b , VAR_3 class . METHOD_6 ( ) ) ; } }\n"}
{"problem": "private TYPE_1 < java.lang.Integer > METHOD_1 ( java.lang.String VAR_1 ) { final java.util.regex.Matcher VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . trim ( ) ) ; if ( ! ( VAR_2 . METHOD_3 ( ) ) ) { return TYPE_1 . METHOD_4 ( ) ; } java.lang.String index = VAR_2 . METHOD_5 ( STRING_1 ) ; if ( ! ( TYPE_3 . METHOD_6 ( index ) ) ) { return TYPE_1 . METHOD_4 ( ) ; } return TYPE_1 . METHOD_7 ( java.lang.Integer.parseInt ( index ) ) ; }\n", "fixed": "private TYPE_1 < java.lang.Integer > METHOD_1 ( java.lang.String token ) { final java.util.regex.Matcher VAR_2 = TYPE_2 . METHOD_2 ( token . trim ( ) ) ; if ( ! ( VAR_2 . METHOD_3 ( ) ) ) { return TYPE_1 . METHOD_4 ( ) ; } java.lang.String index = VAR_2 . METHOD_5 ( STRING_1 ) ; if ( ! ( TYPE_3 . METHOD_6 ( index ) ) ) { return TYPE_1 . METHOD_4 ( ) ; } return TYPE_1 . METHOD_7 ( java.lang.Integer.parseInt ( index ) ) ; }\n"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *  Does class have private ctors.\n          *  @return true if class has private ctors\n          */\n        boolean isWithPrivateCtor() {\n             return withPrivateCtor;\n         }", "fixed": "          *  Does class have private ctors.\n          *  @return true if class has private ctors\n          */\n        private boolean isWithPrivateCtor() {\n             return withPrivateCtor;\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"problem": "public void METHOD_1 ( TYPE_1 msg ) { if ( VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , ( ( STRING_1 + ( ( java.lang.String ) ( msg . METHOD_3 ( ) ) ) ) + STRING_2 ) ) ; } VAR_3 . METHOD_4 ( new java.lang.String ( ( ( java.lang.String ) ( msg . METHOD_3 ( ) ) ) ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 msg ) { if ( VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , ( ( STRING_1 + ( msg . METHOD_3 ( ) ) ) + STRING_2 ) ) ; } VAR_3 . METHOD_4 ( new java.lang.String ( ( ( java.lang.String ) ( msg . METHOD_3 ( ) ) ) ) ) ; }\n"}
{"fixCommitSHA1": "63a368bf671e3356c5be441b8833bad844a4ff8e", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "           fileInfo.getPersistenceState());\n      CommonUtils.sleepMs(5);\n       HeartbeatScheduler.schedule(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC);\n      Assert.assertTrue(HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC, 5,\n           TimeUnit.SECONDS));\n       fileInfo = getFileSystemMasterClient().getFileInfo(fileId);", "fixed": "           fileInfo.getPersistenceState());\n      CommonUtils.sleepMs(200);\n       HeartbeatScheduler.schedule(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC);\n      Assert.assertTrue(HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC, 500,\n           TimeUnit.SECONDS));\n       fileInfo = getFileSystemMasterClient().getFileInfo(fileId);", "sourceBeforeFix": "CommonUtils.sleepMs(5)", "sourceAfterFix": "CommonUtils.sleepMs(200)"}
{"problem": "private java.lang.String METHOD_1 ( java.lang.Object VAR_1 ) { if ( VAR_1 == null ) { throw new TYPE_1 ( STRING_1 ) ; } else if ( VAR_1 instanceof java.util.Date ) { java.util.Date date = ( ( java.util.Date ) ( VAR_1 ) ) ; return java.lang.String . METHOD_1 ( date . getTime ( ) ) ; } else if ( VAR_1 instanceof TYPE_2 ) { throw new TYPE_1 ( STRING_2 ) ; } else { return java.lang.String . METHOD_1 ( VAR_1 ) ; } }\n", "fixed": "private java.lang.String METHOD_1 ( java.lang.Object VAR_1 ) { if ( VAR_1 == null ) { throw new TYPE_1 ( STRING_1 ) ; } else if ( VAR_1 instanceof java.util.Date ) { java.util.Date date = ( ( java.util.Date ) ( VAR_1 ) ) ; return java.lang.String . METHOD_1 ( date . getTime ( ) ) ; } else if ( VAR_1 instanceof TYPE_2 ) { return ( ( TYPE_2 ) ( VAR_1 ) ) . name ( ) ; } else { return java.lang.String . METHOD_1 ( VAR_1 ) ; } }\n"}
{"problem": "protected void METHOD_1 ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; int i = 0 ; for ( java.lang.String p : VAR_2 ) { stringBuilder.append ( CHAR_1 ) ; stringBuilder.append ( p ) ; if ( i == ( ( VAR_2 . size ( ) ) - 1 ) ) { stringBuilder.append ( STRING_1 ) ; } else { stringBuilder.append ( STRING_2 ) ; } i ++ ; } pattern = TYPE_1 . METHOD_2 ( VAR_1 . toString ( ) ) ; }\n", "fixed": "private void METHOD_1 ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; int i = 0 ; for ( java.lang.String p : VAR_2 ) { stringBuilder.append ( CHAR_1 ) ; stringBuilder.append ( p ) ; if ( i == ( ( VAR_2 . size ( ) ) - 1 ) ) { stringBuilder.append ( STRING_1 ) ; } else { stringBuilder.append ( STRING_2 ) ; } i ++ ; } pattern = TYPE_1 . METHOD_2 ( VAR_1 . toString ( ) ) ; }\n"}
{"problem": "public boolean METHOD_1 ( boolean VAR_1 ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; if ( VAR_3 ) { return METHOD_4 ( ) ; } else if ( VAR_1 ) { return METHOD_5 ( ) ; } else { TYPE_1 . METHOD_6 ( new TYPE_2 ( ) { public void METHOD_7 ( ) { METHOD_5 ( ) ; } } ) ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( boolean VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; if ( VAR_3 ) { return METHOD_4 ( ) ; } else if ( VAR_1 ) { return METHOD_5 ( ) ; } else { TYPE_1 . METHOD_6 ( new TYPE_2 ( ) { public void METHOD_7 ( ) { METHOD_5 ( ) ; } } ) ; } return true ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 , java.lang.Object ... VAR_2 ) throws TYPE_3 { try { java.lang.Class < TYPE_2 > [ ] VAR_3 = TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_4 method = VAR_4 . METHOD_3 ( VAR_1 , VAR_3 ) ; method . METHOD_4 ( VAR_5 , VAR_2 ) ; return this ; } catch ( TYPE_5 | TYPE_6 | TYPE_7 | TYPE_8 | TYPE_9 VAR_6 ) { throw new TYPE_3 ( VAR_6 ) ; } }\n", "fixed": "public TYPE_1 < TYPE_2 > METHOD_4 ( java.lang.String VAR_1 , java.lang.Object ... VAR_2 ) throws TYPE_3 { try { java.lang.Class < TYPE_2 > [ ] VAR_3 = TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_4 method = VAR_4 . METHOD_3 ( VAR_1 , VAR_3 ) ; method . METHOD_4 ( VAR_5 , VAR_2 ) ; return this ; } catch ( TYPE_5 | TYPE_6 | TYPE_7 | TYPE_8 | TYPE_9 VAR_6 ) { throw new TYPE_3 ( VAR_6 ) ; } }\n"}
{"problem": "public static boolean METHOD_1 ( java.lang.String fileName , TYPE_1 VAR_1 , java.lang.String ... VAR_2 ) { TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) return false ; fileName = TYPE_3 . METHOD_3 ( fileName ) ; TYPE_1 file = VAR_3 . METHOD_4 ( fileName ) ; return ( ( file != null ) && ( file . METHOD_5 ( ) ) ) && ( file . delete ( ) ) ; }\n", "fixed": "public static boolean METHOD_1 ( java.lang.String fileName , TYPE_1 VAR_1 , java.lang.String ... VAR_2 ) { TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) return false ; TYPE_1 file = VAR_3 . METHOD_4 ( fileName ) ; return ( ( file != null ) && ( file . METHOD_5 ( ) ) ) && ( file . delete ( ) ) ; }\n"}
{"problem": "public static final TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) ; if ( VAR_3 == null ) { return null ; } return ( ( TYPE_1 ) ( TYPE_4 . METHOD_3 ( VAR_3 , STRING_1 ) ) ) ; }\n", "fixed": "public static final TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { if ( VAR_1 == null ) { return null ; } TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) ; if ( VAR_3 == null ) { return null ; } return ( ( TYPE_1 ) ( TYPE_4 . METHOD_3 ( VAR_3 , STRING_1 ) ) ) ; }\n"}
{"problem": "public boolean METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( VAR_2 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_2 ( VAR_4 ) ; if ( VAR_1 == null ) { java.lang.System.out.println ( STRING_1 ) ; VAR_5 . METHOD_3 ( ) . METHOD_4 ( STRING_2 ) ; return true ; } else if ( VAR_3 == null ) { java.lang.System.out.println ( STRING_3 ) ; VAR_5 . METHOD_3 ( ) . METHOD_5 ( STRING_2 ) ; return true ; } else { return false ; } }\n", "fixed": "public boolean METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( VAR_2 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_2 ( VAR_4 ) ; if ( VAR_1 == null ) { VAR_5 . METHOD_3 ( ) . METHOD_4 ( STRING_2 ) ; return true ; } else if ( VAR_3 == null ) { VAR_5 . METHOD_3 ( ) . METHOD_5 ( STRING_2 ) ; return true ; } else { return false ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 ) { if ( VAR_2 . getName ( ) . equals ( name ) ) return VAR_2 ; } TYPE_1 VAR_4 = new TYPE_1 ( name , VAR_1 , null , null ) ; VAR_3 . add ( VAR_4 ) ; return VAR_4 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 ) { if ( VAR_2 . getName ( ) . equals ( name ) ) return VAR_2 ; } TYPE_1 VAR_4 = new TYPE_1 ( name , VAR_1 , null , this , null ) ; VAR_3 . add ( VAR_4 ) ; return VAR_4 ; }\n"}
{"fixCommitSHA1": "8abe81aaa656d78ac8b9e1a631a849025c9560b0", "projectName": "antlr.antlr4", "bugType": "Change Identifier Used", "problem": " \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n \t}\n }", "fixed": " \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n \t}\n }", "sourceBeforeFix": "getTokenNames()", "sourceAfterFix": "getTokenDisplayNames()"}
{"problem": "public TYPE_1 METHOD_1 ( final TYPE_2 k ) { TYPE_1 VAR_1 = null ; try { if ( ( VAR_2 ) != null ) { VAR_3 . METHOD_2 ( ) ; VAR_1 = VAR_2 . METHOD_3 ( k ) ; VAR_3 . end ( VAR_4 ) ; VAR_5 . end ( ( VAR_1 != null ? VAR_6 : VAR_7 ) ) ; } } catch ( java.lang.Exception VAR_8 ) { VAR_3 . end ( VAR_9 ) ; throw METHOD_4 ( VAR_8 ) ; } return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( final TYPE_2 k ) { TYPE_1 VAR_1 = null ; try { if ( ( VAR_2 ) != null ) { VAR_3 . METHOD_2 ( ) ; VAR_1 = VAR_2 . METHOD_3 ( k ) ; VAR_3 . end ( VAR_4 ) ; } } catch ( java.lang.Exception VAR_8 ) { VAR_3 . end ( VAR_9 ) ; throw METHOD_4 ( VAR_8 ) ; } return VAR_1 ; }\n"}
{"project": "Mockito", "bugId": 9, "problem": "     private static final long serialVersionUID = 9057165148930624087L;\r\n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         return invocation.callRealMethod();\r\n     }\r\n }\n\\ No newline at end of file", "fixed": "     private static final long serialVersionUID = 9057165148930624087L;\r\n     public Object answer(InvocationOnMock invocation) throws Throwable {\n    \tif (Modifier.isAbstract(invocation.getMethod().getModifiers())) {\n    \t\treturn new GloballyConfiguredAnswer().answer(invocation);\n    \t}\n         return invocation.callRealMethod();\r\n     }\r\n }\n\\ No newline at end of file", "observations": "", "repairActions": ["condBranIfAdd", "mcAdd", "objInstAdd", "retBranchAdd"], "repairPatterns": ["condBlockRetAdd"]}
{"fixCommitSHA1": "e8a74c8ad07bbf497026a6b8bde532cd61f79f17", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getDomain() == null && c.getDomain() != null) {\n             return -1;\n        } else if (c.getDomain() == null) {\n             return 1;\n         }\n         v = getDomain().compareToIgnoreCase(c.getDomain());", "fixed": "         if (getDomain() == null && c.getDomain() != null) {\n             return -1;\n        } else if (c.getDomain() == null && getDomain() != null) {\n             return 1;\n         }\n         v = getDomain().compareToIgnoreCase(c.getDomain());", "sourceBeforeFix": "that.getPath() == null", "sourceAfterFix": "that.getPath() == null && getPath() != null"}
{"problem": "public void execute ( ) { short VAR_1 = VAR_2 . METHOD_1 ( ) ; byte VAR_3 = ( ( byte ) ( ( VAR_1 & INT_1 ) > > INT_2 ) ) ; VAR_2 . METHOD_2 ( VAR_3 , ( ( byte ) ( ( VAR_2 . METHOD_3 ( VAR_3 ) ) + ( ( byte ) ( VAR_1 ) ) ) ) ) ; }\n", "fixed": "public void execute ( ) { VAR_1 = VAR_2 . METHOD_1 ( ) ; int VAR_3 = ( ( VAR_1 ) & INT_1 ) > > INT_2 ; VAR_2 . METHOD_2 ( VAR_3 , ( ( byte ) ( ( VAR_2 . METHOD_3 ( VAR_3 ) ) + ( ( byte ) ( VAR_1 ) ) ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View view ) { boolean VAR_1 = ( ( TYPE_1 ) ( view ) ) . METHOD_2 ( ) ; switch ( view . getId ( ) ) { case VAR_2 : if ( VAR_1 ) VAR_3 = true ; break ; case VAR_4 : if ( VAR_1 ) VAR_3 = false ; break ; case VAR_5 : if ( VAR_1 ) VAR_6 = false ; break ; case VAR_7 : if ( VAR_1 ) VAR_6 = true ; break ; } }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { boolean VAR_1 = ( ( TYPE_1 ) ( view ) ) . METHOD_2 ( ) ; switch ( view . getId ( ) ) { case VAR_2 : if ( VAR_1 ) VAR_3 = true ; break ; case VAR_4 : if ( VAR_1 ) VAR_3 = false ; break ; } }\n"}
{"fixCommitSHA1": "a421ca3133ddf727a147e87455a5511444d8d4bb", "projectName": "google.auto", "bugType": "Change Caller in Function Call", "problem": "                 publicType,\n                 ImmutableSet.copyOf(entry.getValue()),\n                implemetationMethodDescriptors.build()));\n       } catch (IOException e) {\n         messager.printMessage(Kind.ERROR, \"failed\");\n       }", "fixed": "                 publicType,\n                 ImmutableSet.copyOf(entry.getValue()),\n                implementationMethodDescriptors.build()));\n       } catch (IOException e) {\n         messager.printMessage(Kind.ERROR, \"failed\");\n       }", "sourceBeforeFix": "implemetationMethodDescriptors.build()", "sourceAfterFix": "implementationMethodDescriptors.build()"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { while ( ! ( VAR_1 . get ( ) ) ) { try { synchronized ( this ) { java.lang.System.out.println ( STRING_1 ) ; METHOD_2 ( INT_1 ) ; } } catch ( TYPE_2 VAR_2 ) { java.lang.System.out.println ( VAR_2 . toString ( ) ) ; } } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { while ( ! ( VAR_1 . get ( ) ) ) { try { synchronized ( this ) { java.lang.System.out.println ( STRING_1 ) ; METHOD_2 ( INT_1 ) ; } } catch ( TYPE_2 VAR_2 ) { java.lang.System.out.println ( VAR_2 . toString ( ) ) ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { short VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . VAR_3 ; short VAR_4 = VAR_1 . METHOD_4 ( ) . METHOD_3 ( ) . VAR_3 ; TYPE_2 VAR_5 = VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) ; TYPE_2 VAR_6 = VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ; for ( TYPE_3 VAR_7 : VAR_8 ) { if ( METHOD_6 ( VAR_2 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ) { break ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { short VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . VAR_3 ; short VAR_4 = VAR_1 . METHOD_4 ( ) . METHOD_3 ( ) . VAR_3 ; TYPE_2 VAR_5 = VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) ; TYPE_2 VAR_6 = VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ; for ( TYPE_3 VAR_7 : VAR_8 ) { if ( METHOD_6 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ) { break ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "02f1f95e522fd142dc0805c37e91d12880ab5996", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     public static ByteCodeNode handleNullValue(CompilerContext context,\n             LabelNode label,\n             Class<?> returnType,\n            List<? extends Class<?>> stackArgsToPop,\n             boolean clearNullFlag)\n     {\n         Block nullCheck = new Block(context)", "fixed": "     public static ByteCodeNode handleNullValue(CompilerContext context,\n             LabelNode label,\n             Class<?> returnType,\n            List<Class<?>> stackArgsToPop,\n             boolean clearNullFlag)\n     {\n         Block nullCheck = new Block(context)", "sourceBeforeFix": "ArrayList<Class<?>>", "sourceAfterFix": "List<Class<?>>"}
{"problem": "private void METHOD_1 ( TYPE_1 msg ) { int VAR_1 = java.lang.Integer . METHOD_2 ( msg . getData ( ) . getValue ( ) ) ; java.lang.System.out.println ( ( ( ( ( STRING_1 + ( this . VAR_2 ) ) + STRING_2 ) + VAR_1 ) + STRING_3 ) ) ; this . VAR_3 . put ( this . VAR_2 , VAR_1 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 msg ) { int VAR_1 = java.lang.Integer . METHOD_2 ( msg . getValue ( ) ) ; java.lang.System.out.println ( ( ( ( ( STRING_1 + ( this . VAR_2 ) ) + STRING_2 ) + VAR_1 ) + STRING_3 ) ) ; this . VAR_3 . put ( this . VAR_2 , VAR_1 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void error ( java.lang.Exception VAR_1 , java.lang.String query ) { TYPE_1 . METHOD_1 ( VAR_2 , null , VAR_1 ) ; java.lang.String msg = java.lang.String.format ( STRING_1 , query , VAR_1 . METHOD_2 ( ) ) ; TYPE_2 . METHOD_3 ( this , msg , STRING_2 , VAR_3 ) ; }\n", "fixed": "protected void error ( java.lang.Exception VAR_1 , java.lang.String query ) { TYPE_1 . METHOD_1 ( VAR_2 , null , VAR_1 ) ; java.lang.String msg = java.lang.String.format ( STRING_1 , query , VAR_1 . METHOD_2 ( ) ) ; if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { TYPE_2 . METHOD_3 ( this , msg , STRING_2 , VAR_3 ) ; } }\n"}
{"problem": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = new TYPE_4 ( ) ; VAR_3 . METHOD_2 ( new TYPE_5 ( VAR_2 . getName ( ) ) ) ; VAR_3 . METHOD_2 ( new TYPE_6 ( VAR_1 ) ) ; for ( TYPE_7 VAR_4 : VAR_2 . METHOD_3 ( ) ) { VAR_3 . METHOD_2 ( new TYPE_8 ( VAR_4 . getName ( ) ) ) ; } return new TYPE_1 ( new TYPE_9 ( VAR_5 , VAR_3 ) ) ; }\n", "fixed": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = new TYPE_4 ( ) ; VAR_3 . METHOD_2 ( new TYPE_5 ( VAR_2 . getName ( ) ) ) ; VAR_3 . METHOD_2 ( new TYPE_6 ( VAR_1 ) ) ; return new TYPE_1 ( new TYPE_9 ( VAR_5 , VAR_3 ) ) ; }\n"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "config.set(KeyProviderFactory.KEY_PROVIDER_PATH, \"user:\n     ks.setConf(config);\n     rc = ks.run(args1);\n    assertEquals(-1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "fixed": "config.set(KeyProviderFactory.KEY_PROVIDER_PATH, \"user:\n     ks.setConf(config);\n     rc = ks.run(args1);\n    assertEquals(1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( ) { java.util.Iterator < TYPE_1 > i = VAR_1 . iterator ( ) ; while ( i . METHOD_2 ( ) ) { TYPE_1 VAR_2 = i . METHOD_3 ( ) ; if ( ( VAR_2 . METHOD_4 ( ) ) & ( ! ( VAR_2 . METHOD_5 ( ) ) ) ) { i . remove ( ) ; VAR_3 . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ; TYPE_2 . METHOD_8 ( java.lang.String.format ( STRING_1 ) ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { java.util.Iterator < TYPE_1 > i = VAR_1 . iterator ( ) ; while ( i . METHOD_2 ( ) ) { TYPE_1 VAR_2 = i . METHOD_3 ( ) ; if ( ( VAR_2 . METHOD_4 ( ) ) && ( ! ( VAR_2 . METHOD_5 ( ) ) ) ) { i . remove ( ) ; VAR_3 . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ; TYPE_2 . METHOD_8 ( java.lang.String.format ( STRING_1 ) ) ; } } }\n"}
{"problem": "public static void METHOD_1 ( ) { int count = 0 ; for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ( VAR_1 . get ( i ) ) == ( VAR_2 . get ( i ) ) ) { count ++ ; } else { } } java.lang.System.out.println ( ( STRING_1 + count ) ) ; }\n", "fixed": "public static void METHOD_1 ( ) { int count = 0 ; for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ( VAR_1 . get ( i ) ) == ( VAR_2 . get ( ( i + 1 ) ) ) ) { count ++ ; } else { } } java.lang.System.out.println ( ( STRING_1 + count ) ) ; }\n"}
{"problem": "private java.lang.Object METHOD_1 ( java.lang.Object arg , TYPE_1 VAR_1 ) { if ( ! ( arg instanceof TYPE_2 ) ) throw new TYPE_3 ( STRING_1 ) ; TYPE_4 t = ( ( TYPE_2 ) ( arg ) ) . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( t ) ; return super . METHOD_1 ( VAR_1 , t ) ; }\n", "fixed": "private java.lang.Object METHOD_1 ( java.lang.Object arg , TYPE_1 VAR_1 ) { if ( ! ( arg instanceof TYPE_2 ) ) throw new TYPE_3 ( STRING_1 ) ; TYPE_4 t = ( ( TYPE_2 ) ( arg ) ) . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( t ) ; try { return super . METHOD_1 ( VAR_1 , t ) ; } finally { VAR_2 . METHOD_3 ( null ) ; } }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"problem": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { this . VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( this . VAR_3 ) { if ( ( this . VAR_2 ) < ( this . VAR_4 ) ) { return ; } else { this . VAR_3 = false ; VAR_5 . METHOD_4 ( ) ; VAR_6 . METHOD_4 ( ) ; VAR_7 . METHOD_4 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { this . VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ! ( this . VAR_3 ) ) { return ; } if ( ( this . VAR_2 ) < ( this . VAR_4 ) ) { return ; } else { this . VAR_3 = false ; VAR_5 . METHOD_4 ( ) ; VAR_6 . METHOD_4 ( ) ; VAR_7 . METHOD_4 ( ) ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DisruptorVmEndpointBuilder\n             extends\n                 DisruptorVmEndpointConsumerBuilder, DisruptorVmEndpointProducerBuilder {\n         default AdvancedDisruptorVmEndpointBuilder advanced() {", "fixed": "     \n    public interface DisruptorVmEndpointBuilder\n             extends\n                 DisruptorVmEndpointConsumerBuilder, DisruptorVmEndpointProducerBuilder {\n         default AdvancedDisruptorVmEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public static java.lang.String METHOD_1 ( java.lang.String message ) { if ( message . contains ( STRING_1 ) ) { return message ; } else { java.lang.String line = TYPE_1 . METHOD_2 ( message ) ; if ( line == message ) { java.util.regex.Matcher VAR_1 = TYPE_2 . METHOD_3 ( message ) ; if ( VAR_1 . METHOD_4 ( ) ) { return ( ( VAR_2 ) + ( VAR_3 ) ) + line ; } } return line ; } }\n", "fixed": "public static java.lang.String METHOD_1 ( java.lang.String message ) { if ( message . contains ( STRING_1 ) ) { return message ; } else { java.lang.String line = TYPE_1 . METHOD_2 ( message ) ; if ( line . equals ( message ) ) { java.util.regex.Matcher VAR_1 = TYPE_2 . METHOD_3 ( message ) ; if ( VAR_1 . METHOD_4 ( ) ) { return ( ( VAR_2 ) + ( VAR_3 ) ) + line ; } } return line ; } }\n"}
{"fixCommitSHA1": "c7fd539c43b8e027a74d0f9118e9f3d48bc930d1", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 entry.value = value;\n                 entry.dirty = true;\n             } else {\n                getClusterMap().put(buildAttributeName(name), value);\n             }\n         }", "fixed": "                 entry.value = value;\n                 entry.dirty = true;\n             } else {\n                getClusterMap().set(buildAttributeName(name), value);\n             }\n         }", "sourceBeforeFix": "getClusterMap().put(buildAttributeName(name),value)", "sourceAfterFix": "getClusterMap().set(buildAttributeName(name),value)"}
{"problem": "private void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { VAR_1 = ( ( int ) ( TYPE_1 . METHOD_2 ( ( ( VAR_2 . size ( ) ) / ( VAR_3 ) ) ) ) ) + 1 ; } VAR_1 -= 1 ; METHOD_3 ( VAR_1 ) ; }\n", "fixed": "private void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { VAR_1 = ( ( int ) ( TYPE_1 . METHOD_2 ( ( ( VAR_2 . size ( ) ) / ( VAR_3 ) ) ) ) ) ; } VAR_1 -= 1 ; METHOD_3 ( VAR_1 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( java.lang.Object ... args ) { if ( ( args [ 0 ] ) != null ) { TYPE_1 . METHOD_2 ( VAR_1 , args [ 0 ] . toString ( ) ) ; } else { VAR_2 . METHOD_3 ( ( ( TYPE_2 ) ( args [ 1 ] ) ) ) ; } VAR_3 . METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.Object ... args ) { if ( ( args [ 0 ] ) != null ) { TYPE_1 . METHOD_2 ( VAR_1 , args [ 0 ] . toString ( ) ) ; } else { VAR_2 . METHOD_3 ( ( ( TYPE_2 ) ( args [ 1 ] ) ) ) ; } METHOD_4 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( java.util.List list ) { int size = VAR_1 . size ( ) ; for ( java.lang.Object VAR_2 : list ) { VAR_1 . add ( ( ( TYPE_1 ) ( VAR_2 ) ) ) ; } VAR_3 . METHOD_2 ( ) ; if ( ( ( VAR_1 . size ( ) ) - size ) == INT_1 ) { ( VAR_4 ) ++ ; } }\n", "fixed": "public void METHOD_1 ( java.util.List list ) { int size = VAR_1 . size ( ) ; for ( java.lang.Object VAR_2 : list ) { VAR_1 . add ( ( ( TYPE_1 ) ( VAR_2 ) ) ) ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( ) ; } if ( ( ( VAR_1 . size ( ) ) - size ) == INT_1 ) { ( VAR_4 ) ++ ; } }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"problem": "public void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ( VAR_1 . get ( i ) . METHOD_2 ( ) ) == ( VAR_2 ) ) { VAR_1 . get ( i ) . METHOD_3 ( ) ; try { java.lang.Thread . METHOD_4 ( INT_1 ) ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_5 ( ) ; } } } }\n", "fixed": "public void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ( VAR_1 . get ( i ) . METHOD_2 ( ) ) == ( VAR_2 ) ) { VAR_1 . get ( i ) . METHOD_3 ( ) ; } } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ValidatorEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedValidatorEndpointBuilder advanced() {\n             return (AdvancedValidatorEndpointBuilder) this;\n         }", "fixed": "     \n    public interface ValidatorEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedValidatorEndpointBuilder advanced() {\n             return (AdvancedValidatorEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; new TYPE_2 ( METHOD_3 ( ) ) . execute ( ) ; android.widget.Button VAR_3 = ( ( android.widget.Button ) ( METHOD_4 ( VAR_4 ) ) ) ; assert VAR_3 != null ; VAR_3 . METHOD_5 ( new TYPE_3 ( ) { public void METHOD_6 ( android.view.View VAR_5 ) { METHOD_7 ( new android.content.Intent ( VAR_6 this , VAR_7 class ) ) ; } } ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; new TYPE_2 ( ) . execute ( ) ; android.widget.Button VAR_3 = ( ( android.widget.Button ) ( METHOD_4 ( VAR_4 ) ) ) ; assert VAR_3 != null ; VAR_3 . METHOD_5 ( new TYPE_3 ( ) { public void METHOD_6 ( android.view.View VAR_5 ) { METHOD_7 ( new android.content.Intent ( VAR_6 this , VAR_7 class ) ) ; } } ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "void METHOD_1 ( ) { int VAR_1 = 0 ; if ( ( VAR_2 . METHOD_2 ( ) ) == null ) VAR_1 = - 1 ; else { TYPE_1 VAR_3 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_1 VAR_4 = VAR_2 . METHOD_3 ( ) ; VAR_1 = ( ( ( ( VAR_2 . METHOD_2 ( ) . METHOD_4 ( ) ) - ( VAR_5 ) ) - ( VAR_6 ) ) - ( VAR_7 ) ) - ( VAR_8 ) ; } METHOD_1 ( VAR_1 ) ; }\n", "fixed": "void METHOD_1 ( ) { int VAR_1 = 0 ; if ( ( VAR_2 . METHOD_2 ( ) ) == null ) VAR_1 = - 1 ; else { TYPE_1 VAR_3 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_1 VAR_4 = VAR_2 . METHOD_3 ( ) ; VAR_1 = ( ( ( ( VAR_2 . METHOD_2 ( ) . METHOD_4 ( ) ) - ( VAR_5 ) ) - ( VAR_6 ) ) - ( VAR_7 ) ) - ( VAR_8 ) ; } METHOD_1 ( VAR_1 , false ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) < ( VAR_3 ) ) && ( ( ( this . METHOD_2 ( ) ) - ( this . METHOD_3 ( ) ) ) <= ( VAR_3 ) ) ) { ( VAR_2 ) ++ ; } else { VAR_1 . METHOD_4 ( ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) < ( VAR_3 ) ) && ( ( ( ( this . METHOD_2 ( ) ) - 1 ) - ( this . METHOD_3 ( ) ) ) <= ( VAR_3 ) ) ) { ( VAR_2 ) ++ ; } else { VAR_1 . METHOD_4 ( ) ; } }\n"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",", "fixed": "                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ApnsEndpointBuilder\n             extends\n                 ApnsEndpointConsumerBuilder, ApnsEndpointProducerBuilder {\n         default AdvancedApnsEndpointBuilder advanced() {", "fixed": "     \n    public interface ApnsEndpointBuilder\n             extends\n                 ApnsEndpointConsumerBuilder, ApnsEndpointProducerBuilder {\n         default AdvancedApnsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Set the format for a check.\n      * @param format a <code>String</code> value\n      */\n    public void setCheckFormat(String format) {\n         checkFormat = format;\n     }", "fixed": "      * Set the format for a check.\n      * @param format a <code>String</code> value\n      */\n    public final void setCheckFormat(String format) {\n         checkFormat = format;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; METHOD_2 ( VAR_3 ) ; android.content.Intent i = getIntent ( ) ; java.lang.String VAR_4 = i . METHOD_3 ( STRING_1 ) ; java.lang.System.out.println ( VAR_4 ) ; VAR_5 = ( ( TYPE_3 ) ( METHOD_4 ( VAR_6 ) ) ) ; VAR_5 . setText ( VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_3 ) ; android.content.Intent i = getIntent ( ) ; java.lang.String VAR_4 = i . METHOD_3 ( STRING_1 ) ; java.lang.System.out.println ( VAR_4 ) ; VAR_5 = ( ( TYPE_3 ) ( METHOD_4 ( VAR_6 ) ) ) ; VAR_5 . setText ( VAR_4 ) ; }\n"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "         void delta() {}\n         void epsilon() {}\n     }\n    private static class Super {\n         void testOne() {}\n     }\n    private static class Sub extends Super {\n         void testTwo() {}\n     }", "fixed": "         void delta() {}\n         void epsilon() {}\n     }\n    static class Super {\n         void testOne() {}\n     }\n    static class Sub extends Super {\n         void testTwo() {}\n     }", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"problem": "private static void METHOD_1 ( int index , TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { VAR_3 . remove ( index ) ; VAR_3 . add ( index , STRING_1 ) ; } VAR_4 = true ; ( VAR_5 ) ++ ; ( VAR_6 ) ++ ; TYPE_2 . add ( TYPE_2 . size ( ) , STRING_2 ) ; }\n", "fixed": "private static void METHOD_1 ( int index , TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { VAR_3 . remove ( index ) ; VAR_3 . add ( index , STRING_1 ) ; } VAR_4 = true ; TYPE_2 . add ( TYPE_2 . size ( ) , STRING_2 ) ; }\n"}
{"fixCommitSHA1": "cd3ac4311288c854d5bf0e661097c7262cf84ce3", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "         for (Class clazz : unwrapClasses(interceptors)) {\n             try {\n                 Interceptor interceptor = Interceptor.class.cast(clazz.newInstance());\n                serverService.getIncomingInterceptors().add(interceptor);\n             } catch (Exception e) {\n                 throw new OperationFailedException(e);\n             }", "fixed": "         for (Class clazz : unwrapClasses(interceptors)) {\n             try {\n                 Interceptor interceptor = Interceptor.class.cast(clazz.newInstance());\n                serverService.getOutgoingInterceptors().add(interceptor);\n             } catch (Exception e) {\n                 throw new OperationFailedException(e);\n             }", "sourceBeforeFix": "serverService.getIncomingInterceptors()", "sourceAfterFix": "serverService.getOutgoingInterceptors()"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_2 = VAR_3 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 ) ; TYPE_3 . METHOD_5 ( VAR_2 ) ; TYPE_4 . METHOD_6 ( VAR_1 ) ; TYPE_4 . METHOD_7 ( VAR_1 , VAR_2 ) ; TYPE_5 . METHOD_8 ( VAR_2 , VAR_1 , STRING_1 , STRING_2 , false ) ; }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_2 = VAR_3 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 ) ; TYPE_3 . METHOD_5 ( VAR_2 ) ; TYPE_4 . METHOD_6 ( VAR_1 ) ; TYPE_4 . METHOD_7 ( VAR_1 , VAR_2 ) ; TYPE_5 . METHOD_8 ( VAR_2 , VAR_1 , STRING_1 , STRING_2 , true ) ; }\n"}
{"problem": "public void METHOD_1 ( final TYPE_1 result ) throws java.lang.Exception { synchronized ( this ) { if ( ( VAR_1 ) == ( VAR_2 ) ) { VAR_1 = VAR_3 ; VAR_4 = result ; METHOD_2 ( result ) ; VAR_5 . METHOD_3 ( ) ; } else { throw new TYPE_2 ( STRING_1 ) ; } } }\n", "fixed": "public void METHOD_1 ( final TYPE_1 result ) throws java.lang.Exception { synchronized ( this ) { if ( ( VAR_1 ) == ( VAR_2 ) ) { VAR_1 = VAR_3 ; VAR_4 = result ; try { METHOD_2 ( result ) ; } finally { VAR_5 . METHOD_3 ( ) ; } } else { throw new TYPE_2 ( STRING_1 ) ; } } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( this . VAR_2 ) != null ) { VAR_1 . METHOD_2 ( this . VAR_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) . getId ( ) , this . VAR_2 ) ) ; } if ( ( this . VAR_4 ) != null ) { } return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( this . VAR_2 ) != null ) { VAR_1 . METHOD_2 ( this . VAR_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) . getId ( ) , this . VAR_2 ) ) ; } return VAR_1 ; }\n"}
{"problem": "protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( false ) ; if ( ( VAR_1 ) != ( VAR_2 ) ) TYPE_2 . METHOD_3 ( METHOD_4 ( ) ) ; if ( ( ( VAR_3 ) != null ) && ( VAR_4 ) ) { VAR_4 = false ; VAR_3 . METHOD_1 ( ) ; } TYPE_3 . start ( this ) ; super . METHOD_1 ( ) ; }\n", "fixed": "protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( false ) ; if ( ( VAR_1 ) != ( VAR_2 ) ) TYPE_2 . METHOD_3 ( METHOD_4 ( ) , this ) ; if ( ( ( VAR_3 ) != null ) && ( VAR_4 ) ) { VAR_4 = false ; VAR_3 . METHOD_1 ( ) ; } TYPE_3 . start ( this ) ; super . METHOD_1 ( ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String VAR_3 = METHOD_2 ( VAR_4 , STRING_2 ) ; android.content.Intent intent = new android.content.Intent ( METHOD_3 ( ) . METHOD_4 ( ) , VAR_5 class ) ; intent . METHOD_5 ( STRING_3 , VAR_1 ) ; intent . METHOD_5 ( STRING_4 , VAR_3 ) ; int VAR_6 = INT_1 ; METHOD_6 ( VAR_7 , intent ) ; METHOD_7 ( intent , VAR_6 ) ; }\n", "fixed": "private void METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String VAR_3 = METHOD_2 ( VAR_4 , STRING_2 ) ; if ( ( VAR_1 != null ) && ( VAR_3 != null ) ) { android.content.Intent intent = new android.content.Intent ( METHOD_3 ( ) . METHOD_4 ( ) , VAR_5 class ) ; intent . METHOD_5 ( STRING_3 , VAR_1 ) ; intent . METHOD_5 ( STRING_4 , VAR_3 ) ; int VAR_6 = INT_1 ; METHOD_6 ( VAR_7 , intent ) ; METHOD_7 ( intent , VAR_6 ) ; } }\n"}
{"fixCommitSHA1": "a82c5ba127d1472c0c5c9dea4c1d8241bb391733", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\t\tHttpServletResponse response) throws ServletException, IOException {\r\n \t\tHttpSession httpSession = request.getSession();\r\n\t\tString ipAddress = request.getLocalAddr();\r\n \t\tInteger loginAttempts = loginAttemptsByIP.get(ipAddress);\r\n \t\tif (loginAttempts == null)\r\n \t\t\tloginAttempts = 1;\r", "fixed": " \t\t\tHttpServletResponse response) throws ServletException, IOException {\r\n \t\tHttpSession httpSession = request.getSession();\r\n\t\tString ipAddress = request.getRemoteAddr();\r\n \t\tInteger loginAttempts = loginAttemptsByIP.get(ipAddress);\r\n \t\tif (loginAttempts == null)\r\n \t\t\tloginAttempts = 1;\r", "sourceBeforeFix": "request.getLocalAddr()", "sourceAfterFix": "request.getRemoteAddr()"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t@Override\r\n \tpublic Preferences putLong (String key, long val) {\r\n\t\tnsDictionary.put(convertKey(key), NSNumber.numberWithLong(val));\r\n \t\treturn this;\r\n \t}\r", "fixed": " \t@Override\r\n \tpublic Preferences putLong (String key, long val) {\r\n\t\tnsDictionary.put(convertKey(key), NSNumber.numberWithLongLong(val));\r\n \t\treturn this;\r\n \t}\r", "sourceBeforeFix": "value.longValue()", "sourceAfterFix": "value.longLongValue()"}
{"problem": "public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( this . VAR_2 . get ( VAR_1 ) ) == null ) { return ; } java.io.File file = new java.io.File ( this . VAR_3 , ( VAR_1 + STRING_1 ) ) ; try { METHOD_2 ( VAR_1 ) . METHOD_3 ( file ) ; } catch ( java.io.IOException VAR_4 ) { this . METHOD_4 ( ) . METHOD_5 ( VAR_5 , ( STRING_2 + file ) , VAR_4 ) ; } }\n", "fixed": "public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_2 . get ( VAR_1 ) ) == null ) { return ; } java.io.File file = new java.io.File ( this . VAR_3 , ( VAR_1 + STRING_1 ) ) ; try { METHOD_2 ( VAR_1 ) . METHOD_3 ( file ) ; } catch ( java.io.IOException VAR_4 ) { METHOD_4 ( ) . METHOD_5 ( VAR_5 , ( STRING_2 + file ) , VAR_4 ) ; } }\n"}
{"fixCommitSHA1": "038c9b6d6103052795b6d6e1175cd964c7461bb2", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "         }\n         \n        protected int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "fixed": "         }\n         \n        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; if ( VAR_1 instanceof TYPE_3 ) { for ( TYPE_1 VAR_3 : ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_3 ( ) ) { METHOD_4 ( VAR_3 ) ; } } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; if ( VAR_1 instanceof TYPE_3 ) { for ( TYPE_1 VAR_3 : ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_3 ( ) ) { METHOD_1 ( VAR_3 ) ; } } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < > ( ) ; VAR_3 = new TYPE_2 ( getContext ( ) , this ) ; VAR_4 = new TYPE_3 ( this ) ; VAR_5 = METHOD_2 ( ) . getBoolean ( VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < > ( ) ; VAR_3 = new TYPE_2 ( getContext ( ) , this ) ; VAR_4 = new TYPE_3 ( getContext ( ) , this ) ; VAR_5 = METHOD_2 ( ) . getBoolean ( VAR_6 ) ; }\n"}
{"fixCommitSHA1": "f3c01ca3b39c23758a34d711579a567a5f841944", "projectName": "eclipse.vert.x", "bugType": "Change Numeric Literal", "problem": "       Process process = startExternalNode(i);\n       externalNodes.add(process);\n     }\n    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 30_000);\n     JsonArray message1 = new JsonArray();\n     IntStream.range(0, NODE_COUNT).forEach(message1::add);\n     vertx.eventBus().publish(\"ping\", message1);\n    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 30_000);\n     for (int i = 0; i < NODE_COUNT - 1; i++) {\n       externalNodes.get(i).destroyForcibly();", "fixed": "       Process process = startExternalNode(i);\n       externalNodes.add(process);\n     }\n    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 60_000);\n     JsonArray message1 = new JsonArray();\n     IntStream.range(0, NODE_COUNT).forEach(message1::add);\n     vertx.eventBus().publish(\"ping\", message1);\n    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 60_000);\n     for (int i = 0; i < NODE_COUNT - 1; i++) {\n       externalNodes.get(i).destroyForcibly();", "sourceBeforeFix": "waitUntil(() -> externalNodesStarted.get() == NODE_COUNT,30_000)", "sourceAfterFix": "waitUntil(() -> externalNodesStarted.get() == NODE_COUNT,60_000)"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { if ( ( VAR_3 ) <= 1 ) { VAR_3 = INT_1 ; ( VAR_4 ) -- ; } else { ( VAR_3 ) -- ; } METHOD_2 ( VAR_3 , VAR_4 ) ; } if ( VAR_1 == ( VAR_5 ) ) { if ( ( VAR_3 ) > INT_2 ) { VAR_3 = 1 ; ( VAR_4 ) ++ ; } else { ( VAR_3 ) ++ ; } METHOD_2 ( VAR_3 , VAR_4 ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { if ( ( VAR_3 ) <= 0 ) { VAR_3 = INT_2 ; ( VAR_4 ) -- ; } else { ( VAR_3 ) -- ; } METHOD_2 ( VAR_3 , VAR_4 ) ; } if ( VAR_1 == ( VAR_5 ) ) { if ( ( VAR_3 ) >= INT_2 ) { VAR_3 = 0 ; ( VAR_4 ) ++ ; } else { ( VAR_3 ) ++ ; } METHOD_2 ( VAR_3 , VAR_4 ) ; } }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; java.lang.String VAR_3 = new TYPE_3 ( ) . METHOD_4 ( VAR_4 ) ; VAR_2 . METHOD_5 ( java.lang.String.format ( STRING_1 , VAR_5 ) , VAR_3 ) ; VAR_2 . commit ( ) ; } }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; java.lang.String VAR_3 = new TYPE_3 ( ) . METHOD_4 ( VAR_4 ) ; VAR_2 . METHOD_5 ( this . VAR_5 , VAR_3 ) ; VAR_2 . commit ( ) ; } }\n"}
{"problem": "private void METHOD_1 ( android.content.Context context ) { android.content.Intent VAR_1 = context . METHOD_2 ( ) . METHOD_3 ( context . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ( ( ( VAR_2 ) | ( VAR_3 ) ) | ( VAR_4 ) ) ) ; context . METHOD_6 ( VAR_1 ) ; TYPE_1 . METHOD_7 ( VAR_5 , STRING_1 ) ; METHOD_8 ( ) ; java.lang.System.exit ( 0 ) ; TYPE_2 . METHOD_9 ( TYPE_2 . METHOD_10 ( ) ) ; }\n", "fixed": "private void METHOD_1 ( android.content.Context context ) { android.content.Intent VAR_1 = context . METHOD_2 ( ) . METHOD_3 ( context . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ( ( ( VAR_2 ) | ( VAR_3 ) ) | ( VAR_4 ) ) ) ; context . METHOD_6 ( VAR_1 ) ; TYPE_1 . METHOD_7 ( VAR_5 , STRING_1 ) ; METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( TYPE_2 . METHOD_10 ( ) ) ; }\n"}
{"problem": "public java.lang.Object METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { TYPE_1 . METHOD_2 ( VAR_4 . contains ( VAR_1 ) , ( STRING_1 + ( VAR_4 ) ) ) ; TYPE_2 VAR_5 = null ; switch ( VAR_1 ) { case STRING_2 : VAR_5 = new TYPE_3 ( ) ; break ; case STRING_3 : VAR_5 = new TYPE_4 ( ) ; break ; } return new TYPE_5 ( new TYPE_6 ( VAR_5 , VAR_2 , VAR_3 ) ) ; }\n", "fixed": "public java.lang.Object METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { TYPE_1 . METHOD_2 ( VAR_4 . contains ( VAR_1 ) , ( STRING_1 + ( VAR_4 ) ) ) ; TYPE_2 VAR_5 = null ; switch ( VAR_1 ) { case STRING_2 : VAR_5 = new TYPE_3 ( ) ; break ; case STRING_3 : VAR_5 = new TYPE_4 ( ) ; break ; default : VAR_5 = new TYPE_4 ( ) ; } return new TYPE_5 ( new TYPE_6 ( VAR_5 , VAR_2 , VAR_3 ) ) ; }\n"}
{"problem": "public void update ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = this . VAR_4 . get ( VAR_1 ) ; TYPE_1 [ ] VAR_5 = VAR_3 . METHOD_1 ( ) ; VAR_5 [ VAR_5 . length ] = VAR_2 ; VAR_3 . METHOD_2 ( VAR_5 ) ; this . VAR_4 . put ( VAR_1 , VAR_3 ) ; }\n", "fixed": "public void update ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = this . VAR_4 . get ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_5 = VAR_3 . METHOD_1 ( ) ; VAR_5 . add ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_5 ) ; this . VAR_4 . put ( VAR_1 , VAR_3 ) ; }\n"}
{"problem": "private int METHOD_1 ( double VAR_1 ) { final double VAR_2 = 1.0 - ( this . VAR_3 ) ; final TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 ) ; int counter = 0 ; double value = 0 ; while ( value < VAR_2 ) { value = VAR_4 . METHOD_2 ( counter ) ; counter ++ ; } this . VAR_5 = 1.0 - value ; return counter + 1 ; }\n", "fixed": "private int METHOD_1 ( double VAR_1 ) { final double VAR_2 = 1.0 - ( this . VAR_3 ) ; final TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 ) ; int counter = 0 ; double value = 0 ; while ( value < VAR_2 ) { value = VAR_4 . METHOD_2 ( counter ) ; counter ++ ; if ( counter >= ( this . k ) ) { value = 1.0 ; break ; } } this . VAR_5 = 1.0 - value ; return counter + 1 ; }\n"}
{"problem": "public double [ ] METHOD_1 ( ) { double [ ] result = new double [ size ] ; for ( int i = 0 ; i < ( count ) ; ++ i ) { result [ VAR_1 [ i ] ] = data [ i ] ; } return result ; }\n", "fixed": "public double [ ] METHOD_1 ( ) { double [ ] result = new double [ size ] ; for ( int i = 0 ; i < ( count ) ; ++ i ) { result [ VAR_1 [ i ] ] = get ( i ) ; } return result ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.io.IOException { VAR_1 = true ; synchronized ( VAR_2 ) { while ( ( ( VAR_2 . size ( ) ) > 0 ) || ( ! ( VAR_3 ) ) ) { try { VAR_2 . METHOD_2 ( INT_1 ) ; } catch ( TYPE_1 VAR_4 ) { TYPE_2 . METHOD_3 ( STRING_1 , VAR_4 ) ; } } METHOD_4 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) throws java.io.IOException { VAR_1 = true ; synchronized ( VAR_2 ) { while ( ( ( VAR_2 . size ( ) ) > 0 ) || ( ! ( VAR_3 ) ) ) { try { VAR_2 . METHOD_2 ( INT_1 ) ; } catch ( TYPE_1 VAR_4 ) { TYPE_2 . METHOD_3 ( STRING_1 , VAR_4 ) ; } } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public boolean METHOD_1 ( final java.util.Map < java.lang.String , java.lang.Object > VAR_1 , final java.lang.String VAR_2 ) { try { final java.lang.String VAR_3 = new TYPE_1 ( ) . METHOD_2 ( VAR_1 ) ; final java.lang.String VAR_4 = METHOD_3 ( STRING_1 ) ; METHOD_4 ( ) . METHOD_5 ( VAR_4 , VAR_2 ) . METHOD_6 ( ( ( STRING_2 + VAR_3 ) + STRING_3 ) ) ; return true ; } catch ( TYPE_2 | TYPE_3 VAR_5 ) { return false ; } }\n", "fixed": "public boolean METHOD_1 ( final java.util.Map < java.lang.String , java.lang.Object > VAR_1 , final java.lang.String VAR_2 ) { try { final java.lang.String VAR_3 = new TYPE_1 ( ) . METHOD_2 ( VAR_1 ) ; final java.lang.String VAR_4 = METHOD_3 ( STRING_1 ) ; METHOD_4 ( ) . update ( VAR_4 , VAR_2 ) . METHOD_6 ( ( ( STRING_2 + VAR_3 ) + STRING_3 ) ) ; return true ; } catch ( TYPE_2 | TYPE_3 VAR_5 ) { return false ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleMailEndpointBuilder\n             extends\n                 GoogleMailEndpointConsumerBuilder, GoogleMailEndpointProducerBuilder {\n         default AdvancedGoogleMailEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleMailEndpointBuilder\n             extends\n                 GoogleMailEndpointConsumerBuilder, GoogleMailEndpointProducerBuilder {\n         default AdvancedGoogleMailEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public boolean METHOD_1 ( final int index , TYPE_1 VAR_1 ) { boolean result = false ; if ( index == 0 ) { METHOD_2 ( VAR_1 ) ; result = true ; } else { TYPE_2 VAR_2 = METHOD_3 ( index ) ; if ( VAR_2 != null ) { VAR_2 . append ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ; result = true ; } } return result ; }\n", "fixed": "public boolean METHOD_1 ( final int index , TYPE_1 VAR_1 ) { boolean result = false ; if ( index == 0 ) { METHOD_2 ( VAR_1 ) ; result = true ; } else { TYPE_2 VAR_2 = METHOD_3 ( index ) ; if ( VAR_2 != null ) { VAR_2 . append ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ; result = true ; ( length ) ++ ; } } return result ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"problem": "private void METHOD_1 ( ) { METHOD_2 ( ) ; android.view.View VAR_1 = ( ( android.view.View ) ( VAR_2 . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( ) ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( 0 ) ; VAR_3 . METHOD_6 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_7 ( VAR_1 ) ; TYPE_1 . METHOD_8 ( this , VAR_1 ) ; }\n", "fixed": "private void METHOD_1 ( ) { METHOD_2 ( ) ; android.view.View VAR_1 = ( ( android.view.View ) ( VAR_2 . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( ) ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( 0 ) ; VAR_3 . METHOD_6 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_7 ( VAR_1 ) ; }\n"}
{"problem": "private boolean METHOD_1 ( java.lang.Object a , java.lang.Object b ) { java.lang.System.out.println ( ( ( a + STRING_1 ) + b ) ) ; if ( ( a != null ) && ( b != null ) ) { if ( a . equals ( b ) ) { return true ; } } else { if ( ( a == null ) && ( b == null ) ) { return true ; } } return false ; }\n", "fixed": "private boolean METHOD_1 ( java.lang.Object a , java.lang.Object b ) { if ( ( a != null ) && ( b != null ) ) { if ( a . equals ( b ) ) { return true ; } } else { if ( ( a == null ) && ( b == null ) ) { return true ; } } return false ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) ; for ( TYPE_1 VAR_5 : VAR_1 ) { java.lang.String VAR_6 = ( ( ( ( VAR_5 . METHOD_4 ( ) ) + STRING_1 ) + ( VAR_5 . getContext ( ) ) ) + STRING_1 ) + ( VAR_5 . METHOD_5 ( ) ) ; if ( VAR_2 . METHOD_6 ( VAR_6 ) ) { VAR_2 . remove ( VAR_6 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) ; for ( TYPE_1 VAR_5 : VAR_1 ) { java.lang.String VAR_6 = VAR_5 . METHOD_4 ( ) ; if ( VAR_6 != null ) { VAR_2 . remove ( VAR_6 ) ; } } }\n"}
{"problem": "protected boolean METHOD_1 ( final TYPE_1 ... VAR_1 ) { boolean VAR_2 = false ; TYPE_1 status = METHOD_2 ( ) ; if ( status != null ) { VAR_2 = java.util.Arrays.asList ( VAR_1 ) . contains ( status ) ; } if ( ! VAR_2 ) { if ( status . METHOD_3 ( ) ) { return METHOD_4 ( VAR_3 ) ; } METHOD_5 ( ) ; } return VAR_2 ; }\n", "fixed": "protected boolean METHOD_1 ( final TYPE_1 ... VAR_1 ) { boolean VAR_2 = false ; TYPE_1 status = METHOD_2 ( ) ; if ( status != null ) { VAR_2 = java.util.Arrays.asList ( VAR_1 ) . contains ( status ) ; } if ( ! VAR_2 ) { if ( ( status != null ) && ( status . METHOD_3 ( ) ) ) { return METHOD_4 ( VAR_3 ) ; } METHOD_5 ( ) ; } return VAR_2 ; }\n"}
{"problem": "private void METHOD_1 ( ) { METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( VAR_2 ) ) { java.lang.String VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) . toUpperCase ( ) ; if ( VAR_3 . startsWith ( STRING_1 ) ) VAR_4 = new TYPE_1 ( ) ; else if ( VAR_3 . startsWith ( STRING_2 ) ) VAR_4 = new TYPE_2 ( ) ; else VAR_4 = new TYPE_3 ( ) ; } else VAR_4 = new TYPE_3 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( VAR_2 ) ) { java.lang.String VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) . toUpperCase ( ) ; if ( VAR_3 . startsWith ( STRING_1 ) ) VAR_4 = new TYPE_1 ( ) ; else if ( VAR_3 . startsWith ( STRING_2 ) ) VAR_4 = new TYPE_2 ( ) ; else VAR_4 = new TYPE_3 ( ) ; } else { if ( ( VAR_4 ) == null ) VAR_4 = new TYPE_3 ( ) ; } }\n"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "fixed": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) < ( ( VAR_2 . METHOD_3 ( ) ) / INT_1 ) ) { java.lang.System.out.println ( STRING_1 ) ; } else { VAR_1 . METHOD_1 ( VAR_2 ) ; VAR_1 . METHOD_4 ( ( ( VAR_1 . METHOD_2 ( ) ) - ( ( VAR_2 . METHOD_3 ( ) ) / INT_1 ) ) ) ; VAR_2 . METHOD_5 ( ( ( VAR_2 . METHOD_3 ( ) ) * INT_1 ) ) ; } }\n", "fixed": "public boolean METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) < ( ( VAR_2 . METHOD_3 ( ) ) / INT_1 ) ) { java.lang.System.out.println ( STRING_1 ) ; return false ; } else { VAR_1 . METHOD_1 ( VAR_2 ) ; VAR_1 . METHOD_4 ( ( ( VAR_1 . METHOD_2 ( ) ) - ( ( VAR_2 . METHOD_3 ( ) ) / INT_1 ) ) ) ; VAR_2 . METHOD_5 ( ( ( VAR_2 . METHOD_3 ( ) ) * INT_1 ) ) ; return true ; } }\n"}
{"problem": "public boolean METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_4 , VAR_2 ) ; if ( ( VAR_5 ) >= ( VAR_6 ) ) { getActivity ( ) . METHOD_4 ( ) . METHOD_5 ( TYPE_4 . getColor ( VAR_7 ) ) ; } final int count = VAR_8 . METHOD_6 ( ) ; VAR_1 . METHOD_7 ( METHOD_8 ( ) . METHOD_9 ( VAR_9 , count , count ) ) ; return true ; }\n", "fixed": "public boolean METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final int count = VAR_8 . METHOD_6 ( ) ; final TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_4 , VAR_2 ) ; if ( ( VAR_5 ) >= ( VAR_6 ) ) { getActivity ( ) . METHOD_4 ( ) . METHOD_5 ( TYPE_4 . getColor ( VAR_7 ) ) ; } VAR_1 . METHOD_7 ( METHOD_8 ( ) . METHOD_9 ( VAR_9 , count , count ) ) ; return true ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 . getValue ( ) ) == 1 ) { return ( VAR_2 . METHOD_1 ( ) ) != null ? STRING_1 : STRING_2 ; } return java.lang.String.format ( STRING_3 , this . VAR_2 . METHOD_1 ( ) , METHOD_2 ( ) ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 . getValue ( ) ) == 1 ) { return ( VAR_2 . METHOD_1 ( ) ) != null ? VAR_2 . METHOD_1 ( ) : STRING_2 ; } return java.lang.String.format ( STRING_3 , this . VAR_2 . METHOD_1 ( ) , METHOD_2 ( ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.io.File file , java.lang.String className , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . get ( file ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( file ) ; VAR_3 . put ( file , VAR_2 ) ; VAR_2 . METHOD_2 ( ) ; } TYPE_1 VAR_4 = VAR_2 . METHOD_3 ( VAR_1 , className ) ; TYPE_4 . METHOD_4 ( VAR_1 , file . METHOD_5 ( ) ) ; return VAR_4 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.io.File file , java.lang.String className , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . get ( file ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( file ) ; VAR_3 . put ( file , VAR_2 ) ; VAR_2 . METHOD_2 ( ) ; } TYPE_1 VAR_4 = VAR_2 . METHOD_3 ( VAR_1 , className ) ; TYPE_4 . METHOD_4 ( VAR_1 , file . getName ( ) ) ; return VAR_4 ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 event ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ( ( TYPE_4 ) ( event ) ) . METHOD_3 ( ) , VAR_3 , VAR_4 ) ; VAR_2 . METHOD_4 ( VAR_5 ) ; for ( java.lang.String VAR_6 : VAR_7 ) { VAR_2 . METHOD_5 ( VAR_6 ) ; } VAR_2 . METHOD_6 ( ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 event ) { VAR_2 = VAR_1 . METHOD_2 ( ( ( TYPE_4 ) ( event ) ) . METHOD_3 ( ) , VAR_3 , VAR_4 ) ; VAR_2 . METHOD_4 ( VAR_5 ) ; for ( java.lang.String VAR_6 : VAR_7 ) { VAR_2 . METHOD_5 ( VAR_6 ) ; } VAR_2 . METHOD_6 ( ) ; }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; while ( ! ( VAR_1 . METHOD_1 ( ) ) ) { TYPE_3 token = VAR_1 . METHOD_2 ( ) ; } java.lang.System.out.println ( ( STRING_1 + ( VAR_3 . METHOD_3 ( ) ) ) ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; while ( ! ( VAR_1 . METHOD_1 ( ) ) ) { TYPE_3 token = VAR_1 . METHOD_2 ( ) ; } java.lang.System.out.println ( ( STRING_1 + ( VAR_3 . METHOD_3 ( false ) ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( int index , java.lang.Object value ) { try { VAR_1 . set ( ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( ) ) ) . METHOD_3 ( index , value ) ) ; } catch ( TYPE_2 VAR_2 ) { throw METHOD_4 ( ) . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( int index , java.lang.Object value ) { if ( index < 0 ) return ; try { VAR_1 . set ( ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( ) ) ) . METHOD_3 ( index , value ) ) ; } catch ( TYPE_2 VAR_2 ) { throw METHOD_4 ( ) . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ; } }\n"}
{"problem": "public java.util.ArrayList < TYPE_1 > METHOD_1 ( java.util.ArrayList < TYPE_2 > VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList ( ) ; for ( TYPE_2 element : VAR_1 ) { if ( element != null ) { VAR_2 = METHOD_2 ( element , TYPE_3 . METHOD_3 ( element ) ) ; } } return VAR_2 ; }\n", "fixed": "public java.util.ArrayList < TYPE_1 > METHOD_1 ( java.util.ArrayList < TYPE_2 > VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList ( ) ; for ( TYPE_2 element : VAR_1 ) { if ( element != null ) { VAR_2 = METHOD_2 ( VAR_2 , element , TYPE_3 . METHOD_3 ( element ) ) ; } } return VAR_2 ; }\n"}
{"fixCommitSHA1": "dc504c01fd9f55995cf59660de88fb2f9190057d", "projectName": "Bukkit.Bukkit", "bugType": "Change Modifier", "problem": "      * @param amplitude How much to alter the amplitude by each octave\n      * @return Resulting noise\n      */\n    public double getNoise(double x, double y, double z, int octaves, double frequency, double amplitude) {\n         return instance.noise(x, y, z, octaves, frequency, amplitude);\n     }\n }", "fixed": "      * @param amplitude How much to alter the amplitude by each octave\n      * @return Resulting noise\n      */\n    public static double getNoise(double x, double y, double z, int octaves, double frequency, double amplitude) {\n         return instance.noise(x, y, z, octaves, frequency, amplitude);\n     }\n }", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"problem": "public boolean METHOD_1 ( TYPE_1 event ) { if ( ( ( event . METHOD_2 ( ) ) == ( VAR_1 ) ) && ( ( event . METHOD_3 ( ) ) == ( VAR_2 ) ) ) { this . METHOD_4 ( ) ; } return super . METHOD_1 ( event ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 event ) { if ( ( ( event . METHOD_2 ( ) ) == ( VAR_1 ) ) && ( ( event . METHOD_3 ( ) ) == ( VAR_2 ) ) ) { return true ; } return super . METHOD_1 ( event ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Sjms2EndpointBuilder\n             extends\n                 Sjms2EndpointConsumerBuilder, Sjms2EndpointProducerBuilder {\n         default AdvancedSjms2EndpointBuilder advanced() {", "fixed": "     \n    public interface Sjms2EndpointBuilder\n             extends\n                 Sjms2EndpointConsumerBuilder, Sjms2EndpointProducerBuilder {\n         default AdvancedSjms2EndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "53c0cde20042683e48266819a47099612e69d5bd", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                 + \", \\\"javaType\\\": \\\"java.lang.String\\\", \\\"deprecated\\\": \\\"false\\\", \\\"secret\\\": \\\"false\\\", \\\"defaultValue\\\": \\\"\\\\\\\"\\\"\"));\n         List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(9, rows.size());\n         Map<String, String> found = null;\n         for (Map<String, String> row : rows) {", "fixed": "                 + \", \\\"javaType\\\": \\\"java.lang.String\\\", \\\"deprecated\\\": \\\"false\\\", \\\"secret\\\": \\\"false\\\", \\\"defaultValue\\\": \\\"\\\\\\\"\\\"\"));\n         List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(10, rows.size());\n         Map<String, String> found = null;\n         for (Map<String, String> row : rows) {", "sourceBeforeFix": "assertEquals(9,rows.size())", "sourceAfterFix": "assertEquals(10,rows.size())"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {", "sourceBeforeFix": "context.var(\"long\")", "sourceAfterFix": "context.var(\"long\",2)"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { java.util.Set < TYPE_2 > VAR_3 = VAR_4 . get ( VAR_1 ) ; java.util.Set < TYPE_2 > VAR_5 = VAR_4 . get ( VAR_2 ) ; for ( TYPE_2 a : VAR_3 ) { for ( TYPE_2 b : VAR_5 ) { if ( a . METHOD_2 ( ) . equals ( b . METHOD_2 ( ) ) ) { return true ; } } } return false ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { java.util.Set < TYPE_2 > VAR_3 = VAR_4 . get ( VAR_1 ) ; java.util.Set < TYPE_2 > VAR_5 = VAR_4 . get ( VAR_2 ) ; if ( ( VAR_3 == null ) || ( VAR_5 == null ) ) { return false ; } for ( TYPE_2 a : VAR_3 ) { for ( TYPE_2 b : VAR_5 ) { if ( a . METHOD_2 ( ) . equals ( b . METHOD_2 ( ) ) ) { return true ; } } } return false ; }\n"}
{"fixCommitSHA1": "aebe2ca06a3fb220c7211b174c85250f36afae25", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForNone\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForNone\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"),e.getCause().getMessage())"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { synchronized ( VAR_1 . METHOD_2 ( ) ) { if ( VAR_2 == null ) { VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_3 . put ( VAR_1 , VAR_2 ) ; } } } return VAR_2 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { synchronized ( VAR_1 . METHOD_2 ( ) ) { VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_3 . put ( VAR_1 , VAR_2 ) ; } } } return VAR_2 ; }\n"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "fixed": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic abstract void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "private void METHOD_1 ( TYPE_1 data ) { TYPE_2 . METHOD_2 ( this , false ) ; VAR_1 = data . METHOD_3 ( STRING_1 ) ; if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.ArrayList < > ( ) ; } VAR_1 . add ( 0 , getString ( VAR_2 ) ) ; if ( ! ( VAR_1 . contains ( getString ( VAR_3 ) ) ) ) { VAR_1 . add ( getString ( VAR_3 ) ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 data ) { VAR_1 = data . METHOD_3 ( STRING_1 ) ; if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.ArrayList < > ( ) ; } VAR_1 . add ( 0 , getString ( VAR_2 ) ) ; if ( ! ( VAR_1 . contains ( getString ( VAR_3 ) ) ) ) { VAR_1 . add ( getString ( VAR_3 ) ) ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SlackEndpointBuilder\n             extends\n                 SlackEndpointConsumerBuilder, SlackEndpointProducerBuilder {\n         default AdvancedSlackEndpointBuilder advanced() {", "fixed": "     \n    public interface SlackEndpointBuilder\n             extends\n                 SlackEndpointConsumerBuilder, SlackEndpointProducerBuilder {\n         default AdvancedSlackEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public TYPE_1 METHOD_1 ( java.util.List < TYPE_2 > VAR_1 , double VAR_2 ) { TYPE_2 VAR_3 ; TYPE_2 . METHOD_2 ( VAR_1 ) ; while ( ( VAR_1 . get ( 0 ) . METHOD_3 ( ) ) < VAR_2 ) { VAR_2 = METHOD_4 ( VAR_2 ) ; } VAR_3 = METHOD_5 ( VAR_1 , VAR_2 ) ; return new TYPE_3 ( VAR_3 , VAR_3 . METHOD_3 ( ) , VAR_2 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.util.List < TYPE_2 > VAR_1 , double VAR_2 ) { TYPE_2 VAR_3 ; TYPE_2 . METHOD_2 ( VAR_1 ) ; while ( ( VAR_1 . get ( 0 ) . METHOD_3 ( ) ) < VAR_2 ) { VAR_2 = METHOD_4 ( VAR_2 ) ; } VAR_3 = METHOD_5 ( VAR_1 , VAR_2 ) ; return new TYPE_3 ( VAR_3 , VAR_2 , VAR_2 ) ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.Boolean VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_1 . getId ( ) ) ; VAR_3 . METHOD_3 ( VAR_1 . getName ( ) ) ; VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; if ( VAR_2 ) { VAR_3 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; VAR_3 . METHOD_8 ( VAR_1 . getType ( ) ) ; } return VAR_3 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.Boolean VAR_2 ) { if ( VAR_1 == null ) return null ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_1 . getId ( ) ) ; VAR_3 . METHOD_3 ( VAR_1 . getName ( ) ) ; VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; if ( VAR_2 ) { VAR_3 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; VAR_3 . METHOD_8 ( VAR_1 . getType ( ) ) ; } return VAR_3 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_2 == null ) { if ( ( VAR_3 ) != null ) VAR_3 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_4 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( ) ; } else { TYPE_3 . METHOD_6 ( STRING_1 , ( STRING_2 + ( VAR_2 . METHOD_7 ( ) ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_2 == null ) { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; } VAR_4 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( ) ; } else { TYPE_3 . METHOD_6 ( STRING_1 , ( STRING_2 + ( VAR_2 . METHOD_7 ( ) ) ) ) ; } }\n"}
{"fixCommitSHA1": "0592e84a3c07b4451e81d2eecc0c51af384858d2", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "             new LinkedBlockingQueue<Runnable>(100),\n             new NamedThreadFactory(\"Close-ExecutorService-Timer\", true));\n    public static boolean isShutdown(Executor executor) {\n         if (executor instanceof ExecutorService) {\n            if (((ExecutorService) executor).isShutdown()) {\n                 return true;\n             }\n         }", "fixed": "             new LinkedBlockingQueue<Runnable>(100),\n             new NamedThreadFactory(\"Close-ExecutorService-Timer\", true));\n    public static boolean isTerminated(Executor executor) {\n         if (executor instanceof ExecutorService) {\n            if (((ExecutorService) executor).isTerminated()) {\n                 return true;\n             }\n         }", "sourceBeforeFix": "((ExecutorService)executor).isShutdown()", "sourceAfterFix": "((ExecutorService)executor).isTerminated()"}
{"problem": "public void METHOD_1 ( int VAR_1 , java.util.ArrayList < TYPE_1 > VAR_2 , boolean VAR_3 , boolean VAR_4 , TYPE_2 VAR_5 , double VAR_6 ) { VAR_7 . METHOD_2 ( VAR_4 ) ; VAR_7 . METHOD_3 ( VAR_3 , VAR_5 ) ; VAR_7 . update ( ) ; METHOD_4 ( VAR_4 , VAR_6 ) ; METHOD_5 ( VAR_1 , VAR_4 , true ) ; VAR_8 . METHOD_1 ( ) ; METHOD_6 ( VAR_2 , VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 , java.util.ArrayList < TYPE_1 > VAR_2 , boolean VAR_3 , boolean VAR_4 , TYPE_2 VAR_5 , double VAR_6 ) { VAR_7 . METHOD_2 ( VAR_4 ) ; VAR_7 . METHOD_3 ( VAR_3 , VAR_5 ) ; VAR_7 . update ( ) ; METHOD_4 ( VAR_4 , VAR_6 ) ; METHOD_5 ( VAR_1 ) ; VAR_8 . METHOD_1 ( ) ; METHOD_6 ( VAR_2 , VAR_1 ) ; }\n"}
{"problem": "public static void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_2 . METHOD_2 ( ) ; TYPE_1 state = VAR_1 . METHOD_3 ( ) ; int VAR_3 = VAR_2 . METHOD_4 ( ) ; if ( ( VAR_3 == 0 ) && ( ( state == ( VAR_4 ) ) || ( state == ( VAR_5 ) ) ) ) VAR_1 . METHOD_5 ( ) ; } }\n", "fixed": "public static void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_2 . METHOD_2 ( ) ; TYPE_1 state = VAR_1 . METHOD_3 ( ) ; int VAR_3 = VAR_2 . METHOD_4 ( ) ; if ( ( VAR_3 == 0 ) && ( ( state == ( VAR_4 ) ) || ( state == ( VAR_5 ) ) ) ) VAR_1 . METHOD_5 ( ) ; VAR_1 = null ; } }\n"}
{"problem": "public static java.lang.String METHOD_1 ( final TYPE_1 < java.lang.String > VAR_1 ) { if ( VAR_1 == null ) { return null ; } java.util.LinkedList < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 , false ) ; java.lang.StringBuilder result = new java.lang.StringBuilder ( ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { result . append ( VAR_3 . METHOD_3 ( ) ) ; } return result . toString ( ) ; }\n", "fixed": "public static java.lang.String METHOD_1 ( final TYPE_1 < java.lang.String > VAR_1 ) { if ( VAR_1 == null ) { return null ; } java.util.LinkedList < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 , false ) ; java.lang.StringBuilder result = new java.lang.StringBuilder ( ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( result ) ; } return result . toString ( ) ; }\n"}
{"fixCommitSHA1": "6cf86311e8d061d65c3b8c70d705b69a9d205127", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "             private void handle(Object response) {\n                 Object result = response;\n                 if (response == null) {\n                    inner.innerSetException(new TimeoutException());\n                 } else {\n                     if (response instanceof Packet) {\n                         Packet responsePacket = (Packet) response;", "fixed": "             private void handle(Object response) {\n                 Object result = response;\n                 if (response == null) {\n                    inner.innerSetException(new TimeoutException(), false);\n                 } else {\n                     if (response instanceof Packet) {\n                         Packet responsePacket = (Packet) response;", "sourceBeforeFix": "inner.innerSetException(new TimeoutException())", "sourceAfterFix": "inner.innerSetException(new TimeoutException(),false)"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . put ( VAR_3 , VAR_1 . getName ( ) ) ; VAR_2 . put ( VAR_4 , VAR_1 . METHOD_2 ( ) ) ; VAR_2 . put ( VAR_5 , VAR_1 . METHOD_3 ( ) ) ; VAR_2 . put ( VAR_6 , VAR_1 . METHOD_4 ( ) ) ; VAR_2 . put ( VAR_7 , VAR_1 . METHOD_5 ( ) ) ; return VAR_2 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . put ( VAR_3 , VAR_1 . getName ( ) ) ; VAR_2 . put ( VAR_4 , VAR_1 . METHOD_2 ( ) ) ; VAR_2 . put ( VAR_5 , VAR_1 . METHOD_3 ( ) ) ; VAR_2 . put ( VAR_6 , VAR_1 . METHOD_4 ( ) ) ; VAR_2 . put ( VAR_7 , VAR_1 . METHOD_5 ( ) ) ; return VAR_2 ; }\n"}
{"fixCommitSHA1": "264d8442da6fcd6598bce079f131c703e541f9c0", "projectName": "spring-projects.spring-boot", "bugType": "Same Function More Args", "problem": " \tpublic void jarFileExtensionNeeded() throws Exception {\n \t\tthis.thrown.expect(IllegalStateException.class);\n \t\tthis.thrown.expectMessage(\"is not a JAR file\");\n\t\tthis.cli.jar(\"secure.groovy\");\n \t}\n }", "fixed": " \tpublic void jarFileExtensionNeeded() throws Exception {\n \t\tthis.thrown.expect(IllegalStateException.class);\n \t\tthis.thrown.expectMessage(\"is not a JAR file\");\n\t\tthis.cli.jar(\"secure.groovy\", \"data-jpa.groovy\");\n \t}\n }", "sourceBeforeFix": "this.cli.jar(\"secure.groovy\")", "sourceAfterFix": "this.cli.jar(\"secure.groovy\",\"data-jpa.groovy\")"}
{"problem": "private byte [ ] METHOD_1 ( ) { byte [ ] key ; if ( VAR_1 ) { METHOD_2 ( ) ; if ( ( VAR_2 ) == null ) { return null ; } key = TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , VAR_3 ) ; } else { key = TYPE_2 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ; } this . METHOD_9 ( VAR_4 ) ; return key ; }\n", "fixed": "private byte [ ] METHOD_1 ( ) { byte [ ] key ; if ( VAR_1 ) { METHOD_2 ( ) ; if ( ( VAR_2 ) == null ) { return null ; } key = VAR_2 . METHOD_4 ( ) ; } else { key = TYPE_2 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ; } this . METHOD_9 ( VAR_4 ) ; return key ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . setText ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; java.lang.String VAR_4 = ( ( ( STRING_2 + ( STRING_1 + STRING_3 ) ) + ( VAR_5 . METHOD_3 ( ) . METHOD_4 ( ) ) ) + STRING_3 ) + ( VAR_6 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_4 ) ; VAR_7 . setEnabled ( true ) ; VAR_1 . setEnabled ( true ) ; VAR_8 . setEnabled ( true ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . setText ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; java.lang.String VAR_4 = ( ( ( STRING_2 + ( STRING_1 + STRING_3 ) ) + ( VAR_5 . METHOD_3 ( ) . METHOD_4 ( ) ) ) + STRING_3 ) + ( VAR_6 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_4 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , java.lang.String VAR_3 , boolean VAR_4 ) { java.lang.System.out.println ( STRING_1 ) ; java.util.List < java.lang.String > VAR_5 = VAR_6 . get ( VAR_1 ) ; for ( java.lang.String VAR_7 : VAR_5 ) { METHOD_2 ( VAR_7 , VAR_1 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , java.lang.String VAR_3 , boolean VAR_4 ) { java.lang.System.out.println ( STRING_1 ) ; java.util.List < java.lang.String > VAR_5 = VAR_6 . get ( VAR_1 ) ; for ( java.lang.String VAR_7 : VAR_5 ) { METHOD_2 ( VAR_7 , VAR_1 , false ) ; } VAR_6 . remove ( VAR_1 ) ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( ) ) VAR_2 . METHOD_3 ( ( STRING_1 + VAR_1 ) ) ; VAR_1 . remove ( STRING_2 ) ; VAR_1 . remove ( STRING_3 ) ; if ( TYPE_2 . METHOD_2 ( ) ) VAR_2 . METHOD_3 ( ( STRING_1 + VAR_1 ) ) ; return VAR_1 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return null ; if ( TYPE_2 . METHOD_2 ( ) ) VAR_2 . METHOD_3 ( ( STRING_1 + VAR_1 ) ) ; VAR_1 . remove ( STRING_2 ) ; VAR_1 . remove ( STRING_3 ) ; if ( TYPE_2 . METHOD_2 ( ) ) VAR_2 . METHOD_3 ( ( STRING_1 + VAR_1 ) ) ; return VAR_1 ; }\n"}
{"problem": "public TYPE_1 < java.lang.Void > METHOD_1 ( final TYPE_2 VAR_1 , final long id ) throws TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 { METHOD_2 ( ) ; try { VAR_2 . METHOD_3 ( VAR_1 ) ; } catch ( TYPE_7 VAR_3 ) { throw new TYPE_3 ( VAR_3 ) ; } VAR_2 . update ( ( ( VAR_1 . id ( ) ) == id ? VAR_1 : VAR_1 . METHOD_4 ( ) . id ( id ) . build ( ) ) ) ; return TYPE_1 . METHOD_5 ( ) . build ( ) ; }\n", "fixed": "public TYPE_1 < java.lang.Void > METHOD_1 ( final TYPE_2 VAR_1 , final long id ) throws TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 { METHOD_2 ( ) ; VAR_2 . update ( ( ( VAR_1 . id ( ) ) == id ? VAR_1 : VAR_1 . METHOD_4 ( ) . id ( id ) . build ( ) ) ) ; return TYPE_1 . METHOD_5 ( ) . build ( ) ; }\n"}
{"problem": "public static int METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { int time = 0 ; for ( int t = VAR_1 ; t < ( VAR_3 . size ( ) ) ; t ++ ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , t ) ) ) { java.lang.System.err.println ( ( ( VAR_2 + STRING_1 ) + t ) ) ; return time ; } time ++ ; } return - 1 ; }\n", "fixed": "public static int METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { int time = 0 ; for ( int t = VAR_1 ; t < ( VAR_3 . size ( ) ) ; t ++ ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , t ) ) ) { return time ; } time ++ ; } return - 1 ; }\n"}
{"problem": "public void error ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { METHOD_1 ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; } METHOD_6 ( VAR_2 . name ( ) ) ; if ( VAR_1 instanceof java.lang.Exception ) { VAR_3 . info ( STRING_1 , TYPE_2 . METHOD_7 ( ( ( java.lang.Exception ) ( VAR_1 ) ) ) ) ; VAR_3 . METHOD_8 ( STRING_2 , ( ( java.lang.Exception ) ( VAR_1 ) ) ) ; } }\n", "fixed": "public void error ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { METHOD_1 ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; } METHOD_6 ( VAR_2 . name ( ) ) ; if ( VAR_1 instanceof java.lang.Exception ) { VAR_3 . info ( STRING_1 , TYPE_2 . METHOD_7 ( ( ( java.lang.Exception ) ( VAR_1 ) ) ) ) ; VAR_3 . info ( STRING_2 , ( ( java.lang.Exception ) ( VAR_1 ) ) ) ; } }\n"}
{"problem": "private boolean METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 [ ] VAR_3 = METHOD_2 ( VAR_2 ) ; int a = this . VAR_4 . METHOD_3 ( VAR_1 , VAR_3 [ 0 ] ) ; int b = this . VAR_4 . METHOD_3 ( VAR_1 , VAR_3 [ 1 ] ) ; if ( ( this . VAR_5 . METHOD_4 ( a ) ) || ( this . VAR_5 . METHOD_4 ( b ) ) ) { return true ; } return false ; }\n", "fixed": "private boolean METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 [ ] VAR_3 = TYPE_2 . METHOD_2 ( VAR_2 ) ; int a = this . VAR_4 . METHOD_3 ( VAR_1 , VAR_3 [ 0 ] ) ; int b = this . VAR_4 . METHOD_3 ( VAR_1 , VAR_3 [ 1 ] ) ; if ( ( this . VAR_5 . METHOD_4 ( a ) ) || ( this . VAR_5 . METHOD_4 ( b ) ) ) { return true ; } return false ; }\n"}
{"problem": "public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; switch ( VAR_1 ) { case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 : METHOD_3 ( VAR_7 ) ; break ; default : METHOD_3 ( VAR_1 , true ) ; } } catch ( java.lang.Exception VAR_8 ) { METHOD_3 ( VAR_9 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; switch ( VAR_1 ) { case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 : METHOD_3 ( VAR_7 , true ) ; break ; default : METHOD_3 ( VAR_1 , true ) ; } } catch ( java.lang.Exception VAR_8 ) { METHOD_3 ( VAR_9 ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_1 value = ( ( TYPE_1 ) ( list [ VAR_1 ] ) ) ; list [ VAR_1 ] = null ; ( VAR_1 ) ++ ; if ( ( VAR_1 ) >= ( size ) ) { VAR_1 -= size ; } ( size ) -- ; return value ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { TYPE_1 value = ( ( TYPE_1 ) ( list [ VAR_1 ] ) ) ; list [ VAR_1 ] = null ; ( VAR_1 ) ++ ; if ( ( VAR_1 ) >= ( list . length ) ) { VAR_1 -= list . length ; } ( size ) -- ; return value ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ( - FLOAT_1 ) , FLOAT_2 ) ; TYPE_1 VAR_2 = new TYPE_1 ( 0.0 , FLOAT_3 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < > ( ) ; VAR_4 . add ( VAR_1 ) ; VAR_4 . add ( VAR_2 ) ; return VAR_4 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ( - FLOAT_1 ) , FLOAT_2 ) ; TYPE_1 VAR_2 = new TYPE_1 ( 0.0 , FLOAT_3 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < > ( ) ; VAR_4 . add ( VAR_1 ) ; VAR_4 . add ( VAR_2 ) ; VAR_4 . add ( VAR_2 ) ; return VAR_4 ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( 1 ) ; VAR_1 . METHOD_4 ( STRING_2 ) ; VAR_1 . METHOD_5 ( STRING_2 ) ; VAR_1 . METHOD_6 ( 0 ) ; VAR_1 . METHOD_7 ( TYPE_2 . METHOD_8 ( ) . toString ( ) ) ; return VAR_1 ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( 1 ) ; VAR_1 . METHOD_4 ( STRING_2 ) ; VAR_1 . METHOD_5 ( STRING_2 ) ; VAR_1 . METHOD_6 ( 0 ) ; VAR_1 . METHOD_7 ( TYPE_2 . METHOD_8 ( ) . toString ( ) ) ; return VAR_1 ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( VAR_3 , VAR_1 . METHOD_2 ( ) ) ; TYPE_4 VAR_4 = new TYPE_4 ( VAR_2 , VAR_5 ) ; VAR_4 . METHOD_3 ( ( ( TYPE_5 . METHOD_4 ( ) . METHOD_5 ( ) ) + ( VAR_6 ) ) ) ; return VAR_4 . METHOD_6 ( ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( VAR_3 , VAR_1 . METHOD_2 ( ) ) ; TYPE_4 VAR_4 = new TYPE_4 ( VAR_2 , VAR_5 ) ; VAR_4 . METHOD_3 ( ( ( TYPE_5 . METHOD_4 ( ) . METHOD_5 ( ) ) + ( VAR_6 ) ) ) ; return new TYPE_1 ( VAR_2 . toString ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { int label = METHOD_2 ( ) ; int end = METHOD_2 ( ) ; this . METHOD_3 ( ) ; METHOD_4 ( label ) ; METHOD_5 ( VAR_2 ) ; VAR_3 . METHOD_6 ( this ) ; METHOD_5 ( VAR_4 , end ) ; METHOD_7 ( VAR_5 , label ) ; this . METHOD_8 ( VAR_1 ) ; METHOD_5 ( VAR_6 ) ; METHOD_5 ( VAR_7 ) ; METHOD_4 ( end ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { int label = METHOD_2 ( ) ; int end = METHOD_2 ( ) ; this . METHOD_3 ( ) ; METHOD_4 ( label ) ; METHOD_5 ( VAR_2 ) ; VAR_3 . METHOD_6 ( this ) ; METHOD_7 ( VAR_4 , end ) ; METHOD_7 ( VAR_5 , label ) ; this . METHOD_8 ( VAR_1 ) ; METHOD_5 ( VAR_6 ) ; METHOD_5 ( VAR_7 ) ; METHOD_4 ( end ) ; }\n"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "* @see\n* @see NormalizableKey\n \t */\n\tpublic void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "fixed": "* @see\n* @see NormalizableKey\n \t */\n\tpublic abstract void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "boolean METHOD_1 ( TYPE_1 . node VAR_1 , TYPE_1 . node VAR_2 ) { TYPE_1 . node p = VAR_3 ; TYPE_1 . node VAR_4 = VAR_5 ; while ( ( p != null ) && ( VAR_4 != null ) ) { if ( ! ( ( ( VAR_6 ) == ( VAR_7 ) ) && ( VAR_8 . equals ( VAR_4 . var ) ) ) ) return false ; p = VAR_9 ; VAR_4 = VAR_10 ; } if ( p == VAR_4 ) return true ; else return false ; }\n", "fixed": "boolean METHOD_1 ( final TYPE_1 . node VAR_1 , final TYPE_1 . node VAR_2 ) { TYPE_1 . node p = VAR_3 ; TYPE_1 . node VAR_4 = VAR_5 ; while ( ( p != null ) && ( VAR_4 != null ) ) { if ( ! ( ( ( VAR_6 ) == ( VAR_7 ) ) && ( VAR_8 . equals ( VAR_4 . var ) ) ) ) { return false ; } p = VAR_9 ; VAR_4 = VAR_10 ; } return p == VAR_4 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) { int status = response . METHOD_2 ( ) ; if ( status == ( VAR_2 ) ) { METHOD_3 ( ) ; METHOD_4 ( VAR_3 ) ; VAR_4 = true ; VAR_5 = false ; METHOD_5 ( VAR_6 ) ; } METHOD_6 ( false ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) { int status = response . METHOD_2 ( ) ; if ( status == ( VAR_2 ) ) { METHOD_3 ( ) ; METHOD_4 ( VAR_3 ) ; VAR_4 = true ; VAR_5 = true ; METHOD_5 ( VAR_6 ) ; } METHOD_6 ( false ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { java.util.Date VAR_1 = new TYPE_1 ( STRING_1 ) . METHOD_2 ( STRING_2 ) ; java.util.List < java.util.ArrayList < java.lang.String > > VAR_2 = VAR_3 . METHOD_3 ( VAR_1 , VAR_4 , VAR_5 , STRING_3 ) ; TYPE_2 . assertTrue ( ( ( VAR_2 . size ( ) ) > INT_1 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { java.util.Date VAR_1 = new TYPE_1 ( STRING_1 ) . METHOD_2 ( STRING_2 ) ; java.util.List < java.util.ArrayList < java.lang.String > > VAR_2 = VAR_3 . METHOD_3 ( VAR_1 , VAR_4 , VAR_5 , STRING_3 , true ) ; TYPE_2 . assertTrue ( ( ( VAR_2 . size ( ) ) > INT_1 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( new java.io.File ( STRING_1 ) ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; int VAR_4 = VAR_2 . METHOD_4 ( null ) ; if ( VAR_4 == ( VAR_5 ) ) { java.io.File VAR_6 = VAR_2 . METHOD_5 ( ) ; VAR_7 = VAR_6 . METHOD_6 ( ) ; VAR_7 = VAR_8 . replaceAll ( STRING_2 , STRING_3 ) ; VAR_7 = ( VAR_8 ) + STRING_2 ; if ( ( VAR_7 ) != null ) { VAR_9 . METHOD_7 ( VAR_7 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( new java.io.File ( STRING_1 ) ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; int VAR_4 = VAR_2 . METHOD_4 ( null ) ; if ( VAR_4 == ( VAR_5 ) ) { java.io.File VAR_6 = VAR_2 . METHOD_5 ( ) ; VAR_7 = VAR_6 . METHOD_6 ( ) ; if ( ( VAR_7 ) != null ) { VAR_9 . METHOD_7 ( VAR_7 ) ; } } }\n"}
{"problem": "private double METHOD_1 ( TYPE_1 VAR_1 ) { double VAR_2 = 0 ; for ( TYPE_2 VAR_3 : VAR_1 ) { int VAR_4 = 0 ; for ( int i = 0 ; i < ( VAR_3 . METHOD_2 ( ) ) ; ++ i ) { if ( ( VAR_3 . METHOD_3 ( 0 ) ) == ( VAR_5 ) ) { ++ VAR_4 ; } } VAR_2 += java.lang.Math.pow ( INT_1 , VAR_4 ) ; } return VAR_2 ; }\n", "fixed": "private static double METHOD_1 ( TYPE_1 VAR_1 ) { double VAR_2 = 0 ; for ( TYPE_2 VAR_3 : VAR_1 ) { int VAR_4 = 0 ; for ( int i = 0 ; i < ( VAR_3 . METHOD_2 ( ) ) ; ++ i ) { if ( ( VAR_3 . METHOD_3 ( i ) ) == ( VAR_5 ) ) { ++ VAR_4 ; } } VAR_2 += java.lang.Math.pow ( INT_1 , VAR_4 ) ; } return VAR_2 ; }\n"}
{"problem": "public static void METHOD_1 ( java.net.URL VAR_1 , java.io.File VAR_2 ) throws java.io.IOException { TYPE_1 VAR_3 = VAR_1 . METHOD_2 ( ) ; java.io.InputStream VAR_4 = new TYPE_2 ( VAR_1 . METHOD_3 ( ) , INT_1 ) ; java.io.FileOutputStream VAR_5 = new java.io.FileOutputStream ( VAR_2 ) ; byte [ ] buffer = new byte [ INT_2 ] ; int VAR_6 ; while ( ( VAR_6 = VAR_4 . METHOD_4 ( buffer ) ) != ( - 1 ) ) { VAR_5 . METHOD_5 ( buffer , 0 , VAR_6 ) ; } VAR_5 . METHOD_6 ( ) ; }\n", "fixed": "public static void METHOD_1 ( java.net.URL VAR_1 , java.io.File VAR_2 ) throws java.io.IOException { TYPE_1 VAR_3 = VAR_1 . METHOD_2 ( ) ; java.io.InputStream VAR_4 = new TYPE_2 ( VAR_1 . METHOD_3 ( ) , INT_2 ) ; java.io.FileOutputStream VAR_5 = new java.io.FileOutputStream ( VAR_2 ) ; byte [ ] buffer = new byte [ INT_2 ] ; int VAR_6 ; while ( ( VAR_6 = VAR_4 . METHOD_4 ( buffer ) ) != ( - 1 ) ) { VAR_5 . METHOD_5 ( buffer , 0 , VAR_6 ) ; } VAR_5 . METHOD_6 ( ) ; }\n"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n\tpublic String getGlobalProperty(String propertyName) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n\tpublic String getGlobalProperty(String propertyName);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Iterator < TYPE_3 > VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; while ( VAR_2 . METHOD_5 ( ) ) { TYPE_3 VAR_3 = VAR_2 . METHOD_6 ( ) ; java.lang.String VAR_4 = VAR_3 . METHOD_7 ( ) . substring ( INT_1 ) ; VAR_5 . add ( new TYPE_4 ( VAR_3 ) . METHOD_8 ( VAR_4 ) . METHOD_9 ( VAR_1 . METHOD_10 ( ) , VAR_4 ) ) ; } return this ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Iterator < TYPE_3 > VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; while ( VAR_2 . METHOD_5 ( ) ) { TYPE_3 VAR_3 = VAR_2 . METHOD_6 ( ) ; VAR_5 . add ( new TYPE_4 ( VAR_3 ) . METHOD_8 ( VAR_3 . METHOD_7 ( ) . substring ( INT_1 ) ) ) ; } return this ; }\n"}
{"problem": "public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 . METHOD_2 ( ) ) { VAR_1 = METHOD_3 ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_4 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; VAR_5 . put ( VAR_1 , VAR_3 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 . METHOD_2 ( ) ) { TYPE_2 VAR_3 = VAR_4 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; VAR_1 = METHOD_3 ( VAR_1 ) ; VAR_3 = METHOD_3 ( VAR_3 ) ; VAR_5 . put ( VAR_1 , VAR_3 ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 VAR_4 = VAR_5 . METHOD_2 ( VAR_2 ) ; if ( VAR_4 != null ) { VAR_3 . METHOD_3 ( STRING_1 ) ; return TYPE_5 . METHOD_4 ( STRING_2 ) ; } else { VAR_3 . error ( STRING_3 ) ; return TYPE_5 . METHOD_4 ( STRING_2 ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 VAR_4 = VAR_5 . METHOD_2 ( VAR_2 ) ; if ( VAR_4 != null ) { VAR_3 . METHOD_3 ( STRING_1 ) ; return TYPE_5 . METHOD_4 ( STRING_2 ) ; } else { VAR_3 . error ( STRING_3 ) ; return TYPE_5 . METHOD_4 ( STRING_2 ) ; } }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; boolean VAR_2 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) , VAR_3 ) ; android.content.Intent VAR_4 = new android.content.Intent ( METHOD_3 ( ) , VAR_5 class ) ; VAR_4 . METHOD_4 ( VAR_3 , VAR_2 ) ; VAR_4 . METHOD_5 ( VAR_6 ) ; if ( VAR_2 ) { METHOD_6 ( VAR_4 ) ; METHOD_7 ( ) ; } else { android.content.Intent intent = new android.content.Intent ( this , VAR_7 class ) ; METHOD_6 ( intent ) ; METHOD_7 ( ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; boolean VAR_2 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) , VAR_3 ) ; android.content.Intent VAR_4 = new android.content.Intent ( METHOD_3 ( ) , VAR_5 class ) ; VAR_4 . METHOD_4 ( VAR_3 , VAR_2 ) ; VAR_4 . METHOD_5 ( VAR_6 ) ; if ( VAR_2 ) { METHOD_6 ( VAR_4 ) ; } else { android.content.Intent intent = new android.content.Intent ( this , VAR_7 class ) ; METHOD_6 ( intent ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 ) ) { if ( VAR_1 == null ) throw new TYPE_2 ( STRING_1 ) ; for ( int i = 0 ; i < ( this . VAR_1 . size ( ) ) ; i ++ ) { if ( ( this . VAR_1 . get ( i ) . METHOD_2 ( ) ) == ( VAR_1 . METHOD_2 ( ) ) ) throw new TYPE_2 ( STRING_2 ) ; this . VAR_1 . add ( VAR_1 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 ) ) { if ( VAR_1 == null ) throw new TYPE_2 ( STRING_1 ) ; for ( int i = 0 ; i < ( this . VAR_1 . size ( ) ) ; i ++ ) { if ( ( this . VAR_1 . get ( i ) . METHOD_2 ( ) ) == ( VAR_1 . METHOD_2 ( ) ) ) throw new TYPE_2 ( STRING_2 ) ; } this . VAR_1 . add ( VAR_1 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 state , int VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( state , VAR_1 ) ; java.util.HashSet < TYPE_2 > set = VAR_3 . get ( state . METHOD_2 ( ) ) ; if ( set == null ) { set = new java.util.HashSet < TYPE_2 > ( ) ; VAR_3 . put ( state . METHOD_2 ( ) , set ) ; } if ( set . contains ( VAR_2 ) ) set . remove ( VAR_2 ) ; set . add ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 state , int VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( state , VAR_1 ) ; java.util.HashSet < TYPE_2 > set = VAR_3 . get ( state . METHOD_2 ( ) ) ; if ( set == null ) { set = new java.util.HashSet < TYPE_2 > ( ) ; VAR_3 . put ( state . METHOD_2 ( ) , set ) ; } set . add ( VAR_2 ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 type ) throws java.io.IOException , TYPE_2 { java.lang.System.out.println ( ( ( ( STRING_1 + ( token . type ) ) + STRING_2 ) + ( VAR_1 ) ) ) ; if ( ( token . type ) == type ) token = VAR_2 . METHOD_2 ( ) ; else METHOD_3 ( ( ( ( ( STRING_3 + type ) + STRING_4 ) + ( token . type ) ) + STRING_5 ) ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 type ) throws java.io.IOException , TYPE_2 { if ( ( token . type ) == type ) { token = VAR_2 . METHOD_2 ( ) ; } else METHOD_3 ( ( ( ( ( STRING_3 + type ) + STRING_4 ) + ( token . type ) ) + STRING_5 ) ) ; }\n"}
{"problem": "private boolean METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { java.lang.String type = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( STRING_1 . equals ( type ) ) { return true ; } } return false ; }\n", "fixed": "private boolean METHOD_1 ( final TYPE_1 VAR_1 ) { for ( final TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { final java.lang.String type = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( STRING_1 . equals ( type ) ) { return true ; } } return false ; }\n"}
{"problem": "public static < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_2 > METHOD_1 ( TYPE_4 < ? extends TYPE_4 < ? extends TYPE_1 > > VAR_1 , final TYPE_5 < ? super java.lang.Object [ ] , ? extends TYPE_2 > VAR_2 ) { TYPE_6 . METHOD_2 ( VAR_2 , STRING_1 ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 < TYPE_1 , TYPE_2 > METHOD_6 ( VAR_2 ) ) ; }\n", "fixed": "public static < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_2 > METHOD_1 ( TYPE_4 < ? extends TYPE_4 < ? extends TYPE_1 > > VAR_1 , final TYPE_5 < ? super java.lang.Object [ ] , ? extends TYPE_2 > VAR_2 ) { TYPE_6 . METHOD_2 ( VAR_2 , STRING_1 ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) . METHOD_5 ( ( ( TYPE_5 ) ( VAR_3 < TYPE_1 , TYPE_2 > METHOD_6 ( VAR_2 ) ) ) ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"problem": "public int METHOD_1 ( int VAR_1 ) { if ( VAR_1 < 0 ) { java.lang.System.err.println ( ( STRING_1 + VAR_1 ) ) ; VAR_1 = 0 ; } if ( ( ( VAR_2 ) + VAR_1 ) <= ( VAR_3 ) ) { VAR_2 += VAR_1 ; return 0 ; } else { VAR_2 = VAR_3 ; return - 1 ; } }\n", "fixed": "public int METHOD_1 ( int VAR_1 ) { if ( VAR_1 < 0 ) { java.lang.System.err.println ( ( STRING_1 + VAR_1 ) ) ; VAR_1 = 0 ; } if ( ( ( VAR_2 ) + VAR_1 ) < ( VAR_2 ) ) { VAR_2 = VAR_3 ; return - 1 ; } else if ( ( ( VAR_2 ) + VAR_1 ) <= ( VAR_3 ) ) { VAR_2 += VAR_1 ; return 0 ; } else { VAR_2 = VAR_3 ; return - 1 ; } }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) VAR_2 = ( ( VAR_2 ) + 1 ) % ( VAR_3 . length ) ; VAR_1 = ( ( VAR_1 ) + 1 ) % ( ( VAR_2 ) == ( VAR_4 ) ? VAR_5 : VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) VAR_2 = ( ( VAR_2 ) + 1 ) % ( VAR_3 . length ) ; if ( ( VAR_4 ) == ( - 1 ) ) VAR_1 = ( ( VAR_1 ) + 1 ) % ( VAR_6 ) ; else VAR_1 = ( ( VAR_1 ) + 1 ) % ( ( VAR_2 ) == ( VAR_4 ) ? VAR_5 : VAR_6 ) ; }\n"}
{"problem": "public java.util.Collection < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Collection < TYPE_1 > VAR_2 = new java.util.HashSet ( ) ; TYPE_3 VAR_3 = VAR_4 . METHOD_2 ( STRING_1 , VAR_5 class ) ; VAR_3 . METHOD_3 ( 1 , VAR_1 . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ; VAR_2 . METHOD_5 ( METHOD_7 ( VAR_1 ) ) ; VAR_2 . METHOD_5 ( METHOD_8 ( ) ) ; return VAR_2 ; }\n", "fixed": "public java.util.Collection < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Collection < TYPE_1 > VAR_2 = new java.util.ArrayList ( ) ; TYPE_3 VAR_3 = VAR_4 . METHOD_2 ( STRING_1 , VAR_5 class ) ; VAR_3 . METHOD_3 ( 1 , VAR_1 . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ; VAR_2 . METHOD_5 ( METHOD_7 ( VAR_1 ) ) ; VAR_2 . METHOD_5 ( METHOD_8 ( ) ) ; return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( STRING_1 ) ) ) ; VAR_2 . add ( VAR_1 ) ; TYPE_3 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) . METHOD_5 ( FLOAT_1 ) ; TYPE_4 . assertEquals ( VAR_1 . METHOD_6 ( STRING_2 , null ) , VAR_4 . METHOD_4 ( ( FLOAT_2 + FLOAT_3 ) ) , 0.0 ) ; TYPE_4 . assertEquals ( 0.0 , VAR_4 . METHOD_4 ( ( FLOAT_2 - FLOAT_3 ) ) , 0.0 ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( STRING_1 ) ) ) ; VAR_2 . add ( VAR_1 ) ; METHOD_3 ( VAR_3 . METHOD_4 ( ) ) . METHOD_5 ( FLOAT_1 ) ; TYPE_4 . assertEquals ( VAR_1 . METHOD_6 ( STRING_2 , null ) , VAR_4 . METHOD_4 ( ( FLOAT_2 + FLOAT_3 ) ) , 0.0 ) ; TYPE_4 . assertEquals ( 0.0 , VAR_4 . METHOD_4 ( ( FLOAT_2 - FLOAT_3 ) ) , 0.0 ) ; }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( TYPE_2 element , TYPE_3 parameters , TYPE_4 context ) { TYPE_5 VAR_1 = element . METHOD_2 ( ) ; TYPE_6 VAR_2 = VAR_1 . METHOD_3 ( ) ; java.lang.String value = VAR_1 . getValue ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_4 , value ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; return VAR_3 ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( TYPE_2 element , TYPE_3 parameters , TYPE_4 context ) { TYPE_5 VAR_1 = element . METHOD_2 ( ) ; TYPE_6 VAR_2 = VAR_1 . METHOD_3 ( ) ; java.lang.String value = VAR_1 . getValue ( ) ; return new TYPE_1 ( VAR_4 , VAR_2 , value ) ; }\n"}
{"problem": "private int METHOD_1 ( int VAR_1 ) { java.util.Random VAR_2 = new java.util.Random ( ) ; double VAR_3 = FLOAT_1 + ( ( FLOAT_2 - FLOAT_1 ) * ( VAR_2 . METHOD_2 ( ) ) ) ; int VAR_4 = ( ( int ) ( VAR_3 * VAR_1 ) ) ; if ( VAR_4 < 1 ) { return 1 ; } TYPE_1 . METHOD_3 ( ) . info ( ( ( ( ( ( STRING_1 + VAR_4 ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_3 ) ) ; return VAR_4 ; }\n", "fixed": "private int METHOD_1 ( int VAR_1 ) { java.util.Random VAR_2 = new java.util.Random ( ) ; double VAR_3 = FLOAT_1 + ( ( FLOAT_2 - FLOAT_1 ) * ( VAR_2 . METHOD_2 ( ) ) ) ; int VAR_4 = ( ( int ) ( VAR_3 * VAR_1 ) ) + VAR_1 ; if ( VAR_4 < 1 ) { return 1 ; } return VAR_4 ; }\n"}
{"problem": "private java.lang.String METHOD_1 ( java.util.Date VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 ) ; java.util.Date date = null ; try { date = ( ( java.util.Date ) ( VAR_2 . METHOD_2 ( VAR_1 . toString ( ) . substring ( 0 , INT_1 ) ) ) ) ; } catch ( TYPE_2 VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } TYPE_1 TYPE_3 = new TYPE_1 ( STRING_2 ) ; return TYPE_3 . format ( date ) ; }\n", "fixed": "private java.lang.String METHOD_1 ( java.util.Date VAR_1 ) { if ( VAR_1 == null ) { return null ; } TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 ) ; java.util.Date date = null ; try { date = ( ( java.util.Date ) ( VAR_2 . METHOD_2 ( VAR_1 . toString ( ) . substring ( 0 , INT_1 ) ) ) ) ; } catch ( TYPE_2 VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } TYPE_1 TYPE_3 = new TYPE_1 ( STRING_2 ) ; return TYPE_3 . format ( date ) ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( add . getText ( ) . toString ( ) ) ; METHOD_3 ( ) . METHOD_4 ( ) . replace ( VAR_2 , TYPE_1 . METHOD_5 ( VAR_3 ) ) . METHOD_6 ( null ) . commit ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( delete . getText ( ) . toString ( ) ) ; METHOD_3 ( ) . METHOD_4 ( ) . replace ( VAR_2 , TYPE_1 . METHOD_5 ( VAR_3 ) ) . METHOD_6 ( null ) . commit ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "cd70b8db19db4a22136c8411fd0b72252b2f975a", "projectName": "AsyncHttpClient.async-http-client", "bugType": "More Specific If", "problem": "     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "fixed": "     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "sourceBeforeFix": "contentType != null", "sourceAfterFix": "contentType != null && charset == null"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 15809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n }", "fixed": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 10809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n }", "sourceBeforeFix": "id=15801", "sourceAfterFix": "id=10801"}
{"fixCommitSHA1": "14eade7f6e21e560a08de348504584cba5e94c94", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     public static Archive<?> deployment1() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(), \"web.xml\");\n         war.addAsWebInfResource(EmptyAsset.INSTANCE, \"force-hashcode-change.txt\");\n         System.out.println(war.toString(true));\n         return war;", "fixed": "     public static Archive<?> deployment1() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.setWebXML(ClusteredWebTestCase.class.getPackage(), \"web.xml\");\n         war.addAsWebInfResource(EmptyAsset.INSTANCE, \"force-hashcode-change.txt\");\n         System.out.println(war.toString(true));\n         return war;", "sourceBeforeFix": "war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),\"web.xml\")", "sourceAfterFix": "war.setWebXML(ClusteredWebTestCase.class.getPackage(),\"web.xml\")"}
{"problem": "public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . put ( VAR_2 , this . getId ( ) ) ; VAR_1 . put ( VAR_3 , this . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_4 , this . METHOD_3 ( ) ) ; return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . put ( VAR_2 , this . getId ( ) ) ; if ( ( this . METHOD_2 ( ) ) != null ) VAR_1 . put ( VAR_3 , this . METHOD_2 ( ) ) ; if ( ( this . METHOD_3 ( ) ) != null ) VAR_1 . put ( VAR_4 , this . METHOD_3 ( ) ) ; return VAR_1 ; }\n"}
{"problem": "public java.lang.String url ( ) { java.lang.StringBuffer VAR_1 = new java.lang.StringBuffer ( ) ; VAR_1 . append ( ( ( java.lang.String ) ( VAR_2 . get ( VAR_3 ) ) ) ) ; java.lang.Object value = VAR_2 . get ( VAR_4 ) ; if ( value != null ) { VAR_1 . append ( STRING_1 ) ; VAR_1 . append ( ( ( java.lang.String ) ( value ) ) ) ; } return VAR_1 . toString ( ) ; }\n", "fixed": "public java.lang.String url ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; VAR_1 . append ( ( ( java.lang.String ) ( VAR_2 . get ( VAR_3 ) ) ) ) ; java.lang.Object value = VAR_2 . get ( VAR_4 ) ; if ( value != null ) { VAR_1 . append ( STRING_1 ) ; VAR_1 . append ( ( ( java.lang.String ) ( value ) ) ) ; } return VAR_1 . toString ( ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; while ( ! ( VAR_1 . METHOD_5 ( ) ) ) { TYPE_1 VAR_2 = VAR_1 . METHOD_4 ( ) ; METHOD_6 ( VAR_2 ) ; TYPE_1 VAR_3 = VAR_1 . METHOD_4 ( ) ; if ( ! ( VAR_2 . equals ( VAR_3 ) ) ) { METHOD_3 ( VAR_3 ) ; } } }\n", "fixed": "private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; while ( ! ( VAR_1 . METHOD_5 ( ) ) ) { TYPE_1 VAR_2 = VAR_1 . METHOD_4 ( ) ; METHOD_6 ( VAR_2 ) ; TYPE_1 VAR_3 = VAR_1 . METHOD_4 ( ) ; if ( ( ! ( VAR_2 . equals ( VAR_3 ) ) ) && ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) { METHOD_3 ( VAR_3 ) ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 value ) throws java.lang.Exception { setValue ( value ) ; boolean VAR_1 = ( buffer . METHOD_2 ( ) ) <= ( size ) ; if ( VAR_1 ) { VAR_2 . METHOD_3 ( this ) ; return TYPE_1 . METHOD_4 ( ) ; } else { return TYPE_1 . METHOD_5 ( buffer ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 value ) throws java.lang.Exception { setValue ( value ) ; boolean VAR_1 = ( buffer . METHOD_2 ( ) ) <= ( size ) ; if ( VAR_1 ) { this . value = value ; VAR_2 . METHOD_3 ( this ) ; return TYPE_1 . METHOD_4 ( ) ; } else { return TYPE_1 . METHOD_5 ( buffer ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected TYPE_1 METHOD_1 ( ) { for ( TYPE_2 VAR_1 : VAR_2 ) { if ( ( VAR_1 instanceof TYPE_3 ) && ( ( VAR_1 . METHOD_2 ( ) ) != null ) ) { VAR_1 . METHOD_3 ( VAR_1 . METHOD_2 ( ) . METHOD_4 ( ) ) ; } } for ( int i = 0 ; i < ( VAR_3 . length ) ; i ++ ) { VAR_3 [ i ] = VAR_2 [ i ] . METHOD_5 ( ) . METHOD_5 ( VAR_4 ) ; } return VAR_5 ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( ) { for ( TYPE_2 VAR_1 : VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { VAR_1 . METHOD_3 ( VAR_1 . METHOD_2 ( ) . METHOD_4 ( ) ) ; } } for ( int i = 0 ; i < ( VAR_3 . length ) ; i ++ ) { VAR_3 [ i ] = VAR_2 [ i ] . METHOD_5 ( ) . METHOD_5 ( VAR_4 ) ; } return VAR_5 ; }\n"}
{"fixCommitSHA1": "bf6b65957c211cf98a7971cde9d8bded2ae67236", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "             }\n         });\n        final ServiceActivatorContext serviceActivatorContext = new ServiceActivatorContextImpl(batchBuilder);\n         activateManagementCommunication(serviceActivatorContext);", "fixed": "             }\n         });\n        final ServiceActivatorContext serviceActivatorContext = new ServiceActivatorContextImpl(batchBuilder, serviceContainer);\n         activateManagementCommunication(serviceActivatorContext);", "sourceBeforeFix": "new ServiceActivatorContextImpl(batchBuilder)", "sourceAfterFix": "new ServiceActivatorContextImpl(batchBuilder,serviceContainer)"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; try { VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_2 . remove ( METHOD_5 ( VAR_1 ) ) ; VAR_2 . METHOD_3 ( ) . commit ( ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( int id ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; try { VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_2 . remove ( METHOD_5 ( id ) ) ; VAR_2 . METHOD_3 ( ) . commit ( ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) { public void METHOD_2 ( TYPE_3 VAR_3 ) { TYPE_4 . METHOD_3 ( ) ; METHOD_4 ( ) . METHOD_5 ( ) ; try { TYPE_5 . METHOD_6 ( ) ; } catch ( java.io.IOException VAR_4 ) { TYPE_6 . METHOD_7 ( null , ( STRING_1 + STRING_2 ) , STRING_3 , VAR_5 ) ; } VAR_1 . remove ( VAR_6 ) ; } } ; return VAR_2 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { return new TYPE_1 ( ) { public void METHOD_2 ( TYPE_3 VAR_3 ) { TYPE_4 . METHOD_3 ( ) ; METHOD_4 ( ) . METHOD_5 ( ) ; try { TYPE_5 . METHOD_6 ( ) ; } catch ( java.io.IOException VAR_4 ) { TYPE_6 . METHOD_7 ( null , ( STRING_1 + STRING_2 ) , STRING_3 , VAR_5 ) ; } VAR_1 . remove ( VAR_6 ) ; } } ; }\n"}
{"problem": "static java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.util.Map < java.lang.String , java.lang.String > VAR_3 = VAR_4 . get ( VAR_1 ) ; if ( VAR_3 == null ) { VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; } java.lang.String VAR_5 = VAR_3 . get ( VAR_2 ) ; if ( VAR_5 == null ) { VAR_5 = ( VAR_2 + CHAR_1 ) + ( VAR_3 . get ( STRING_1 ) ) ; } return VAR_5 ; }\n", "fixed": "static java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.util.Map < java.lang.String , java.lang.String > VAR_3 = VAR_4 . get ( VAR_1 ) ; if ( VAR_3 == null ) { VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return null ; } } java.lang.String VAR_5 = VAR_3 . get ( VAR_2 ) ; if ( VAR_5 == null ) { VAR_5 = ( VAR_2 + CHAR_1 ) + ( VAR_3 . get ( STRING_1 ) ) ; } return VAR_5 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { android.content.Intent intent = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; if ( ( VAR_3 ) >= ( VAR_4 ) ) { TYPE_2 VAR_5 = TYPE_2 . METHOD_3 ( this ) ; TYPE_3 VAR_6 = new TYPE_3 ( ) ; VAR_6 . METHOD_4 ( INT_1 ) ; METHOD_5 ( ) . METHOD_6 ( VAR_6 ) ; METHOD_7 ( intent , VAR_5 . METHOD_8 ( ) ) ; } else METHOD_7 ( intent ) ; METHOD_9 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { if ( ( VAR_3 ) >= ( VAR_4 ) ) { TYPE_2 VAR_5 = TYPE_2 . METHOD_3 ( this ) ; TYPE_3 VAR_6 = new TYPE_3 ( ) ; VAR_6 . METHOD_4 ( INT_1 ) ; METHOD_5 ( ) . METHOD_6 ( VAR_6 ) ; } METHOD_9 ( ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"problem": "public void METHOD_1 ( ) { VAR_1 = true ; TYPE_1 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( false ) ; VAR_2 . METHOD_3 ( this , 1 ) ; VAR_2 . METHOD_4 ( VAR_3 , VAR_4 ) ; VAR_2 . show ( METHOD_5 ( ) , STRING_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { VAR_1 = true ; TYPE_1 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( false ) ; VAR_2 . METHOD_3 ( this , 1 ) ; VAR_2 . METHOD_4 ( VAR_3 , VAR_4 ) ; VAR_2 . show ( METHOD_5 ( ) , STRING_1 ) ; } }\n"}
{"fixCommitSHA1": "66c325e004dc7d1ffb6b97e8af093a8455756d53", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "fixed": " \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"problem": "public java.util.Map < TYPE_1 , java.lang.Double > METHOD_1 ( int id ) { VAR_1 . METHOD_2 ( id ) ; java.util.Map < TYPE_1 , java.lang.Double > VAR_2 = VAR_1 . METHOD_1 ( ) ; return VAR_2 == null ? null : new java.util.HashMap ( VAR_1 . METHOD_1 ( ) ) ; }\n", "fixed": "public java.util.Map < TYPE_1 , java.lang.Double > METHOD_1 ( int id ) { if ( ! ( VAR_1 . METHOD_2 ( id ) ) ) return null ; java.util.Map < TYPE_1 , java.lang.Double > VAR_2 = VAR_1 . METHOD_1 ( ) ; return VAR_2 == null ? null : new java.util.HashMap ( VAR_1 . METHOD_1 ( ) ) ; }\n"}
{"problem": "public static void METHOD_1 ( java.util.ArrayList < TYPE_1 > list ) { while ( ! ( list . isEmpty ( ) ) ) { java.lang.System.out.println ( ( ( ( list . get ( 0 ) . METHOD_2 ( ) ) + STRING_1 ) + ( list . get ( 0 ) . METHOD_3 ( ) ) ) ) ; list . remove ( 0 ) ; } }\n", "fixed": "public static void METHOD_1 ( java.util.ArrayList < TYPE_1 > list ) { int i = 0 ; while ( i != ( list . size ( ) ) ) { java.lang.System.out.println ( ( ( ( list . get ( i ) . METHOD_2 ( ) ) + STRING_1 ) + ( list . get ( i ) . METHOD_3 ( ) ) ) ) ; i ++ ; } }\n"}
{"problem": "public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 , TYPE_3 VAR_2 ) { METHOD_2 ( VAR_2 ) ; TYPE_4 event = new TYPE_4 ( new java.util.Date ( ) , VAR_2 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) , VAR_4 . METHOD_4 ( TYPE_5 . METHOD_6 ( VAR_1 ) ) ) ; VAR_5 . METHOD_7 ( event ) ; return new TYPE_1 < TYPE_2 > ( new TYPE_2 ( event ) , VAR_6 ) ; }\n", "fixed": "public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 , TYPE_3 VAR_2 ) { METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_4 event = new TYPE_4 ( new java.util.Date ( ) , VAR_2 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) , VAR_4 . METHOD_4 ( TYPE_5 . METHOD_6 ( VAR_1 ) ) ) ; VAR_5 . METHOD_7 ( event ) ; return new TYPE_1 < TYPE_2 > ( new TYPE_2 ( event ) , VAR_6 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public double METHOD_1 ( int i , int j ) { double VAR_1 = VAR_2 ; if ( i == j ) VAR_1 = 0.0 ; if ( ( ( i != j ) && ( i == 0 ) ) || ( j == 0 ) ) VAR_1 = VAR_3 ; return VAR_1 ; }\n", "fixed": "public double METHOD_1 ( int i , int j ) { double VAR_1 = VAR_2 ; if ( i == j ) VAR_1 = 0.0 ; if ( ( i != j ) && ( ( i == 0 ) || ( j == 0 ) ) ) VAR_1 = VAR_3 ; return VAR_1 ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 , TYPE_2 VAR_3 ) { if ( TYPE_3 . equals ( VAR_1 ) ) { VAR_3 . METHOD_2 ( VAR_4 . METHOD_3 ( VAR_2 ) , VAR_5 ) ; VAR_3 . METHOD_2 ( VAR_6 . METHOD_4 ( VAR_2 ) , VAR_7 ) ; VAR_3 . METHOD_2 ( VAR_6 . METHOD_5 ( VAR_2 ) , VAR_8 ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 , TYPE_2 VAR_3 ) { if ( TYPE_3 . equals ( VAR_1 ) ) { VAR_3 . METHOD_2 ( VAR_6 . METHOD_4 ( VAR_2 ) , VAR_7 ) ; VAR_3 . METHOD_2 ( VAR_6 . METHOD_5 ( VAR_2 ) , VAR_8 ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 . METHOD_2 ( ) ) { TYPE_2 . METHOD_3 ( STRING_1 , java.lang.String . METHOD_4 ( VAR_2 . getValue ( ) ) ) ; TYPE_3 VAR_3 = VAR_2 . getValue ( VAR_4 class ) ; TYPE_2 . METHOD_3 ( STRING_1 , ( STRING_2 + ( java.lang.String . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) ) ) ; VAR_5 . METHOD_6 ( VAR_3 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 . METHOD_2 ( ) ) { TYPE_2 . METHOD_3 ( STRING_1 , java.lang.String . METHOD_4 ( VAR_2 . getValue ( ) ) ) ; TYPE_3 VAR_3 = VAR_2 . getValue ( VAR_4 class ) ; TYPE_2 . METHOD_3 ( STRING_1 , ( STRING_2 + ( java.lang.String . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) ) ) ; listener . METHOD_6 ( VAR_3 ) ; } }\n"}
{"problem": "private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String output = STRING_1 ; output += VAR_1 . replace ( STRING_2 , STRING_3 ) . replace ( STRING_4 , STRING_5 ) . replace ( STRING_6 , STRING_7 ) . replace ( STRING_8 , STRING_9 ) . replace ( STRING_10 , STRING_11 ) . replace ( \"\\n\" , STRING_12 ) . replace ( STRING_13 , STRING_14 ) . replace ( \"\\t\" , STRING_15 ) ; return output ; }\n", "fixed": "private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String output = STRING_1 ; output += VAR_1 . replace ( STRING_4 , STRING_5 ) . replace ( STRING_2 , STRING_3 ) . replace ( STRING_6 , STRING_7 ) . replace ( STRING_8 , STRING_9 ) . replace ( STRING_10 , STRING_11 ) . replace ( \"\\n\" , STRING_12 ) . replace ( STRING_13 , STRING_14 ) . replace ( \"\\t\" , STRING_15 ) ; return output ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 element ) { java.lang.String VAR_1 = element . METHOD_2 ( STRING_1 ) ; java.lang.String fileName = TYPE_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 , STRING_2 ) ) ; java.lang.String path = METHOD_5 ( ) ; try { TYPE_3 . METHOD_6 ( VAR_1 , path , fileName ) ; } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_7 ( ) ; } return new TYPE_1 ( path , fileName ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 element ) { java.lang.String VAR_1 = element . METHOD_2 ( STRING_1 ) ; java.lang.String fileName = TYPE_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 , STRING_2 ) ) ; if ( ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) { return null ; } java.lang.String path = METHOD_5 ( ) ; try { TYPE_3 . METHOD_6 ( VAR_1 , path , fileName ) ; } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_7 ( ) ; } return new TYPE_1 ( path , fileName ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"problem": "public void METHOD_1 ( ) { java.util.Iterator < TYPE_1 > i = VAR_1 . iterator ( ) ; while ( i . METHOD_2 ( ) ) { TYPE_1 VAR_2 = i . METHOD_3 ( ) ; if ( ( VAR_2 . METHOD_4 ( ) ) && ( ! ( VAR_2 . METHOD_5 ( ) ) ) ) { i . remove ( ) ; VAR_3 . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ; TYPE_2 . METHOD_8 ( java.lang.String.format ( STRING_1 ) ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { java.util.Iterator < TYPE_1 > i = VAR_1 . iterator ( ) ; while ( i . METHOD_2 ( ) ) { TYPE_1 VAR_2 = i . METHOD_3 ( ) ; if ( ( VAR_2 . METHOD_4 ( ) ) && ( ! ( VAR_2 . METHOD_5 ( ) ) ) ) { i . remove ( ) ; VAR_3 . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ; TYPE_2 . METHOD_8 ( STRING_1 ) ; } } }\n"}
{"fixCommitSHA1": "7eb6fb3e8a263dee9fc93ce004900e665485914f", "projectName": "alibaba.canal", "bugType": "Change Numeric Literal", "problem": "                 mysqlEventParser.setMasterPosition(masterPosition);\n                 if (parameters.getPositions().size() > 1) {\n                    EntryPosition standbyPosition = JsonUtils.unmarshalFromString(parameters.getPositions().get(0),\n                         EntryPosition.class);\n                     mysqlEventParser.setStandbyPosition(standbyPosition);\n                 }", "fixed": "                 mysqlEventParser.setMasterPosition(masterPosition);\n                 if (parameters.getPositions().size() > 1) {\n                    EntryPosition standbyPosition = JsonUtils.unmarshalFromString(parameters.getPositions().get(1),\n                         EntryPosition.class);\n                     mysqlEventParser.setStandbyPosition(standbyPosition);\n                 }", "sourceBeforeFix": "parameters.getPositions().get(0)", "sourceAfterFix": "parameters.getPositions().get(1)"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = METHOD_3 ( ) ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_3 . METHOD_4 ( ) . add ( VAR_5 , VAR_4 ) . commit ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = METHOD_3 ( ) ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_3 . METHOD_4 ( ) . replace ( VAR_5 , VAR_4 ) . commit ( ) ; }\n"}
{"problem": "private static double METHOD_1 ( java.util.Collection < java.lang.Integer > VAR_1 , java.util.Collection < java.lang.Integer > VAR_2 , java.util.Set < java.lang.Integer > VAR_3 ) { double VAR_4 = VAR_3 . size ( ) ; double VAR_5 ; if ( ( VAR_1 . size ( ) ) > ( VAR_2 . size ( ) ) ) { VAR_5 = VAR_2 . size ( ) ; } else { VAR_5 = VAR_1 . size ( ) ; } double VAR_6 = VAR_5 - VAR_4 ; return VAR_4 / VAR_6 ; }\n", "fixed": "private static double METHOD_1 ( java.util.Collection < java.lang.Integer > VAR_1 , java.util.Collection < java.lang.Integer > VAR_2 , java.util.Collection < java.lang.Integer > VAR_3 ) { double VAR_4 = VAR_3 . size ( ) ; double VAR_5 ; if ( ( VAR_1 . size ( ) ) > ( VAR_2 . size ( ) ) ) { VAR_5 = VAR_2 . size ( ) ; } else { VAR_5 = VAR_1 . size ( ) ; } double VAR_6 = VAR_5 - VAR_4 ; return VAR_4 / VAR_6 ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 name ) throws java.lang.Exception { if ( name instanceof TYPE_3 ) return new TYPE_1 ( ( ( ( ( TYPE_3 ) ( name ) ) . METHOD_2 ( ) ) != 0 ) ) ; if ( name instanceof TYPE_1 ) return METHOD_3 ( name ) ; return name . METHOD_1 ( this ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 name ) throws java.lang.Exception { if ( name instanceof TYPE_3 ) return new TYPE_1 ( ( ( ( ( ( TYPE_3 ) ( name ) ) . METHOD_2 ( ) ) != 0 ) == ( value ) ) ) ; if ( name instanceof TYPE_1 ) return METHOD_3 ( name ) ; return name . METHOD_1 ( this ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( VAR_2 . equals ( VAR_3 . METHOD_2 ( ) ) ) ) if ( VAR_4 ) { METHOD_3 ( VAR_5 , VAR_3 , VAR_6 , VAR_7 , VAR_8 ) ; } else { METHOD_4 ( VAR_5 , VAR_3 , VAR_6 ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( VAR_2 . equals ( VAR_3 . METHOD_2 ( ) ) ) ) if ( VAR_4 ) { METHOD_3 ( VAR_5 , VAR_3 , VAR_6 ) ; } else { METHOD_4 ( VAR_5 , VAR_3 , VAR_6 ) ; } }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; if ( VAR_1 != null ) { TYPE_2 . METHOD_2 ( getContext ( ) ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( VAR_2 ) . METHOD_6 ( VAR_3 ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; if ( VAR_1 != null ) { TYPE_2 . METHOD_2 ( getActivity ( ) ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( VAR_2 ) . METHOD_6 ( VAR_3 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; this . VAR_1 = false ; this . VAR_2 . METHOD_2 ( ) ; if ( VAR_3 ) { if ( METHOD_3 ( ) ) { TYPE_1 VAR_4 = METHOD_4 ( ) ; this . METHOD_5 ( VAR_4 ) ; this . VAR_2 . METHOD_6 ( ) ; METHOD_7 ( ) ; } else { this . METHOD_8 ( ) ; } VAR_3 = false ; } }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; this . VAR_1 = false ; this . VAR_2 . METHOD_2 ( ) ; if ( METHOD_3 ( ) ) { TYPE_1 VAR_4 = METHOD_4 ( ) ; this . METHOD_5 ( VAR_4 ) ; this . VAR_2 . METHOD_6 ( ) ; METHOD_7 ( ) ; } else { this . METHOD_8 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 listener ) throws java.io.IOException , TYPE_4 { TYPE_5 VAR_3 = VAR_1 . METHOD_2 ( VAR_4 class ) ; if ( VAR_3 != null ) { for ( TYPE_6 p : VAR_3 . METHOD_3 ( ) ) { VAR_2 . put ( p . getName ( ) , java.lang.String . METHOD_4 ( p . getValue ( ) ) ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 listener ) throws java.io.IOException , TYPE_4 { TYPE_5 VAR_3 = VAR_1 . METHOD_2 ( VAR_4 class ) ; if ( VAR_3 != null ) { for ( TYPE_6 p : VAR_3 . METHOD_3 ( ) ) { VAR_2 . put ( p . getName ( ) , java.lang.String . METHOD_4 ( p . getValue ( ) ) ) ; } } super . METHOD_1 ( VAR_1 , VAR_2 , listener ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { this . METHOD_2 ( VAR_1 . METHOD_3 ( this . VAR_2 ) . METHOD_4 ( ) ) ; double VAR_3 = this . VAR_1 . METHOD_5 ( ) ; this . METHOD_6 ( ( ( int ) ( ( this . VAR_4 ) * VAR_3 ) ) , ( ( int ) ( ( this . VAR_5 . height ) * VAR_3 ) ) ) ; this . VAR_6 . METHOD_1 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { this . METHOD_2 ( VAR_1 . METHOD_3 ( this . VAR_2 ) . METHOD_4 ( ) ) ; double VAR_3 = this . VAR_1 . METHOD_5 ( ) ; this . METHOD_6 ( ( ( int ) ( ( this . VAR_4 ) * VAR_3 ) ) , ( ( int ) ( ( this . VAR_5 . height ) * VAR_3 ) ) ) ; }\n"}
{"fixCommitSHA1": "fc13cf7d7843029d807878869e3c64cace5640dd", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public Cell deepClone() {\n     return new KeyValue(this);\n   }", "fixed": "   }\n   @Override\n  public ExtendedCell deepClone() {\n     return new KeyValue(this);\n   }", "sourceBeforeFix": "@Override public Cell deepClone(){   return new KeyValue(this); } ", "sourceAfterFix": "@Override public ExtendedCell deepClone(){   return new KeyValue(this); } "}
{"problem": "public java.util.Collection < ? extends java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; final java.util.List < TYPE_2 > VAR_3 = TYPE_3 . METHOD_2 ( VAR_4 , VAR_5 class , TYPE_4 . METHOD_3 ( VAR_1 . getId ( ) . toString ( ) ) ) ; for ( TYPE_2 VAR_6 : VAR_3 ) { if ( ( VAR_6 . METHOD_4 ( ) ) != null ) { VAR_2 . add ( VAR_6 . METHOD_4 ( ) ) ; } } return VAR_2 ; }\n", "fixed": "public java.util.Collection < ? extends java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = new java.util.HashSet < java.lang.String > ( ) ; final java.util.List < TYPE_2 > VAR_3 = TYPE_3 . METHOD_2 ( VAR_4 , VAR_5 class , TYPE_4 . METHOD_3 ( VAR_1 . getId ( ) . toString ( ) ) ) ; for ( TYPE_2 VAR_6 : VAR_3 ) { if ( ( VAR_6 . METHOD_4 ( ) ) != null ) { VAR_2 . add ( VAR_6 . METHOD_4 ( ) ) ; } } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( double [ ] [ ] [ ] VAR_1 ) { for ( int i = 0 ; i < ( VAR_2 ) ; i ++ ) { for ( int VAR_3 = 0 ; VAR_3 < INT_1 ; VAR_3 ++ ) { for ( int VAR_4 = 0 ; VAR_4 < INT_1 ; VAR_4 ++ ) { VAR_1 [ i ] [ VAR_3 ] [ VAR_4 ] += ( INT_2 * ( VAR_5 [ i ] [ VAR_3 ] [ VAR_4 ] ) ) / ( VAR_6 ) ; } } } }\n", "fixed": "public void METHOD_1 ( double [ ] [ ] [ ] VAR_1 ) { for ( int i = 0 ; i <= ( VAR_2 ) ; i ++ ) { for ( int VAR_3 = 0 ; VAR_3 < INT_1 ; VAR_3 ++ ) { for ( int VAR_4 = 0 ; VAR_4 < INT_1 ; VAR_4 ++ ) { VAR_1 [ i ] [ VAR_3 ] [ VAR_4 ] += ( INT_2 * ( VAR_5 [ i ] [ VAR_3 ] [ VAR_4 ] ) ) / ( VAR_6 ) ; } } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2);\n }", "fixed": "     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 < TYPE_1 > METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_1 , VAR_2 ) , new TYPE_2 ( STRING_2 , STRING_3 , VAR_3 ) , new TYPE_2 ( STRING_4 , STRING_5 , VAR_3 ) , new TYPE_2 ( STRING_6 , STRING_7 , VAR_3 ) ) ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 < TYPE_1 > METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_1 , VAR_3 ) , new TYPE_2 ( STRING_2 , STRING_3 , VAR_3 ) , new TYPE_2 ( STRING_4 , STRING_5 , VAR_3 ) , new TYPE_2 ( STRING_6 , STRING_7 , VAR_3 ) ) ; }\n"}
{"problem": "public static int [ ] METHOD_1 ( int n ) { int [ ] VAR_1 = new int [ n ] ; for ( int i = 0 ; i < n ; ) { VAR_1 [ i ] = i ; } TYPE_1 . METHOD_2 ( VAR_1 ) ; return VAR_1 ; }\n", "fixed": "public static int [ ] METHOD_1 ( int n ) { int [ ] VAR_1 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { VAR_1 [ i ] = i ; } TYPE_1 . METHOD_2 ( VAR_1 ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"problem": "private void METHOD_1 ( int x , int VAR_1 ) { TYPE_1 < java.lang.Integer > temp ; if ( ( VAR_2 . get ( VAR_1 ) ) == null ) { temp = new TYPE_1 < java.lang.Integer > ( ) ; temp . add ( x ) ; VAR_2 . put ( VAR_1 , temp ) ; } else { VAR_2 . get ( VAR_1 ) . add ( x ) ; } }\n", "fixed": "private void METHOD_1 ( int x , int VAR_1 ) { java.util.ArrayList < java.lang.Integer > temp ; if ( ( VAR_2 . get ( VAR_1 ) ) == null ) { temp = new java.util.ArrayList < java.lang.Integer > ( ) ; temp . add ( x ) ; VAR_2 . put ( VAR_1 , temp ) ; } else { VAR_2 . get ( VAR_1 ) . add ( x ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.StringBuffer result ) { android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_1 class ) ; intent . METHOD_2 ( STRING_1 , ( ( TYPE_1 ) ( result ) ) ) ; intent . METHOD_3 ( VAR_2 ) ; intent . METHOD_3 ( VAR_3 ) ; METHOD_4 ( intent ) ; getActivity ( ) . METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.StringBuffer result ) { android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_1 class ) ; intent . METHOD_2 ( STRING_1 , ( ( TYPE_1 ) ( result ) ) ) ; METHOD_4 ( intent ) ; getActivity ( ) . METHOD_5 ( ) ; }\n"}
{"problem": "private static int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = ( TYPE_2 . METHOD_2 ( ) ) - 1 ; for ( ; VAR_2 > 0 ; VAR_2 -- ) { TYPE_2 . METHOD_3 ( VAR_2 , VAR_1 ) ; if ( ( VAR_3 ) == ( VAR_4 ) ) break ; } return VAR_2 ; }\n", "fixed": "private static int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = TYPE_2 . METHOD_2 ( ) ; while ( ( VAR_2 -- ) > 0 ) { TYPE_2 . METHOD_3 ( VAR_2 , VAR_1 ) ; if ( ( VAR_2 == 0 ) || ( ( VAR_3 ) == ( VAR_4 ) ) ) break ; } return VAR_2 ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( java.lang.String url , java.lang.String name , java.lang.String value , java.lang.String VAR_1 , java.lang.String path , long VAR_2 , long VAR_3 , long VAR_4 , boolean VAR_5 , boolean VAR_6 , int VAR_7 , int VAR_8 ) { return new TYPE_1 ( url , name , value , VAR_1 , path , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String value , java.lang.String VAR_1 , java.lang.String path , long VAR_2 , long VAR_3 , long VAR_4 , boolean VAR_5 , boolean VAR_6 , int VAR_7 , int VAR_8 ) { return new TYPE_1 ( name , value , VAR_1 , path , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; java.lang.String name = VAR_2 . getText ( ) . toString ( ) ; if ( ( VAR_4 ) == null ) { TYPE_2 VAR_5 = TYPE_2 . METHOD_3 ( METHOD_4 ( ) , STRING_1 , VAR_6 ) ; VAR_5 . show ( ) ; } VAR_7 . METHOD_5 ( VAR_8 , name , VAR_4 ) ; METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; java.lang.String name = VAR_2 . getText ( ) . toString ( ) ; if ( ( VAR_4 ) == null ) { TYPE_2 VAR_5 = TYPE_2 . METHOD_3 ( METHOD_4 ( ) , STRING_1 , VAR_6 ) ; VAR_5 . show ( ) ; return ; } VAR_7 . METHOD_5 ( VAR_8 , name , VAR_4 ) ; METHOD_6 ( ) ; }\n"}
{"fixCommitSHA1": "2ea6ea3e6dd568fe52a9410913e801714da07c13", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "             }\n             Object[] valuesArray = vals.toArray();\n             min = AttributeUtils.getDefault().getMin(column, valuesArray);\n            max = AttributeUtils.getDefault().getMin(column, valuesArray);\n         }\n         public String getName() {", "fixed": "             }\n             Object[] valuesArray = vals.toArray();\n             min = AttributeUtils.getDefault().getMin(column, valuesArray);\n            max = AttributeUtils.getDefault().getMax(column, valuesArray);\n         }\n         public String getName() {", "sourceBeforeFix": "AttributeUtils.getDefault().getMin(column,valuesArray)", "sourceAfterFix": "AttributeUtils.getDefault().getMax(column,valuesArray)"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_2 = VAR_1 . METHOD_4 ( ) ; VAR_3 = new TYPE_2 ( this , VAR_2 ) { protected void METHOD_5 ( TYPE_3 VAR_4 ) { super . METHOD_5 ( VAR_4 ) ; METHOD_6 ( ) ; } } ; }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 = VAR_1 . METHOD_4 ( ) ; VAR_3 = new TYPE_2 ( this , VAR_2 ) { protected void METHOD_5 ( TYPE_3 VAR_4 ) { super . METHOD_5 ( VAR_4 ) ; METHOD_6 ( ) ; } } ; }\n"}
{"fixCommitSHA1": "5705c43fc67cbb1ebf19515e6676e4f68f299406", "projectName": "hazelcast.hazelcast", "bugType": "Change Boolean Literal", "problem": "         AbstractCacheService service = getService();\n         response = service.createCacheConfigIfAbsent(config);\n        if (createAlsoOnOthers && response == null) {\n             NodeEngine nodeEngine = getNodeEngine();\n             Collection<MemberImpl> members = nodeEngine.getClusterService().getMemberList();\n             int remoteNodeCount = members.size() - 1;", "fixed": "         AbstractCacheService service = getService();\n         response = service.createCacheConfigIfAbsent(config);\n        if (createAlsoOnOthers) {\n             NodeEngine nodeEngine = getNodeEngine();\n             Collection<MemberImpl> members = nodeEngine.getClusterService().getMemberList();\n             int remoteNodeCount = members.size() - 1;", "sourceBeforeFix": "new CacheCreateConfigOperation(config,true)", "sourceAfterFix": "new CacheCreateConfigOperation(config,false)"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { return VAR_2 ; } else { return VAR_3 ; } } else if ( ( VAR_1 . METHOD_4 ( ) ) != null ) { if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { return VAR_4 ; } else { return VAR_5 ; } } else { return VAR_6 ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { return VAR_2 ; } else { return VAR_3 ; } } else if ( ( VAR_1 . METHOD_4 ( ) ) != null ) { if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { return VAR_5 ; } else { return VAR_4 ; } } else { return VAR_6 ; } }\n"}
{"problem": "public boolean METHOD_1 ( int a , int b , boolean VAR_1 ) { if ( ( ( VAR_1 == true ) && ( a < 0 ) ) && ( b < 0 ) ) { return true ; } else if ( ( ( a > 0 ) && ( b < 0 ) ) || ( ( b > 0 ) && ( a < 0 ) ) ) { return true ; } else { return false ; } }\n", "fixed": "public boolean METHOD_1 ( int a , int b , boolean VAR_1 ) { if ( ( VAR_1 == true ) && ( ( a < 0 ) && ( b < 0 ) ) ) { return true ; } else if ( VAR_1 == true ) { return false ; } else if ( ( ( a > 0 ) && ( b < 0 ) ) || ( ( b > 0 ) && ( a < 0 ) ) ) { return true ; } else { return false ; } }\n"}
{"problem": "private void METHOD_1 ( int count ) { VAR_1 . setText ( VAR_2 [ count ] ) ; VAR_3 . setText ( VAR_2 [ ( count + 1 ) ] ) ; VAR_4 . setText ( VAR_2 [ ( count + INT_1 ) ] ) ; VAR_5 . setText ( VAR_2 [ ( count + INT_2 ) ] ) ; java.lang.String VAR_6 = ( ( count + INT_3 ) + STRING_1 ) + ( VAR_2 . length ) ; VAR_7 . setText ( VAR_6 ) ; METHOD_2 ( ) ; }\n", "fixed": "private void METHOD_1 ( int count ) { VAR_1 . setText ( VAR_2 [ count ] ) ; VAR_3 . setText ( VAR_2 [ ( count + 1 ) ] ) ; VAR_4 . setText ( VAR_2 [ ( count + INT_1 ) ] ) ; VAR_5 . setText ( VAR_2 [ ( count + INT_2 ) ] ) ; java.lang.String VAR_6 = ( count + STRING_1 ) + ( VAR_2 . length ) ; VAR_7 . setText ( VAR_6 ) ; METHOD_2 ( ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.util.ArrayList < java.lang.String > list ) { java.lang.String string = STRING_1 ; for ( int i = 0 ; i < ( list . size ( ) ) ; i ++ ) { if ( ( i + 1 ) == ( list . size ( ) ) ) { string += ( list . get ( i ) ) + STRING_2 ; } else { string += list . get ( i ) ; } } return string ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.util.ArrayList < java.lang.String > list ) { java.lang.String string = STRING_1 ; for ( int i = 0 ; i < ( list . size ( ) ) ; i ++ ) { if ( ( i + 1 ) != ( list . size ( ) ) ) { string += ( list . get ( i ) ) + STRING_2 ; } else { string += list . get ( i ) ; } } return string ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { VAR_3 = VAR_1 ; VAR_4 = VAR_2 ; switch ( VAR_4 . METHOD_2 ( ) ) { case STRING_1 : METHOD_3 ( ) ; new TYPE_4 ( VAR_4 . METHOD_2 ( ) ) ; break ; case STRING_2 : METHOD_4 ( ) ; new TYPE_4 ( VAR_4 . METHOD_2 ( ) ) ; break ; default : METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { VAR_3 = VAR_1 ; VAR_4 = VAR_2 ; switch ( VAR_4 . METHOD_2 ( ) ) { case STRING_1 : METHOD_3 ( ) ; break ; case STRING_2 : METHOD_4 ( ) ; break ; default : METHOD_5 ( ) ; } }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL11.glGetFloat(pname,params)", "sourceAfterFix": "GL11.glGetFloatv(pname,params)"}
{"fixCommitSHA1": "b186ed3519d4627f3352aa65db3d8283d1e8beda", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 if (attach) {\n                     acquired = semaphoreProxy.tryAcquireAttach(permits, packet.timeout, TimeUnit.MILLISECONDS);\n                     if (acquired) {\n                        getClientEndpoint(packet.conn).attachDetachPermits(packet.name, permits);\n                     }\n                 } else {\n                     acquired = semaphoreProxy.tryAcquire(permits, packet.timeout, TimeUnit.MILLISECONDS);", "fixed": "                 if (attach) {\n                     acquired = semaphoreProxy.tryAcquireAttach(permits, packet.timeout, TimeUnit.MILLISECONDS);\n                     if (acquired) {\n                        getClientEndpoint(packet.conn).attachDetachPermits(semaphoreProxy.getName(), permits);\n                     }\n                 } else {\n                     acquired = semaphoreProxy.tryAcquire(permits, packet.timeout, TimeUnit.MILLISECONDS);", "sourceBeforeFix": "factory.getSemaphore(packet.name)", "sourceAfterFix": "factory.getOrCreateProxyByName(packet.name)"}
{"fixCommitSHA1": "cad7c1f1b0e23a4a1320d967b17aafcaa0119ace", "projectName": "netty.netty", "bugType": "Same Function More Args", "problem": "                 cbb.addComponent(buffer);\n                 cbb.writerIndex(cbb.writerIndex() + buffer.readableBytes());\n             } else {\n                CompositeByteBuf cbb = compositeBuffer();\n                 cbb.addComponents(byteBuf, buffer);\n                 cbb.writerIndex(byteBuf.readableBytes() + buffer.readableBytes());\n                 byteBuf = cbb;", "fixed": "                 cbb.addComponent(buffer);\n                 cbb.writerIndex(cbb.writerIndex() + buffer.readableBytes());\n             } else {\n                CompositeByteBuf cbb = compositeBuffer(Integer.MAX_VALUE);\n                 cbb.addComponents(byteBuf, buffer);\n                 cbb.writerIndex(byteBuf.readableBytes() + buffer.readableBytes());\n                 byteBuf = cbb;", "sourceBeforeFix": "wrappedBuffer(byteBuffer)", "sourceAfterFix": "wrappedBuffer(Integer.MAX_VALUE,byteBuffer)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"problem": "public static boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) return false ; if ( ( VAR_2 . get ( VAR_1 . METHOD_2 ( 0 ) ) ) == null ) { return false ; } else { if ( VAR_2 . get ( VAR_1 . METHOD_2 ( 0 ) ) . METHOD_3 ( VAR_1 ) ) { return false ; } return true ; } }\n", "fixed": "public static boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) return false ; if ( ( VAR_2 . get ( VAR_1 . METHOD_2 ( 0 ) ) ) == null ) { return false ; } else { if ( ! ( VAR_2 . get ( VAR_1 . METHOD_2 ( 0 ) ) . METHOD_3 ( VAR_1 ) ) ) { return false ; } return true ; } }\n"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( ( VAR_1 ) == null ) || ( ( VAR_2 ) == null ) ) { return ; } METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( VAR_3 . METHOD_4 ( ) . toString ( ) ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( ( VAR_1 ) == null ) || ( ( VAR_2 ) == null ) ) { return ; } VAR_1 . METHOD_3 ( VAR_3 . METHOD_4 ( ) . toString ( ) ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; }\n"}
{"fixCommitSHA1": "0e2a0eede5bf85f3c1f64e5752501eddf9ab7202", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     CONSTANT_VALUES_PAIRED_STATS = accumulator.snapshot();\n   }\n  static final List<PairedStats> ALL_PAIRED_STATS =\n       ImmutableList.of(\n           EMPTY_PAIRED_STATS,\n           ONE_VALUE_PAIRED_STATS,", "fixed": "     CONSTANT_VALUES_PAIRED_STATS = accumulator.snapshot();\n   }\n  static final ImmutableList<PairedStats> ALL_PAIRED_STATS =\n       ImmutableList.of(\n           EMPTY_PAIRED_STATS,\n           ONE_VALUE_PAIRED_STATS,", "sourceBeforeFix": "List<PairedStats>", "sourceAfterFix": "ImmutableList<PairedStats>"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; if ( ( ( ( ( int ) ( x ) ) != ( VAR_1 ) ) || ( ( ( int ) ( y ) ) != ( VAR_2 ) ) ) || ( ( VAR_3 ) != ( VAR_4 ) ) ) { VAR_1 = ( ( int ) ( x ) ) ; VAR_2 = ( ( int ) ( y ) ) ; VAR_3 = VAR_4 ; TYPE_1 . METHOD_4 ( this ) ; } ( VAR_5 ) ++ ; }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; if ( ( ( ( ( int ) ( x ) ) != ( VAR_1 ) ) || ( ( ( int ) ( y ) ) != ( VAR_2 ) ) ) || ( ( VAR_3 ) != ( VAR_4 ) ) ) { VAR_1 = ( ( int ) ( x ) ) ; VAR_2 = ( ( int ) ( y ) ) ; VAR_3 = VAR_4 ; } ( VAR_5 ) ++ ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 , VAR_4 ) ; TYPE_3 VAR_5 = new TYPE_3 ( ) ; VAR_5 . METHOD_3 ( VAR_6 ) ; return VAR_5 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , VAR_2 ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.util.Vector VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 , VAR_4 ) ; TYPE_3 VAR_5 = new TYPE_3 ( ) ; VAR_5 . METHOD_3 ( VAR_6 ) ; return VAR_5 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , VAR_2 ) ; }\n"}
{"problem": "public static java.lang.Object getValue ( TYPE_1 VAR_1 , java.lang.Object obj ) { java.lang.Object VAR_2 = obj ; java.lang.Object VAR_3 = null ; while ( VAR_2 != null ) { try { VAR_3 = VAR_1 . get ( obj ) ; if ( VAR_3 != null ) { break ; } } catch ( java.lang.Exception VAR_4 ) { if ( ( VAR_2 . getClass ( ) . METHOD_1 ( ) ) != null ) { VAR_2 = VAR_2 . getClass ( ) . METHOD_1 ( ) ; } else { break ; } } } return VAR_3 ; }\n", "fixed": "public static java.lang.Object getValue ( TYPE_1 VAR_1 , java.lang.Object obj ) { java.lang.Object VAR_2 = obj ; java.lang.Object VAR_3 = null ; while ( VAR_2 != null ) { try { VAR_3 = VAR_1 . get ( obj ) ; break ; } catch ( java.lang.Exception VAR_4 ) { if ( ( VAR_2 . getClass ( ) . METHOD_1 ( ) ) != null ) { VAR_2 = VAR_2 . getClass ( ) . METHOD_1 ( ) ; } else { break ; } } } return VAR_3 ; }\n"}
{"problem": "private void METHOD_1 ( ) { boolean VAR_1 = false ; while ( ! VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( true ) { VAR_1 = true ; METHOD_3 ( ) ; } else { java.lang.System.out.println ( STRING_2 ) ; } } }\n", "fixed": "private void METHOD_1 ( ) { boolean VAR_1 = false ; while ( ! VAR_1 ) { java.lang.System.out.print ( STRING_1 ) ; VAR_2 = VAR_3 . METHOD_2 ( ) ; java.lang.System.out.println ( ) ; if ( true ) { VAR_1 = true ; } else { java.lang.System.out.println ( STRING_2 ) ; } } }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"problem": "private java.util.List < TYPE_1 > METHOD_1 ( double ... VAR_1 ) { java.util.List < TYPE_1 > result = new java.util.ArrayList < TYPE_1 > ( VAR_1 . length ) ; double x = - 1 ; for ( double VAR_2 : VAR_1 ) { if ( x == ( - 1 ) ) { x = VAR_2 ; } else { TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 , x ) ; x = - 1 ; result . add ( VAR_3 ) ; } } return result ; }\n", "fixed": "private java.util.List < TYPE_1 > METHOD_1 ( double ... VAR_1 ) { java.util.List < TYPE_1 > result = new java.util.ArrayList < TYPE_1 > ( VAR_1 . length ) ; double x = - 1 ; for ( double VAR_2 : VAR_1 ) { if ( x == ( - 1 ) ) { x = VAR_2 ; } else { TYPE_1 VAR_3 = new TYPE_1 ( x , VAR_2 ) ; x = - 1 ; result . add ( VAR_3 ) ; } } return result ; }\n"}
{"fixCommitSHA1": "1697ba6074aea80fe341dd07baac4fd85165dd74", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void sendIn() throws Exception {\n        result.expectedMessageCount(0);\n         template.send(\"direct:getObject\", new Processor() {", "fixed": "     @Test\n     public void sendIn() throws Exception {\n        result.expectedMessageCount(1);\n         template.send(\"direct:getObject\", new Processor() {", "sourceBeforeFix": "result.expectedMessageCount(0)", "sourceAfterFix": "result.expectedMessageCount(1)"}
{"problem": "public void METHOD_1 ( ) { VAR_1 = TYPE_1 . values ( ) [ VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ] ; for ( TYPE_2 c : VAR_3 ) { boolean VAR_4 = false ; for ( int t : VAR_5 . METHOD_4 ( VAR_1 ) ) if ( ( VAR_3 . get ( ( t - ( VAR_6 ) ) ) ) == c ) VAR_4 = true ; c . METHOD_5 ( VAR_4 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = TYPE_1 . values ( ) [ VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ] ; for ( TYPE_2 c : VAR_3 ) c . METHOD_5 ( false ) ; for ( int t : VAR_5 . METHOD_4 ( VAR_1 ) ) VAR_3 . get ( ( t - ( VAR_6 ) ) ) . METHOD_5 ( true ) ; }\n"}
{"problem": "public java.lang.Object METHOD_1 ( ) { if ( VAR_1 . step ( ) ) { byte [ ] key = VAR_1 . METHOD_2 ( false ) ; byte [ ] value = VAR_1 . METHOD_3 ( false ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . key = key ; VAR_2 . value = value ; VAR_3 . get ( ) . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( VAR_3 . get ( ) , VAR_2 ) ; return VAR_3 . get ( ) . METHOD_6 ( ) ; } return null ; }\n", "fixed": "public java.lang.Object METHOD_1 ( ) { byte [ ] key = VAR_1 . METHOD_2 ( false ) ; byte [ ] value = VAR_1 . METHOD_3 ( false ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . key = key ; VAR_2 . value = value ; VAR_3 . get ( ) . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( VAR_3 . get ( ) , VAR_2 ) ; VAR_1 . step ( ) ; return VAR_3 . get ( ) . METHOD_6 ( ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; TYPE_3 VAR_5 = new TYPE_4 ( ) . METHOD_4 ( ) . build ( ) ; TYPE_5 . METHOD_5 ( VAR_5 ) ; new TYPE_6 ( ) . execute ( null , null , null ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_3 VAR_5 = new TYPE_4 ( ) . METHOD_4 ( ) . build ( ) ; TYPE_5 . METHOD_5 ( VAR_5 ) ; new TYPE_6 ( ) . execute ( null , null , null ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"problem": "protected java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( TYPE_1 VAR_1 ) { java.io.InputStream VAR_2 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_3 = VAR_4 . METHOD_3 ( VAR_2 ) ; TYPE_4 < TYPE_3 > VAR_5 = METHOD_4 ( VAR_1 ) ; return VAR_5 . METHOD_5 ( VAR_3 ) ; }\n", "fixed": "protected java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( TYPE_1 VAR_1 ) { java.io.InputStream VAR_2 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_3 = VAR_4 . METHOD_3 ( VAR_2 ) ; TYPE_4 < TYPE_3 > VAR_5 = METHOD_4 ( VAR_1 ) ; java.util.Map < java.lang.String , java.lang.Object > result = VAR_5 . METHOD_5 ( VAR_3 ) ; return result ; }\n"}
{"fixCommitSHA1": "20e6e9afcad4cf6ba8ac455becbcddd7f9e36284", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Creates an instance.\n      * @param options the options to use.\n      */\n    public MultilineDetector(DetectorOptions options) {\n         this.options = options;\n     }", "fixed": "      * Creates an instance.\n      * @param options the options to use.\n      */\n    MultilineDetector(DetectorOptions options) {\n         this.options = options;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { VAR_2 = VAR_1 ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_5 ) ; if ( ( VAR_6 ) >= ( VAR_7 ) ) { VAR_8 . METHOD_5 ( VAR_3 ) ; } else { VAR_8 . METHOD_6 ( VAR_3 ) ; } if ( ! ( VAR_9 ) ) { VAR_10 = true ; } }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { VAR_2 = VAR_1 ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_5 ) ; if ( ( VAR_6 ) >= ( VAR_7 ) ) { VAR_8 . METHOD_6 ( VAR_3 ) ; } else { VAR_8 . METHOD_5 ( VAR_3 ) ; } if ( ! ( VAR_9 ) ) { VAR_10 = true ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"problem": "public static double METHOD_1 ( java.util.HashMap < java.lang.String , java.lang.Integer > VAR_1 , java.lang.String VAR_2 ) { int VAR_3 = TYPE_1 . getTime ( ) ; int VAR_4 = VAR_3 - ( VAR_1 . get ( VAR_2 . substring ( 0 , VAR_2 . METHOD_2 ( STRING_1 ) ) . toLowerCase ( ) ) ) ; double VAR_5 = 0.0 ; VAR_5 = VAR_5 + ( VAR_4 * FLOAT_1 ) ; return VAR_5 ; }\n", "fixed": "private static double METHOD_1 ( java.util.HashMap < java.lang.String , java.lang.Integer > VAR_1 , java.lang.String VAR_2 ) { int VAR_3 = TYPE_1 . getTime ( ) ; int VAR_4 = VAR_3 - ( VAR_1 . get ( VAR_2 . substring ( 0 , VAR_2 . METHOD_2 ( STRING_1 ) ) . toLowerCase ( ) ) ) ; double VAR_5 = 0.0 ; VAR_5 = VAR_5 + ( VAR_4 * FLOAT_1 ) ; return VAR_5 ; }\n"}
{"problem": "private void METHOD_1 ( java.util.ArrayList VAR_1 , java.util.ArrayList to , java.lang.Object VAR_2 ) { for ( int i = 0 ; i < ( to . size ( ) ) ; i ++ ) { if ( to . get ( i ) . equals ( VAR_2 ) ) { to . remove ( i ) ; VAR_1 . add ( VAR_2 ) ; return ; } } }\n", "fixed": "private void METHOD_1 ( java.util.ArrayList VAR_1 , java.util.ArrayList to , java.lang.Object VAR_2 ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( VAR_1 . get ( i ) . equals ( VAR_2 ) ) { VAR_1 . remove ( i ) ; to . add ( VAR_2 ) ; return ; } } }\n"}
{"problem": "private void METHOD_1 ( java.lang.String key ) { android.content.Intent VAR_1 = new android.content.Intent ( context , VAR_2 class ) ; TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( context . METHOD_3 ( ) , java.lang.Long . METHOD_4 ( key ) . intValue ( ) , VAR_1 , VAR_4 ) ; TYPE_2 VAR_5 = ( ( TYPE_2 ) ( context . METHOD_5 ( VAR_6 ) ) ) ; VAR_5 . METHOD_6 ( VAR_3 ) ; }\n", "fixed": "private void METHOD_1 ( java.lang.String key ) { android.content.Intent VAR_1 = new android.content.Intent ( context . METHOD_3 ( ) , VAR_2 class ) ; TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( context . METHOD_3 ( ) , java.lang.Long . METHOD_4 ( key ) . intValue ( ) , VAR_1 , VAR_4 ) ; TYPE_2 VAR_5 = ( ( TYPE_2 ) ( context . METHOD_5 ( VAR_6 ) ) ) ; VAR_5 . METHOD_6 ( VAR_3 ) ; }\n"}
{"fixCommitSHA1": "ad3c1adb1c911a348c35bec42a1ec102de7dfdde", "projectName": "Alluxio.alluxio", "bugType": "Change Boolean Literal", "problem": "   }\n   /**\n   * Convenience method for delete with recursive set. This is the same as calling delete(file,\n   * true).\n    *\n    * @param file the handler for the file to delete recursively\n    * @throws FileDoesNotExistException if the file does not exist in Tachyon space", "fixed": "   }\n   /**\n   * Convenience method for delete without recursive set. This is the same as calling delete(file,\n   * false).\n    *\n    * @param file the handler for the file to delete recursively\n    * @throws FileDoesNotExistException if the file does not exist in Tachyon space", "sourceBeforeFix": "setPin(file,false)", "sourceAfterFix": "setPin(file,true)"}
{"fixCommitSHA1": "474f8ec97f7750303807e5b73b78b8f78c7c6d95", "projectName": "alibaba.druid", "bugType": "Change Numeric Literal", "problem": "         {\n            concurrent(driver, dataSource, 100);\n         }", "fixed": "         {\n            concurrent(driver, dataSource, 30);\n         }", "sourceBeforeFix": "concurrent(driver,dataSource,100)", "sourceAfterFix": "concurrent(driver,dataSource,30)"}
{"problem": "public void METHOD_1 ( ) throws java.io.IOException { java.util.Calendar VAR_1 = java.util.Calendar.getInstance ( ) ; TYPE_1 format = new TYPE_1 ( STRING_1 ) ; METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_2 , ( ( this . VAR_3 ) + ( format . format ( VAR_1 . getTime ( ) ) ) ) ) ; java.io.File VAR_4 = new java.io.File ( this . VAR_5 ) ; synchronized ( VAR_4 ) { TYPE_3 . METHOD_4 ( VAR_4 ) ; } }\n", "fixed": "public void METHOD_1 ( ) throws java.io.IOException { java.util.Calendar VAR_1 = java.util.Calendar.getInstance ( ) ; TYPE_1 format = new TYPE_1 ( STRING_1 ) ; METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_2 , ( ( this . VAR_3 ) + ( format . format ( VAR_1 . getTime ( ) ) ) ) ) ; java.io.File VAR_4 = new java.io.File ( this . VAR_5 ) ; synchronized ( VAR_4 ) { TYPE_3 . METHOD_4 ( VAR_4 ) ; } TYPE_3 . METHOD_4 ( new java.io.File ( VAR_2 ) ) ; }\n"}
{"fixCommitSHA1": "885f7d1e71f16d5051ea7a71fb522ebf85821e97", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                             }\n                         });\n                        configuration.addClientInterceptor(method, factory, InterceptorOrder.View.COMPONENT_DISPATCHER);\n                     }\n                 }", "fixed": "                             }\n                         });\n                        configuration.addViewInterceptor(method, factory, InterceptorOrder.View.COMPONENT_DISPATCHER);\n                     }\n                 }", "sourceBeforeFix": "configuration.addClientInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)", "sourceAfterFix": "configuration.addViewInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { final TYPE_1 text = TYPE_2 . METHOD_2 ( id ) ; text . METHOD_3 ( TYPE_3 . METHOD_4 ( ( ( int ) ( INT_1 * a ) ) , ( ( int ) ( INT_1 * VAR_1 ) ) , ( ( int ) ( INT_1 * VAR_2 ) ) , ( ( int ) ( INT_1 * b ) ) ) ) ; text . METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { text . METHOD_3 ( TYPE_3 . METHOD_4 ( ( ( int ) ( INT_1 * a ) ) , ( ( int ) ( INT_1 * VAR_1 ) ) , ( ( int ) ( INT_1 * VAR_2 ) ) , ( ( int ) ( INT_1 * b ) ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . i ( VAR_1 , STRING_1 ) ; if ( TYPE_2 . equals ( VAR_2 . getType ( ) ) ) { VAR_3 . METHOD_2 ( ) ; } if ( TYPE_3 . equals ( VAR_2 . getType ( ) ) ) { java.lang.String [ ] VAR_4 = VAR_2 . METHOD_3 ( ) . split ( STRING_2 ) ; java.lang.String VAR_5 = VAR_4 [ 0 ] ; java.lang.String VAR_6 = VAR_4 [ 1 ] ; VAR_3 . METHOD_4 ( VAR_5 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . i ( VAR_1 , STRING_1 ) ; if ( TYPE_2 . equals ( VAR_2 . getType ( ) ) ) { VAR_3 . METHOD_2 ( null ) ; } if ( TYPE_3 . equals ( VAR_2 . getType ( ) ) ) { java.lang.String [ ] VAR_4 = VAR_2 . METHOD_3 ( ) . split ( STRING_2 ) ; java.lang.String VAR_5 = VAR_4 [ 0 ] ; java.lang.String VAR_6 = VAR_4 [ 1 ] ; VAR_3 . METHOD_4 ( VAR_5 ) ; } }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastQueueEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastQueueEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HazelcastQueueEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastQueueEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; TYPE_3 VAR_3 = new TYPE_4 ( new TYPE_5 ( ) ) ; VAR_3 . METHOD_2 ( TYPE_6 . METHOD_3 ( VAR_2 ) ) ; TYPE_1 [ ] VAR_4 = new TYPE_1 [ VAR_3 . METHOD_4 ( true ) ] ; for ( int i = 0 ; i < ( VAR_3 . METHOD_4 ( true ) ) ; i ++ ) { VAR_4 [ i ] = VAR_3 . METHOD_5 ( i ) ; } return VAR_4 ; }\n", "fixed": "public TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { java.io.File VAR_2 = new java.io.File ( VAR_1 ) ; TYPE_3 VAR_3 = new TYPE_4 ( new TYPE_5 ( ) ) ; VAR_3 . METHOD_2 ( TYPE_6 . METHOD_3 ( VAR_2 ) ) ; TYPE_1 [ ] VAR_4 = new TYPE_1 [ VAR_3 . METHOD_4 ( true ) ] ; for ( int i = 0 ; i < ( VAR_3 . METHOD_4 ( true ) ) ; i ++ ) { VAR_4 [ i ] = VAR_3 . METHOD_5 ( i ) ; } return VAR_4 ; }\n"}
{"problem": "protected TYPE_1 open ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 ) { if ( METHOD_1 ( ) ) { VAR_6 . METHOD_2 ( STRING_1 ) ; return VAR_1 ; } METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; TYPE_4 . METHOD_4 ( VAR_1 , STRING_2 ) ; VAR_7 = VAR_8 ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) ; this . VAR_1 . METHOD_7 ( VAR_9 ) ; return this . VAR_1 ; }\n", "fixed": "protected TYPE_1 open ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 ) { if ( METHOD_1 ( ) ) { VAR_6 . METHOD_2 ( STRING_1 ) ; return VAR_1 ; } METHOD_5 ( VAR_1 ) ; METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; TYPE_4 . METHOD_4 ( VAR_1 , STRING_2 ) ; VAR_7 = VAR_8 ; METHOD_6 ( ) ; this . VAR_1 . METHOD_7 ( VAR_9 ) ; return this . VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "22d5241b5f75631e9cfda82a6912a2555eecb165", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     @Override\n     protected void doStop() throws Exception {\n         if (channel != null) {\n            LOG.trace(\"Terminating channel to the remote gRPC server\");\n             channel.shutdown().shutdownNow();\n             channel = null;\n             grpcStub = null;", "fixed": "     @Override\n     protected void doStop() throws Exception {\n         if (channel != null) {\n            LOG.debug(\"Terminating channel to the remote gRPC server\");\n             channel.shutdown().shutdownNow();\n             channel = null;\n             grpcStub = null;", "sourceBeforeFix": "LOG.info(\"Getting synchronous method stub from channel\")", "sourceAfterFix": "LOG.debug(\"Getting synchronous method stub from channel\")"}
{"fixCommitSHA1": "95a13b51ee052eb73882682e8f009bfa1e914866", "projectName": "apache.hbase", "bugType": "Change Modifier", "problem": "         && getTimeBetweenRuns() > getMaximumAllowedTimeBetweenRuns();\n   }\n  private synchronized double getMaximumAllowedTimeBetweenRuns() {\n     return 1.5 * period;\n   }", "fixed": "         && getTimeBetweenRuns() > getMaximumAllowedTimeBetweenRuns();\n   }\n  private double getMaximumAllowedTimeBetweenRuns() {\n     return 1.5 * period;\n   }", "sourceBeforeFix": "33", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( this . getActivity ( ) ) ; if ( ( METHOD_3 ( ) ) != null ) { VAR_2 = METHOD_3 ( ) . getBoolean ( VAR_3 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( METHOD_3 ( ) ) != null ) { VAR_2 = METHOD_3 ( ) . getBoolean ( VAR_3 ) ; } super . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( this . getActivity ( ) ) ; }\n"}
{"fixCommitSHA1": "dc050d4adc218769b52b57d7bb1263200c945ccf", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void expiryTimeShouldNotBeChangedOnUpdateWhenCreatedExpiryPolicyIsUsed() {\n        final int CRETAED_EXPIRY_TIME_IN_MSEC = 1000;\n        Duration duration = new Duration(TimeUnit.MILLISECONDS, CRETAED_EXPIRY_TIME_IN_MSEC);\n         CacheConfig<Integer, String> cacheConfig = new CacheConfig<Integer, String>();\n         cacheConfig.setExpiryPolicyFactory(CreatedExpiryPolicy.factoryOf(duration));", "fixed": "     @Test\n     public void expiryTimeShouldNotBeChangedOnUpdateWhenCreatedExpiryPolicyIsUsed() {\n        final int CREATED_EXPIRY_TIME_IN_MSEC = 100;\n        Duration duration = new Duration(TimeUnit.MILLISECONDS, CREATED_EXPIRY_TIME_IN_MSEC);\n         CacheConfig<Integer, String> cacheConfig = new CacheConfig<Integer, String>();\n         cacheConfig.setExpiryPolicyFactory(CreatedExpiryPolicy.factoryOf(duration));", "sourceBeforeFix": "new Duration(TimeUnit.MILLISECONDS,CRETAED_EXPIRY_TIME_IN_MSEC)", "sourceAfterFix": "new Duration(TimeUnit.MILLISECONDS,CREATED_EXPIRY_TIME_IN_MSEC)"}
{"problem": "public void METHOD_1 ( ) { int index = METHOD_2 ( ) ; TYPE_1 < TYPE_2 > VAR_1 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; int VAR_3 = VAR_2 . METHOD_3 ( ) . METHOD_5 ( index ) ; VAR_2 . METHOD_3 ( ) . METHOD_6 ( VAR_3 ) . METHOD_7 ( ) ; TYPE_1 < TYPE_2 > VAR_4 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; TYPE_3 . assertThat ( VAR_4 , METHOD_8 ( VAR_1 . METHOD_9 ( index ) ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { int index = METHOD_2 ( ) ; TYPE_1 < TYPE_2 > VAR_1 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_6 ( index ) . METHOD_7 ( ) ; TYPE_1 < TYPE_2 > VAR_4 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; TYPE_3 . assertThat ( VAR_4 , METHOD_8 ( VAR_1 . METHOD_9 ( ( index - 1 ) ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( final TYPE_1 message ) { if ( ( message . METHOD_2 ( ) ) == ( VAR_1 ) ) { VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; } else { VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_2 . METHOD_4 ( VAR_6 ) ; } VAR_2 . METHOD_5 ( message ) ; if ( ( VAR_7 ) != null ) { VAR_7 . METHOD_5 ( message ) ; } VAR_2 . METHOD_6 ( new TYPE_2 ( VAR_8 , VAR_9 ) ) ; }\n", "fixed": "public void METHOD_1 ( final TYPE_1 message ) { VAR_2 . METHOD_6 ( new TYPE_2 ( VAR_8 , VAR_9 ) ) ; VAR_2 . METHOD_5 ( message ) ; if ( ( VAR_7 ) != null ) { VAR_7 . METHOD_5 ( message ) ; } if ( ( message . METHOD_2 ( ) ) == ( VAR_1 ) ) { VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; } else { VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_2 . METHOD_4 ( VAR_6 ) ; } }\n"}
{"problem": "private < TYPE_1 > TYPE_1 getValue ( java.lang.Class < TYPE_1 > t ) { java.lang.Class < ? > VAR_1 = value . getClass ( ) ; if ( VAR_1 != t ) throw new TYPE_2 ( ( ( ( STRING_1 + ( VAR_1 . getName ( ) ) ) + STRING_2 ) + ( t . getName ( ) ) ) ) ; return t . METHOD_1 ( value ) ; }\n", "fixed": "private < TYPE_1 > TYPE_1 getValue ( java.lang.Class < TYPE_1 > t ) { java.lang.Class < ? > VAR_1 = value . getClass ( ) ; if ( VAR_1 != t ) throw new TYPE_2 ( ( ( ( STRING_1 + ( t . getName ( ) ) ) + STRING_2 ) + ( VAR_1 . getName ( ) ) ) ) ; return t . METHOD_1 ( value ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { try { if ( ( VAR_1 ) != null ) VAR_1 . METHOD_1 ( ) ; } catch ( java.io.IOException VAR_2 ) { } try { if ( ( VAR_3 ) != null ) VAR_3 . METHOD_1 ( ) ; } catch ( java.io.IOException VAR_2 ) { } try { if ( ( VAR_4 ) != null ) VAR_4 . METHOD_1 ( ) ; } catch ( java.io.IOException VAR_2 ) { } METHOD_2 ( VAR_5 ) ; remove ( this ) ; }\n", "fixed": "private void METHOD_1 ( ) { try { if ( ( VAR_1 ) != null ) VAR_1 . METHOD_1 ( ) ; } catch ( java.io.IOException VAR_2 ) { } try { if ( ( VAR_3 ) != null ) VAR_3 . METHOD_1 ( ) ; } catch ( java.io.IOException VAR_2 ) { } try { if ( ( VAR_4 ) != null ) VAR_4 . METHOD_1 ( ) ; } catch ( java.io.IOException VAR_2 ) { } METHOD_2 ( VAR_5 ) ; remove ( this ) ; }\n"}
{"problem": "public java.util.List < java.lang.String > replace ( java.util.List < java.lang.String > list , java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( ( VAR_2 == null ) || ( VAR_1 == null ) ) { return list ; } for ( int i = 0 ; i < ( list . size ( ) ) ; i ++ ) { list . set ( i , list . get ( i ) . replace ( VAR_1 , VAR_2 ) ) ; } return list ; }\n", "fixed": "public java.util.List < java.lang.String > replace ( java.util.List < java.lang.String > list , java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( list == null ) { return null ; } if ( ( VAR_2 == null ) || ( VAR_1 == null ) ) { return list ; } for ( int i = 0 ; i < ( list . size ( ) ) ; i ++ ) { list . set ( i , list . get ( i ) . replace ( VAR_1 , VAR_2 ) ) ; } return list ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String filePath ) { java.lang.String line ; java.lang.String VAR_1 = STRING_1 ; java.io.BufferedReader VAR_2 = null ; try { VAR_2 = new java.io.BufferedReader ( new java.io.FileReader ( filePath ) ) ; while ( ( line = VAR_2 . METHOD_2 ( ) ) != null ) { VAR_1 += line + \"\\n\" ; } } catch ( java.lang.Exception VAR_3 ) { java.lang.System.out.println ( STRING_2 ) ; } finally { try { VAR_2 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_3 ) { java.lang.System.out.println ( STRING_3 ) ; } } return VAR_1 ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String filePath ) { java.lang.String line ; java.lang.String VAR_1 = STRING_1 ; java.io.BufferedReader VAR_2 = null ; try { VAR_2 = new java.io.BufferedReader ( new java.io.FileReader ( filePath ) ) ; while ( ( line = VAR_2 . METHOD_2 ( ) ) != null ) { VAR_1 += line + \"\\n\" ; } } catch ( java.lang.Exception VAR_3 ) { java.lang.System.out.println ( STRING_2 ) ; } finally { } return VAR_1 ; }\n"}
{"fixCommitSHA1": "ab6298d6feedb99b827f708e1f269d1996894b1d", "projectName": "neo4j.neo4j", "bugType": "Less Specific If", "problem": "      */\n     public String getVersion()\n     {\n        if ( version == null )\n         {\n             return \"<unknown>\";\n         }", "fixed": "      */\n     public String getVersion()\n     {\n        if ( version == null || version.equals( \"\" ) )\n         {\n             return \"<unknown>\";\n         }", "sourceBeforeFix": "version == null", "sourceAfterFix": "version == null || version.equals(\"\")"}
{"fixCommitSHA1": "8abd59029e7c0bc0973b492fd84a386b26661bc7", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "             }\n         });\n         try {\n            finish.await(getTimeout(), TimeUnit.MILLISECONDS);\n         } catch (InterruptedException e) {\n             throw new RemotingException(this, \"client(url: \" + getUrl() + \") failed to connect to server \" + getRemoteAddress() + \" client-side timeout \"\n                    + getTimeout() + \"ms (elapsed: \" + (System.currentTimeMillis() - start)\n                     + \"ms) from netty client \" + NetUtils.getLocalHost() + \" using dubbo version \"\n                     + Version.getVersion() + \", cause: \" + e.getMessage(), e);\n         }", "fixed": "             }\n         });\n         try {\n            finish.await(getConnectTimeout(), TimeUnit.MILLISECONDS);\n         } catch (InterruptedException e) {\n             throw new RemotingException(this, \"client(url: \" + getUrl() + \") failed to connect to server \" + getRemoteAddress() + \" client-side timeout \"\n                    + getConnectTimeout() + \"ms (elapsed: \" + (System.currentTimeMillis() - start)\n                     + \"ms) from netty client \" + NetUtils.getLocalHost() + \" using dubbo version \"\n                     + Version.getVersion() + \", cause: \" + e.getMessage(), e);\n         }", "sourceBeforeFix": "getTimeout()", "sourceAfterFix": "getConnectTimeout()"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( METHOD_2 ( ) ) != null ) { VAR_2 = METHOD_2 ( ) . getString ( VAR_3 ) ; VAR_4 = METHOD_2 ( ) . getString ( VAR_5 ) ; } VAR_6 = new TYPE_2 ( getContext ( ) , getActivity ( ) . METHOD_3 ( ) , VAR_7 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( METHOD_2 ( ) ) != null ) { VAR_2 = METHOD_2 ( ) . getString ( VAR_3 ) ; VAR_4 = METHOD_2 ( ) . getString ( VAR_5 ) ; } VAR_6 = new TYPE_2 ( getActivity ( ) . METHOD_3 ( ) , VAR_7 ) ; }\n"}
{"fixCommitSHA1": "852c8b720dd810c699d6303d0470efa246c84d26", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"hello\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"hello\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForRoles\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRoles\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             }\n             if (!removed) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             }", "fixed": "             }\n             if (!removed) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             }", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "117cc1a32b6dc1a65bcc269a5962047ade56f4a7", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                         cacheEntry.value = value;\n                         cacheEntry.reload = false;\n                     }\n                    localCache.put(name, NULL_ENTRY);\n                 }\n                 return cacheEntry != NULL_ENTRY ? cacheEntry.value : null;\n             }", "fixed": "                         cacheEntry.value = value;\n                         cacheEntry.reload = false;\n                     }\n                    localCache.put(name, cacheEntry);\n                 }\n                 return cacheEntry != NULL_ENTRY ? cacheEntry.value : null;\n             }", "sourceBeforeFix": "localCache.put(name,NULL_ENTRY)", "sourceAfterFix": "localCache.put(name,cacheEntry)"}
{"problem": "public java.lang.String METHOD_1 ( long VAR_1 , java.lang.String VAR_2 , java.lang.String name , int VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 ) { TYPE_1 VAR_7 = VAR_8 . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_9 = new TYPE_2 ( VAR_2 , name , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; VAR_10 . METHOD_3 ( VAR_9 ) ; return STRING_1 + VAR_1 ; }\n", "fixed": "public java.lang.String METHOD_1 ( long VAR_1 , java.lang.String name , java.lang.String VAR_2 , int VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 ) { TYPE_1 VAR_7 = VAR_8 . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_9 = new TYPE_2 ( name , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; VAR_10 . METHOD_3 ( VAR_9 ) ; return STRING_1 + VAR_1 ; }\n"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 ) ; TYPE_2 . METHOD_4 ( this ) ; VAR_4 = getIntent ( ) . METHOD_5 ( VAR_5 , 0 ) ; VAR_3 . METHOD_6 ( TYPE_3 . METHOD_7 ( METHOD_8 ( ) , VAR_4 ) ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_4 ( this ) ; METHOD_3 ( VAR_3 ) ; VAR_4 = getIntent ( ) . METHOD_5 ( VAR_5 , 0 ) ; VAR_3 . METHOD_6 ( TYPE_3 . METHOD_7 ( METHOD_8 ( ) , VAR_4 ) ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( VAR_1 ) { if ( ! ( VAR_2 ) ) { try { VAR_3 . METHOD_2 ( STRING_1 ) ; VAR_4 = VAR_5 . METHOD_3 ( VAR_6 . getId ( ) ) ; } catch ( final TYPE_2 VAR_7 ) { VAR_3 . error ( VAR_7 . METHOD_4 ( ) ) ; } } else { VAR_3 . METHOD_2 ( STRING_2 ) ; } } else { VAR_3 . error ( STRING_3 ) ; VAR_4 = null ; } return VAR_4 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( VAR_1 ) { try { VAR_3 . METHOD_2 ( STRING_1 ) ; VAR_4 = VAR_5 . METHOD_3 ( VAR_6 . getId ( ) ) ; } catch ( final TYPE_2 VAR_7 ) { VAR_3 . error ( VAR_7 . METHOD_4 ( ) ) ; } } else { VAR_3 . error ( STRING_3 ) ; VAR_4 = null ; } return VAR_4 ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , java.lang.String VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 , java.util.List < java.lang.String > VAR_6 , TYPE_4 VAR_7 , TYPE_4 VAR_8 , TYPE_5 VAR_9 ) { return this . METHOD_2 ( VAR_1 ) . METHOD_1 ( VAR_3 , VAR_2 , VAR_4 . METHOD_3 ( ) ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , java.lang.String VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 , java.util.List < java.lang.String > VAR_6 , TYPE_4 VAR_7 , TYPE_4 VAR_8 , TYPE_5 VAR_9 ) { return this . METHOD_2 ( VAR_1 ) . METHOD_1 ( VAR_3 , VAR_2 , VAR_4 ) ; }\n"}
{"fixCommitSHA1": "9e383f401a22ab6c7085d7cb2e949ad11f020e8b", "projectName": "apache.camel", "bugType": "Change Unary Operator\t", "problem": "                                                           DataFormat.class);\n         boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class));\n        if (cxfMessage.getAttachments() != null && !(DataFormat.POJO.equals(dataFormat) && !isXop)) {\n             for (Attachment attachment : cxfMessage.getAttachments()) {\n                 camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler());", "fixed": "                                                           DataFormat.class);\n         boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class));\n        if (cxfMessage.getAttachments() != null && !(DataFormat.POJO.equals(dataFormat) && isXop)) {\n             for (Attachment attachment : cxfMessage.getAttachments()) {\n                 camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler());", "sourceBeforeFix": "!isXop", "sourceAfterFix": "isXop"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_1 VAR_4 ) throws TYPE_2 , TYPE_3 , TYPE_4 , java.io.IOException { java.lang.String [ ] VAR_5 = VAR_2 . split ( STRING_1 ) ; java.util.List < TYPE_5 > VAR_6 = VAR_7 . METHOD_2 ( VAR_5 ) ; java.util.List < java.lang.String > VAR_8 = java.util.Arrays.asList ( VAR_3 . split ( STRING_2 ) ) ; VAR_9 = VAR_10 . METHOD_3 ( VAR_6 , VAR_8 ) ; return STRING_3 ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_1 VAR_4 ) throws TYPE_2 , TYPE_3 , TYPE_4 , java.io.IOException { java.lang.String [ ] VAR_5 = VAR_2 . split ( STRING_1 ) ; java.util.List < TYPE_5 > VAR_6 = VAR_7 . METHOD_2 ( VAR_5 ) ; java.util.List < java.lang.String > VAR_8 = java.util.Arrays.asList ( VAR_3 . split ( STRING_2 ) ) ; VAR_9 = VAR_10 . METHOD_3 ( VAR_6 , VAR_8 ) ; return STRING_3 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "             return this;\n         }\n        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }", "fixed": "             return this;\n         }\n        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }", "sourceBeforeFix": "public DerivedBuilder setRealmDomain(String domain){   realm().setDomain(domain);   return this; } ", "sourceAfterFix": "public Builder setRealmDomain(String domain){   realm().setDomain(domain);   return this; } "}
{"problem": "void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , false , this ) ; VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_4 ) , false , this ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_5 ) , false , this ) ; VAR_1 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_6 ) , false , this , VAR_7 ) ; update ( ) ; }\n", "fixed": "void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , false , this ) ; VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_4 ) , false , this ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_5 ) , false , this ) ; update ( ) ; }\n"}
{"problem": "private java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . name = VAR_3 ; final TYPE_4 VAR_4 = VAR_5 . METHOD_3 ( VAR_2 ) ; TYPE_5 . METHOD_4 ( VAR_1 , VAR_4 . METHOD_5 ( ) ) ; java.lang.System.out.println ( ( STRING_1 + ( VAR_1 . size ( ) ) ) ) ; return VAR_1 ; }\n", "fixed": "private java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . name = VAR_3 ; final TYPE_4 VAR_4 = VAR_5 . METHOD_3 ( VAR_2 ) ; TYPE_5 . METHOD_4 ( VAR_1 , VAR_4 . METHOD_5 ( ) ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "         parent.getRegionName(), rowContent, COL_SPLITB);\n     if (!hasReferencesA && !hasReferencesB) {\n      LOG.info(\"Deleting region \" + parent.getRegionName() +\n         \" because daughter splits no longer hold references\");\n       HRegion.deleteRegion(master.fs, master.rootdir, parent);", "fixed": "         parent.getRegionName(), rowContent, COL_SPLITB);\n     if (!hasReferencesA && !hasReferencesB) {\n      LOG.info(\"Deleting region \" + parent.getRegionNameAsString() +\n         \" because daughter splits no longer hold references\");\n       HRegion.deleteRegion(master.fs, master.rootdir, parent);", "sourceBeforeFix": "parent.getRegionName()", "sourceAfterFix": "parent.getRegionNameAsString()"}
{"problem": "private static int METHOD_1 ( ) { final long VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; final long VAR_2 = TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ; final long VAR_3 = TYPE_1 . METHOD_2 ( ) . METHOD_5 ( ) ; return ( ( int ) ( ( VAR_2 + ( VAR_1 - VAR_3 ) ) / INT_1 ) ) ; }\n", "fixed": "private static long METHOD_1 ( ) { final long VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; final long VAR_2 = TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ; final long VAR_3 = TYPE_1 . METHOD_2 ( ) . METHOD_5 ( ) ; return ( VAR_2 > > 1 ) + ( ( VAR_1 - VAR_3 ) > > 1 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { TYPE_2 VAR_2 = VAR_3 [ position ] ; android.content.Intent intent = new android.content.Intent ( this , VAR_4 class ) ; intent . METHOD_2 ( VAR_5 , VAR_2 . getName ( ) ) ; METHOD_3 ( intent ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { TYPE_2 VAR_2 = VAR_3 . get ( position ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_4 class ) ; intent . METHOD_2 ( VAR_5 , VAR_2 . getName ( ) ) ; METHOD_3 ( intent ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 c ) { boolean VAR_1 = ( c . METHOD_2 ( ) ) && ( ( c . METHOD_3 ( ) ) > 0 ) ; boolean VAR_2 = ( VAR_1 && ( c . METHOD_4 ( ) ) ) && ( ! ( c . getText ( ) . equals ( STRING_1 ) ) ) ; return VAR_2 ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 c ) { boolean VAR_1 = ( c . METHOD_2 ( ) ) && ( ( c . METHOD_3 ( ) ) > 0 ) ; boolean VAR_2 = ( ( ! VAR_1 ) && ( c . METHOD_4 ( ) ) ) && ( ! ( c . getText ( ) . equals ( STRING_1 ) ) ) ; return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( ) { final TYPE_1 < java.lang.Integer > VAR_1 = TYPE_1 . METHOD_2 ( 1 , INT_1 ) ; METHOD_3 ( VAR_2 class , java.lang.String.format ( ( STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) ) ) ) ; TYPE_2 . assertThat ( VAR_1 ) . contains ( 1 , INT_2 , INT_3 , INT_4 , INT_5 , INT_6 , INT_7 , INT_8 , INT_9 , INT_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { final TYPE_1 < java.lang.Integer > VAR_1 = TYPE_1 . METHOD_2 ( 1 , INT_1 ) ; METHOD_3 ( VAR_2 class , ( STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) ) ) ; TYPE_2 . assertThat ( VAR_1 ) . contains ( 1 , INT_2 , INT_3 , INT_4 , INT_5 , INT_6 , INT_7 , INT_8 , INT_9 , INT_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 TYPE_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; java.lang.CharSequence VAR_3 = TYPE_2 . getText ( ) ; if ( ( VAR_4 [ 0 ] ) == true ) { VAR_3 = STRING_1 ; VAR_4 [ 0 ] = false ; } VAR_5 [ 0 ] = true ; TYPE_2 . setText ( ( VAR_3 + STRING_2 ) ) ; return ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 TYPE_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; java.lang.CharSequence VAR_3 = TYPE_2 . getText ( ) ; if ( VAR_4 [ 0 ] ) { VAR_3 = STRING_1 ; VAR_4 [ 0 ] = false ; } VAR_5 [ 0 ] = true ; TYPE_2 . setText ( ( VAR_3 + STRING_2 ) ) ; }\n"}
{"problem": "public void add ( TYPE_1 < byte [ ] , java.lang.String > VAR_1 , java.lang.String key , java.lang.String value ) { java.util.Map < java.lang.String , java.lang.String > VAR_2 = this . get ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_2 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_2 . put ( key , value ) ; this . set ( VAR_1 , VAR_2 ) ; }\n", "fixed": "public void add ( byte [ ] VAR_1 , java.lang.String key , java.lang.String value ) { java.util.Map < java.lang.String , java.lang.String > VAR_2 = this . get ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_2 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_2 . put ( key , value ) ; this . set ( VAR_1 , VAR_2 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private TYPE_1 METHOD_1 ( java.util.Set < TYPE_2 > VAR_1 , java.util.Set < TYPE_3 > VAR_2 ) { if ( VAR_3 ) { ( VAR_4 ) ++ ; } TYPE_1 result = new TYPE_1 ( VAR_1 , VAR_2 ) ; TYPE_4 < TYPE_1 > VAR_5 = VAR_6 . get ( result ) ; if ( null != VAR_5 ) { TYPE_1 VAR_7 = VAR_5 . get ( ) ; if ( null != VAR_7 ) return VAR_7 ; } VAR_6 . put ( result , new TYPE_5 < TYPE_1 > ( result ) ) ; return result ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.util.Set < TYPE_2 > VAR_1 , java.util.Set < TYPE_3 > VAR_2 ) { if ( VAR_3 ) { ( VAR_4 ) ++ ; } TYPE_1 result = new TYPE_1 ( VAR_1 , VAR_2 ) ; TYPE_1 VAR_5 = VAR_6 . get ( result ) ; if ( null != VAR_5 ) { return VAR_5 ; } VAR_6 . put ( result , result ) ; return result ; }\n"}
{"problem": "public java.lang.String toString ( ) { return type . METHOD_1 ( ) ? java.lang.String . METHOD_2 ( date . get ( VAR_1 ) ) : ( ( STRING_1 + \"\\t\" ) + ( java.lang.String . METHOD_2 ( date . get ( VAR_1 ) ) ) ) + STRING_2 ; }\n", "fixed": "public java.lang.String toString ( ) { return ! ( type . METHOD_1 ( ) ) ? java.lang.String . METHOD_2 ( date . get ( VAR_1 ) ) : ( ( STRING_1 + \"\\t\" ) + ( java.lang.String . METHOD_2 ( date . get ( VAR_1 ) ) ) ) + STRING_2 ; }\n"}
{"fixCommitSHA1": "ec6f0cffe68e0736c04783b61f980f1271064dd9", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  public int hashCode() {\n     Function<N, Set<E>> nodeToOutEdges = new Function<N, Set<E>>() {\n       @Override\n       public Set<E> apply(N node) {", "fixed": "   }\n   @Override\n  public final int hashCode() {\n     Function<N, Set<E>> nodeToOutEdges = new Function<N, Set<E>>() {\n       @Override\n       public Set<E> apply(N node) {", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "d3a879a7ed73895620c2dbc6f6ea2b321ecc6574", "projectName": "apache.hive", "bugType": "More Specific If", "problem": "               HiveSemanticAnalyzerHook.class);\n      if (saHooks != null) {\n         HiveSemanticAnalyzerHookContext hookCtx = new HiveSemanticAnalyzerHookContextImpl();\n         hookCtx.setConf(conf);\n         hookCtx.setUserName(userName);", "fixed": "               HiveSemanticAnalyzerHook.class);\n      if (saHooks != null && !saHooks.isEmpty()) {\n         HiveSemanticAnalyzerHookContext hookCtx = new HiveSemanticAnalyzerHookContextImpl();\n         hookCtx.setConf(conf);\n         hookCtx.setUserName(userName);", "sourceBeforeFix": "saHooks != null", "sourceAfterFix": "saHooks != null && !saHooks.isEmpty()"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 Optional.empty());\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypes()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", null)", "fixed": "                 Optional.empty());\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", null)", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"problem": "protected void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 ) ; i ++ ) { VAR_2 += node [ i ] . METHOD_2 ( ) ; } VAR_2 /= INT_1 ; VAR_3 . setText ( ( ( VAR_2 ) + STRING_1 ) ) ; if ( ( VAR_2 ) != ( ( ( VAR_1 ) * ( ( VAR_1 ) - 1 ) ) / INT_1 ) ) VAR_4 . setText ( STRING_2 ) ; else VAR_4 . setText ( STRING_3 ) ; }\n", "fixed": "protected void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 ) ; i ++ ) { VAR_2 += node [ i ] . METHOD_2 ( ) ; } VAR_2 /= INT_1 ; VAR_3 . setText ( VAR_2 ) ; if ( ( VAR_2 ) != ( ( ( VAR_1 ) * ( ( VAR_1 ) - 1 ) ) / INT_1 ) ) VAR_4 . setText ( STRING_2 ) ; else VAR_4 . setText ( STRING_3 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 response ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_5 ( this , VAR_3 class ) ; METHOD_6 ( intent ) ; METHOD_7 ( ) ; TYPE_4 . METHOD_8 ( this , STRING_1 , VAR_4 ) . show ( ) ; VAR_5 . METHOD_9 ( VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 response ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_5 ( this , VAR_3 class ) ; METHOD_6 ( intent ) ; TYPE_4 . METHOD_8 ( this , STRING_1 , VAR_4 ) . show ( ) ; VAR_5 . METHOD_9 ( VAR_6 ) ; METHOD_7 ( ) ; }\n"}
{"problem": "public static void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_2 . METHOD_2 ( ) ; for ( TYPE_1 event : VAR_1 ) if ( ( ( event . METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) && ( ( event . METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_3 ) ) ) TYPE_2 . METHOD_5 ( event ) ; }\n", "fixed": "public static void METHOD_1 ( android.content.Context context , java.util.List < TYPE_1 > VAR_1 ) { TYPE_2 . METHOD_2 ( context ) ; for ( TYPE_1 event : VAR_1 ) if ( ( ( event . METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) && ( ( event . METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_3 ) ) ) TYPE_2 . METHOD_5 ( event ) ; }\n"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( java.lang.String [ ] args ) { if ( ( args == null ) || ( ( args.length ) != INT_1 ) ) view . METHOD_2 ( STRING_1 ) ; else { this . VAR_1 = args [ 0 ] ; this . method = args [ INT_1 ] ; VAR_2 . METHOD_3 ( VAR_1 , method ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String [ ] args ) { if ( ( args == null ) || ( ( args.length ) != INT_1 ) ) view . METHOD_2 ( STRING_1 ) ; else { this . VAR_1 = args [ 0 ] ; this . method = args [ 1 ] ; VAR_2 . METHOD_3 ( VAR_1 , method ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_1 ( STRING_1 , VAR_2 class ) ; VAR_1 . METHOD_1 ( STRING_2 , VAR_3 class ) ; VAR_1 . METHOD_1 ( STRING_3 , VAR_4 class ) ; VAR_1 . METHOD_1 ( STRING_4 , VAR_5 class ) ; VAR_1 . METHOD_1 ( STRING_5 , VAR_6 class ) ; VAR_1 . METHOD_1 ( STRING_6 , VAR_7 class ) ; VAR_1 . METHOD_1 ( STRING_7 , VAR_8 class ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_1 ( STRING_1 , VAR_2 class ) ; VAR_1 . METHOD_1 ( STRING_2 , VAR_3 class ) ; VAR_1 . METHOD_1 ( STRING_3 , VAR_4 class ) ; VAR_1 . METHOD_1 ( STRING_4 , VAR_5 class ) ; VAR_1 . METHOD_1 ( STRING_5 , VAR_6 class ) ; VAR_1 . METHOD_1 ( STRING_6 , VAR_7 class ) ; }\n"}
{"problem": "public static void METHOD_1 ( java.lang.String name , java.lang.String content ) { java.lang.String output = ( ( ( ( VAR_1 . format ( TYPE_1 . date ) ) + STRING_1 ) + name ) + STRING_2 ) + content ; if ( VAR_2 . METHOD_2 ( ) ) { java.lang.System.out.println ( output ) ; } TYPE_1 . METHOD_3 ( output ) ; }\n", "fixed": "public static void METHOD_1 ( java.lang.String name , java.lang.String content ) { TYPE_1 . date = new java.util.Date ( ) ; java.lang.String output = ( ( ( ( VAR_1 . format ( TYPE_1 . date ) ) + STRING_1 ) + name ) + STRING_2 ) + content ; if ( VAR_2 . METHOD_2 ( ) ) { java.lang.System.out.println ( output ) ; } TYPE_1 . METHOD_3 ( output ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . add ( VAR_2 ) ; final TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_3 . METHOD_3 ( VAR_5 ) ; VAR_3 . METHOD_4 ( VAR_6 ) ; VAR_3 . METHOD_5 ( STRING_1 ) ; VAR_3 . METHOD_6 ( VAR_7 ) ; final TYPE_2 < TYPE_3 , TYPE_4 > result = VAR_3 . METHOD_7 ( ) ; TYPE_5 . METHOD_8 ( result . METHOD_9 ( ) ) ; VAR_8 = METHOD_10 ( result ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . add ( VAR_2 ) ; VAR_1 . add ( VAR_2 ) ; final TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_3 . METHOD_3 ( VAR_5 ) ; VAR_3 . METHOD_4 ( VAR_6 ) ; VAR_3 . METHOD_5 ( STRING_1 ) ; VAR_3 . METHOD_6 ( VAR_7 ) ; final TYPE_2 < TYPE_3 , TYPE_4 > result = VAR_3 . METHOD_7 ( ) ; TYPE_5 . METHOD_8 ( result . METHOD_9 ( ) ) ; VAR_8 = METHOD_10 ( result ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 c ; while ( VAR_1 ) { c = null ; try { c = VAR_2 . METHOD_2 ( null ) ; synchronized ( VAR_2 ) { if ( c != null ) { VAR_3 . METHOD_3 ( c ) ; } } } finally { if ( c != null ) { VAR_2 . METHOD_4 ( c ) ; } } } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 c = null ; try { c = VAR_2 . METHOD_2 ( null ) ; synchronized ( VAR_2 ) { if ( c != null ) { VAR_3 . METHOD_3 ( c ) ; } } } finally { if ( c != null ) { VAR_2 . METHOD_4 ( c ) ; } } }\n"}
{"problem": "public final void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { TYPE_2 VAR_3 = this . VAR_3 ; if ( VAR_3 != null ) { TYPE_3 VAR_4 = ( ( TYPE_4 ) ( VAR_3 ) ) . VAR_4 ; if ( VAR_4 != null ) VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; } if ( ( ( VAR_5 . METHOD_2 ( ) ) == 0 ) && ( VAR_3 != null ) ) { VAR_3 . METHOD_3 ( ) ; this . VAR_3 = null ; } }\n", "fixed": "public final synchronized void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { TYPE_2 VAR_3 = this . VAR_3 ; if ( VAR_3 != null ) { TYPE_3 VAR_4 = ( ( TYPE_4 ) ( VAR_3 ) ) . VAR_4 ; if ( VAR_4 != null ) VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; } if ( ( ( VAR_5 . size ( ) ) == 0 ) && ( VAR_3 != null ) ) { VAR_3 . METHOD_3 ( ) ; this . VAR_3 = null ; } }\n"}
{"problem": "private TYPE_1 < java.util.List < java.lang.Integer > > METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { final java.util.List < java.lang.Integer > VAR_2 = new java.util.ArrayList < > ( ) ; for ( final java.lang.String token : VAR_1 ) { final TYPE_1 < java.lang.Integer > index = METHOD_2 ( token ) ; if ( ! ( index . METHOD_3 ( ) ) ) { return TYPE_1 . METHOD_4 ( ) ; } VAR_2 . add ( index . get ( ) ) ; } return TYPE_1 . METHOD_5 ( VAR_2 ) ; }\n", "fixed": "private TYPE_1 < java.util.List < java.lang.Integer > > METHOD_2 ( java.util.List < java.lang.String > VAR_1 ) { final java.util.List < java.lang.Integer > VAR_2 = new java.util.ArrayList < > ( ) ; for ( final java.lang.String token : VAR_1 ) { final TYPE_1 < java.lang.Integer > index = METHOD_2 ( token ) ; if ( ! ( index . METHOD_3 ( ) ) ) { return TYPE_1 . METHOD_4 ( ) ; } VAR_2 . add ( index . get ( ) ) ; } return TYPE_1 . METHOD_5 ( VAR_2 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) return this . field . METHOD_3 ( ) ; if ( VAR_1 . METHOD_4 ( ) ) return this ; return new TYPE_1 ( this . field , this . field . METHOD_5 ( this . VAR_2 , VAR_3 ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( this . METHOD_2 ( ) ) || ( VAR_1 . METHOD_2 ( ) ) ) return this . field . METHOD_3 ( ) ; if ( this . METHOD_4 ( ) ) return VAR_1 ; if ( VAR_1 . METHOD_4 ( ) ) return this ; return new TYPE_1 ( this . field , this . field . METHOD_5 ( this . VAR_2 , VAR_3 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; METHOD_2 ( VAR_2 . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( new TYPE_1 ( STRING_2 , VAR_1 ) ) ; VAR_3 . init ( VAR_1 ) ; METHOD_5 ( VAR_4 , METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_2 . METHOD_8 ( VAR_5 class ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; METHOD_2 ( VAR_2 . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( new TYPE_1 ( STRING_2 , VAR_1 ) ) ; VAR_3 . init ( VAR_1 , new java.lang.String [ ] { } ) ; METHOD_5 ( VAR_4 , METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_2 . METHOD_8 ( VAR_5 class ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { if ( ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) instanceof TYPE_2 ) ) && ( ! ( ( VAR_1 ) instanceof TYPE_3 ) ) ) { event . METHOD_2 ( true ) ; VAR_3 . METHOD_3 ( VAR_1 , VAR_4 , event . x , event . y , VAR_5 , TYPE_4 . METHOD_4 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) instanceof TYPE_2 ) ) { event . METHOD_2 ( true ) ; VAR_3 . METHOD_3 ( VAR_1 , VAR_4 , event . x , event . y , VAR_5 , TYPE_4 . METHOD_4 ( ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( float VAR_1 , float VAR_2 ) { METHOD_2 ( STRING_1 ) ; this . VAR_3 = ( ( float ) ( TYPE_1 . METHOD_3 ( ( VAR_2 - ( this . VAR_4 . METHOD_4 ( ) . y ) ) , ( VAR_1 - ( this . VAR_4 . METHOD_4 ( ) . x ) ) ) ) ) * ( VAR_5 ) ; this . VAR_3 = java.lang.Math.round ( this . VAR_3 ) ; this . VAR_6 = this . VAR_4 . METHOD_5 ( ) ; METHOD_2 ( STRING_2 ) ; }\n", "fixed": "public void METHOD_1 ( float VAR_1 , float VAR_2 ) { this . VAR_3 = ( ( float ) ( TYPE_1 . METHOD_3 ( ( VAR_2 - ( this . VAR_4 . METHOD_4 ( ) . y ) ) , ( VAR_1 - ( this . VAR_4 . METHOD_4 ( ) . x ) ) ) ) ) * ( VAR_5 ) ; this . VAR_3 = java.lang.Math.round ( this . VAR_3 ) ; this . VAR_6 = this . VAR_4 . METHOD_5 ( ) ; }\n"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "      * base64-encoded and appear each on their own line. A length of -1 is used to encode a null\n      * array. The last line is optional. If present, it contains the TLS version.\n      */\n    public Entry(Source in) throws IOException {\n       try {\n         BufferedSource source = Okio.buffer(in);\n         url = source.readUtf8LineStrict();", "fixed": "      * base64-encoded and appear each on their own line. A length of -1 is used to encode a null\n      * array. The last line is optional. If present, it contains the TLS version.\n      */\n    Entry(Source in) throws IOException {\n       try {\n         BufferedSource source = Okio.buffer(in);\n         url = source.readUtf8LineStrict();", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) { java.lang.String VAR_5 = VAR_3 . getText ( ) . toString ( ) ; java.lang.String VAR_6 = VAR_4 . getText ( ) . toString ( ) ; TYPE_2 temp = new TYPE_2 ( VAR_5 , VAR_6 ) ; VAR_7 . add ( temp ) ; VAR_8 . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; VAR_9 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) { java.lang.String VAR_5 = VAR_3 . getText ( ) . toString ( ) . trim ( ) ; java.lang.String VAR_6 = VAR_4 . getText ( ) . toString ( ) . trim ( ) ; TYPE_2 temp = new TYPE_2 ( VAR_5 , VAR_6 ) ; VAR_7 . add ( temp ) ; VAR_8 . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; VAR_9 . METHOD_5 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; super . init ( ) ; TYPE_2 . METHOD_2 ( this , STRING_1 , STRING_2 ) ; TYPE_3 . METHOD_3 ( this , VAR_2 class ) ; TYPE_4 . METHOD_4 ( ) . METHOD_5 ( ) ; TYPE_5 . METHOD_6 ( getIntent ( ) ) ; METHOD_7 ( VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; super . init ( ) ; TYPE_3 . METHOD_3 ( this , VAR_2 class ) ; TYPE_4 . METHOD_4 ( ) . METHOD_5 ( ) ; TYPE_5 . METHOD_6 ( getIntent ( ) ) ; METHOD_7 ( VAR_3 ) ; }\n"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"problem": "public void METHOD_1 ( int VAR_1 , int VAR_2 ) { int VAR_3 = METHOD_2 ( VAR_1 ) ; float [ ] VAR_4 = new float [ ] { VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 } ; TYPE_1 VAR_5 = new TYPE_1 ( VAR_4 , null , null ) ; TYPE_2 VAR_6 = new TYPE_2 ( VAR_5 ) ; VAR_6 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 , int VAR_2 ) { int VAR_3 = METHOD_2 ( VAR_1 ) ; float [ ] VAR_4 = new float [ ] { VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 } ; TYPE_1 VAR_5 = new TYPE_1 ( VAR_4 , null , null ) ; TYPE_2 VAR_6 = new TYPE_2 ( VAR_5 ) ; VAR_6 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; METHOD_1 ( VAR_6 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 c ) throws TYPE_2 { VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_2 = c . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( 1 , VAR_3 ) ; TYPE_4 VAR_4 = VAR_2 . METHOD_5 ( ) ; while ( VAR_4 . METHOD_6 ( ) ) { VAR_1 . add ( VAR_4 . getInt ( STRING_2 ) ) ; } VAR_4 . METHOD_7 ( ) ; VAR_2 . METHOD_7 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 c ) throws TYPE_2 { VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_2 = c . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( 1 , VAR_3 ) ; TYPE_4 VAR_4 = VAR_2 . METHOD_5 ( ) ; while ( VAR_4 . METHOD_6 ( ) ) { if ( VAR_1 . contains ( VAR_4 . getInt ( STRING_2 ) ) ) continue ; VAR_1 . add ( VAR_4 . getInt ( STRING_2 ) ) ; } VAR_4 . METHOD_7 ( ) ; VAR_2 . METHOD_7 ( ) ; }\n"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_1 VAR_4 ) { VAR_4 . METHOD_2 ( VAR_5 ) ; VAR_4 . METHOD_3 ( VAR_6 ) ; VAR_4 . METHOD_4 ( VAR_7 ) ; VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_1 ) ) ; VAR_4 . METHOD_7 ( java.lang.Integer . METHOD_6 ( VAR_3 ) ) ; VAR_4 . METHOD_8 ( java.lang.Integer . METHOD_6 ( VAR_2 ) ) ; }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_1 VAR_4 ) { VAR_4 . METHOD_2 ( VAR_5 ) ; VAR_4 . METHOD_3 ( VAR_6 ) ; VAR_4 . METHOD_4 ( VAR_7 ) ; VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_1 . toUpperCase ( ) ) ) ; VAR_4 . METHOD_7 ( java.lang.Integer . METHOD_6 ( VAR_3 ) ) ; VAR_4 . METHOD_8 ( java.lang.Integer . METHOD_6 ( VAR_2 ) ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { try { java.io.FileOutputStream VAR_1 = new java.io.FileOutputStream ( VAR_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; TYPE_2 . METHOD_3 ( VAR_5 , STRING_1 ) ; } catch ( java.io.IOException VAR_6 ) { VAR_6 . METHOD_4 ( ) ; } }\n", "fixed": "private void METHOD_1 ( ) { try { java.io.FileOutputStream VAR_1 = new java.io.FileOutputStream ( VAR_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; TYPE_2 . METHOD_3 ( STRING_1 ) ; } catch ( java.io.IOException VAR_6 ) { VAR_6 . METHOD_4 ( ) ; } }\n"}
{"problem": "private double METHOD_1 ( java.lang.String query , java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = query . split ( STRING_1 ) ; java.util.Set < java.lang.String > VAR_3 = new java.util.HashSet < > ( ) ; int count = 0 ; for ( java.lang.String VAR_4 : VAR_2 ) { VAR_3 . add ( VAR_4 ) ; } for ( java.lang.String VAR_5 : VAR_3 ) { count += TYPE_1 . METHOD_2 ( VAR_1 , VAR_5 ) ; } return count ; }\n", "fixed": "private double METHOD_1 ( java.lang.String query , java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = query . toLowerCase ( ) . split ( STRING_1 ) ; java.util.Set < java.lang.String > VAR_3 = new java.util.HashSet < > ( ) ; int count = 0 ; for ( java.lang.String VAR_4 : VAR_2 ) { VAR_3 . add ( VAR_4 ) ; } for ( java.lang.String VAR_5 : VAR_3 ) { count += TYPE_1 . METHOD_2 ( VAR_1 . toLowerCase ( ) , VAR_5 ) ; } return count ; }\n"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testBurstySampling() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "fixed": "     public void testBurstySampling() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "sourceBeforeFix": "mock.expectedMessageCount(3)", "sourceAfterFix": "mock.expectedMinimumMessageCount(3)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ; java.lang.System.out.println ( VAR_3 . get ( VAR_2 ) ) ; VAR_4 = VAR_3 . get ( VAR_2 ) . split ( STRING_1 ) ; if ( VAR_5 . METHOD_3 ( VAR_4 [ 0 ] , VAR_4 [ 1 ] ) ) { VAR_2 . METHOD_4 ( VAR_6 ) ; VAR_2 . setEnabled ( false ) ; } else { METHOD_5 ( STRING_2 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ; java.lang.System.out.println ( VAR_3 . get ( VAR_2 ) ) ; VAR_4 = VAR_3 . get ( VAR_2 ) . split ( STRING_1 ) ; if ( VAR_5 . METHOD_3 ( java.lang.Integer.parseInt ( VAR_4 [ 0 ] ) , java.lang.Integer.parseInt ( VAR_4 [ 1 ] ) ) ) { VAR_2 . METHOD_4 ( VAR_6 ) ; VAR_2 . setEnabled ( false ) ; } else { METHOD_5 ( STRING_2 ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( int VAR_1 , java.lang.String name ) { if ( ( VAR_1 > ( VAR_2 . size ( ) ) ) || ( METHOD_2 ( VAR_1 ) ) ) return false ; VAR_2 . get ( VAR_1 ) . add ( name ) ; return true ; }\n", "fixed": "public boolean METHOD_1 ( int VAR_1 , java.lang.String name ) { if ( ( ( VAR_1 < 0 ) || ( VAR_1 > ( VAR_2 . size ( ) ) ) ) || ( METHOD_2 ( VAR_1 ) ) ) return false ; VAR_2 . get ( VAR_1 ) . add ( name ) ; return true ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; VAR_2 . setText ( VAR_1 . getName ( ) ) ; VAR_3 . setText ( getString ( VAR_4 , VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) ) ) ; VAR_5 . setText ( VAR_1 . METHOD_4 ( ) ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; VAR_2 . setText ( VAR_1 . getName ( ) ) ; VAR_3 . setText ( getString ( VAR_4 , java.lang.Double . toString ( VAR_1 . METHOD_2 ( ) ) , java.lang.Double . toString ( VAR_1 . METHOD_3 ( ) ) ) ) ; VAR_5 . setText ( VAR_1 . METHOD_4 ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 ) && ( ( VAR_2 ) == null ) ) VAR_2 = new TYPE_1 ( VAR_3 , new java.io.File ( VAR_3 . METHOD_2 ( ) , ( ( STRING_1 + ( VAR_4 ) ) + STRING_2 ) ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 ) && ( ( VAR_2 ) == null ) ) { VAR_2 = new TYPE_1 ( VAR_3 , new java.io.File ( VAR_3 . METHOD_2 ( ) , ( ( STRING_1 + ( VAR_4 ) ) + STRING_2 ) ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . info ( \"\\n\" ) ; VAR_1 . info ( STRING_1 ) ; TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 ) ; if ( VAR_2 != null ) { VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_1 . info ( STRING_2 , VAR_4 ) ; } VAR_2 . METHOD_4 ( VAR_4 ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; VAR_1 . info ( STRING_3 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . info ( \"\\n\" ) ; VAR_1 . info ( STRING_1 ) ; if ( ( VAR_3 . METHOD_2 ( VAR_4 ) ) != null ) { VAR_3 . METHOD_3 ( VAR_3 . METHOD_2 ( VAR_4 ) ) ; VAR_1 . info ( STRING_2 , VAR_4 ) ; } TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; VAR_1 . info ( STRING_3 ) ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( android.content.Context VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) ; java.lang.String VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 , VAR_2 ) ; java.lang.String VAR_5 = VAR_6 ; java.lang.String VAR_7 = VAR_8 ; java.lang.String VAR_9 = VAR_10 ; int VAR_11 = VAR_12 ; int VAR_13 = 0 ; return new TYPE_1 ( VAR_4 , VAR_5 , VAR_7 , VAR_9 , VAR_11 , VAR_13 ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( android.content.Context VAR_1 ) { java.lang.String VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; java.lang.String VAR_5 = VAR_6 ; java.lang.String VAR_7 = VAR_8 ; java.lang.String VAR_9 = VAR_10 ; int VAR_11 = VAR_12 ; int VAR_13 = 0 ; return new TYPE_1 ( VAR_4 , VAR_5 , VAR_7 , VAR_9 , VAR_11 , VAR_13 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; VAR_3 = ( ( TYPE_3 ) ( view . METHOD_3 ( VAR_4 ) ) ) ; java.lang.String VAR_5 = VAR_3 . getText ( ) . toString ( ) ; android.content.Intent intent = new android.content.Intent ( METHOD_4 ( ) , VAR_6 class ) ; intent . METHOD_5 ( VAR_7 , VAR_8 ) ; intent . METHOD_5 ( VAR_9 , VAR_5 ) ; METHOD_6 ( intent , 1 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; VAR_3 = ( ( TYPE_3 ) ( view . METHOD_3 ( VAR_4 ) ) ) ; java.lang.String VAR_5 = VAR_3 . getText ( ) . toString ( ) ; android.content.Intent intent = new android.content.Intent ( METHOD_4 ( ) , VAR_6 class ) ; intent . METHOD_5 ( VAR_7 , VAR_8 ) ; intent . METHOD_5 ( VAR_9 , VAR_5 ) ; METHOD_6 ( intent , 0 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"project": "Closure", "bugId": 97, "problem": " private Node tryFoldShift(Node n, Node left, Node right) {\n          result = lvalInt >>> rvalInt;\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +", "fixed": " private Node tryFoldShift(Node n, Node left, Node right) {\n          long lvalLong = lvalInt & 0xffffffffL;\n          result = lvalLong >>> rvalInt;\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +", "observations": "", "repairActions": ["assignAdd", "assignExpChange", "varAdd"], "repairPatterns": ["expArithMod", "missComp", "singleLine"]}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( long VAR_1 ) { if ( ( ( this . VAR_2 ) + VAR_1 ) < 0 ) { long VAR_3 = ( this . VAR_2 ) + VAR_1 ; this . VAR_2 += VAR_1 - VAR_3 ; } else { this . VAR_2 = VAR_1 ; } }\n", "fixed": "public void METHOD_1 ( long VAR_1 ) { if ( ( ( this . VAR_2 ) + VAR_1 ) < 0 ) { long VAR_3 = ( this . VAR_2 ) + VAR_1 ; this . VAR_2 += VAR_1 - VAR_3 ; } else { this . VAR_2 += VAR_1 ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public java.lang.String METHOD_1 ( ) { java.lang.String [ ] VAR_1 = METHOD_2 ( ) ; java.lang.String VAR_2 = STRING_1 ; for ( java.lang.String VAR_3 : VAR_1 ) { if ( TYPE_1 . METHOD_3 ( VAR_2 ) ) { VAR_2 += STRING_2 ; } VAR_2 += TYPE_2 . METHOD_4 ( VAR_3 ) . METHOD_5 ( ) ; } return VAR_2 ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { java.lang.String VAR_2 = STRING_1 ; java.lang.String [ ] VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { for ( java.lang.String VAR_3 : VAR_1 ) { if ( TYPE_1 . METHOD_3 ( VAR_2 ) ) { VAR_2 += STRING_2 ; } VAR_2 += TYPE_2 . METHOD_4 ( VAR_3 ) . METHOD_5 ( ) ; } } return VAR_2 ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.String VAR_2 = STRING_2 ; if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { VAR_2 = STRING_3 ; } VAR_2 += METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; int i = 0 ; while ( ( VAR_1 . METHOD_5 ( i ) ) != null ) { VAR_2 += METHOD_3 ( VAR_1 . METHOD_5 ( ( i ++ ) ) ) ; } return VAR_2 ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.String VAR_2 = STRING_2 ; if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { VAR_2 = STRING_3 ; } VAR_2 += METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; int i = 0 ; while ( ( VAR_1 . METHOD_5 ( i ) ) != null ) { VAR_2 += METHOD_3 ( VAR_1 . METHOD_5 ( ( i ++ ) ) ) ; i ++ ; } return VAR_2 ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = ( VAR_2 ) + STRING_1 ; if ( VAR_3 . contains ( VAR_4 ) ) { switch ( VAR_4 ) { case VAR_5 : VAR_1 = ( VAR_2 ) + STRING_1 ; break ; case VAR_6 : VAR_1 = ( VAR_2 ) + STRING_2 ; break ; case VAR_7 : VAR_1 = ( VAR_8 ) + STRING_1 ; break ; case VAR_9 : VAR_1 = ( VAR_8 ) + STRING_2 ; break ; } } else { VAR_4 = VAR_5 ; } return VAR_1 ; }\n", "fixed": "protected java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = ( VAR_2 ) + STRING_1 ; if ( VAR_3 . contains ( VAR_4 ) ) { switch ( VAR_4 ) { case VAR_5 : VAR_1 = ( VAR_2 ) + STRING_1 ; break ; case VAR_6 : VAR_1 = ( VAR_2 ) + STRING_2 ; break ; case VAR_7 : VAR_1 = ( VAR_8 ) + STRING_1 ; break ; case VAR_9 : VAR_1 = ( VAR_8 ) + STRING_2 ; break ; } } else { VAR_4 = VAR_5 ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "ec5961a27122b228cb8adb634ee183eebcefa98c", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     return new mapredWork(\"\", \n                           new LinkedHashMap<String, ArrayList<String>> (),\n                           new LinkedHashMap<String, partitionDesc> (),\n                          new HashMap<String, Operator<? extends Serializable>> (),\n                           new tableDesc(),\n                           new ArrayList<tableDesc> (),\n                           null,", "fixed": "     return new mapredWork(\"\", \n                           new LinkedHashMap<String, ArrayList<String>> (),\n                           new LinkedHashMap<String, partitionDesc> (),\n                          new LinkedHashMap<String, Operator<? extends Serializable>> (),\n                           new tableDesc(),\n                           new ArrayList<tableDesc> (),\n                           null,", "sourceBeforeFix": "HashMap<String,Operator<? extends Serializable>>", "sourceAfterFix": "LinkedHashMap<String,Operator<? extends Serializable>>"}
{"problem": "private boolean METHOD_1 ( TYPE_1 expr , java.lang.String array , java.lang.String var ) { if ( ( ( expr . getType ( ) ) == ( VAR_1 ) ) && ( expr . getText ( ) . equals ( var ) ) ) { return METHOD_2 ( expr , array , var ) ; } for ( TYPE_1 VAR_2 = expr . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( METHOD_1 ( VAR_2 , array , var ) ) { return true ; } } return false ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 expr , java.lang.String array , java.lang.String var ) { if ( ( ( expr . getType ( ) ) == ( VAR_1 ) ) && ( expr . getText ( ) . equals ( var ) ) ) { return METHOD_2 ( expr , array ) ; } for ( TYPE_1 VAR_2 = expr . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( METHOD_1 ( VAR_2 , array , var ) ) { return true ; } } return false ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) || ( ( METHOD_3 ( ) ) > 0 ) ) if ( ( METHOD_4 ( ) . size ( ) ) == 0 ) return STRING_1 ; else return STRING_2 ; else return STRING_3 ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) || ( ( METHOD_3 ( ) ) > 0 ) ) { if ( METHOD_4 ( ) . isEmpty ( ) ) { return STRING_1 ; } else { return STRING_2 ; } } else { return STRING_3 ; } }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( java.util.Date VAR_1 , TYPE_2 VAR_2 , java.lang.Integer VAR_3 ) { java.lang.Object [ ] params = new java.lang.Object [ ] { VAR_1 , VAR_1 , VAR_3 == null ? null : VAR_3 , VAR_2 == null ? null : VAR_2 . getId ( ) } ; java.util.List < TYPE_1 > list = ( ( java.util.List < TYPE_1 > ) ( VAR_4 . execute ( params ) ) ) ; return list ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( java.util.Date VAR_1 , TYPE_2 VAR_2 , java.lang.Integer VAR_3 ) { java.lang.Object [ ] params = new java.lang.Object [ ] { VAR_1 , VAR_1 , VAR_3 , VAR_2 == null ? null : VAR_2 . getId ( ) } ; java.util.List < TYPE_1 > list = ( ( java.util.List < TYPE_1 > ) ( VAR_4 . execute ( params ) ) ) ; return list ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DisruptorVmEndpointBuilder\n             extends\n                 DisruptorVmEndpointConsumerBuilder, DisruptorVmEndpointProducerBuilder {\n         default AdvancedDisruptorVmEndpointBuilder advanced() {", "fixed": "     \n    public interface DisruptorVmEndpointBuilder\n             extends\n                 DisruptorVmEndpointConsumerBuilder, DisruptorVmEndpointProducerBuilder {\n         default AdvancedDisruptorVmEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "protected java.util.List < TYPE_1 > METHOD_1 ( ) { VAR_1 = new TYPE_2 ( this ) ; return VAR_2 < TYPE_1 > METHOD_2 ( new TYPE_3 ( ) , new TYPE_4 ( ) , new TYPE_5 ( ) , new TYPE_6 ( ) , new TYPE_7 ( ) , VAR_1 ) ; }\n", "fixed": "protected java.util.List < TYPE_1 > METHOD_1 ( ) { VAR_1 = new TYPE_2 ( this ) ; return VAR_2 < TYPE_1 > METHOD_2 ( new TYPE_3 ( ) , new TYPE_4 ( this ) , new TYPE_5 ( ) , new TYPE_6 ( ) , new TYPE_7 ( ) , VAR_1 ) ; }\n"}
{"fixCommitSHA1": "2b27f6006b63686c9e8f1ff03b411ab2a6d1c791", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         template.sendBodyAndHeader(serverUri, \"Hello World\", HttpProducer.QUERY, \"one=uno&two=dos\");\n        assertMockEndpointsSatisifed();\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "fixed": "         template.sendBodyAndHeader(serverUri, \"Hello World\", HttpProducer.QUERY, \"one=uno&two=dos\");\n        assertMockEndpointsSatisfied();\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "sourceBeforeFix": "assertMockEndpointsSatisifed()", "sourceAfterFix": "assertMockEndpointsSatisfied()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { this . VAR_2 = VAR_2 ; if ( ( ( VAR_3 ) != null ) && ( VAR_4 ) ) { VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_1 ( ( ( TYPE_1 ) ( VAR_1 . METHOD_3 ( ) ) ) , VAR_2 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { this . VAR_2 = VAR_2 ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_1 ( ( ( TYPE_1 ) ( VAR_1 . METHOD_3 ( ) ) ) , VAR_2 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; while ( ! ( VAR_1 . METHOD_2 ( ) ) ) { java.lang.System.out.println ( STRING_2 ) ; try { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_3 . METHOD_3 ( ) ) ) ; java.lang.System.out.println ( STRING_3 ) ; VAR_4 . put ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ; java.lang.System.out.println ( STRING_4 ) ; java.lang.Thread . METHOD_4 ( INT_1 ) ; } catch ( java.lang.ClassNotFoundException | java.io.IOException | TYPE_3 VAR_5 ) { VAR_5 . METHOD_5 ( ) ; return ; } } }\n", "fixed": "public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; while ( ! ( VAR_1 . METHOD_2 ( ) ) ) { java.lang.System.out.println ( STRING_2 ) ; try { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_3 . METHOD_3 ( ) ) ) ; java.lang.System.out.println ( STRING_3 ) ; VAR_4 . put ( new TYPE_2 ( VAR_1 , out , VAR_2 ) ) ; java.lang.System.out.println ( STRING_4 ) ; java.lang.Thread . METHOD_4 ( INT_1 ) ; } catch ( java.lang.ClassNotFoundException | java.io.IOException | TYPE_3 VAR_5 ) { VAR_5 . METHOD_5 ( ) ; return ; } } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . assertEquals ( STRING_1 , METHOD_2 ( 1 ) . toString ( ) ) ; TYPE_1 . assertEquals ( STRING_2 , METHOD_2 ( INT_1 ) . toString ( ) ) ; TYPE_1 . assertEquals ( STRING_3 , METHOD_2 ( INT_2 ) . toString ( ) ) ; TYPE_1 . assertEquals ( STRING_4 , METHOD_2 ( INT_3 ) . toString ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . assertEquals ( STRING_1 , METHOD_2 ( 0 ) . toString ( ) ) ; TYPE_1 . assertEquals ( STRING_1 , METHOD_2 ( 1 ) . toString ( ) ) ; TYPE_1 . assertEquals ( STRING_2 , METHOD_2 ( INT_1 ) . toString ( ) ) ; TYPE_1 . assertEquals ( STRING_3 , METHOD_2 ( INT_2 ) . toString ( ) ) ; TYPE_1 . assertEquals ( STRING_4 , METHOD_2 ( INT_3 ) . toString ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Throwable { final java.lang.String VAR_1 = ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_2 ) ) + STRING_4 ; final java.lang.String VAR_3 = STRING_5 ; METHOD_2 ( VAR_1 , VAR_3 , true , METHOD_3 ( VAR_4 . METHOD_4 ( ) ) , VAR_5 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Throwable { final java.lang.String VAR_1 = ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_2 ) ) + STRING_4 ; final java.lang.String VAR_3 = STRING_5 ; METHOD_2 ( VAR_1 , METHOD_3 ( VAR_4 . METHOD_4 ( ) ) , VAR_5 , VAR_3 , true ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static java.lang.Integer METHOD_1 ( TYPE_1 string ) { if ( string == null ) { return null ; } try { TYPE_2 date = TYPE_2 . METHOD_2 ( string . METHOD_3 ( ) , VAR_1 ) ; return date . METHOD_4 ( ) ; } catch ( java.lang.Exception VAR_2 ) { } return null ; }\n", "fixed": "public static long METHOD_1 ( TYPE_1 string ) { if ( string == null ) { return - 1 ; } try { TYPE_2 date = TYPE_2 . METHOD_2 ( string . METHOD_3 ( ) , VAR_1 ) ; return date . METHOD_4 ( ) ; } catch ( java.lang.Exception VAR_2 ) { return - 1 ; } }\n"}
