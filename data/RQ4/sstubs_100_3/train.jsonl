{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "00644912992eceb3de7d2dc0213a05bf2844c1b2", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     LOG.error(\"TachyonClient accessLocalFile(\" + fileId + \") failed\");\n   }\n  public void addCheckpoint(int fileId) \n       throws FileDoesNotExistException, SuspectedFileSizeException, FailedToCheckpointException {\n     connectAndGetLocalWorker();\n     if (!mConnected) {", "fixed": "     LOG.error(\"TachyonClient accessLocalFile(\" + fileId + \") failed\");\n   }\n  public synchronized void addCheckpoint(int fileId) \n       throws FileDoesNotExistException, SuspectedFileSizeException, FailedToCheckpointException {\n     connectAndGetLocalWorker();\n     if (!mConnected) {", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSqlEndpointBuilder\n             extends\n                 AdvancedSqlEndpointConsumerBuilder, AdvancedSqlEndpointProducerBuilder {\n         default SqlEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSqlEndpointBuilder\n             extends\n                 AdvancedSqlEndpointConsumerBuilder, AdvancedSqlEndpointProducerBuilder {\n         default SqlEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5924329db91d304964119a1cf1989b5b2c82f85e", "projectName": "openmrs.openmrs-core", "bugType": "More Specific If", "problem": " \t\t\t\tString other = null;\r\n\t\t\t\tif (args.length > 1)\r\n \t\t\t\t\tother = (String) args[1];\r\n \t\t\t\trecursivelyHandle(SaveHandler.class, (OpenmrsObject) mainArgument, other);\r", "fixed": " \t\t\t\tString other = null;\r\n\t\t\t\tif (args.length > 1 && args[1] instanceof String)\r\n \t\t\t\t\tother = (String) args[1];\r\n \t\t\t\trecursivelyHandle(SaveHandler.class, (OpenmrsObject) mainArgument, other);\r", "sourceBeforeFix": "args.length > 1", "sourceAfterFix": "args.length > 1 && args[1] instanceof String"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1280a4431f69ebc79bca46e1581f5b3c906166a5", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "       ClassSize.ARRAY +\n       40 * ClassSize.REFERENCE + 2 * Bytes.SIZEOF_INT +\n       (11 * Bytes.SIZEOF_LONG) +\n      4 * Bytes.SIZEOF_BOOLEAN);", "fixed": "       ClassSize.ARRAY +\n       40 * ClassSize.REFERENCE + 2 * Bytes.SIZEOF_INT +\n       (11 * Bytes.SIZEOF_LONG) +\n      5 * Bytes.SIZEOF_BOOLEAN);", "sourceBeforeFix": "4 * Bytes.SIZEOF_BOOLEAN", "sourceAfterFix": "5 * Bytes.SIZEOF_BOOLEAN"}
{"fixCommitSHA1": "238869eb9e3d7b02c8a7f0d13459819912ce88d7", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Boolean Literal", "problem": "         client.close();\n     }\n    @Test(groups = { \"standalone\", \"default_provider\" }, enabled = false)\n     public void deferredSimpleWithFailure() throws IOException,\n             ExecutionException, TimeoutException, InterruptedException {\n         AsyncHttpClient client = getAsyncHttpClient(getAsyncHttpClientConfig());", "fixed": "         client.close();\n     }\n    @Test(groups = { \"standalone\", \"default_provider\" }, enabled = true)\n     public void deferredSimpleWithFailure() throws IOException,\n             ExecutionException, TimeoutException, InterruptedException {\n         AsyncHttpClient client = getAsyncHttpClient(getAsyncHttpClientConfig());", "sourceBeforeFix": "enabled=false", "sourceAfterFix": "enabled=true"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "         ret = getMS().updateTableColumnStatistics(colStats);\n         return ret;\n       } finally {\n        endFunction(\"write_column_statistics: \", ret != false);\n       }\n     }", "fixed": "         ret = getMS().updateTableColumnStatistics(colStats);\n         return ret;\n       } finally {\n        endFunction(\"write_column_statistics: \", ret != false, null);\n       }\n     }", "sourceBeforeFix": "endFunction(\"get_column_statistics_by_table: \",statsObj != null)", "sourceAfterFix": "endFunction(\"get_column_statistics_by_table: \",statsObj != null,null)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CoAPEndpointBuilder\n             extends\n                 CoAPEndpointConsumerBuilder, CoAPEndpointProducerBuilder {\n         default AdvancedCoAPEndpointBuilder advanced() {", "fixed": "     \n    public interface CoAPEndpointBuilder\n             extends\n                 CoAPEndpointConsumerBuilder, CoAPEndpointProducerBuilder {\n         default AdvancedCoAPEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "370ead7395fc9194a3dc2d05afc4b3409f6b27da", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     this.outerQueryLimit = -1;\n   }\n  public void setAggregationExprsForClause(String clause, HashMap<String, ASTNode> aggregationTrees) {\n     this.destToAggregationExprs.put(clause, aggregationTrees);\n   }", "fixed": "     this.outerQueryLimit = -1;\n   }\n  public void setAggregationExprsForClause(String clause, LinkedHashMap<String, ASTNode> aggregationTrees) {\n     this.destToAggregationExprs.put(clause, aggregationTrees);\n   }", "sourceBeforeFix": "HashMap<String,HashMap<String,ASTNode>>", "sourceAfterFix": "LinkedHashMap<String,LinkedHashMap<String,ASTNode>>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "         String query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file\";\n         gen.get().addSnippet( \"query1\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         gen.get()\n                 .addSnippet( \"result1\", createQueryResultSnippet( result ) );", "fixed": "         String query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file\";\n         gen.get().addSnippet( \"query1\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         gen.get()\n                 .addSnippet( \"result1\", createQueryResultSnippet( result ) );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6618cef776cf1c9ce67ff8ee461412110ca5ada7", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\texecutor);\n \t\t\t}\n \t\t} catch (Exception e) {\n\t\t\tLOG.warn(\"Exception while fetching metrics.\", e);\n \t\t}\n \t}", "fixed": " \t\t\t\t\texecutor);\n \t\t\t}\n \t\t} catch (Exception e) {\n\t\t\tLOG.debug(\"Exception while fetching metrics.\", e);\n \t\t}\n \t}", "sourceBeforeFix": "LOG.warn(\"Requesting TaskManager's path for query services failed.\",throwable)", "sourceAfterFix": "LOG.debug(\"Requesting TaskManager's path for query services failed.\",throwable)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bf98dcad6cd2048935d2fed2847ce24622cc418a", "projectName": "alibaba.druid", "bugType": "Change Boolean Literal", "problem": "         lock.writeLock().lock();\r\n         try {\r\n             if (whiteList == null) {\r\n                whiteList = new LinkedHashMap<String, Object>(whileListMaxSize, 0.75f, true);\r\n             }\r\n             whiteList.put(sql, PRESENT);\r", "fixed": "         lock.writeLock().lock();\r\n         try {\r\n             if (whiteList == null) {\r\n                whiteList = new LinkedHashMap<String, Object>(whileListMaxSize, 0.75f, false);\r\n             }\r\n             whiteList.put(sql, PRESENT);\r", "sourceBeforeFix": "new LinkedHashMap<String,Object>(whileListMaxSize,0.75f,true)", "sourceAfterFix": "new LinkedHashMap<String,Object>(whileListMaxSize,0.75f,false)"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean touchUp (int screenX, int screenY, int pointer, int button) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].touchUp(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean touchUp (int screenX, int screenY, int pointer, int button) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).touchUp(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3ae343b768bae5973a5634c8e287ae1173e30248", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "             assert amt > 0;\n             prioritizableForTree -= amt;\n             if (parent != null) {\n                parent.decrementPrioritizableForTree(amt);\n             }\n         }", "fixed": "             assert amt > 0;\n             prioritizableForTree -= amt;\n             if (parent != null) {\n                parent.decrementPrioritizableForTree0(amt);\n             }\n         }", "sourceBeforeFix": "parent.decrementPrioritizableForTree(amt)", "sourceAfterFix": "parent.decrementPrioritizableForTree0(amt)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Olingo4EndpointBuilder\n             extends\n                 Olingo4EndpointConsumerBuilder, Olingo4EndpointProducerBuilder {\n         default AdvancedOlingo4EndpointBuilder advanced() {", "fixed": "     \n    public interface Olingo4EndpointBuilder\n             extends\n                 Olingo4EndpointConsumerBuilder, Olingo4EndpointProducerBuilder {\n         default AdvancedOlingo4EndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4bbd778f2b32c39e6f141485b1ca8294390d7046", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\tcam.setMatrices(app.getGraphics());\t\r\n \t\tlong s = System.nanoTime();\r\n\t\tworld.step( app.getGraphics().getDeltaTime(), 8, 3 );\r\n \t\tfloat updateTime = (System.nanoTime()-s)/1000000000.0f;\r\n \t\tfor( int i = 0; i < boxes.size(); i++ )\t\t\t\t\r", "fixed": " \t\tcam.setMatrices(app.getGraphics());\t\r\n \t\tlong s = System.nanoTime();\r\n\t\tworld.step( app.getGraphics().getDeltaTime(), 1, 1 );\r\n \t\tfloat updateTime = (System.nanoTime()-s)/1000000000.0f;\r\n \t\tfor( int i = 0; i < boxes.size(); i++ )\t\t\t\t\r", "sourceBeforeFix": "i < 20", "sourceAfterFix": "i < 100"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.debug(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "fixed": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "sourceBeforeFix": "logger.debug(\"attempting to login\")", "sourceAfterFix": "logger.trace(\"attempting to login\")"}
{"fixCommitSHA1": "c5ccaee5065a52110a4124505002d6afeb7c13ca", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         }\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n            StringBuilder sb = new StringBuilder(64);\n             while (sao.pos < sao.limit) {\n                 byte nextByte = sao.bytes[sao.pos++];\n                 if (nextByte == HttpConstants.CR) {", "fixed": "         }\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n            ByteBuf line = buffer(64);\n             while (sao.pos < sao.limit) {\n                 byte nextByte = sao.bytes[sao.pos++];\n                 if (nextByte == HttpConstants.CR) {", "sourceBeforeFix": "StringBuilder sb=new StringBuilder(64); ", "sourceAfterFix": "ByteBuf line=buffer(64); "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "353cfe61160ef9355cc5e09fa135e81cb0cf0450", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             cacheManager = CacheManagerBuilder.newCacheManagerBuilder().build(true);\n             SimpleRegistry registry = new SimpleRegistry();\n            registry.put(\"myManager\", cacheManager);\n             context = new DefaultCamelContext(registry);\n             context.addRoutes(new RouteBuilder() {", "fixed": "             cacheManager = CacheManagerBuilder.newCacheManagerBuilder().build(true);\n             SimpleRegistry registry = new SimpleRegistry();\n            registry.bind(\"myManager\", cacheManager);\n             context = new DefaultCamelContext(registry);\n             context.addRoutes(new RouteBuilder() {", "sourceBeforeFix": "registry.put(\"myManager\",cacheManager)", "sourceAfterFix": "registry.bind(\"myManager\",cacheManager)"}
{"fixCommitSHA1": "8097cb4e299f056973c04abeaad879eb55f44775", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "4597da262b00311e03c657db986f712387def622", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertTrue(model.getUniqueItems());\n     }\n     @Test", "fixed": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertFalse(model.getUniqueItems());\n     }\n     @Test", "sourceBeforeFix": "assertTrue(model.getUniqueItems())", "sourceAfterFix": "assertFalse(model.getUniqueItems())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "04a010c8499fbc96b1e5a99bdbebaf0b38d24586", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": "* @return {@link\n \tpublic int[] ensureCapacity (int additionalCapacity) {\r\n \t\tint sizeNeeded = size + additionalCapacity;\r\n\t\tif (sizeNeeded >= items.length) resize(Math.max(8, sizeNeeded));\r\n \t\treturn items;\r\n \t}\r", "fixed": "* @return {@link\n \tpublic int[] ensureCapacity (int additionalCapacity) {\r\n \t\tint sizeNeeded = size + additionalCapacity;\r\n\t\tif (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));\r\n \t\treturn items;\r\n \t}\r", "sourceBeforeFix": "sizeNeeded >= items.length", "sourceAfterFix": "sizeNeeded > items.length"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "5ba6ded7e01cc902e75403dac6cb5c5f9d74f74d", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "fixed": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}
{"fixCommitSHA1": "73627df082ff499af4ca1c482f79e304905007eb", "projectName": "alibaba.canal", "bugType": "Same Function More Args", "problem": "                         if (i > 0) {\n                             buf.append(\", \");\n                         }\n                        buf.append('\"').append(key(i)).append('\"');\n                         buf.append(\": \");\n                        element(i).toJsonString(buf);\n                     }\n                     buf.append(\"}\");\n                     break;", "fixed": "                         if (i > 0) {\n                             buf.append(\", \");\n                         }\n                        buf.append('\"').append(key(i, charsetName)).append('\"');\n                         buf.append(\": \");\n                        element(i, charsetName).toJsonString(buf, charsetName);\n                     }\n                     buf.append(\"}\");\n                     break;", "sourceBeforeFix": "m_data.getFixString((int)m_length)", "sourceAfterFix": "m_data.getFixString((int)m_length,charsetName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSqlEndpointBuilder\n             extends\n                 AdvancedSqlEndpointConsumerBuilder, AdvancedSqlEndpointProducerBuilder {\n         default SqlEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSqlEndpointBuilder\n             extends\n                 AdvancedSqlEndpointConsumerBuilder, AdvancedSqlEndpointProducerBuilder {\n         default SqlEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    */\n   public List<DependencyInfo> parseFileReader(String filePath, Reader reader) {\n     depInfos = Lists.newArrayList();\n    logger.info(\"Parsing Dep: \" + filePath);\n     doParse(filePath, reader);\n     return depInfos;\n   }", "fixed": "    */\n   public List<DependencyInfo> parseFileReader(String filePath, Reader reader) {\n     depInfos = Lists.newArrayList();\n    logger.fine(\"Parsing Dep: \" + filePath);\n     doParse(filePath, reader);\n     return depInfos;\n   }", "sourceBeforeFix": "logger.info(\"Parsing Dep: \" + filePath)", "sourceAfterFix": "logger.fine(\"Parsing Dep: \" + filePath)"}
{"fixCommitSHA1": "f60f4dbdad22bbd4ef94ce1b01eb63f9adeb7659", "projectName": "alibaba.druid", "bugType": "Delete Throws Exception", "problem": "         token = Token.LITERAL_HEX;\r\n     }\r\n    public String hexString() throws NumberFormatException {\r\n         return new String(buf, np, sp);\r\n     }\r", "fixed": "         token = Token.LITERAL_HEX;\r\n     }\r\n    public String hexString() {\r\n         return new String(buf, np, sp);\r\n     }\r", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void display(GL2 gl, GLU glu) {\n         markTime++;\n         VizModel vizModel = VizController.getInstance().getVizModel();", "fixed": "     }\n     @Override\n    public synchronized void display(GL2 gl, GLU glu) {\n         markTime++;\n         VizModel vizModel = VizController.getInstance().getVizModel();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "6ee3e54020bc8b28badd689fae4cd34948f78e7a", "projectName": "yusuke.twitter4j", "bugType": "Change Numeric Literal", "problem": "         assertEquals(1, medias.length);\n         MediaEntity media = medias[0];\n         assertEquals(\"pic.twitter.com/qbJx26r\", media.getDisplayURL());\nassertEquals(\"http:\n         assertEquals(76360760611180544L, media.getId());\nassertEquals(\"http:\nassertEquals(\"https:", "fixed": "         assertEquals(1, medias.length);\n         MediaEntity media = medias[0];\n         assertEquals(\"pic.twitter.com/qbJx26r\", media.getDisplayURL());\nassertEquals(\"https:\n         assertEquals(76360760611180544L, media.getId());\nassertEquals(\"http:\nassertEquals(\"https:", "sourceBeforeFix": "twitter1.getRetweeterIds(18594701629l,-1)", "sourceAfterFix": "twitter1.getRetweeterIds(1021608606934822912L,-1)"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Error_Request_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xdf, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Error_Request_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xff", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.error(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "fixed": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "sourceBeforeFix": "LOG.error(\"Ignoring duplicate class \" + className)", "sourceAfterFix": "LOG.warn(\"Ignoring duplicate class \" + className)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GuavaEventBusEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGuavaEventBusEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GuavaEventBusEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGuavaEventBusEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3eb7527a211517cd1e9995239daac6aae5819ede", "projectName": "wildfly.wildfly", "bugType": "Change Unary Operator\t", "problem": "     private String validate(ModelNode param, ModelNode locations) {\n         String failure = typeValidator.validateParameter(SCHEMA_LOCATION, param);\n         String uri = param.asProperty().getName();\n        if (failure == null && !locations.isDefined()) {\n             for (ModelNode node : locations.asList()) {\n                 if (uri.equals(node.asProperty().getName())) {\n                     failure = \"Schema with URI \" + uri + \" already registered with location \" + node.asProperty().getValue().asString();", "fixed": "     private String validate(ModelNode param, ModelNode locations) {\n         String failure = typeValidator.validateParameter(SCHEMA_LOCATION, param);\n         String uri = param.asProperty().getName();\n        if (failure == null && locations.isDefined()) {\n             for (ModelNode node : locations.asList()) {\n                 if (uri.equals(node.asProperty().getName())) {\n                     failure = \"Schema with URI \" + uri + \" already registered with location \" + node.asProperty().getValue().asString();", "sourceBeforeFix": "!locations.isDefined()", "sourceAfterFix": "locations.isDefined()"}
{"fixCommitSHA1": "6b415679e1fd7d46122b8a4ddadd4fa422c635ca", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": "if (i < start + 2 || i > start + 9) break;\n \t\t\t\t\tColor color = colorPool.obtain();\n \t\t\t\t\tcolorStack.add(color);\n\t\t\t\t\tColor.rgb888ToColor(color, colorInt);\nif (i <= start + 7) color.a = 1f;\n \t\t\t\t\treturn i - start;\n \t\t\t\t}", "fixed": "if (i < start + 2 || i > start + 9) break;\n \t\t\t\t\tColor color = colorPool.obtain();\n \t\t\t\t\tcolorStack.add(color);\n\t\t\t\t\tColor.rgba8888ToColor(color, colorInt);\nif (i <= start + 7) color.a = 1f;\n \t\t\t\t\treturn i - start;\n \t\t\t\t}", "sourceBeforeFix": "Color.rgb888ToColor(color,colorInt)", "sourceAfterFix": "Color.rgba8888ToColor(color,colorInt)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JcloudsEndpointBuilder\n             extends\n                 JcloudsEndpointConsumerBuilder, JcloudsEndpointProducerBuilder {\n         default AdvancedJcloudsEndpointBuilder advanced() {", "fixed": "     \n    public interface JcloudsEndpointBuilder\n             extends\n                 JcloudsEndpointConsumerBuilder, JcloudsEndpointProducerBuilder {\n         default AdvancedJcloudsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithListInput(@Valid List<User> body);\n     @DELETE\n     @Path(\"/{username}\")", "fixed": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithListInput(@Valid List<User> body) throws Exception;\n     @DELETE\n     @Path(\"/{username}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "ea323fc628b5c5f5fb0a954650e96be6adc32858", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\tdouble temp = ParseUtils.parseTemperature(S300TH_DATA_1);\n \t\tAssert.assertEquals(23.2, temp, 0.01);\n\t\tdouble humidity = ParseUtils.parseHumidity(S300TH_DATA_1);\n \t\tAssert.assertEquals(50.8, humidity, 0.01);\n \t\tString address = ParseUtils.parseS300THAddress(S300TH_DATA_1);", "fixed": " \t\tdouble temp = ParseUtils.parseTemperature(S300TH_DATA_1);\n \t\tAssert.assertEquals(23.2, temp, 0.01);\n\t\tdouble humidity = ParseUtils.parseS300THHumidity(S300TH_DATA_1);\n \t\tAssert.assertEquals(50.8, humidity, 0.01);\n \t\tString address = ParseUtils.parseS300THAddress(S300TH_DATA_1);", "sourceBeforeFix": "ParseUtils.parseHumidity(S300TH_DATA_1)", "sourceAfterFix": "ParseUtils.parseS300THHumidity(S300TH_DATA_1)"}
{"fixCommitSHA1": "bbb28b514aadd4fc649dd0b7a47c6ece4d629fa7", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                                        if (body.endsWith(\"6\")) {\n                                             log.info(\"5th message received.  Rolling back.\");\n                                             exchange.getOut().setFault(true);\n                                             exchange.getOut().setBody(\"5th message received.  Rolling back.\");", "fixed": "                                        if (body.endsWith(\"6\") || body.endsWith(\"10\")) {\n                                             log.info(\"5th message received.  Rolling back.\");\n                                             exchange.getOut().setFault(true);\n                                             exchange.getOut().setBody(\"5th message received.  Rolling back.\");", "sourceBeforeFix": "getMockEndpoint(\"mock:test.after.1\").expectedMinimumMessageCount(10)", "sourceAfterFix": "getMockEndpoint(\"mock:test.after.1\").expectedMessageCount(10)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTextureEXT(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "fixed": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTexture(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "sourceBeforeFix": "GL.glDrawArraysEXT(mode,first,count)", "sourceAfterFix": "GL.glDrawArrays(mode,first,count)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "93facb514e158589060eacc69e50cc7ff76082b2", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (keys.isEmpty()) {\n             return;\n         }\n        final Collection<Data> dataKeys = convertKeysToData(keys);\n         if (replaceExistingValues) {\n             invalidateNearCache(dataKeys);\n         }", "fixed": "         if (keys.isEmpty()) {\n             return;\n         }\n        final List<Data> dataKeys = convertKeysToData(keys);\n         if (replaceExistingValues) {\n             invalidateNearCache(dataKeys);\n         }", "sourceBeforeFix": "Collection<Data>", "sourceAfterFix": "List<Data>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fd2bf7d972c703a603f7ec043b96649347f7e184", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "         httpClientBinder(binder).bindHttpClient(\"scheduler\", ForScheduler.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(2, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                     config.setMaxConnectionsPerServer(250);\n                 });", "fixed": "         httpClientBinder(binder).bindHttpClient(\"scheduler\", ForScheduler.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(30, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                     config.setMaxConnectionsPerServer(250);\n                 });", "sourceBeforeFix": "new Duration(2,SECONDS)", "sourceAfterFix": "new Duration(30,SECONDS)"}
{"fixCommitSHA1": "e07a7b8bcd1e3abc3f3ea5559c8c74a6f8f8ccdc", "projectName": "openmrs.openmrs-core", "bugType": "Change Numeric Literal", "problem": " \t\texecuteDataSet(PROGRAM_WITH_OUTCOMES_XML);\r\n \t\tList<Concept> possibleOutcomes = Context.getProgramWorkflowService().getPossibleOutcomes(4);\r\n\t\tassertEquals(2, possibleOutcomes.size());\r\n \t}\r\n \t@Test\r", "fixed": " \t\texecuteDataSet(PROGRAM_WITH_OUTCOMES_XML);\r\n \t\tList<Concept> possibleOutcomes = Context.getProgramWorkflowService().getPossibleOutcomes(4);\r\n\t\tassertEquals(4, possibleOutcomes.size());\r\n \t}\r\n \t@Test\r", "sourceBeforeFix": "assertEquals(2,possibleOutcomes.size())", "sourceAfterFix": "assertEquals(4,possibleOutcomes.size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "projectName": "eclipse.vert.x", "bugType": "Same Function More Args", "problem": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException();\n   }\n }", "fixed": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n }", "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: succeeded\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the\n \t *                     output view, which may have an underlying I/O channel to which it delegates.\n \t */\n\tpublic void serialize(T record, DataOutputView target) throws IOException;\n \t/**\n \t * De-serializes a record from the given source input view into the given target record instance.", "fixed": " \t * @throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the\n \t *                     output view, which may have an underlying I/O channel to which it delegates.\n \t */\n\tpublic abstract void serialize(T record, DataOutputView target) throws IOException;\n \t/**\n \t * De-serializes a record from the given source input view into the given target record instance.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r) {\n         String clientId = r.uuid();\n        long now = System.nanoTime();\n         List<Object> result = new ArrayList<Object>();", "fixed": "     @Override\n     public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r) {\n         String clientId = r.uuid();\n        long now = System.currentTimeMillis();\n         List<Object> result = new ArrayList<Object>();", "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClientModel(@Valid Client body);\n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })", "fixed": "     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClientModel(@Valid Client body) throws Exception;\n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fa5635c39e3000406103657977b98efa79bd4512", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()\n                 + \"trends/weekly.json\"));\n     }", "fixed": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()\n                 + \"trends/weekly.json\"));\n     }", "sourceBeforeFix": "conf.getSearchBaseURL()", "sourceAfterFix": "conf.getRestBaseURL()"}
{"fixCommitSHA1": "127108d1005124b8d33651569780b08fa2b5d5b8", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     private Properties overrideProperties;\n     @Metadata(defaultValue = \"\" + SYSTEM_PROPERTIES_MODE_OVERRIDE, enums = \"0,1,2\")\n     private int systemPropertiesMode = SYSTEM_PROPERTIES_MODE_OVERRIDE;\n    @Metadata(defaultValue = \"\" + SYSTEM_PROPERTIES_MODE_FALLBACK, enums = \"0,1,2\")\n     private int environmentVariableMode = ENVIRONMENT_VARIABLES_MODE_OVERRIDE;\n     public PropertiesComponent() {", "fixed": "     private Properties overrideProperties;\n     @Metadata(defaultValue = \"\" + SYSTEM_PROPERTIES_MODE_OVERRIDE, enums = \"0,1,2\")\n     private int systemPropertiesMode = SYSTEM_PROPERTIES_MODE_OVERRIDE;\n    @Metadata(defaultValue = \"\" + ENVIRONMENT_VARIABLES_MODE_OVERRIDE, enums = \"0,1,2\")\n     private int environmentVariableMode = ENVIRONMENT_VARIABLES_MODE_OVERRIDE;\n     public PropertiesComponent() {", "sourceBeforeFix": "\"\" + SYSTEM_PROPERTIES_MODE_FALLBACK", "sourceAfterFix": "\"\" + ENVIRONMENT_VARIABLES_MODE_OVERRIDE"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "038c9b6d6103052795b6d6e1175cd964c7461bb2", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "         }\n         \n        protected int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "fixed": "         }\n         \n        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"fixCommitSHA1": "c33166435d12434470ecc74eb9b969b89e9de695", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         assertTrueEventually(new AllTasksRunningWithinNumOfNodes(scheduler, 1));\n     }\n    @Test(timeout = 600000)\n     public void schedule_thenDisposeLeakTest() {\n         Config config = new Config()\n                 .addScheduledExecutorConfig(new ScheduledExecutorConfig()", "fixed": "         assertTrueEventually(new AllTasksRunningWithinNumOfNodes(scheduler, 1));\n     }\n    @Test(timeout = 1800000)\n     public void schedule_thenDisposeLeakTest() {\n         Config config = new Config()\n                 .addScheduledExecutorConfig(new ScheduledExecutorConfig()", "sourceBeforeFix": "timeout=600000", "sourceAfterFix": "timeout=1800000"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "e7919feab1a5f371806a2f6d267e84e9542e3f26", "projectName": "mybatis.mybatis-3", "bugType": "Change Caller in Function Call", "problem": "   private void add(final Class<?> primitiveType, final Class<?> wrapperType) {\n     primitiveToWrappers.put(primitiveType, wrapperType);\n    primitiveToWrappers.put(wrapperType, primitiveType);\n   }\n   public Class<?> getWrapper(final Class<?> primitiveType) {", "fixed": "   private void add(final Class<?> primitiveType, final Class<?> wrapperType) {\n     primitiveToWrappers.put(primitiveType, wrapperType);\n    wrappersToPrimitives.put(wrapperType, primitiveType);\n   }\n   public Class<?> getWrapper(final Class<?> primitiveType) {", "sourceBeforeFix": "primitiveToWrappers.put(wrapperType,primitiveType)", "sourceAfterFix": "wrappersToPrimitives.put(wrapperType,primitiveType)"}
{"fixCommitSHA1": "15f26883515231610c753d25e224c5e26cb4d641", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "                 xmlReader = xmlReaderPool.createXMLReader();\n             }\n         } catch (Exception ex) {\n            LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\", ex);\n         }\n         return new SAXSource(xmlReader, inputSource);\n     }", "fixed": "                 xmlReader = xmlReaderPool.createXMLReader();\n             }\n         } catch (Exception ex) {\n            LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\", ex.getMessage(), ex);\n         }\n         return new SAXSource(xmlReader, inputSource);\n     }", "sourceBeforeFix": "LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\",ex)", "sourceAfterFix": "LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\",ex.getMessage(),ex)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "69bf835b58721b263b5ecaca7de2c327e3c29d7f", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     }\n     @Override\n    public void dispatchEvent(ReplicationMessage event, ReplicatedMessageListener listener) {\n         listener.onMessage(event);\n     }", "fixed": "     }\n     @Override\n    public void dispatchEvent(IdentifiedDataSerializable event, ReplicatedMessageListener listener) {\n         listener.onMessage(event);\n     }", "sourceBeforeFix": "ReplicationMessage event", "sourceAfterFix": "IdentifiedDataSerializable event"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
