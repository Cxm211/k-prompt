{"problem": "public void METHOD_1 ( ) { for ( int k = 0 ; k < ( VAR_1 . size ( ) ) ; k ++ ) { TYPE_1 VAR_2 = VAR_1 . get ( k ) ; for ( TYPE_2 VAR_3 : VAR_2 . METHOD_2 ( ) ) { VAR_3 . METHOD_3 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { for ( int k = 0 ; k < ( VAR_1 . size ( ) ) ; k ++ ) { TYPE_1 VAR_2 = VAR_1 . get ( k ) ; if ( VAR_2 != null ) { for ( TYPE_2 VAR_3 : VAR_2 . METHOD_2 ( ) ) { VAR_3 . METHOD_3 ( ) ; } } } }\n"}
{"fixCommitSHA1": "2c3e641f9f9b847eb609a575107ad67a63edc09b", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             throw new IOException(\"Address is required!\");\n         }\n        ClientConnection clientConnection = connections.get(address);\n         if (clientConnection == null) {\n            final Object lock = getLock(address);\n             synchronized (lock) {\n                clientConnection = connections.get(address);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);", "fixed": "             throw new IOException(\"Address is required!\");\n         }\n        ClientConnection clientConnection = connections.get(target);\n         if (clientConnection == null) {\n            final Object lock = getLock(target);\n             synchronized (lock) {\n                clientConnection = connections.get(target);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);", "sourceBeforeFix": "connections.get(address)", "sourceAfterFix": "connections.get(target)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( java.lang.String str ) { if ( str . substring ( ( ( str . length ( ) ) - 1 ) , str . length ( ) ) . equals ( STRING_1 ) ) { VAR_1 = true ; number = java.lang.Integer . METHOD_2 ( str . substring ( 0 , ( ( str . length ( ) ) - INT_1 ) ) ) ; } else { VAR_1 = false ; number = java.lang.Integer . METHOD_2 ( str ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String str ) { if ( str . substring ( ( ( str . length ( ) ) - 1 ) , str . length ( ) ) . equals ( STRING_1 ) ) { VAR_1 = true ; number = java.lang.Integer . METHOD_2 ( str . substring ( 0 , ( ( str . length ( ) ) - 1 ) ) ) ; } else { VAR_1 = false ; number = java.lang.Integer . METHOD_2 ( str ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; java.lang.String [ ] VAR_4 = TYPE_3 . split ( VAR_3 , STRING_1 ) ; for ( java.lang.String split : VAR_4 ) { if ( INT_1 != ( TYPE_3 . METHOD_3 ( split , STRING_2 ) ) ) { return ; } if ( ! ( TYPE_4 . METHOD_4 ( VAR_3 ) ) ) { VAR_2 . METHOD_5 ( TYPE_5 . METHOD_6 ( ) ) ; return ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; java.lang.String [ ] VAR_4 = TYPE_3 . split ( VAR_3 , STRING_1 ) ; for ( java.lang.String split : VAR_4 ) { if ( INT_1 != ( TYPE_3 . METHOD_3 ( split , STRING_2 ) ) ) { continue ; } if ( ! ( TYPE_4 . METHOD_4 ( VAR_3 ) ) ) { VAR_2 . METHOD_5 ( TYPE_5 . METHOD_6 ( ) ) ; return ; } } }\n"}
{"problem": "public static java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; java.io.File VAR_3 = new java.io.File ( STRING_1 ) ; try { VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , new TYPE_2 < java.util.HashMap < java.lang.String , java.lang.Object > > ( ) { } ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_3 ( ) ; } return VAR_1 ; }\n", "fixed": "private static java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( java.lang.String path ) { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; java.io.File VAR_3 = new java.io.File ( path ) ; try { VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , new TYPE_2 < java.util.HashMap < java.lang.String , java.lang.Object > > ( ) { } ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_3 ( ) ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "e896f6d400c7ad946141adbf7317df7c680fcdc6", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     } catch (DoNotRetryIOException e) {\n       throw e;\n     } catch (IOException e) {\n      LOG.debug(\"recovered from \" + StringUtils.stringifyException(e));\n       if (lastSuccessfulRow == null) {\n         LOG.warn(\"We are restarting the first next() invocation,\" +\n             \" if your mapper's restarted a few other times like this\" +", "fixed": "     } catch (DoNotRetryIOException e) {\n       throw e;\n     } catch (IOException e) {\n      LOG.info(\"recovered from \" + StringUtils.stringifyException(e));\n       if (lastSuccessfulRow == null) {\n         LOG.warn(\"We are restarting the first next() invocation,\" +\n             \" if your mapper's restarted a few other times like this\" +", "sourceBeforeFix": "LOG.debug(\"recovered from \" + StringUtils.stringifyException(e))", "sourceAfterFix": "LOG.info(\"recovered from \" + StringUtils.stringifyException(e))"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_3 . METHOD_4 ( STRING_1 ) ; METHOD_5 ( VAR_3 ) ; METHOD_6 ( ) . METHOD_7 ( true ) ; VAR_5 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_6 ) ) ) ; VAR_5 . setText ( STRING_2 ) ; VAR_7 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_8 ) ) ) ; VAR_7 . setText ( STRING_3 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_6 ( ) . METHOD_7 ( true ) ; VAR_5 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_6 ) ) ) ; VAR_5 . setText ( STRING_2 ) ; VAR_7 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_8 ) ) ) ; VAR_7 . setText ( STRING_3 ) ; }\n"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"problem": "public void METHOD_1 ( TYPE_1 msg , java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = TYPE_2 . split ( msg . getText ( ) ) ; for ( java.lang.String VAR_3 : VAR_2 ) { this . VAR_4 . METHOD_1 ( VAR_1 , java.lang.String.format ( STRING_1 , msg . METHOD_2 ( ) . getClass ( ) . METHOD_3 ( ) , msg . METHOD_4 ( ) , msg . METHOD_5 ( ) , VAR_3 ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 msg , java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = TYPE_2 . split ( msg . getText ( ) ) ; for ( java.lang.String VAR_3 : VAR_2 ) { VAR_4 . METHOD_1 ( VAR_1 , java.lang.String.format ( STRING_1 , msg . METHOD_2 ( ) . getClass ( ) . METHOD_3 ( ) , msg . METHOD_4 ( ) , msg . METHOD_5 ( ) , VAR_3 ) ) ; } }\n"}
{"problem": "public TYPE_1 < ? > METHOD_1 ( int VAR_1 , long VAR_2 ) { if ( VAR_2 <= 0 ) { throw TYPE_2 . METHOD_2 ( VAR_3 ) ; } java.lang.String VAR_4 = VAR_5 . METHOD_3 ( VAR_1 ) ; if ( TYPE_3 . METHOD_4 ( VAR_4 ) ) { return TYPE_4 . METHOD_5 ( null ) ; } byte [ ] content = VAR_6 . METHOD_6 ( VAR_4 ) ; if ( content == null ) { return TYPE_4 . METHOD_5 ( null ) ; } return TYPE_4 . METHOD_5 ( new java.lang.String ( content ) ) ; }\n", "fixed": "public TYPE_1 < ? > METHOD_1 ( int VAR_1 ) { java.lang.String VAR_4 = VAR_5 . METHOD_3 ( VAR_1 ) ; if ( TYPE_3 . METHOD_4 ( VAR_4 ) ) { return TYPE_4 . METHOD_5 ( null ) ; } byte [ ] content = VAR_6 . METHOD_6 ( VAR_4 ) ; if ( content == null ) { return TYPE_4 . METHOD_5 ( null ) ; } return TYPE_4 . METHOD_5 ( new java.lang.String ( content ) ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String message ) { if ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) { try { VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_1 ( VAR_3 , STRING_1 ) ) ; } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_5 ( ) ; } } try { this . VAR_1 . put ( message ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_5 ( ) ; this . METHOD_6 ( ) ; } }\n", "fixed": "public synchronized void METHOD_1 ( java.lang.String message ) { if ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) { try { VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_1 ( VAR_3 , STRING_1 ) ) ; this . METHOD_6 ( ) ; } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_5 ( ) ; } } try { this . VAR_1 . put ( message ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_5 ( ) ; this . METHOD_6 ( ) ; } }\n"}
{"fixCommitSHA1": "4446595a8d326298e7d3ceda6472c84ababfc2ff", "projectName": "eclipse.vert.x", "bugType": "Change Caller in Function Call", "problem": "             if (resultHandler != null) {\n               resultHandler.handle(Future.failedFuture(ar2.cause()));\n             } else {\n              log.error(ar.cause());\n             }\n           }\n         });", "fixed": "             if (resultHandler != null) {\n               resultHandler.handle(Future.failedFuture(ar2.cause()));\n             } else {\n              log.error(ar2.cause());\n             }\n           }\n         });", "sourceBeforeFix": "ar.cause()", "sourceAfterFix": "ar2.cause()"}
{"problem": "public void add ( int value ) { ( counter ) ++ ; if ( ( counter ) != ( VAR_1 ) ) { sum += value ; } else { METHOD_1 ( ( ( int ) ( ( sum ) / ( VAR_1 ) ) ) ) ; counter = 0 ; sum = 0 ; } }\n", "fixed": "public void add ( int value ) { ( counter ) ++ ; if ( ( counter ) != ( VAR_1 ) ) { sum += value ; } else { sum += value ; METHOD_1 ( ( ( int ) ( ( sum ) / ( VAR_1 ) ) ) ) ; counter = 0 ; sum = 0 ; } }\n"}
{"problem": "public void METHOD_1 ( int event ) { switch ( event ) { case VAR_1 : METHOD_2 ( ) ; case VAR_2 : TYPE_1 VAR_3 = ( ( TYPE_1 ) ( getView ( ) . METHOD_3 ( VAR_4 ) ) ) ; assert VAR_3 != null ; VAR_3 . METHOD_4 ( VAR_5 ) ; } }\n", "fixed": "public void METHOD_1 ( int event ) { switch ( event ) { case VAR_1 : METHOD_2 ( ) ; break ; case VAR_2 : TYPE_1 VAR_3 = ( ( TYPE_1 ) ( getView ( ) . METHOD_3 ( VAR_4 ) ) ) ; assert VAR_3 != null ; VAR_3 . METHOD_4 ( VAR_5 ) ; break ; } }\n"}
{"problem": "private void METHOD_1 ( ) { VAR_1 . setText ( STRING_1 ) ; VAR_2 . setText ( STRING_1 ) ; VAR_3 . setText ( STRING_1 ) ; VAR_4 . setText ( STRING_2 ) ; VAR_5 = false ; VAR_6 . METHOD_2 ( ) ; VAR_7 . METHOD_3 ( false ) ; }\n", "fixed": "private void METHOD_1 ( ) { if ( VAR_5 ) { VAR_1 . setText ( STRING_1 ) ; VAR_2 . setText ( STRING_1 ) ; VAR_3 . setText ( STRING_1 ) ; VAR_4 . setText ( STRING_2 ) ; VAR_5 = false ; VAR_6 . METHOD_2 ( ) ; } VAR_7 . METHOD_3 ( false ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { METHOD_2 ( true ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event . METHOD_3 ( ) ) ) ; if ( VAR_1 . getValue ( ) ) { param . setValue ( java.lang.String . METHOD_4 ( true ) ) ; } }\n", "fixed": "public void METHOD_1 ( final TYPE_1 event ) { this . METHOD_2 ( true ) ; final TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event . METHOD_3 ( ) ) ) ; if ( VAR_1 . getValue ( ) ) { param . setValue ( java.lang.String . METHOD_4 ( true ) ) ; } }\n"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; int VAR_4 = ( ( VAR_1 == null ) || ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) ) ? 0 : VAR_1 . METHOD_3 ( 0 ) . METHOD_4 ( ) ; java.lang.System.out.println ( ( STRING_1 + VAR_4 ) ) ; VAR_5 . setEnabled ( ( VAR_4 >= 0 ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; int VAR_4 = ( ( VAR_1 == null ) || ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) ) ? 0 : VAR_1 . METHOD_3 ( 0 ) . METHOD_4 ( ) ; VAR_5 . setEnabled ( ( VAR_4 >= 0 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 . assertEquals ( INT_1 , VAR_1 . METHOD_3 ( ) . size ( ) ) ; TYPE_1 . assertEquals ( INT_2 , VAR_1 . METHOD_4 ( ) . size ( ) ) ; TYPE_1 . assertEquals ( INT_3 , VAR_1 . METHOD_5 ( ) . size ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 . assertEquals ( INT_1 , VAR_1 . METHOD_3 ( ) . size ( ) ) ; TYPE_1 . assertEquals ( INT_2 , VAR_1 . METHOD_4 ( ) . size ( ) ) ; TYPE_1 . assertEquals ( 1 , VAR_1 . METHOD_5 ( ) . size ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( this ) ; VAR_3 = TYPE_3 . METHOD_5 ( this ) ; boolean VAR_4 = VAR_3 . getBoolean ( STRING_1 , true ) ; if ( VAR_4 ) { TYPE_4 VAR_5 = VAR_3 . METHOD_6 ( ) ; VAR_5 . METHOD_7 ( STRING_1 , false ) ; VAR_5 . commit ( ) ; METHOD_8 ( this . getString ( VAR_6 ) , this . getString ( VAR_7 ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; VAR_3 = TYPE_3 . METHOD_5 ( this ) ; boolean VAR_4 = VAR_3 . getBoolean ( STRING_1 , true ) ; if ( VAR_4 ) { TYPE_4 VAR_5 = VAR_3 . METHOD_6 ( ) ; VAR_5 . METHOD_7 ( STRING_1 , false ) ; VAR_5 . commit ( ) ; METHOD_8 ( this . getString ( VAR_6 ) , this . getString ( VAR_7 ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; VAR_2 = 0 ; status . setText ( STRING_1 ) ; } catch ( java.lang.Exception VAR_3 ) { java.lang.System.out.println ( VAR_3 ) ; VAR_2 = 0 ; status . setText ( STRING_2 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; VAR_2 = 0 ; status . setText ( STRING_1 ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_2 = 0 ; status . setText ( STRING_2 ) ; } }\n"}
{"fixCommitSHA1": "2b0752b688e6f27129f344050787e9546adc004a", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 5000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "fixed": "     @Test\n     public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 10000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { if ( ( ! ( VAR_1 ) ) || ( ( VAR_2 ) == null ) ) { return ; } if ( ( VAR_3 ) == 0 ) { TYPE_2 . i ( VAR_4 , STRING_1 ) ; METHOD_2 ( ) ; } else if ( ( VAR_3 ) > 1 ) { ( VAR_3 ) -- ; TYPE_2 . i ( VAR_4 , ( STRING_2 + ( VAR_3 ) ) ) ; } else { TYPE_2 . i ( VAR_4 , STRING_3 ) ; METHOD_3 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { if ( ! ( VAR_1 ) ) { return ; } if ( ( VAR_3 ) == 0 ) { TYPE_2 . i ( VAR_4 , STRING_1 ) ; METHOD_2 ( ) ; } else if ( ( VAR_3 ) > 1 ) { ( VAR_3 ) -- ; TYPE_2 . i ( VAR_4 , ( STRING_2 + ( VAR_3 ) ) ) ; } else { TYPE_2 . i ( VAR_4 , STRING_3 ) ; METHOD_3 ( ) ; } }\n"}
{"problem": "public void open ( int VAR_1 , int VAR_2 ) throws java.io.IOException { if ( ( this . VAR_1 ) != ( - 1 ) ) { throw new TYPE_1 ( ( STRING_1 + ( this . VAR_1 ) ) ) ; } if ( TYPE_2 . METHOD_1 ( ) ) { TYPE_2 . METHOD_2 ( STRING_2 ) ; } this . VAR_1 = VAR_1 ; }\n", "fixed": "public void open ( int VAR_1 , int VAR_2 ) throws java.io.IOException { if ( ( this . VAR_1 ) != ( - 1 ) ) { throw new TYPE_1 ( ( STRING_1 + ( this . VAR_1 ) ) ) ; } if ( TYPE_2 . METHOD_1 ( ) ) { TYPE_2 . METHOD_2 ( STRING_2 , VAR_1 , VAR_2 ) ; } this . VAR_1 = VAR_1 ; }\n"}
{"problem": "private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { if ( ( VAR_2 . METHOD_2 ( ) . getId ( ) ) != 0 ) { METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; } return ; } VAR_1 = new TYPE_1 ( ) ; METHOD_4 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { if ( ( VAR_1 . METHOD_2 ( ) . getId ( ) ) != 0 ) { METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; } return ; } VAR_1 = new TYPE_1 ( ) ; METHOD_4 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( boolean value ) { if ( ( VAR_1 ) != null ) VAR_2 = value ; else if ( ( VAR_3 ) != null ) VAR_4 = value ; if ( ( VAR_5 ) != null ) VAR_6 = value ; if ( ( VAR_7 ) != null ) VAR_8 = value ; if ( ( VAR_9 ) != null ) VAR_10 = value ; if ( ( VAR_11 ) != null ) VAR_12 = value ; }\n", "fixed": "public void METHOD_1 ( boolean value ) { if ( ( VAR_1 ) != null ) VAR_2 = value ; if ( ( VAR_3 ) != null ) VAR_4 = value ; if ( ( VAR_5 ) != null ) VAR_6 = value ; if ( ( VAR_7 ) != null ) VAR_8 = value ; if ( ( VAR_9 ) != null ) VAR_10 = value ; if ( ( VAR_11 ) != null ) VAR_12 = value ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGuavaEventBusEndpointBuilder\n             extends\n                 AdvancedGuavaEventBusEndpointConsumerBuilder, AdvancedGuavaEventBusEndpointProducerBuilder {\n         default GuavaEventBusEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGuavaEventBusEndpointBuilder\n             extends\n                 AdvancedGuavaEventBusEndpointConsumerBuilder, AdvancedGuavaEventBusEndpointProducerBuilder {\n         default GuavaEventBusEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( 1 , new TYPE_2 ( ) { public java.lang.Thread METHOD_2 ( TYPE_3 VAR_2 ) { java.lang.Thread VAR_3 = new java.lang.Thread ( VAR_2 , ( STRING_1 + ( id ) ) ) ; VAR_3 . METHOD_3 ( true ) ; return VAR_3 ; } } ) ; } }\n", "fixed": "private synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return ; } VAR_1 = new TYPE_1 ( 1 , new TYPE_2 ( ) { public java.lang.Thread METHOD_2 ( TYPE_3 VAR_2 ) { java.lang.Thread VAR_3 = new java.lang.Thread ( VAR_2 , ( STRING_1 + ( id ) ) ) ; VAR_3 . METHOD_3 ( true ) ; return VAR_3 ; } } ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) ; java.io.File f = this . VAR_2 . get ( VAR_3 ) ; TYPE_1 . METHOD_3 ( VAR_4 , ( ( ( STRING_1 + ( f . getName ( ) ) ) + STRING_2 ) + ( f . delete ( ) ) ) ) ; this . VAR_2 . METHOD_4 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) ; java.io.File f = this . VAR_2 . get ( VAR_3 ) ; if ( f != null ) { TYPE_1 . METHOD_3 ( VAR_4 , ( ( ( STRING_1 + ( f . getName ( ) ) ) + STRING_2 ) + ( f . delete ( ) ) ) ) ; } this . VAR_2 . METHOD_4 ( ) ; }\n"}
{"problem": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( ) . METHOD_3 ( this ) ; if ( ( ! ( TYPE_2 . METHOD_4 ( ) ) ) && ( ( VAR_1 . METHOD_5 ( ) ) > 1 ) ) { TYPE_3 . show ( VAR_2 ) ; } }\n", "fixed": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( ) . METHOD_3 ( this ) ; if ( ( ( ! ( TYPE_2 . METHOD_4 ( ) ) ) && ( ( VAR_1 ) != null ) ) && ( ( VAR_1 . METHOD_5 ( ) ) > 1 ) ) { TYPE_3 . show ( VAR_2 ) ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { java.util.Set < ? extends TYPE_1 > VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( null , true ) ; for ( TYPE_1 VAR_3 : VAR_2 ) { if ( VAR_3 . getName ( ) . equals ( VAR_4 ) ) { VAR_1 = VAR_3 ; break ; } } } return VAR_1 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { java.util.Set < ? extends TYPE_1 > VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( null , true ) ; if ( VAR_2 != null ) { for ( TYPE_1 VAR_3 : VAR_2 ) { if ( VAR_3 . getName ( ) . equals ( VAR_4 ) ) { VAR_1 = VAR_3 ; break ; } } } } return VAR_1 ; }\n"}
{"problem": "public long METHOD_1 ( long value ) throws TYPE_1 { long VAR_1 = 0 ; if ( ( type ) != ( VAR_2 ) ) throw new TYPE_2 ( STRING_1 ) ; state . get ( ) ; try { METHOD_2 ( this . VAR_3 , id , value ) ; VAR_1 = METHOD_3 ( this . VAR_3 , id ) ; } finally { state . put ( ) ; } return VAR_1 ; }\n", "fixed": "public long METHOD_1 ( long value ) throws TYPE_1 { if ( ( type ) != ( VAR_2 ) ) throw new TYPE_2 ( STRING_1 ) ; state . get ( ) ; try { METHOD_2 ( this . VAR_3 , id , value ) ; return METHOD_3 ( this . VAR_3 , id ) ; } finally { state . put ( ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 context , TYPE_4 VAR_2 , TYPE_5 VAR_3 ) { java.lang.String VAR_4 = ( ( TYPE_6 ) ( VAR_2 ) ) . getName ( ) ; TYPE_7 VAR_5 = TYPE_8 . METHOD_2 ( VAR_4 ) ; if ( VAR_5 == null ) { throw new TYPE_9 ( VAR_3 ) ; } java.util.List < TYPE_10 > VAR_6 = VAR_1 . METHOD_3 ( context , VAR_3 . METHOD_4 ( ) ) ; return new TYPE_11 ( VAR_1 . METHOD_5 ( ) , VAR_3 , VAR_5 , VAR_6 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 context , TYPE_4 VAR_2 , TYPE_5 VAR_3 ) { java.lang.String VAR_4 = ( ( TYPE_6 ) ( VAR_2 ) ) . getName ( ) ; java.util.List < TYPE_10 > VAR_6 = VAR_1 . METHOD_3 ( context , VAR_3 . METHOD_4 ( ) ) ; return new TYPE_11 ( VAR_1 . METHOD_5 ( ) , VAR_3 , VAR_4 , VAR_6 ) ; }\n"}
{"problem": "public static < TYPE_1 > TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.Class < TYPE_1 > VAR_2 ) throws TYPE_2 { try { TYPE_3 VAR_3 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 VAR_4 = VAR_3 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( new TYPE_5 ( VAR_1 ) ) ; return TYPE_6 . METHOD_5 ( VAR_4 , VAR_2 ) ; } catch ( TYPE_7 VAR_5 ) { throw new TYPE_2 ( STRING_1 ) ; } catch ( java.lang.Exception VAR_5 ) { throw new TYPE_2 ( STRING_2 , VAR_5 ) ; } }\n", "fixed": "public static < TYPE_1 > TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.Class < TYPE_1 > VAR_2 ) throws TYPE_2 { try { TYPE_3 VAR_3 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 VAR_4 = VAR_3 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( new TYPE_5 ( VAR_1 ) ) ; return TYPE_6 . METHOD_5 ( VAR_4 , VAR_2 ) ; } catch ( TYPE_7 VAR_5 ) { throw new TYPE_2 ( STRING_1 , VAR_5 ) ; } catch ( java.lang.Exception VAR_5 ) { throw new TYPE_2 ( STRING_2 , VAR_5 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.String VAR_1 ; do { java.lang.System.out.println ( STRING_2 ) ; VAR_1 = METHOD_2 ( ) ; } while ( ( ! ( VAR_1 . METHOD_3 ( STRING_3 ) ) ) && ( ! ( VAR_1 . METHOD_3 ( STRING_4 ) ) ) ) ; if ( VAR_1 . METHOD_3 ( STRING_3 ) ) { METHOD_4 ( ) ; } else { java.lang.System.out.println ( STRING_5 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.String VAR_1 ; do { java.lang.System.out.println ( STRING_2 ) ; VAR_1 = METHOD_2 ( ) ; } while ( ( ! ( VAR_1 . METHOD_3 ( STRING_3 ) ) ) && ( ! ( VAR_1 . METHOD_3 ( STRING_4 ) ) ) ) ; if ( VAR_1 . METHOD_3 ( STRING_3 ) ) { METHOD_4 ( ) ; } else { java.lang.System.out.println ( STRING_5 ) ; java.lang.System.exit ( 0 ) ; } }\n"}
{"problem": "public java.lang.Integer METHOD_1 ( ) { if ( ( ( index ) == null ) && ( ( VAR_1 ) != null ) ) { return ( ( VAR_1 ) - 1 ) * ( VAR_2 ) ; } else if ( ( index ) == null ) { return VAR_3 ; } return index ; }\n", "fixed": "public java.lang.Integer METHOD_1 ( ) { if ( ( ( ( index ) == null ) && ( ( VAR_1 ) != null ) ) && ( ( VAR_2 ) != null ) ) { return ( ( VAR_1 ) - 1 ) * ( VAR_2 ) ; } if ( ( index ) == null ) { return VAR_3 ; } return index ; }\n"}
{"fixCommitSHA1": "ece77fa477a6d322bb5b37c7e2367f4c4dfbf9f3", "projectName": "junit-team.junit", "bugType": "Wrong Function Name", "problem": " \t\t\tfLines.removeAllElements();\n      \t\tStringTokenizer st= new StringTokenizer(trace, \"\\n\\r\", false);\n \t    \twhile (st.hasMoreTokens()) \n \t\t\t\tfLines.add(st.nextToken());\n \t\t}\n \t}", "fixed": " \t\t\tfLines.removeAllElements();\n      \t\tStringTokenizer st= new StringTokenizer(trace, \"\\n\\r\", false);\n \t    \twhile (st.hasMoreTokens()) \n \t\t\t\tfLines.addElement(st.nextToken());\n \t\t}\n \t}", "sourceBeforeFix": "fLines.add(st.nextToken())", "sourceAfterFix": "fLines.addElement(st.nextToken())"}
{"problem": "public android.view.View METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { final TYPE_3 VAR_3 = TYPE_3 . METHOD_2 ( context ) ; android.view.View VAR_4 = VAR_3 . METHOD_3 ( VAR_5 , VAR_2 , false ) ; TYPE_4 VAR_6 = TYPE_5 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_4 , VAR_6 , VAR_1 ) ; return VAR_4 ; }\n", "fixed": "public android.view.View METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { final TYPE_3 VAR_3 = TYPE_3 . METHOD_2 ( context ) ; TYPE_4 VAR_6 = TYPE_5 . METHOD_4 ( VAR_1 ) ; android.view.View VAR_4 ; if ( VAR_6 != null ) { VAR_4 = VAR_3 . METHOD_3 ( VAR_5 , VAR_2 , false ) ; METHOD_5 ( VAR_4 , VAR_6 , VAR_1 ) ; } else { VAR_4 = new android.view.View ( this ) ; } return VAR_4 ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"problem": "public void METHOD_1 ( ) { float VAR_1 = ( ( METHOD_2 ( ) ) < INT_1 ) ? INT_1 - ( METHOD_2 ( ) ) : 0 ; float VAR_2 = ( ( METHOD_2 ( ) ) > INT_1 ) ? ( METHOD_2 ( ) ) - INT_1 : 0 ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( ) { float VAR_1 = INT_1 - ( METHOD_2 ( ) ) ; float VAR_2 = ( ( METHOD_2 ( ) ) > INT_1 ) ? ( METHOD_2 ( ) ) - INT_1 : 0 ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_2 ) ; }\n"}
{"problem": "public static java.io.File METHOD_1 ( java.lang.String VAR_1 , java.io.File VAR_2 ) { try { java.io.File VAR_3 = java.io.File . METHOD_2 ( VAR_1 , STRING_1 , VAR_2 ) ; if ( ! ( VAR_3 . delete ( ) ) ) { return null ; } if ( ! ( VAR_3 . METHOD_3 ( ) ) ) { return null ; } return VAR_3 ; } catch ( java.lang.Exception VAR_4 ) { return null ; } }\n", "fixed": "public static java.io.File METHOD_1 ( java.lang.String VAR_1 , java.io.File VAR_2 ) { try { java.io.File VAR_3 = java.io.File . METHOD_2 ( VAR_1 , STRING_1 , VAR_2 ) ; if ( VAR_3 == null ) { return null ; } if ( ! ( VAR_3 . delete ( ) ) ) { return null ; } if ( ! ( VAR_3 . METHOD_3 ( ) ) ) { return null ; } return VAR_3 ; } catch ( java.lang.Exception VAR_4 ) { return null ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { if ( ( VAR_3 ) == null ) { VAR_3 = VAR_1 . getContext ( ) ; } android.view.View view = TYPE_3 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 , VAR_1 , false ) ; final TYPE_1 VAR_5 = new TYPE_1 ( view ) ; int position = VAR_5 . METHOD_4 ( ) ; return new TYPE_1 ( view ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { if ( ( VAR_3 ) == null ) { VAR_3 = VAR_1 . getContext ( ) ; } android.view.View view = TYPE_3 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 , VAR_1 , false ) ; return new TYPE_1 ( view ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.String fileName = STRING_1 ; java.net.URL url = this . getClass ( ) . METHOD_2 ( ) . METHOD_3 ( fileName ) ; TYPE_1 data = TYPE_1 . METHOD_4 ( url . METHOD_5 ( ) , null , null , null , true ) ; VAR_1 = true ; int VAR_2 = INT_1 ; int VAR_3 = VAR_4 ; int [ ] VAR_5 = new int [ ] { INT_2 , INT_3 , INT_4 , INT_5 } ; METHOD_6 ( fileName , data , VAR_5 , VAR_2 , VAR_3 , FLOAT_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { java.lang.String fileName = STRING_1 ; java.net.URL url = this . getClass ( ) . METHOD_2 ( ) . METHOD_3 ( fileName ) ; TYPE_1 data = TYPE_1 . METHOD_4 ( url . METHOD_5 ( ) , null , null , null , true ) ; int VAR_2 = INT_1 ; int VAR_3 = VAR_4 ; int [ ] VAR_5 = new int [ ] { INT_2 , INT_3 , INT_4 , INT_5 } ; METHOD_6 ( fileName , data , VAR_5 , VAR_2 , VAR_3 , FLOAT_1 ) ; }\n"}
{"problem": "public TYPE_1 build ( ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 ) ; METHOD_1 ( VAR_1 ) ; if ( ( VAR_3 ) != null ) { VAR_1 . METHOD_2 ( ( ! ( VAR_3 ) ) ) ; } if ( ( VAR_4 ) != null ) { VAR_1 . METHOD_3 ( VAR_4 ) ; } if ( ( VAR_5 ) != null ) { VAR_1 . METHOD_4 ( VAR_5 ) ; } return VAR_1 ; }\n", "fixed": "public TYPE_1 build ( ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 ) ; super . METHOD_1 ( VAR_1 ) ; if ( ( VAR_3 ) != null ) { VAR_1 . METHOD_2 ( ( ! ( VAR_3 ) ) ) ; } if ( ( VAR_4 ) != null ) { VAR_1 . METHOD_3 ( VAR_4 ) ; } if ( ( VAR_5 ) != null ) { VAR_1 . METHOD_4 ( VAR_5 ) ; } return VAR_1 ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 ) { TYPE_2 query = VAR_4 . METHOD_2 ( STRING_1 ) ; query . METHOD_3 ( STRING_2 , VAR_1 ) ; query . METHOD_3 ( STRING_3 , VAR_2 ) ; query . METHOD_3 ( STRING_4 , VAR_3 ) ; return ( ( java.util.List < TYPE_1 > ) ( query . METHOD_4 ( ) ) ) ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( long VAR_1 , long VAR_2 , double VAR_3 ) { TYPE_2 query = VAR_4 . METHOD_2 ( STRING_1 ) ; query . METHOD_3 ( STRING_2 , VAR_1 ) ; query . METHOD_3 ( STRING_3 , VAR_2 ) ; query . METHOD_3 ( STRING_4 , VAR_3 ) ; return ( ( java.util.List < TYPE_1 > ) ( query . METHOD_4 ( ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) ; VAR_3 = VAR_1 ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( STRING_1 , STRING_2 ) ; VAR_2 . METHOD_5 ( STRING_3 , STRING_4 ) ; METHOD_6 ( VAR_3 , VAR_4 , VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) ; VAR_3 = VAR_1 ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( STRING_1 , STRING_2 ) ; VAR_2 . METHOD_5 ( STRING_3 , STRING_4 ) ; METHOD_6 ( VAR_3 , VAR_4 , VAR_2 ) ; VAR_3 = null ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { java.util.Map < TYPE_1 , TYPE_2 > VAR_1 = this . VAR_2 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_4 : : METHOD_5 , TYPE_3 . METHOD_6 ( TYPE_4 : : METHOD_7 ) ) ) ; TYPE_5 . assertNotNull ( VAR_1 ) ; }\n", "fixed": "public java.util.Map < TYPE_1 , TYPE_2 > METHOD_1 ( ) { java.util.Map < TYPE_1 , TYPE_2 > result = this . VAR_2 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_4 : : METHOD_5 , TYPE_3 . METHOD_6 ( TYPE_4 : : METHOD_7 ) ) ) ; TYPE_5 . assertNotNull ( result ) ; return result ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 status ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; if ( TYPE_2 . METHOD_4 ( ) ) { TYPE_3 VAR_3 = getActivity ( ) . METHOD_5 ( ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; VAR_3 . METHOD_7 ( getContext ( ) . METHOD_8 ( ) . getColor ( VAR_2 ) ) ; } VAR_5 . setText ( METHOD_9 ( status ) ) ; if ( status == ( VAR_6 ) ) { VAR_5 . setText ( STRING_1 ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 status ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; if ( TYPE_2 . METHOD_4 ( ) ) { TYPE_3 VAR_3 = getActivity ( ) . METHOD_5 ( ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; VAR_3 . METHOD_7 ( getActivity ( ) . METHOD_8 ( ) . getColor ( VAR_2 ) ) ; } VAR_5 . setText ( METHOD_9 ( status ) ) ; if ( status == ( VAR_6 ) ) { VAR_5 . setText ( STRING_1 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_2 VAR_2 = VAR_3 . METHOD_3 ( STRING_2 , TYPE_3 . METHOD_4 ( VAR_4 ) ) ; TYPE_1 . METHOD_2 ( VAR_1 , STRING_3 ) ; VAR_5 = VAR_2 . METHOD_5 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , STRING_4 ) ; VAR_6 . METHOD_6 ( VAR_7 ) ; } catch ( java.lang.Exception VAR_8 ) { VAR_8 . METHOD_7 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_2 = VAR_3 . METHOD_3 ( STRING_2 , TYPE_3 . METHOD_4 ( VAR_4 ) ) ; TYPE_1 . METHOD_2 ( VAR_1 , STRING_3 ) ; VAR_5 = VAR_2 . METHOD_5 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , STRING_4 ) ; VAR_6 . METHOD_6 ( VAR_7 ) ; } catch ( java.lang.Exception VAR_8 ) { VAR_8 . METHOD_7 ( ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_2 == ( VAR_3 ) ) { return ; } TYPE_2 VAR_4 = VAR_2 . METHOD_2 ( VAR_5 class ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( this . VAR_6 , VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_2 == ( VAR_3 ) ) { return ; } TYPE_2 VAR_4 = VAR_2 . METHOD_2 ( VAR_5 class ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( this . VAR_6 , VAR_3 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( this . VAR_3 . METHOD_2 ( VAR_1 ) ) { this . VAR_3 . replace ( VAR_1 , VAR_2 ) ; return ; } if ( ( TYPE_3 . METHOD_3 ( VAR_1 ) ) != null ) { this . VAR_3 . put ( VAR_1 , VAR_2 ) ; return ; } this . METHOD_4 ( VAR_1 , VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( this . VAR_3 . METHOD_2 ( VAR_1 ) ) { this . VAR_3 . replace ( VAR_1 , VAR_2 ) ; return ; } this . VAR_3 . put ( VAR_1 , VAR_2 ) ; this . METHOD_4 ( VAR_1 , VAR_2 ) ; }\n"}
{"fixCommitSHA1": "40e6bbe55f7141bd66a52261e108a1f3b575ca6f", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "fixed": "             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"problem": "public void METHOD_1 ( java.io.InputStream VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { java.lang.String VAR_3 ; if ( VAR_2 != null ) VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; else VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_4 = VAR_5 . METHOD_3 ( VAR_3 ) ; byte [ ] VAR_6 ; if ( VAR_2 != null ) VAR_6 = VAR_4 . METHOD_4 ( VAR_2 ) ; else VAR_6 = VAR_4 . METHOD_4 ( ) ; VAR_7 . METHOD_1 ( new TYPE_2 ( VAR_6 ) , null ) ; }\n", "fixed": "public void METHOD_1 ( java.io.InputStream VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { java.lang.String VAR_3 ; if ( VAR_2 != null ) VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; else VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_4 = VAR_5 . METHOD_3 ( VAR_3 ) ; byte [ ] VAR_6 ; if ( VAR_2 != null ) VAR_6 = VAR_4 . METHOD_4 ( VAR_2 ) ; else VAR_6 = VAR_4 . METHOD_4 ( ) ; VAR_7 . METHOD_1 ( new TYPE_2 ( VAR_6 ) , VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { for ( int i = 0 ; i < INT_1 ; i ++ ) { for ( int j = 0 ; j < INT_1 ; j ++ ) { if ( ( VAR_1 [ i ] [ j ] . METHOD_2 ( ) ) == INT_1 ) { java.lang.System.out.print ( CHAR_1 ) ; java.lang.System.out.print ( STRING_1 ) ; } else { java.lang.System.out.print ( VAR_1 [ j ] [ i ] . METHOD_2 ( ) ) ; java.lang.System.out.print ( STRING_1 ) ; } } java.lang.System.out.println ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { for ( int i = 0 ; i < INT_1 ; i ++ ) { for ( int j = 0 ; j < INT_1 ; j ++ ) { if ( ( VAR_1 [ i ] [ j ] . METHOD_2 ( ) ) == INT_1 ) { java.lang.System.out.print ( CHAR_1 ) ; java.lang.System.out.print ( STRING_1 ) ; } else { java.lang.System.out.print ( VAR_1 [ i ] [ j ] . METHOD_2 ( ) ) ; java.lang.System.out.print ( STRING_1 ) ; } } java.lang.System.out.println ( ) ; } }\n"}
{"fixCommitSHA1": "8c267e67579f089ec1415933f9111036fc21c3bb", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "                 StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(ProjectControllerUIImpl.class, \"ProjectControllerUI.status.saved\", fileName));\n             }\n         };\n        if (saveRunnable instanceof LongTask) {\n             longTaskExecutor.execute((LongTask) saveTask, saveRunnable);\n         } else {\n             longTaskExecutor.execute(null, saveRunnable);", "fixed": "                 StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(ProjectControllerUIImpl.class, \"ProjectControllerUI.status.saved\", fileName));\n             }\n         };\n        if (saveTask instanceof LongTask) {\n             longTaskExecutor.execute((LongTask) saveTask, saveRunnable);\n         } else {\n             longTaskExecutor.execute(null, saveRunnable);", "sourceBeforeFix": "saveRunnable instanceof LongTask", "sourceAfterFix": "saveTask instanceof LongTask"}
{"project": "Math", "bugId": 28, "problem": " private Integer getPivotRow(SimplexTableau tableau, final int col) {\n                     }\n                 }\n                 return minRow;\n         }\n         return minRatioPositions.get(0);\n     }", "fixed": " private Integer getPivotRow(SimplexTableau tableau, final int col) {\n                     }\n                 }\n                 return minRow;\n            }\n         }\n         return minRatioPositions.get(0);\n     }", "observations": "", "repairActions": ["condBranIfAdd", "mcAdd"], "repairPatterns": ["wrapsIf"]}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( ( ( x ) >= ( VAR_1 . x ) ) && ( ( VAR_2 ) <= ( VAR_3 ) ) ) && ( ( y ) >= ( VAR_1 . y ) ) ) && ( ( height ) <= ( VAR_1 . height ) ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( ( ( x ) >= ( VAR_1 . x ) ) && ( ( ( x ) + ( VAR_2 ) ) <= ( ( VAR_1 . x ) + ( VAR_3 ) ) ) ) && ( ( y ) >= ( VAR_1 . y ) ) ) && ( ( ( y ) + ( height ) ) <= ( ( VAR_1 . y ) + ( VAR_1 . height ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 , STRING_2 , VAR_1 . getId ( ) ) ; VAR_2 . METHOD_2 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( STRING_3 , STRING_4 , VAR_4 . getId ( ) ) ; VAR_3 . METHOD_2 ( ) ; TYPE_1 [ ] VAR_5 = new TYPE_1 [ ] { VAR_2 , VAR_3 } ; assertTrue ( VAR_4 . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_5 ) ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 , STRING_2 , VAR_1 . getId ( ) ) ; VAR_2 . METHOD_2 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( STRING_3 , STRING_4 , VAR_1 . getId ( ) ) ; VAR_3 . METHOD_2 ( ) ; TYPE_1 [ ] VAR_5 = new TYPE_1 [ ] { VAR_2 , VAR_3 } ; assertTrue ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( java.util.Arrays.asList ( VAR_5 ) ) ) ; }\n"}
{"fixCommitSHA1": "d2b1bc5c1f0762f06b72792cbf2885b40599d905", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "                 String trace = traceInText.get(i);\n                 String[] tokens = trace.split(\",\");\n                stackTrace[i] = new StackTraceElement(tokens[0], tokens[1], tokens[2], Integer.valueOf(tokens[3]));\n             }\n             return new ChildProcessException(exceptionClass + \": \" + message, stackTrace);", "fixed": "                 String trace = traceInText.get(i);\n                 String[] tokens = trace.split(\",\");\n                stackTrace[i] = new StackTraceElement(tokens[0], tokens[1], tokens[2], Integer.parseInt(tokens[3]));\n             }\n             return new ChildProcessException(exceptionClass + \": \" + message, stackTrace);", "sourceBeforeFix": "Integer.valueOf(tokens[3])", "sourceAfterFix": "Integer.parseInt(tokens[3])"}
{"fixCommitSHA1": "d222fc981c938bd3543ee61f22422d20efcdcd94", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(800);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(800)"}
{"problem": "private boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 ; final int VAR_3 = VAR_1 . METHOD_2 ( ) ; switch ( VAR_3 ) { case VAR_4 : { VAR_2 = METHOD_3 ( VAR_1 ) ; break ; } case VAR_5 : { VAR_2 = METHOD_4 ( VAR_1 ) ; break ; } case VAR_6 : { VAR_2 = METHOD_5 ( VAR_1 ) ; break ; } default : { VAR_2 = false ; } } METHOD_6 ( ) ; return VAR_2 ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = true ; final int VAR_3 = VAR_1 . METHOD_2 ( ) ; switch ( VAR_3 ) { case VAR_4 : { VAR_2 = METHOD_3 ( VAR_1 ) ; break ; } case VAR_5 : case VAR_6 : { METHOD_4 ( VAR_1 ) ; break ; } } METHOD_6 ( ) ; return VAR_2 ; }\n"}
{"problem": "static int METHOD_1 ( java.lang.String string , float VAR_1 ) { TYPE_1 p ; p = new TYPE_1 ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; p . METHOD_2 ( VAR_1 ) ; p . METHOD_3 ( string , 0 , string . length ( ) , VAR_3 ) ; int VAR_4 = ( ( VAR_3 . METHOD_4 ( ) ) < < INT_1 ) | ( VAR_3 . height ( ) ) ; return VAR_4 ; }\n", "fixed": "public static int METHOD_1 ( java.lang.String string , float VAR_1 ) { TYPE_1 p ; p = new TYPE_1 ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; p . METHOD_2 ( VAR_1 ) ; p . METHOD_3 ( string , 0 , string . length ( ) , VAR_3 ) ; return ( ( VAR_3 . METHOD_4 ( ) ) < < INT_1 ) | ( VAR_3 . height ( ) ) ; }\n"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(2000L)\r\n                     .batchSize(5)\r", "fixed": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(500L)\r\n                     .batchSize(5)\r", "sourceBeforeFix": "result.expectedMessageCount(2)", "sourceAfterFix": "result.expectedMinimumMessageCount(2)"}
{"problem": "public java.lang.Double METHOD_1 ( java.lang.Integer VAR_1 ) { java.lang.Double VAR_2 = 0.0 ; java.util.List < TYPE_1 > VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; for ( TYPE_1 VAR_5 : VAR_3 ) { VAR_2 += VAR_5 . METHOD_3 ( ) ; } return TYPE_2 . format ( VAR_2 ) ; }\n", "fixed": "public java.lang.Double METHOD_1 ( java.lang.Integer VAR_1 ) { java.lang.Double VAR_2 = 0.0 ; java.util.List < TYPE_1 > VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; for ( TYPE_1 VAR_5 : VAR_3 ) { if ( ( VAR_5 . METHOD_3 ( ) ) != null ) { VAR_2 += VAR_5 . METHOD_3 ( ) ; } } return TYPE_2 . format ( VAR_2 ) ; }\n"}
{"problem": "public boolean METHOD_1 ( ) { if ( ( VAR_1 . get ( 0 ) ) <= ( ( VAR_2 ) * ( - 1 ) ) ) { if ( ( VAR_1 . get ( 0 ) ) < ( VAR_1 . get ( INT_1 ) ) ) { return true ; } } return false ; }\n", "fixed": "public boolean METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) < INT_1 ) { return false ; } if ( ( VAR_1 . get ( 0 ) ) <= ( ( VAR_2 ) * ( - 1 ) ) ) { if ( ( VAR_1 . get ( 0 ) ) < ( VAR_1 . get ( INT_1 ) ) ) { return true ; } } return false ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; if ( ( VAR_3 . get ( 0 ) . value ( ) ) == ( VAR_4 ) ) { VAR_3 . remove ( 0 ) ; id ( ) ; VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( METHOD_7 ( ) ) ; return VAR_1 ; } return null ; }\n", "fixed": "private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; if ( ( VAR_3 . get ( 0 ) . value ( ) ) == ( VAR_4 ) ) { java.lang.System.out.println ( VAR_3 . get ( 0 ) ) ; VAR_3 . remove ( 0 ) ; id ( ) ; VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( METHOD_7 ( ) ) ; return VAR_1 ; } return null ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String text , TYPE_1 VAR_1 ) { if ( ! ( VAR_2 ) ) { VAR_3 = text ; VAR_4 . replace ( 0 , VAR_4 . length ( ) , STRING_1 ) ; VAR_5 = 0 ; VAR_6 = 0 ; VAR_2 = true ; VAR_7 = VAR_1 ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String text , TYPE_1 VAR_1 ) { if ( ! ( VAR_2 ) ) { VAR_3 = text ; VAR_4 . replace ( 0 , VAR_4 . length ( ) , STRING_1 ) ; VAR_5 = 0 ; VAR_6 = 1 ; VAR_2 = true ; VAR_7 = VAR_1 ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ( ( VAR_2 . size ( ) ) + 1 ) ) ; VAR_2 . add ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ( ( VAR_2 . size ( ) ) + 1 ) ) ; VAR_2 . add ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( event ) ; if ( VAR_1 . METHOD_3 ( ) ) { if ( ! ( VAR_1 . METHOD_4 ( ) ) ) { operation = VAR_1 . METHOD_5 ( VAR_2 ) ; } operation . METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { if ( VAR_1 . METHOD_3 ( ) ) { if ( ! ( VAR_1 . METHOD_4 ( ) ) ) { operation = VAR_1 . METHOD_5 ( VAR_2 ) ; } operation . METHOD_6 ( ) ; } VAR_1 . METHOD_2 ( event ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IronMQEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIronMQEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface IronMQEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIronMQEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( java.lang.String className , TYPE_3 type ) { try { java.lang.Class < TYPE_2 < ? > > VAR_1 = ( ( java.lang.Class < TYPE_2 < ? > > ) ( java.lang.Class . METHOD_2 ( className ) ) ) ; return METHOD_1 ( VAR_1 , type ) ; } catch ( java.lang.Throwable t ) { VAR_2 . METHOD_3 ( VAR_3 , ( STRING_1 + className ) , t ) ; } return null ; }\n", "fixed": "private < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( java.lang.String className , TYPE_3 type ) { try { java.lang.Class < TYPE_2 < ? > > VAR_1 = ( ( java.lang.Class < TYPE_2 < ? > > ) ( java.lang.Class . METHOD_2 ( className ) ) ) ; return METHOD_1 ( VAR_1 , type ) ; } catch ( java.lang.Throwable t ) { VAR_2 . METHOD_3 ( VAR_3 , ( STRING_1 + className ) ) ; } return null ; }\n"}
{"fixCommitSHA1": "04a010c8499fbc96b1e5a99bdbebaf0b38d24586", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \tpublic void addAll (char[] array, int offset, int length) {\r\n \t\tchar[] items = this.items;\r\n \t\tint sizeNeeded = size + length ;\r\n\t\tif (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));\r\n \t\tSystem.arraycopy(array, offset, items, size, length);\r\n \t\tsize += length;\r\n \t}\r", "fixed": " \tpublic void addAll (char[] array, int offset, int length) {\r\n \t\tchar[] items = this.items;\r\n \t\tint sizeNeeded = size + length ;\r\n\t\tif (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));\r\n \t\tSystem.arraycopy(array, offset, items, size, length);\r\n \t\tsize += length;\r\n \t}\r", "sourceBeforeFix": "sizeNeeded >= items.length", "sourceAfterFix": "sizeNeeded > items.length"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.util.Map < java.lang.String , java.lang.String > VAR_2 ) { TYPE_1 < java.lang.String > VAR_3 = TYPE_2 . METHOD_2 ( VAR_4 , VAR_5 ) ; for ( java.util.Map.Entry < java.lang.String , java.lang.String > VAR_6 : VAR_2 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( VAR_6 . METHOD_5 ( ) , VAR_7 , TYPE_2 . METHOD_6 ( VAR_1 , VAR_6 . getValue ( ) , VAR_4 . METHOD_7 ( ) , VAR_5 , VAR_5 ) ) ; } VAR_3 . execute ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.util.Map < java.lang.String , java.lang.String > VAR_2 ) { TYPE_1 < java.lang.String > VAR_3 = METHOD_2 ( VAR_4 , VAR_5 ) ; for ( java.util.Map.Entry < java.lang.String , java.lang.String > VAR_6 : VAR_2 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( VAR_6 . METHOD_5 ( ) , VAR_7 , METHOD_6 ( VAR_1 , VAR_6 . getValue ( ) , VAR_4 . METHOD_7 ( ) , VAR_5 , VAR_5 ) ) ; } VAR_3 . execute ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; for ( TYPE_2 VAR_4 : VAR_5 ) { VAR_1 . METHOD_4 ( VAR_4 . x , VAR_4 . y , INT_1 ) ; } VAR_1 . end ( ) ; VAR_1 . METHOD_3 ( VAR_6 ) ; if ( ( VAR_7 ) != null ) METHOD_5 ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; for ( TYPE_2 VAR_4 : VAR_5 ) { VAR_1 . METHOD_4 ( VAR_4 . x , VAR_4 . y , INT_1 ) ; } VAR_1 . end ( ) ; VAR_1 . METHOD_3 ( VAR_6 ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( INT_1 , INT_2 , VAR_2 ) ; VAR_3 . METHOD_2 ( new TYPE_2 [ ] { c , VAR_4 . METHOD_3 ( 0 ) , VAR_4 . METHOD_3 ( INT_3 ) } ) ; VAR_3 . METHOD_4 ( 0 ) ; VAR_3 . METHOD_5 ( 0 ) ; }\n", "fixed": "private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( INT_1 , INT_2 , VAR_2 ) ; VAR_3 . METHOD_2 ( new TYPE_2 [ ] { c , VAR_4 . METHOD_3 ( ) , VAR_4 . METHOD_3 ( ) } ) ; VAR_3 . METHOD_4 ( 0 ) ; VAR_3 . METHOD_5 ( 0 ) ; }\n"}
{"problem": "private void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { TYPE_2 time = new TYPE_2 ( INT_1 , 1 , INT_2 , INT_2 , INT_3 , 0 ) ; VAR_2 . METHOD_2 ( time ) ; java.util.List < TYPE_1 > VAR_3 = VAR_2 . METHOD_3 ( ) ; TYPE_3 . assertTrue ( VAR_3 . equals ( VAR_1 ) ) ; }\n", "fixed": "private void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { TYPE_2 time = new TYPE_2 ( INT_1 , 1 , INT_2 , INT_2 , INT_3 , 0 ) ; java.util.List < TYPE_1 > VAR_3 = VAR_2 . METHOD_2 ( time ) . METHOD_3 ( ) ; TYPE_3 . assertTrue ( VAR_3 . equals ( VAR_1 ) ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( java.lang.Object VAR_1 , java.lang.String VAR_2 , java.lang.Class [ ] VAR_3 ) throws TYPE_2 { TYPE_1 method = null ; boolean VAR_4 ; for ( java.lang.Class c : VAR_3 ) { VAR_4 = true ; try { method = VAR_1 . getClass ( ) . METHOD_2 ( VAR_2 , c ) ; } catch ( TYPE_2 VAR_5 ) { VAR_4 = false ; } if ( VAR_4 ) break ; } if ( method == null ) throw new TYPE_2 ( ( STRING_1 + VAR_2 ) ) ; return method ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.lang.Object VAR_1 , java.lang.String VAR_2 , java.lang.Class < ? > [ ] VAR_3 ) throws TYPE_2 { TYPE_1 method = null ; for ( java.lang.Class < ? > c : VAR_3 ) { method = METHOD_2 ( VAR_1 , VAR_2 , c ) ; if ( method != null ) break ; } if ( method == null ) throw new TYPE_2 ( ( STRING_1 + VAR_2 ) ) ; return method ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; for ( TYPE_2 VAR_1 : VAR_2 ) { if ( ( VAR_3 ) == ( ( TYPE_3 ) ( VAR_3 ) ) ) { TYPE_1 . METHOD_2 ( STRING_2 ) ; ( ( TYPE_3 ) ( VAR_3 ) ) . METHOD_3 ( ) ; } } VAR_4 = new java.util.LinkedList ( VAR_2 ) ; VAR_5 = null ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; for ( TYPE_2 VAR_1 : VAR_2 ) { if ( ( VAR_3 ) instanceof TYPE_3 ) { TYPE_1 . METHOD_2 ( STRING_2 ) ; ( ( TYPE_3 ) ( VAR_3 ) ) . METHOD_3 ( ) ; } } VAR_4 = new java.util.LinkedList ( VAR_2 ) ; VAR_5 = null ; }\n"}
{"problem": "public void METHOD_1 ( ) { java.io.File VAR_1 = null ; try { VAR_1 = new java.io.File ( new java.io.File ( STRING_1 ) . METHOD_2 ( ) ) ; } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_3 ( ) ; } java.lang.String VAR_3 = ( ( ( VAR_1 + STRING_2 ) + ( VAR_4 ) ) + STRING_3 ) + ( fileName ) ; TYPE_1 VAR_5 = new TYPE_1 ( VAR_6 , VAR_3 ) ; VAR_5 . METHOD_4 ( VAR_7 ) ; VAR_8 = VAR_9 . METHOD_5 ( VAR_5 ) ; }\n", "fixed": "public void METHOD_1 ( ) { java.io.File VAR_1 = null ; try { VAR_1 = new java.io.File ( new java.io.File ( STRING_1 ) . METHOD_2 ( ) ) ; } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_3 ( ) ; } java.lang.String VAR_3 = ( ( ( VAR_1 + STRING_2 ) + ( VAR_4 ) ) + STRING_3 ) + ( fileName ) ; TYPE_1 VAR_5 = new TYPE_1 ( VAR_6 , VAR_3 ) ; VAR_8 = VAR_9 . METHOD_5 ( VAR_5 ) ; VAR_8 . METHOD_4 ( VAR_7 ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String op ) { for ( java.lang.String key : this . VAR_1 . METHOD_2 ( ) ) { java.lang.String VAR_2 = key ; java.lang.String VAR_3 = this . VAR_1 . get ( VAR_2 ) ; if ( op . equals ( VAR_3 ) ) { return key ; } } return STRING_1 ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String op ) { for ( java.lang.String key : this . VAR_1 . METHOD_2 ( ) ) { java.lang.String value = this . VAR_1 . get ( key ) ; if ( op . equals ( value ) ) { return key ; } } return null ; }\n"}
{"problem": "public static boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { java.lang.String VAR_2 = VAR_3 . METHOD_2 ( STRING_1 ) ; if ( ( ( VAR_2 == null ) || ( VAR_2 . METHOD_3 ( \"true\" ) ) ) || ( VAR_2 . METHOD_3 ( STRING_2 ) ) ) { VAR_1 = true ; } else { VAR_1 = false ; } } return VAR_1 ; }\n", "fixed": "public static boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { java.lang.String VAR_2 = VAR_3 . METHOD_2 ( STRING_1 ) ; if ( ( ( ( VAR_2 == null ) || ( ( VAR_2 . trim ( ) . length ( ) ) == 0 ) ) || ( VAR_2 . METHOD_3 ( \"true\" ) ) ) || ( VAR_2 . METHOD_3 ( STRING_2 ) ) ) { VAR_1 = true ; } else { VAR_1 = false ; } } return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = VAR_3 . getText ( ) . toString ( ) ; VAR_4 = false ; VAR_5 . METHOD_2 ( false ) ; VAR_6 . METHOD_3 ( ) ; if ( ( VAR_7 . METHOD_4 ( ) ) != ( VAR_8 ) ) { VAR_6 . METHOD_5 ( ) ; } else { VAR_6 . METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = VAR_3 . getText ( ) . toString ( ) ; VAR_4 = false ; VAR_5 . METHOD_2 ( false ) ; if ( ( VAR_7 . METHOD_4 ( ) ) != ( VAR_8 ) ) { } else { } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MsvEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedMsvEndpointBuilder advanced() {\n             return (AdvancedMsvEndpointBuilder) this;\n         }", "fixed": "     \n    public interface MsvEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedMsvEndpointBuilder advanced() {\n             return (AdvancedMsvEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws java.io.IOException { java.io.File file = new java.io.File ( VAR_1 ) ; if ( ( ! ( file . METHOD_2 ( ) ) ) || ( ! ( file . METHOD_3 ( ) ) ) ) { throw new java.io.IOException ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } return METHOD_1 ( file , null , VAR_2 , VAR_3 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_3 ) throws java.io.IOException { java.io.File file = new java.io.File ( VAR_1 ) ; if ( ( ! ( file . METHOD_2 ( ) ) ) || ( ! ( file . METHOD_3 ( ) ) ) ) { throw new java.io.IOException ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } return METHOD_1 ( file , null , VAR_3 ) ; }\n"}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "     }\n     if (!isProperlyConfigured) {\n      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n     if (!isConnected()) {\n      logger.error(\"InfluxDB is not yet connected\");\n       return;\n     }", "fixed": "     }\n     if (!isProperlyConfigured) {\n      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n     if (!isConnected()) {\n      logger.warn(\"InfluxDB is not yet connected\");\n       return;\n     }", "sourceBeforeFix": "logger.error(\"InfluxDB is not yet connected\")", "sourceAfterFix": "logger.warn(\"InfluxDB is not yet connected\")"}
{"problem": "private boolean METHOD_1 ( android.content.Context VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { if ( ( ( ( ( ( METHOD_3 ( VAR_1 ) ) && ( METHOD_4 ( VAR_1 ) ) ) && ( METHOD_5 ( VAR_1 ) ) ) && ( METHOD_6 ( VAR_1 ) ) ) && ( METHOD_7 ( VAR_1 ) ) ) && ( METHOD_8 ( VAR_1 ) ) ) { METHOD_9 ( ) ; return true ; } else { return false ; } } else { return false ; } }\n", "fixed": "private boolean METHOD_1 ( android.content.Context VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { if ( ( ( ( ( ( METHOD_3 ( VAR_1 ) ) && ( METHOD_4 ( VAR_1 ) ) ) && ( METHOD_5 ( VAR_1 ) ) ) && ( METHOD_6 ( VAR_1 ) ) ) && ( METHOD_7 ( VAR_1 ) ) ) && ( ! ( METHOD_8 ( VAR_1 ) ) ) ) { METHOD_9 ( ) ; return true ; } else { return false ; } } else { return false ; } }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.String error = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_1 . METHOD_2 ( VAR_3 ) ) . METHOD_3 ( VAR_1 . METHOD_2 ( VAR_4 ) ) ; if ( ! ( error . isEmpty ( ) ) ) { throw new TYPE_1 ( error ) ; } }\n", "fixed": "public void METHOD_1 ( ) { java.lang.String error = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_1 . METHOD_2 ( VAR_3 ) ) . METHOD_3 ( VAR_1 . METHOD_2 ( VAR_4 ) ) ; if ( error . isEmpty ( ) ) { throw new TYPE_1 ( error ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 16:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 16:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"problem": "private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return ; } VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_3 = TYPE_2 . METHOD_3 ( VAR_4 . METHOD_4 ( ) , VAR_2 , VAR_5 , VAR_6 , VAR_7 . METHOD_5 ( ) ) ; VAR_8 = VAR_3 . x ; VAR_9 = VAR_3 . y ; VAR_7 . METHOD_6 ( VAR_8 , VAR_9 ) ; TYPE_3 . METHOD_7 ( VAR_10 , ( ( ( STRING_1 + ( VAR_8 ) ) + STRING_2 ) + ( VAR_9 ) ) ) ; }\n", "fixed": "private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return ; } VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_3 = METHOD_3 ( VAR_4 . METHOD_4 ( ) , VAR_2 , VAR_5 , VAR_6 , VAR_7 . METHOD_5 ( ) ) ; VAR_8 = VAR_3 . x ; VAR_9 = VAR_3 . y ; VAR_7 . METHOD_6 ( VAR_8 , VAR_9 ) ; TYPE_3 . METHOD_7 ( VAR_10 , ( ( ( STRING_1 + ( VAR_8 ) ) + STRING_2 ) + ( VAR_9 ) ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; VAR_3 = VAR_1 . METHOD_3 ( VAR_4 ) ; METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ; java.lang.CharSequence VAR_5 = VAR_1 . METHOD_3 ( VAR_6 ) ; METHOD_4 ( ) . METHOD_6 ( VAR_5 ) ; if ( ( METHOD_7 ( ) . METHOD_8 ( ) ) == 0 ) { VAR_7 . METHOD_9 ( ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_3 = VAR_1 . METHOD_3 ( VAR_4 ) ; METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ; java.lang.CharSequence VAR_5 = VAR_1 . METHOD_3 ( VAR_6 ) ; METHOD_4 ( ) . METHOD_6 ( VAR_5 ) ; if ( ( METHOD_7 ( ) . METHOD_8 ( ) ) == 0 ) { VAR_7 . METHOD_9 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { while ( true ) { try { TYPE_1 listener = new TYPE_1 ( this . METHOD_2 ( ) . get ( VAR_1 ) . METHOD_3 ( ) ) ; TYPE_2 VAR_2 ; while ( ( VAR_2 = listener . METHOD_4 ( ) ) != null ) { VAR_2 . METHOD_5 ( VAR_3 ) ; METHOD_6 ( VAR_2 ) ; } } catch ( java.io.IOException VAR_4 ) { java.util.logging.Logger.getLogger ( VAR_5 class . getName ( ) ) . METHOD_7 ( VAR_6 , null , VAR_4 ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { while ( true ) { try { TYPE_1 listener = new TYPE_1 ( this . METHOD_2 ( ) . get ( VAR_1 ) . METHOD_3 ( ) ) ; TYPE_2 VAR_2 ; while ( ( VAR_2 = listener . METHOD_4 ( ) ) != null ) { METHOD_6 ( VAR_2 ) ; } } catch ( java.io.IOException VAR_4 ) { java.util.logging.Logger.getLogger ( VAR_5 class . getName ( ) ) . METHOD_7 ( VAR_6 , null , VAR_4 ) ; } } }\n"}
{"problem": "public void METHOD_1 ( ) { final TYPE_1 VAR_1 = this . VAR_1 ; TYPE_2 VAR_2 = new TYPE_2 ( this ) ; VAR_2 . METHOD_2 ( getString ( VAR_3 ) ) . METHOD_3 ( VAR_4 , new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 VAR_5 , int id ) { METHOD_5 ( ) ; } } ) . METHOD_6 ( VAR_6 , null ) ; VAR_2 . METHOD_7 ( ) . show ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_2 VAR_2 = new TYPE_2 ( this ) ; VAR_2 . METHOD_2 ( getString ( VAR_3 ) ) . METHOD_3 ( VAR_4 , new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 VAR_5 , int id ) { METHOD_5 ( ) ; } } ) . METHOD_6 ( VAR_6 , null ) ; VAR_2 . METHOD_7 ( ) . show ( ) ; }\n"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Caller in Function Call", "problem": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "fixed": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,externsRoot)", "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,externsRoot)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( METHOD_2 ( ) ) != null ) ? METHOD_2 ( ) : new TYPE_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 ) ; VAR_3 . METHOD_1 ( VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( METHOD_2 ( ) ) != null ) ? METHOD_2 ( ) : new TYPE_2 ( ) ; VAR_2 = VAR_2 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 ) ; VAR_3 . METHOD_1 ( VAR_2 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) != null ) { VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_2 . getName ( ) , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) , VAR_2 . METHOD_6 ( ) , ( ( VAR_2 . METHOD_7 ( ) ) != null ? VAR_2 . METHOD_7 ( ) : java.util.Calendar.getInstance ( ) . getTime ( ) ) , VAR_2 . METHOD_8 ( ) ) ; } return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_2 . getName ( ) , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) , VAR_2 . METHOD_6 ( ) , ( ( VAR_2 . METHOD_7 ( ) ) != null ? VAR_2 . METHOD_7 ( ) : java.util.Calendar.getInstance ( ) . getTime ( ) ) , VAR_2 . METHOD_8 ( ) ) ; } return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_1 VAR_4 ) throws TYPE_2 { if ( VAR_3 . METHOD_2 ( STRING_1 ) ) { VAR_5 = true ; } else if ( VAR_3 . METHOD_2 ( STRING_2 ) ) { VAR_6 = false ; } else { throw new java.lang.Exception ( ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_1 VAR_4 ) throws TYPE_2 { if ( VAR_3 . METHOD_2 ( STRING_1 ) ) { VAR_5 = true ; } else if ( VAR_3 . METHOD_2 ( STRING_2 ) ) { VAR_5 = false ; } else { } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( STRING_1 , VAR_2 . getText ( ) . toString ( ) ) ; intent . METHOD_2 ( STRING_2 , true ) ; METHOD_3 ( intent ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( STRING_1 , VAR_2 . getText ( ) . toString ( ) ) ; intent . METHOD_2 ( STRING_2 , true ) ; METHOD_3 ( intent ) ; }\n"}
{"fixCommitSHA1": "849b3ba2b1282a89d8cf60a10891ea11a9e16bb4", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Wrong Function Name", "problem": "             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n            assertEquals(resp.getHeader(\"target\"), target);\ntarget = \"http:\n             f = client.prepareGet(target).execute();", "fixed": "             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n            assertEquals(resp.getHeader(\"target\"), \"/\");\ntarget = \"http:\n             f = client.prepareGet(target).execute();", "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = null ; if ( VAR_1 != ( - 1 ) ) { VAR_2 = TYPE_2 . METHOD_2 ( ) . get ( VAR_1 ) ; this . VAR_2 = VAR_2 ; } else this . VAR_2 = null ; if ( METHOD_3 ( ) ) { view . get ( ) . METHOD_4 ( VAR_2 . getName ( ) , VAR_2 . getName ( ) , this ) ; } }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = null ; if ( VAR_1 != ( - 1 ) ) { VAR_2 = TYPE_2 . METHOD_2 ( ) . get ( VAR_1 ) ; this . VAR_2 = VAR_2 ; } else this . VAR_2 = null ; if ( METHOD_3 ( ) ) { view . get ( ) . METHOD_4 ( source . getName ( ) , VAR_2 . getName ( ) , this ) ; } }\n"}
{"problem": "public static void METHOD_1 ( ) { java.util.Collection < TYPE_1 > VAR_1 = TYPE_2 . get ( ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_2 ) ; } java.util.Collection < java.io.File > VAR_3 = TYPE_4 . get ( ) ; for ( java.io.File file : VAR_3 ) { if ( ! ( file . delete ( ) ) ) { TYPE_5 . METHOD_3 ( ( STRING_1 + ( file . METHOD_4 ( ) ) ) ) ; } } VAR_1 . METHOD_5 ( ) ; VAR_3 . METHOD_5 ( ) ; }\n", "fixed": "public static void METHOD_1 ( ) { java.util.Collection < TYPE_1 > VAR_1 = TYPE_2 . get ( ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_2 ) ; } java.util.Collection < java.io.File > VAR_3 = TYPE_4 . get ( ) ; for ( java.io.File file : VAR_3 ) { if ( ! ( file . delete ( ) ) ) { TYPE_5 . METHOD_3 ( ( STRING_1 + ( file . METHOD_4 ( ) ) ) ) ; } } TYPE_2 . remove ( ) ; TYPE_4 . remove ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View VAR_2 , int position , long id ) { java.util.HashMap < java.lang.String , java.lang.String > VAR_3 ; VAR_3 = VAR_4 . get ( position ) ; TYPE_2 . METHOD_2 ( VAR_5 , ( STRING_1 + ( VAR_3 . toString ( ) ) ) ) ; android.content.Intent intent = new android.content.Intent ( getContext ( ) , VAR_6 class ) ; intent . METHOD_3 ( STRING_2 , VAR_3 ) ; METHOD_4 ( intent ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View VAR_2 , int position , long id ) { java.util.HashMap < java.lang.String , java.lang.String > VAR_3 ; VAR_3 = VAR_4 . get ( position ) ; android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_6 class ) ; intent . METHOD_3 ( STRING_2 , VAR_3 ) ; METHOD_4 ( intent ) ; }\n"}
{"problem": "private boolean METHOD_1 ( ) { while ( true ) { if ( METHOD_2 ( ) ) { int VAR_1 = 0 ; try { VAR_1 = METHOD_3 ( ) ; METHOD_4 ( ) ; } finally { boolean VAR_2 = METHOD_5 ( ) ; TYPE_1 . METHOD_6 ( VAR_1 ) ; if ( ! VAR_2 ) { return true ; } } } else { return false ; } } }\n", "fixed": "private boolean METHOD_1 ( ) { while ( true ) { if ( METHOD_2 ( ) ) { int VAR_1 = 0 ; try { VAR_1 = METHOD_3 ( ) ; METHOD_4 ( ) ; } finally { boolean VAR_2 = METHOD_5 ( ) ; if ( VAR_1 > 0 ) { TYPE_1 . METHOD_6 ( VAR_1 ) ; } if ( ! VAR_2 ) { return true ; } } } else { return false ; } } }\n"}
{"fixCommitSHA1": "8018d1af58330b6d21c858fa5ebfee6a66cd10b3", "projectName": "apache.hadoop", "bugType": "Wrong Function Name", "problem": "           out.println(keyName + \" has been successfully deleted.\");\n           printProviderWritten();\n         } catch (IOException e) {\n          out.println(keyName + \" has not been deleted.\");\n           throw e;\n         }\n       }", "fixed": "           out.println(keyName + \" has been successfully deleted.\");\n           printProviderWritten();\n         } catch (IOException e) {\n          out.println(keyName + \" has not been deleted. \" + e.toString());\n           throw e;\n         }\n       }", "sourceBeforeFix": "e.getMessage()", "sourceAfterFix": "e.toString()"}
{"problem": "public void METHOD_1 ( byte [ ] data , int VAR_1 , int VAR_2 ) { if ( ( VAR_2 + ( VAR_3 ) ) > ( VAR_4 ) ) { VAR_5 . error ( STRING_1 ) ; VAR_2 = ( VAR_4 ) - ( VAR_3 ) ; } TYPE_1 . METHOD_2 ( data , VAR_1 , VAR_6 , VAR_3 , VAR_2 ) ; VAR_3 += VAR_2 ; VAR_5 . METHOD_3 ( STRING_2 , VAR_3 , TYPE_2 . METHOD_4 ( VAR_6 , VAR_3 ) ) ; }\n", "fixed": "public void METHOD_1 ( byte [ ] data , int VAR_1 , int VAR_2 ) { if ( ( VAR_2 + ( VAR_3 ) ) > ( VAR_4 ) ) { VAR_5 . error ( STRING_1 ) ; VAR_2 = ( VAR_4 ) - ( VAR_3 ) ; } TYPE_1 . METHOD_2 ( data , VAR_1 , VAR_6 , VAR_3 , VAR_2 ) ; VAR_3 += VAR_2 ; VAR_5 . METHOD_3 ( STRING_2 , VAR_2 , TYPE_2 . METHOD_4 ( data , VAR_1 , VAR_2 ) ) ; }\n"}
{"problem": "java.util.ArrayList < TYPE_1 > METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { float VAR_2 = 0 ; for ( TYPE_1 VAR_3 : VAR_1 ) { if ( ( ( VAR_3 . METHOD_2 ( ) ) - ( VAR_3 . METHOD_3 ( ) ) ) > VAR_2 ) { VAR_2 = ( VAR_3 . METHOD_2 ( ) ) - ( VAR_3 . METHOD_3 ( ) ) ; } } for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_3 . METHOD_1 ( VAR_2 ) ; } return VAR_1 ; }\n", "fixed": "java.util.ArrayList < TYPE_1 > METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { double VAR_2 = 0 ; for ( TYPE_1 VAR_3 : VAR_1 ) { if ( ( ( VAR_3 . METHOD_2 ( ) ) - ( VAR_3 . METHOD_3 ( ) ) ) > VAR_2 ) { VAR_2 = ( VAR_3 . METHOD_2 ( ) ) - ( VAR_3 . METHOD_3 ( ) ) ; } } for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_3 . METHOD_1 ( VAR_2 ) ; } return VAR_1 ; }\n"}
{"problem": "private void METHOD_1 ( final TYPE_1 VAR_1 ) { final java.util.Collection < TYPE_1 > VAR_2 = VAR_3 . get ( VAR_1 . type ) ; for ( final TYPE_1 VAR_4 : VAR_2 ) { if ( VAR_5 . METHOD_2 ( VAR_6 ) ) { VAR_7 . add ( VAR_4 ) ; } } }\n", "fixed": "private void METHOD_1 ( final TYPE_1 VAR_1 ) { final java.util.Collection < TYPE_1 > VAR_2 = VAR_3 . get ( VAR_1 . type ) ; for ( final TYPE_1 VAR_4 : VAR_2 ) { if ( ( VAR_5 . METHOD_2 ( VAR_6 ) ) && ( ! ( VAR_4 . equals ( VAR_1 ) ) ) ) { VAR_7 . add ( VAR_4 ) ; } } }\n"}
{"fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "fixed": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "sourceBeforeFix": "final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); ", "sourceAfterFix": "final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); "}
{"fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         processor.registerWebSocketHandler(\"/*\", new EchoHandler());\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request);\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         assertEquals(b.toString(), \"yoWebSocket\");", "fixed": "         processor.registerWebSocketHandler(\"/*\", new EchoHandler());\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         assertEquals(b.toString(), \"yoWebSocket\");", "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}
{"problem": "public static void main ( java.lang.String [ ] args ) { VAR_1 . METHOD_1 ( STRING_1 , STRING_2 ) ; int [ ] a = new int [ ] { 1 , 0 , INT_1 , INT_2 , INT_1 , INT_3 , INT_2 , INT_1 } ; TYPE_1 . METHOD_2 ( a ) ; TYPE_1 . METHOD_2 ( STRING_3 , TYPE_1 . METHOD_3 ( a , 0 , ( ( a . length ) - 1 ) , INT_1 ) ) ; TYPE_1 . METHOD_2 ( a ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { VAR_1 . METHOD_1 ( STRING_1 , STRING_2 ) ; int [ ] a = new int [ ] { 1 , 0 , INT_1 , INT_2 , INT_1 , INT_3 , INT_2 , INT_1 } ; TYPE_1 . METHOD_2 ( a ) ; TYPE_1 . METHOD_2 ( STRING_3 , TYPE_1 . METHOD_3 ( a , 0 , ( ( a . length ) - 1 ) , 1 ) ) ; TYPE_1 . METHOD_2 ( a ) ; }\n"}
{"problem": "public void METHOD_1 ( double VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_1 > INT_1 ) || ( VAR_1 < INT_2 ) ) VAR_2 . METHOD_3 ( 0 ) ; else if ( ( VAR_1 > INT_3 ) || ( VAR_1 < INT_4 ) ) VAR_2 . METHOD_3 ( 1 ) ; }\n", "fixed": "public void METHOD_1 ( double VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_1 > INT_1 ) || ( VAR_1 < INT_2 ) ) VAR_2 . METHOD_3 ( 0 ) ; else if ( ( VAR_1 > INT_3 ) && ( VAR_1 < INT_4 ) ) VAR_2 . METHOD_3 ( 1 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( this ) ; TYPE_2 VAR_3 = VAR_4 . get ( VAR_1 ) ; TYPE_2 tmp = VAR_4 . get ( VAR_1 . expr ) ; if ( ( VAR_3 == null ) && ( tmp != null ) ) VAR_4 . set ( VAR_1 , tmp ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( this ) ; TYPE_2 VAR_3 = VAR_4 . get ( VAR_1 ) ; TYPE_2 tmp = VAR_4 . get ( VAR_1 . expr ) ; if ( VAR_3 == null ) VAR_4 . set ( VAR_1 , tmp ) ; }\n"}
{"problem": "public int compareTo ( TYPE_1 VAR_1 ) { if ( ( this . y ) < ( VAR_1 . y ) ) { return - 1 ; } else if ( ( this . y ) > ( VAR_1 . y ) ) { return 1 ; } else { if ( ( this . x ) < ( VAR_1 . y ) ) { return - 1 ; } else if ( ( this . x ) > ( VAR_1 . y ) ) { return 1 ; } else { return 0 ; } } }\n", "fixed": "public int compareTo ( TYPE_1 VAR_1 ) { if ( ( this . y ) < ( VAR_1 . y ) ) { return - 1 ; } else if ( ( this . y ) > ( VAR_1 . y ) ) { return 1 ; } else { if ( ( this . x ) < ( VAR_1 . x ) ) { return - 1 ; } else if ( ( this . x ) > ( VAR_1 . x ) ) { return 1 ; } else { return 0 ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) == null ) ) { android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_2 ( intent , VAR_4 , VAR_5 ) ; TYPE_1 . METHOD_3 ( VAR_6 , STRING_1 ) ; } }\n", "fixed": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) == null ) ) { android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_2 ( intent , VAR_4 , VAR_5 ) ; } }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( ) { java.lang.System.out.println ( ( ( VAR_1 ) + STRING_1 ) ) ; java.util.List < TYPE_1 > VAR_2 = VAR_1 . METHOD_2 ( STRING_2 ) . METHOD_3 ( ) ; if ( VAR_2 == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } else { return VAR_2 ; } }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_2 = VAR_1 . METHOD_2 ( STRING_2 ) . METHOD_3 ( ) ; if ( VAR_2 == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } else { return VAR_2 ; } }\n"}
{"fixCommitSHA1": "d0ee16781a214f8470462334346519b762c5b72b", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "             }\n            fireMessageReceived(context, remoteAddress, result);\n         }\n     }\n    private void fireMessageReceived(ChannelHandlerContext context, SocketAddress remoteAddress, Object result) {\n         if (unfold) {\n             if (result instanceof Object[]) {\n                 for (Object r: (Object[]) result) {", "fixed": "             }\n            unfoldAndfireMessageReceived(context, result, remoteAddress);\n         }\n     }\n    private void unfoldAndfireMessageReceived(\n            ChannelHandlerContext context, Object result, SocketAddress remoteAddress) {\n         if (unfold) {\n             if (result instanceof Object[]) {\n                 for (Object r: (Object[]) result) {", "sourceBeforeFix": "decodeLast(ctx,e.getChannel(),cumulation,state)", "sourceAfterFix": "decodeLast(ctx,e.getChannel(),replayable,state)"}
{"problem": "static synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . remove ( VAR_1 ) ) ) { throw TYPE_2 . METHOD_2 ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) ) ; } if ( ( VAR_2 . size ( ) ) <= 1 ) { VAR_3 = false ; } if ( VAR_2 . isEmpty ( ) ) { VAR_4 = false ; } }\n", "fixed": "static void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { if ( ! ( VAR_2 . remove ( VAR_1 ) ) ) { throw TYPE_2 . METHOD_2 ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) ) ; } if ( ( VAR_2 . size ( ) ) <= 1 ) { VAR_3 = false ; } if ( VAR_2 . isEmpty ( ) ) { VAR_4 = false ; } } }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; android.content.Intent VAR_3 = new android.content.Intent ( this , VAR_4 class ) ; VAR_3 . METHOD_4 ( STRING_1 , VAR_5 ) ; this . METHOD_5 ( VAR_3 ) ; METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; android.content.Intent VAR_3 = new android.content.Intent ( this , VAR_4 class ) ; VAR_3 . METHOD_4 ( STRING_1 , VAR_5 ) ; this . METHOD_5 ( VAR_3 ) ; result ( ) ; METHOD_6 ( ) ; }\n"}
{"problem": "private void METHOD_1 ( final java.lang.Throwable VAR_1 , final TYPE_1 VAR_2 , final TYPE_2 response , final java.lang.Object [ ] args ) throws java.lang.Exception { final java.lang.Exception VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , response ) ; for ( java.lang.Object arg : args ) { if ( arg instanceof TYPE_3 ) { ( ( TYPE_3 ) ( arg ) ) . error ( VAR_3 ) ; return ; } } throw VAR_3 ; }\n", "fixed": "private void METHOD_1 ( final java.lang.Throwable VAR_1 , final TYPE_1 VAR_2 , final TYPE_2 response , final java.lang.Object [ ] args ) throws java.lang.Exception { final java.lang.Exception VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , response ) ; if ( args != null ) { for ( java.lang.Object arg : args ) { if ( arg instanceof TYPE_3 ) { ( ( TYPE_3 ) ( arg ) ) . error ( VAR_3 ) ; return ; } } } throw VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = getActivity ( ) . METHOD_2 ( VAR_2 , 0 ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_3 ( ) ; VAR_4 = VAR_5 . METHOD_4 ( ) ; for ( int i = 0 ; i < ( VAR_6 ) ; i ++ ) { VAR_3 . METHOD_5 ( ( STRING_1 + i ) , VAR_4 [ i ] ) ; } VAR_3 . METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_5 ) != null ) { TYPE_1 VAR_1 = getActivity ( ) . METHOD_2 ( VAR_2 , 0 ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_3 ( ) ; VAR_4 = VAR_5 . METHOD_4 ( ) ; for ( int i = 0 ; i < ( VAR_6 ) ; i ++ ) { VAR_3 . METHOD_5 ( ( STRING_1 + i ) , VAR_4 [ i ] ) ; } VAR_3 . METHOD_6 ( ) ; } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.util.Collection < ? extends TYPE_3 > VAR_2 ) { if ( ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ) { return new TYPE_1 ( VAR_1 , 0 ) ; } else { TYPE_1 array = new TYPE_1 ( VAR_1 , VAR_2 . size ( ) ) ; int i = 0 ; for ( TYPE_3 VAR_3 : VAR_2 ) { array . set ( i , VAR_3 ) ; } return array ; } }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.util.Collection < ? extends TYPE_3 > VAR_2 ) { if ( ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ) { return new TYPE_1 ( VAR_1 , 0 ) ; } else { TYPE_1 array = new TYPE_1 ( VAR_1 , VAR_2 . size ( ) ) ; int i = 0 ; for ( TYPE_3 VAR_3 : VAR_2 ) { array . set ( i , VAR_3 ) ; i ++ ; } return array ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( java.lang.Integer id , java.lang.String url , TYPE_1 VAR_1 ) { TYPE_2 type = null ; TYPE_3 VAR_2 = null ; if ( ( url . contains ( VAR_3 . METHOD_2 ( ) ) ) && ( ( VAR_3 . getName ( ) ) == ( VAR_4 ) ) ) { type = METHOD_3 ( VAR_1 ) ; if ( type != null ) { TYPE_4 VAR_5 = new TYPE_4 ( VAR_3 , VAR_1 ) ; VAR_2 = VAR_5 . METHOD_4 ( type ) ; } } METHOD_5 ( VAR_2 ) ; }\n", "fixed": "private void METHOD_1 ( java.lang.Integer id , java.lang.String url , TYPE_1 VAR_1 ) { TYPE_2 type = null ; TYPE_3 VAR_2 = null ; if ( ( url . contains ( VAR_3 . METHOD_2 ( ) ) ) && ( ( VAR_3 . getName ( ) ) == ( VAR_4 ) ) ) { type = METHOD_3 ( VAR_1 ) ; if ( type != null ) { TYPE_4 VAR_5 = new TYPE_4 ( VAR_3 , VAR_1 ) ; VAR_2 = VAR_5 . METHOD_4 ( type , url ) ; } } METHOD_5 ( VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { try { this . VAR_1 = this . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_2 ) { this . VAR_3 . METHOD_3 ( VAR_2 ) ; } try { this . METHOD_4 ( ) ; } catch ( TYPE_2 | TYPE_1 VAR_2 ) { this . VAR_3 . METHOD_3 ( VAR_2 ) ; } this . METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { try { this . VAR_1 = this . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_2 ) { this . VAR_3 . METHOD_3 ( VAR_2 ) ; } try { this . METHOD_4 ( ) ; } catch ( TYPE_2 VAR_2 ) { this . VAR_3 . METHOD_3 ( VAR_2 ) ; } catch ( TYPE_1 VAR_2 ) { this . VAR_3 . METHOD_3 ( VAR_2 ) ; } this . METHOD_5 ( ) ; }\n"}
{"problem": "private boolean METHOD_1 ( TYPE_1 VAR_1 , java.util.Calendar VAR_2 , java.util.Calendar VAR_3 ) { java.util.Iterator < TYPE_2 > VAR_4 = METHOD_2 ( VAR_2 , VAR_3 ) ; while ( VAR_4 . METHOD_3 ( ) ) { TYPE_2 VAR_5 = VAR_4 . METHOD_4 ( ) ; if ( ( VAR_5 . METHOD_5 ( ) ) == ( VAR_1 . METHOD_5 ( ) ) ) return false ; } return true ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 VAR_1 , java.util.Calendar VAR_2 ) { java.util.Iterator < TYPE_2 > VAR_4 = METHOD_2 ( VAR_2 ) ; while ( VAR_4 . METHOD_3 ( ) ) { TYPE_2 VAR_5 = VAR_4 . METHOD_4 ( ) ; if ( ( VAR_5 . METHOD_5 ( ) ) == ( VAR_1 . METHOD_5 ( ) ) ) return false ; } return true ; }\n"}
{"problem": "private boolean METHOD_1 ( java.lang.Integer VAR_1 , java.lang.Integer VAR_2 ) { if ( ( VAR_1 == null ) || ( VAR_2 == null ) ) return true ; switch ( VAR_3 ) { case VAR_4 : return VAR_1 == VAR_2 ; case VAR_5 : return VAR_1 < VAR_2 ; case VAR_6 : return VAR_1 > VAR_2 ; case VAR_7 : return VAR_1 <= VAR_2 ; case VAR_8 : return VAR_1 >= VAR_2 ; default : break ; } return false ; }\n", "fixed": "private boolean METHOD_1 ( java.lang.Integer VAR_1 , java.lang.Integer VAR_2 ) { if ( ( VAR_1 == null ) || ( VAR_2 == null ) ) return true ; switch ( VAR_3 ) { case VAR_4 : return VAR_1 . equals ( VAR_2 ) ; case VAR_5 : return VAR_1 < VAR_2 ; case VAR_6 : return VAR_1 > VAR_2 ; case VAR_7 : return VAR_1 <= VAR_2 ; case VAR_8 : return VAR_1 >= VAR_2 ; default : break ; } return false ; }\n"}
{"problem": "public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , TYPE_5 VAR_5 ) throws java.io.IOException , TYPE_6 , TYPE_7 { java.lang.String VAR_6 ; try { VAR_6 = TYPE_8 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; } catch ( TYPE_9 VAR_7 ) { throw new TYPE_10 ( VAR_7 ) ; } TYPE_8 . METHOD_3 ( VAR_6 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }\n", "fixed": "public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , TYPE_5 VAR_5 ) throws java.io.IOException { java.lang.String VAR_6 = TYPE_8 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; TYPE_8 . METHOD_3 ( VAR_6 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }\n"}
{"problem": "public static boolean METHOD_1 ( java.lang.String VAR_1 ) { for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) { if ( VAR_2 . get ( i ) . equals ( VAR_1 ) ) { return true ; } } return false ; }\n", "fixed": "public static boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 . size ( ) ) > 0 ) { for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) { if ( VAR_2 . get ( i ) . equals ( VAR_1 ) ) { return true ; } } } return false ; }\n"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     }\n     if (LOG.isDebugEnabled()) {\n      LOG.debug(split.getRegionName().toString()\n          +\" no longer has references to \" + parent.toString());\n     }\n     BatchUpdate b = new BatchUpdate(parent);", "fixed": "     }\n     if (LOG.isDebugEnabled()) {\n      LOG.debug(split.getRegionNameAsString() +\n        \" no longer has references to \" + parent.toString());\n     }\n     BatchUpdate b = new BatchUpdate(parent);", "sourceBeforeFix": "info.getRegionName()", "sourceAfterFix": "info.getRegionNameAsString()"}
{"fixCommitSHA1": "ea323fc628b5c5f5fb0a954650e96be6adc32858", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\tdouble temp = ParseUtils.parseTemperature(S300TH_DATA_1);\n \t\tAssert.assertEquals(23.2, temp, 0.01);\n\t\tdouble humidity = ParseUtils.parseHumidity(S300TH_DATA_1);\n \t\tAssert.assertEquals(50.8, humidity, 0.01);\n \t\tString address = ParseUtils.parseS300THAddress(S300TH_DATA_1);", "fixed": " \t\tdouble temp = ParseUtils.parseTemperature(S300TH_DATA_1);\n \t\tAssert.assertEquals(23.2, temp, 0.01);\n\t\tdouble humidity = ParseUtils.parseS300THHumidity(S300TH_DATA_1);\n \t\tAssert.assertEquals(50.8, humidity, 0.01);\n \t\tString address = ParseUtils.parseS300THAddress(S300TH_DATA_1);", "sourceBeforeFix": "ParseUtils.parseHumidity(S300TH_DATA_1)", "sourceAfterFix": "ParseUtils.parseS300THHumidity(S300TH_DATA_1)"}
{"problem": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = this . VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( this . VAR_3 . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( VAR_1 ) ; if ( ( VAR_2 . open ( ) ) == ( VAR_4 ) ) { this . VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; } }\n", "fixed": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = this . VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( this . VAR_3 . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( VAR_1 ) ; if ( ( VAR_2 . open ( this . VAR_3 ) ) == ( VAR_4 ) ) { this . VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; } }\n"}
{"problem": "public < TYPE_1 > void METHOD_1 ( TYPE_2 < TYPE_1 > key , TYPE_1 value ) { TYPE_3 VAR_1 = VAR_2 ; if ( VAR_1 == null ) { throw new TYPE_4 ( ( ( STRING_1 + key ) + STRING_2 ) ) ; } TYPE_5 . METHOD_2 ( ( ! ( VAR_1 . METHOD_3 ( key ) ) ) , ( STRING_3 + STRING_4 ) , key , VAR_1 . get ( key ) , value ) ; VAR_1 . put ( key , value ) ; }\n", "fixed": "public < TYPE_1 > void METHOD_1 ( TYPE_2 < TYPE_1 > key , TYPE_1 value ) { TYPE_3 VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 == null ) { throw new TYPE_4 ( ( ( STRING_1 + key ) + STRING_2 ) ) ; } TYPE_5 . METHOD_2 ( ( ! ( VAR_1 . METHOD_3 ( key ) ) ) , ( STRING_3 + STRING_4 ) , key , VAR_1 . get ( key ) , value ) ; VAR_1 . put ( key , value ) ; }\n"}
{"problem": "private static void METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_3 = TYPE_4 . METHOD_2 ( ) ; final TYPE_5 VAR_4 = TYPE_6 . METHOD_2 ( ) ; TYPE_7 VAR_5 = TYPE_7 . METHOD_2 ( ) ; final TYPE_8 VAR_6 = TYPE_9 . METHOD_3 ( VAR_2 ) ; final TYPE_10 VAR_7 = TYPE_11 . METHOD_3 ( VAR_3 , VAR_4 ) ; VAR_5 . METHOD_4 ( VAR_6 ) ; VAR_5 . METHOD_5 ( VAR_7 ) ; }\n", "fixed": "private static void METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_3 = TYPE_4 . METHOD_2 ( ) ; final TYPE_5 VAR_4 = TYPE_6 . METHOD_2 ( ) ; TYPE_7 VAR_5 = TYPE_7 . METHOD_2 ( ) ; final TYPE_8 VAR_6 = TYPE_9 . METHOD_3 ( VAR_2 ) ; final TYPE_10 VAR_7 = TYPE_11 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 ) ; VAR_5 . METHOD_4 ( VAR_6 ) ; VAR_5 . METHOD_5 ( VAR_7 ) ; }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { METHOD_2 ( VAR_1 ) ; VAR_4 . add ( new java.lang.Double ( ( VAR_2 / INT_1 ) ) ) ; VAR_5 . add ( new java.lang.Double ( ( VAR_3 / INT_1 ) ) ) ; VAR_6 . add ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { METHOD_2 ( VAR_1 ) ; VAR_4 . add ( new java.lang.Double ( ( ( new java.lang.Double ( VAR_2 ) ) / INT_1 ) ) ) ; VAR_5 . add ( new java.lang.Double ( ( ( new java.lang.Double ( VAR_3 ) ) / INT_1 ) ) ) ; VAR_6 . add ( VAR_1 ) ; }\n"}
{"problem": "private void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_1 ( this ) ; VAR_2 . METHOD_2 ( false ) ; VAR_2 . METHOD_3 ( false ) ; VAR_2 . METHOD_4 ( STRING_1 ) ; } if ( VAR_1 ) { if ( ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_5 ( ) ) ) { VAR_2 . METHOD_6 ( ) ; } } else { VAR_2 . show ( ) ; } }\n", "fixed": "private void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_1 ( this ) ; VAR_2 . METHOD_2 ( false ) ; VAR_2 . METHOD_3 ( false ) ; VAR_2 . METHOD_4 ( STRING_1 ) ; } if ( ! VAR_1 ) { if ( ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_5 ( ) ) ) { VAR_2 . METHOD_6 ( ) ; } } else { VAR_2 . show ( ) ; } }\n"}
{"problem": "protected void update ( ) throws java.io.IOException , TYPE_1 { VAR_1 . update ( ) ; for ( TYPE_2 VAR_2 : VAR_3 . METHOD_1 ( ) ) { VAR_2 . update ( ) ; for ( TYPE_3 VAR_4 : VAR_2 . METHOD_2 ( ) ) { VAR_4 . METHOD_3 ( VAR_5 ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; } } METHOD_5 ( ) ; }\n", "fixed": "protected void update ( ) throws java.io.IOException , TYPE_1 { VAR_1 . update ( ) ; for ( TYPE_2 VAR_2 : VAR_3 . METHOD_1 ( ) ) { VAR_2 . update ( ) ; for ( TYPE_3 VAR_4 : VAR_2 . METHOD_2 ( ) ) { VAR_4 . METHOD_3 ( VAR_5 ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; } } }\n"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n\t\t\t\tcatch (Throwable t) {\n \t\t\t\t\tif (log.isDebugEnabled()) {\n \t\t\t\t\t\tlog.debug(\"Could not clean fields for class \" + clazz.getName(), t);\n \t\t\t\t\t}", "fixed": " \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n\t\t\t\tcatch (Exception t) {\n \t\t\t\t\tif (log.isDebugEnabled()) {\n \t\t\t\t\t\tlog.debug(\"Could not clean fields for class \" + clazz.getName(), t);\n \t\t\t\t\t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"problem": "private void METHOD_1 ( boolean VAR_1 ) { VAR_2 = STRING_1 ; for ( int i = INT_1 ; i > 0 ; i -- ) { VAR_3 [ i ] = VAR_3 [ ( i - 1 ) ] ; } if ( VAR_1 == true ) { VAR_3 [ 0 ] = STRING_2 ; } else { VAR_3 [ 0 ] = STRING_3 ; } }\n", "fixed": "private void METHOD_1 ( boolean VAR_1 ) { for ( int i = INT_1 ; i > 0 ; i -- ) { VAR_3 [ i ] = VAR_3 [ ( i - 1 ) ] ; } if ( VAR_1 == true ) { VAR_3 [ 0 ] = STRING_2 ; } else { VAR_3 [ 0 ] = STRING_3 ; } }\n"}
{"problem": "public static java.lang.String METHOD_1 ( java.lang.String name ) { if ( ( TYPE_1 ) == null ) TYPE_2 . init ( ) ; final java.lang.String VAR_1 = ( ( java.lang.String ) ( TYPE_1 . get ( name ) ) ) ; return VAR_1 == null ? STRING_1 : VAR_1 ; }\n", "fixed": "public static java.lang.String METHOD_1 ( java.lang.String name ) { if ( ( TYPE_1 ) == null ) TYPE_2 . init ( ) ; final java.lang.String VAR_1 = ( ( java.lang.String ) ( TYPE_1 . get ( name ) ) ) ; return VAR_1 == null ? null : VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 ) ; VAR_1 . METHOD_3 ( VAR_3 , VAR_6 ) ; VAR_1 . METHOD_4 ( VAR_5 , VAR_5 ) ; VAR_1 . METHOD_5 ( ( - ( VAR_7 ) ) , ( - ( VAR_8 ) ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 ) ; VAR_1 . METHOD_3 ( VAR_3 , VAR_6 ) ; VAR_1 . METHOD_5 ( ( - ( VAR_7 ) ) , ( - ( VAR_8 ) ) ) ; VAR_1 . METHOD_4 ( VAR_5 , VAR_5 ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String text ) { java.lang.String VAR_1 ; if ( ( text . length ( ) ) == 0 ) { VAR_1 = \"0\" ; } else if ( ( text . length ( ) ) > INT_1 ) { VAR_1 = text . substring ( 0 , INT_2 ) ; } else { VAR_1 = text ; } VAR_2 . setText ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String text ) { java.lang.String VAR_1 ; if ( ( text . length ( ) ) == 0 ) { VAR_1 = \"0\" ; } else if ( ( text . length ( ) ) > INT_1 ) { VAR_1 = text . substring ( 0 , INT_1 ) ; } else { VAR_1 = text ; } VAR_2 . setText ( VAR_1 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_5 . get ( position ) . METHOD_4 ( ) . METHOD_5 ( ) ; VAR_2 . delete ( ) ; } else { VAR_3 . METHOD_3 ( VAR_6 ) ; VAR_2 . METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) == null ) { VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_5 . get ( position ) . METHOD_4 ( ) . METHOD_5 ( ) ; VAR_2 . delete ( ) ; } else { VAR_3 . METHOD_3 ( VAR_6 ) ; VAR_2 . METHOD_6 ( ) ; } }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = false ; METHOD_2 ( VAR_3 ) ; boolean VAR_4 = METHOD_3 ( VAR_1 ) ; if ( ! VAR_4 ) { TYPE_2 . METHOD_4 ( VAR_5 , STRING_1 ) ; METHOD_5 ( ) ; } VAR_6 . METHOD_6 ( this , VAR_7 ) ; METHOD_7 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = false ; METHOD_2 ( VAR_3 ) ; boolean VAR_4 = METHOD_3 ( VAR_1 ) ; if ( ! VAR_4 ) { TYPE_2 . METHOD_4 ( VAR_5 , STRING_1 ) ; METHOD_5 ( ) ; } METHOD_7 ( ) ; }\n"}
{"fixCommitSHA1": "ab46f2477a01e3d3e3dfcc10e249ae1349d72991", "projectName": "facebook.presto", "bugType": "Change Caller in Function Call", "problem": "                 String partName = makePartName(table.getPartitionColumns(), partition.getValues());\n                verifyOnline(tableName, Optional.of(partName), getProtectMode(partition), table.getParameters());\n                 String partitionNotReadable = partition.getParameters().get(OBJECT_NOT_READABLE);", "fixed": "                 String partName = makePartName(table.getPartitionColumns(), partition.getValues());\n                verifyOnline(tableName, Optional.of(partName), getProtectMode(partition), partition.getParameters());\n                 String partitionNotReadable = partition.getParameters().get(OBJECT_NOT_READABLE);", "sourceBeforeFix": "table.getParameters()", "sourceAfterFix": "partition.getParameters()"}
{"problem": "public void METHOD_1 ( ) { final TYPE_1 text = TYPE_2 . METHOD_2 ( id ) ; int VAR_1 = text . METHOD_3 ( ) ; VAR_1 &= ~ ( ( ( VAR_2 ) | ( VAR_3 ) ) | ( VAR_4 ) ) ; switch ( VAR_5 ) { case 1 : VAR_1 |= VAR_2 ; break ; case INT_1 : VAR_1 |= VAR_3 ; break ; case INT_2 : VAR_1 |= VAR_4 ; break ; case 0 : default : break ; } text . METHOD_4 ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { int VAR_1 = text . METHOD_3 ( ) ; VAR_1 &= ~ ( ( ( VAR_2 ) | ( VAR_3 ) ) | ( VAR_4 ) ) ; switch ( VAR_5 ) { case 1 : VAR_1 |= VAR_2 ; break ; case INT_1 : VAR_1 |= VAR_3 ; break ; case INT_2 : VAR_1 |= VAR_4 ; break ; case 0 : default : break ; } text . METHOD_4 ( VAR_1 ) ; }\n"}
{"problem": "private void init ( ) { int id = ( ( int ) ( getIntent ( ) . METHOD_1 ( ) . get ( \"id\" ) ) ) ; VAR_1 = new TYPE_1 ( this ) ; item = VAR_1 . METHOD_2 ( id ) ; VAR_2 = new TYPE_2 ( this ) ; VAR_2 . METHOD_3 ( item . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; VAR_4 = new TYPE_3 ( this , VAR_5 , item . METHOD_6 ( ) ) ; VAR_6 . METHOD_5 ( VAR_4 ) ; }\n", "fixed": "private void init ( ) { int id = ( ( int ) ( getIntent ( ) . METHOD_1 ( ) . get ( \"id\" ) ) ) ; VAR_1 = new TYPE_1 ( this ) ; item = VAR_1 . METHOD_2 ( id ) ; VAR_2 = new TYPE_2 ( this ) ; VAR_2 . METHOD_3 ( item . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; VAR_4 = new TYPE_3 ( this , VAR_5 , item . METHOD_6 ( ) ) ; }\n"}
{"fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "         )\n     );\n    queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "fixed": "         )\n     );\n    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "sourceBeforeFix": "queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"problem": "public void METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . size ( ) ; METHOD_2 ( ) . METHOD_5 ( min ( METHOD_2 ( ) . METHOD_6 ( ) , ( VAR_1 - 1 ) ) ) ; VAR_2 . METHOD_7 ( min ( METHOD_2 ( ) . METHOD_6 ( ) , ( ( VAR_3 ) - 1 ) ) ) ; VAR_2 . METHOD_8 ( 0 ) ; METHOD_9 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . size ( ) ; METHOD_2 ( ) . METHOD_5 ( min ( METHOD_2 ( ) . METHOD_6 ( ) , VAR_1 ) ) ; METHOD_9 ( ) ; }\n"}
{"fixCommitSHA1": "73627df082ff499af4ca1c482f79e304905007eb", "projectName": "alibaba.canal", "bugType": "Same Function More Args", "problem": "         return large ? buffer.getUint32() : buffer.getUint16();\n     }\n    private static Json_Value parse_scalar(int type, LogBuffer buffer, long len) {\n         switch (type) {\n             case JSONB_TYPE_LITERAL:\n                 ", "fixed": "         return large ? buffer.getUint32() : buffer.getUint16();\n     }\n    private static Json_Value parse_scalar(int type, LogBuffer buffer, long len, String charsetName) {\n         switch (type) {\n             case JSONB_TYPE_LITERAL:\n                 ", "sourceBeforeFix": "m_data.getFixString((int)m_length)", "sourceAfterFix": "m_data.getFixString((int)m_length,charsetName)"}
{"problem": "private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 output = new TYPE_2 ( ) ; try { try ( TYPE_3 out = new TYPE_3 ( output ) ) { VAR_1 . METHOD_2 ( new TYPE_4 ( out , VAR_2 ) ) ; } } catch ( TYPE_5 VAR_3 ) { VAR_3 . METHOD_3 ( ) ; throw new TYPE_6 ( VAR_3 ) ; } return new java.lang.String ( output . METHOD_4 ( ) ) ; }\n", "fixed": "private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 output = new TYPE_2 ( ) ; try { try ( TYPE_3 out = new TYPE_3 ( output ) ) { VAR_1 . METHOD_2 ( new TYPE_4 ( out , VAR_2 ) ) ; } } catch ( TYPE_5 VAR_3 ) { throw new TYPE_6 ( VAR_3 ) ; } return new java.lang.String ( output . METHOD_4 ( ) ) ; }\n"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"problem": "private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { while ( VAR_1 . contains ( VAR_2 ) ) { java.lang.String VAR_3 = VAR_1 ; java.lang.String VAR_4 = TYPE_1 . METHOD_2 ( VAR_3 ) ; VAR_3 = VAR_3 . replace ( ( ( ( VAR_2 ) + VAR_4 ) + ( VAR_5 ) ) , TYPE_1 . METHOD_3 ( VAR_4 ) ) ; VAR_1 = VAR_3 ; } return VAR_1 ; }\n", "fixed": "private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { while ( VAR_1 . contains ( VAR_2 ) ) { java.lang.String VAR_3 = VAR_1 ; java.lang.String VAR_4 = TYPE_1 . METHOD_2 ( VAR_3 ) ; VAR_1 = VAR_3 . replace ( ( ( ( VAR_2 ) + VAR_4 ) + ( VAR_5 ) ) , TYPE_1 . METHOD_3 ( VAR_4 ) ) ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "311d2e7e7123814364907b65143117efc3ddf92d", "projectName": "jhy.jsoup", "bugType": "Same Function More Args", "problem": "         }\n         public String cookie(String name) {\n            Validate.notNull(name, \"Cookie name must not be null\");\n             return cookies.get(name);\n         }", "fixed": "         }\n         public String cookie(String name) {\n            Validate.notEmpty(name, \"Cookie name must not be empty\");\n             return cookies.get(name);\n         }", "sourceBeforeFix": "Validate.notEmpty(\"Cookie name must not be empty\")", "sourceAfterFix": "Validate.notEmpty(name,\"Cookie name must not be empty\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e6bd7393faa68dd73e73258ff75820b558bfd356", "projectName": "brianfrankcooper.YCSB", "bugType": "Change Unary Operator\t", "problem": "          ) {\n       Map.Entry<String, JsonNode> jsonField = jsonFields.next();\n       String name = jsonField.getKey();\n      if (checkFields && fields.contains(name)) {\n         continue;\n       }\n       JsonNode jsonValue = jsonField.getValue();", "fixed": "          ) {\n       Map.Entry<String, JsonNode> jsonField = jsonFields.next();\n       String name = jsonField.getKey();\n      if (checkFields && !fields.contains(name)) {\n         continue;\n       }\n       JsonNode jsonValue = jsonField.getValue();", "sourceBeforeFix": "fields.contains(name)", "sourceAfterFix": "!fields.contains(name)"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String status ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_1 ) , VAR_4 . METHOD_3 ( STRING_2 , ( ( ( STRING_3 + status ) + STRING_4 ) + VAR_1 ) ) ) ; if ( ( VAR_2 == null ) || ( ( VAR_2 . METHOD_4 ( ) ) != ( VAR_5 ) ) ) { VAR_6 . METHOD_5 ( STRING_5 ) ; } }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String status ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_1 ) , VAR_4 . METHOD_3 ( STRING_2 ) , ( ( ( STRING_3 + status ) + STRING_4 ) + VAR_1 ) ) ; if ( ( VAR_2 == null ) || ( ( VAR_2 . METHOD_4 ( ) ) != ( VAR_5 ) ) ) { VAR_6 . METHOD_5 ( STRING_5 ) ; } }\n"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"problem": "private void init ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 = new TYPE_2 ( ) ; VAR_3 = new TYPE_3 ( ) ; this . METHOD_1 ( new TYPE_4 ( VAR_3 ) ) ; VAR_4 = new TYPE_5 ( VAR_2 , this , VAR_1 ) ; this . METHOD_2 ( new TYPE_6 ( VAR_4 ) ) ; TYPE_7 VAR_5 = new TYPE_7 ( VAR_2 , VAR_3 ) ; VAR_6 = VAR_5 . METHOD_3 ( STRING_1 , 1 ) ; VAR_7 = new TYPE_8 ( VAR_8 , VAR_2 , VAR_3 ) ; }\n", "fixed": "private void init ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 = new TYPE_2 ( ) ; VAR_3 = new TYPE_3 ( ) ; this . METHOD_1 ( new TYPE_4 ( VAR_3 ) ) ; VAR_4 = new TYPE_5 ( VAR_2 , this , VAR_1 ) ; this . METHOD_2 ( new TYPE_6 ( VAR_4 ) ) ; TYPE_7 VAR_5 = new TYPE_7 ( VAR_2 , VAR_3 ) ; VAR_6 = VAR_5 . METHOD_3 ( STRING_1 , 1 ) ; VAR_7 = new TYPE_8 ( VAR_8 , VAR_2 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 , boolean VAR_3 ) { TYPE_2 VAR_4 = getActivity ( ) . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( null ) ; TYPE_3 VAR_5 = getActivity ( ) . METHOD_2 ( ) ; TYPE_4 VAR_6 = TYPE_5 . METHOD_5 ( VAR_1 , VAR_2 , VAR_3 ) ; VAR_4 . replace ( VAR_7 , VAR_6 ) ; VAR_4 . commit ( ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 , boolean VAR_3 ) { TYPE_2 VAR_4 = getActivity ( ) . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( null ) ; TYPE_3 VAR_5 = getActivity ( ) . METHOD_2 ( ) ; TYPE_4 VAR_6 = TYPE_5 . METHOD_5 ( VAR_1 , VAR_2 , VAR_3 , false ) ; VAR_4 . replace ( VAR_7 , VAR_6 ) ; VAR_4 . commit ( ) ; }\n"}
{"problem": "private byte [ ] METHOD_1 ( java.lang.String VAR_1 ) { byte [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; byte [ ] VAR_3 = new byte [ ] { VAR_4 , VAR_5 } ; byte [ ] tmp = new byte [ ( VAR_2 . length ) + ( VAR_3 . length ) ] ; TYPE_1 . METHOD_3 ( VAR_2 , 0 , tmp , 0 , VAR_2 . length ) ; TYPE_1 . METHOD_3 ( VAR_3 , 0 , tmp , VAR_2 . length , VAR_3 . length ) ; return tmp ; }\n", "fixed": "private byte [ ] METHOD_1 ( java.lang.String VAR_1 ) { byte [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; byte [ ] VAR_3 = new byte [ ] { VAR_4 } ; byte [ ] tmp = new byte [ ( VAR_2 . length ) + ( VAR_3 . length ) ] ; TYPE_1 . METHOD_3 ( VAR_2 , 0 , tmp , 0 , VAR_2 . length ) ; TYPE_1 . METHOD_3 ( VAR_3 , 0 , tmp , VAR_2 . length , VAR_3 . length ) ; return tmp ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { if ( VAR_2 . equals ( STRING_1 ) ) { return ; } for ( TYPE_2 VAR_3 : TYPE_2 . values ( ) ) { if ( VAR_2 . equals ( VAR_4 ) ) { if ( METHOD_2 ( VAR_3 , VAR_1 ) ) { break ; } else { } } } METHOD_3 ( ) ; METHOD_4 ( VAR_5 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { if ( VAR_2 . equals ( STRING_1 ) ) { return ; } for ( TYPE_2 VAR_3 : TYPE_2 . values ( ) ) { if ( VAR_2 . equals ( VAR_4 ) ) { if ( METHOD_2 ( VAR_3 , VAR_1 ) ) { break ; } else { } } } METHOD_3 ( ) ; update ( null , null ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) . build ( ) ; return METHOD_4 ( VAR_1 ) ? TYPE_4 . METHOD_2 ( VAR_2 ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) . METHOD_7 ( VAR_1 . METHOD_8 ( ) ) . build ( ) : VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) . build ( ) ; return ! ( METHOD_4 ( VAR_1 ) ) ? TYPE_4 . METHOD_2 ( VAR_2 ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) . METHOD_7 ( VAR_1 . METHOD_8 ( ) ) . build ( ) : VAR_1 ; }\n"}
{"fixCommitSHA1": "b8900cd656476175770869d83f2ab99935650b0c", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         }\n         if (timeoutCheckerExecutorService != null) {\n            camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService);\n         }\n         ServiceHelper.stopServices(timeoutMap, processor, deadLetterProducerTemplate);", "fixed": "         }\n         if (timeoutCheckerExecutorService != null) {\n            camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService);\n         }\n         ServiceHelper.stopServices(timeoutMap, processor, deadLetterProducerTemplate);", "sourceBeforeFix": "camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService)", "sourceAfterFix": "camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService)"}
{"problem": "public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , 0 ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , 1 ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 , INT_1 ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_5 , INT_2 ) ; }\n", "fixed": "public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , 0 , 0 ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , 1 , 0 ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 , INT_1 , 0 ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_5 , INT_2 , 1 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 msg ) { switch ( VAR_1 ) { case VAR_2 : java.util.List < TYPE_2 > VAR_3 = METHOD_2 ( VAR_4 ) ; VAR_5 = METHOD_3 ( VAR_3 ) ; VAR_6 = new TYPE_3 ( this , VAR_7 , VAR_5 . get ( VAR_8 ) ) ; VAR_9 . METHOD_4 ( VAR_6 ) ; break ; default : break ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 msg ) { switch ( VAR_1 ) { case VAR_2 : java.util.List < TYPE_2 > VAR_3 = METHOD_2 ( VAR_4 ) ; VAR_5 = METHOD_3 ( VAR_3 ) ; VAR_3 = VAR_5 . get ( VAR_8 ) ; VAR_6 = new TYPE_3 ( this , VAR_7 , VAR_3 ) ; VAR_9 . METHOD_4 ( VAR_6 ) ; break ; default : break ; } }\n"}
{"problem": "protected final java.lang.Class < ? > METHOD_1 ( java.lang.String name ) throws java.lang.ClassNotFoundException { TYPE_1 . METHOD_2 ( STRING_1 , name ) ; final java.lang.Class < ? > VAR_1 = this . VAR_2 . METHOD_1 ( null , name ) ; if ( VAR_1 == null ) { throw new java.lang.ClassNotFoundException ( name ) ; } return VAR_1 ; }\n", "fixed": "protected java.lang.Class < ? > METHOD_1 ( java.lang.String name ) throws java.lang.ClassNotFoundException { final java.lang.Class < ? > VAR_1 = this . VAR_2 . METHOD_1 ( null , name ) ; if ( VAR_1 == null ) { throw new java.lang.ClassNotFoundException ( name ) ; } return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { METHOD_2 ( ) ; java.util.List < TYPE_3 > VAR_1 = METHOD_3 ( ) ; TYPE_4 VAR_2 = new TYPE_5 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 , null ) ; java.util.Set < TYPE_3 > result = VAR_2 . METHOD_4 ( null , INT_1 ) ; TYPE_6 . assertThat ( result , TYPE_7 . METHOD_5 ( VAR_1 . get ( INT_2 ) ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { METHOD_2 ( ) ; java.util.List < TYPE_3 > VAR_1 = METHOD_3 ( ) ; java.util.Set < TYPE_3 > result = VAR_2 . METHOD_4 ( null , INT_1 ) ; TYPE_6 . assertThat ( result , TYPE_7 . METHOD_5 ( VAR_1 . get ( INT_2 ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = false ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_4 . setText ( VAR_3 . METHOD_2 ( ) ) ; if ( ! ( VAR_5 . getText ( ) . equals ( STRING_1 ) ) ) { TYPE_3 [ ] array = VAR_3 . METHOD_3 ( VAR_6 ) ; METHOD_4 ( array ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = false ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_4 . setText ( VAR_3 . METHOD_2 ( ) ) ; if ( ! ( VAR_5 . getText ( ) . equals ( STRING_1 ) ) ) { TYPE_3 [ ] array = VAR_3 . METHOD_3 ( VAR_6 ) ; java.lang.System.out.println ( array ) ; METHOD_4 ( array ) ; } }\n"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n     final Map<String, Integer> cssNames;", "fixed": "   \n  public static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n     final Map<String, Integer> cssNames;", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) { VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_5 . METHOD_4 ( METHOD_5 ( ) . METHOD_6 ( VAR_6 ) ) ; } else { VAR_2 . METHOD_3 ( VAR_7 ) ; VAR_5 . METHOD_4 ( METHOD_5 ( ) . METHOD_6 ( VAR_8 ) ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) { VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_5 . METHOD_4 ( context . METHOD_5 ( ) . METHOD_6 ( VAR_6 ) ) ; } else { VAR_2 . METHOD_3 ( VAR_7 ) ; VAR_5 . METHOD_4 ( context . METHOD_5 ( ) . METHOD_6 ( VAR_8 ) ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private static TYPE_1 METHOD_1 ( java.lang.Object ... VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; for ( int counter = 0 ; counter < ( VAR_1 . length ) ; counter += INT_1 ) { VAR_2 . put ( ( ( java.lang.String ) ( VAR_1 [ counter ] ) ) , VAR_1 [ ( counter + 1 ) ] ) ; } return VAR_2 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.Object ... VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; for ( int counter = 0 ; counter < ( VAR_1 . length ) ; counter += INT_1 ) { VAR_2 . put ( ( ( java.lang.String ) ( VAR_1 [ counter ] ) ) , VAR_1 [ ( counter + 1 ) ] ) ; } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 view , int VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { if ( ( VAR_3 != null ) && ( VAR_3 . equals ( view . METHOD_2 ( ) ) ) ) { VAR_4 = true ; METHOD_3 ( ) ; VAR_5 = false ; METHOD_4 ( VAR_6 , VAR_7 ) ; } super . METHOD_1 ( view , VAR_1 , VAR_2 , VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 view , int VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { VAR_4 = true ; METHOD_3 ( ) ; VAR_5 = false ; METHOD_4 ( VAR_6 , VAR_7 ) ; super . METHOD_1 ( view , VAR_1 , VAR_2 , VAR_3 ) ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 item ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( item ) ; TYPE_4 VAR_2 = ( VAR_1 . METHOD_3 ( ) ) ? VAR_1 . METHOD_4 ( ) : new TYPE_4 ( ) ; TYPE_5 VAR_3 = new TYPE_5 ( ) ; VAR_2 . set ( STRING_1 , VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; return TYPE_3 . METHOD_6 ( VAR_1 ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 item ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( item ) ; if ( VAR_1 == null ) return item ; TYPE_4 VAR_2 = ( VAR_1 . METHOD_3 ( ) ) ? VAR_1 . METHOD_4 ( ) : new TYPE_4 ( ) ; TYPE_5 VAR_3 = new TYPE_5 ( ) ; VAR_2 . set ( STRING_1 , VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; return TYPE_3 . METHOD_6 ( VAR_1 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 ) ) ; METHOD_5 ( ) . METHOD_6 ( STRING_1 , STRING_3 , STRING_4 ) . METHOD_7 ( STRING_5 ) . get ( ) ; METHOD_8 ( ) ; TYPE_1 . METHOD_9 ( METHOD_5 ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_2 . METHOD_12 ( ) ) . get ( ) , 1L ) ; }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 ) ) ; METHOD_5 ( ) . METHOD_6 ( STRING_1 , STRING_3 , STRING_4 ) . METHOD_7 ( STRING_5 ) . get ( ) ; METHOD_8 ( ) ; METHOD_9 ( METHOD_5 ( ) . METHOD_10 ( ) . METHOD_11 ( METHOD_12 ( ) ) . get ( ) , 1L ) ; }\n"}
{"project": "Mockito", "bugId": 6, "problem": " public static boolean anyBoolean() {\n      * @return <code>0</code>.\r\n      */\r\n     public static byte anyByte() {\r\n        return reportMatcher(Any.ANY).returnZero();\r\n     }\r\n     /**\r", "fixed": " public static boolean anyBoolean() {\n      * @return <code>0</code>.\r\n      */\r\n     public static byte anyByte() {\r\n        return reportMatcher(new InstanceOf(Byte.class)).returnZero();\r\n     }\r\n     /**\r", "observations": "Instantiates specific objects in place of call do Any.ANY", "repairActions": ["mcParValChange", "objInstAdd", "varReplMc"], "repairPatterns": ["copyPaste", "wrongMethodRef", "wrongVarRef"]}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"problem": "static boolean METHOD_1 ( java.util.List < TYPE_1 > list ) { java.lang.Long VAR_1 = list . get ( 0 ) . METHOD_2 ( ) ; for ( TYPE_1 p : list ) { if ( ! ( p . METHOD_2 ( ) . equals ( VAR_1 ) ) ) return false ; VAR_1 = p . METHOD_3 ( ) ; } return true ; }\n", "fixed": "static boolean METHOD_1 ( java.util.List < TYPE_1 > list ) { if ( ( list . size ( ) ) < 1 ) return true ; java.lang.Long VAR_1 = list . get ( 0 ) . METHOD_2 ( ) ; for ( TYPE_1 p : list ) { if ( ! ( p . METHOD_2 ( ) . equals ( VAR_1 ) ) ) return false ; VAR_1 = p . METHOD_3 ( ) ; } return true ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( ( VAR_3 [ 0 ] ) == 0 ) { VAR_3 [ 0 ] = 1 ; TYPE_2 . METHOD_2 ( ) ; VAR_4 = TYPE_3 . METHOD_3 ( ) ; VAR_5 . METHOD_4 ( VAR_6 ) ; METHOD_5 ( ) ; VAR_7 = true ; } VAR_8 . METHOD_6 ( VAR_2 ) ; VAR_9 = ! ( VAR_9 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( ( VAR_3 [ 0 ] ) == 0 ) { VAR_3 [ 0 ] = 1 ; TYPE_2 . METHOD_2 ( ) ; VAR_4 = TYPE_3 . METHOD_3 ( ) ; VAR_5 . METHOD_4 ( VAR_6 ) ; METHOD_5 ( ) ; VAR_7 = true ; } VAR_8 . METHOD_6 ( VAR_2 ) ; }\n"}
{"problem": "private java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . name = VAR_3 ; final TYPE_4 VAR_4 = VAR_5 . METHOD_3 ( VAR_2 ) ; TYPE_5 . METHOD_4 ( VAR_1 , VAR_4 . METHOD_5 ( ) ) ; java.lang.System.out.println ( ( STRING_1 + ( VAR_1 . size ( ) ) ) ) ; return VAR_1 ; }\n", "fixed": "private java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . name = VAR_3 ; final TYPE_4 VAR_4 = VAR_5 . METHOD_3 ( VAR_2 ) ; TYPE_5 . METHOD_4 ( VAR_1 , VAR_4 . METHOD_5 ( ) ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public boolean METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { boolean result = true ; for ( TYPE_3 VAR_3 : VAR_4 . values ( ) ) { result = result && ( VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ) ; } return result ; }\n", "fixed": "public boolean METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { boolean result = true ; for ( TYPE_3 VAR_3 : VAR_4 . values ( ) ) { result = ( VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ) && result ; } return result ; }\n"}
{"problem": "private void METHOD_1 ( ) { if ( ( ( VAR_1 ) == ( VAR_2 ) ) && ( ( VAR_1 ) == ( VAR_3 ) ) ) { METHOD_2 ( ) ; } else if ( ( ( VAR_1 ) == ( VAR_2 ) ) && ( ( VAR_1 ) != ( VAR_3 ) ) ) { METHOD_3 ( ) ; } else { METHOD_4 ( ) ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( ( ( VAR_1 ) == ( VAR_2 ) ) && ( ( VAR_1 ) == ( VAR_3 ) ) ) { METHOD_2 ( ) ; } else if ( ( ( VAR_1 ) != ( VAR_2 ) ) && ( ( VAR_2 ) != ( VAR_3 ) ) ) { METHOD_4 ( ) ; } else { METHOD_3 ( ) ; } }\n"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   private void externExports() {\n    logger.info(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n     ExternExportsPass pass = new ExternExportsPass(this);", "fixed": "   }\n   private void externExports() {\n    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n     ExternExportsPass pass = new ExternExportsPass(this);", "sourceBeforeFix": "logger.info(\"Computing Control Flow Graph\")", "sourceAfterFix": "logger.fine(\"Computing Control Flow Graph\")"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; ( VAR_1 ) ++ ; if ( ( VAR_1 ) < INT_1 ) { METHOD_2 ( METHOD_3 ( ) . getContext ( ) ) ; } if ( ! ( VAR_2 . METHOD_4 ( ) ) ) METHOD_5 ( ) ; else METHOD_6 ( ) ; METHOD_7 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; ( VAR_1 ) ++ ; if ( ( VAR_1 ) < INT_1 ) { METHOD_2 ( METHOD_3 ( ) . getContext ( ) ) ; } if ( ( ( VAR_2 ) == null ) || ( ! ( VAR_2 . METHOD_4 ( ) ) ) ) METHOD_5 ( ) ; else METHOD_6 ( ) ; METHOD_7 ( ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( int id , TYPE_2 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( id , VAR_1 ) ; if ( VAR_2 != null ) { return TYPE_1 . METHOD_3 ( VAR_2 ) . build ( ) ; } else { return TYPE_1 . status ( VAR_4 ) . build ( ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( int id , TYPE_2 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_1 ( id , VAR_1 ) ; if ( VAR_2 != null ) { return TYPE_1 . METHOD_3 ( VAR_2 ) . build ( ) ; } else { return TYPE_1 . status ( VAR_4 ) . build ( ) ; } }\n"}
{"fixCommitSHA1": "5fd6669348c19dc24ef1ba51c2ca0a64cbedef20", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "fixed": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}
{"problem": "public void METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( this . VAR_3 [ VAR_1 ] [ VAR_2 ] . VAR_4 ) ) throw new TYPE_1 ( STRING_1 ) ; this . VAR_3 [ VAR_1 ] [ VAR_2 ] . value = 0 ; }\n", "fixed": "public void METHOD_1 ( int x , int y ) { if ( ! ( this . VAR_3 [ y ] [ x ] . VAR_4 ) ) throw new TYPE_1 ( STRING_1 ) ; this . VAR_3 [ y ] [ x ] . value = 0 ; }\n"}
{"problem": "public void METHOD_1 ( float VAR_1 ) { int VAR_2 = ( METHOD_2 ( ) ) * INT_1 ; assert VAR_2 < ( VAR_3 ) ; float VAR_4 = ( ( METHOD_2 ( ) ) + 1 ) * INT_1 ; VAR_3 = VAR_2 + ( ( int ) ( VAR_1 * VAR_4 ) ) ; METHOD_3 ( ) ; VAR_5 . METHOD_4 ( METHOD_5 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( float VAR_1 ) { int VAR_2 = ( METHOD_2 ( ) ) * INT_1 ; float VAR_4 = ( ( METHOD_2 ( ) ) + 1 ) * INT_1 ; VAR_3 = VAR_2 + ( ( int ) ( VAR_1 * VAR_4 ) ) ; METHOD_3 ( ) ; VAR_5 . METHOD_4 ( METHOD_5 ( ) ) ; }\n"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "cbed2a13b8417c5f78f4f0ac1cea2f9b6e4f5526", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \tprivate static final long serialVersionUID = 1L;\n\tpublic static final int MAX_ARITY = 22;\n \t/**", "fixed": " \tprivate static final long serialVersionUID = 1L;\n\tpublic static final int MAX_ARITY = 25;\n \t/**", "sourceBeforeFix": "MAX_ARITY=22", "sourceAfterFix": "MAX_ARITY=25"}
{"problem": "public void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { int VAR_3 = METHOD_2 ( VAR_2 ) ; java.util.ArrayList < TYPE_1 > VAR_4 = METHOD_3 ( VAR_2 , VAR_5 ) ; if ( ( VAR_4 . size ( ) ) > VAR_1 ) { for ( int i = 0 ; i < VAR_1 ; i ++ ) { METHOD_4 ( VAR_4 . get ( i ) . getId ( ) ) ; } } else { throw new TYPE_2 ( STRING_1 ) ; } }\n", "fixed": "public void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { int VAR_3 = METHOD_2 ( VAR_2 ) ; java.util.ArrayList < TYPE_1 > VAR_4 = METHOD_3 ( VAR_2 , VAR_5 ) ; if ( ( VAR_4 . size ( ) ) >= VAR_1 ) { for ( int i = 0 ; i < VAR_1 ; i ++ ) { METHOD_4 ( VAR_4 . get ( i ) . getId ( ) ) ; } } else { throw new TYPE_2 ( STRING_1 ) ; } }\n"}
{"problem": "public static java.lang.String [ ] METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.String [ ] VAR_2 = new java.lang.String [ INT_1 ] ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { VAR_2 [ i ] = VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , ( i + 1 ) ) ; VAR_2 [ i ] = VAR_2 [ i ] . trim ( ) ; } return VAR_2 ; }\n", "fixed": "public static java.lang.String [ ] METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.String [ ] VAR_2 = new java.lang.String [ INT_1 ] ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { VAR_2 [ i ] = VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , ( i + INT_1 ) ) ; VAR_2 [ i ] = VAR_2 [ i ] . trim ( ) ; } return VAR_2 ; }\n"}
{"fixCommitSHA1": "9704f6049c41315c3de3fa6be6faf01e62c67863", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     new HTable(conf, \".META.\");\n     int port = cluster.getMaster().getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"Master\");\n     port = cluster.getRegionThreads().get(0).getRegionServer().\n       getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"Region Server\");\n   }\n   private void assertHasExpectedContent(final URL u, final String expected)", "fixed": "     new HTable(conf, \".META.\");\n     int port = cluster.getMaster().getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"master\");\n     port = cluster.getRegionThreads().get(0).getRegionServer().\n       getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"regionserver\");\n   }\n   private void assertHasExpectedContent(final URL u, final String expected)", "sourceBeforeFix": "content.matches(expected)", "sourceAfterFix": "content.contains(expected)"}
{"problem": "public static TYPE_1 show ( ) { java.lang.String message = TYPE_2 . METHOD_1 ( STRING_1 ) ; java.util.List < TYPE_3 > VAR_1 = VAR_2 . METHOD_2 ( VAR_3 class ) ; java.util.List < TYPE_3 > VAR_4 = new java.util.ArrayList < TYPE_3 > ( ) ; for ( TYPE_3 VAR_5 : VAR_1 ) { if ( VAR_5 instanceof TYPE_4 ) { VAR_4 . add ( VAR_5 ) ; } } return TYPE_5 . METHOD_3 ( VAR_6 . METHOD_4 ( message , VAR_1 , VAR_4 ) ) ; }\n", "fixed": "public static TYPE_1 show ( ) { java.lang.String message = TYPE_2 . METHOD_1 ( STRING_1 ) ; java.util.List < TYPE_3 > VAR_1 = VAR_2 . METHOD_2 ( VAR_3 class ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < TYPE_4 > ( ) ; for ( TYPE_3 VAR_5 : VAR_1 ) { if ( VAR_5 instanceof TYPE_4 ) { VAR_4 . add ( ( ( TYPE_4 ) ( VAR_5 ) ) ) ; } } return TYPE_5 . METHOD_3 ( VAR_6 . METHOD_4 ( message , VAR_1 , VAR_4 ) ) ; }\n"}
{"problem": "public TYPE_1 getColor ( int x , int y ) { if ( ( x < 0 ) || ( ( VAR_1 ) <= x ) ) { throw new TYPE_2 ( ( ( STRING_1 + x ) + STRING_2 ) ) ; } if ( ( y < 0 ) || ( ( height ) <= x ) ) { throw new TYPE_2 ( ( ( STRING_1 + x ) + STRING_2 ) ) ; } return VAR_2 . METHOD_1 ( ) . getColor ( x , y ) ; }\n", "fixed": "public TYPE_1 getColor ( int x , int y ) { if ( ( x < 0 ) || ( ( VAR_1 ) <= x ) ) { throw new TYPE_2 ( ( ( STRING_1 + x ) + STRING_2 ) ) ; } if ( ( y < 0 ) || ( ( height ) <= y ) ) { throw new TYPE_2 ( ( ( STRING_1 + x ) + STRING_2 ) ) ; } return VAR_2 . METHOD_1 ( ) . getColor ( x , y ) ; }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) { TYPE_1 < java.lang.String > VAR_1 = new TYPE_1 < > ( ) ; VAR_1 . METHOD_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_1 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_4 ( ) ; for ( java.lang.String VAR_2 : VAR_1 ) { TYPE_2 . METHOD_5 ( VAR_2 ) ; } }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_1 < java.lang.String > VAR_1 = new TYPE_1 < > ( ) ; VAR_1 . METHOD_1 ( STRING_1 ) ; VAR_1 . METHOD_4 ( ) ; for ( java.lang.String VAR_2 : VAR_1 ) { TYPE_2 . METHOD_5 ( VAR_2 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException , TYPE_4 { TYPE_5 VAR_4 = ( ( TYPE_5 ) ( VAR_1 ) ) ; TYPE_6 VAR_5 = VAR_4 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_5 ) ; METHOD_4 ( VAR_5 , VAR_4 ) ; VAR_3 . METHOD_1 ( VAR_4 , VAR_2 ) ; } finally { TYPE_7 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException , TYPE_4 { TYPE_5 VAR_4 = ( ( TYPE_5 ) ( VAR_1 ) ) ; TYPE_6 VAR_5 = VAR_4 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_5 ) ; METHOD_4 ( VAR_5 ) ; VAR_3 . METHOD_1 ( VAR_4 , VAR_2 ) ; } finally { TYPE_7 . METHOD_5 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . init ( ) ; VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_2 , VAR_3 ) ; TYPE_3 . METHOD_4 ( STRING_3 , VAR_1 ) ; VAR_4 = new TYPE_4 ( ) ; VAR_4 . METHOD_5 ( ) ; VAR_5 = new TYPE_5 ( ) ; VAR_6 = new TYPE_6 ( ) ; VAR_7 = new TYPE_7 ( ) ; VAR_8 = 0 ; VAR_9 = new TYPE_8 ( ) ; VAR_9 . init ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . init ( ) ; VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_2 , VAR_3 ) ; TYPE_3 . METHOD_4 ( STRING_3 , VAR_1 ) ; VAR_4 = new TYPE_4 ( ) ; VAR_4 . METHOD_5 ( ) ; VAR_5 = new TYPE_5 ( ) ; VAR_6 = new TYPE_6 ( ) ; VAR_7 = new TYPE_7 ( ) ; VAR_8 = 0 ; }\n"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n \t/**\n \t * Get a listing or important variables used in openmrs", "fixed": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t/**\n \t * Get a listing or important variables used in openmrs", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "178c690d37e7a329ad0a7a9349f3950f57dc4dde", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tpublic void write(ConfigurationMetadata metadata, OutputStream outputStream)\n \t\t\tthrows IOException {\n\t\tJSONObject object = new JSONObject();\n \t\tobject.put(\"groups\", toJsonArray(metadata, ItemType.GROUP));\n \t\tobject.put(\"properties\", toJsonArray(metadata, ItemType.PROPERTY));\n \t\tobject.put(\"hints\", toJsonArray(metadata.getHints()));", "fixed": " \tpublic void write(ConfigurationMetadata metadata, OutputStream outputStream)\n \t\t\tthrows IOException {\n\t\tJSONObject object = new JSONOrderedObject();\n \t\tobject.put(\"groups\", toJsonArray(metadata, ItemType.GROUP));\n \t\tobject.put(\"properties\", toJsonArray(metadata, ItemType.PROPERTY));\n \t\tobject.put(\"hints\", toJsonArray(metadata.getHints()));", "sourceBeforeFix": "new JSONObject()", "sourceAfterFix": "new JSONOrderedObject()"}
{"problem": "public void METHOD_1 ( ) { if ( ( result != null ) && ( ! ( result . isEmpty ( ) ) ) ) { view . METHOD_2 ( false ) ; view . METHOD_3 ( result ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_1 , VAR_2 ) ; METHOD_6 ( VAR_1 , VAR_2 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( result != null ) && ( ! ( result . isEmpty ( ) ) ) ) { view . METHOD_2 ( false ) ; view . METHOD_3 ( result ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_1 , VAR_2 ) ; METHOD_6 ( VAR_1 , VAR_2 ) ; } else { view . METHOD_2 ( true ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; if ( VAR_1 . METHOD_4 ( ) ) { } while ( VAR_2 ) { VAR_3 . METHOD_5 ( this ) ; VAR_2 = VAR_3 . METHOD_6 ( ) ; } if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( this ) ; } else { java.lang.System.err.println ( STRING_1 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; if ( VAR_1 . METHOD_4 ( ) ) { VAR_2 = true ; } while ( VAR_2 ) { VAR_3 . METHOD_5 ( this ) ; VAR_2 = VAR_3 . METHOD_6 ( ) ; } if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( this ) ; } else { java.lang.System.err.println ( STRING_1 ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) { java.lang.StringBuilder output = new java.lang.StringBuilder ( ) ; int VAR_1 = 0 ; for ( int i = 0 ; i < ( answer . length ( ) ) ; i ++ ) { if ( i == ( VAR_2 [ VAR_1 ] ) ) { output . append ( answer . METHOD_2 ( VAR_1 ) ) ; VAR_1 ++ ; } else { output . append ( STRING_1 ) ; } } return output . toString ( ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { java.lang.StringBuilder output = new java.lang.StringBuilder ( ) ; int VAR_1 = 0 ; for ( int i = 0 ; i < ( answer . length ( ) ) ; i ++ ) { if ( i == ( VAR_2 [ VAR_1 ] ) ) { output . append ( answer . METHOD_2 ( VAR_2 [ VAR_1 ] ) ) ; VAR_1 ++ ; } else { output . append ( STRING_1 ) ; } } return output . toString ( ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( VAR_1 . METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( CHAR_1 ) , CHAR_2 ) ; return VAR_3 . toString ( ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( VAR_1 . METHOD_2 ( ) ) ; int index = VAR_2 . METHOD_4 ( CHAR_1 ) ; if ( index == ( - 1 ) ) { return null ; } VAR_3 . METHOD_3 ( index , CHAR_2 ) ; return VAR_3 . toString ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int i ) { android.view.View VAR_2 = TYPE_3 . METHOD_2 ( TYPE_4 . context ) . METHOD_3 ( VAR_3 , null , false ) ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_5 , VAR_6 ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; return new TYPE_1 ( VAR_2 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int i ) { android.view.View VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 . getContext ( ) ) . METHOD_3 ( VAR_3 , null , false ) ; TYPE_4 . context = VAR_1 . getContext ( ) ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_5 , VAR_6 ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; return new TYPE_1 ( VAR_2 ) ; }\n"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   private final Class<?> clientProviderClass;\n   private final Class<?> serverProviderClass;\n  public JdkWithJettyBootPlatform(Method putMethod, Method getMethod, Method removeMethod,\n       Class<?> clientProviderClass, Class<?> serverProviderClass) {\n     this.putMethod = putMethod;\n     this.getMethod = getMethod;", "fixed": "   private final Class<?> clientProviderClass;\n   private final Class<?> serverProviderClass;\n  JdkWithJettyBootPlatform(Method putMethod, Method getMethod, Method removeMethod,\n       Class<?> clientProviderClass, Class<?> serverProviderClass) {\n     this.putMethod = putMethod;\n     this.getMethod = getMethod;", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"problem": "public void execute ( ) { this . VAR_1 = VAR_2 ; this . VAR_3 = VAR_4 ; final TYPE_1 VAR_5 = this . VAR_5 ; TYPE_2 VAR_6 = new TYPE_2 ( ) { public void METHOD_1 ( ) { try { java.lang.Thread . METHOD_2 ( VAR_7 ) ; VAR_1 = VAR_8 ; VAR_3 = VAR_9 ; } catch ( final TYPE_3 VAR_10 ) { VAR_10 . METHOD_3 ( ) ; VAR_1 = VAR_8 ; VAR_3 = VAR_9 ; } } } ; VAR_6 . METHOD_1 ( ) ; }\n", "fixed": "public void execute ( ) { this . VAR_1 = VAR_2 ; this . VAR_3 = VAR_4 ; final TYPE_1 VAR_5 = this . VAR_5 ; new java.lang.Thread ( new TYPE_2 ( ) { public void METHOD_1 ( ) { try { java.lang.Thread . METHOD_2 ( VAR_7 ) ; VAR_1 = VAR_8 ; VAR_3 = VAR_9 ; } catch ( final TYPE_3 VAR_10 ) { VAR_10 . METHOD_3 ( ) ; VAR_1 = VAR_8 ; VAR_3 = VAR_9 ; } } } ) . start ( ) ; }\n"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 = TYPE_2 . METHOD_1 ( VAR_3 , STRING_1 , null ) ; VAR_4 = new TYPE_3 ( VAR_5 ) ; VAR_5 = TYPE_2 . METHOD_1 ( VAR_3 , STRING_2 , null ) ; VAR_4 = new TYPE_3 ( VAR_5 ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 = TYPE_2 . METHOD_1 ( VAR_3 , STRING_1 , null ) ; VAR_5 = TYPE_2 . METHOD_1 ( VAR_3 , STRING_2 , null ) ; VAR_4 = new TYPE_3 ( VAR_5 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastMultimapEndpointBuilder\n             extends\n                 AdvancedHazelcastMultimapEndpointConsumerBuilder, AdvancedHazelcastMultimapEndpointProducerBuilder {\n         default HazelcastMultimapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastMultimapEndpointBuilder\n             extends\n                 AdvancedHazelcastMultimapEndpointConsumerBuilder, AdvancedHazelcastMultimapEndpointProducerBuilder {\n         default HazelcastMultimapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != ( VAR_2 ) ) VAR_3 = true ; if ( ( VAR_4 ) != null ) { VAR_5 . info ( STRING_1 ) ; VAR_4 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_4 . METHOD_4 ( this ) ; METHOD_5 ( ) ; VAR_4 = null ; } else { VAR_5 . info ( STRING_2 ) ; } VAR_6 . METHOD_6 ( this ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != ( VAR_2 ) ) VAR_3 = true ; if ( ( VAR_4 ) != null ) { VAR_5 . info ( STRING_1 ) ; VAR_4 . METHOD_2 ( METHOD_3 ( ) ) ; METHOD_5 ( ) ; VAR_4 . METHOD_4 ( this ) ; VAR_4 = null ; } else { VAR_5 . info ( STRING_2 ) ; } VAR_6 . METHOD_6 ( this ) ; }\n"}
{"fixCommitSHA1": "376e6647bb5cb36b5dd37d303a5ad7fb1460daa0", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\tcollisionPoints.get(2).set( this.getVertices()[10], this.getVertices()[11]);\n \t\tcollisionPoints.get(3).set( this.getVertices()[15], this.getVertices()[16]);\n\t\tcollisionCenter.set(collisionPoints.get(2)).scl(0.5f).add(collisionPoints.get(0));\n \t\tvelocity.scl( (float) Math.pow(0.97f, delta * 30.f));\n \t\tposition.add(velocity.x * delta, velocity.y * delta);", "fixed": " \t\tcollisionPoints.get(2).set( this.getVertices()[10], this.getVertices()[11]);\n \t\tcollisionPoints.get(3).set( this.getVertices()[15], this.getVertices()[16]);\n\t\tcollisionCenter.set(collisionPoints.get(0)).add(collisionPoints.get(2)).scl(0.5f);\n \t\tvelocity.scl( (float) Math.pow(0.97f, delta * 30.f));\n \t\tposition.add(velocity.x * delta, velocity.y * delta);", "sourceBeforeFix": "collisionPoints.get(2)", "sourceAfterFix": "collisionPoints.get(0)"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { try { TYPE_1 response = METHOD_2 ( VAR_4 ) ; response . put ( STRING_1 , VAR_1 ) ; response . put ( STRING_2 , VAR_2 ) ; response . put ( STRING_3 , VAR_3 ) ; METHOD_3 ( response ) ; } catch ( TYPE_2 VAR_5 ) { TYPE_3 . METHOD_4 ( VAR_6 , STRING_4 ) ; } }\n", "fixed": "public void error ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { try { TYPE_1 response = METHOD_2 ( VAR_4 ) ; response . put ( STRING_1 , VAR_1 ) ; response . put ( STRING_2 , VAR_2 ) ; response . put ( STRING_3 , VAR_3 ) ; METHOD_3 ( response ) ; } catch ( TYPE_2 VAR_5 ) { TYPE_3 . METHOD_4 ( VAR_6 , STRING_4 ) ; } }\n"}
{"problem": "public void METHOD_1 ( final TYPE_1 VAR_1 , final int VAR_2 ) { if ( ( ( VAR_3 ) == null ) || ( ( set ) == null ) ) return ; if ( VAR_1 == null ) return ; METHOD_2 ( VAR_1 . getName ( ) , VAR_1 , VAR_4 , VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( final TYPE_1 VAR_1 , final int VAR_2 ) { if ( ( ( VAR_3 ) == null ) || ( ( set ) == null ) ) return ; if ( VAR_1 == null ) return ; METHOD_2 ( VAR_1 . getName ( ) , VAR_1 , VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . assertNotNull ( VAR_1 ) ; TYPE_2 . assertNotNull ( VAR_2 . METHOD_2 ( ) ) ; java.util.Map < java.lang.String , TYPE_3 > VAR_3 = TYPE_4 . METHOD_3 ( VAR_1 . data ) . data ; TYPE_2 . assertNotNull ( VAR_3 ) ; VAR_2 . METHOD_2 ( ) . METHOD_4 ( new TYPE_5 ( TYPE_6 . get ( ) , TYPE_7 . METHOD_5 ( VAR_3 ) ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . assertNotNull ( VAR_2 . METHOD_2 ( ) ) ; java.util.Map < java.lang.String , TYPE_3 > VAR_3 = TYPE_4 . METHOD_3 ( VAR_1 . data ) . data ; TYPE_2 . assertNotNull ( VAR_3 ) ; VAR_2 . METHOD_2 ( ) . METHOD_4 ( new TYPE_5 ( TYPE_6 . get ( ) , TYPE_7 . METHOD_5 ( VAR_3 ) ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String id ) { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 , java.lang.Integer.parseInt ( id ) ) ; TYPE_1 VAR_4 = null ; java.lang.String response = VAR_5 . METHOD_3 ( VAR_1 ) ; TYPE_3 results = VAR_6 . METHOD_4 ( response ) ; VAR_4 = METHOD_5 ( results ) ; return VAR_4 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String id ) { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 , id ) ; TYPE_1 VAR_4 = null ; java.lang.String response = VAR_5 . METHOD_3 ( VAR_1 ) ; TYPE_3 results = VAR_6 . METHOD_4 ( response ) ; VAR_4 = METHOD_5 ( results ) ; return VAR_4 ; }\n"}
{"problem": "public java.util.Collection < ? extends TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; java.util.List < TYPE_2 > VAR_2 = this . METHOD_2 ( ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { VAR_1 . add ( new TYPE_3 ( VAR_3 . getName ( ) ) ) ; } return VAR_1 ; }\n", "fixed": "public java.util.Collection < ? extends TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; java.util.List < TYPE_2 > VAR_2 = this . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) { for ( TYPE_2 VAR_3 : VAR_2 ) { VAR_1 . add ( new TYPE_3 ( VAR_3 . getName ( ) ) ) ; } } return VAR_1 ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 node ) throws TYPE_3 { TYPE_1 result = METHOD_2 ( node . METHOD_3 ( ) ) ; TYPE_4 op = null ; switch ( node . METHOD_4 ( ) ) { case VAR_1 : op = VAR_2 ; break ; case VAR_3 : case VAR_4 : op = VAR_5 ; break ; } VAR_6 . METHOD_5 ( new TYPE_5 ( op , VAR_7 . METHOD_6 ( VAR_6 ) , VAR_7 . METHOD_7 ( node . METHOD_3 ( ) ) , VAR_7 . METHOD_8 ( node ) ) ) ; return result ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 node ) throws TYPE_3 { TYPE_1 result = METHOD_2 ( node . METHOD_3 ( ) ) ; TYPE_4 op = null ; switch ( node . METHOD_4 ( ) ) { case VAR_1 : op = VAR_2 ; break ; case VAR_3 : case VAR_4 : op = VAR_5 ; break ; } METHOD_5 ( new TYPE_5 ( op , VAR_7 . METHOD_6 ( VAR_6 ) , VAR_7 . METHOD_7 ( node . METHOD_3 ( ) ) , VAR_7 . METHOD_8 ( node ) ) ) ; return result ; }\n"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; int i = METHOD_2 ( ) ; if ( i >= 0 ) { TYPE_1 . METHOD_3 ( this ) ; METHOD_4 ( ) ; } if ( i == 0 ) { METHOD_5 ( ) ; VAR_1 = new java.util.ArrayList < > ( ) ; METHOD_6 ( new android.content.Intent ( METHOD_7 ( ) , VAR_2 class ) ) ; TYPE_2 VAR_3 = new TYPE_2 ( this ) ; java.lang.Thread . METHOD_8 ( VAR_3 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_3 ( this ) ; int i = METHOD_2 ( ) ; if ( i >= 0 ) { METHOD_4 ( ) ; } if ( i == 0 ) { METHOD_5 ( ) ; VAR_1 = new java.util.ArrayList < > ( ) ; METHOD_6 ( new android.content.Intent ( METHOD_7 ( ) , VAR_2 class ) ) ; TYPE_2 VAR_3 = new TYPE_2 ( this ) ; java.lang.Thread . METHOD_8 ( VAR_3 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { for ( int i = 0 ; i < ( field . length ) ; i ++ ) { for ( int j = 0 ; j < ( field . length ) ; j ++ ) { if ( field [ i ] [ j ] . METHOD_2 ( ) ) field [ i ] [ j ] . setText ( VAR_1 ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { for ( int i = 0 ; i < ( field . length ) ; i ++ ) { for ( int j = 0 ; j < ( field [ i ] . length ) ; j ++ ) { if ( field [ i ] [ j ] . METHOD_2 ( ) ) field [ i ] [ j ] . setText ( VAR_1 ) ; } } }\n"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"problem": "private static int METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( VAR_2 . length ( ) ) == INT_1 ) { return VAR_2 . METHOD_4 ( 1 ) ; } else { return VAR_1 . length ( ) ; } }\n", "fixed": "private static int METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( VAR_2 . length ( ) ) == INT_1 ) { return VAR_2 . METHOD_4 ( 0 ) ; } else { return VAR_1 . length ( ) ; } }\n"}
{"problem": "public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) ) == false ) return ; TYPE_1 . METHOD_6 ( null ) ; TYPE_1 . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( ) ; TYPE_2 . METHOD_10 ( ) ; TYPE_1 . METHOD_11 ( null ) ; }\n", "fixed": "public static boolean METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) ) == false ) return false ; TYPE_1 . METHOD_6 ( null ) ; TYPE_1 . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( ) ; TYPE_2 . METHOD_10 ( ) ; TYPE_1 . METHOD_11 ( null ) ; return true ; }\n"}
{"fixCommitSHA1": "615135aaa2ec18ea6c0b4785749079df4db5fd7a", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Change Identifier Used", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"problem": "public void METHOD_1 ( int length ) { int VAR_1 = this . words . get ( 0 ) . length ( ) ; for ( java.lang.String VAR_2 : this . words ) { if ( ( VAR_2 . length ( ) ) == length ) { VAR_1 = length ; break ; } } this . length = VAR_1 ; }\n", "fixed": "public void METHOD_1 ( int length ) { int VAR_1 = this . words . get ( 0 ) . length ( ) ; for ( java.lang.String VAR_2 : this . words ) { if ( ( VAR_2 . length ( ) ) == length ) { VAR_1 = length ; break ; } else if ( VAR_1 > ( VAR_2 . length ( ) ) ) { VAR_1 = VAR_2 . length ( ) ; } } this . length = VAR_1 ; }\n"}
{"fixCommitSHA1": "8b59afeaaa4458b6d21d88b2edc0d22ed04d9798", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         getMockEndpoint(\"mock:error\").expectedMessageCount(2);\n        resultEndpoint.expectedBodiesReceived(\"one\", \"three\");\n         sendMessage(\"1\", \"one\");\n         sendMessage(\"2\", \"two\");", "fixed": "         getMockEndpoint(\"mock:error\").expectedMessageCount(2);\n        resultEndpoint.expectedBodiesReceivedInAnyOrder(\"one\", \"three\");\n         sendMessage(\"1\", \"one\");\n         sendMessage(\"2\", \"two\");", "sourceBeforeFix": "resultEndpoint.expectedBodiesReceived(\"one\",\"three\")", "sourceAfterFix": "resultEndpoint.expectedBodiesReceivedInAnyOrder(\"one\",\"three\")"}
{"problem": "public TYPE_1 METHOD_1 ( ) throws TYPE_2 { METHOD_2 ( ) ; java.util.Map < java.lang.String , java.util.List < java.lang.String > > VAR_1 ; try { VAR_1 = METHOD_3 ( ) ; } catch ( TYPE_2 VAR_2 ) { VAR_3 . setState ( VAR_4 ) ; VAR_5 . METHOD_4 ( VAR_4 ) ; throw VAR_2 ; } VAR_3 . setState ( VAR_6 ) ; VAR_5 . METHOD_4 ( VAR_6 ) ; VAR_7 = VAR_1 ; VAR_8 = METHOD_5 ( ) ; METHOD_6 ( ) ; return this ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) throws TYPE_2 { METHOD_2 ( ) ; java.util.Map < java.lang.String , java.util.List < java.lang.String > > VAR_1 ; try { VAR_1 = METHOD_3 ( ) ; } catch ( TYPE_2 VAR_2 ) { VAR_3 . setState ( VAR_4 ) ; VAR_5 . METHOD_4 ( VAR_4 ) ; throw VAR_2 ; } VAR_7 = VAR_1 ; VAR_8 = METHOD_5 ( ) ; VAR_3 . setState ( VAR_6 ) ; VAR_5 . METHOD_4 ( VAR_6 ) ; METHOD_6 ( ) ; return this ; }\n"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         \n        public FrameShower(Component parent, final String msg) {\n             this.parent = parent;\n             this.msg = msg;\n         }", "fixed": "         \n        FrameShower(Component parent, final String msg) {\n             this.parent = parent;\n             this.msg = msg;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "69c1fc12079616a75ac51f90aed6dbfbefd586a2", "projectName": "apache.flink", "bugType": "Less Specific If", "problem": " \t@Override\n \tpublic PactRecord jsonToRecord(IJsonNode value, PactRecord target, EvaluationContext context) {\n \t\tIObjectNode others;\n\t\tif (target == null) {\n \t\t\ttarget = new PactRecord(this.mappings.size() + 1);\n \t\t\tfor (int i = 0; i < this.mappings.size(); i++)", "fixed": " \t@Override\n \tpublic PactRecord jsonToRecord(IJsonNode value, PactRecord target, EvaluationContext context) {\n \t\tIObjectNode others;\n\t\tif (target == null || target.getNumFields() < this.mappings.size() + 1) {\n \t\t\ttarget = new PactRecord(this.mappings.size() + 1);\n \t\t\tfor (int i = 0; i < this.mappings.size(); i++)", "sourceBeforeFix": "target == null", "sourceAfterFix": "target == null || target.getNumFields() < this.mappings.size() + 1"}
{"problem": "static int METHOD_1 ( final TYPE_1 VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return 0 ; case VAR_3 : return 1 ; case VAR_4 : return INT_1 ; case VAR_5 : return INT_2 ; case VAR_6 : return INT_3 ; case VAR_7 : return INT_4 ; case VAR_8 : return INT_5 ; case VAR_9 : return INT_6 ; case VAR_10 : return INT_7 ; default : throw new TYPE_2 ( ( STRING_1 + VAR_1 ) ) ; } }\n", "fixed": "static int METHOD_1 ( final TYPE_1 VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return 0 ; case VAR_4 : return 1 ; case VAR_3 : return INT_1 ; case VAR_5 : return INT_2 ; case VAR_6 : return INT_3 ; case VAR_7 : return INT_4 ; case VAR_8 : return INT_5 ; case VAR_9 : return INT_6 ; case VAR_10 : return INT_7 ; default : throw new TYPE_2 ( ( STRING_1 + VAR_1 ) ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( final java.util.List < TYPE_1 > VAR_1 ) { final java.util.List < TYPE_2 > VAR_2 = new java.util.ArrayList < TYPE_2 > ( ) ; for ( final TYPE_1 VAR_3 : VAR_1 ) { final TYPE_2 VAR_4 = new TYPE_2 ( ( ( TYPE_3 ) ( VAR_3 ) ) ) ; VAR_2 . add ( VAR_4 ) ; } TYPE_4 . METHOD_2 ( ) ; TYPE_4 . METHOD_3 ( VAR_2 ) ; TYPE_5 . METHOD_4 ( ) ; TYPE_6 . METHOD_2 ( ) ; TYPE_6 . METHOD_3 ( VAR_2 ) ; TYPE_7 . METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( final java.util.List < TYPE_1 > VAR_1 ) { VAR_2 = new java.util.ArrayList < TYPE_2 > ( ) ; for ( final TYPE_1 VAR_3 : VAR_1 ) { final TYPE_2 VAR_4 = new TYPE_2 ( ( ( TYPE_3 ) ( VAR_3 ) ) ) ; VAR_2 . add ( VAR_4 ) ; } TYPE_4 . METHOD_2 ( ) ; TYPE_4 . METHOD_3 ( VAR_2 ) ; TYPE_5 . METHOD_4 ( ) ; TYPE_6 . METHOD_2 ( ) ; TYPE_6 . METHOD_3 ( VAR_2 ) ; TYPE_7 . METHOD_4 ( ) ; }\n"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mongo\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mongo\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 ; int index = 0 ; for ( int i = 0 ; ( i <= ( VAR_4 . size ( ) ) ) && ( ! ( VAR_5 . get ( i ) . equals ( VAR_1 ) ) ) ; i ++ ) { index = i ; } try { VAR_5 . remove ( index ) ; VAR_5 . add ( VAR_1 ) ; VAR_2 = VAR_3 ; } catch ( TYPE_3 VAR_6 ) { VAR_2 = VAR_3 ; } return VAR_2 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 ; int index = - 1 ; try { for ( int i = 0 ; ( i <= ( VAR_4 . size ( ) ) ) && ( ! ( VAR_5 . get ( i ) . equals ( VAR_1 ) ) ) ; i ++ ) { index = i ; } VAR_5 . remove ( index ) ; VAR_5 . add ( VAR_1 ) ; VAR_2 = VAR_3 ; } catch ( TYPE_3 VAR_6 ) { VAR_2 = VAR_3 ; } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View view ) { if ( ! ( METHOD_2 ( view ) ) ) { if ( ( ( VAR_1 ) != null ) && ( ( java.util.Calendar.getInstance ( ) . compareTo ( VAR_1 ) ) < 0 ) ) { TYPE_1 . METHOD_3 ( getContext ( ) , STRING_1 , VAR_2 ) . show ( ) ; VAR_1 = null ; } else { VAR_3 = new TYPE_2 ( getActivity ( ) , view , VAR_1 ) ; VAR_3 . execute ( ) ; } } }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { if ( ! ( METHOD_2 ( view ) ) ) { if ( ( ( VAR_1 ) != null ) && ( ( java.util.Calendar.getInstance ( ) . compareTo ( VAR_1 ) ) < 0 ) ) { TYPE_1 . METHOD_3 ( getContext ( ) , STRING_1 , VAR_2 ) . show ( ) ; VAR_1 = null ; } else { VAR_3 = new TYPE_2 ( getActivity ( ) , view , VAR_1 ) ; VAR_1 = null ; VAR_3 . execute ( ) ; } } }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 result = VAR_1 . METHOD_2 ( new java.lang.String [ ] { } , new java.lang.String [ ] { } , STRING_1 , STRING_2 , STRING_1 , STRING_1 ) ; TYPE_2 . assertThat ( VAR_2 , TYPE_3 . METHOD_3 ( VAR_3 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 result = VAR_1 . METHOD_2 ( new java.lang.String [ ] { } , new java.lang.String [ ] { } , STRING_1 , STRING_2 , STRING_1 , STRING_1 , null , null ) ; TYPE_2 . assertThat ( VAR_2 , TYPE_3 . METHOD_3 ( VAR_3 ) ) ; }\n"}
{"problem": "public static void METHOD_1 ( TYPE_1 source , TYPE_2 VAR_1 ) throws TYPE_3 , java.io.IOException , TYPE_4 { final TYPE_5 VAR_2 = source . METHOD_2 ( ) ; final TYPE_6 VAR_3 = VAR_1 . METHOD_3 ( VAR_2 , source . METHOD_4 ( ) , source . METHOD_5 ( ) ) ; TYPE_7 VAR_4 = VAR_3 . METHOD_6 ( ) ; try { new TYPE_8 ( source . METHOD_2 ( ) , VAR_4 ) . METHOD_7 ( ) ; } finally { VAR_4 . METHOD_8 ( ) ; } }\n", "fixed": "public static void METHOD_1 ( TYPE_1 source , TYPE_2 VAR_1 ) throws TYPE_3 , java.io.IOException , TYPE_4 { final TYPE_5 VAR_2 = source . METHOD_2 ( ) ; final TYPE_6 VAR_3 = VAR_1 . METHOD_3 ( VAR_2 , source . METHOD_4 ( ) , source . METHOD_5 ( ) , false ) ; TYPE_7 VAR_4 = VAR_3 . METHOD_6 ( ) ; try { new TYPE_8 ( source . METHOD_2 ( ) , VAR_4 ) . METHOD_7 ( ) ; } finally { VAR_4 . METHOD_8 ( ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) >= ( VAR_2 . length ) ) TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_1 ( ) ; return ( ( TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_1 ( ) ) + STRING_1 ) + ( VAR_3 [ VAR_1 . METHOD_2 ( ) ] ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) >= ( VAR_2 . length ) ) return TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_1 ( ) ; return ( ( TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_1 ( ) ) + STRING_1 ) + ( VAR_3 [ VAR_1 . METHOD_2 ( ) ] ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMongoDbEndpointBuilder\n             extends\n                 AdvancedMongoDbEndpointConsumerBuilder, AdvancedMongoDbEndpointProducerBuilder {\n         default MongoDbEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMongoDbEndpointBuilder\n             extends\n                 AdvancedMongoDbEndpointConsumerBuilder, AdvancedMongoDbEndpointProducerBuilder {\n         default MongoDbEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { return TYPE_3 . METHOD_3 ( ) ; } java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_4 ( VAR_1 ) ; if ( VAR_2 == null ) { return TYPE_3 . METHOD_3 ( ) ; } return VAR_2 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { return TYPE_3 . METHOD_3 ( ) ; } java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_4 ( VAR_1 ) ; java.util.Collections.sort ( VAR_2 ) ; if ( VAR_2 == null ) { return TYPE_3 . METHOD_3 ( ) ; } return VAR_2 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_2 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 ) ; if ( VAR_2 < INT_1 ) { METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; } if ( VAR_2 == INT_1 ) { METHOD_5 ( VAR_1 ) ; VAR_2 = INT_2 ; } if ( VAR_2 == INT_2 ) { METHOD_6 ( VAR_1 ) ; VAR_2 = INT_3 ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_2 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 ) ; if ( VAR_2 < INT_1 ) { METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; return ; } if ( VAR_2 == INT_1 ) { METHOD_5 ( VAR_1 ) ; VAR_2 = INT_2 ; } if ( VAR_2 == INT_2 ) { METHOD_6 ( VAR_1 ) ; VAR_2 = INT_3 ; } }\n"}
{"problem": "public < TYPE_1 extends TYPE_2 > TYPE_1 show ( TYPE_3 element , java.lang.Class < TYPE_1 > VAR_1 ) { if ( element != null ) { VAR_2 . METHOD_1 ( element ) ; } TYPE_2 VAR_3 = TYPE_4 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( this ) ; return VAR_1 . METHOD_6 ( VAR_3 ) ; }\n", "fixed": "public < TYPE_1 extends TYPE_2 > TYPE_1 show ( TYPE_3 element , java.lang.Class < TYPE_1 > VAR_1 ) { if ( element != null ) { VAR_2 . METHOD_1 ( element ) ; } TYPE_2 VAR_3 = TYPE_4 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_1 ) ; VAR_3 . METHOD_5 ( this ) ; VAR_3 . METHOD_4 ( ) ; return VAR_1 . METHOD_6 ( VAR_3 ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int n = VAR_1 . METHOD_2 ( ) ; int VAR_2 = VAR_1 . METHOD_3 ( ) ; double [ ] [ ] data = new double [ n ] [ VAR_2 ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < VAR_2 ; j ++ ) data [ i ] [ j ] = VAR_1 . METHOD_4 ( i , j ) ; return new TYPE_1 ( data , true ) ; }\n", "fixed": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int n = VAR_1 . METHOD_2 ( ) ; int VAR_2 = VAR_1 . METHOD_3 ( ) ; double [ ] [ ] data = new double [ n ] [ VAR_2 ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < VAR_2 ; j ++ ) data [ i ] [ j ] = VAR_1 . METHOD_4 ( j , i ) ; return new TYPE_1 ( data , true ) ; }\n"}
{"fixCommitSHA1": "346387c717048391485fb28f877531aab1095de1", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @return get target of annotation\n      */\n     private static DetailAST getAnnotationTarget(DetailAST ast) {\n        DetailAST targetAST;\n         final DetailAST parentAST = ast.getParent();\n         switch (parentAST.getType()) {\n             case TokenTypes.MODIFIERS:", "fixed": "      * @return get target of annotation\n      */\n     private static DetailAST getAnnotationTarget(DetailAST ast) {\n        final DetailAST targetAST;\n         final DetailAST parentAST = ast.getParent();\n         switch (parentAST.getType()) {\n             case TokenTypes.MODIFIERS:", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6e2294ea9bc140eb0965fd560116d6e3a33266db", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         assertMailboxReceivedMessages(\"james@localhost\");\n        resultEndpoint.assertIsSatisfied(5000);\n         assertMailboxReceivedMessages(\"copy@localhost\");\n     }", "fixed": "         assertMailboxReceivedMessages(\"james@localhost\");\n        resultEndpoint.assertIsSatisfied(10000);\n         assertMailboxReceivedMessages(\"copy@localhost\");\n     }", "sourceBeforeFix": "resultEndpoint.assertIsSatisfied(5000)", "sourceAfterFix": "resultEndpoint.assertIsSatisfied(10000)"}
{"problem": "private java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.util.List < TYPE_2 > VAR_2 , TYPE_3 VAR_3 ) throws TYPE_4 { int VAR_4 = VAR_3 . METHOD_2 ( ) ; int VAR_5 = VAR_3 . METHOD_3 ( ) ; TYPE_5 VAR_6 = TYPE_6 . METHOD_4 ( VAR_4 , VAR_5 ) ; TYPE_7 VAR_7 = new TYPE_7 ( new TYPE_8 ( VAR_6 ) ) ; return ( ( java.util.List < TYPE_1 > ) ( VAR_7 . METHOD_5 ( VAR_1 ) ) ) ; }\n", "fixed": "private java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.util.List < TYPE_2 > VAR_2 , TYPE_3 VAR_3 ) throws TYPE_4 { TYPE_5 VAR_6 = TYPE_6 . METHOD_4 ( VAR_3 ) ; TYPE_7 VAR_7 = new TYPE_7 ( new TYPE_8 ( VAR_6 ) ) ; return ( ( java.util.List < TYPE_1 > ) ( VAR_7 . METHOD_5 ( VAR_1 ) ) ) ; }\n"}
{"fixCommitSHA1": "5fec881032668a72cdfaaa9082a8b35e398b599e", "projectName": "wildfly.wildfly", "bugType": "Change Modifier", "problem": " \ninterface AMBean {\n     int getCount();", "fixed": " \npublic interface AMBean {\n     int getCount();", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "dfb43299a88507211e9acb9a9f21a8ba54f0205a", "projectName": "iluwatar.java-design-patterns", "bugType": "Change Identifier Used", "problem": "    * @param testedPrototype  The tested prototype instance\n* @param expectedToString The expected {@link Prototype\n    */\n  public PrototypeTest(final Prototype testedPrototype, final String expectedToString) {\n     this.expectedToString = expectedToString;\n     this.testedPrototype = testedPrototype;\n   }", "fixed": "    * @param testedPrototype  The tested prototype instance\n* @param expectedToString The expected {@link Prototype\n    */\n  public PrototypeTest(final P testedPrototype, final String expectedToString) {\n     this.expectedToString = expectedToString;\n     this.testedPrototype = testedPrototype;\n   }", "sourceBeforeFix": "/**   * The tested prototype instance  */ private final Prototype testedPrototype; ", "sourceAfterFix": "/**   * The tested prototype instance  */ private final P testedPrototype; "}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SqlStoredEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedSqlStoredEndpointBuilder advanced() {\n             return (AdvancedSqlStoredEndpointBuilder) this;\n         }", "fixed": "     \n    public interface SqlStoredEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedSqlStoredEndpointBuilder advanced() {\n             return (AdvancedSqlStoredEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "1c3c663ba7d55fcd33af1502ca426274d51d2ba1", "projectName": "apache.flink", "bugType": "Change Binary Operator", "problem": " \t\t}\n\t\tfor (int i = 0; i < maxIndex; i++) {\n \t\t\tfinal String fullKey = key + '.' + i;\n \t\t\tif (properties.containsKey(fullKey)) {", "fixed": " \t\t}\n\t\tfor (int i = 0; i <= maxIndex; i++) {\n \t\t\tfinal String fullKey = key + '.' + i;\n \t\t\tif (properties.containsKey(fullKey)) {", "sourceBeforeFix": "i < maxIndex", "sourceAfterFix": "i <= maxIndex"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String type ) { if ( ( VAR_1 != null ) && ( ( VAR_1 . METHOD_2 ( ) ) != null ) ) { METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; } else { java.lang.System.out.println ( ( STRING_1 + type ) ) ; getView ( ) . METHOD_4 ( VAR_1 , type ) ; if ( ! ( METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ) ) { METHOD_7 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String type ) { if ( ( VAR_1 != null ) && ( ( VAR_1 . METHOD_2 ( ) ) != null ) ) { METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; } else { getView ( ) . METHOD_4 ( VAR_1 , type ) ; if ( ! ( METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ) ) { METHOD_7 ( ) ; } } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String name , int x , int y , int VAR_2 ) { VAR_3 . METHOD_2 ( ( ( ( ( ( ( ( ( ( ( ( STRING_1 + ( METHOD_3 ( VAR_1 ) ) ) + STRING_2 ) + ( METHOD_3 ( name ) ) ) + STRING_2 ) + x ) + STRING_2 ) + y ) + STRING_2 ) + VAR_2 ) + STRING_2 ) + STRING_3 ) ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String name , int x , int y , int VAR_2 ) { VAR_3 . METHOD_2 ( ( ( ( ( ( ( ( ( ( ( STRING_1 + ( METHOD_3 ( VAR_1 ) ) ) + STRING_2 ) + ( METHOD_3 ( name ) ) ) + STRING_2 ) + x ) + STRING_2 ) + y ) + STRING_2 ) + VAR_2 ) + STRING_3 ) ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_1 . METHOD_3 ( VAR_3 . getBoolean ( STRING_1 , true ) ) ; VAR_1 . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_4 , boolean VAR_5 ) { VAR_3 . METHOD_6 ( ) . METHOD_7 ( STRING_1 , VAR_5 ) . METHOD_8 ( ) ; TYPE_4 . METHOD_9 ( VAR_6 this , STRING_2 , VAR_7 ) . show ( ) ; } } ) ; }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_1 . METHOD_3 ( VAR_3 . getBoolean ( STRING_1 , true ) ) ; VAR_1 . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_4 , boolean VAR_5 ) { VAR_3 . METHOD_6 ( ) . METHOD_7 ( STRING_1 , VAR_5 ) . METHOD_8 ( ) ; } } ) ; }\n"}
{"problem": "public static boolean METHOD_1 ( java.util.Map < java.lang.String , java.lang.Integer > VAR_1 , TYPE_1 VAR_2 ) { java.lang.String VAR_3 = VAR_2 . METHOD_2 ( ) ; return ( VAR_1 . METHOD_3 ( VAR_3 ) ) && ( ( VAR_1 . get ( VAR_3 ) ) == ( VAR_2 . METHOD_4 ( ) ) ) ; }\n", "fixed": "public static boolean METHOD_1 ( java.util.Map < java.lang.String , java.lang.Integer > VAR_1 , TYPE_1 VAR_2 ) { java.lang.String VAR_3 = VAR_2 . METHOD_2 ( ) ; return ( VAR_1 . METHOD_3 ( VAR_3 ) ) && ( ( VAR_1 . get ( VAR_3 ) ) >= ( VAR_2 . METHOD_4 ( ) ) ) ; }\n"}
{"problem": "private static java.lang.Object METHOD_1 ( final java.lang.Object obj , final java.lang.String fieldName ) { try { TYPE_1 f = obj . getClass ( ) . METHOD_1 ( fieldName ) ; return f . get ( obj ) ; } catch ( final java.lang.Exception VAR_1 ) { if ( VAR_2 ) { TYPE_2 . METHOD_2 ( VAR_3 , STRING_1 , VAR_1 ) ; } } return null ; }\n", "fixed": "private static java.lang.Object METHOD_1 ( final java.lang.Object obj , final java.lang.String fieldName ) { try { TYPE_1 f = obj . getClass ( ) . METHOD_1 ( fieldName ) ; return f . get ( obj ) ; } catch ( final java.lang.Exception VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_3 , STRING_1 , VAR_1 ) ; } return null ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { try { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { throw new TYPE_2 ( ( STRING_1 + VAR_1 ) ) ; } return new TYPE_3 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) , true , true , true , METHOD_6 ( java.util.Arrays.asList ( VAR_2 . METHOD_7 ( ) ) ) ) ; } catch ( java.lang.Exception VAR_4 ) { throw new TYPE_4 ( VAR_4 ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { try { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { throw new TYPE_2 ( ( STRING_1 + VAR_1 ) ) ; } return new TYPE_3 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , true , true , true , true , METHOD_6 ( java.util.Arrays.asList ( VAR_2 . METHOD_7 ( ) ) ) ) ; } catch ( java.lang.Exception VAR_4 ) { throw new TYPE_4 ( VAR_4 ) ; } }\n"}
{"problem": "private static boolean METHOD_1 ( final java.lang.String name , final java.lang.String type , final java.lang.String VAR_1 ) { return VAR_1 . contains ( ( ( ( ( STRING_1 + type ) + STRING_2 ) + ( TYPE_1 . METHOD_2 ( name ) ) ) + STRING_3 ) ) ; }\n", "fixed": "public static boolean METHOD_1 ( final java.lang.String name , final java.lang.String type , final java.lang.String VAR_1 ) { return VAR_1 . contains ( ( ( ( ( STRING_1 + type ) + STRING_2 ) + ( TYPE_1 . METHOD_2 ( name ) ) ) + STRING_3 ) ) ; }\n"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     out.append(\"\\n}\\n\");\n   }\n  private CharSequence offsetValue(int line, int column) throws IOException {\n     StringBuilder out = new StringBuilder();\n     out.append(\"{\\n\");\n     appendFirstField(out, \"line\", String.valueOf(line));", "fixed": "     out.append(\"\\n}\\n\");\n   }\n  private static CharSequence offsetValue(int line, int column) throws IOException {\n     StringBuilder out = new StringBuilder();\n     out.append(\"{\\n\");\n     appendFirstField(out, \"line\", String.valueOf(line));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "fixed": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = ( x ) + ( VAR_3 ) ; int VAR_4 = ( y ) + ( VAR_5 ) ; java.lang.System.out.println ( ( ( VAR_2 + \"\\t\" ) + VAR_4 ) ) ; return ! ( ( ( ( VAR_2 > INT_1 ) || ( VAR_2 < 0 ) ) || ( VAR_4 < 0 ) ) || ( VAR_4 > INT_1 ) ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = ( x ) + ( VAR_3 ) ; int VAR_4 = ( y ) + ( VAR_5 ) ; return ! ( ( ( ( VAR_2 > INT_1 ) || ( VAR_2 < 0 ) ) || ( VAR_4 < 0 ) ) || ( VAR_4 > INT_1 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { int x = VAR_1 . METHOD_2 ( size ) ; int y = VAR_1 . METHOD_2 ( size ) ; int VAR_2 = VAR_1 . METHOD_2 ( size ) ; VAR_3 [ x ] [ y ] [ VAR_2 ] = INT_1 ; }\n", "fixed": "public void METHOD_1 ( ) { int size = VAR_3 . length ; int x = VAR_1 . METHOD_2 ( size ) ; int y = VAR_1 . METHOD_2 ( size ) ; int VAR_2 = VAR_1 . METHOD_2 ( size ) ; VAR_3 [ x ] [ y ] [ VAR_2 ] = INT_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6a654d972b09abc6b3fb9e829ca7d226ea25adb9", "projectName": "facebook.presto", "bugType": "Change Unary Operator\t", "problem": "         return toStringHelper(this)\n                 .add(\"finished\", finished)\n                 .add(\"newTasks\", newTasks.size())\n                .add(\"blocked\", blocked.isDone())\n                 .add(\"splitsScheduled\", splitsScheduled)\n                 .add(\"blockedReason\", blockedReason)\n                 .toString();", "fixed": "         return toStringHelper(this)\n                 .add(\"finished\", finished)\n                 .add(\"newTasks\", newTasks.size())\n                .add(\"blocked\", !blocked.isDone())\n                 .add(\"splitsScheduled\", splitsScheduled)\n                 .add(\"blockedReason\", blockedReason)\n                 .toString();", "sourceBeforeFix": "blocked.isDone()", "sourceAfterFix": "!blocked.isDone()"}
{"problem": "public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return ( ) - > { java.lang.Thread . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; java.lang.Thread . METHOD_4 ( ) ; try { TYPE_3 VAR_3 = VAR_4 . METHOD_5 ( VAR_1 ) ; return new TYPE_2 ( VAR_3 . getId ( ) , VAR_5 ) ; } catch ( java.lang.Exception VAR_6 ) { TYPE_4 . error ( ( STRING_1 + ( VAR_6 . METHOD_6 ( ) ) ) ) ; return new TYPE_2 ( VAR_7 ) ; } } ; }\n", "fixed": "public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return ( ) - > { try { TYPE_3 VAR_3 = VAR_4 . METHOD_5 ( VAR_1 ) ; return new TYPE_2 ( VAR_3 . getId ( ) , VAR_5 ) ; } catch ( java.lang.Exception VAR_6 ) { TYPE_4 . error ( ( STRING_1 + ( VAR_6 . METHOD_6 ( ) ) ) ) ; return new TYPE_2 ( VAR_7 ) ; } } ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_2 ( ) ; java.lang.String VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; org.testng.Assert.assertEquals ( true , VAR_1 . METHOD_3 ( ) . get ( VAR_4 ) ) ; org.testng.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_3 ( ) . get ( VAR_5 ) ) ; org.testng.Assert.assertEquals ( STRING_2 , VAR_1 . METHOD_3 ( ) . get ( VAR_6 ) ) ; org.testng.Assert.assertEquals ( STRING_3 , VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_2 ( ) ; java.lang.String VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; org.testng.Assert.assertEquals ( true , VAR_1 . METHOD_3 ( ) . get ( VAR_4 ) ) ; org.testng.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_3 ( ) . get ( VAR_5 ) ) ; org.testng.Assert.assertEquals ( STRING_3 , VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 ) ; final java.lang.String VAR_3 = answer ; if ( VAR_4 . equals ( VAR_5 ) ) METHOD_3 ( VAR_3 , VAR_6 ) ; METHOD_4 ( id , VAR_3 , false , false , VAR_4 , VAR_7 , VAR_6 , VAR_8 ) ; }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 ) ; final java.lang.String VAR_3 = answer ; if ( VAR_4 . equals ( VAR_5 ) ) METHOD_3 ( VAR_3 , VAR_6 ) ; METHOD_4 ( id , VAR_3 , false , null , false , VAR_4 , VAR_7 , VAR_6 , VAR_8 ) ; }\n"}
{"problem": "public java.lang.Object METHOD_1 ( java.io.InputStream VAR_1 ) throws java.io.IOException { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_1 ) ; java.lang.Object result = VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_4 . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; return result ; }\n", "fixed": "public java.lang.Object METHOD_1 ( java.io.InputStream VAR_1 ) throws java.io.IOException { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_1 ) ; java.lang.Object result = VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_4 . METHOD_4 ( ) ; VAR_1 . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; return result ; }\n"}
{"problem": "public java.net.URL METHOD_1 ( java.lang.String path ) throws TYPE_1 { java.lang.String VAR_1 = METHOD_2 ( path ) ; if ( VAR_1 == null ) { throw new TYPE_1 ( VAR_2 . getString ( STRING_1 , path ) ) ; } TYPE_2 VAR_3 = context . METHOD_3 ( ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( VAR_1 ) . METHOD_4 ( ) ; } return null ; }\n", "fixed": "public java.net.URL METHOD_1 ( java.lang.String path ) throws TYPE_1 { java.lang.String VAR_1 = METHOD_2 ( path , false ) ; if ( VAR_1 == null ) { throw new TYPE_1 ( VAR_2 . getString ( STRING_1 , path ) ) ; } TYPE_2 VAR_3 = context . METHOD_3 ( ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( VAR_1 ) . METHOD_4 ( ) ; } return null ; }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_1 VAR_1 = new TYPE_3 ( ) ; VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( new TYPE_4 ( ) { public void METHOD_5 ( TYPE_5 VAR_3 ) { switch ( VAR_3 . getType ( ) ) { case VAR_4 : case VAR_5 : { METHOD_6 ( ) ; break ; } } } } ) ; VAR_6 = new TYPE_6 ( ) ; VAR_7 = new TYPE_7 ( ) ; METHOD_7 ( ) ; return VAR_1 ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( ) throws TYPE_2 { VAR_6 = new TYPE_6 ( ) ; VAR_7 = new TYPE_7 ( ) ; TYPE_1 VAR_1 = new TYPE_3 ( ) ; VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( new TYPE_4 ( ) { public void METHOD_5 ( TYPE_5 VAR_3 ) { switch ( VAR_3 . getType ( ) ) { case VAR_4 : case VAR_5 : { METHOD_6 ( ) ; break ; } } } } ) ; return VAR_1 ; }\n"}
{"problem": "public static void METHOD_1 ( java.lang.String message , float VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 . METHOD_2 ( ) ; java.lang.System.out.println ( ( ( ( ( ( ( ( STRING_1 + message ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) + STRING_4 ) + VAR_3 ) ) ; double VAR_4 = VAR_1 - VAR_2 ; TYPE_1 . METHOD_3 ( ( VAR_1 <= ( VAR_2 - ( java.lang.Math.abs ( VAR_4 ) ) ) ) ) ; }\n", "fixed": "public static void METHOD_1 ( java.lang.String message , float VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 . METHOD_2 ( ) ; java.lang.System.out.println ( ( ( ( ( ( ( ( STRING_1 + message ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) + STRING_4 ) + VAR_3 ) ) ; TYPE_1 . METHOD_3 ( ( VAR_1 <= ( VAR_2 - ( java.lang.Math.abs ( VAR_3 ) ) ) ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { VAR_1 = true ; VAR_2 . METHOD_2 ( true ) ; VAR_3 . METHOD_3 ( null ) ; if ( ( ( ( VAR_4 ) != null ) && ( ( VAR_4 . length ) >= 0 ) ) && ( ( VAR_4 [ 0 ] ) != null ) ) this . VAR_5 . METHOD_4 ( VAR_4 [ 0 ] . METHOD_5 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = true ; VAR_2 . METHOD_2 ( true ) ; VAR_3 . METHOD_3 ( null ) ; if ( ( ( ( VAR_4 ) != null ) && ( ( VAR_4 . length ) > 0 ) ) && ( ( VAR_4 [ 0 ] ) != null ) ) this . VAR_5 . METHOD_4 ( VAR_4 [ 0 ] . METHOD_5 ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { java.lang.String VAR_3 = VAR_4 . get ( position ) . METHOD_2 ( ) ; VAR_4 . remove ( position ) ; VAR_5 . METHOD_3 ( VAR_4 ) ; new TYPE_2 ( ) . METHOD_4 ( VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ( VAR_4 . size ( ) ) != 0 ) { java.lang.String VAR_3 = VAR_4 . get ( position ) . METHOD_2 ( ) ; VAR_4 . remove ( position ) ; VAR_5 . METHOD_3 ( VAR_4 ) ; new TYPE_2 ( ) . METHOD_4 ( VAR_3 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { TYPE_4 VAR_3 = ( ( TYPE_4 ) ( VAR_1 ) ) ; TYPE_5 VAR_4 = new TYPE_5 ( ) ; if ( VAR_2 . METHOD_2 ( ) ) { VAR_4 . set ( 0 ) ; } VAR_3 . METHOD_3 ( VAR_4 , 1 ) ; if ( VAR_2 . METHOD_2 ( ) ) { VAR_3 . METHOD_4 ( VAR_5 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { TYPE_4 VAR_3 = ( ( TYPE_4 ) ( VAR_1 ) ) ; TYPE_5 VAR_4 = new TYPE_5 ( ) ; if ( VAR_2 . METHOD_2 ( ) ) { VAR_4 . set ( 0 ) ; } VAR_3 . METHOD_3 ( VAR_4 , 1 ) ; if ( VAR_2 . METHOD_2 ( ) ) { VAR_5 . METHOD_1 ( VAR_3 ) ; } }\n"}
{"fixCommitSHA1": "75d32d68cf130e7d43dfe361a34ebc3c74e61e3b", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     static final HazelcastProperty MAX_TOLERATED_MISS_COUNT\n             = new HazelcastProperty(\"hazelcast.invalidation.max.tolerated.miss.count\", 10);\n     static final HazelcastProperty RECONCILIATION_INTERVAL_SECONDS\n            = new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\", 1, SECONDS);\n     static final HazelcastProperty MIN_RECONCILIATION_INTERVAL_SECONDS\n            = new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\", 1, SECONDS);\n     static final long RESCHEDULE_FAILED_INITIALIZATION_AFTER_MILLIS = 500;", "fixed": "     static final HazelcastProperty MAX_TOLERATED_MISS_COUNT\n             = new HazelcastProperty(\"hazelcast.invalidation.max.tolerated.miss.count\", 10);\n     static final HazelcastProperty RECONCILIATION_INTERVAL_SECONDS\n            = new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\", 60, SECONDS);\n     static final HazelcastProperty MIN_RECONCILIATION_INTERVAL_SECONDS\n            = new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\", 30, SECONDS);\n     static final long RESCHEDULE_FAILED_INITIALIZATION_AFTER_MILLIS = 500;", "sourceBeforeFix": "new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\",1,SECONDS)", "sourceAfterFix": "new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\",30,SECONDS)"}
{"problem": "public static java.lang.String METHOD_1 ( java.lang.Object VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; VAR_2 . METHOD_4 ( ) ; VAR_4 . METHOD_4 ( ) ; java.lang.String VAR_5 = new java.lang.String ( TYPE_4 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , VAR_6 ) ) ; return VAR_5 ; }\n", "fixed": "public static java.lang.String METHOD_1 ( java.lang.Object VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( ) ; VAR_3 . METHOD_4 ( ) ; VAR_2 . METHOD_4 ( ) ; java.lang.String VAR_5 = new java.lang.String ( TYPE_4 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , VAR_6 ) ) ; return VAR_5 ; }\n"}
{"problem": "public void METHOD_1 ( long VAR_1 ) throws java.io.IOException { synchronized ( VAR_2 ) { METHOD_2 ( ) ; if ( ( VAR_3 ) >= ( str . size ( ) ) ) return ; VAR_3 += VAR_1 ; if ( 0 > ( VAR_3 ) ) VAR_3 = 0 ; if ( ( VAR_3 ) > ( str . size ( ) ) ) VAR_3 = str . size ( ) ; } }\n", "fixed": "public void METHOD_1 ( long VAR_1 ) throws java.io.IOException { synchronized ( VAR_2 ) { METHOD_2 ( ) ; VAR_3 += VAR_1 ; if ( 0 > ( VAR_3 ) ) VAR_3 = 0 ; if ( ( VAR_3 ) > ( str . size ( ) ) ) VAR_3 = str . size ( ) ; } }\n"}
