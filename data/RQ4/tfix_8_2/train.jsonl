{"id": "/data/all/data/jashkenas/backbone", "bugType": "no-redeclare", "problem": "      if (remove) {\n        for (var i = 0, length = this.length; i < length; i++) {\n          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);", "fixed": "      if (remove) {\n        for (var i = 0; i < this.length; i++) {\n          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);", "message": "Redeclaring variable."}
{"id": "/data/all/data/microweber/microweber", "bugType": "guard-for-in", "problem": "            var editables = mwd.querySelectorAll('[contenteditable]'), x;\n            for(x in editables){\n                editables[x].contentEditable = false;", "fixed": "        else{\n            var editables = mwd.querySelectorAll('[contenteditable]'), l = editables.length, x = 0;\n            for( ; x<l; x++){\n                editables[x].contentEditable = false;", "message": "The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype."}
{"id": "/data/all/data/mozilla-b2g/gaia", "bugType": "no-invalid-this", "problem": "  exports.Picker = Picker;\n}(this));", "fixed": "  return Picker;\n});", "message": "Unexpected 'this'."}
{"id": "/data/all/data/appnexus/lucid", "bugType": "no-dupe-keys", "problem": "const InfiniteSlidePanel = createClass({ displayName: 'InfiniteSlidePanel',\n\tdisplayName: 'InfiniteSlidePanel',\n\t_isPrivate: true,", "fixed": "const InfiniteSlidePanel = createClass({\n\tdisplayName: 'InfiniteSlidePanel',\n\t_isPrivate: true,", "message": "Duplicate key 'displayName'."}
{"id": "/data/all/data/521dimensions/amplitudejs", "bugType": "no-dupe-keys", "problem": "\t\tsyncMute: syncMute,\n\t\tsyncVolumeSliders: syncVolumeSliders,\n\t\tsyncShuffle: syncShuffle,", "fixed": "\t\tsyncMute: syncMute,\n\t\tsyncShuffle: syncShuffle,", "message": "Duplicate key 'syncVolumeSliders'."}
{"id": "/data/all/data/meine-stadt-transparent/meine-stadt-transparent", "bugType": "no-constant-condition", "problem": "    if (false && initData[\"outline\"]) {\n        let polygons = getOutlineAsPolygons(initData[\"outline\"]);", "fixed": "    if (initData[\"outline\"]) {\n        let polygons = getOutlineAsPolygons(initData[\"outline\"]);", "message": "Unexpected constant condition."}
{"id": "/data/all/data/mongodb/node-mongodb-native", "bugType": "no-unused-vars", "problem": "          collection.ensureIndex({a:1, b:1}\n            , {unique:true, background:true, dropDups:true, w:1}, function(err, indexName) {", "fixed": "          collection.ensureIndex({a:1, b:1}\n            , {unique:true, background:true, w:1}, function(err, indexName) {", "message": "Unused variable."}
{"id": "/data/all/data/ArbeitBot/ArbeitBot", "bugType": "no-constant-condition", "problem": "  \n  if (true) {\n    keyboard[0].push({", "fixed": "  \n  if (!String(job.reportedBy).includes(String(user._id))) {\n    keyboard[0].push({", "message": "Unexpected constant condition."}
