{"fixCommitSHA1": "50adab26654da357afe0079f7831fd1cf0f8f8cd", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": " \npublic class IterableUtil {\n     private IterableUtil(){\n     }", "fixed": " \npublic final class IterableUtil {\n     private IterableUtil(){\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"jms\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"jms\")"}
{"fixCommitSHA1": "75d3a0dec751780b96b1941fc00fbb8e47e34665", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "             localMember.setStringAttribute(\"key\" + i, HazelcastTestSupport.randomString());\n         }\n        assertOpenEventually(countDownLatch, 30);\n     }\n     @Test(timeout = 120000)", "fixed": "             localMember.setStringAttribute(\"key\" + i, HazelcastTestSupport.randomString());\n         }\n        assertOpenEventually(countDownLatch);\n     }\n     @Test(timeout = 120000)", "sourceBeforeFix": "assertOpenEventually(countDownLatch,30)", "sourceAfterFix": "assertOpenEventually(countDownLatch)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "b7a31700f5eb974eccc4d9e5305015df8707bba0", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "             return null;\n         }\n         if (offset < 0) {\n            throw new IllegalArgumentException(\"negative offset:\" + offset);\n         }\n         if (length == 0) {\n             return \"\";", "fixed": "             return null;\n         }\n         if (offset < 0) {\n            throw new IndexOutOfBoundsException(\"negative offset:\" + offset);\n         }\n         if (length == 0) {\n             return \"\";", "sourceBeforeFix": "new IllegalArgumentException(\"negative offset:\" + offset)", "sourceAfterFix": "new IndexOutOfBoundsException(\"negative offset:\" + offset)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5ac2955ff4451c72db1e157dda76786f30511679", "projectName": "eclipse.vert.x", "bugType": "Change Numeric Literal", "problem": "     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n    int trafficClass = TestUtils.randomByte() + 127;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();", "fixed": "     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n    int trafficClass = TestUtils.randomByte() + 128;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();", "sourceBeforeFix": "TestUtils.randomByte() + 127", "sourceAfterFix": "TestUtils.randomByte() + 128"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
