{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 11:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 11:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),args.rest())"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Configuration\n\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "fixed": " \t}\n \t@Configuration\n\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "fixed": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "sourceBeforeFix": "GL.glCopyTexImage2DEXT(target,level,internalformat,x,y,width,height,border)", "sourceAfterFix": "GL.glCopyTexImage2D(target,level,internalformat,x,y,width,height,border)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesDeploymentsEndpointBuilder\n             extends\n                 KubernetesDeploymentsEndpointConsumerBuilder, KubernetesDeploymentsEndpointProducerBuilder {\n         default AdvancedKubernetesDeploymentsEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesDeploymentsEndpointBuilder\n             extends\n                 KubernetesDeploymentsEndpointConsumerBuilder, KubernetesDeploymentsEndpointProducerBuilder {\n         default AdvancedKubernetesDeploymentsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0a5f26324cfe4eb39eb48947f11364ec39221fa6", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "       scheduler.dispatch(task);\n     }\n     for (CallRunner task : tasks) {\n      verify(task, timeout(1000)).run();\n     }\n     scheduler.stop();", "fixed": "       scheduler.dispatch(task);\n     }\n     for (CallRunner task : tasks) {\n      verify(task, timeout(10000)).run();\n     }\n     scheduler.stop();", "sourceBeforeFix": "timeout(1000)", "sourceAfterFix": "timeout(10000)"}
{"fixCommitSHA1": "0e8e5ba702fbbea71f8cffc063e2d873cbebe83e", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForNone\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForNone\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "fixed": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "sourceBeforeFix": "logger.debug(\"MyQ binding received command '{}' for item '{}'\",command,itemName)", "sourceAfterFix": "logger.trace(\"MyQ binding received command '{}' for item '{}'\",command,itemName)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "fixed": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DropboxEndpointBuilder\n             extends\n                 DropboxEndpointConsumerBuilder, DropboxEndpointProducerBuilder {\n         default AdvancedDropboxEndpointBuilder advanced() {", "fixed": "     \n    public interface DropboxEndpointBuilder\n             extends\n                 DropboxEndpointConsumerBuilder, DropboxEndpointProducerBuilder {\n         default AdvancedDropboxEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "fixed": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "sourceBeforeFix": "final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); ", "sourceAfterFix": "final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); "}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "264d8442da6fcd6598bce079f131c703e541f9c0", "projectName": "spring-projects.spring-boot", "bugType": "Same Function More Args", "problem": " \tpublic void jarFileExtensionNeeded() throws Exception {\n \t\tthis.thrown.expect(IllegalStateException.class);\n \t\tthis.thrown.expectMessage(\"is not a JAR file\");\n\t\tthis.cli.jar(\"secure.groovy\");\n \t}\n }", "fixed": " \tpublic void jarFileExtensionNeeded() throws Exception {\n \t\tthis.thrown.expect(IllegalStateException.class);\n \t\tthis.thrown.expectMessage(\"is not a JAR file\");\n\t\tthis.cli.jar(\"secure.groovy\", \"data-jpa.groovy\");\n \t}\n }", "sourceBeforeFix": "this.cli.jar(\"secure.groovy\")", "sourceAfterFix": "this.cli.jar(\"secure.groovy\",\"data-jpa.groovy\")"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return b.toString();\n   }\n  private String formatPosition(String sourceName, int lineNumber) {\n     StringBuilder b = new StringBuilder();\n     if (sourceName != null) {\n       b.append(sourceName);", "fixed": "     return b.toString();\n   }\n  private static String formatPosition(String sourceName, int lineNumber) {\n     StringBuilder b = new StringBuilder();\n     if (sourceName != null) {\n       b.append(sourceName);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "a13c4373a5e57d322b143516b493e84f14909fec", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(12, tokens.size());\n     for (int i = 0; i < Math.min(sents.length, sentences.size()); i++) {\n       CoreMap sentence = sentences.get(i);", "fixed": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(9, tokens.size());\n     for (int i = 0; i < Math.min(sents.length, sentences.size()); i++) {\n       CoreMap sentence = sentences.get(i);", "sourceBeforeFix": "assertEquals(12,tokens.size())", "sourceAfterFix": "assertEquals(9,tokens.size())"}
{"fixCommitSHA1": "27fb87cfcea241c2d7961baf68e84ce97f2dee7a", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "       }\n       statsData.setLongStats(longStats);\n       statsObj.setStatsData(statsData);\n    } else if (columnType.equalsIgnoreCase(\"double\")) {\n       DoubleColumnStatsData doubleStats = new DoubleColumnStatsData();\n       doubleStats.setNumNullsIsSet(false);\n       doubleStats.setNumDVsIsSet(false);", "fixed": "       }\n       statsData.setLongStats(longStats);\n       statsObj.setStatsData(statsData);\n    } else if (columnType.equalsIgnoreCase(\"double\") || columnType.equalsIgnoreCase(\"float\")) {\n       DoubleColumnStatsData doubleStats = new DoubleColumnStatsData();\n       doubleStats.setNumNullsIsSet(false);\n       doubleStats.setNumDVsIsSet(false);", "sourceBeforeFix": "columnType.equalsIgnoreCase(\"double\")", "sourceAfterFix": "columnType.equalsIgnoreCase(\"double\") || columnType.equalsIgnoreCase(\"float\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"jms\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"jms\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "93a9fb352d11fb796964cbe4650b4a247d908b58", "projectName": "naver.pinpoint", "bugType": "Change Modifier", "problem": "         return 0;\n     }\n    private class ConnectorsArgumentValidator implements ArgumentValidator {\n         @Override\n         public boolean validate(Object[] args) {\n             if (args == null) {", "fixed": "         return 0;\n     }\n    private static class ConnectorsArgumentValidator implements ArgumentValidator {\n         @Override\n         public boolean validate(Object[] args) {\n             if (args == null) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface S3EndpointBuilder\n             extends\n                 S3EndpointConsumerBuilder, S3EndpointProducerBuilder {\n         default AdvancedS3EndpointBuilder advanced() {", "fixed": "     \n    public interface S3EndpointBuilder\n             extends\n                 S3EndpointConsumerBuilder, S3EndpointProducerBuilder {\n         default AdvancedS3EndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1e1ec95117cf4701f3df2530aaf7a7c4627599f3", "projectName": "facebook.presto", "bugType": "More Specific If", "problem": "             waitForData();\n         }\n        if ((!client.isFailed()) && (!client.isGone())) {\n             QueryResults results = client.isValid() ? client.current() : client.finalResults();\n             if (results.getColumns() == null) {\n                 errorChannel.printf(\"Query %s has no columns\\n\", results.getId());", "fixed": "             waitForData();\n         }\n        if ((!client.isFailed()) && (!client.isGone()) && (!client.isClosed())) {\n             QueryResults results = client.isValid() ? client.current() : client.finalResults();\n             if (results.getColumns() == null) {\n                 errorChannel.printf(\"Query %s has no columns\\n\", results.getId());", "sourceBeforeFix": "(!client.isFailed()) && (!client.isGone())", "sourceAfterFix": "(!client.isFailed()) && (!client.isGone()) && (!client.isClosed())"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwilioEndpointBuilder\n             extends\n                 TwilioEndpointConsumerBuilder, TwilioEndpointProducerBuilder {\n         default AdvancedTwilioEndpointBuilder advanced() {", "fixed": "     \n    public interface TwilioEndpointBuilder\n             extends\n                 TwilioEndpointConsumerBuilder, TwilioEndpointProducerBuilder {\n         default AdvancedTwilioEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4e24ea071ff17f2b98b47dd42dcb4a0fd0ac74e6", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": " import static com.hazelcast.internal.nearcache.NearCacheTestUtils.getBaseConfig;\n import static org.mockito.Mockito.mock;\nabstract class AbstractInvalidatorTest extends HazelcastTestSupport {\n     private Invalidator invalidator;\n     private Data key;", "fixed": " import static com.hazelcast.internal.nearcache.NearCacheTestUtils.getBaseConfig;\n import static org.mockito.Mockito.mock;\npublic abstract class AbstractInvalidatorTest extends HazelcastTestSupport {\n     private Invalidator invalidator;\n     private Data key;", "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10950-10974 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15804", "sourceAfterFix": "id=10804"}
{"fixCommitSHA1": "7ea3d0ec30b6b88358ca298a7e8e752a15dfbc2f", "projectName": "apache.camel", "bugType": "Change Caller in Function Call", "problem": "         if (configuration.getSslContextParameters() != null) {\n             SslFilter filter = new SslFilter(configuration.getSslContextParameters().createSSLContext(), configuration.isAutoStartTls());\n             filter.setUseClientMode(true);\n            acceptor.getFilterChain().addFirst(\"sslFilter\", filter);\n         }\n         configureCodecFactory(\"Mina2Producer\", connector);\n         connector.setConnectTimeoutMillis(timeout);", "fixed": "         if (configuration.getSslContextParameters() != null) {\n             SslFilter filter = new SslFilter(configuration.getSslContextParameters().createSSLContext(), configuration.isAutoStartTls());\n             filter.setUseClientMode(true);\n            connector.getFilterChain().addFirst(\"sslFilter\", filter);\n         }\n         configureCodecFactory(\"Mina2Producer\", connector);\n         connector.setConnectTimeoutMillis(timeout);", "sourceBeforeFix": "acceptor.getFilterChain()", "sourceAfterFix": "connector.getFilterChain()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "b8ce4659cfb5ebbd26566cf5eef5c3181ef9f1d9", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "         public long read(ByteBuffer buffer) throws IOException {\n            chunk = new byte[buffer.capacity() - 10];\n             int read = -1;", "fixed": "         public long read(ByteBuffer buffer) throws IOException {\n            chunk = new byte[buffer.remaining() - 10];\n             int read = -1;", "sourceBeforeFix": "buffer.capacity()", "sourceAfterFix": "buffer.remaining()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "64bd9a71a67b786c99888d97b3e3f1c1ab069e69", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         assertMockEndpointsSatisfied();\n        Thread.sleep(1000);\n         assertEquals(3, callback.getData().size());", "fixed": "         assertMockEndpointsSatisfied();\n        Thread.sleep(2000);\n         assertEquals(3, callback.getData().size());", "sourceBeforeFix": "Thread.sleep(1000)", "sourceAfterFix": "Thread.sleep(2000)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "fixed": " \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "9420ad23cb25d0b48ba5b1f124437176a152f3d5", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "     public void read(ByteBuffer inBuffer) throws Exception {\n         while (inBuffer.hasRemaining()) {\n             if (packet == null) {\n                packet = new Packet(ioService.getPortableContext());\n             }\n             boolean complete = packet.readFrom(inBuffer);\n             if (complete) {", "fixed": "     public void read(ByteBuffer inBuffer) throws Exception {\n         while (inBuffer.hasRemaining()) {\n             if (packet == null) {\n                packet = new Packet();\n             }\n             boolean complete = packet.readFrom(inBuffer);\n             if (complete) {", "sourceBeforeFix": "new Packet(ioService.getPortableContext())", "sourceAfterFix": "new Packet()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glGenTextures (int n, int[] textures, int offset) {\n\t\tGL.glGenTexturesEXT(n, toBuffer(textures, offset), 0);\n \t}\n \tpublic void glGetIntegerv (int pname, int[] params, int offset) {", "fixed": " \t}\n \tpublic void glGenTextures (int n, int[] textures, int offset) {\n\t\tGL.glGenTextures(n, toBuffer(textures, offset), 0);\n \t}\n \tpublic void glGetIntegerv (int pname, int[] params, int offset) {", "sourceBeforeFix": "GL.glPolygonOffsetEXT(factor,units)", "sourceAfterFix": "GL.glPolygonOffset(factor,units)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fe992fa69dd155ed3a98c0848026d0fd35aa6e57", "projectName": "antlr.antlr4", "bugType": "Change Identifier Used", "problem": " \t\t\thaveOutputDir = true;\n \t\t\tif (outDir.exists() && !outDir.isDirectory()) {\n \t\t\t\terrMgr.toolError(ErrorType.OUTPUT_DIR_IS_FILE, outputDirectory);\n\t\t\t\tlibDirectory = \".\";\n \t\t\t}\n \t\t}\n \t\telse {", "fixed": " \t\t\thaveOutputDir = true;\n \t\t\tif (outDir.exists() && !outDir.isDirectory()) {\n \t\t\t\terrMgr.toolError(ErrorType.OUTPUT_DIR_IS_FILE, outputDirectory);\n\t\t\t\toutputDirectory = \".\";\n \t\t\t}\n \t\t}\n \t\telse {", "sourceBeforeFix": "libDirectory=\".\"", "sourceAfterFix": "outputDirectory=\".\""}
{"fixCommitSHA1": "f20b7f01e498c2f2f0e17a86e238f68a9e9460e4", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "             config = new DefaultAsyncHttpClientConfig.Builder().build();\n             client = new DefaultAsyncHttpClient(config);\n         } else {\n            client = new DefaultAsyncHttpClient();\n         }\n         return client;\n     }", "fixed": "             config = new DefaultAsyncHttpClientConfig.Builder().build();\n             client = new DefaultAsyncHttpClient(config);\n         } else {\n            client = new DefaultAsyncHttpClient(config);\n         }\n         return client;\n     }", "sourceBeforeFix": "new DefaultAsyncHttpClient()", "sourceAfterFix": "new DefaultAsyncHttpClient(config)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedIrcEndpointBuilder\n             extends\n                 AdvancedIrcEndpointConsumerBuilder, AdvancedIrcEndpointProducerBuilder {\n         default IrcEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedIrcEndpointBuilder\n             extends\n                 AdvancedIrcEndpointConsumerBuilder, AdvancedIrcEndpointProducerBuilder {\n         default IrcEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "bafb1f877934f826d5f74f9f33e824dd1aa30432", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         return getInputFactory().createXMLStreamReader(in);\n     }\n    @Converter\n     public XMLEventReader createXMLEventReader(InputStream in) throws XMLStreamException {\n         return getInputFactory().createXMLEventReader(in);\n     }", "fixed": "         return getInputFactory().createXMLStreamReader(in);\n     }\n    @Deprecated\n     public XMLEventReader createXMLEventReader(InputStream in) throws XMLStreamException {\n         return getInputFactory().createXMLEventReader(in);\n     }", "sourceBeforeFix": "@Converter", "sourceAfterFix": "@Deprecated"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "23efcad891c91fc131ed4729c734ff6b122197df", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnExecution() throws Exception {\n\t\tString processDefinitionId = deployOneTaskProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal CyclicBarrier startBarrier = new CyclicBarrier(2);", "fixed": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnExecution() throws Exception {\n\t\tString processDefinitionId = deployOneTaskTestProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal CyclicBarrier startBarrier = new CyclicBarrier(2);", "sourceBeforeFix": "deployOneTaskProcess()", "sourceAfterFix": "deployOneTaskTestProcess()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.error(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "fixed": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "sourceBeforeFix": "LOG.error(\"Ignoring duplicate class \" + className)", "sourceAfterFix": "LOG.warn(\"Ignoring duplicate class \" + className)"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    private static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b669bd30cef473ddf2c0c0318652a938d8d3428", "projectName": "stanfordnlp.CoreNLP", "bugType": "Wrong Function Name", "problem": "   private static final Redwood.RedwoodChannels log = Redwood.channels(StanfordCoreNLPClient.class);\n   \nprivate static final Pattern URL_PATTERN = Pattern.compile(\"(?:(https?):\n   /**\n    * Information on how to connect to a backend.\n    * The semantics of one of these objects is as follows:\n    * <ul>\n    *   <li>It should define a hostname and port to connect to.</li>\n    *   <li>This represents ONE thread on the remote server. The client should", "fixed": "   private static final Redwood.RedwoodChannels log = Redwood.channels(StanfordCoreNLPClient.class);\n   \nprivate static final Pattern URL_PATTERN = Pattern.compile(\"(?:(https?):\n   /**\n    * Information on how to connect to a backend.\n    * The semantics of one of these objects is as follows:\n   *\n    * <ul>\n    *   <li>It should define a hostname and port to connect to.</li>\n    *   <li>This represents ONE thread on the remote server. The client should", "sourceBeforeFix": "log.warn(\"Could not annotate via server! Trying to annotate locally...\",t)", "sourceAfterFix": "log.err(\"Could not annotate via server! Trying to annotate locally...\",t)"}
{"fixCommitSHA1": "3d7e389a85a9c316be6d15754edda832d789e25a", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "         try {\n             pathHandler.addPrefixPath(ErrorContextHandler.ERROR_CONTEXT, ErrorContextHandler.createErrorContext(consoleSlot));\n         } catch (ModuleLoadException e) {\n            ROOT_LOGGER.error(consoleSlot == null ? \"main\" : consoleSlot);\n         }\n         ManagementRootConsoleRedirectHandler rootConsoleRedirectHandler = new ManagementRootConsoleRedirectHandler(consoleHandler);", "fixed": "         try {\n             pathHandler.addPrefixPath(ErrorContextHandler.ERROR_CONTEXT, ErrorContextHandler.createErrorContext(consoleSlot));\n         } catch (ModuleLoadException e) {\n            ROOT_LOGGER.errorContextModuleNotFound(consoleSlot == null ? \"main\" : consoleSlot);\n         }\n         ManagementRootConsoleRedirectHandler rootConsoleRedirectHandler = new ManagementRootConsoleRedirectHandler(consoleHandler);", "sourceBeforeFix": "ROOT_LOGGER.error(consoleSlot == null ? \"main\" : consoleSlot)", "sourceAfterFix": "ROOT_LOGGER.errorContextModuleNotFound(consoleSlot == null ? \"main\" : consoleSlot)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "93c745c53b03deda947da3358b8948c5d539e05e", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Caller in Function Call", "problem": "      * @since 2.0.0\n      */\n     public boolean hasResponseFilters() {\n        return !requestFilters.isEmpty();\n     }\n     /**", "fixed": "      * @since 2.0.0\n      */\n     public boolean hasResponseFilters() {\n        return !responseFilters.isEmpty();\n     }\n     /**", "sourceBeforeFix": "requestFilters.isEmpty()", "sourceAfterFix": "responseFilters.isEmpty()"}
{"fixCommitSHA1": "cd913af4412ea58598043b4917156539fd905612", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     }\n     public void delete(Node node, Input input, String extractorId) throws IOException, APIException {\n        api.path(resource.removeExtractor(input.getId(), extractorId))\n                 .node(node)\n                 .expect(Http.Status.NO_CONTENT)\n                 .execute();", "fixed": "     }\n     public void delete(Node node, Input input, String extractorId) throws IOException, APIException {\n        api.path(resource.terminate(input.getId(), extractorId))\n                 .node(node)\n                 .expect(Http.Status.NO_CONTENT)\n                 .execute();", "sourceBeforeFix": "resource.removeExtractor(input.getId(),extractorId)", "sourceAfterFix": "resource.terminate(input.getId(),extractorId)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedOptaPlannerEndpointBuilder\n             extends\n                 AdvancedOptaPlannerEndpointConsumerBuilder, AdvancedOptaPlannerEndpointProducerBuilder {\n         default OptaPlannerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedOptaPlannerEndpointBuilder\n             extends\n                 AdvancedOptaPlannerEndpointConsumerBuilder, AdvancedOptaPlannerEndpointProducerBuilder {\n         default OptaPlannerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "fixed": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "85f75a5999cfeabb82f24f1f3c4cd998a4c5b348", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\n \tpublic void waitUntilFinished() throws InterruptedException {\n \t\tsynchronized (progressLock) {\n\t\t\twhile (!state.isGloballyTerminalState()) {\n \t\t\t\tprogressLock.wait();\n \t\t\t}\n \t\t}", "fixed": " \t\n \tpublic void waitUntilFinished() throws InterruptedException {\n \t\tsynchronized (progressLock) {\n\t\t\twhile (!state.isTerminalState()) {\n \t\t\t\tprogressLock.wait();\n \t\t\t}\n \t\t}", "sourceBeforeFix": "state.isGloballyTerminalState()", "sourceAfterFix": "state.isTerminalState()"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean touchDragged (int screenX, int screenY, int pointer) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].touchDragged(screenX, screenY, pointer)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean touchDragged (int screenX, int screenY, int pointer) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).touchDragged(screenX, screenY, pointer)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "186a9d090de21e19ff4e4f7d1eae1aeaa207c0ea", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Binary Operator", "problem": "     }\n     private void computeRequestCharset() {\n        if (request.charset != null) {\n             try {\n                 final String contentType = request.headers.getFirstValue(\"Content-Type\");\n                 if (contentType != null) {", "fixed": "     }\n     private void computeRequestCharset() {\n        if (request.charset == null) {\n             try {\n                 final String contentType = request.headers.getFirstValue(\"Content-Type\");\n                 if (contentType != null) {", "sourceBeforeFix": "request.charset != null", "sourceAfterFix": "request.charset == null"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DockerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDockerEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DockerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDockerEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "24d4f1a7133defb3bf9a8726cfb864004a5876ca", "projectName": "google.closure-compiler", "bugType": "Same Function More Args", "problem": "     try {\n       Files.write(\"\", new File(reportPath), UTF_8);\n     } catch (IOException e) {\n      compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath));\n     }\n   }", "fixed": "     try {\n       Files.write(\"\", new File(reportPath), UTF_8);\n     } catch (IOException e) {\n      compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath, e.getMessage()));\n     }\n   }", "sourceBeforeFix": "JSError.make(REPORT_PATH_IO_ERROR,reportPath)", "sourceAfterFix": "JSError.make(REPORT_PATH_IO_ERROR,reportPath,e.getMessage())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5ba6ded7e01cc902e75403dac6cb5c5f9d74f74d", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       if (CommonUtils.isLocalHost(address) && Configuration\n           .getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED) && !NettyUtils\n           .isDomainSocketSupported(address)) {\n        LOG.info(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n         return LocalFilePacketWriter.create(context, address, blockId, options);\n       } else {\n        LOG.info(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n             NetworkAddressUtils.getClientHostName());\n         return NettyPacketWriter\n             .create(context, address, blockId, blockSize, Protocol.RequestType.ALLUXIO_BLOCK,", "fixed": "       if (CommonUtils.isLocalHost(address) && Configuration\n           .getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED) && !NettyUtils\n           .isDomainSocketSupported(address)) {\n        LOG.debug(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n         return LocalFilePacketWriter.create(context, address, blockId, options);\n       } else {\n        LOG.debug(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n             NetworkAddressUtils.getClientHostName());\n         return NettyPacketWriter\n             .create(context, address, blockId, blockSize, Protocol.RequestType.ALLUXIO_BLOCK,", "sourceBeforeFix": "LOG.info(\"Creating short circuit output stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit output stream for block {} @ {}\",blockId,address)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedWebhookEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default WebhookEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedWebhookEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default WebhookEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "ca256ae2a033fd8cb76abac8563fad8fe8c988ae", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "     if(beans != null) {\n      compositeElResolver.add(new ReadonlyMapELResolver(beans));\n     } else {\n       compositeElResolver.add(new ApplicationContextElResolver(applicationContext));", "fixed": "     if(beans != null) {\n      compositeElResolver.add(new ReadOnlyMapELResolver(beans));\n     } else {\n       compositeElResolver.add(new ApplicationContextElResolver(applicationContext));", "sourceBeforeFix": "new ReadonlyMapELResolver(beans)", "sourceAfterFix": "new ReadOnlyMapELResolver(beans)"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "      * @return string AST.\n      */\n     private static String printTree(DetailAST ast) {\n        final StringBuilder messageBuilder = new StringBuilder();\n         DetailAST node = ast;\n         while (node != null) {\n             messageBuilder.append(getIndentation(node))", "fixed": "      * @return string AST.\n      */\n     private static String printTree(DetailAST ast) {\n        final StringBuilder messageBuilder = new StringBuilder(1024);\n         DetailAST node = ast;\n         while (node != null) {\n             messageBuilder.append(getIndentation(node))", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}
{"fixCommitSHA1": "198d4ef1420ba1c306b33cd48061c37d79fc8098", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t\t\tm_address, -dt);\nreturn (timeNow + 2000L);\n \t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\"gave up waiting for query reply from device {}\", m_address);\n \t\t\t\t}\n \t\t\t}\nQEntry qe = m_requestQueue.poll();", "fixed": " \t\t\t\t\t\t\tm_address, -dt);\nreturn (timeNow + 2000L);\n \t\t\t\t} else {\n\t\t\t\t\tlogger.debug(\"gave up waiting for query reply from device {}\", m_address);\n \t\t\t\t}\n \t\t\t}\nQEntry qe = m_requestQueue.poll();", "sourceBeforeFix": "logger.warn(\"gave up waiting for query reply from device {}\",m_address)", "sourceAfterFix": "logger.debug(\"gave up waiting for query reply from device {}\",m_address)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bbb27cf272ba5d2dc74f8f21d1d3a92486e27ee1", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " /*\n * Copyright 2012-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "fixed": " /*\n * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "sourceBeforeFix": "HornetQAutoConfiguration.class", "sourceAfterFix": "HornetQEmbeddedConfigurationFactory.class"}
{"fixCommitSHA1": "a41b9673560ac361710e48073a32500b5780497d", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             conn.setConnectTimeout(TIMEOUT * 2);\n             conn.setReadTimeout(TIMEOUT * 2);\n             in = new BufferedInputStream(conn.getInputStream());\n        } catch (IOException ignored) {\n             ignore(ignored);\n         } finally {\n             closeResource(in);", "fixed": "             conn.setConnectTimeout(TIMEOUT * 2);\n             conn.setReadTimeout(TIMEOUT * 2);\n             in = new BufferedInputStream(conn.getInputStream());\n        } catch (Exception ignored) {\n             ignore(ignored);\n         } finally {\n             closeResource(in);", "sourceBeforeFix": "IOException ignored", "sourceAfterFix": "Exception ignored"}
{"fixCommitSHA1": "0f6962288494b4b53c7f5d9d492c1d748d2fc976", "projectName": "Graylog2.graylog2-server", "bugType": "Same Function More Args", "problem": "         when(message.getField(eq(dummyField))).thenReturn(dummyValue);\n         when(message.getFieldNames()).thenReturn(Sets.newHashSet(dummyField));\n        final StreamRouterEngine engine = newEngine(Lists.newArrayList(stream1));\n         final List<Stream> result = engine.match(message);", "fixed": "         when(message.getField(eq(dummyField))).thenReturn(dummyValue);\n         when(message.getFieldNames()).thenReturn(Sets.newHashSet(dummyField));\n        final StreamRouterEngine engine = newEngine(Lists.newArrayList(stream1, stream2));\n         final List<Stream> result = engine.match(message);", "sourceBeforeFix": "Lists.newArrayList(stream1)", "sourceAfterFix": "Lists.newArrayList(stream1,stream2)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bcb6eeec1d978d6d572ebec875d34dc64aeb5121", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.intValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "fixed": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.floatValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "sourceBeforeFix": "n.intValue()", "sourceAfterFix": "n.floatValue()"}
