{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     public TaskServlet(Iterable<Task> tasks) {\n         final ImmutableMap.Builder<String, Task> builder = ImmutableMap.builder();\n         for (Task task : tasks) {\n            builder.put(\"/tasks/\" + task.getName(), task);\n         }\n         this.tasks = builder.build();\n     }", "fixed": "     public TaskServlet(Iterable<Task> tasks) {\n         final ImmutableMap.Builder<String, Task> builder = ImmutableMap.builder();\n         for (Task task : tasks) {\n            builder.put(\"/\" + task.getName(), task);\n         }\n         this.tasks = builder.build();\n     }", "sourceBeforeFix": "req.getServletPath()", "sourceAfterFix": "req.getPathInfo()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "678913db7377dc67b3cbe92f6c9c9e401b777d97", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 else {\n                     callback.process(entry.getFileStatus(), entry.getBlockLocations());\n                 }\n                if (future.isCancelled()) {\n                     return;\n                 }\n             }", "fixed": "                 else {\n                     callback.process(entry.getFileStatus(), entry.getBlockLocations());\n                 }\n                if (future.isDone()) {\n                     return;\n                 }\n             }", "sourceBeforeFix": "future.isCancelled()", "sourceAfterFix": "future.isDone()"}
{"fixCommitSHA1": "2b6d45508192c28f6b957a1ec18eb4fc075f9a97", "projectName": "Alluxio.alluxio", "bugType": "Same Function Swap Args", "problem": "     InetSocketAddress workerAddress = BlockWorkerUtils.getWorkerAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(workerAddress);\n    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, 10001));\n     workerAddress = BlockWorkerUtils.getWorkerAddress(mNullTachyonConf);\n     Assert.assertNotNull(workerAddress);\n    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, defaultPort));\n   }\n }", "fixed": "     InetSocketAddress workerAddress = BlockWorkerUtils.getWorkerAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(workerAddress);\n    Assert.assertEquals(new InetSocketAddress(defaultHostname, 10001), workerAddress);\n     workerAddress = BlockWorkerUtils.getWorkerAddress(mNullTachyonConf);\n     Assert.assertNotNull(workerAddress);\n    Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), workerAddress);\n   }\n }", "sourceBeforeFix": "Assert.assertEquals(masterAddress,new InetSocketAddress(\"RemoteMaster1\",10000))", "sourceAfterFix": "Assert.assertEquals(new InetSocketAddress(\"RemoteMaster1\",10000),masterAddress)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n    logger.info(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);", "fixed": "    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);", "sourceBeforeFix": "logger.info(\"Creating extern file for exports\")", "sourceAfterFix": "logger.fine(\"Creating extern file for exports\")"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResponseWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "e981384cc21ca3c1958acd4b494a6ddd147c0a60", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "             config.setProxyList(modelconf.get(CommonAttributes.PROXY_LIST).asString());\n         }\n         if (modelconf.hasDefined(CommonAttributes.PROXY_URL))\n            config.setProxyList(modelconf.get(CommonAttributes.PROXY_URL).asString());\n         if (modelconf.has(CommonAttributes.ADVERTISE_SECURITY_KEY))\n            config.setProxyList(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString());\n         if (modelconf.hasDefined(CommonAttributes.EXCLUDED_CONTEXTS)) {", "fixed": "             config.setProxyList(modelconf.get(CommonAttributes.PROXY_LIST).asString());\n         }\n         if (modelconf.hasDefined(CommonAttributes.PROXY_URL))\n            config.setProxyURL(modelconf.get(CommonAttributes.PROXY_URL).asString());\n         if (modelconf.has(CommonAttributes.ADVERTISE_SECURITY_KEY))\n            config.setAdvertiseSecurityKey(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString());\n         if (modelconf.hasDefined(CommonAttributes.EXCLUDED_CONTEXTS)) {", "sourceBeforeFix": "config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString())", "sourceAfterFix": "config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString())"}
{"fixCommitSHA1": "bc53fc00817adf77d0e25d07ae0aaea0f16dddd7", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     return mBlockIdsOnTiers;\n   }", "fixed": "    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\");\n     return mBlockIdsOnTiers;\n   }", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "      * Loads the import control file from a {@link InputSource}.\n      * @param source the source to load from.\n      * @param uri uri of the source being loaded.\n     * @return the root {@link PkgControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n    private static PkgControl load(final InputSource source,\n         final URI uri) throws CheckstyleException {\n         try {\n             final ImportControlLoader loader = new ImportControlLoader();", "fixed": "      * Loads the import control file from a {@link InputSource}.\n      * @param source the source to load from.\n      * @param uri uri of the source being loaded.\n     * @return the root {@link ImportControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n    private static ImportControl load(final InputSource source,\n         final URI uri) throws CheckstyleException {\n         try {\n             final ImportControlLoader loader = new ImportControlLoader();", "sourceBeforeFix": "new PkgControl(stack.peek(),name,regex)", "sourceAfterFix": "new ImportControl(stack.peek(),name,regex)"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "fixed": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "sourceBeforeFix": "factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResponseWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t *\n \t * @return Future which is completed when the rpc endpoint has been terminated.\n \t */\n\tpublic CompletableFuture<Boolean> getTerminationFuture() {\n \t\treturn rpcServer.getTerminationFuture();\n \t}", "fixed": " \t *\n \t * @return Future which is completed when the rpc endpoint has been terminated.\n \t */\n\tpublic CompletableFuture<Void> getTerminationFuture() {\n \t\treturn rpcServer.getTerminationFuture();\n \t}", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          */\n         private static final long serialVersionUID = -1021880396046355863L;\n        public ReloadAction() {\n             super(\"Reload Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_R);\n         }", "fixed": "          */\n         private static final long serialVersionUID = -1021880396046355863L;\n        ReloadAction() {\n             super(\"Reload Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_R);\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMQTTEndpointBuilder\n             extends\n                 AdvancedMQTTEndpointConsumerBuilder, AdvancedMQTTEndpointProducerBuilder {\n         default MQTTEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMQTTEndpointBuilder\n             extends\n                 AdvancedMQTTEndpointConsumerBuilder, AdvancedMQTTEndpointProducerBuilder {\n         default MQTTEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSplunkEndpointBuilder\n             extends\n                 AdvancedSplunkEndpointConsumerBuilder, AdvancedSplunkEndpointProducerBuilder {\n         default SplunkEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSplunkEndpointBuilder\n             extends\n                 AdvancedSplunkEndpointConsumerBuilder, AdvancedSplunkEndpointProducerBuilder {\n         default SplunkEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "b8f2c536ba0255ac3456b4a8a0180a0cfc60fde2", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "  * {@link JsonIgnoreType}.)\n  */\n public class JacksonMessageBodyProvider extends JacksonJaxbJsonProvider {\n    private static final Logger LOGGER = LoggerFactory.getLogger(JsonProcessingExceptionMapper.class);\n     ", "fixed": "  * {@link JsonIgnoreType}.)\n  */\n public class JacksonMessageBodyProvider extends JacksonJaxbJsonProvider {\n    private static final Logger LOGGER = LoggerFactory.getLogger(JacksonMessageBodyProvider.class);\n     ", "sourceBeforeFix": "JsonProcessingExceptionMapper.class", "sourceAfterFix": "JacksonMessageBodyProvider.class"}
{"fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertFalse(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "fixed": "         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}
{"fixCommitSHA1": "afe6dc8a16e2bf30997cca8355aad09f2766ea0b", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "     @Override\n     public long getRemainingLeaseTime() {\n        if (expirationTime == Long.MAX_VALUE && expirationTime < 0) {\n             return Long.MAX_VALUE;\n         }\n         long now = Clock.currentTimeMillis();", "fixed": "     @Override\n     public long getRemainingLeaseTime() {\n        if (expirationTime == Long.MAX_VALUE || expirationTime < 0) {\n             return Long.MAX_VALUE;\n         }\n         long now = Clock.currentTimeMillis();", "sourceBeforeFix": "expirationTime == Long.MAX_VALUE && expirationTime < 0", "sourceAfterFix": "expirationTime == Long.MAX_VALUE || expirationTime < 0"}
{"fixCommitSHA1": "2230a91829f39b72973e6fecf275d9c664911ca0", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n\t\tthrow new CompilerException(sourceName, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{", "fixed": " \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n\t\tthrow new CompilerException(sourcePath, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{", "sourceBeforeFix": "new CompilerException(sourceName,e.line,e.getCause())", "sourceAfterFix": "new CompilerException(sourcePath,e.line,e.getCause())"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResultWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "fixed": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f647b984441aadb2c378f3152fc6b0f62d1e92bf", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             break;\n         case INFO:\n             if (log.isInfoEnabled()) {\n                log.debug(message, exception);\n             }\n             break;\n         case TRACE:", "fixed": "             break;\n         case INFO:\n             if (log.isInfoEnabled()) {\n                log.info(message, exception);\n             }\n             break;\n         case TRACE:", "sourceBeforeFix": "log.debug(message,exception)", "sourceAfterFix": "log.info(message,exception)"}
{"fixCommitSHA1": "93facb514e158589060eacc69e50cc7ff76082b2", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (keys.isEmpty()) {\n             return;\n         }\n        final Collection<Data> dataKeys = convertKeysToData(keys);\n         if (replaceExistingValues) {\n             invalidateNearCache(dataKeys);\n         }", "fixed": "         if (keys.isEmpty()) {\n             return;\n         }\n        final List<Data> dataKeys = convertKeysToData(keys);\n         if (replaceExistingValues) {\n             invalidateNearCache(dataKeys);\n         }", "sourceBeforeFix": "Collection<Data>", "sourceAfterFix": "List<Data>"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Creates a configuration that is functionally close to that in the docs.\n      * @param verbose verbose mode\n      */\n    private DefaultConfiguration createConfig(boolean verbose) {\n         final DefaultConfiguration checkConfig =\n             createCheckConfig(FileTabCharacterCheck.class);\n         checkConfig.addAttribute(\"eachLine\", Boolean.toString(verbose));", "fixed": "      * Creates a configuration that is functionally close to that in the docs.\n      * @param verbose verbose mode\n      */\n    private static DefaultConfiguration createConfig(boolean verbose) {\n         final DefaultConfiguration checkConfig =\n             createCheckConfig(FileTabCharacterCheck.class);\n         checkConfig.addAttribute(\"eachLine\", Boolean.toString(verbose));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "d7b19bfc78039804e5460a01e6d5939d2f4ce5f7", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    */\n   public int free(TachyonURI path) throws IOException {\n     try {\n      mTfs.free(mTfs.open(path));\n       System.out.println(path + \" was successfully freed from memory.\");\n       return 0;\n     } catch (InvalidPathException ioe) {", "fixed": "    */\n   public int free(TachyonURI path) throws IOException {\n     try {\n      mTfs.free(mTfs.open(path), true);\n       System.out.println(path + \" was successfully freed from memory.\");\n       return 0;\n     } catch (InvalidPathException ioe) {", "sourceBeforeFix": "mTfs.delete(mTfs.open(path))", "sourceAfterFix": "mTfs.delete(mTfs.open(path),true)"}
{"fixCommitSHA1": "9e76b5319ef9790d8bce27eacbc2aff4ba312cac", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         try {\n             InetAddress address = resolver.resolve(\"10.0.0.1\").syncUninterruptibly().getNow();\n            assertEquals(\"10.0.0.1\", address.getHostName());\n         } finally {\n             resolver.close();\n         }", "fixed": "         try {\n             InetAddress address = resolver.resolve(\"10.0.0.1\").syncUninterruptibly().getNow();\n            assertEquals(\"10.0.0.1\", address.getHostAddress());\n         } finally {\n             resolver.close();\n         }", "sourceBeforeFix": "address.getHostName()", "sourceAfterFix": "address.getHostAddress()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "996cadb3e79b248d2f2b3e584a1ea9e9f77fc1c2", "projectName": "libgdx.libgdx", "bugType": "Change Caller in Function Call", "problem": " \t}\n \tpublic float getPrefWidth () {\n\t\treturn Math.max(super.getPrefWidth(), titleLabel.getPrefWidth() + getPadLeft() + getPadRight());\n \t}\n \tpublic Table getTitleTable () {", "fixed": " \t}\n \tpublic float getPrefWidth () {\n\t\treturn Math.max(super.getPrefWidth(), titleTable.getPrefWidth() + getPadLeft() + getPadRight());\n \t}\n \tpublic Table getTitleTable () {", "sourceBeforeFix": "titleLabel.getPrefWidth()", "sourceAfterFix": "titleTable.getPrefWidth()"}
{"fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "projectName": "cucumber.cucumber-jvm", "bugType": "Wrong Function Name", "problem": "     }\n    @Cucumber.Options(monochrome = false)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n     }\n    @Cucumber.Options(monochrome = true)\n     static class BaseClassWithMonoChromeFalse {\n     }", "fixed": "     }\n    @Cucumber.Options(monochrome = true)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n     }\n    @Cucumber.Options(monochrome = false)\n     static class BaseClassWithMonoChromeFalse {\n     }", "sourceBeforeFix": "assertFalse(runtimeOptions.isMonochrome())", "sourceAfterFix": "assertTrue(runtimeOptions.isMonochrome())"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(2000L)\r\n                     .batchSize(100)\r", "fixed": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(500L)\r\n                     .batchSize(100)\r", "sourceBeforeFix": "result.expectedMessageCount(3)", "sourceAfterFix": "result.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedIgniteQueueEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default IgniteQueueEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedIgniteQueueEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default IgniteQueueEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8c0d148cd20199c647b2550ae51068f531ba42a3", "projectName": "apache.hive", "bugType": "Change Caller in Function Call", "problem": "       }\n       node = super.visitCall(call);\n       if (node != call) {\n        node = RexUtil.simplify(rexBuilder, node);\n       }\n       return node;\n     }", "fixed": "       }\n       node = super.visitCall(call);\n       if (node != call) {\n        node = HiveRexUtil.simplify(rexBuilder, node);\n       }\n       return node;\n     }", "sourceBeforeFix": "RexUtil.simplify(rexBuilder,node)", "sourceAfterFix": "HiveRexUtil.simplify(rexBuilder,node)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.set(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "fixed": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.get(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "7e894043c7c2cb8631d3d1752286eed8f9484010", "projectName": "wildfly.wildfly", "bugType": "Change Caller in Function Call", "problem": "         TransformationDescription.Tools.register(builder120.build(), subsystem, ModelVersion.create(1, 3, 0));\n         ResourceTransformationDescriptionBuilder builder200 = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n         ResourceAdapterResourceDefinition.registerTransformers200(builder200);\n        TransformationDescription.Tools.register(builder120.build(), subsystem, ModelVersion.create(2, 0, 0));\n     }\n }", "fixed": "         TransformationDescription.Tools.register(builder120.build(), subsystem, ModelVersion.create(1, 3, 0));\n         ResourceTransformationDescriptionBuilder builder200 = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n         ResourceAdapterResourceDefinition.registerTransformers200(builder200);\n        TransformationDescription.Tools.register(builder200.build(), subsystem, ModelVersion.create(2, 0, 0));\n     }\n }", "sourceBeforeFix": "builder120.build()", "sourceAfterFix": "builder200.build()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedVertxEndpointBuilder\n             extends\n                 AdvancedVertxEndpointConsumerBuilder, AdvancedVertxEndpointProducerBuilder {\n         default VertxEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedVertxEndpointBuilder\n             extends\n                 AdvancedVertxEndpointConsumerBuilder, AdvancedVertxEndpointProducerBuilder {\n         default VertxEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0e371e64ca957e61a41309c7821cfff946274cbd", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t} else if (attr.equals(\"COLOR\")) {\r\n \t\t\t\tvertexAttributes.add(VertexAttribute.ColorUnpacked());\r\n \t\t\t} else if (attr.equals(\"COLORPACKED\")) {\r\n\t\t\t\tvertexAttributes.add(VertexAttribute.Color());\r\n \t\t\t} else if (attr.equals(\"TANGENT\")) {\r\n \t\t\t\tvertexAttributes.add(VertexAttribute.Tangent());\r\n \t\t\t} else if (attr.equals(\"BINORMAL\")) {\r", "fixed": " \t\t\t} else if (attr.equals(\"COLOR\")) {\r\n \t\t\t\tvertexAttributes.add(VertexAttribute.ColorUnpacked());\r\n \t\t\t} else if (attr.equals(\"COLORPACKED\")) {\r\n\t\t\t\tvertexAttributes.add(VertexAttribute.ColorPacked());\r\n \t\t\t} else if (attr.equals(\"TANGENT\")) {\r\n \t\t\t\tvertexAttributes.add(VertexAttribute.Tangent());\r\n \t\t\t} else if (attr.equals(\"BINORMAL\")) {\r", "sourceBeforeFix": "VertexAttribute.Color()", "sourceAfterFix": "VertexAttribute.ColorPacked()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testVarArgs1() {", "fixed": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testVarArgs1() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "8636f65b992322008bb987409af0dd97dec3b95f", "projectName": "jersey.jersey", "bugType": "Less Specific If", "problem": "             final List<String> tempLibNames = new LinkedList<>();\n             for (ModuleInfo moduleInfo : appInfo.getModuleInfos()) {\n                 final String jarName = moduleInfo.getName();\n                if (jarName.endsWith(\".jar\")) {\n                     final String moduleName = jarName.substring(0, jarName.length() - 4);\n                     tempLibNames.add(moduleName);\n                     final Object bundleDescriptor = moduleInfo.getMetaData(EjbBundleDescriptorImpl.class.getName());", "fixed": "             final List<String> tempLibNames = new LinkedList<>();\n             for (ModuleInfo moduleInfo : appInfo.getModuleInfos()) {\n                 final String jarName = moduleInfo.getName();\n                if (jarName.endsWith(\".jar\") || jarName.endsWith(\".war\")) {\n                     final String moduleName = jarName.substring(0, jarName.length() - 4);\n                     tempLibNames.add(moduleName);\n                     final Object bundleDescriptor = moduleInfo.getMetaData(EjbBundleDescriptorImpl.class.getName());", "sourceBeforeFix": "jarName.endsWith(\".jar\")", "sourceAfterFix": "jarName.endsWith(\".jar\") || jarName.endsWith(\".war\")"}
{"fixCommitSHA1": "12fc9a2b54118418712e3817bed82d52b8701244", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     }\n    static class writer {\n \t\tpublic static void write(String line)\n \t\t{", "fixed": "     }\n    static class otherWriter {\n \t\tpublic static void write(String line)\n \t\t{", "sourceBeforeFix": "writer.write(line)", "sourceAfterFix": "otherWriter.write(line)"}
{"fixCommitSHA1": "cade2271924f42b35da72efa4ad6b2eebc9875cd", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Modifier", "problem": "         if (words.length < 3) {\n           System.err.printf(\"SpanishVerbStripper: adding words to dict, missing fields, ignoring line: %s%n\", line);\n         } else {\n          dict.put(words[0], words[2]);\n         }\n       }\n     } catch (UnsupportedEncodingException e) {", "fixed": "         if (words.length < 3) {\n           System.err.printf(\"SpanishVerbStripper: adding words to dict, missing fields, ignoring line: %s%n\", line);\n         } else {\n          dictionary.put(words[0], words[2]);\n         }\n       }\n     } catch (UnsupportedEncodingException e) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @param from The element to copy.\n \t * @return A copy of the given element.\n \t */\n\tpublic T createCopy(T from);\n \t/**\n \t * Creates a copy from the given element, storing the copied result in the given target element.", "fixed": " \t * @param from The element to copy.\n \t * @return A copy of the given element.\n \t */\n\tpublic abstract T createCopy(T from);\n \t/**\n \t * Creates a copy from the given element, storing the copied result in the given target element.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNano(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "fixed": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cade2271924f42b35da72efa4ad6b2eebc9875cd", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Caller in Function Call", "problem": "    *\n    * @param dictPath the path to the dictionary file\n    */\n  private HashMap<String, String> setupDictionary(String dictPath) {\n     HashMap<String, String> dictionary = new HashMap<>();\n     BufferedReader br = null;\n     try {", "fixed": "    *\n    * @param dictPath the path to the dictionary file\n    */\n  private static HashMap<String, String> setupDictionary(String dictPath) {\n     HashMap<String, String> dictionary = new HashMap<>();\n     BufferedReader br = null;\n     try {", "sourceBeforeFix": "dict.put(words[0],words[2])", "sourceAfterFix": "dictionary.put(words[0],words[2])"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "756e47a05af9db14879e349f7bde1dfa64b83af8", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Less Args", "problem": "         LocalizedMessages collector = new LocalizedMessages();\n         emptyCheck.setMessages(collector);\n        emptyCheck.log(0, \"msgKey\", null);\n         LocalizedMessage[] messages = collector.getMessages();\n         Assert.assertTrue(messages.length == 1);", "fixed": "         LocalizedMessages collector = new LocalizedMessages();\n         emptyCheck.setMessages(collector);\n        emptyCheck.log(0, \"msgKey\");\n         LocalizedMessage[] messages = collector.getMessages();\n         Assert.assertTrue(messages.length == 1);", "sourceBeforeFix": "emptyCheck.log(0,\"msgKey\",null)", "sourceAfterFix": "emptyCheck.log(0,\"msgKey\")"}
{"fixCommitSHA1": "f9e60b9fa8dfcbf5dc37b2a88922f57cb292c7dd", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "         Host undertowHost = getUndertowHost(hostInfo);\n         if (undertowHost != null && !undertowHost.getServer().getListeners().isEmpty()) {\n             if (!securePort) {\n                return undertowHost.getServer().getListeners().get(0).getBinding().getValue().getPort();\n             } else {\n                 for(ListenerService<?> listener : undertowHost.getServer().getListeners()) {\n                     if (listener.isSecure()) {", "fixed": "         Host undertowHost = getUndertowHost(hostInfo);\n         if (undertowHost != null && !undertowHost.getServer().getListeners().isEmpty()) {\n             if (!securePort) {\n                return undertowHost.getServer().getListeners().get(0).getBinding().getValue().getAbsolutePort();\n             } else {\n                 for(ListenerService<?> listener : undertowHost.getServer().getListeners()) {\n                     if (listener.isSecure()) {", "sourceBeforeFix": "undertowHost.getServer().getListeners().get(0).getBinding().getValue().getPort()", "sourceAfterFix": "undertowHost.getServer().getListeners().get(0).getBinding().getValue().getAbsolutePort()"}
{"fixCommitSHA1": "40f3ba0f619f5bac94bb32f6d5746117627dddb6", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "             }\n         });\n        assertOpenEventually(\"responseLatch\", responseLatch, 5);\n         assertEquals(msg + AppendCallable.APPENDAGE, result.get());\n     }", "fixed": "             }\n         });\n        assertOpenEventually(\"responseLatch\", responseLatch);\n         assertEquals(msg + AppendCallable.APPENDAGE, result.get());\n     }", "sourceBeforeFix": "assertOpenEventually(\"responseLatch\",responseLatch,5)", "sourceAfterFix": "assertOpenEventually(\"responseLatch\",responseLatch)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ReactiveStreamsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedReactiveStreamsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ReactiveStreamsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedReactiveStreamsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2f6aca222e49ea1564ecb123485fdd75037028cb", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t\tprivate final DataSource dataSource;\n\t\tpublic LocationResolver(DataSource dataSource) {\n \t\t\tthis.dataSource = dataSource;\n \t\t}", "fixed": " \t\tprivate final DataSource dataSource;\n\t\tLocationResolver(DataSource dataSource) {\n \t\t\tthis.dataSource = dataSource;\n \t\t}", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MockEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedMockEndpointBuilder advanced() {\n             return (AdvancedMockEndpointBuilder) this;\n         }", "fixed": "     \n    public interface MockEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedMockEndpointBuilder advanced() {\n             return (AdvancedMockEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.valueOf(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "fixed": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytesBinary(tableNameOrRegionName), Bytes.toBytesBinary(splitPoint));\n   }\n   /**", "fixed": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytes(tableNameOrRegionName), Bytes.toBytes(splitPoint));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1e3c0da4bdd228f518ad7297096fdc26c9d53ead", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " public class PropertiesConfigurationFactory<T> implements FactoryBean<T>,\n \t\tMessageSourceAware, InitializingBean {\n\tprivate static final char[] EXACT_DELIMETERS = { '_', '.', '[' };\n\tprivate static final char[] TARGET_NAME_DELIMETERS = { '_', '.' };\n \tprivate final Log logger = LogFactory.getLog(getClass());", "fixed": " public class PropertiesConfigurationFactory<T> implements FactoryBean<T>,\n \t\tMessageSourceAware, InitializingBean {\n\tprivate static final char[] EXACT_DELIMITERS = { '_', '.', '[' };\n\tprivate static final char[] TARGET_NAME_DELIMITERS = { '_', '.' };\n \tprivate final Log logger = LogFactory.getLog(getClass());", "sourceBeforeFix": "new DefaultPropertyNamePatternsMatcher(EXACT_DELIMETERS,true,names)", "sourceAfterFix": "new DefaultPropertyNamePatternsMatcher(EXACT_DELIMITERS,true,names)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7a90cfe13f0b030f6e091154c1d0091c685039f1", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     public BufferInfo getBufferInfo() {\n         try {\n             return new BufferInfo(\n                    api.path(routes.BufferResource().utilization(), BuffersResponse.class)\n                             .node(this)\n                             .execute());\n         } catch (Exception e) {", "fixed": "     public BufferInfo getBufferInfo() {\n         try {\n             return new BufferInfo(\n                    api.path(routes.BuffersResource().utilization(), BuffersResponse.class)\n                             .node(this)\n                             .execute());\n         } catch (Exception e) {", "sourceBeforeFix": "routes.BufferResource()", "sourceAfterFix": "routes.BuffersResource()"}
{"fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "projectName": "eclipse.vert.x", "bugType": "Same Function More Args", "problem": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException();\n   }\n }", "fixed": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n }", "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: failed\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "8368e79de7092308557d39acadd54283c2c8d220", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       obj.setBucketName(mBucketName);\n       obj.setDataInputFile(mFile);\n       obj.setContentLength(mFile.length());\n      obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n       if (mHash != null) {\n         obj.setMd5Hash(mHash.digest());\n       } else {", "fixed": "       obj.setBucketName(mBucketName);\n       obj.setDataInputFile(mFile);\n       obj.setContentLength(mFile.length());\n      obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n       if (mHash != null) {\n         obj.setMd5Hash(mHash.digest());\n       } else {", "sourceBeforeFix": "obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)", "sourceAfterFix": "obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)"}
{"fixCommitSHA1": "abb47c674f762d401d0ed4f2f236b0229f6e6e6a", "projectName": "openmrs.openmrs-core", "bugType": "Less Specific If", "problem": " \t * @should return a mapped Concept if given a valid mapping\r\n \t */\r\n \tprotected Concept getConcept(String hl7ConceptId, String codingSystem, String uid) throws HL7Exception {\r\n\t\tif (HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)) {\r\n \t\t\ttry {\r\n \t\t\t\tInteger conceptId = new Integer(hl7ConceptId);\r", "fixed": " \t * @should return a mapped Concept if given a valid mapping\r\n \t */\r\n \tprotected Concept getConcept(String hl7ConceptId, String codingSystem, String uid) throws HL7Exception {\r\n\t\tif (codingSystem == null || HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)) {\r\n \t\t\ttry {\r\n \t\t\t\tInteger conceptId = new Integer(hl7ConceptId);\r", "sourceBeforeFix": "HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)", "sourceAfterFix": "codingSystem == null || HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "28f046ef4ac16e7d260dfd505400c329030ebbe8", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "       }\n     }\n    if ( targetCondn == null ) {\n       return new ObjectPair(-1, null);\n     }", "fixed": "       }\n     }\n    if ( targetCondn == null || (nodeCondn.size() != targetCondn.size())) {\n       return new ObjectPair(-1, null);\n     }", "sourceBeforeFix": "targetCondn == null", "sourceAfterFix": "targetCondn == null || (nodeCondn.size() != targetCondn.size())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ReactiveStreamsEndpointBuilder\n             extends\n                 ReactiveStreamsEndpointConsumerBuilder, ReactiveStreamsEndpointProducerBuilder {\n         default AdvancedReactiveStreamsEndpointBuilder advanced() {", "fixed": "     \n    public interface ReactiveStreamsEndpointBuilder\n             extends\n                 ReactiveStreamsEndpointConsumerBuilder, ReactiveStreamsEndpointProducerBuilder {\n         default AdvancedReactiveStreamsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleMailEndpointBuilder\n             extends\n                 AdvancedGoogleMailEndpointConsumerBuilder, AdvancedGoogleMailEndpointProducerBuilder {\n         default GoogleMailEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleMailEndpointBuilder\n             extends\n                 AdvancedGoogleMailEndpointConsumerBuilder, AdvancedGoogleMailEndpointProducerBuilder {\n         default GoogleMailEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     final FunctionNames functionNames;\n     final String idGeneratorMap;\n    State(Map<String, Integer> cssNames, Set<String> exportedNames,\n           CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n           VariableMap variableMap, VariableMap propertyMap,\n           VariableMap anonymousFunctionNameMap,", "fixed": "     final FunctionNames functionNames;\n     final String idGeneratorMap;\n    public State(Map<String, Integer> cssNames, Set<String> exportedNames,\n           CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n           VariableMap variableMap, VariableMap propertyMap,\n           VariableMap anonymousFunctionNameMap,", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2230a91829f39b72973e6fecf275d9c664911ca0", "projectName": "clojure.clojure", "bugType": "Change Caller in Function Call", "problem": " \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n\t\t\tthrow new CompilerException((String) SOURCE.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}", "fixed": " \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n\t\t\tthrow new CompilerException((String) SOURCE_PATH.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}", "sourceBeforeFix": "SOURCE.deref()", "sourceAfterFix": "SOURCE_PATH.deref()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSjms2EndpointBuilder\n             extends\n                 AdvancedSjms2EndpointConsumerBuilder, AdvancedSjms2EndpointProducerBuilder {\n         default Sjms2EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSjms2EndpointBuilder\n             extends\n                 AdvancedSjms2EndpointConsumerBuilder, AdvancedSjms2EndpointProducerBuilder {\n         default Sjms2EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f051bfd17154fe5974bd0af2b10e2926fe8191e8", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": "\t\t\t\tWorldManifold manifold = contact.GetWorldManifold();\r\n \t\t\t\tint numContactPoints = manifold.getNumberOfContactPoints();\r\n \t\t\t\tfor (int j = 0; j < numContactPoints; j++) {\r\n \t\t\t\t\tVector2 point = manifold.getPoints()[j];\r", "fixed": "\t\t\t\tWorldManifold manifold = contact.getWorldManifold();\r\n \t\t\t\tint numContactPoints = manifold.getNumberOfContactPoints();\r\n \t\t\t\tfor (int j = 0; j < numContactPoints; j++) {\r\n \t\t\t\t\tVector2 point = manifold.getPoints()[j];\r", "sourceBeforeFix": "contact.GetWorldManifold()", "sourceAfterFix": "contact.getWorldManifold()"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "* @see\n* @see NormalizableKey\n \t */\n\tpublic void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "fixed": "* @see\n* @see NormalizableKey\n \t */\n\tpublic abstract void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "5bcda0dcda632007620256bcc654628a81ab50f0", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "       return null;\n     }\n    if (!regex.equals(lastRegex)) {\n       lastRegex.set(regex);\n       p = Pattern.compile(regex.toString());\n     }", "fixed": "       return null;\n     }\n    if (!regex.equals(lastRegex) || p == null) {\n       lastRegex.set(regex);\n       p = Pattern.compile(regex.toString());\n     }", "sourceBeforeFix": "!regex.equals(lastRegex)", "sourceAfterFix": "!regex.equals(lastRegex) || p == null"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "d6fd0d3832907ff36789b89450df09320081fc66", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "     final long callId;\n     final long callStartNanos;\n    public PrintingEventListener(long callId, long callStartNanos) {\n       this.callId = callId;\n       this.callStartNanos = callStartNanos;\n     }", "fixed": "     final long callId;\n     final long callStartNanos;\n    PrintingEventListener(long callId, long callStartNanos) {\n       this.callId = callId;\n       this.callStartNanos = callStartNanos;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"fixCommitSHA1": "dbd841562137595e365ccf2ad1524ecfdee958c9", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplemetationMethodDescriptor> implemetationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "fixed": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplementationMethodDescriptor> implementationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "sourceBeforeFix": "implemetationMethodDescriptors.build()", "sourceAfterFix": "implementationMethodDescriptors.build()"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
