{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return VAR_3 ; } switch ( VAR_2 ) { case VAR_4 : return VAR_5 ; case VAR_6 : return VAR_7 ; case VAR_8 : return VAR_9 ; case VAR_10 : return VAR_11 ; case VAR_12 : return VAR_13 ; case VAR_14 : return VAR_15 ; default : return VAR_3 ; } }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return VAR_3 ; } for ( TYPE_1 type : TYPE_1 . values ( ) ) { if ( type . METHOD_2 ( ) . equals ( VAR_2 ) ) { return type ; } } return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.String filename = STRING_1 ; java.lang.String VAR_1 = STRING_2 ; java.io.File VAR_2 = new java.io.File ( VAR_3 , filename ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; TYPE_2 VAR_5 = TYPE_3 . METHOD_2 ( VAR_4 , VAR_2 , VAR_1 ) ; METHOD_3 ( VAR_4 , VAR_1 , VAR_2 , VAR_5 , INT_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { java.lang.String filename = STRING_1 ; java.lang.String VAR_1 = STRING_2 ; java.io.File VAR_2 = new java.io.File ( VAR_3 , filename ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; TYPE_2 VAR_5 = TYPE_3 . METHOD_2 ( VAR_4 , VAR_2 , VAR_1 ) ; METHOD_3 ( VAR_4 , VAR_1 , VAR_2 , VAR_5 , 1 ) ; }\n"}
{"problem": "public void start ( TYPE_1 VAR_1 ) { try { TYPE_2 VAR_2 = TYPE_3 . METHOD_1 ( getClass ( ) . METHOD_2 ( STRING_1 ) ) ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( STRING_2 ) ; VAR_1 . METHOD_5 ( ( VAR_4 ) - > TYPE_5 . METHOD_6 ( ) ) ; VAR_1 . show ( ) ; } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_7 ( ) ; return ; } }\n", "fixed": "public void start ( TYPE_1 VAR_1 ) { try { TYPE_2 VAR_2 = TYPE_3 . METHOD_1 ( getClass ( ) . METHOD_2 ( STRING_1 ) ) ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( STRING_2 ) ; VAR_1 . METHOD_5 ( ( VAR_4 ) - > java.lang.System.exit ( 0 ) ) ; VAR_1 . show ( ) ; } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_7 ( ) ; return ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"problem": "public TYPE_1 METHOD_1 ( final java.util.Date VAR_1 , final java.util.Date end ) { this . VAR_2 . put ( TYPE_2 . name ( ) , this . VAR_3 . format ( VAR_1 ) ) ; this . VAR_2 . put ( TYPE_3 . name ( ) , this . VAR_3 . format ( end ) ) ; return this ; }\n", "fixed": "public TYPE_1 METHOD_1 ( final java.util.Date VAR_1 , final java.util.Date end ) { this . VAR_2 . put ( TYPE_2 . getName ( ) , this . VAR_3 . format ( VAR_1 ) ) ; this . VAR_2 . put ( TYPE_3 . getName ( ) , this . VAR_3 . format ( end ) ) ; return this ; }\n"}
{"problem": "public boolean METHOD_1 ( ) { if ( ( VAR_1 ) >= INT_1 ) { if ( ( TYPE_1 . METHOD_2 ( getActivity ( ) , VAR_2 ) ) == ( VAR_3 ) ) { return true ; } else { TYPE_2 . METHOD_3 ( getActivity ( ) , new java.lang.String [ ] { VAR_4 } , 1 ) ; return false ; } } else { return true ; } }\n", "fixed": "public boolean METHOD_1 ( ) { if ( ( VAR_1 ) >= INT_1 ) { if ( ( TYPE_1 . METHOD_2 ( getActivity ( ) , VAR_2 ) ) == ( VAR_3 ) ) { return true ; } else { METHOD_3 ( new java.lang.String [ ] { VAR_4 } , 1 ) ; return false ; } } else { return true ; } }\n"}
{"problem": "private boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) ; VAR_1 . METHOD_2 ( ) . remove ( VAR_2 ) ; TYPE_3 VAR_5 = TYPE_3 . METHOD_3 ( VAR_3 ) ; if ( VAR_5 != ( VAR_6 ) ) { VAR_7 . METHOD_4 ( VAR_1 . getId ( ) , VAR_4 . getId ( ) , TYPE_3 . METHOD_3 ( VAR_3 ) ) ; return true ; } return false ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_3 VAR_5 = TYPE_3 . METHOD_3 ( VAR_3 ) ; if ( VAR_5 != ( VAR_6 ) ) { TYPE_2 VAR_4 = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) ; VAR_7 . METHOD_4 ( VAR_1 . getId ( ) , VAR_4 . getId ( ) , TYPE_3 . METHOD_3 ( VAR_3 ) ) ; VAR_1 . METHOD_2 ( ) . remove ( VAR_2 ) ; return true ; } return false ; }\n"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n\tpublic String getGlobalProperty(String propertyName) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n\tpublic String getGlobalProperty(String propertyName);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String text ) throws java.lang.Exception { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( text ) ; this . METHOD_2 ( VAR_1 ) ; int result = VAR_2 . type ( text ) ; if ( result == 0 ) { throw new TYPE_1 ( STRING_2 ) ; } VAR_3 = VAR_4 ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String text ) throws java.lang.Exception { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( text ) ; this . METHOD_2 ( VAR_1 ) ; int result = VAR_2 . type ( text ) ; if ( result == 0 ) { throw new TYPE_1 ( STRING_2 ) ; } }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) { try { TYPE_1 VAR_1 ; VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) ) ; VAR_1 . METHOD_1 ( INT_1 , INT_2 , true ) ; VAR_1 . start ( ) ; } catch ( TYPE_3 VAR_2 ) { } }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { try { TYPE_1 VAR_1 ; VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) ) ; VAR_1 . METHOD_1 ( 0 , 0 , false ) ; VAR_1 . start ( ) ; } catch ( TYPE_3 VAR_2 ) { } }\n"}
{"problem": "public static int METHOD_1 ( java.lang.String path ) { if ( path . contains ( VAR_1 ) ) { java.lang.String VAR_2 = path . substring ( ( ( path . METHOD_2 ( STRING_1 ) ) + 1 ) , path . METHOD_2 ( CHAR_1 ) ) ; return java.lang.Integer.parseInt ( VAR_2 ) ; } else { if ( ! ( TYPE_1 . METHOD_3 ( path . METHOD_4 ( 0 ) ) ) ) { return - 1 ; } return java.lang.Integer.parseInt ( path . substring ( 0 , path . METHOD_5 ( CHAR_1 ) ) ) ; } }\n", "fixed": "public static int METHOD_1 ( java.lang.String path ) { if ( path . contains ( VAR_1 ) ) { java.lang.String VAR_2 = path . substring ( ( ( path . METHOD_2 ( VAR_1 ) ) + 1 ) , path . METHOD_2 ( CHAR_1 ) ) ; return java.lang.Integer.parseInt ( VAR_2 ) ; } else { if ( ! ( TYPE_1 . METHOD_3 ( path . METHOD_4 ( 0 ) ) ) ) { return - 1 ; } return java.lang.Integer.parseInt ( path . substring ( 0 , path . METHOD_5 ( CHAR_1 ) ) ) ; } }\n"}
{"fixCommitSHA1": "4fd2358fcf0cf248806b7f7a05c555d0f99b6cd7", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"asyncCamelProcessRevisited\");\n     List<Execution> executionList = runtimeService.createExecutionQuery().list();\n     assertEquals(3, executionList.size());\n    waitForJobExecutorToProcessAllJobs(3000, 500);\n     assertEquals(0, runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());\n   }\n }", "fixed": "     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"asyncCamelProcessRevisited\");\n     List<Execution> executionList = runtimeService.createExecutionQuery().list();\n     assertEquals(3, executionList.size());\n    waitForJobExecutorToProcessAllJobs(5000, 500);\n     assertEquals(0, runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());\n   }\n }", "sourceBeforeFix": "waitForJobExecutorToProcessAllJobs(3000,500)", "sourceAfterFix": "waitForJobExecutorToProcessAllJobs(5000,500)"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": " \t\tlistFiles(files, ROOT, \"java\");\n \t}\n\tprivate Configuration getConfigurationFromXML(String aConfigName,\n \t\t\tProperties aProps) throws CheckstyleException {\n \t\ttry {\n \t\t\treturn ConfigurationLoader.loadConfiguration(aConfigName,", "fixed": " \t\tlistFiles(files, ROOT, \"java\");\n \t}\n\tprivate static Configuration getConfigurationFromXML(String aConfigName,\n \t\t\tProperties aProps) throws CheckstyleException {\n \t\ttry {\n \t\t\treturn ConfigurationLoader.loadConfiguration(aConfigName,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"problem": "private static java.util.ArrayList < java.lang.String > METHOD_1 ( java.util.Scanner VAR_1 , java.lang.String [ ] VAR_2 , TYPE_1 VAR_3 ) { java.lang.System.out.print ( STRING_1 ) ; java.lang.String query = VAR_1 . METHOD_2 ( ) ; java.util.ArrayList < java.lang.String > VAR_4 = new java.util.ArrayList < > ( ) ; VAR_4 = TYPE_2 . METHOD_3 ( query ) ; VAR_4 = TYPE_2 . METHOD_4 ( VAR_2 , VAR_4 ) ; return TYPE_3 . METHOD_5 ( VAR_4 , VAR_3 ) ; }\n", "fixed": "private static java.util.ArrayList < java.lang.String > METHOD_1 ( java.util.Scanner VAR_1 , java.lang.String [ ] VAR_2 , TYPE_2 VAR_3 ) throws java.lang.Exception { java.lang.System.out.print ( STRING_1 ) ; java.lang.String query = VAR_1 . METHOD_2 ( ) ; java.util.ArrayList < java.lang.String > VAR_4 = new java.util.ArrayList < > ( ) ; VAR_4 = TYPE_2 . METHOD_3 ( query ) ; VAR_4 = TYPE_2 . METHOD_4 ( VAR_2 , VAR_4 ) ; return TYPE_3 . METHOD_5 ( VAR_4 , VAR_3 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . addComponent ( new TYPE_2 ( VAR_2 ) ) ; VAR_1 . addComponent ( new TYPE_2 ( VAR_3 ) ) ; VAR_1 . addComponent ( new TYPE_2 ( VAR_4 ) ) ; VAR_1 . addComponent ( new TYPE_2 ( VAR_5 ) ) ; for ( TYPE_3 answer : VAR_6 ) { TYPE_1 VAR_7 = new TYPE_1 ( ) ; VAR_1 . addComponent ( VAR_7 ) ; answer . METHOD_1 ( VAR_7 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . addComponent ( new TYPE_2 ( VAR_3 ) ) ; VAR_1 . addComponent ( new TYPE_2 ( VAR_4 ) ) ; VAR_1 . addComponent ( new TYPE_2 ( VAR_5 ) ) ; for ( TYPE_3 answer : VAR_6 ) { TYPE_1 VAR_7 = new TYPE_1 ( ) ; VAR_1 . addComponent ( VAR_7 ) ; answer . METHOD_1 ( VAR_7 ) ; } VAR_1 . addComponent ( new TYPE_2 ( VAR_2 ) ) ; }\n"}
{"problem": "private void METHOD_1 ( int VAR_1 , int VAR_2 ) { int VAR_3 = 0 ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { VAR_4 [ VAR_3 ] += VAR_5 [ VAR_3 ] ; double VAR_6 = METHOD_2 ( VAR_2 ) ; if ( VAR_6 > ( VAR_7 ) ) { VAR_7 = VAR_6 ; } else { VAR_4 [ VAR_3 ] -= VAR_5 [ VAR_3 ] ; } VAR_3 = ( VAR_3 + 1 ) % ( ( VAR_8 ) - 1 ) ; } }\n", "fixed": "private void METHOD_1 ( int VAR_1 , int VAR_2 ) { int VAR_3 = 0 ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { VAR_4 [ VAR_3 ] += VAR_5 [ VAR_3 ] ; double VAR_6 = METHOD_2 ( VAR_2 ) ; if ( VAR_6 > ( VAR_7 ) ) { VAR_7 = VAR_6 ; } else { VAR_4 [ VAR_3 ] -= VAR_5 [ VAR_3 ] ; } VAR_3 = ( VAR_3 + 1 ) % ( VAR_8 ) ; } }\n"}
{"problem": "public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( ) ) < ( VAR_2 . METHOD_2 ( ) ) ) { return 1 ; } if ( ( VAR_1 . METHOD_2 ( ) ) > ( VAR_2 . METHOD_2 ( ) ) ) { return - 1 ; } return 0 ; }\n", "fixed": "public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( ) ) > ( VAR_2 . METHOD_2 ( ) ) ) { return 1 ; } if ( ( VAR_1 . METHOD_2 ( ) ) < ( VAR_2 . METHOD_2 ( ) ) ) { return - 1 ; } return 0 ; }\n"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic boolean invertNormalizedKey();", "fixed": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic abstract boolean invertNormalizedKey();", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "9e756fefbb053926754108335e3ad78b586439ac", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                 WebsocketComponent websocketComponent = (WebsocketComponent) context.getComponent(\"websocket\");\n                 websocketComponent.setPort(port);\n                 websocketComponent.setMinThreads(1);\n                websocketComponent.setMaxThreads(11);", "fixed": "                 WebsocketComponent websocketComponent = (WebsocketComponent) context.getComponent(\"websocket\");\n                 websocketComponent.setPort(port);\n                 websocketComponent.setMinThreads(1);\n                websocketComponent.setMaxThreads(20);", "sourceBeforeFix": "websocketComponent.setMaxThreads(11)", "sourceAfterFix": "websocketComponent.setMaxThreads(20)"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; final TYPE_2 VAR_2 = VAR_3 . METHOD_3 ( VAR_1 , VAR_4 class ) ; final java.lang.String VAR_5 = VAR_3 . METHOD_4 ( VAR_2 ) ; final TYPE_2 VAR_6 = VAR_3 . METHOD_3 ( VAR_5 , VAR_4 class ) ; TYPE_3 . assertEquals ( VAR_2 . METHOD_5 ( ) , VAR_6 . METHOD_5 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; final TYPE_2 VAR_2 = VAR_3 . METHOD_3 ( VAR_1 , VAR_4 class ) ; final java.lang.String VAR_5 = VAR_3 . METHOD_4 ( VAR_2 ) ; final TYPE_2 VAR_6 = VAR_3 . METHOD_3 ( VAR_5 , VAR_4 class ) ; assertEquals ( VAR_2 . METHOD_5 ( ) , VAR_6 . METHOD_5 ( ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 = VAR_2 . METHOD_2 ( ) ; VAR_4 = new java.util.Date ( ) ; TYPE_3 VAR_5 = new TYPE_3 ( ) ; TYPE_4 . METHOD_3 ( VAR_1 , VAR_5 ) ; VAR_6 . METHOD_1 ( VAR_5 ) ; VAR_1 = TYPE_4 . METHOD_4 ( VAR_1 , VAR_5 , VAR_2 ) ; return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 = VAR_2 . METHOD_2 ( ) ; VAR_4 = new java.util.Date ( ) ; TYPE_3 VAR_5 = new TYPE_3 ( ) ; TYPE_4 . METHOD_3 ( VAR_1 , VAR_5 ) ; VAR_6 . METHOD_1 ( VAR_5 , VAR_2 ) ; VAR_1 = TYPE_4 . METHOD_4 ( VAR_1 , VAR_5 , VAR_2 ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "53694f29adf8c68992e1b966c86380219f438c14", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(100);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(200)"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 TYPE_3 ) { TYPE_1 VAR_1 = TYPE_4 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_2 ) . METHOD_4 ( ) , TYPE_3 . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) ) ; TYPE_1 VAR_4 = TYPE_4 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_5 ) . METHOD_4 ( ) , TYPE_3 . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) ) ; return VAR_4 . METHOD_5 ( VAR_1 ) . METHOD_6 ( ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 TYPE_3 ) { TYPE_1 VAR_1 = TYPE_4 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_2 ) . METHOD_4 ( ) , TYPE_3 . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) ) ; TYPE_1 VAR_4 = TYPE_4 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_5 ) . METHOD_4 ( ) , TYPE_3 . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) ) ; return VAR_1 . METHOD_5 ( VAR_4 ) . METHOD_6 ( ) ; }\n"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNano(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "fixed": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"problem": "public void METHOD_1 ( int VAR_1 , java.lang.String [ ] VAR_2 , int [ ] VAR_3 ) { switch ( VAR_1 ) { case VAR_4 : { if ( ( ( VAR_3 . length ) > 0 ) && ( ( VAR_3 [ 0 ] ) == ( VAR_5 ) ) ) { TYPE_1 . METHOD_2 ( getActivity ( ) ) . METHOD_3 ( ) ; } break ; } } }\n", "fixed": "public void METHOD_1 ( int VAR_1 , java.lang.String [ ] VAR_2 , int [ ] VAR_3 ) { super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; switch ( VAR_1 ) { case VAR_4 : { if ( ( ( VAR_3 . length ) > 0 ) && ( ( VAR_3 [ 0 ] ) == ( VAR_5 ) ) ) { TYPE_1 . METHOD_2 ( getActivity ( ) ) . METHOD_3 ( ) ; } break ; } } }\n"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                }\r\n                if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "fixed": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"problem": "public void METHOD_1 ( TYPE_1 [ ] nodes , int VAR_1 , int height ) { for ( TYPE_1 n : nodes ) { this . nodes . add ( n ) ; VAR_2 . put ( METHOD_2 ( n . METHOD_3 ( ) , n . METHOD_4 ( ) ) , n ) ; } VAR_3 = VAR_1 ; VAR_4 = height ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 [ ] nodes , int VAR_1 , int height ) { for ( TYPE_1 n : nodes ) { this . nodes . add ( n ) ; VAR_2 . put ( METHOD_2 ( n . x , n . y ) , n ) ; } VAR_3 = VAR_1 ; VAR_4 = height ; }\n"}
{"fixCommitSHA1": "6373dd6c75eea278d3b3f05663640304ea570e08", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Binary Operator", "problem": "                 } catch (IOException ie) {\n                     Assert.fail(\"read failure\");\n                 }\n                if (readBytes >= 0) {\n                     totalBytes += readBytes;\n                 } else {\n                     last = true;", "fixed": "                 } catch (IOException ie) {\n                     Assert.fail(\"read failure\");\n                 }\n                if (readBytes > 0) {\n                     totalBytes += readBytes;\n                 } else {\n                     last = true;", "sourceBeforeFix": "readBytes >= 0", "sourceAfterFix": "readBytes > 0"}
{"problem": "private boolean METHOD_1 ( TYPE_1 VAR_1 ) { final float VAR_2 = 0.0F ; return ( ( TYPE_2 . equals ( VAR_1 . METHOD_2 ( ) ) ) && ( ! ( VAR_1 . METHOD_3 ( ) ) ) ) && ( ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) > VAR_2 ) ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 VAR_1 ) { final double VAR_2 = 0.0 ; return ( ( TYPE_2 . equals ( VAR_1 . METHOD_2 ( ) ) ) && ( ! ( VAR_1 . METHOD_3 ( ) ) ) ) && ( ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) > VAR_2 ) ; }\n"}
{"problem": "private void METHOD_1 ( java.lang.Integer offset , java.lang.Integer VAR_1 , int VAR_2 ) { int VAR_3 = ( offset * INT_1 ) / VAR_1 ; if ( ( VAR_3 > ( VAR_2 + INT_2 ) ) && ( VAR_3 < INT_1 ) ) { VAR_4 . info ( STRING_1 , VAR_3 ) ; } }\n", "fixed": "private int METHOD_1 ( java.lang.Integer offset , java.lang.Integer VAR_1 , int VAR_2 ) { int VAR_3 = ( offset * INT_1 ) / VAR_1 ; if ( ( VAR_3 > ( VAR_2 + INT_2 ) ) && ( VAR_3 < INT_1 ) ) { VAR_4 . info ( STRING_1 , VAR_3 ) ; return ( VAR_3 / INT_2 ) * INT_2 ; } return VAR_2 ; }\n"}
{"fixCommitSHA1": "4088948e247a69deb7f46f4ac75011b160d42f51", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": " \tprivate final List<File> files = new ArrayList<>();\n\tConfiguration config;\n \tURL url;", "fixed": " \tprivate final List<File> files = new ArrayList<>();\n\tfinal Configuration config;\n \tURL url;", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 < java.lang.String > METHOD_1 ( java.lang.Integer VAR_1 , java.lang.Integer VAR_2 , java.lang.Integer VAR_3 ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_4 , VAR_1 , VAR_2 ) ) ) { return TYPE_1 . METHOD_3 ( STRING_1 ) ; } if ( VAR_3 != null ) { TYPE_3 VAR_5 = VAR_6 . METHOD_4 ( VAR_3 ) ; if ( VAR_5 != null ) { VAR_7 . METHOD_1 ( VAR_5 ) ; VAR_8 . METHOD_5 ( VAR_9 . METHOD_6 ( VAR_2 ) ) ; } } return TYPE_1 . METHOD_7 ( STRING_2 ) ; }\n", "fixed": "public TYPE_1 < java.lang.String > METHOD_1 ( java.lang.Integer VAR_1 , java.lang.Integer VAR_2 , java.lang.Integer VAR_3 ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_4 , VAR_1 , VAR_2 ) ) ) { return TYPE_1 . METHOD_3 ( STRING_1 ) ; } if ( VAR_3 != null ) { TYPE_3 VAR_5 = VAR_6 . METHOD_4 ( VAR_3 ) ; if ( VAR_5 != null ) { VAR_7 . METHOD_1 ( VAR_5 ) ; VAR_8 . METHOD_5 ( VAR_9 . METHOD_6 ( VAR_2 ) , VAR_3 ) ; } } return TYPE_1 . METHOD_7 ( STRING_2 ) ; }\n"}
{"fixCommitSHA1": "cec714019a4833c030ef455687f95ee05cc4a5e7", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         ReactiveStreamsComponent component = new ReactiveStreamsComponent();\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.put(\"dummy\", new ReactiveStreamsTestService(\"from-registry\"));\n         DefaultCamelContext context = new DefaultCamelContext(registry);\n         context.addComponent(ReactiveStreamsConstants.SCHEME, component);", "fixed": "         ReactiveStreamsComponent component = new ReactiveStreamsComponent();\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.bind(\"dummy\", new ReactiveStreamsTestService(\"from-registry\"));\n         DefaultCamelContext context = new DefaultCamelContext(registry);\n         context.addComponent(ReactiveStreamsConstants.SCHEME, component);", "sourceBeforeFix": "registry.put(\"dummy\",new ReactiveStreamsTestService(\"from-registry\"))", "sourceAfterFix": "registry.bind(\"dummy\",new ReactiveStreamsTestService(\"from-registry\"))"}
{"fixCommitSHA1": "498da9e77cec4d5cb9dfbb1044cb9634f1ff0422", "projectName": "apache.storm", "bugType": "Change Unary Operator\t", "problem": "      * @return the updated dynamicState\n      */\n     private static DynamicState filterChangingBlobsFor(DynamicState dynamicState, final LocalAssignment assignment) {\n        if (!dynamicState.changingBlobs.isEmpty()) {\n             return dynamicState;\n         }", "fixed": "      * @return the updated dynamicState\n      */\n     private static DynamicState filterChangingBlobsFor(DynamicState dynamicState, final LocalAssignment assignment) {\n        if (dynamicState.changingBlobs.isEmpty()) {\n             return dynamicState;\n         }", "sourceBeforeFix": "!dynamicState.changingBlobs.isEmpty()", "sourceAfterFix": "dynamicState.changingBlobs.isEmpty()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { if ( TYPE_2 . METHOD_2 ( ) ) { java.lang.System.out.println ( java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 , VAR_3 ) ) ; } try { TYPE_1 VAR_4 = METHOD_3 ( TYPE_2 . getData ( VAR_1 , VAR_2 , VAR_3 ) ) ; return VAR_4 ; } catch ( java.lang.NullPointerException VAR_5 ) { return null ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { if ( TYPE_2 . METHOD_2 ( ) ) { java.lang.System.err.println ( java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 , VAR_3 ) ) ; } try { TYPE_1 VAR_4 = METHOD_3 ( TYPE_2 . getData ( VAR_1 , VAR_2 , VAR_3 ) ) ; return VAR_4 ; } catch ( java.lang.NullPointerException VAR_5 ) { return null ; } }\n"}
{"fixCommitSHA1": "6e4e6d32757138712bcba38d7ab1ed8ae97cdcb5", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     @Override\n     public StructField getStructFieldRef(String s) {\n       for(StructField field: fields) {\n        if (field.getFieldName().equals(s)) {\n           return field;\n         }\n       }", "fixed": "     @Override\n     public StructField getStructFieldRef(String s) {\n       for(StructField field: fields) {\n        if (field.getFieldName().equalsIgnoreCase(s)) {\n           return field;\n         }\n       }", "sourceBeforeFix": "left.getFieldName().equals(right.getFieldName())", "sourceAfterFix": "left.getFieldName().equalsIgnoreCase(right.getFieldName())"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_3 . getText ( ) ; if ( VAR_4 . getText ( ) . isEmpty ( ) ) { VAR_5 = VAR_6 ; } else { VAR_5 = java.lang.Integer.parseInt ( VAR_4 . getText ( ) ) ; } VAR_7 = true ; VAR_8 . METHOD_2 ( ) ; METHOD_3 ( false ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_3 . getText ( ) . isEmpty ( ) ) ) { VAR_2 = VAR_3 . getText ( ) ; if ( VAR_4 . getText ( ) . isEmpty ( ) ) { VAR_5 = VAR_6 ; } else { VAR_5 = java.lang.Integer.parseInt ( VAR_4 . getText ( ) ) ; } VAR_7 = true ; VAR_8 . METHOD_2 ( ) ; METHOD_3 ( false ) ; } }\n"}
{"problem": "public static java.lang.String METHOD_1 ( int i ) { int VAR_1 = INT_1 ; char [ ] buf = new char [ VAR_1 ] ; int VAR_2 = VAR_1 ; do { buf [ ( -- VAR_2 ) ] = VAR_3 [ ( i & INT_2 ) ] ; } while ( ( i >>>= INT_3 ) != 0 ) ; return new java.lang.String ( VAR_2 , ( VAR_1 - VAR_2 ) , buf ) ; }\n", "fixed": "public static java.lang.String METHOD_1 ( int i ) { int VAR_1 = INT_1 ; char [ ] buf = new char [ VAR_1 ] ; int VAR_2 = VAR_1 ; do { buf [ ( -- VAR_2 ) ] = VAR_3 [ ( i & INT_2 ) ] ; } while ( ( i >>>= INT_3 ) != 0 ) ; return new java.lang.String ( buf , VAR_2 , ( VAR_1 - VAR_2 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_2 ) VAR_3 . METHOD_2 ( VAR_4 . x , VAR_4 . y , ( - ( VAR_5 ) ) ) ; else VAR_3 . METHOD_2 ( VAR_4 . x , VAR_4 . y , VAR_5 ) ; VAR_6 . METHOD_3 ( ) . METHOD_4 ( VAR_7 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_8 ) ; if ( VAR_1 != null ) VAR_6 . METHOD_7 ( VAR_9 ) ; }\n", "fixed": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_2 ) VAR_3 . METHOD_2 ( VAR_4 . x , VAR_4 . y , ( - ( VAR_5 ) ) ) ; else VAR_3 . METHOD_2 ( VAR_4 . x , VAR_4 . y , VAR_5 ) ; VAR_6 . METHOD_3 ( ) . METHOD_4 ( VAR_7 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_8 ) ; if ( VAR_1 != null ) VAR_6 . METHOD_7 ( VAR_1 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomixQueueEndpointBuilder\n             extends\n                 AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {\n         default AtomixQueueEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomixQueueEndpointBuilder\n             extends\n                 AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {\n         default AtomixQueueEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( p ) ; TYPE_1 . METHOD_3 ( p , ( - 1.0 ) ) ; if ( ( TYPE_1 . METHOD_4 ( p ) ) <= 0.0 ) { TYPE_1 . METHOD_5 ( p ) ; METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( p ) ; if ( ( TYPE_1 . METHOD_4 ( p ) ) <= 0 ) { TYPE_1 . METHOD_2 ( p ) ; TYPE_1 . METHOD_5 ( p ) ; METHOD_6 ( ) ; } TYPE_1 . METHOD_3 ( p , ( - 1 ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cd70b8db19db4a22136c8411fd0b72252b2f975a", "projectName": "AsyncHttpClient.async-http-client", "bugType": "More Specific If", "problem": "     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "fixed": "     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "sourceBeforeFix": "contentType != null", "sourceAfterFix": "contentType != null && charset == null"}
{"problem": "public void METHOD_1 ( TYPE_1 msg ) { TYPE_2 data ; try { data = ( ( TYPE_2 ) ( TYPE_3 . METHOD_2 ( msg , TYPE_2 . METHOD_3 ( ) ) ) ) ; VAR_1 . METHOD_4 ( new TYPE_4 ( data . METHOD_5 ( ) . METHOD_6 ( ) ) ) ; } catch ( TYPE_5 VAR_2 ) { METHOD_7 ( VAR_2 . toString ( ) ) ; VAR_2 . METHOD_8 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 msg ) { TYPE_2 data ; try { data = ( ( TYPE_2 ) ( TYPE_3 . METHOD_2 ( msg , TYPE_2 . METHOD_3 ( ) ) ) ) ; VAR_1 . METHOD_4 ( data ) ; } catch ( TYPE_5 VAR_2 ) { METHOD_7 ( VAR_2 . toString ( ) ) ; VAR_2 . METHOD_8 ( ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.List < java.lang.String > result = new java.util.ArrayList < > ( ) ; for ( TYPE_1 field : VAR_1 ) { if ( field . METHOD_2 ( ) ) { result . add ( field . METHOD_3 ( ) . get ( TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; } } return result ; }\n", "fixed": "public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.List < java.lang.String > result = new java.util.ArrayList < > ( ) ; for ( TYPE_1 field : VAR_1 ) { if ( field . METHOD_2 ( ) ) { result . add ( field . getName ( ) ) ; } } return result ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( TYPE_2 . METHOD_4 ( STRING_1 ) . content ( METHOD_5 ( ) ) . METHOD_6 ( VAR_4 ) ) . METHOD_7 ( TYPE_3 . METHOD_8 ( ) ) . METHOD_9 ( TYPE_4 . status ( ) . METHOD_10 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { VAR_3 . METHOD_3 ( TYPE_2 . METHOD_4 ( STRING_1 ) . content ( METHOD_5 ( ) ) . METHOD_6 ( VAR_4 ) ) . METHOD_7 ( TYPE_3 . METHOD_8 ( ) ) . METHOD_9 ( TYPE_4 . status ( ) . METHOD_10 ( ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 ) throws TYPE_4 , TYPE_5 { TYPE_6 VAR_6 = new TYPE_6 ( VAR_2 , VAR_3 ) ; VAR_6 . METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( VAR_6 ) ; return TYPE_7 . METHOD_4 ( VAR_1 , null , null ) ; }\n", "fixed": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 ) throws TYPE_4 , TYPE_5 { TYPE_6 VAR_6 = new TYPE_6 ( VAR_2 , VAR_3 ) ; VAR_6 . METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( VAR_6 ) ; return TYPE_7 . METHOD_4 ( VAR_1 , VAR_4 , VAR_5 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_4 = VAR_3 . METHOD_3 ( ) ; VAR_5 = new TYPE_2 ( ) ; if ( VAR_5 . METHOD_4 ( VAR_2 , VAR_4 ) ) { VAR_6 . METHOD_5 ( true ) ; VAR_3 . METHOD_6 ( ) ; } else { VAR_3 . METHOD_7 ( STRING_1 ) ; } VAR_6 = new TYPE_3 ( ) ; VAR_3 . METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_4 = VAR_3 . METHOD_3 ( ) ; VAR_5 = new TYPE_2 ( ) ; if ( VAR_5 . METHOD_4 ( VAR_2 , VAR_4 ) ) { VAR_6 = new TYPE_3 ( ) ; VAR_3 . METHOD_6 ( ) ; } else { VAR_3 . METHOD_7 ( STRING_1 ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) . commit ( ) ; VAR_2 . METHOD_6 ( ) ; return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) . commit ( ) ; VAR_2 . METHOD_6 ( ) ; return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( java.util.List < java.lang.Double > VAR_1 ) { METHOD_2 ( VAR_1 ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { for ( java.lang.Double VAR_4 : VAR_1 ) { VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( new TYPE_2 ( VAR_4 ) ) ; } } }\n", "fixed": "public void METHOD_1 ( java.util.List < java.lang.Double > VAR_1 ) { METHOD_2 ( VAR_1 ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { VAR_2 . METHOD_3 ( ) ; for ( java.lang.Double VAR_4 : VAR_1 ) { VAR_2 . METHOD_4 ( new TYPE_2 ( VAR_4 ) ) ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "deabd5b0187c1825c686c7f6a593db918bd043dc", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "             AtmosphereRequest req = AtmosphereResourceImpl.class.cast(r).getRequest(false);\n             try {\n                 if (req.getAttribute(MAX_INACTIVE) == null) {\n                    logger.error(\"Invalid state {}\", r);\n                     r.removeFromAllBroadcasters();\n                     config.resourcesFactory().unRegisterUuidForFindCandidate(r);\n                     continue;", "fixed": "             AtmosphereRequest req = AtmosphereResourceImpl.class.cast(r).getRequest(false);\n             try {\n                 if (req.getAttribute(MAX_INACTIVE) == null) {\n                    logger.warn(\"Invalid state {}\", r);\n                     r.removeFromAllBroadcasters();\n                     config.resourcesFactory().unRegisterUuidForFindCandidate(r);\n                     continue;", "sourceBeforeFix": "logger.error(\"Invalid state {}\",r)", "sourceAfterFix": "logger.warn(\"Invalid state {}\",r)"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_5 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_6 ) ) ) ; VAR_7 = TYPE_4 . METHOD_4 ( ) ; VAR_8 = new TYPE_5 ( METHOD_5 ( ) , VAR_2 , VAR_7 ) ; VAR_5 . METHOD_6 ( VAR_8 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_5 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_6 ) ) ) ; VAR_7 = TYPE_4 . METHOD_4 ( ) ; if ( ( VAR_7 ) != null ) { VAR_8 = new TYPE_5 ( this , VAR_2 , VAR_7 ) ; VAR_5 . METHOD_6 ( VAR_8 ) ; } }\n"}
{"problem": "public void METHOD_1 ( android.view.View view , android.content.Context context , TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; TYPE_3 VAR_3 = ( ( TYPE_3 ) ( view . METHOD_3 ( ) ) ) ; java.lang.String VAR_4 = ( VAR_5 ) + ( VAR_1 . getString ( VAR_6 ) ) ; TYPE_2 . METHOD_2 ( VAR_2 , ( STRING_2 + VAR_4 ) ) ; TYPE_4 . METHOD_4 ( VAR_7 ) . METHOD_5 ( VAR_8 ) . METHOD_6 ( VAR_9 ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view , android.content.Context context , TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; TYPE_3 VAR_3 = ( ( TYPE_3 ) ( view . METHOD_3 ( ) ) ) ; java.lang.String VAR_4 = ( VAR_5 ) + ( VAR_1 . getString ( VAR_6 ) ) ; TYPE_2 . METHOD_2 ( VAR_2 , ( STRING_2 + VAR_4 ) ) ; TYPE_4 . METHOD_4 ( VAR_7 ) . METHOD_5 ( VAR_4 ) . METHOD_6 ( VAR_9 ) ; }\n"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     }\n     if (LOG.isDebugEnabled()) {\n      LOG.debug(split.getRegionName().toString()\n          +\" no longer has references to \" + parent.toString());\n     }\n     BatchUpdate b = new BatchUpdate(parent);", "fixed": "     }\n     if (LOG.isDebugEnabled()) {\n      LOG.debug(split.getRegionNameAsString() +\n        \" no longer has references to \" + parent.toString());\n     }\n     BatchUpdate b = new BatchUpdate(parent);", "sourceBeforeFix": "parent.getRegionName()", "sourceAfterFix": "parent.getRegionNameAsString()"}
{"problem": "private java.util.LinkedList < TYPE_1 > METHOD_1 ( java.util.LinkedList < TYPE_1 > VAR_1 ) { VAR_1 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_1 . size ( ) ) > 1 ) { java.lang.System.err.println ( STRING_1 ) ; TYPE_1 VAR_2 = VAR_1 . remove ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; } java.lang.System.err.println ( VAR_1 . size ( ) ) ; return VAR_1 ; }\n", "fixed": "private java.util.LinkedList < TYPE_1 > METHOD_1 ( java.util.LinkedList < TYPE_1 > VAR_1 ) { VAR_1 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_1 . size ( ) ) > 1 ) { java.lang.System.err.println ( STRING_1 ) ; TYPE_1 VAR_2 = VAR_1 . remove ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; } return VAR_1 ; }\n"}
{"problem": "protected void METHOD_1 ( final TYPE_1 var ) { ( VAR_1 ) ++ ; VAR_2 = new TYPE_2 < > ( ) ; final java.util.Set < TYPE_1 > VAR_3 = VAR_4 . METHOD_2 ( ) ; VAR_4 = new java.util.HashMap < > ( ) ; VAR_5 = false ; TYPE_3 . METHOD_3 ( VAR_3 ) ; METHOD_4 ( var , false ) ; assert ! ( VAR_5 ) : STRING_1 ; }\n", "fixed": "protected void METHOD_1 ( final TYPE_1 var ) { ( VAR_1 ) ++ ; VAR_2 = new TYPE_2 < > ( ) ; final java.util.Set < TYPE_1 > VAR_3 = VAR_4 . METHOD_2 ( ) ; VAR_4 = new java.util.HashMap < > ( ) ; VAR_5 = false ; TYPE_3 . METHOD_3 ( VAR_3 , var ) ; METHOD_4 ( var , false ) ; assert ! ( VAR_5 ) : STRING_1 ; }\n"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "fixed": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"problem": "void METHOD_1 ( TYPE_1 event ) { if ( ( event . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) ) < FLOAT_1 ) event . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_5 ( FLOAT_1 ) ; else { double VAR_2 = FLOAT_1 - ( event . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) ) ; event . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_5 ( ( FLOAT_1 + ( VAR_2 - ( VAR_2 / INT_1 ) ) ) ) ; } }\n", "fixed": "void METHOD_1 ( TYPE_1 event ) { if ( ( event . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) ) < FLOAT_1 ) event . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_5 ( FLOAT_1 ) ; else { double VAR_2 = ( event . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) ) - FLOAT_1 ; event . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_5 ( ( FLOAT_1 + ( VAR_2 - ( VAR_2 / INT_1 ) ) ) ) ; } }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( this , this ) ; VAR_3 = new TYPE_3 ( this , null ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_5 . METHOD_5 ( this ) ; VAR_5 . METHOD_6 ( this ) ; METHOD_7 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( this , this ) ; VAR_3 = new TYPE_3 ( this , null ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_5 . METHOD_5 ( this ) ; VAR_5 . METHOD_6 ( this ) ; METHOD_7 ( false ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { if ( ( key ) != null ) { return new TYPE_1 ( VAR_1 , VAR_2 , name , VAR_3 , key , VAR_4 , VAR_5 , VAR_6 , METHOD_2 ( ) ) ; } return new TYPE_1 ( VAR_1 , VAR_2 , VAR_7 , name , VAR_3 , VAR_4 , VAR_5 , VAR_6 , METHOD_2 ( ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { if ( ( key ) != null ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_7 , name , VAR_3 , key , VAR_4 , VAR_5 , VAR_6 , METHOD_2 ( ) ) ; } return new TYPE_1 ( VAR_1 , VAR_2 , VAR_7 , name , VAR_3 , VAR_4 , VAR_5 , VAR_6 , METHOD_2 ( ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cb6f6e26c12839e59243f25bfb142ec5e5b71135", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     public static class MyBean {\n        @org.apache.camel.RecipientList(strategyRef = \"myStrategy\", parallelProcessing = true, timeout = 2000)\n         public String[] route(String body) {\n             return new String[] {\"direct:a\", \"direct:b\", \"direct:c\"};\n         }", "fixed": "     public static class MyBean {\n        @org.apache.camel.RecipientList(strategyRef = \"myStrategy\", parallelProcessing = true, timeout = 1000)\n         public String[] route(String body) {\n             return new String[] {\"direct:a\", \"direct:b\", \"direct:c\"};\n         }", "sourceBeforeFix": "timeout=2000", "sourceAfterFix": "timeout=1000"}
{"problem": "private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String [ ] VAR_2 = new java.lang.String [ VAR_1 . METHOD_2 ( ) ] ; for ( int i = 0 ; i < ( VAR_1 . METHOD_2 ( ) ) ; i ++ ) { VAR_2 [ i ] = java.lang.Double . METHOD_3 ( VAR_1 . METHOD_4 ( i ) ) . toString ( ) ; } return TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ; }\n", "fixed": "private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String [ ] VAR_2 = new java.lang.String [ VAR_1 . METHOD_2 ( ) ] ; for ( int i = 0 ; i < ( VAR_1 . METHOD_2 ( ) ) ; i ++ ) { VAR_2 [ i ] = java.lang.Double . METHOD_3 ( VAR_1 . METHOD_4 ( i ) ) . toString ( ) ; } return TYPE_2 . METHOD_5 ( VAR_2 , \"\\t\" ) ; }\n"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return result;\n   }\n  private String rule(String rule) {\n     return \"com.google.javascript.jscomp.ConformanceRules$\" + rule;\n   }\n  private String value(String value) {\n     return \"  value: '\" + value + \"'\\n\";\n   }", "fixed": "     return result;\n   }\n  private static String rule(String rule) {\n     return \"com.google.javascript.jscomp.ConformanceRules$\" + rule;\n   }\n  private static String value(String value) {\n     return \"  value: '\" + value + \"'\\n\";\n   }", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"problem": "void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 = false ; try { VAR_4 = TYPE_3 . open ( ) ; VAR_4 . METHOD_2 ( false ) ; } catch ( java.io.IOException VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } try { VAR_4 . METHOD_1 ( VAR_2 ) ; add ( VAR_1 , VAR_6 ) ; } catch ( java.io.IOException VAR_5 ) { METHOD_3 ( ) ; } }\n", "fixed": "void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 = false ; try { VAR_4 = TYPE_3 . open ( ) ; VAR_4 . METHOD_2 ( false ) ; } catch ( java.io.IOException VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } try { VAR_4 . METHOD_1 ( VAR_2 ) ; add ( VAR_1 , VAR_6 ) ; } catch ( java.io.IOException VAR_5 ) { add ( VAR_1 , 0 ) ; METHOD_3 ( ) ; } }\n"}
{"fixCommitSHA1": "1a5ec9791516322cfeb14508732b4a7025bef2e0", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "         request.conditionValue = conditionValue;\n         request.order = order;\n        final Map response = api.path(routes.ExtractorsResource().list(input.getId()), Map.class)\n                 .node(node)\n                 .expect(Http.Status.CREATED)\n                 .body(request)", "fixed": "         request.conditionValue = conditionValue;\n         request.order = order;\n        final Map response = api.path(routes.ExtractorsResource().create(input.getId()), Map.class)\n                 .node(node)\n                 .expect(Http.Status.CREATED)\n                 .body(request)", "sourceBeforeFix": "routes.ExtractorsResource().list(input.getId())", "sourceAfterFix": "routes.ExtractorsResource().create(input.getId())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface WsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) return true ; if ( obj == null ) return false ; if ( ( getClass ( ) ) != ( obj . getClass ( ) ) ) return false ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; if ( ! ( TYPE_2 . equals ( VAR_2 , VAR_3 ) ) ) return false ; if ( ( VAR_4 ) != ( VAR_5 ) ) return false ; return true ; }\n", "fixed": "public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) return true ; if ( obj == null ) return false ; if ( ( getClass ( ) ) != ( obj . getClass ( ) ) ) return false ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; if ( ( VAR_4 ) != ( VAR_5 ) ) return false ; return true ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( VAR_1 ) ; if ( VAR_3 != null ) { return TYPE_1 . status ( VAR_4 ) . build ( ) ; } return TYPE_1 . METHOD_4 ( VAR_3 ) . build ( ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( VAR_1 ) ; if ( VAR_3 == null ) { return TYPE_1 . status ( VAR_4 ) . build ( ) ; } return TYPE_1 . METHOD_4 ( VAR_3 ) . build ( ) ; }\n"}
{"problem": "protected void METHOD_1 ( java.lang.Boolean VAR_1 ) { if ( VAR_1 ) { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; } else { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 , VAR_5 ) ; METHOD_5 ( ) ; android.content.Intent intent = new android.content.Intent ( METHOD_6 ( ) , VAR_6 class ) ; intent . METHOD_7 ( STRING_1 , VAR_2 ) ; METHOD_8 ( intent ) ; METHOD_9 ( VAR_7 , VAR_8 ) ; } }\n", "fixed": "protected void METHOD_1 ( java.lang.Boolean VAR_1 ) { if ( VAR_1 ) { METHOD_2 ( ) ; METHOD_4 ( ) ; } else { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 , VAR_5 ) ; METHOD_5 ( ) ; android.content.Intent intent = new android.content.Intent ( METHOD_6 ( ) , VAR_6 class ) ; intent . METHOD_7 ( STRING_1 , VAR_2 ) ; METHOD_8 ( intent ) ; METHOD_9 ( VAR_7 , VAR_8 ) ; } }\n"}
{"problem": "public static final java.util.Date METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( ( VAR_2 != null ) && ( ( VAR_2 . trim ( ) . length ( ) ) != 0 ) ) { TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; return VAR_3 . METHOD_3 ( VAR_2 ) ; } return null ; }\n", "fixed": "public static final java.util.Date METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( ( VAR_2 != null ) && ( ( VAR_2 . trim ( ) . length ( ) ) != 0 ) ) { TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; return VAR_3 . METHOD_3 ( VAR_2 . trim ( ) ) ; } return null ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . METHOD_2 ( ) ) ) { if ( VAR_3 . getText ( ) . equals ( STRING_1 ) ) METHOD_3 ( VAR_4 , STRING_2 , STRING_3 , VAR_5 ) ; else if ( ( java.lang.Integer.parseInt ( VAR_3 . getText ( ) ) ) > 0 ) { METHOD_4 ( ) ; } else METHOD_3 ( VAR_4 , STRING_4 , STRING_3 , VAR_5 ) ; } else METHOD_3 ( VAR_4 , STRING_5 , STRING_6 , VAR_5 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . METHOD_2 ( ) ) ) { if ( VAR_3 . getText ( ) . equals ( STRING_1 ) ) METHOD_3 ( VAR_4 , STRING_2 , STRING_3 , VAR_5 ) ; if ( ( java.lang.Integer.parseInt ( VAR_3 . getText ( ) ) ) > 0 ) { METHOD_4 ( ) ; } else METHOD_3 ( VAR_4 , STRING_4 , STRING_3 , VAR_5 ) ; } else METHOD_3 ( VAR_4 , STRING_5 , STRING_6 , VAR_5 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();", "fixed": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"problem": "public java.lang.String toString ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; VAR_1 . append ( METHOD_1 ( ) . METHOD_2 ( ) ) . append ( STRING_1 ) . append ( context . getString ( VAR_2 ) ) . append ( STRING_2 ) . append ( METHOD_3 ( ) ) . append ( STRING_3 ) . append ( STRING_4 ) . append ( getName ( ) ) ; return VAR_1 . toString ( ) ; }\n", "fixed": "public java.lang.String toString ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; if ( ( METHOD_1 ( ) ) != null ) { VAR_1 . append ( METHOD_1 ( ) . METHOD_2 ( ) ) ; } VAR_1 . append ( STRING_1 ) . append ( context . getString ( VAR_2 ) ) . append ( STRING_2 ) . append ( METHOD_3 ( ) ) . append ( STRING_3 ) . append ( STRING_4 ) . append ( getName ( ) ) ; return VAR_1 . toString ( ) ; }\n"}
{"problem": "protected boolean METHOD_1 ( TYPE_1 c ) { java.util.Random VAR_1 = new java.util.Random ( ) ; int key = VAR_1 . METHOD_2 ( INT_1 ) ; boolean VAR_2 = false ; if ( VAR_3 . METHOD_3 ( key ) ) { METHOD_1 ( c ) ; } else if ( ! ( VAR_3 . METHOD_3 ( key ) ) ) { c . METHOD_4 ( key ) ; VAR_3 . put ( key , c ) ; VAR_2 = true ; } return VAR_2 ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 c ) { java.util.Random VAR_1 = new java.util.Random ( ) ; while ( true ) { int key = VAR_1 . METHOD_2 ( INT_1 ) ; if ( ! ( VAR_3 . METHOD_3 ( key ) ) ) { c . METHOD_4 ( key ) ; VAR_3 . put ( key , c ) ; return ; } } }\n"}
{"problem": "java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String name ) { java.lang.StringBuilder VAR_4 = new java.lang.StringBuilder ( ) ; METHOD_2 ( VAR_4 , VAR_1 , STRING_1 ) ; METHOD_2 ( VAR_4 , VAR_2 , VAR_5 ) ; METHOD_2 ( VAR_4 , VAR_3 , VAR_5 ) ; METHOD_2 ( VAR_4 , name , VAR_5 ) ; java.lang.String query = VAR_4 . toString ( ) ; java.lang.String VAR_6 = METHOD_3 ( query ) ; return VAR_6 == null ? query : VAR_6 ; }\n", "fixed": "java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String name ) { java.lang.StringBuilder VAR_4 = new java.lang.StringBuilder ( ) ; METHOD_2 ( VAR_4 , VAR_1 , STRING_1 ) ; METHOD_2 ( VAR_4 , VAR_2 , VAR_5 ) ; METHOD_2 ( VAR_4 , VAR_3 , VAR_5 ) ; METHOD_2 ( VAR_4 , name , VAR_5 ) ; return VAR_4 . toString ( ) ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private static java.lang.StringBuilder METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ) { java.lang.StringBuilder VAR_2 = new java.lang.StringBuilder ( ) ; VAR_2 . append ( CHAR_1 ) . append ( TYPE_2 . METHOD_2 ( VAR_1 ) . replaceAll ( STRING_1 ) ) . append ( CHAR_1 ) ; return VAR_2 ; } else { return new java.lang.StringBuilder ( VAR_1 ) ; } }\n", "fixed": "private static java.lang.StringBuilder METHOD_1 ( final java.lang.String VAR_1 ) { if ( VAR_1 != null ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ) { java.lang.StringBuilder VAR_2 = new java.lang.StringBuilder ( ) ; VAR_2 . append ( CHAR_1 ) . append ( TYPE_2 . METHOD_2 ( VAR_1 ) . replaceAll ( STRING_1 ) ) . append ( CHAR_1 ) ; return VAR_2 ; } else { return new java.lang.StringBuilder ( VAR_1 ) ; } } else { return new java.lang.StringBuilder ( ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.util.ArrayList < java.lang.String > VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; java.util.ArrayList < java.lang.String > VAR_3 = new java.util.ArrayList < java.lang.String > ( ) ; VAR_2 = VAR_1 ; VAR_3 = this . VAR_4 ; TYPE_1 VAR_5 = new TYPE_1 ( this . name , VAR_2 , VAR_3 ) ; for ( TYPE_2 t : this . VAR_6 ) { VAR_5 . METHOD_2 ( t . METHOD_3 ( VAR_2 ) ) ; } return VAR_5 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.util.ArrayList < java.lang.String > VAR_1 ) { TYPE_1 VAR_5 = new TYPE_1 ( this . name , VAR_1 , this . VAR_4 ) ; for ( int i = 0 ; i < ( this . VAR_6 . size ( ) ) ; i ++ ) { VAR_5 . METHOD_2 ( this . VAR_6 . get ( i ) . METHOD_3 ( VAR_1 ) ) ; } return VAR_5 ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 ) == INT_1 ) { switch ( VAR_2 . METHOD_2 ( ) ) { case 0 : VAR_3 = 0 ; break ; case 1 : VAR_3 = INT_2 ; break ; default : VAR_3 = 0 ; break ; } } else { VAR_3 = 0 ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 ) == INT_1 ) { switch ( VAR_2 . METHOD_2 ( ) ) { case 0 : VAR_3 = 0 ; break ; case 1 : VAR_3 = INT_2 ; break ; case INT_2 : VAR_3 = INT_1 ; break ; default : VAR_3 = 0 ; break ; } } else { VAR_3 = 0 ; } }\n"}
{"problem": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { METHOD_2 ( true ) ; if ( ( METHOD_3 ( ) ) != null ) { if ( ( VAR_4 . query ) == null ) { VAR_4 . query = METHOD_3 ( ) . getString ( VAR_5 ) ; } return VAR_1 . METHOD_4 ( VAR_6 , VAR_2 , false ) ; } else { return VAR_1 . METHOD_4 ( VAR_7 , VAR_2 , false ) ; } }\n", "fixed": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { METHOD_2 ( true ) ; if ( ( METHOD_3 ( ) ) != null ) { if ( ( query ) == null ) { query = METHOD_3 ( ) . getString ( VAR_5 ) ; } return VAR_1 . METHOD_4 ( VAR_6 , VAR_2 , false ) ; } else { return VAR_1 . METHOD_4 ( VAR_7 , VAR_2 , false ) ; } }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( long VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , int start , int end ) { java.lang.String [ ] names = null ; boolean VAR_4 = false ; if ( TYPE_2 . METHOD_2 ( VAR_3 ) ) { names = new java.lang.String [ ] { TYPE_3 . METHOD_3 ( TYPE_3 . toLowerCase ( VAR_3 ) . trim ( ) , VAR_5 ) } ; } else { VAR_4 = true ; } return METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , names , start , end ) ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( long VAR_1 , int VAR_2 , java.lang.String VAR_3 , int start , int end ) { java.lang.String [ ] names = null ; boolean VAR_4 = false ; if ( TYPE_2 . METHOD_2 ( VAR_3 ) ) { names = new java.lang.String [ ] { TYPE_3 . METHOD_3 ( TYPE_3 . toLowerCase ( VAR_3 ) . trim ( ) , VAR_5 ) } ; } else { VAR_4 = true ; } return METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , names , start , end ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 < TYPE_2 > result ) { if ( ( result . size ( ) ) > 0 ) { java.util.List < TYPE_2 > VAR_1 = result . METHOD_2 ( 0 , result . size ( ) ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 < TYPE_2 > result ) { if ( ( result . size ( ) ) >= 0 ) { java.util.List < TYPE_2 > VAR_1 = result . METHOD_2 ( 0 , result . size ( ) ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; } }\n"}
{"problem": "protected void METHOD_1 ( java.lang.String result ) { if ( result . equals ( STRING_1 ) ) { VAR_1 = new TYPE_1 ( METHOD_2 ( ) , VAR_2 , VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; TYPE_3 . METHOD_4 ( METHOD_2 ( ) , STRING_2 , VAR_4 ) . show ( ) ; } if ( result . equals ( STRING_3 ) ) { TYPE_3 . METHOD_4 ( METHOD_2 ( ) , STRING_3 , VAR_4 ) . show ( ) ; } }\n", "fixed": "protected void METHOD_1 ( java.lang.String result ) { if ( result . equals ( STRING_1 ) ) { VAR_1 = new TYPE_1 ( METHOD_2 ( ) , VAR_2 , VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; } if ( result . equals ( STRING_3 ) ) { TYPE_3 . METHOD_4 ( METHOD_2 ( ) , STRING_3 , VAR_4 ) . show ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = null ; try { VAR_1 = METHOD_2 ( VAR_2 . getId ( ) ) ; } catch ( TYPE_3 VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 ) ; TYPE_4 . METHOD_7 ( ) . METHOD_8 ( VAR_1 ) ; METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( STRING_2 , null ) ; METHOD_4 ( ) . METHOD_9 ( ) . METHOD_10 ( TYPE_5 . METHOD_11 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = null ; try { VAR_1 = METHOD_2 ( VAR_2 . getId ( ) ) ; } catch ( TYPE_3 VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } TYPE_4 . METHOD_7 ( ) . METHOD_8 ( VAR_1 , null , METHOD_4 ( ) . METHOD_5 ( ) ) ; METHOD_4 ( ) . METHOD_9 ( ) . METHOD_10 ( TYPE_5 . METHOD_11 ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String name , java.lang.String state , java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 , int VAR_7 , int VAR_8 , int VAR_9 , int VAR_10 , int VAR_11 , int VAR_12 , int VAR_13 , int VAR_14 ) { VAR_15 . METHOD_2 ( name , state , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String name , java.lang.String state , java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 , int VAR_7 , int VAR_8 , int VAR_9 , int VAR_10 , int VAR_11 , int VAR_12 , int VAR_13 , int VAR_14 ) { }\n"}
{"problem": "public boolean METHOD_1 ( ) { if ( ( ( VAR_1 ) == STRING_1 ) && ( ( VAR_2 ) >= FLOAT_1 ) ) return true ; else if ( ( ( VAR_1 ) == STRING_2 ) && ( ( VAR_2 ) <= FLOAT_1 ) ) return true ; else return false ; }\n", "fixed": "public boolean METHOD_1 ( ) { if ( ( VAR_1 . equals ( STRING_1 ) ) && ( ( VAR_2 ) >= FLOAT_1 ) ) return true ; else if ( ( VAR_1 . equals ( STRING_2 ) ) && ( ( VAR_2 ) < FLOAT_1 ) ) return true ; else return false ; }\n"}
{"project": "Closure", "bugId": 98, "problem": " Reference getInitializingReferenceForConstants() {\n     boolean isAssignedOnceInLifetime() {\n       Reference ref = getOneAndOnlyAssignment();\n       if (ref == null) {\n         return false;\n       }\n       return true;\n     }\n     ", "fixed": " Reference getInitializingReferenceForConstants() {\n     boolean isAssignedOnceInLifetime() {\n       Reference ref = getOneAndOnlyAssignment();\n       if (ref == null) {\n         return false;\n       }\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          return false;\n        }\n      }\n       return true;\n     }\n     ", "observations": "New class attributes were added.", "repairActions": ["assignAdd", "condBranIfElseAdd", "loopAdd", "mcAdd", "retBranchAdd", "varAdd"], "repairPatterns": ["condBlockOthersAdd", "condBlockRetAdd", "missComp", "missNullCheckN"]}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void update ( ) { if ( ( ( x ) + ( VAR_1 ) ) < 0 ) { x = 0 ; } else if ( ( ( x ) + ( VAR_1 ) ) > ( INT_1 - ( VAR_2 ) ) ) { x = INT_2 - ( VAR_2 ) ; } else x += VAR_1 ; if ( ( ( y ) + ( VAR_3 ) ) < INT_3 ) y += VAR_3 ; }\n", "fixed": "public void update ( ) { if ( ( ( x ) + ( VAR_1 ) ) < 0 ) { x = 0 ; } else if ( ( ( x ) + ( VAR_1 ) ) > ( INT_1 - ( VAR_2 ) ) ) { x = INT_2 - ( VAR_2 ) ; } else x += VAR_1 ; if ( ( ( y ) + ( VAR_3 ) ) < INT_3 ) y += VAR_3 ; if ( ( ( y ) + ( VAR_3 ) ) < 0 ) y = 0 ; }\n"}
{"fixCommitSHA1": "ec666401f3cf68fd5c5f5b4009deec12ab6e3f45", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\ttry {\n \t\t\titem = getItem(itemName);\n \t\t} catch (ItemNotFoundException e) {\n\t\t\tlogger.error(\"Cannot retrieve item {} for widget {}\", itemName, w.eClass().getInstanceTypeName());\n \t\t}\n \t\treturn formatLabel(item, itemName, label);\n \t}", "fixed": " \t\ttry {\n \t\t\titem = getItem(itemName);\n \t\t} catch (ItemNotFoundException e) {\n\t\t\tlogger.debug(\"Cannot retrieve item {} for widget {}\", itemName, w.eClass().getInstanceTypeName());\n \t\t}\n \t\treturn formatLabel(item, itemName, label);\n \t}", "sourceBeforeFix": "logger.error(\"Cannot retrieve item {} for widget {}\",itemName,w.eClass().getInstanceTypeName())", "sourceAfterFix": "logger.debug(\"Cannot retrieve item {} for widget {}\",itemName,w.eClass().getInstanceTypeName())"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( TYPE_3 . METHOD_2 ( INT_1 ) , new TYPE_4 < TYPE_5 > ( ) { public void handle ( TYPE_5 event ) { if ( VAR_2 . getValue ( ) ) VAR_3 . METHOD_3 ( ) ; } } ) ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( new TYPE_2 ( TYPE_3 . METHOD_2 ( INT_1 ) , new TYPE_4 < TYPE_5 > ( ) { public void handle ( TYPE_5 event ) { if ( VAR_2 . getValue ( ) ) VAR_3 . METHOD_3 ( ) ; } } ) ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( ) ; }\n"}
{"fixCommitSHA1": "7ffa9eb8a9b21d708eba945be8709207503d9247", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    * should not have to drop definitions itself.\n    */\n   private void dropUntypedExterns() {\n    for (String externName : nameDefinitionMultimap.keySet()) {\n       for (Definition def : new ArrayList<Definition>(nameDefinitionMultimap.get(externName))) {\n         if (def instanceof ExternalNameOnlyDefinition) {\n           Node node = def.getLValue();", "fixed": "    * should not have to drop definitions itself.\n    */\n   private void dropUntypedExterns() {\n    for (String externName : nameDefinitionMultimap.keys()) {\n       for (Definition def : new ArrayList<Definition>(nameDefinitionMultimap.get(externName))) {\n         if (def instanceof ExternalNameOnlyDefinition) {\n           Node node = def.getLValue();", "sourceBeforeFix": "nameDefinitionMultimap.keySet()", "sourceAfterFix": "nameDefinitionMultimap.keys()"}
{"problem": "private TYPE_1 METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 ) { TYPE_1 VAR_2 = VAR_1 . iterator ( ) . METHOD_2 ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { if ( ( VAR_3 . METHOD_3 ( ) ) == null ) { continue ; } if ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_3 ( ) ) ) { VAR_2 = VAR_3 ; } } return VAR_2 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 ) { if ( VAR_1 . isEmpty ( ) ) { return null ; } TYPE_1 VAR_2 = VAR_1 . iterator ( ) . METHOD_2 ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { if ( ( VAR_3 . METHOD_3 ( ) ) == null ) { continue ; } if ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_3 ( ) ) ) { VAR_2 = VAR_3 ; } } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( new TYPE_4 [ ] { VAR_3 , VAR_4 } ) ; TYPE_5 . assertNotNull ( VAR_2 ) ; TYPE_6 . assertThat ( VAR_2 , TYPE_7 . METHOD_3 ( VAR_5 class ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( ) ; try ( TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( new TYPE_4 [ ] { VAR_3 , VAR_4 } ) ) { TYPE_5 . assertNotNull ( VAR_2 ) ; TYPE_6 . assertThat ( VAR_2 , TYPE_7 . METHOD_3 ( VAR_5 class ) ) ; } }\n"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; boolean end = false ; while ( ! end ) { TYPE_2 VAR_2 = METHOD_3 ( ) ; end = VAR_2 . METHOD_4 ( ) ; if ( ! end ) { TYPE_3 VAR_3 = METHOD_5 ( ) ; if ( VAR_3 != null ) { METHOD_6 ( VAR_3 ) ; } else end = true ; } else { boolean VAR_4 = METHOD_7 ( VAR_2 ) ; if ( VAR_4 ) { METHOD_8 ( ) ; } } } }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; boolean end = false ; while ( ! end ) { TYPE_2 VAR_2 = METHOD_3 ( null ) ; end = VAR_2 . METHOD_4 ( ) ; if ( ! end ) { TYPE_3 VAR_3 = METHOD_5 ( ) ; if ( VAR_3 != null ) { METHOD_6 ( VAR_3 ) ; } else end = true ; } else { boolean VAR_4 = METHOD_7 ( VAR_2 ) ; if ( VAR_4 ) { METHOD_8 ( ) ; } } } }\n"}
{"problem": "private void METHOD_1 ( ) { for ( TYPE_1 key : VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( key ) ; } VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_5 = new TYPE_2 ( VAR_2 ) ; VAR_1 . METHOD_4 ( ) ; VAR_6 . METHOD_4 ( ) ; VAR_7 . METHOD_5 ( ) ; VAR_8 . METHOD_6 ( ) ; VAR_8 . METHOD_7 ( ) ; VAR_8 . METHOD_8 ( ) ; VAR_9 . count = 0 ; VAR_10 = true ; VAR_11 = true ; }\n", "fixed": "private void METHOD_1 ( ) { for ( TYPE_1 key : VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( key ) ; } VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_5 = new TYPE_2 ( VAR_2 ) ; VAR_1 . METHOD_4 ( ) ; VAR_6 . METHOD_4 ( ) ; VAR_7 . METHOD_5 ( ) ; VAR_8 . METHOD_7 ( ) ; VAR_8 . METHOD_8 ( ) ; VAR_9 . count = 0 ; VAR_10 = true ; VAR_11 = true ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . info ( STRING_1 ) ; TYPE_1 VAR_2 ; try { VAR_2 = new TYPE_1 ( this . VAR_3 ) ; while ( true ) { TYPE_2 VAR_4 = VAR_2 . METHOD_2 ( ) ; TYPE_3 VAR_5 = new TYPE_3 ( VAR_4 ) ; VAR_6 . execute ( VAR_5 ) ; } } catch ( java.io.IOException VAR_7 ) { VAR_1 . error ( STRING_2 , VAR_7 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . info ( STRING_1 ) ; TYPE_1 VAR_2 ; try { VAR_2 = new TYPE_1 ( this . VAR_3 ) ; while ( true ) { TYPE_2 VAR_4 = VAR_2 . METHOD_2 ( ) ; TYPE_3 VAR_5 = new TYPE_3 ( VAR_4 , this . VAR_6 ) ; VAR_6 . execute ( VAR_5 ) ; } } catch ( java.io.IOException VAR_7 ) { VAR_1 . error ( STRING_2 , VAR_7 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) throws TYPE_2 , java.io.IOException { TYPE_3 VAR_1 = ( ( TYPE_3 ) ( event . METHOD_2 ( ) ) ) ; java.lang.System.out.println ( ( ( ( STRING_1 + ( VAR_1 . getId ( ) ) ) + STRING_2 ) + ( VAR_1 . METHOD_3 ( ) ) ) ) ; VAR_1 = METHOD_4 ( VAR_1 , STRING_3 , event . METHOD_5 ( ) ) ; event . METHOD_6 ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) throws TYPE_2 , java.io.IOException { TYPE_3 VAR_1 = ( ( TYPE_3 ) ( event . METHOD_2 ( ) ) ) ; java.lang.System.out.println ( ( ( ( STRING_1 + ( VAR_1 . getId ( ) ) ) + STRING_2 ) + ( VAR_1 . METHOD_3 ( ) ) ) ) ; VAR_1 = METHOD_4 ( VAR_1 , STRING_3 , event . METHOD_5 ( ) , null ) ; event . METHOD_6 ( VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 ) { if ( ( ! ( VAR_4 ) ) && ( ( this . VAR_5 ) instanceof TYPE_1 ) ) { VAR_4 = ( ( TYPE_1 ) ( this . VAR_5 ) ) . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; if ( VAR_4 ) VAR_5 . start ( ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 ) { if ( ( ! ( VAR_4 ) ) && ( ( VAR_5 ) == null ) ) { VAR_5 = new TYPE_1 ( this ) ; VAR_4 = ( ( TYPE_1 ) ( this . VAR_5 ) ) . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; java.lang.System.out.println ( VAR_4 ) ; if ( VAR_4 ) { VAR_5 . start ( ) ; } else { VAR_5 = null ; } } }\n"}
{"problem": "public boolean METHOD_1 ( ) { if ( VAR_1 . METHOD_1 ( ) ) return true ; if ( ( VAR_2 . METHOD_1 ( ) ) && ( ! ( VAR_3 . isEmpty ( ) ) ) ) { TYPE_1 VAR_4 = VAR_2 . METHOD_2 ( ) ; VAR_1 = new TYPE_2 ( VAR_4 . METHOD_3 ( VAR_5 ) , VAR_3 , VAR_6 , VAR_7 ) ; return METHOD_1 ( ) ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( ) { if ( VAR_1 . METHOD_1 ( ) ) return true ; if ( ( VAR_2 . METHOD_1 ( ) ) && ( ! ( VAR_3 . isEmpty ( ) ) ) ) { TYPE_1 VAR_4 = VAR_2 . METHOD_2 ( ) ; VAR_1 = new TYPE_2 ( VAR_4 . METHOD_3 ( VAR_5 , true ) , VAR_3 , VAR_6 , VAR_7 ) ; return METHOD_1 ( ) ; } return false ; }\n"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.util.Calendar VAR_3 ) { long VAR_4 = TYPE_1 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ; long VAR_6 = TYPE_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ; VAR_3 . add ( VAR_7 , ( ( int ) ( VAR_6 - VAR_4 ) ) ) ; METHOD_5 ( VAR_5 ) ; }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.util.Calendar VAR_3 ) { long VAR_4 = TYPE_1 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ; long VAR_6 = TYPE_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ; VAR_3 . add ( VAR_7 , ( ( int ) ( VAR_6 - VAR_4 ) ) ) ; METHOD_5 ( VAR_3 ) ; }\n"}
{"problem": "public boolean METHOD_1 ( int VAR_1 , TYPE_1 event ) { if ( VAR_2 ) { switch ( VAR_1 ) { case VAR_3 : VAR_4 . METHOD_2 ( ) ; return true ; case VAR_5 : VAR_4 . METHOD_3 ( ) ; return true ; default : return super . METHOD_1 ( VAR_1 , event ) ; } } else { return super . METHOD_1 ( VAR_1 , event ) ; } }\n", "fixed": "public boolean METHOD_1 ( int VAR_1 , TYPE_1 event ) { if ( VAR_2 ) { switch ( VAR_1 ) { case VAR_3 : java.lang.String a = null ; a . length ( ) ; VAR_4 . METHOD_3 ( ) ; return true ; case VAR_5 : VAR_4 . METHOD_2 ( ) ; return true ; default : return super . METHOD_1 ( VAR_1 , event ) ; } } else { return super . METHOD_1 ( VAR_1 , event ) ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FileEndpointBuilder\n             extends\n                 FileEndpointConsumerBuilder, FileEndpointProducerBuilder {\n         default AdvancedFileEndpointBuilder advanced() {", "fixed": "     \n    public interface FileEndpointBuilder\n             extends\n                 FileEndpointConsumerBuilder, FileEndpointProducerBuilder {\n         default AdvancedFileEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JMXEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedJMXEndpointBuilder advanced() {\n             return (AdvancedJMXEndpointBuilder) this;\n         }", "fixed": "     \n    public interface JMXEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedJMXEndpointBuilder advanced() {\n             return (AdvancedJMXEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public static void METHOD_1 ( int [ ] data ) { int VAR_1 = data [ index ] ; for ( int index = 0 ; index < ( data . length ) ; index ++ ) { VAR_1 = data [ index ] ; VAR_2 = index ; for ( int VAR_3 = index + 1 ; VAR_3 < ( data . length ) ; VAR_3 ++ ) { if ( ( data [ VAR_3 ] ) < VAR_1 ) { VAR_1 = data [ VAR_3 ] ; VAR_2 = VAR_3 ; } } } }\n", "fixed": "public static void METHOD_1 ( int [ ] data ) { for ( int index = 0 ; index < ( data . length ) ; index ++ ) { int VAR_1 = data [ index ] ; int VAR_2 = index ; for ( int VAR_3 = index + 1 ; VAR_3 < ( data . length ) ; VAR_3 ++ ) { if ( ( data [ VAR_3 ] ) < VAR_1 ) { VAR_1 = data [ VAR_3 ] ; VAR_2 = VAR_3 ; } } } }\n"}
{"fixCommitSHA1": "32b8994480ec94cb1f28ba9cd295cd85cc7fe064", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "           if (aggregateData == null) {\n             aggregateData = newData.deepCopy();\n           } else {\n            aggregateData.setAvgColLen(Math.min(aggregateData.getAvgColLen(),\n                 newData.getAvgColLen()));\n             aggregateData.setMaxColLen(Math.max(aggregateData.getMaxColLen(),\n                 newData.getMaxColLen()));", "fixed": "           if (aggregateData == null) {\n             aggregateData = newData.deepCopy();\n           } else {\n            aggregateData.setAvgColLen(Math.max(aggregateData.getAvgColLen(),\n                 newData.getAvgColLen()));\n             aggregateData.setMaxColLen(Math.max(aggregateData.getMaxColLen(),\n                 newData.getMaxColLen()));", "sourceBeforeFix": "Math.min(aggregateData.getAvgColLen(),newData.getAvgColLen())", "sourceAfterFix": "Math.max(aggregateData.getAvgColLen(),newData.getAvgColLen())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 , INT_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( 1 , 1 ) ; VAR_1 . set ( VAR_2 , VAR_3 ) ; VAR_1 . set ( VAR_2 . METHOD_2 ( ) , ( ( VAR_2 . METHOD_3 ( ) ) + 1 ) , VAR_3 ) ; assertEquals ( STRING_1 , VAR_3 , VAR_1 . get ( VAR_2 ) ) ; VAR_1 . step ( ) ; assertEquals ( STRING_2 , VAR_4 , VAR_1 . get ( VAR_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( 1 , 1 ) ; VAR_1 . set ( VAR_2 , VAR_3 ) ; VAR_1 . set ( VAR_2 . METHOD_2 ( ) , ( ( VAR_2 . METHOD_3 ( ) ) + 1 ) , VAR_3 ) ; assertEquals ( STRING_1 , VAR_3 , VAR_1 . get ( VAR_2 ) ) ; VAR_1 . step ( ) ; assertEquals ( STRING_2 , VAR_4 , VAR_1 . get ( VAR_2 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.io.File > VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; java.lang.String VAR_4 = ( ( ( ( ( ( ( ( STRING_1 + ( VAR_5 ) ) + STRING_2 ) + ( VAR_2 . METHOD_3 ( ) ) ) + STRING_3 ) + ( VAR_6 ) ) + STRING_2 ) + ( VAR_7 . METHOD_3 ( ) ) ) + STRING_4 ) + ( VAR_8 ) ; TYPE_1 . METHOD_4 ( VAR_4 , VAR_7 , VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.io.File > VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; java.lang.String VAR_4 = ( ( ( ( ( ( ( ( STRING_1 + ( VAR_5 ) ) + STRING_2 ) + ( VAR_2 . METHOD_3 ( ) ) ) + STRING_3 ) + ( VAR_6 ) ) + STRING_2 ) + ( VAR_7 . METHOD_3 ( ) ) ) + STRING_4 ) + ( VAR_8 ) ; TYPE_1 . METHOD_4 ( VAR_4 , VAR_2 , VAR_7 , VAR_1 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( long VAR_1 ) { try { java.util.List < TYPE_2 > VAR_2 ; VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; return TYPE_1 . METHOD_2 ( VAR_2 ) ; } catch ( java.lang.Exception VAR_4 ) { return TYPE_1 . build ( INT_1 , TYPE_3 . METHOD_3 ( VAR_4 ) ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.Long VAR_1 ) { try { java.util.List < TYPE_2 > VAR_2 ; VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; return TYPE_1 . METHOD_2 ( VAR_2 ) ; } catch ( java.lang.Exception VAR_4 ) { return TYPE_1 . build ( INT_1 , TYPE_3 . METHOD_3 ( VAR_4 ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { int n = VAR_1 . METHOD_2 ( ) ; int VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( n >= VAR_2 ) { out . METHOD_3 ( ( n - VAR_2 ) ) ; } else { int VAR_3 = VAR_2 % n ; out . METHOD_3 ( ( n - VAR_3 ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) { int n = VAR_1 . METHOD_2 ( ) ; int VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( n >= VAR_2 ) { out . METHOD_3 ( ( n - VAR_2 ) ) ; } else { int VAR_3 = VAR_2 % n ; if ( VAR_3 != 0 ) { out . METHOD_3 ( ( n - VAR_3 ) ) ; } else { out . METHOD_3 ( 0 ) ; } } }\n"}
{"problem": "public java.lang.Object METHOD_1 ( java.lang.Object node , int VAR_1 ) { final TYPE_1 VAR_2 = ( ( TYPE_1 ) ( node ) ) ; switch ( VAR_1 ) { case 0 : return null ; case 1 : return TYPE_2 . METHOD_2 ( VAR_2 . getType ( ) ) ; case INT_1 : return VAR_2 . METHOD_3 ( ) ; case INT_2 : return VAR_2 . METHOD_4 ( ) ; case INT_3 : return VAR_2 . getText ( ) ; default : return null ; } }\n", "fixed": "public java.lang.Object METHOD_1 ( java.lang.Object node , int VAR_1 ) { final TYPE_1 VAR_2 = ( ( TYPE_1 ) ( node ) ) ; java.lang.Object value ; switch ( VAR_1 ) { case 1 : value = TYPE_2 . METHOD_2 ( VAR_2 . getType ( ) ) ; break ; case INT_1 : value = VAR_2 . METHOD_3 ( ) ; break ; case INT_2 : value = VAR_2 . METHOD_4 ( ) ; break ; case INT_3 : value = VAR_2 . getText ( ) ; break ; default : value = null ; } return value ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCryptoCmsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default CryptoCmsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCryptoCmsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default CryptoCmsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResponseWildcard,NO_ANNOTATIONS,retrofit)"}
{"problem": "public void METHOD_1 ( int k ) { if ( ( k != ( - 1 ) ) && ( k < ( VAR_1 . size ( ) ) ) ) { java.lang.System.out.println ( k ) ; VAR_1 . remove ( k ) ; VAR_2 . remove ( k ) ; METHOD_2 ( ) ; } }\n", "fixed": "public void METHOD_1 ( int k ) { if ( ( k != ( - 1 ) ) && ( k < ( VAR_1 . size ( ) ) ) ) { VAR_1 . remove ( k ) ; VAR_2 . remove ( k ) ; METHOD_2 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 , java.io.IOException { java.io.File VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 . METHOD_3 ( ) ) { throw new TYPE_2 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } VAR_2 . METHOD_4 ( ) ; METHOD_5 ( new TYPE_3 ( VAR_1 ) ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 , java.io.IOException { java.io.File VAR_2 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_2 . METHOD_3 ( ) ) || ( ! ( VAR_2 . METHOD_4 ( ) ) ) ) { throw new TYPE_2 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } METHOD_5 ( new TYPE_3 ( VAR_1 ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int x = ( ( ( VAR_1 . x ) - ( offset . x ) ) - ( VAR_2 . y ) ) / ( VAR_3 ) ; int y = ( ( ( VAR_1 . y ) - ( offset . y ) ) - ( VAR_2 . y ) ) / ( VAR_3 ) ; if ( TYPE_1 . METHOD_2 ( x , y ) ) return TYPE_1 . METHOD_3 ( x , y ) ; return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int x = ( ( ( VAR_1 . x ) - ( offset . x ) ) - ( VAR_2 . x ) ) / ( VAR_3 ) ; int y = ( ( ( VAR_1 . y ) - ( offset . y ) ) - ( VAR_2 . y ) ) / ( VAR_3 ) ; if ( TYPE_1 . METHOD_2 ( x , y ) ) return TYPE_1 . METHOD_3 ( x , y ) ; return null ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DrillEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedDrillEndpointBuilder advanced() {\n             return (AdvancedDrillEndpointBuilder) this;\n         }", "fixed": "     \n    public interface DrillEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedDrillEndpointBuilder advanced() {\n             return (AdvancedDrillEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 , final double VAR_3 , final double VAR_4 , final double VAR_5 ) { return new TYPE_4 ( STRING_1 , VAR_1 , VAR_2 , VAR_3 ) . METHOD_2 ( VAR_4 ) . METHOD_3 ( VAR_5 ) . build ( ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( final java.lang.String label , final TYPE_2 VAR_1 , final TYPE_3 VAR_2 , final double VAR_3 , final double VAR_4 , final double VAR_5 ) { return new TYPE_4 ( label , VAR_1 , VAR_2 , VAR_3 ) . METHOD_2 ( VAR_4 ) . METHOD_3 ( VAR_5 ) . build ( ) ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( int index , boolean VAR_1 ) throws TYPE_2 { if ( index == 0 ) { return null ; } else { TYPE_1 VAR_2 = ( VAR_1 ) ? VAR_3 . get ( ( index - 1 ) ) : VAR_4 . get ( ( index - 1 ) ) ; if ( VAR_2 == null ) { throw new TYPE_2 ( STRING_1 ) ; } return VAR_2 ; } }\n", "fixed": "private TYPE_1 METHOD_1 ( int index , boolean VAR_1 ) throws TYPE_2 { if ( index == 0 ) { return null ; } else { TYPE_1 VAR_2 = ( VAR_1 ) ? VAR_4 . get ( ( index - 1 ) ) : VAR_3 . get ( ( index - 1 ) ) ; if ( VAR_2 == null ) { throw new TYPE_2 ( STRING_1 ) ; } return VAR_2 ; } }\n"}
{"problem": "private int METHOD_1 ( int VAR_1 , double VAR_2 ) { if ( VAR_1 > 1 ) { if ( ( VAR_1 < ( ( this . VAR_3 . length ) - 1 ) ) && ( VAR_2 > ( this . VAR_3 [ VAR_1 ] ) ) ) { return ++ VAR_1 ; } else if ( ( VAR_2 != 0 ) && ( VAR_2 < ( this . VAR_3 [ ( VAR_1 - 1 ) ] ) ) ) { return -- VAR_1 ; } return VAR_1 ; } return INT_1 ; }\n", "fixed": "private int METHOD_1 ( int VAR_1 , double VAR_2 ) { if ( VAR_1 > 1 ) { if ( ( VAR_1 < ( ( this . VAR_3 . length ) - 1 ) ) && ( VAR_2 >= ( this . VAR_3 [ VAR_1 ] ) ) ) { return ++ VAR_1 ; } else if ( ( VAR_2 != 0 ) && ( VAR_2 <= ( this . VAR_3 [ ( VAR_1 - 1 ) ] ) ) ) { return -- VAR_1 ; } return VAR_1 ; } return INT_1 ; }\n"}
{"problem": "public java.lang.String toString ( ) { return ( ( ( ( ( ( STRING_1 + ( attribute ) ) + STRING_2 ) + ( type . toString ( ) ) ) + STRING_2 ) + ( TYPE_1 . METHOD_1 ( value , type ) ) ) + STRING_2 ) + ( VAR_1 . toString ( ) ) ; }\n", "fixed": "public java.lang.String toString ( ) { return ( ( ( ( ( ( attribute ) + STRING_2 ) + ( type . toString ( ) ) ) + STRING_2 ) + ( TYPE_1 . METHOD_1 ( value , type ) ) ) + STRING_2 ) + ( VAR_1 . toString ( ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { int VAR_1 = ( VAR_2 . size ( ) ) - 1 ; int VAR_3 = VAR_2 . METHOD_2 ( VAR_4 ) ; if ( VAR_3 == VAR_1 ) { VAR_3 = 0 ; } else { VAR_3 ++ ; } return VAR_2 . get ( VAR_3 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { int VAR_1 = ( VAR_2 . size ( ) ) - 1 ; int VAR_3 = VAR_2 . METHOD_2 ( VAR_4 ) ; if ( VAR_3 == VAR_1 ) { VAR_3 = 0 ; } else { VAR_3 ++ ; } VAR_4 = VAR_2 . get ( VAR_3 ) ; return VAR_4 ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JcrEndpointBuilder\n             extends\n                 JcrEndpointConsumerBuilder, JcrEndpointProducerBuilder {\n         default AdvancedJcrEndpointBuilder advanced() {", "fixed": "     \n    public interface JcrEndpointBuilder\n             extends\n                 JcrEndpointConsumerBuilder, JcrEndpointProducerBuilder {\n         default AdvancedJcrEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; TYPE_1 b = new TYPE_1 ( ) ; if ( ( VAR_2 ) == 1 ) b . METHOD_2 ( STRING_1 , 1 ) ; if ( ( VAR_2 ) == INT_1 ) b . METHOD_2 ( STRING_1 , INT_1 ) ; if ( ( VAR_2 ) == INT_2 ) b . METHOD_2 ( STRING_1 , INT_2 ) ; intent . METHOD_3 ( b ) ; METHOD_4 ( intent ) ; METHOD_5 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; TYPE_1 b = new TYPE_1 ( ) ; if ( ( VAR_2 ) == 1 ) b . METHOD_2 ( STRING_1 , 1 ) ; if ( ( VAR_2 ) == INT_1 ) b . METHOD_2 ( STRING_1 , INT_1 ) ; if ( ( VAR_2 ) == INT_2 ) b . METHOD_2 ( STRING_1 , INT_2 ) ; intent . METHOD_3 ( b ) ; METHOD_4 ( intent ) ; }\n"}
{"problem": "private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( this . VAR_2 ) && ( VAR_3 ) ) { return this . METHOD_2 ( VAR_1 ) ; } else if ( ( this . VAR_2 ) && ( ( VAR_3 ) == false ) ) { return true ; } else if ( ( ( this . VAR_2 ) == false ) && ( VAR_3 ) ) { return false ; } else { return ! ( this . METHOD_2 ( VAR_1 ) ) ; } }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( this . VAR_2 ) && ( VAR_3 ) ) { return this . METHOD_2 ( VAR_1 ) ; } else if ( ( this . VAR_2 ) && ( ( VAR_3 ) == false ) ) { return true ; } else if ( ( ( this . VAR_2 ) == false ) && ( VAR_3 ) ) { return false ; } else { return ! ( this . METHOD_2 ( VAR_1 ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_2 ) { VAR_2 . METHOD_3 ( ) ; } java.lang.Object [ ] VAR_3 = VAR_4 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( VAR_4 ) ; VAR_4 . METHOD_6 ( ) ; METHOD_7 ( VAR_6 , VAR_3 , ( ( time ) / INT_1 ) , STRING_1 ) ; METHOD_8 ( STRING_2 , VAR_5 ) ; VAR_7 . METHOD_9 ( ) ; VAR_1 = new TYPE_2 ( INT_2 ) ; }\n", "fixed": "public void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_2 ) { VAR_2 . METHOD_3 ( ) ; } java.lang.Object [ ] VAR_3 = VAR_4 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( VAR_4 ) ; VAR_4 . METHOD_6 ( ) ; METHOD_7 ( VAR_6 , VAR_3 , ( ( time ) / INT_1 ) , STRING_1 ) ; METHOD_8 ( STRING_2 , VAR_5 ) ; VAR_7 . METHOD_9 ( ) ; VAR_1 = new TYPE_2 ( INT_1 ) ; }\n"}
{"fixCommitSHA1": "97814491bc0e383e136612dea07af841c0121681", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     return mBlockIdsOnTiers;\n   }", "fixed": "    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n     return mBlockIdsOnTiers;\n   }", "sourceBeforeFix": "Preconditions.checkNotNull(manager)", "sourceAfterFix": "Preconditions.checkNotNull(manager,\"manager\")"}
{"problem": "private void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) return ; for ( java.util.Map.Entry < java.lang.String , java.util.List < java.lang.Object > > VAR_2 : VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) { for ( java.lang.Object VAR_3 : VAR_2 . getValue ( ) ) { VAR_4 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , VAR_3 ) ; } } }\n", "fixed": "private void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) return ; for ( java.util.Map.Entry < java.lang.String , java.util.List < java.lang.Object > > VAR_2 : VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) { for ( java.lang.Object VAR_3 : VAR_2 . getValue ( ) ) { VAR_4 = VAR_4 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , VAR_3 ) ; } } }\n"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStream<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStream<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "fixed": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStreamSink<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.String [ ] tmp ; count = 0 ; METHOD_2 ( ) ; while ( VAR_1 . METHOD_3 ( ) ) { tmp = VAR_1 . METHOD_4 ( ) . split ( STRING_2 ) ; for ( int i = 0 ; i < ( VAR_2 ) ; i ++ ) { VAR_3 [ count ] [ i ] = java.lang.Double . METHOD_5 ( tmp [ i ] ) ; } METHOD_6 ( count ) ; ( count ) ++ ; } }\n", "fixed": "public void METHOD_1 ( ) { java.lang.String [ ] tmp ; count = 0 ; METHOD_2 ( ) ; while ( VAR_1 . METHOD_3 ( ) ) { tmp = VAR_1 . METHOD_4 ( ) . split ( STRING_2 ) ; for ( int i = 0 ; i < ( VAR_2 ) ; i ++ ) { VAR_3 [ count ] [ i ] = java.lang.Double . METHOD_5 ( tmp [ i ] ) ; } METHOD_6 ( count ) ; ( count ) ++ ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSolrEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SolrEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSolrEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SolrEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public java.util.List < java.lang.String > METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { VAR_1 . add ( ( ( VAR_2 . METHOD_2 ( ) ) + ( VAR_2 . METHOD_3 ( ) ) ) ) ; } return VAR_1 ; }\n", "fixed": "public java.util.List < java.lang.String > METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { java.lang.System.out.println ( ( ( VAR_2 . METHOD_2 ( ) ) + ( VAR_2 . METHOD_3 ( ) ) ) ) ; VAR_1 . add ( ( ( VAR_2 . METHOD_2 ( ) ) + ( VAR_2 . METHOD_3 ( ) ) ) ) ; } return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 , java.lang.String VAR_7 , java.lang.String VAR_8 ) { VAR_9 . METHOD_2 ( VAR_3 , VAR_8 , 0 , INT_1 ) ; VAR_9 . METHOD_3 ( VAR_9 . METHOD_4 ( VAR_3 , INT_1 ) . METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , INT_1 ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 , java.lang.String VAR_7 , java.lang.String VAR_8 ) { VAR_9 . METHOD_2 ( VAR_3 , VAR_8 , 0 , INT_1 ) ; VAR_9 . METHOD_3 ( VAR_9 . METHOD_4 ( VAR_3 , INT_1 ) . METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }\n"}
{"problem": "private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { TYPE_5 VAR_3 = METHOD_2 ( VAR_2 , VAR_1 ) ; TYPE_6 VAR_4 = VAR_3 . METHOD_3 ( ) ; boolean VAR_5 = ( VAR_4 . compareTo ( VAR_6 ) ) == ( - 1 ) ; if ( VAR_5 ) { return TYPE_1 . METHOD_4 ( new TYPE_2 ( VAR_3 . METHOD_5 ( ) , VAR_7 ) ) ; } return TYPE_1 . METHOD_6 ( ) ; }\n", "fixed": "private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { TYPE_5 VAR_3 = METHOD_2 ( VAR_2 , VAR_1 ) ; TYPE_6 VAR_4 = VAR_3 . METHOD_3 ( ) ; boolean VAR_5 = ( VAR_4 . compareTo ( VAR_6 ) ) < 0 ; if ( VAR_5 ) { return TYPE_1 . METHOD_4 ( new TYPE_2 ( VAR_3 . METHOD_5 ( ) , VAR_7 ) ) ; } return TYPE_1 . METHOD_6 ( ) ; }\n"}
{"fixCommitSHA1": "7c3ad0194c2aa495bf464f68e0da6622733b4430", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": " public final class TtlBucket implements Comparable<TtlBucket> {\n   \n   private static long sTtlIntervalMs =\n      Configuration.getInt(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS);\n   /**\n    * Each bucket has a time to live interval, this value is the start of the interval, interval\n* value is the same as the configuration of {@link PropertyKey", "fixed": " public final class TtlBucket implements Comparable<TtlBucket> {\n   \n   private static long sTtlIntervalMs =\n      Configuration.getMs(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS);\n   /**\n    * Each bucket has a time to live interval, this value is the start of the interval, interval\n* value is the same as the configuration of {@link PropertyKey", "sourceBeforeFix": "Configuration.getInt(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic boolean invertNormalizedKey();", "fixed": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic abstract boolean invertNormalizedKey();", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "public int METHOD_1 ( ) { final int VAR_1 = INT_1 ; int result = 1 ; result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) ; result = ( VAR_1 * result ) + ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_1 ( ) ) ; result = ( VAR_1 * result ) + ( ( VAR_4 ) == null ? 0 : VAR_4 . METHOD_1 ( ) ) ; return result ; }\n", "fixed": "public int METHOD_1 ( ) { final int VAR_1 = INT_1 ; int result = 1 ; result = ( VAR_1 * result ) + ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_1 ( ) ) ; result = ( VAR_1 * result ) + ( ( VAR_4 ) == null ? 0 : VAR_4 . METHOD_1 ( ) ) ; return result ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"problem": "private void METHOD_1 ( ) { final TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; final java.lang.String VAR_2 = new TYPE_2 ( ) . put ( id ) . toString ( ) ; VAR_1 . METHOD_4 ( VAR_3 , VAR_2 ) ; VAR_1 . commit ( ) ; }\n", "fixed": "protected void METHOD_1 ( ) { final TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; final java.lang.String VAR_2 = new TYPE_2 ( ) . put ( id ) . toString ( ) ; VAR_1 . METHOD_4 ( VAR_3 , VAR_2 ) ; VAR_1 . commit ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = VAR_2 ; TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_1 . METHOD_3 ( VAR_4 ) ) && ( ( VAR_5 ) < ( - INT_1 ) ) ) { TYPE_4 . METHOD_4 ( VAR_1 , VAR_6 , VAR_1 . METHOD_5 ( ) . METHOD_6 ( INT_2 ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = VAR_2 ; if ( ( VAR_1 . METHOD_3 ( VAR_4 ) ) && ( ( VAR_5 ) < ( - INT_1 ) ) ) { TYPE_4 . METHOD_4 ( VAR_1 , VAR_6 , VAR_1 . METHOD_5 ( ) . METHOD_6 ( INT_2 ) ) ; } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( 0 ) ; final java.lang.String [ ] VAR_3 = new java.lang.String [ ] { VAR_2 . getName ( ) . toString ( ) } ; VAR_1 . METHOD_4 ( new java.util.HashSet < > ( java.util.Arrays.asList ( VAR_3 ) ) ) ; assert ( VAR_1 . METHOD_5 ( ) . size ( ) ) == 1 ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( 0 ) ; final java.lang.String [ ] VAR_3 = new java.lang.String [ ] { VAR_2 . getName ( ) . toString ( ) } ; VAR_1 . METHOD_4 ( new java.util.HashSet < > ( java.util.Arrays.asList ( VAR_3 ) ) ) ; java.lang.System.out.println ( VAR_1 . METHOD_5 ( ) . size ( ) ) ; assert ( VAR_1 . METHOD_5 ( ) . size ( ) ) == 1 ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { this . VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; TYPE_2 . assertEquals ( VAR_2 , this . VAR_1 . METHOD_3 ( VAR_3 ) ) ; VAR_3 . METHOD_4 ( STRING_1 , TYPE_3 . toString ( ) ) ; VAR_3 . METHOD_5 ( TYPE_4 . METHOD_6 ( TYPE_3 ) ) ; TYPE_2 . assertEquals ( TYPE_3 , this . VAR_1 . METHOD_3 ( VAR_3 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { this . VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; assertEquals ( VAR_2 , this . VAR_1 . METHOD_3 ( VAR_3 ) ) ; VAR_3 . METHOD_4 ( STRING_1 , TYPE_3 . toString ( ) ) ; VAR_3 . METHOD_5 ( TYPE_4 . METHOD_6 ( TYPE_3 ) ) ; assertEquals ( TYPE_3 , this . VAR_1 . METHOD_3 ( VAR_3 ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) ; METHOD_4 ( VAR_3 , VAR_4 , STRING_3 , STRING_4 ) ; METHOD_4 ( VAR_3 , VAR_4 , STRING_5 , STRING_4 ) ; METHOD_4 ( VAR_3 , VAR_4 , STRING_6 , STRING_7 ) ; METHOD_3 ( VAR_1 , VAR_2 , STRING_4 ) ; METHOD_3 ( VAR_5 , VAR_2 , STRING_6 ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) ; METHOD_4 ( VAR_3 , VAR_4 , STRING_3 , STRING_4 ) ; METHOD_4 ( VAR_3 , VAR_4 , STRING_5 , STRING_4 ) ; METHOD_4 ( VAR_5 , VAR_4 , STRING_6 ) ; METHOD_3 ( VAR_1 , VAR_2 , STRING_4 ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 . size ( ) ) > 0 ) { METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) ) ; VAR_3 . METHOD_4 ( ) ; } else { TYPE_2 . METHOD_5 ( context , STRING_1 , VAR_4 ) . show ( ) ; } VAR_3 . METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 . size ( ) ) > 0 ) { METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) ) ; } else { TYPE_2 . METHOD_5 ( context , STRING_1 , VAR_4 ) . show ( ) ; } VAR_3 . METHOD_4 ( ) ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String query = STRING_1 ; java.util.List < TYPE_1 > VAR_2 = this . METHOD_2 ( ) . METHOD_3 ( query ) . METHOD_4 ( STRING_2 , VAR_1 ) . METHOD_5 ( ) ; if ( ( VAR_2 . size ( ) ) == 1 ) { java.lang.System.out.println ( VAR_2 . get ( 0 ) . METHOD_6 ( ) . get ( 0 ) . toString ( ) ) ; return VAR_2 ; } return null ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String query = STRING_1 ; java.util.List < TYPE_1 > VAR_2 = this . METHOD_2 ( ) . METHOD_3 ( query ) . METHOD_4 ( STRING_2 , VAR_1 ) . METHOD_5 ( ) ; if ( ( VAR_2 . size ( ) ) == 1 ) { return VAR_2 ; } return null ; }\n"}
{"problem": "private void METHOD_1 ( boolean VAR_1 ) { TYPE_1 data = getData ( VAR_1 ) ; int [ ] VAR_2 = ( VAR_1 ) ? VAR_3 : VAR_4 ; VAR_5 . METHOD_2 ( ( ( ( ( STRING_1 + ( VAR_2 [ 0 ] ) ) + STRING_2 ) + ( VAR_2 [ 1 ] ) ) + STRING_3 ) ) ; VAR_6 . METHOD_3 ( VAR_2 [ 0 ] , VAR_2 [ 1 ] ) ; VAR_6 . METHOD_4 ( data ) ; }\n", "fixed": "private void METHOD_1 ( boolean VAR_1 ) { this . VAR_1 = VAR_1 ; TYPE_1 data = getData ( VAR_1 ) ; int [ ] VAR_2 = ( VAR_1 ) ? VAR_3 : VAR_4 ; VAR_5 . METHOD_2 ( ( ( ( ( STRING_1 + ( VAR_2 [ 0 ] ) ) + STRING_2 ) + ( VAR_2 [ 1 ] ) ) + STRING_3 ) ) ; VAR_6 . METHOD_3 ( VAR_2 [ 0 ] , VAR_2 [ 1 ] ) ; VAR_6 . METHOD_4 ( data ) ; }\n"}
{"problem": "protected TYPE_1 < ? > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { java.util.List < TYPE_1 < ? > > results = METHOD_2 ( VAR_1 ) ; if ( ( results . size ( ) ) > 0 ) throw new TYPE_3 ( STRING_1 ) ; if ( results . isEmpty ( ) ) return null ; else return results . get ( 0 ) ; }\n", "fixed": "protected TYPE_1 < ? > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { java.util.List < TYPE_1 < ? > > results = METHOD_2 ( VAR_1 ) ; if ( ( results . size ( ) ) > 1 ) throw new TYPE_3 ( STRING_1 ) ; if ( results . isEmpty ( ) ) return null ; else return results . get ( 0 ) ; }\n"}
{"problem": "private static void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , TYPE_3 . METHOD_3 ( ) , VAR_2 , VAR_3 , new TYPE_4 ( ) ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; TYPE_5 . METHOD_4 ( VAR_1 ) ; VAR_1 . METHOD_5 ( ) ; TYPE_6 . METHOD_4 ( VAR_1 ) ; VAR_5 . METHOD_6 ( ) ; }\n", "fixed": "private static void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , TYPE_3 . METHOD_3 ( ) , VAR_2 , new TYPE_4 ( ) ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; TYPE_5 . METHOD_4 ( VAR_1 ) ; VAR_1 . METHOD_5 ( ) ; TYPE_6 . METHOD_4 ( VAR_1 ) ; VAR_5 . METHOD_6 ( ) ; }\n"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static void main ( java.lang.String [ ] args ) { int VAR_1 = INT_1 ; int VAR_2 = INT_2 ; int VAR_3 = INT_3 ; java.lang.String name = STRING_1 ; for ( int i = VAR_1 ; i <= INT_4 ; i ++ ) { TYPE_1 . METHOD_1 ( VAR_2 , FLOAT_1 ) ; } int VAR_4 = ( VAR_2 / VAR_3 ) / INT_5 ; java.lang.System.out.println ( ( ( ( name + STRING_2 ) + VAR_4 ) + STRING_3 ) ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { int VAR_1 = INT_1 ; double VAR_2 = INT_2 ; int VAR_3 = INT_3 ; java.lang.String name = STRING_1 ; for ( int i = VAR_1 ; i <= INT_4 ; i ++ ) { VAR_2 = TYPE_1 . METHOD_1 ( VAR_2 , FLOAT_1 ) ; } double VAR_4 = ( VAR_2 / VAR_3 ) / INT_5 ; java.lang.System.out.println ( ( ( ( name + STRING_2 ) + VAR_4 ) + STRING_3 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { int VAR_2 = 1 ; for ( TYPE_1 VAR_3 : VAR_1 . METHOD_2 ( ) ) TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_3 . METHOD_5 ( ) , ( VAR_2 ++ ) ) ; TYPE_3 . METHOD_3 ( ) . METHOD_6 ( ) ; TYPE_3 . METHOD_3 ( ) . METHOD_7 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { int VAR_2 = 1 ; for ( TYPE_1 VAR_3 : VAR_1 . METHOD_2 ( ) ) TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_3 . METHOD_5 ( ) , ( VAR_2 ++ ) ) ; TYPE_3 . METHOD_3 ( ) . METHOD_6 ( ) ; if ( ( TYPE_3 . METHOD_3 ( ) . METHOD_5 ( ) ) != null ) TYPE_3 . METHOD_3 ( ) . METHOD_7 ( ) ; } }\n"}
{"fixCommitSHA1": "f1024ba0e7d5f1276a285a4218f26c70252719b5", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t *        the job configuration that has been attached to the original job graph\n \t * @param environment\n \t *        the environment of the task to be registered\n\t * @param initialCheckpointState\n\t *        the task's initial checkpoint state\n \t * @param activeOutputChannels\n \t *        the set of initially active output channels\n \t * @return the task to be started or <code>null</code> if a task with the same ID was already running", "fixed": " \t *        the job configuration that has been attached to the original job graph\n \t * @param environment\n \t *        the environment of the task to be registered\n \t * @param activeOutputChannels\n \t *        the set of initially active output channels\n \t * @return the task to be started or <code>null</code> if a task with the same ID was already running", "sourceBeforeFix": "LOG.error(result.getDescription())", "sourceAfterFix": "LOG.error(result.getDescription(),e)"}
{"problem": "public final TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( VAR_2 . METHOD_3 ( STRING_1 ) ) ) return ( ( TYPE_1 ) ( VAR_2 . METHOD_4 ( STRING_1 ) ) ) ; return null ; }\n", "fixed": "public final TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 == null ) return null ; TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( VAR_2 . METHOD_3 ( STRING_1 ) ) ) return ( ( TYPE_1 ) ( VAR_2 . METHOD_4 ( STRING_1 ) ) ) ; return null ; }\n"}
{"problem": "private void METHOD_1 ( ) { for ( int i = 0 ; ( this . METHOD_2 ( ) ) > INT_1 ; ) { if ( ( this . METHOD_3 ( i ) ) instanceof TYPE_1 ) { this . METHOD_4 ( ( ( TYPE_1 ) ( METHOD_3 ( i ) ) ) ) ; this . remove ( METHOD_3 ( i ) ) ; } else { i ++ ; } } METHOD_5 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { for ( int i = 0 ; ( this . METHOD_2 ( ) ) > 1 ; ) { if ( ( this . METHOD_3 ( i ) ) instanceof TYPE_1 ) { this . METHOD_4 ( ( ( TYPE_1 ) ( METHOD_3 ( i ) ) ) ) ; this . remove ( METHOD_3 ( i ) ) ; } else { i ++ ; } } METHOD_5 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) { METHOD_3 ( true ) ; return ; } VAR_3 = ( ( VAR_3 ) + 1 ) % ( VAR_4 . size ( ) ) ; METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) { METHOD_3 ( true ) ; return ; } if ( ( VAR_4 . size ( ) ) == 0 ) { return ; } VAR_3 = ( ( VAR_3 ) + 1 ) % ( VAR_4 . size ( ) ) ; METHOD_4 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 event ) { VAR_1 = new TYPE_2 ( event . METHOD_2 ( ) ) ; METHOD_3 ( true ) ; VAR_2 = TYPE_3 . METHOD_4 ( STRING_1 ) ; VAR_2 . METHOD_5 ( new TYPE_4 ( ) , VAR_3 class , 0 , VAR_4 ) ; VAR_2 . METHOD_5 ( new TYPE_5 ( ) , VAR_5 class , 1 , VAR_6 ) ; TYPE_6 . METHOD_6 ( this ) ; VAR_7 . METHOD_1 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 event ) { VAR_2 = TYPE_3 . METHOD_4 ( STRING_1 ) ; VAR_2 . METHOD_5 ( new TYPE_4 ( ) , VAR_3 class , 0 , VAR_4 ) ; VAR_2 . METHOD_5 ( new TYPE_5 ( ) , VAR_5 class , 1 , VAR_6 ) ; TYPE_6 . METHOD_6 ( this ) ; VAR_7 . METHOD_1 ( ) ; }\n"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStream<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStream<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "fixed": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStreamSink<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       return false;\n     }\n     if (!info.isOffline()) {\n      LOG.warn(\"Region is split but not offline: \" + info.getRegionName());\n     }\n     return true;\n   }", "fixed": "       return false;\n     }\n     if (!info.isOffline()) {\n      LOG.warn(\"Region is split but not offline: \" +\n        info.getRegionNameAsString());\n     }\n     return true;\n   }", "sourceBeforeFix": "info.getRegionName()", "sourceAfterFix": "info.getRegionNameAsString()"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = getActivity ( ) . getIntent ( ) . METHOD_2 ( ) . getBoolean ( VAR_3 ) ; VAR_4 = VAR_5 . METHOD_3 ( ) ; java.lang.String VAR_6 = VAR_4 . METHOD_4 ( ) . METHOD_5 ( VAR_7 ) ; if ( VAR_6 != null ) VAR_8 . METHOD_6 ( VAR_6 ) ; java.net.URL VAR_9 = VAR_5 . METHOD_7 ( ) ; VAR_10 . METHOD_8 ( VAR_9 . toString ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( VAR_5 ) == null ) return ; VAR_2 = getActivity ( ) . getIntent ( ) . METHOD_2 ( ) . getBoolean ( VAR_3 ) ; VAR_4 = VAR_5 . METHOD_3 ( ) ; java.lang.String VAR_6 = VAR_4 . METHOD_4 ( ) . METHOD_5 ( VAR_7 ) ; if ( VAR_6 != null ) VAR_8 . METHOD_6 ( VAR_6 ) ; java.net.URL VAR_9 = VAR_5 . METHOD_7 ( ) ; VAR_10 . METHOD_8 ( VAR_9 . toString ( ) ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"problem": "private void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; TYPE_1 VAR_3 = METHOD_5 ( VAR_4 ) ; if ( VAR_3 != null ) TYPE_2 . METHOD_6 ( VAR_5 . METHOD_7 ( VAR_3 ) ) ; METHOD_8 ( ) ; }\n", "fixed": "private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; TYPE_1 VAR_3 = METHOD_5 ( VAR_4 ) ; if ( VAR_3 != null ) TYPE_2 . METHOD_6 ( VAR_5 . METHOD_7 ( VAR_3 ) ) ; METHOD_8 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 source = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ; java.lang.String VAR_2 = source . getText ( ) ; if ( ( VAR_2 . equals ( STRING_1 ) ) && ( ( VAR_3 ) == true ) ) { source . setText ( STRING_2 ) ; } else if ( ( VAR_2 . equals ( STRING_1 ) ) && ( ( VAR_3 ) == false ) ) { source . setText ( STRING_3 ) ; } VAR_3 = ! ( VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 source = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ; java.lang.String VAR_2 = source . getText ( ) ; if ( VAR_2 . equals ( STRING_1 ) ) { if ( VAR_3 ) source . setText ( STRING_2 ) ; else source . setText ( \"0\" ) ; VAR_3 = ! ( VAR_3 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( ( ( x ) - ( VAR_3 ) ) , ( ( y ) - ( VAR_3 ) ) , ( ( VAR_3 ) * INT_1 ) , ( ( VAR_3 ) * INT_1 ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( ( ( x ) - ( VAR_3 ) ) , ( ( y ) - ( VAR_3 ) ) , ( ( VAR_3 ) * INT_1 ) , ( ( VAR_3 ) * INT_1 ) ) ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setText ( VAR_1 . METHOD_2 ( ) ) ; VAR_3 . setText ( VAR_1 . METHOD_3 ( ) ) ; if ( ( VAR_1 . METHOD_4 ( ) ) != 0 ) VAR_4 . setText ( java.lang.Integer.toString ( VAR_1 . METHOD_4 ( ) ) ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setText ( VAR_1 . METHOD_2 ( ) ) ; if ( ( VAR_1 . METHOD_4 ( ) ) != 0 ) VAR_4 . setText ( java.lang.Integer.toString ( VAR_1 . METHOD_4 ( ) ) ) ; else VAR_4 . setText ( null ) ; VAR_3 . setText ( VAR_1 . METHOD_3 ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 values ) throws java.io.IOException { java.util.List < byte [ ] > VAR_1 = values . METHOD_2 ( 1 ) ; this . array = new java.util.ArrayList < TYPE_2 > ( ) ; for ( int i = 0 ; i < ( values . METHOD_3 ( 1 ) ) ; i ++ ) { array . add ( TYPE_2 . METHOD_4 ( VAR_1 . get ( i ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 values ) throws java.io.IOException { this . array = new java.util.ArrayList < TYPE_2 > ( ) ; for ( byte [ ] b : values . METHOD_2 ( 1 ) ) { array . add ( TYPE_2 . METHOD_4 ( b ) ) ; } }\n"}
{"problem": "private boolean METHOD_1 ( ) { if ( ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_2 ( ) ) == ( METHOD_3 ( ) ) ) ) && ( ( VAR_1 . METHOD_4 ( ) ) == ( ( METHOD_5 ( ) ) + INT_1 ) ) ) { return true ; } return false ; }\n", "fixed": "protected boolean METHOD_1 ( ) { if ( ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_2 ( ) ) == ( METHOD_3 ( ) ) ) ) && ( ( VAR_1 . METHOD_4 ( ) ) == ( ( METHOD_5 ( ) ) + INT_1 ) ) ) { return true ; } return false ; }\n"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}
{"problem": "private void METHOD_1 ( ) { for ( TYPE_1 key : VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( key ) ; } VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_5 = new TYPE_2 ( VAR_2 ) ; VAR_1 . METHOD_4 ( ) ; VAR_6 . METHOD_4 ( ) ; VAR_7 . METHOD_5 ( ) ; VAR_8 . METHOD_6 ( ) ; VAR_8 . METHOD_7 ( ) ; VAR_9 . count = 0 ; VAR_10 = true ; VAR_11 = true ; }\n", "fixed": "private void METHOD_1 ( ) { for ( TYPE_1 key : VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( key ) ; } VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_5 = new TYPE_2 ( VAR_2 , 1 ) ; VAR_1 . METHOD_4 ( ) ; VAR_6 . METHOD_4 ( ) ; VAR_7 . METHOD_5 ( ) ; VAR_8 . METHOD_6 ( ) ; VAR_8 . METHOD_7 ( ) ; VAR_9 . count = 0 ; VAR_10 = true ; VAR_11 = true ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < TYPE_2 > list , java.lang.Exception VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_5 ) ; VAR_6 . METHOD_2 ( ( ( list != null ) && ( ( list . size ( ) ) == 0 ) ? VAR_3 : VAR_5 ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < TYPE_2 > list , java.lang.Exception VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_5 ) ; VAR_6 . METHOD_2 ( ( ( list != null ) && ( ( list . size ( ) ) == 0 ) ? VAR_3 : VAR_5 ) ) ; }\n"}
{"fixCommitSHA1": "53b0527a5dd35cd2e36650a6352b882cc32f714f", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    * @throws IOException\n    */\n   public void put(Put put, Integer lockid) throws IOException {\n    this.put(put, lockid, put.writeToWAL());\n   }\n   /**", "fixed": "    * @throws IOException\n    */\n   public void put(Put put, Integer lockid) throws IOException {\n    this.put(put, lockid, put.getWriteToWAL());\n   }\n   /**", "sourceBeforeFix": "put.writeToWAL()", "sourceAfterFix": "put.getWriteToWAL()"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 target = this . target ; if ( target == null ) throw new TYPE_2 ( STRING_1 ) ; this . target = null ; VAR_1 = null ; VAR_2 = null ; VAR_3 . METHOD_2 ( null ) ; VAR_3 = null ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 target = this . target ; if ( target == null ) throw new TYPE_2 ( STRING_1 ) ; this . target = null ; VAR_1 = null ; VAR_2 = null ; target . view = null ; VAR_3 . METHOD_2 ( null ) ; VAR_3 = null ; }\n"}
{"problem": "public static synchronized void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , double [ ] VAR_4 ) { java.lang.String key = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . put ( STRING_1 , new TYPE_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) ) ; TYPE_4 . put ( VAR_5 , STRING_1 ) ; ( VAR_5 ) ++ ; TYPE_5 VAR_6 = new TYPE_5 ( ) ; VAR_6 . METHOD_3 ( STRING_1 ) ; TYPE_1 . METHOD_4 ( VAR_1 , VAR_6 ) ; VAR_7 . METHOD_5 ( VAR_1 , STRING_1 ) ; }\n", "fixed": "public static synchronized void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , double [ ] VAR_4 ) { java.lang.String key = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . put ( STRING_1 , new TYPE_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 , STRING_1 ) ) ; TYPE_4 . put ( VAR_5 , STRING_1 ) ; ( VAR_5 ) ++ ; TYPE_5 VAR_6 = new TYPE_5 ( ) ; VAR_6 . METHOD_3 ( STRING_1 ) ; TYPE_1 . METHOD_4 ( VAR_1 , VAR_6 ) ; VAR_7 . METHOD_5 ( VAR_1 , STRING_1 ) ; }\n"}
{"problem": "private static void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , java.lang.String msg , boolean VAR_3 ) { if ( ! ( VAR_4 ) ) return ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , msg ) ; if ( VAR_3 ) TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 , msg ) ; }\n", "fixed": "private static void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , java.lang.String msg , boolean VAR_3 ) { if ( ! ( VAR_4 ) ) return ; if ( VAR_3 ) TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 , msg ) ; else TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , msg ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return ; } VAR_2 = new TYPE_2 ( VAR_1 ) . METHOD_3 ( ( ( TYPE_3 ) ( VAR_1 ) ) ) . METHOD_4 ( VAR_1 , ( ( TYPE_4 ) ( VAR_1 ) ) ) . METHOD_5 ( VAR_3 ) . build ( ) ; }\n", "fixed": "public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } VAR_2 = new TYPE_2 ( VAR_1 ) . METHOD_3 ( ( ( TYPE_3 ) ( VAR_1 ) ) ) . METHOD_4 ( VAR_1 , ( ( TYPE_4 ) ( VAR_1 ) ) ) . METHOD_5 ( VAR_3 ) . build ( ) ; return true ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 ) { if ( ( ( VAR_2 == VAR_3 ) || ( VAR_3 == ( VAR_4 ) ) ) || ( ( VAR_3 == ( VAR_5 ) ) && ( VAR_2 == ( VAR_6 ) ) ) ) { return true ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 ) { if ( ( ( VAR_2 == VAR_3 ) || ( VAR_3 == ( VAR_4 ) ) ) || ( ( VAR_2 == ( VAR_5 ) ) && ( VAR_3 == ( VAR_6 ) ) ) ) { return true ; } return false ; }\n"}
{"problem": "private boolean METHOD_1 ( int position ) { do { position -- ; TYPE_1 item = METHOD_2 ( position ) ; if ( item instanceof TYPE_2 ) { return ( ( TYPE_2 ) ( item ) ) . METHOD_1 ( ) ; } else if ( item instanceof TYPE_3 ) { break ; } } while ( position >= 0 ) ; return false ; }\n", "fixed": "private boolean METHOD_1 ( int position ) { if ( position == 0 ) return false ; do { position -- ; TYPE_1 item = METHOD_2 ( position ) ; if ( item instanceof TYPE_2 ) { return ( ( TYPE_2 ) ( item ) ) . METHOD_1 ( ) ; } else if ( item instanceof TYPE_3 ) { break ; } } while ( position > 0 ) ; return false ; }\n"}
{"problem": "public void METHOD_1 ( int index , java.lang.String VAR_1 , TYPE_1 VAR_2 ) { if ( index >= ( this . VAR_3 . length ) ) { VAR_4 . METHOD_2 ( ( STRING_1 + index ) ) ; return ; } VAR_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) , new TYPE_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) ; this . VAR_3 [ index ] = VAR_2 . METHOD_5 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ; this . VAR_5 [ index ] = TYPE_2 . METHOD_4 ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( int index , java.lang.String VAR_1 , TYPE_1 VAR_2 ) { if ( index >= ( this . VAR_3 . length ) ) { VAR_4 . METHOD_2 ( ( STRING_1 + index ) ) ; return ; } VAR_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) , new TYPE_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) ; this . VAR_3 [ index ] = VAR_2 . METHOD_5 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ; this . VAR_5 [ index ] = VAR_1 ; }\n"}
{"problem": "private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( TYPE_2 . getContext ( ) . METHOD_2 ( ) ) ) ; java.lang.String VAR_2 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; return ( VAR_1 != null ) && ( ( VAR_2 . METHOD_6 ( STRING_1 ) ) || ( VAR_2 . METHOD_6 ( STRING_2 ) ) ) ; }\n", "fixed": "private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( TYPE_2 . getContext ( ) . METHOD_2 ( ) ) ) ; if ( VAR_1 == null ) { return false ; } java.lang.String VAR_2 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; return ( VAR_2 . METHOD_6 ( STRING_1 ) ) || ( VAR_2 . METHOD_6 ( STRING_2 ) ) ; }\n"}
{"problem": "public TYPE_1 < TYPE_2 > METHOD_1 ( int id , TYPE_3 args ) { if ( ( VAR_1 ) == id ) { java.lang.String VAR_2 = null ; if ( ! ( name . equals ( STRING_1 ) ) ) { VAR_2 = ( ( ( VAR_3 ) + STRING_2 ) + ( name ) ) + STRING_3 ; } return new TYPE_4 ( getActivity ( ) , VAR_4 , null , VAR_2 , null , null ) ; } return null ; }\n", "fixed": "public TYPE_1 < TYPE_2 > METHOD_1 ( int id , TYPE_3 args ) { if ( ( VAR_1 ) == id ) { if ( ( name ) == null ) { VAR_2 = null ; } return new TYPE_4 ( getActivity ( ) , VAR_4 , null , VAR_2 , null , null ) ; } return null ; }\n"}
{"fixCommitSHA1": "f73c4f24ee36c671562840e941c914f79566cf97", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                     if (index == 0x7f) {\n                         state = READ_LITERAL_HEADER_NAME_LENGTH;\n                     } else {\n                        if (nameLength > maxHeadersLength - headersLength) {\n                             maxHeaderSizeExceeded();\n                         }\n                         nameLength = index;", "fixed": "                     if (index == 0x7f) {\n                         state = READ_LITERAL_HEADER_NAME_LENGTH;\n                     } else {\n                        if (index > maxHeadersLength - headersLength) {\n                             maxHeaderSizeExceeded();\n                         }\n                         nameLength = index;", "sourceBeforeFix": "nameLength > maxHeadersLength - headersLength", "sourceAfterFix": "index > maxHeadersLength - headersLength"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { VAR_2 = VAR_3 . get ( position ) ; android.content.Intent i = new android.content.Intent ( METHOD_2 ( ) , VAR_4 class ) ; i . METHOD_3 ( STRING_1 , ( ( TYPE_2 ) ( view ) ) . getText ( ) ) ; this . METHOD_4 ( i ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { VAR_2 = VAR_3 . get ( position ) ; android.content.Intent i = new android.content.Intent ( METHOD_2 ( ) , VAR_4 class ) ; this . METHOD_4 ( i ) ; }\n"}
{"problem": "private java.util.List < TYPE_1 > METHOD_1 ( int size ) { TYPE_1 VAR_1 = new TYPE_1 ( data ) ; java.util.List < TYPE_1 > VAR_2 = TYPE_2 . METHOD_2 ( ) ; for ( int i = 0 ; i < size ; ++ i ) { VAR_2 . add ( VAR_1 ) ; } return VAR_2 ; }\n", "fixed": "private java.util.List < TYPE_1 > METHOD_1 ( int size ) { TYPE_1 VAR_1 = new TYPE_1 ( data , null ) ; java.util.List < TYPE_1 > VAR_2 = TYPE_2 . METHOD_2 ( ) ; for ( int i = 0 ; i < size ; ++ i ) { VAR_2 . add ( VAR_1 ) ; } return VAR_2 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; new TYPE_1 ( VAR_3 , state , VAR_4 ) { public void METHOD_4 ( ) { java.util.Collection < TYPE_2 > VAR_5 = VAR_6 . METHOD_5 ( VAR_7 ) ; for ( TYPE_2 VAR_8 : VAR_5 ) { METHOD_6 ( VAR_8 , VAR_1 ) ; VAR_2 . METHOD_7 ( VAR_8 ) ; } } } ; super . METHOD_1 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_6 . METHOD_2 ( ) ; new TYPE_1 ( VAR_3 , state , VAR_4 ) { public void METHOD_4 ( ) { java.util.Collection < TYPE_2 > VAR_5 = VAR_6 . METHOD_5 ( VAR_7 ) ; for ( TYPE_2 VAR_8 : VAR_5 ) { METHOD_6 ( VAR_8 , VAR_1 ) ; VAR_2 . METHOD_7 ( VAR_8 ) ; } } } ; super . METHOD_1 ( ) ; }\n"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "fixed": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = this.response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"problem": "public void METHOD_1 ( ) { final java.lang.Integer VAR_1 = INT_1 ; java.lang.Object VAR_2 = new java.lang.Object ( ) { private java.lang.Integer VAR_3 = VAR_1 ; } ; TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( VAR_2 ) ; try { TYPE_2 . METHOD_3 ( VAR_4 ) ; } catch ( TYPE_3 VAR_5 ) { TYPE_4 . METHOD_4 ( VAR_5 . METHOD_5 ( ) , STRING_1 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { final java.lang.Integer VAR_1 = INT_1 ; java.lang.Object VAR_2 = new java.lang.Object ( ) { private java.lang.Integer VAR_3 = VAR_1 ; } ; TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( VAR_2 ) ; try { TYPE_2 . METHOD_3 ( VAR_4 ) ; fail ( ) ; } catch ( TYPE_3 VAR_5 ) { TYPE_4 . METHOD_4 ( VAR_5 . METHOD_5 ( ) , STRING_1 ) ; } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ( VAR_1 != null ) && ( ! ( METHOD_2 ( ) ) ) ) { final TYPE_2 VAR_3 = VAR_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 , VAR_5 , VAR_2 , 0 ) ; TYPE_3 VAR_6 = ( ( TYPE_3 ) ( VAR_4 . METHOD_5 ( VAR_7 ) ) ) ; TYPE_4 view = ( ( TYPE_4 ) ( VAR_6 . METHOD_6 ( VAR_8 , this ) ) ) ; METHOD_7 ( view ) ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_3 VAR_6 = ( ( TYPE_3 ) ( VAR_4 . METHOD_5 ( VAR_7 ) ) ) ; TYPE_4 view = ( ( TYPE_4 ) ( VAR_6 . METHOD_6 ( VAR_8 , this ) ) ) ; METHOD_7 ( view ) ; } }\n"}
{"problem": "protected java.io.File [ ] METHOD_1 ( java.lang.Object VAR_1 ) { java.lang.String [ ] VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) return new java.io.File [ 0 ] ; java.io.File [ ] VAR_3 = new java.io.File [ VAR_2 . length ] ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) VAR_3 [ i ] = new TYPE_1 ( VAR_2 [ i ] , VAR_4 , VAR_5 , VAR_6 ) ; return VAR_3 ; }\n", "fixed": "protected java.io.File [ ] METHOD_1 ( java.lang.Object VAR_1 ) { java.lang.String [ ] VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) return null ; java.io.File [ ] VAR_3 = new java.io.File [ VAR_2 . length ] ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) VAR_3 [ i ] = new TYPE_1 ( this , VAR_2 [ i ] , VAR_4 , VAR_5 , VAR_6 ) ; return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { if ( intent . METHOD_2 ( VAR_1 ) ) { VAR_2 = VAR_3 ; try { VAR_2 = VAR_3 ; TYPE_1 . METHOD_3 ( this ) . METHOD_4 ( ) ; TYPE_1 . METHOD_3 ( this ) . METHOD_5 ( ) ; TYPE_1 . METHOD_3 ( this ) . set ( ) ; METHOD_6 ( ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_7 ( ) ; } } else { METHOD_8 ( ) ; } }\n", "fixed": "public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { if ( intent . METHOD_2 ( VAR_1 ) ) { try { VAR_2 = VAR_3 ; TYPE_1 . METHOD_3 ( this ) . METHOD_4 ( ) ; TYPE_1 . METHOD_3 ( this ) . METHOD_5 ( ) ; TYPE_1 . METHOD_3 ( this ) . set ( ) ; METHOD_6 ( ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_7 ( ) ; } } else { METHOD_8 ( ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"problem": "byte [ ] METHOD_1 ( byte [ ] VAR_1 , byte [ ] VAR_2 ) { if ( VAR_2 == null ) { VAR_2 = new byte [ VAR_3 . METHOD_2 ( ) ] ; } if ( ( VAR_1 == null ) || ( ( VAR_1 . length ) <= 0 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return TYPE_2 . METHOD_3 ( VAR_1 , VAR_3 . METHOD_4 ( VAR_2 ) ) ; }\n", "fixed": "byte [ ] METHOD_1 ( byte [ ] VAR_1 , byte [ ] VAR_2 ) { if ( ( VAR_2 == null ) || ( ( VAR_2 . length ) == 0 ) ) { VAR_2 = new byte [ VAR_3 . METHOD_2 ( ) ] ; } if ( ( VAR_1 == null ) || ( ( VAR_1 . length ) <= 0 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return TYPE_2 . METHOD_3 ( VAR_1 , VAR_3 . METHOD_4 ( VAR_2 ) ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) < ( ( VAR_2 . METHOD_3 ( ) ) / INT_1 ) ) { java.lang.System.out.println ( STRING_1 ) ; } else { VAR_1 . METHOD_1 ( VAR_2 ) ; VAR_1 . METHOD_4 ( ( ( VAR_1 . METHOD_2 ( ) ) - ( ( VAR_2 . METHOD_3 ( ) ) / INT_1 ) ) ) ; VAR_2 . METHOD_5 ( ( ( VAR_2 . METHOD_3 ( ) ) * INT_1 ) ) ; } }\n", "fixed": "public boolean METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) < ( ( VAR_2 . METHOD_3 ( ) ) / INT_1 ) ) { java.lang.System.out.println ( STRING_1 ) ; return false ; } else { VAR_1 . METHOD_1 ( VAR_2 ) ; VAR_1 . METHOD_4 ( ( ( VAR_1 . METHOD_2 ( ) ) - ( ( VAR_2 . METHOD_3 ( ) ) / INT_1 ) ) ) ; VAR_2 . METHOD_5 ( ( ( VAR_2 . METHOD_3 ( ) ) * INT_1 ) ) ; return true ; } }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 -= ( VAR_2 ) + ( ( ( ( VAR_3 ) * ( VAR_4 ) ) * ( VAR_4 ) ) / ( VAR_5 ) ) ; VAR_6 = ( VAR_1 ) * ( VAR_7 ) ; if ( ( ( VAR_1 ) <= 0 ) || ( ( VAR_8 ) <= 0 ) ) { VAR_9 = true ; } else { VAR_4 += VAR_10 ; } }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 -= VAR_2 ; VAR_6 = ( VAR_1 ) * ( VAR_7 ) ; if ( ( ( VAR_1 ) <= 0 ) || ( ( VAR_8 ) <= 0 ) ) { VAR_9 = true ; } else { VAR_4 += VAR_10 ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; if ( ( METHOD_3 ( ) ) != ( VAR_3 ) ) { METHOD_4 ( VAR_3 ) ; TYPE_2 . METHOD_2 ( VAR_2 , STRING_2 ) ; METHOD_5 ( VAR_1 ) ; for ( TYPE_3 listener : VAR_4 ) { listener . METHOD_6 ( ) ; } } else { VAR_5 . METHOD_7 ( VAR_1 ) ; METHOD_8 ( METHOD_9 ( ) . METHOD_10 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; if ( ( METHOD_3 ( ) ) != ( VAR_3 ) ) { METHOD_4 ( VAR_3 ) ; TYPE_2 . METHOD_2 ( VAR_2 , STRING_2 ) ; METHOD_5 ( VAR_1 ) ; for ( TYPE_3 listener : VAR_4 ) { listener . METHOD_6 ( ) ; } } else { VAR_5 . METHOD_7 ( VAR_1 ) ; VAR_1 . METHOD_8 ( METHOD_9 ( ) . METHOD_10 ( ) ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "95cbe760e15985289b0cd901b91b0aa8f66cfac2", "projectName": "facebook.presto", "bugType": "Change Binary Operator", "problem": "                 \"local exchanges do not support constant partition function arguments\");\n         checkArgument(!scope.isRemote() || type == REPARTITION || !partitioningScheme.isReplicateNullsAndAny(), \"Only REPARTITION can replicate remotely\");\n        checkArgument(scope != REMOTE_MATERIALIZED || type != REPARTITION, \"Only REPARTITION can be REMOTE_MATERIALIZED: %s\", type);\n         orderingScheme.ifPresent(ordering -> {\n             PartitioningHandle partitioningHandle = partitioningScheme.getPartitioning().getHandle();", "fixed": "                 \"local exchanges do not support constant partition function arguments\");\n         checkArgument(!scope.isRemote() || type == REPARTITION || !partitioningScheme.isReplicateNullsAndAny(), \"Only REPARTITION can replicate remotely\");\n        checkArgument(scope != REMOTE_MATERIALIZED || type == REPARTITION, \"Only REPARTITION can be REMOTE_MATERIALIZED: %s\", type);\n         orderingScheme.ifPresent(ordering -> {\n             PartitioningHandle partitioningHandle = partitioningScheme.getPartitioning().getHandle();", "sourceBeforeFix": "type != REPARTITION", "sourceAfterFix": "type == REPARTITION"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static void METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_3 . isEmpty ( ) ) { java.lang.System.err.println ( STRING_1 ) ; return ; } TYPE_1 VAR_4 = VAR_3 . get ( VAR_1 ) ; VAR_5 . METHOD_2 ( STRING_2 , VAR_4 . METHOD_3 ( ) ) ; TYPE_2 [ ] VAR_6 = VAR_4 . METHOD_4 ( ) ; VAR_5 . METHOD_2 ( STRING_3 , VAR_2 ) ; VAR_4 . METHOD_1 ( VAR_6 [ VAR_2 ] ) ; }\n", "fixed": "public static void METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_3 . isEmpty ( ) ) { java.lang.System.err.println ( STRING_1 ) ; return ; } TYPE_1 VAR_4 = VAR_3 . get ( VAR_1 ) ; VAR_5 . METHOD_2 ( STRING_2 , VAR_4 . METHOD_3 ( ) ) ; TYPE_2 [ ] VAR_6 = VAR_4 . METHOD_4 ( ) ; VAR_5 . METHOD_2 ( STRING_3 , VAR_2 ) ; if ( VAR_2 != ( - 1 ) ) VAR_4 . METHOD_1 ( VAR_6 [ VAR_2 ] ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( null == VAR_1 ) { return false ; } if ( VAR_1 == VAR_2 ) { return true ; } return ( TYPE_2 . METHOD_1 ( VAR_3 , VAR_2 ) ) || ( TYPE_2 . METHOD_1 ( VAR_4 , VAR_2 ) ) ; }\n", "fixed": "public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( null == VAR_1 ) { return false ; } return ( ( VAR_1 == VAR_2 ) || ( TYPE_2 . METHOD_1 ( VAR_3 , VAR_2 ) ) ) || ( TYPE_2 . METHOD_1 ( VAR_4 , VAR_2 ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; METHOD_4 ( VAR_3 ) ; VAR_5 = new TYPE_3 ( ) ; VAR_6 = new TYPE_4 ( ) ; VAR_7 = METHOD_5 ( ) ; VAR_8 = VAR_7 . METHOD_6 ( ) ; VAR_8 . add ( VAR_9 , VAR_5 ) ; VAR_8 . commit ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; METHOD_4 ( VAR_3 ) ; VAR_5 = new TYPE_3 ( ) ; VAR_6 = new TYPE_4 ( ) ; VAR_7 = METHOD_5 ( ) ; VAR_8 = VAR_7 . METHOD_6 ( ) ; VAR_8 . replace ( VAR_9 , VAR_5 ) ; VAR_8 . commit ( ) ; }\n"}
{"problem": "protected void METHOD_1 ( int token , java.lang.Object VAR_1 , TYPE_1 VAR_2 ) { super . METHOD_1 ( token , VAR_1 , VAR_2 ) ; if ( VAR_1 == null ) { return ; } if ( ( VAR_3 . get ( ) ) == null ) { return ; } if ( VAR_1 . equals ( VAR_4 ) ) { VAR_3 . get ( ) . METHOD_1 ( ( ( VAR_2 . METHOD_2 ( ) ) > 0 ) ) ; } }\n", "fixed": "protected void METHOD_1 ( int token , java.lang.Object VAR_1 , TYPE_1 VAR_2 ) { super . METHOD_1 ( token , VAR_1 , VAR_2 ) ; if ( VAR_1 == null ) { VAR_3 = null ; return ; } if ( VAR_1 . equals ( VAR_4 ) ) { VAR_3 . METHOD_1 ( ( ( VAR_2 . METHOD_2 ( ) ) > 0 ) ) ; VAR_3 = null ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"problem": "public static TYPE_1 METHOD_1 ( ) throws java.io.IOException , TYPE_2 { final TYPE_3 VAR_1 ; final TYPE_3 VAR_2 ; VAR_1 = TYPE_4 . METHOD_2 ( ) ; VAR_2 = TYPE_4 . METHOD_3 ( VAR_1 , VAR_3 ) ; return VAR_4 . METHOD_4 ( ( ( ( ( VAR_2 . METHOD_5 ( ) ) + STRING_1 ) + ( VAR_5 ) ) + STRING_2 ) ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( ) throws java.io.IOException , TYPE_2 { final TYPE_3 VAR_1 ; final TYPE_3 VAR_2 ; VAR_1 = TYPE_4 . METHOD_2 ( ) ; VAR_2 = TYPE_4 . METHOD_3 ( VAR_1 , VAR_3 ) ; return VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; }\n"}
{"problem": "public TYPE_1 [ ] execute ( TYPE_2 VAR_1 ) { long start = METHOD_1 ( VAR_1 , 0 ) ; long end = METHOD_1 ( VAR_1 , 1 ) ; long VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( start , ( end + 1 ) ) ; return METHOD_4 ( new TYPE_4 ( VAR_2 ) ) ; }\n", "fixed": "public TYPE_1 [ ] execute ( TYPE_2 VAR_1 ) { long start = METHOD_1 ( VAR_1 , 0 ) ; long end = METHOD_1 ( VAR_1 , 1 ) ; long VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( start , end ) ; return METHOD_4 ( new TYPE_4 ( VAR_2 ) ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( ) ; java.lang.String text = STRING_1 ; TYPE_1 VAR_1 = new TYPE_1 ( false ) ; TYPE_2 VAR_2 = new TYPE_2 ( text ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( new TYPE_3 ( 1 , 1 ) ) ; VAR_1 . add ( VAR_2 ) ; METHOD_2 ( ) . METHOD_6 ( VAR_4 , VAR_1 ) ; add ( METHOD_2 ( ) , VAR_5 ) ; }\n", "fixed": "private void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( ) ; java.lang.String text = STRING_1 ; TYPE_1 VAR_1 = new TYPE_1 ( false ) ; TYPE_2 VAR_2 = new TYPE_2 ( text ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( new TYPE_3 ( 1 , 1 ) ) ; VAR_1 . add ( VAR_2 ) ; add ( METHOD_2 ( ) , VAR_5 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; if ( ! ( METHOD_6 ( ) ) ) { TYPE_1 . METHOD_7 ( null , STRING_1 ) ; METHOD_3 ( ) ; METHOD_8 ( ) ; } else { METHOD_3 ( ) ; METHOD_8 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; if ( ! ( METHOD_6 ( ) ) ) { TYPE_1 . METHOD_7 ( null , STRING_1 ) ; METHOD_3 ( ) ; } else { METHOD_3 ( ) ; } METHOD_8 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 result ) { TYPE_2 VAR_1 = VAR_2 . get ( VAR_3 . getId ( ) ) ; VAR_1 . METHOD_2 ( VAR_4 ) ; VAR_1 . METHOD_3 ( result ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_4 ( true ) ; VAR_1 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 result ) { TYPE_2 VAR_1 = VAR_2 . get ( VAR_3 . getId ( ) ) ; VAR_1 . METHOD_2 ( VAR_4 ) ; VAR_1 . METHOD_3 ( result ) ; VAR_1 . METHOD_4 ( true ) ; VAR_1 . METHOD_5 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Throwable { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 , VAR_2 class , INT_1 ) ; TYPE_3 . assertThat ( ( ( java.lang.Integer ) ( VAR_1 . handle ( ) . METHOD_3 ( 1 , INT_1 ) ) ) , METHOD_4 ( INT_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Throwable { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( null , STRING_1 , VAR_2 class , INT_1 ) ; TYPE_3 . assertThat ( ( ( java.lang.Integer ) ( VAR_1 . handle ( ) . METHOD_3 ( 1 , INT_1 ) ) ) , METHOD_4 ( INT_2 ) ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_3 ( ) ; if ( ( VAR_3 . out ) != null ) VAR_4 . METHOD_3 ( ) ; if ( ( VAR_5 ) != null ) VAR_5 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_6 ) { VAR_6 . METHOD_4 ( ) ; } }\n", "fixed": "public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_3 ( ) ; if ( ( VAR_3 . out ) != null ) VAR_4 . METHOD_3 ( ) ; if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_3 ( ) ; VAR_5 = null ; } } catch ( java.io.IOException VAR_6 ) { VAR_6 . METHOD_4 ( ) ; } }\n"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.debug(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "fixed": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.trace(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")", "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"}
{"problem": "private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( VAR_2 , VAR_2 ) ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( INT_1 , INT_1 , INT_1 , INT_1 ) ; VAR_1 . METHOD_5 ( METHOD_6 ( ) . getColor ( VAR_4 ) ) ; VAR_1 . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( INT_2 ) ; VAR_1 . METHOD_9 ( true ) ; VAR_1 . METHOD_10 ( VAR_6 ) ; return VAR_1 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( VAR_2 , VAR_2 ) ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_5 ( METHOD_6 ( ) . getColor ( VAR_4 ) ) ; VAR_1 . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( INT_2 ) ; VAR_1 . METHOD_9 ( true ) ; VAR_1 . METHOD_10 ( VAR_6 ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , int VAR_4 , int VAR_5 ) { TYPE_1 VAR_6 = new TYPE_1 ( METHOD_2 ( VAR_1 ) , VAR_2 , METHOD_3 ( VAR_2 ) , VAR_3 , VAR_4 , VAR_5 ) ; VAR_6 . METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , int VAR_4 , int VAR_5 ) { TYPE_1 VAR_6 = new TYPE_1 ( METHOD_2 ( VAR_1 ) , VAR_2 , METHOD_3 ( VAR_2 ) , VAR_3 , VAR_4 , VAR_5 ) ; VAR_6 . start ( ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) throws TYPE_1 , TYPE_2 { java.lang.String VAR_5 = this . METHOD_2 ( VAR_2 ) ; java.lang.String VAR_6 = this . METHOD_2 ( VAR_3 ) ; java.lang.String source = VAR_4 + VAR_2 ; java.lang.String target = VAR_4 + VAR_3 ; this . VAR_7 . METHOD_1 ( VAR_5 , VAR_6 , this . VAR_8 , VAR_1 , source , target ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_1 , TYPE_2 { java.lang.String VAR_5 = this . METHOD_2 ( VAR_2 ) ; java.lang.String VAR_6 = this . METHOD_2 ( VAR_3 ) ; this . VAR_7 . METHOD_1 ( VAR_5 , VAR_6 , this . VAR_8 , VAR_1 , VAR_2 , VAR_3 ) ; }\n"}
{"fixCommitSHA1": "e5d3850776174a63ddc2e0b5ead58409ca7c8706", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   protected void initTable() throws IOException {\n     super.initTable();\n    byte[] tableName = getTablename().getBytes();\n     HBaseAdmin admin = new HBaseAdmin(conf);\n     HTableDescriptor tableDesc = admin.getTableDescriptor(tableName);\n     LOG.info(\"Disabling table \" + getTablename());", "fixed": "   protected void initTable() throws IOException {\n     super.initTable();\n    byte[] tableName = getTablename().getName();\n     HBaseAdmin admin = new HBaseAdmin(conf);\n     HTableDescriptor tableDesc = admin.getTableDescriptor(tableName);\n     LOG.info(\"Disabling table \" + getTablename());", "sourceBeforeFix": "getTablename().getBytes()", "sourceAfterFix": "getTablename().getName()"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = this . VAR_2 . METHOD_2 ( ) ; if ( ( VAR_3 ) != null ) { VAR_4 = VAR_5 ; VAR_6 . add ( VAR_1 ) ; } else { if ( ( VAR_2 . size ( ) ) == 0 ) throw new TYPE_2 ( VAR_7 ) ; VAR_2 . METHOD_3 ( ) . VAR_8 = VAR_7 ; } }\n", "fixed": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = this . VAR_2 . METHOD_2 ( ) ; if ( ( VAR_3 ) != null ) { VAR_4 = VAR_5 ; VAR_6 . add ( VAR_1 ) ; } else { if ( ( VAR_2 . size ( ) ) == 0 ) { if ( ( VAR_7 ) != null ) throw new TYPE_2 ( VAR_7 ) ; } else VAR_2 . METHOD_3 ( ) . VAR_8 = VAR_7 ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 , final long VAR_2 , final TYPE_2 VAR_3 , final TYPE_3 view ) { final java.lang.String label = METHOD_2 ( VAR_1 , view ) ; short VAR_4 = METHOD_3 ( ) ; java.lang.String VAR_5 = new TYPE_4 ( ) . METHOD_4 ( TYPE_5 . METHOD_5 ( view ) , VAR_1 ) ; return new TYPE_1 ( VAR_1 , VAR_2 , METHOD_6 ( ) , label , ( VAR_5 != null ? VAR_5 : VAR_1 ) , VAR_4 , METHOD_7 ( VAR_4 ) , VAR_3 ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 , final long VAR_2 , final TYPE_2 VAR_3 , final TYPE_3 view ) { final java.lang.String label = METHOD_2 ( VAR_1 , VAR_2 , view ) ; short VAR_4 = METHOD_3 ( ) ; java.lang.String VAR_5 = new TYPE_4 ( ) . METHOD_4 ( TYPE_5 . METHOD_5 ( view ) , VAR_1 ) ; return new TYPE_1 ( VAR_1 , VAR_2 , METHOD_6 ( ) , label , ( VAR_5 != null ? VAR_5 : VAR_1 ) , VAR_4 , METHOD_7 ( VAR_4 ) , VAR_3 ) ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( android.content.Context context , java.lang.String VAR_1 , java.lang.String fileName , TYPE_2 VAR_2 , java.lang.String ... VAR_3 ) { TYPE_1 VAR_4 = TYPE_3 . METHOD_2 ( context , VAR_2 , VAR_3 ) ; fileName = TYPE_2 . METHOD_3 ( fileName ) ; TYPE_1 file = VAR_4 . METHOD_4 ( fileName ) ; if ( file == null ) { file = VAR_4 . METHOD_5 ( VAR_1 , fileName ) ; } return file ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( android.content.Context context , java.lang.String VAR_1 , java.lang.String fileName , TYPE_2 VAR_2 , java.lang.String ... VAR_3 ) { TYPE_1 VAR_4 = TYPE_3 . METHOD_2 ( context , VAR_2 , VAR_3 ) ; TYPE_1 file = VAR_4 . METHOD_4 ( fileName ) ; if ( file == null ) { file = VAR_4 . METHOD_5 ( VAR_1 , fileName ) ; } return file ; }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return TYPE_1 . METHOD_2 ( ) . method ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) . METHOD_7 ( TYPE_4 . METHOD_8 ( VAR_1 . METHOD_8 ( ) ) ) . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) . build ( ) ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return TYPE_1 . METHOD_2 ( ) . method ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) . METHOD_7 ( TYPE_4 . METHOD_8 ( VAR_1 . METHOD_8 ( ) ) ) . METHOD_9 ( ( ( VAR_1 . METHOD_10 ( ) ) != null ? VAR_1 . METHOD_10 ( ) : new byte [ ] { } ) ) . build ( ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return false ; } } return ( ( ! ( VAR_1 instanceof TYPE_2 ) ) && ( ! ( VAR_1 instanceof TYPE_3 ) ) ) && ( VAR_1 instanceof TYPE_4 ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { if ( VAR_1 . METHOD_2 ( ) ) { return false ; } } return ( ( ! ( VAR_1 instanceof TYPE_2 ) ) && ( ! ( VAR_1 instanceof TYPE_3 ) ) ) && ( VAR_1 instanceof TYPE_4 ) ; }\n"}
{"fixCommitSHA1": "638215c325d78574eb156bd455cea3280118b1a0", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public void sessionCreated(HttpSessionEvent se) {\n        logger.info(\"Session created\");\n     }\n     @Override\n     public void sessionDestroyed(HttpSessionEvent se) {\n        logger.info(\"Session destroyed\");\n         try {\n             HttpSession s = se.getSession();\n             for (Broadcaster b : BroadcasterFactory.getDefault().lookupAll()) {", "fixed": "     @Override\n     public void sessionCreated(HttpSessionEvent se) {\n        logger.trace(\"Session created\");\n     }\n     @Override\n     public void sessionDestroyed(HttpSessionEvent se) {\n        logger.trace(\"Session destroyed\");\n         try {\n             HttpSession s = se.getSession();\n             for (Broadcaster b : BroadcasterFactory.getDefault().lookupAll()) {", "sourceBeforeFix": "logger.info(\"Session created\")", "sourceAfterFix": "logger.trace(\"Session created\")"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String key ) { if ( key . equals ( VAR_2 ) ) { int VAR_3 = VAR_1 . getInt ( VAR_2 , java.lang.Integer.parseInt ( getString ( VAR_4 ) ) ) ; if ( VAR_3 == 0 ) { TYPE_2 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_1 ) ; return ; } int VAR_5 = VAR_3 ; if ( VAR_5 > ( VAR_6 ) ) { TYPE_2 . METHOD_2 ( ( STRING_2 + ( VAR_6 ) ) ) ; METHOD_3 ( VAR_1 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String key ) { if ( key . equals ( VAR_2 ) ) { int VAR_3 = VAR_1 . getInt ( VAR_2 , java.lang.Integer.parseInt ( getString ( VAR_4 ) ) ) ; if ( VAR_3 == 0 ) { METHOD_3 ( VAR_1 ) ; return ; } int VAR_5 = VAR_3 ; if ( VAR_5 > ( VAR_6 ) ) { TYPE_2 . METHOD_2 ( ( STRING_2 + ( VAR_6 ) ) ) ; METHOD_3 ( VAR_1 ) ; } } }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . position ( VAR_2 ) ; for ( int i = 0 ; i < ( ( METHOD_3 ( ) ) + 1 ) ; i ++ ) { VAR_1 . METHOD_2 ( ) . METHOD_4 ( METHOD_5 ( ) [ i ] ) ; } super . METHOD_1 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . position ( VAR_2 ) ; for ( int i = 0 ; ( ( METHOD_3 ( ) ) > 0 ) && ( i < ( ( METHOD_3 ( ) ) + 1 ) ) ; i ++ ) { VAR_1 . METHOD_2 ( ) . METHOD_4 ( METHOD_5 ( ) [ i ] ) ; } super . METHOD_1 ( ) ; }\n"}
{"problem": "public java.lang.Long METHOD_1 ( java.lang.String key ) throws java.lang.Exception { TYPE_1 VAR_1 = null ; java.lang.String VAR_2 = ( ( VAR_3 . METHOD_2 ( ) ) + STRING_1 ) + key ; try { VAR_1 = VAR_4 . METHOD_3 ( ) ; return VAR_1 . METHOD_4 ( VAR_2 ) ; } finally { VAR_1 . METHOD_5 ( ) ; } }\n", "fixed": "public java.lang.Long METHOD_1 ( java.lang.String key ) throws java.lang.Exception { TYPE_1 VAR_1 = null ; java.lang.String VAR_2 = ( ( VAR_3 . METHOD_2 ( ) ) + STRING_1 ) + key ; try { VAR_1 = VAR_4 . METHOD_3 ( ) ; return VAR_1 . METHOD_4 ( VAR_2 ) ; } finally { if ( VAR_1 != null ) { VAR_1 . METHOD_5 ( ) ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = VAR_3 . get ( VAR_1 ) ; METHOD_2 ( VAR_4 , VAR_5 , INT_1 , VAR_6 , VAR_2 , new TYPE_3 ( ) { public void METHOD_3 ( ) { METHOD_2 ( VAR_5 , VAR_4 , INT_2 , VAR_7 , VAR_2 , null ) ; } } ) ; METHOD_4 ( VAR_2 , VAR_8 , VAR_9 , METHOD_5 ( VAR_1 . y ) , METHOD_6 ( VAR_1 . x ) ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = VAR_3 . get ( VAR_1 ) ; METHOD_2 ( VAR_4 , VAR_5 , INT_1 , VAR_6 , VAR_2 , new TYPE_3 ( ) { public void METHOD_3 ( ) { METHOD_2 ( VAR_5 , VAR_4 , INT_2 , VAR_7 , VAR_2 , null ) ; } } ) ; METHOD_4 ( VAR_2 , VAR_8 , VAR_9 , METHOD_5 ( VAR_1 . x ) , METHOD_6 ( VAR_1 . y ) ) ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"problem": "public void METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_3 = INT_1 ; VAR_4 = VAR_1 ; VAR_5 = VAR_6 . getData ( VAR_1 , VAR_2 ) ; f . METHOD_2 ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; METHOD_3 ( VAR_5 ) ; VAR_7 . METHOD_4 ( ) ; VAR_8 . METHOD_4 ( ) ; VAR_9 . METHOD_4 ( ) ; VAR_10 . METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_3 = INT_1 ; VAR_4 = VAR_1 ; VAR_5 = VAR_6 . getData ( VAR_1 , VAR_2 ) ; f . METHOD_2 ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; METHOD_3 ( VAR_5 ) ; VAR_7 . METHOD_4 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; listener . METHOD_1 ( ) ; VAR_1 . METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_5 ( VAR_3 ) ; VAR_4 = true ; TYPE_5 . METHOD_6 ( VAR_5 , VAR_2 ) ; listener . METHOD_7 ( VAR_2 ) ; TYPE_6 . METHOD_8 ( VAR_5 ) ; } } ) ; }\n", "fixed": "public void METHOD_4 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_2 = TYPE_4 . METHOD_5 ( VAR_3 ) ; VAR_4 = true ; TYPE_5 . METHOD_6 ( VAR_5 , VAR_2 ) ; listener . METHOD_7 ( VAR_2 ) ; TYPE_6 . METHOD_8 ( VAR_5 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_2 , ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) ) ; METHOD_4 ( ) ; if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { TYPE_4 . METHOD_5 ( this , VAR_3 , VAR_4 ) . show ( ) ; } METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_2 , ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) ) ; if ( VAR_1 . METHOD_3 ( ) ) { METHOD_4 ( ) ; } else { TYPE_4 . METHOD_5 ( this , VAR_3 , VAR_4 ) . show ( ) ; } METHOD_6 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { if ( METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) { event . METHOD_3 ( METHOD_4 ( VAR_2 , VAR_3 , VAR_4 ) ) ; VAR_5 . setText ( event . METHOD_5 ( ) ) ; } else { TYPE_2 . METHOD_6 ( this , getString ( VAR_6 ) , VAR_7 ) . show ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { if ( METHOD_2 ( event , VAR_2 , VAR_3 , VAR_4 ) ) { event . METHOD_3 ( METHOD_4 ( event , VAR_2 , VAR_3 , VAR_4 ) ) ; VAR_5 . setText ( event . METHOD_5 ( ) ) ; } else { TYPE_2 . METHOD_6 ( this , getString ( VAR_6 ) , VAR_7 ) . show ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; VAR_1 = new TYPE_1 ( STRING_2 , STRING_3 ) ; VAR_2 . METHOD_2 ( false ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( new TYPE_2 ( STRING_4 , \"0\" , new java.util.ArrayList < java.lang.String > ( ) , new java.util.ArrayList < java.lang.String > ( ) ) ) ; java.lang.System.out.println ( STRING_5 ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( STRING_2 , STRING_3 ) ; VAR_2 . METHOD_2 ( false ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( new TYPE_2 ( STRING_4 , \"0\" , new java.util.ArrayList < java.lang.String > ( ) , new java.util.ArrayList < java.lang.String > ( ) ) ) ; }\n"}
{"problem": "public boolean METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String VAR_2 ) { TYPE_1 VAR_3 ; VAR_3 = new TYPE_2 ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_2 ( java.util.Arrays.asList ( VAR_4 ) ) ; VAR_5 = METHOD_3 ( ) . METHOD_1 ( VAR_3 ) ; return ( VAR_5 ) != null ; }\n", "fixed": "public boolean METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_2 ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_2 ( java.util.Arrays.asList ( VAR_4 ) ) ; VAR_5 = METHOD_3 ( ) . METHOD_1 ( VAR_3 ) ; return ( VAR_5 ) != null ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( ( VAR_2 ) == 1 ) if ( VAR_3 ) if ( ! ( VAR_4 ) ) VAR_5 . METHOD_1 ( VAR_6 . METHOD_2 ( ) , VAR_6 . METHOD_3 ( ) , VAR_7 , height , VAR_8 ) ; else VAR_5 . METHOD_1 ( VAR_6 . METHOD_2 ( ) , VAR_6 . METHOD_3 ( ) , VAR_7 , height , VAR_9 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_5 . METHOD_1 ( VAR_6 . METHOD_2 ( ) , VAR_6 . METHOD_3 ( ) , VAR_7 , height ) ; if ( ( VAR_2 ) == 1 ) if ( VAR_3 ) if ( ! ( VAR_4 ) ) VAR_5 . METHOD_1 ( VAR_6 . METHOD_2 ( ) , VAR_6 . METHOD_3 ( ) , VAR_7 , height , VAR_8 ) ; else VAR_5 . METHOD_1 ( VAR_6 . METHOD_2 ( ) , VAR_6 . METHOD_3 ( ) , VAR_7 , height , VAR_9 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 init ) throws java.lang.Exception { TYPE_3 [ ] VAR_2 = new TYPE_3 [ VAR_3 ] ; for ( int i = 0 ; i < ( VAR_3 ) ; i ++ ) { VAR_2 [ i ] = ( ( TYPE_3 ) ( VAR_4 . METHOD_2 ( ) ) ) ; } TYPE_1 VAR_5 = METHOD_3 ( VAR_2 , VAR_1 , parameters ) ; VAR_6 . info ( STRING_1 ) ; return VAR_5 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 init ) throws java.lang.Exception { TYPE_3 [ ] VAR_2 = new TYPE_3 [ VAR_3 ] ; for ( int i = 0 ; i < ( VAR_3 ) ; i ++ ) { VAR_2 [ i ] = ( ( TYPE_3 ) ( VAR_4 . METHOD_2 ( ) ) ) ; } TYPE_1 VAR_5 = METHOD_3 ( VAR_2 , VAR_1 , parameters ) ; return VAR_5 ; }\n"}
{"problem": "public void METHOD_1 ( int x , int y , int VAR_1 , int height ) { if ( ( VAR_1 != 0 ) && ( height != 0 ) ) { this . VAR_2 = new TYPE_1 ( 0 , 0 ) ; this . VAR_2 . METHOD_2 ( x , y , VAR_1 , height ) ; } else this . VAR_2 = null ; }\n", "fixed": "public void METHOD_1 ( int x , int y , int VAR_1 , int height ) { if ( ( x == ( - 1 ) ) && ( y == ( - 1 ) ) ) { this . VAR_2 = null ; } else { this . VAR_2 = new TYPE_1 ( 0 , 0 ) ; this . VAR_2 . METHOD_2 ( x , y , VAR_1 , height ) ; } }\n"}
{"problem": "public static void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 output , final int VAR_2 ) throws java.io.IOException { final char [ ] buffer = new char [ VAR_2 ] ; int n = 0 ; while ( ( - 1 ) != ( n = VAR_1 . METHOD_2 ( buffer ) ) ) { output . METHOD_3 ( buffer , 0 , n ) ; } output . METHOD_4 ( ) ; }\n", "fixed": "public static void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 output , final int VAR_2 ) throws java.io.IOException { final char [ ] buffer = new char [ VAR_2 ] ; int n = 0 ; while ( 0 <= ( n = VAR_1 . METHOD_2 ( buffer ) ) ) { output . METHOD_3 ( buffer , 0 , n ) ; } output . METHOD_4 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( false ) ; METHOD_3 ( ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_4 ( VAR_1 , false ) ; } VAR_1 = null ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( false ) ; METHOD_3 ( ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_4 ( VAR_1 , false ) ; } VAR_1 = null ; } }\n"}
{"problem": "public void update ( float VAR_1 ) { METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( ) ; VAR_3 . update ( VAR_1 ) ; METHOD_6 ( VAR_1 ) ; if ( ( VAR_4 . isEmpty ( ) ) || ( VAR_3 . METHOD_7 ( ) ) ) { VAR_5 . METHOD_8 ( ) ; } }\n", "fixed": "public void update ( float VAR_1 ) { METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( ) ; VAR_3 . update ( VAR_1 ) ; METHOD_6 ( VAR_1 ) ; if ( ( VAR_4 . isEmpty ( ) ) || ( VAR_3 . METHOD_7 ( ) ) ) { } }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 , java.lang.String type , TYPE_3 VAR_3 ) { return TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , true , VAR_3 , type ) ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 , java.lang.String type , TYPE_3 VAR_3 ) { return TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , true , true , VAR_3 , type ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 , VAR_1 ) ; java.util.List < java.lang.Object > list = java.util.Arrays.asList ( new java.lang.Object [ ] { STRING_1 , VAR_4 } ) ; assertEquals ( list , VAR_5 . get ( STRING_2 ) ) ; assertEquals ( VAR_3 , VAR_2 ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_3 ) , VAR_6 class ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = METHOD_2 ( VAR_3 , VAR_1 ) ; assertEquals ( VAR_3 , VAR_2 ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_3 ) , VAR_6 class ) ) ; }\n"}
{"problem": "public TYPE_1 get ( int index ) { if ( index >= ( size ( ) ) ) { throw new TYPE_2 ( ( ( ( STRING_1 + index ) + STRING_2 ) + ( size ) ) ) ; } TYPE_3 < TYPE_1 > . VAR_1 result = VAR_2 ; while ( index != 0 ) { result = VAR_3 ; index -- ; } return result . data ; }\n", "fixed": "public TYPE_1 get ( int index ) { if ( index >= ( size ( ) ) ) { throw new TYPE_2 ( ( ( ( STRING_1 + index ) + STRING_2 ) + ( size ) ) ) ; } TYPE_3 < TYPE_1 > . VAR_1 result = VAR_2 ; while ( index != 0 ) { result = VAR_3 ; index -- ; } return result . getData ( ) ; }\n"}
{"fixCommitSHA1": "fd2bf7d972c703a603f7ec043b96649347f7e184", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "         httpClientBinder(binder).bindHttpClient(\"exchange\", ForExchange.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(2, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                     config.setMaxConnectionsPerServer(250);\n                 });", "fixed": "         httpClientBinder(binder).bindHttpClient(\"exchange\", ForExchange.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(30, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                     config.setMaxConnectionsPerServer(250);\n                 });", "sourceBeforeFix": "new Duration(2,SECONDS)", "sourceAfterFix": "new Duration(30,SECONDS)"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 ; if ( ( VAR_1 . METHOD_2 ( ) ) == null ) { VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_4 . add ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; } else VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_2 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 ; if ( ( VAR_1 . METHOD_2 ( ) ) == null ) { VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; } else { VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; } VAR_4 . add ( VAR_3 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( ) { android.content.Intent VAR_1 = new android.content.Intent ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 , VAR_4 ) ; VAR_1 . METHOD_3 ( VAR_5 , java.lang.String.format ( METHOD_4 ( ) . getString ( VAR_6 ) , VAR_7 ) ) ; VAR_1 . METHOD_5 ( STRING_1 ) ; METHOD_6 ( android.content.Intent . METHOD_7 ( VAR_1 , METHOD_4 ( ) . getString ( VAR_8 ) ) ) ; }\n", "fixed": "private void METHOD_1 ( ) { android.content.Intent VAR_1 = new android.content.Intent ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 , METHOD_4 ( ) . getString ( VAR_4 ) ) ; VAR_1 . METHOD_3 ( VAR_5 , java.lang.String.format ( METHOD_4 ( ) . getString ( VAR_6 ) , VAR_7 ) ) ; VAR_1 . METHOD_5 ( STRING_1 ) ; METHOD_6 ( android.content.Intent . METHOD_7 ( VAR_1 , METHOD_4 ( ) . getString ( VAR_8 ) ) ) ; }\n"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "871a4d8777f3be998cac121365bdb483fb08b9e5", "projectName": "libgdx.libgdx", "bugType": "Change Modifier", "problem": " \t * @author mzechner\r\n \t * \r\n \t */\r\n\tpublic final class Usage {\r\n \t\tpublic static final int Position = 0;\r\n \t\tpublic static final int Color = 1;\r\n \t\tpublic static final int ColorPacked = 5;\r", "fixed": " \t * @author mzechner\r\n \t * \r\n \t */\r\n\tpublic static final class Usage {\r\n \t\tpublic static final int Position = 0;\r\n \t\tpublic static final int Color = 1;\r\n \t\tpublic static final int ColorPacked = 5;\r", "sourceBeforeFix": "17", "sourceAfterFix": "25"}
{"problem": "private static void METHOD_1 ( java.lang.String path ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( path , VAR_2 . METHOD_2 ( ) , VAR_2 . METHOD_3 ( ) ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( false ) ; TYPE_3 VAR_4 = TYPE_4 . METHOD_5 ( new TYPE_2 [ ] { VAR_5 , VAR_3 } , ( - 1 ) ) ; VAR_4 . execute ( ) ; TYPE_4 . METHOD_6 ( VAR_4 , VAR_6 ) ; }\n", "fixed": "private static void METHOD_1 ( java.lang.String path ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( path , VAR_2 . METHOD_2 ( ) , VAR_2 . METHOD_3 ( ) ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( ) ; TYPE_3 VAR_4 = TYPE_4 . METHOD_5 ( new TYPE_2 [ ] { VAR_5 , VAR_3 } , ( - 1 ) ) ; VAR_4 . execute ( ) ; TYPE_4 . METHOD_6 ( VAR_4 , VAR_6 ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { TYPE_4 VAR_2 = VAR_1 . METHOD_2 ( true ) ; java.lang.String VAR_3 = VAR_1 . METHOD_3 ( STRING_1 ) ; if ( VAR_3 == null ) { METHOD_4 ( VAR_1 , response , STRING_2 ) ; } else switch ( VAR_3 ) { case STRING_3 : METHOD_5 ( VAR_1 , response , VAR_2 ) ; METHOD_4 ( VAR_1 , response , STRING_4 ) ; break ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { TYPE_4 VAR_2 = VAR_1 . METHOD_2 ( true ) ; java.lang.String VAR_3 = VAR_1 . METHOD_3 ( STRING_1 ) ; if ( VAR_3 == null ) { METHOD_4 ( VAR_1 , response , STRING_2 ) ; } else switch ( VAR_3 ) { case STRING_3 : METHOD_5 ( VAR_1 , response , VAR_2 ) ; METHOD_4 ( VAR_1 , response , STRING_4 ) ; break ; default : METHOD_4 ( VAR_1 , response , STRING_2 ) ; break ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedZooKeeperEndpointBuilder\n             extends\n                 AdvancedZooKeeperEndpointConsumerBuilder, AdvancedZooKeeperEndpointProducerBuilder {\n         default ZooKeeperEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedZooKeeperEndpointBuilder\n             extends\n                 AdvancedZooKeeperEndpointConsumerBuilder, AdvancedZooKeeperEndpointProducerBuilder {\n         default ZooKeeperEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( int id , TYPE_1 message ) { java.lang.System.out.println ( ( ( ( ( ( VAR_1 ) + STRING_1 ) + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) ) ; int i = 0 ; while ( i < ( VAR_4 ) ) { if ( ( VAR_5 [ i ] . id ) != id ) { VAR_5 [ ( i ++ ) ] . METHOD_2 ( message ) ; } } }\n", "fixed": "public void METHOD_1 ( int id , TYPE_1 message ) { java.lang.System.out.println ( ( ( ( ( ( VAR_1 ) + STRING_1 ) + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) ) ; int i = 0 ; while ( i < ( VAR_4 ) ) { if ( ( VAR_5 [ i ] . id ) != id ) { VAR_5 [ i ] . METHOD_2 ( message ) ; } i ++ ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_3 = VAR_2 . METHOD_3 ( VAR_4 ) ; TYPE_1 VAR_5 = new TYPE_1 ( VAR_6 ) . METHOD_4 ( false ) . METHOD_5 ( false ) ; if ( ! ( VAR_3 . isEmpty ( ) ) ) { java.io.File VAR_7 = TYPE_5 . METHOD_6 ( VAR_3 . get ( 0 ) ) ; VAR_5 = VAR_5 . METHOD_7 ( VAR_7 ) ; } return VAR_5 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_3 = VAR_2 . METHOD_3 ( VAR_4 ) ; TYPE_1 VAR_5 = new TYPE_1 ( VAR_6 ) . METHOD_5 ( true ) ; if ( ! ( VAR_3 . isEmpty ( ) ) ) { java.io.File VAR_7 = TYPE_5 . METHOD_6 ( VAR_3 . get ( 0 ) ) ; VAR_5 = VAR_5 . METHOD_7 ( VAR_7 ) ; } return VAR_5 ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : return true ; case VAR_2 : TYPE_2 VAR_3 = new TYPE_2 ( ) ; TYPE_3 VAR_4 = METHOD_3 ( ) . METHOD_4 ( ) ; VAR_4 . add ( VAR_5 , VAR_3 ) ; VAR_4 . METHOD_5 ( null ) ; VAR_4 . commit ( ) ; case VAR_6 : VAR_7 . METHOD_6 ( ) ; default : return super . METHOD_1 ( item ) ; } }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : return true ; case VAR_2 : TYPE_2 VAR_3 = new TYPE_2 ( ) ; TYPE_3 VAR_4 = METHOD_3 ( ) . METHOD_4 ( ) ; VAR_4 . replace ( VAR_5 , VAR_3 ) ; VAR_4 . METHOD_5 ( null ) ; VAR_4 . commit ( ) ; case VAR_6 : VAR_7 . METHOD_6 ( ) ; default : return super . METHOD_1 ( item ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( long VAR_1 ) { java.lang.String VAR_2 = null ; for ( TYPE_1 VAR_3 : VAR_4 . values ( ) ) { if ( ( VAR_5 . get ( VAR_6 ) ) == VAR_1 ) { VAR_2 = ( ( java.lang.String ) ( VAR_5 . get ( VAR_7 ) ) ) ; break ; } } return VAR_2 ; }\n", "fixed": "public java.lang.String METHOD_1 ( long VAR_1 ) { java.lang.String VAR_2 = null ; for ( TYPE_1 VAR_3 : VAR_4 . values ( ) ) { if ( VAR_5 . get ( VAR_6 ) . equals ( VAR_1 ) ) { VAR_2 = ( ( java.lang.String ) ( VAR_5 . get ( VAR_7 ) ) ) ; break ; } } return VAR_2 ; }\n"}
{"problem": "private void METHOD_1 ( java.lang.Object [ ] VAR_1 ) { TYPE_1 . METHOD_2 ( ( ( VAR_2 . length ) == ( VAR_1 . length ) ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 [ i ] , VAR_2 [ i ] ) ) ; } }\n", "fixed": "private void METHOD_1 ( java.lang.Object [ ] VAR_1 ) { METHOD_2 ( ( ( VAR_2 . length ) == ( VAR_1 . length ) ) , VAR_1 ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 [ i ] , VAR_2 [ i ] ) , VAR_1 ) ; } }\n"}
{"problem": "private VAR_1 ( java.util.ArrayList < TYPE_1 > VAR_2 ) { { TYPE_2 VAR_3 = VAR_2 [ 0 ] . METHOD_1 ( ) ; for ( int VAR_4 = 1 ; VAR_4 < ( VAR_2 . size ( ) ) ; VAR_4 ++ ) { if ( ( VAR_2 [ VAR_4 ] . compareTo ( VAR_3 ) ) == 1 ) { VAR_3 = VAR_2 [ VAR_4 ] ; } } } }\n", "fixed": "private VAR_1 ( java.util.ArrayList < TYPE_1 > VAR_2 ) { TYPE_2 VAR_3 = VAR_2 [ 0 ] . METHOD_1 ( ) ; for ( int VAR_4 = 1 ; VAR_4 < ( VAR_2 . size ( ) ) ; VAR_4 ++ ) { if ( ( VAR_2 [ VAR_4 ] . compareTo ( VAR_3 ) ) == 1 ) { VAR_3 = VAR_2 [ VAR_4 ] ; } } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ( VAR_3 [ VAR_2 ] ) instanceof TYPE_2 ) { VAR_4 [ VAR_2 ] = ( ( TYPE_2 ) ( VAR_3 [ VAR_2 ] ) ) . METHOD_2 ( ) ; } VAR_5 [ VAR_2 ] = VAR_1 . METHOD_3 ( VAR_6 , VAR_7 [ VAR_2 ] ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ( VAR_3 [ VAR_2 ] ) instanceof TYPE_2 ) { VAR_4 [ VAR_2 ] = ( ( TYPE_2 ) ( VAR_3 [ VAR_2 ] ) ) . METHOD_2 ( ) ; } VAR_5 [ VAR_2 ] = VAR_1 . METHOD_3 ( VAR_6 , VAR_7 [ ( VAR_2 ^ 1 ) ] ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 context ) throws TYPE_2 { super . METHOD_1 ( context ) ; VAR_1 = new java.util.ArrayList < java.lang.String [ ] > ( ) ; for ( java.lang.String line : VAR_2 ) { java.lang.String [ ] item = line . split ( VAR_3 ) ; if ( ( item . length ) != INT_1 ) { throw new TYPE_2 ( STRING_1 , item ) ; } VAR_1 . add ( item ) ; } VAR_4 = 0 ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 context ) throws TYPE_2 { super . METHOD_1 ( context ) ; VAR_1 = new java.util.ArrayList < java.lang.String [ ] > ( ) ; for ( java.lang.String line : VAR_2 ) { java.lang.String [ ] item = line . split ( VAR_3 ) ; VAR_1 . add ( item ) ; } VAR_4 = 0 ; }\n"}
{"fixCommitSHA1": "dff64bf31f0406905c321e100e29d3600cf618e3", "projectName": "apache.camel", "bugType": "Missing Throws Exception", "problem": " */\n     }\n    public static void main(String... args) {\n         Main main = new Main();\n         instance = main;\n         main.run(args);", "fixed": " */\n     }\n    public static void main(String... args) throws Exception {\n         Main main = new Main();\n         instance = main;\n         main.run(args);", "sourceBeforeFix": "9", "sourceAfterFix": "9"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic interface TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "fixed": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic abstract class TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"problem": "public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( ) ; if ( VAR_2 == null ) { java.lang.String path = path ( ) ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_5 = true ; TYPE_3 . METHOD_2 ( path , VAR_4 ) ; VAR_6 = METHOD_3 ( VAR_4 , VAR_1 , VAR_1 ) ; VAR_5 = false ; VAR_3 = new TYPE_4 ( TYPE_3 . METHOD_2 ( path , VAR_4 ) ) ; } return VAR_2 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( ) ; if ( VAR_2 == null ) { java.lang.String path = path ( ) ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_5 = true ; TYPE_3 . METHOD_2 ( path , VAR_4 ) ; VAR_6 = METHOD_3 ( VAR_4 , VAR_1 , VAR_1 ) ; VAR_5 = false ; VAR_2 = TYPE_3 . METHOD_2 ( path , VAR_4 ) ; VAR_3 = new TYPE_4 ( VAR_2 ) ; } return VAR_2 ; }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) , new java.io.File ( VAR_2 . METHOD_2 ( ) , STRING_1 ) ) ; VAR_3 . METHOD_3 ( null ) ; VAR_1 . METHOD_3 ( null ) ; TYPE_3 . assertTrue ( VAR_3 . equals ( VAR_1 ) ) ; try { VAR_1 . METHOD_4 ( ) ; } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_5 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) , new java.io.File ( VAR_2 . METHOD_2 ( ) , filename ) ) ; VAR_3 . METHOD_3 ( null ) ; VAR_1 . METHOD_3 ( null ) ; TYPE_3 . assertEquals ( VAR_3 , VAR_1 ) ; try { VAR_1 . METHOD_4 ( ) ; } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_5 ( ) ; } }\n"}
{"problem": "private boolean METHOD_1 ( TYPE_1 start , TYPE_1 VAR_1 , java.util.Set < TYPE_1 > VAR_2 ) { final double VAR_3 = INT_1 ; if ( ( start . METHOD_2 ( VAR_1 ) ) < VAR_3 ) { java.util.Set < TYPE_1 > VAR_4 = METHOD_3 ( start , VAR_1 ) ; for ( TYPE_1 VAR_5 : VAR_4 ) { if ( VAR_2 . contains ( VAR_5 ) ) { return false ; } } } return true ; }\n", "fixed": "private boolean METHOD_1 ( TYPE_1 start , TYPE_1 VAR_1 , java.util.Set < TYPE_1 > VAR_2 ) { final double VAR_3 = INT_1 ; if ( ( start . METHOD_2 ( VAR_1 ) ) < VAR_3 ) { java.util.Set < TYPE_1 > VAR_4 = METHOD_3 ( start , VAR_1 ) ; for ( TYPE_1 VAR_5 : VAR_4 ) { if ( VAR_2 . contains ( VAR_5 ) ) { return false ; } } return true ; } return false ; }\n"}
{"problem": "public static < TYPE_1 , TYPE_2 > TYPE_2 METHOD_1 ( TYPE_3 < TYPE_1 , TYPE_2 > VAR_1 , TYPE_1 key ) { for ( TYPE_4 < TYPE_1 , TYPE_2 > VAR_2 : VAR_1 . METHOD_2 ( ) ) { if ( key . equals ( VAR_2 . METHOD_3 ( ) ) ) { return VAR_2 . getValue ( ) ; } } return null ; }\n", "fixed": "public static < TYPE_1 , TYPE_2 > TYPE_2 METHOD_1 ( java.util.Map < TYPE_1 , TYPE_2 > VAR_1 , TYPE_1 key ) { for ( java.util.Map.Entry < TYPE_1 , TYPE_2 > VAR_2 : VAR_1 . METHOD_2 ( ) ) { if ( key . equals ( VAR_2 . METHOD_3 ( ) ) ) { return VAR_2 . getValue ( ) ; } } return null ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WebhookEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedWebhookEndpointBuilder advanced() {\n             return (AdvancedWebhookEndpointBuilder) this;\n         }", "fixed": "     \n    public interface WebhookEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedWebhookEndpointBuilder advanced() {\n             return (AdvancedWebhookEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( java.lang.String text , java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 . METHOD_2 ( ) ) if ( ( ( VAR_4 ) == 0 ) || ( ( VAR_5 ) != text ) ) { VAR_2 . METHOD_3 ( STRING_1 , new java.lang.Object [ ] { text , VAR_1 } ) ; VAR_6 = VAR_7 ; ( VAR_4 ) ++ ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String text , java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 . METHOD_2 ( ) ) if ( ( ( VAR_4 ) == 0 ) || ( ! ( VAR_5 . equals ( text ) ) ) ) { VAR_2 . METHOD_3 ( STRING_1 , new java.lang.Object [ ] { text , VAR_1 } ) ; VAR_6 = VAR_7 ; ( VAR_4 ) ++ ; } }\n"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n         }\n         return record;\n     }", "fixed": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
