{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleMailStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedGoogleMailStreamEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleMailStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedGoogleMailStreamEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5c2293d770a717694d0cedf4ebf9c9b2223571d0", "projectName": "alibaba.dubbo", "bugType": "Same Function Less Args", "problem": "         }\r\n         StaticDirectory<IHelloService> dic = new StaticDirectory<IHelloService>(durl, invokers, null);\r\n        dic.buildRouterChain(invokers);\r\n         AbstractClusterInvoker<IHelloService> cluster = new AbstractClusterInvoker(dic) {\r\n             @Override\r\n             protected Result doInvoke(Invocation invocation, List invokers, LoadBalance loadbalance)\r", "fixed": "         }\r\n         StaticDirectory<IHelloService> dic = new StaticDirectory<IHelloService>(durl, invokers, null);\r\n        dic.buildRouterChain();\r\n         AbstractClusterInvoker<IHelloService> cluster = new AbstractClusterInvoker(dic) {\r\n             @Override\r\n             protected Result doInvoke(Invocation invocation, List invokers, LoadBalance loadbalance)\r", "sourceBeforeFix": "dic.buildRouterChain(invokers)", "sourceAfterFix": "dic.buildRouterChain()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales() throws APIException;\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "fixed": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales();\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fBodyClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CordaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCordaEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CordaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCordaEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "c7f595fc915025236dad228bff9c4fdc3138c993", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Numeric Literal", "problem": "       }\n       else if(String.class.equals(cls)) {\n         if(json != null && json.startsWith(\"\\\"\") && json.endsWith(\"\\\"\") && json.length() > 1)\n          return json.substring(1, json.length() - 2);\n         else\n           return json;\n       }", "fixed": "       }\n       else if(String.class.equals(cls)) {\n         if(json != null && json.startsWith(\"\\\"\") && json.endsWith(\"\\\"\") && json.length() > 1)\n          return json.substring(1, json.length() - 1);\n         else\n           return json;\n       }", "sourceBeforeFix": "json.length() - 2", "sourceAfterFix": "json.length() - 1"}
{"fixCommitSHA1": "356ec6bd0161edfd46b42ffe55961d52884eb7f0", "projectName": "wildfly.wildfly", "bugType": "Change Binary Operator", "problem": "         if (offset < 0) {\n             offset = 0;\n         }\n        if (offset >= 0) {\n             update = Util.getWriteAttributeOperation(address, SOCKET_BINDING_PORT_OFFSET, offset);\n         }\n         updates.add(update);", "fixed": "         if (offset < 0) {\n             offset = 0;\n         }\n        if (offset > 0) {\n             update = Util.getWriteAttributeOperation(address, SOCKET_BINDING_PORT_OFFSET, offset);\n         }\n         updates.add(update);", "sourceBeforeFix": "offset >= 0", "sourceAfterFix": "offset > 0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5a7c8dcb683515f0fe6b3de6c18e78c749f3729a", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "     private static final String MOVE_COST_KEY = \"hbase.master.balancer.stochastic.moveCost\";\n     private static final String MAX_MOVES_PERCENT_KEY =\n         \"hbase.master.balancer.stochastic.maxMovePercent\";\n    private static final float DEFAULT_MOVE_COST = 100;\n     private static final int DEFAULT_MAX_MOVES = 600;\n     private static final float DEFAULT_MAX_MOVE_PERCENT = 0.25f;", "fixed": "     private static final String MOVE_COST_KEY = \"hbase.master.balancer.stochastic.moveCost\";\n     private static final String MAX_MOVES_PERCENT_KEY =\n         \"hbase.master.balancer.stochastic.maxMovePercent\";\n    private static final float DEFAULT_MOVE_COST = 7;\n     private static final int DEFAULT_MAX_MOVES = 600;\n     private static final float DEFAULT_MAX_MOVE_PERCENT = 0.25f;", "sourceBeforeFix": "DEFAULT_MOVE_COST=100", "sourceAfterFix": "DEFAULT_MOVE_COST=7"}
{"fixCommitSHA1": "adb4b87fa8867e9511b47773c165f2b12fdc27ef", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         AbstractAioChannel ch = null;\n         try {\n             ch = findChannel(command);\n        } catch (Exception e) {\n         }", "fixed": "         AbstractAioChannel ch = null;\n         try {\n             ch = findChannel(command);\n        } catch (Throwable t) {\n         }", "sourceBeforeFix": "Exception e", "sourceAfterFix": "Throwable t"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n     /**", "fixed": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n     /**", "sourceBeforeFix": "id=15808", "sourceAfterFix": "id=10808"}
{"fixCommitSHA1": "f89b9f2a2130ce548ca7ebb20fa1311bf714aa10", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       checks.add(dartSuperAccessorsPass);\n     }\n    if (options.needsTranspilationFrom(ES7)) {\n       TranspilationPasses.addEs2017Passes(checks);\n       checks.add(setFeatureSet(ES7));\n     }\n    if (options.needsTranspilationFrom(ES6) && !options.skipTranspilationAndCrash) {\n       checks.add(es6ExternsCheck);\n       TranspilationPasses.addEs6EarlyPasses(checks);\n     }", "fixed": "       checks.add(dartSuperAccessorsPass);\n     }\n    if (options.needsTranspilationFrom(ES8)) {\n       TranspilationPasses.addEs2017Passes(checks);\n       checks.add(setFeatureSet(ES7));\n     }\n    if ((options.needsTranspilationFrom(ES6) || options.needsTranspilationFrom(ES7))\n        && !options.skipTranspilationAndCrash) {\n       checks.add(es6ExternsCheck);\n       TranspilationPasses.addEs6EarlyPasses(checks);\n     }", "sourceBeforeFix": "options.needsTranspilationFrom(ES7)", "sourceAfterFix": "options.needsTranspilationFrom(ES8)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface LinkedInEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedLinkedInEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface LinkedInEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedLinkedInEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e9c4a734ff5160673024538f5b3ef1339c5424e7", "projectName": "thinkaurelius.titan", "bugType": "Wrong Function Name", "problem": "     @Override\n     public KeyColumnValueStore openDatabase(final String name) throws StorageException {\n        if (!stores.contains(name)) {\n             stores.putIfAbsent(name,new InMemoryKeyColumnValueStore(name));\n         }\n         KeyColumnValueStore store = stores.get(name);", "fixed": "     @Override\n     public KeyColumnValueStore openDatabase(final String name) throws StorageException {\n        if (!stores.containsKey(name)) {\n             stores.putIfAbsent(name,new InMemoryKeyColumnValueStore(name));\n         }\n         KeyColumnValueStore store = stores.get(name);", "sourceBeforeFix": "stores.contains(name)", "sourceAfterFix": "stores.containsKey(name)"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.valueOf(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "fixed": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      *\n      * @return Type of exception\n      */\n    public Class<? extends Exception> exceptionClass() {\n         return this.exceptionClass;\n     }", "fixed": "      *\n      * @return Type of exception\n      */\n    public Class<? extends T> exceptionClass() {\n         return this.exceptionClass;\n     }", "sourceBeforeFix": "? extends Exception", "sourceAfterFix": "? extends T"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "05a98f3214d35ba13978bc88988d5a83864b8cd7", "projectName": "alibaba.dubbo", "bugType": "Change Boolean Literal", "problem": "     boolean generic() default false;\n    boolean injvm() default false;\n     boolean check() default true;", "fixed": "     boolean generic() default false;\n    boolean injvm() default true;\n     boolean check() default true;", "sourceBeforeFix": "boolean injvm() default false; ", "sourceAfterFix": "boolean injvm() default true; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "51a15ac4a78ae570251ccc7c6a81b568663f1212", "projectName": "antlr.antlr4", "bugType": "Change Identifier Used", "problem": "s = target;\n \t\t}\n\t\treturn failOrAccept(prevAccept, input, reach, t);\n \t}\n \tprotected int failOrAccept(ExecState prevAccept, CharStream input,", "fixed": "s = target;\n \t\t}\n\t\treturn failOrAccept(prevAccept, input, closure, t);\n \t}\n \tprotected int failOrAccept(ExecState prevAccept, CharStream input,", "sourceBeforeFix": "failOrAccept(prevAccept,input,reach,t)", "sourceAfterFix": "failOrAccept(prevAccept,input,closure,t)"}
{"fixCommitSHA1": "7109f6f55968c830c5f43ff798e106ef2f14c71c", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "                 eq((byte) 0),\n                 eq(new GeneralDataCoding(\n                         false,\n                        false,\n                         MessageClass.CLASS1,\n                         Alphabet.ALPHA_DEFAULT)),\n                 eq((byte) 0),", "fixed": "                 eq((byte) 0),\n                 eq(new GeneralDataCoding(\n                         false,\n                        true,\n                         MessageClass.CLASS1,\n                         Alphabet.ALPHA_DEFAULT)),\n                 eq((byte) 0),", "sourceBeforeFix": "new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)", "sourceAfterFix": "new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)"}
{"fixCommitSHA1": "2918286bf4a010c9ac8eadffb958ff10fb41ad62", "projectName": "junit-team.junit", "bugType": "Wrong Function Name", "problem": "  * @since 4.5\n  */\n public class BlockJUnit4ClassRunner extends ParentRunner<FrameworkMethod> {\n    private ConcurrentHashMap<FrameworkMethod, Description> fMethodDescriptions = new ConcurrentHashMap<FrameworkMethod, Description>();\n     /**\n      * Creates a BlockJUnit4ClassRunner to run {@code klass}\n      *", "fixed": "  * @since 4.5\n  */\n public class BlockJUnit4ClassRunner extends ParentRunner<FrameworkMethod> {\n    private final ConcurrentHashMap<FrameworkMethod, Description> fMethodDescriptions = new ConcurrentHashMap<FrameworkMethod, Description>();\n     /**\n      * Creates a BlockJUnit4ClassRunner to run {@code klass}\n      *", "sourceBeforeFix": "fMethodDescriptions.put(method,description)", "sourceAfterFix": "fMethodDescriptions.putIfAbsent(method,description)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n \t/**\n \t * Save the given list of global properties to the database.", "fixed": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t/**\n \t * Save the given list of global properties to the database.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ServerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedServerEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ServerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedServerEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3e1c4d53a4730e2660c191def7615501a6fe982f", "projectName": "swagger-api.swagger-core", "bugType": "Same Function Less Args", "problem": "                     final String name = def.getName();\n                     if (name != null && name.equals(propertyName)) {\n                         final AnnotatedMember propMember = def.getPrimaryMember();\n                        final JavaType propType = propMember.getType(beanDesc.bindingsForBeanType());\n                         if (PrimitiveType.fromType(propType) != null) {\n                             return PrimitiveType.createProperty(propType);\n                         } else {", "fixed": "                     final String name = def.getName();\n                     if (name != null && name.equals(propertyName)) {\n                         final AnnotatedMember propMember = def.getPrimaryMember();\n                        final JavaType propType = propMember.getType();\n                         if (PrimitiveType.fromType(propType) != null) {\n                             return PrimitiveType.createProperty(propType);\n                         } else {", "sourceBeforeFix": "propMember.getType(beanDesc.bindingsForBeanType())", "sourceAfterFix": "propMember.getType()"}
{"fixCommitSHA1": "28474aa30adebc397ecdb993d62317e5659fce4a", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\treturn this.ssl;\n \t\t}\n\t\tpublic Long getAutoCommitInterval() {\n \t\t\treturn this.autoCommitInterval;\n \t\t}\n\t\tpublic void setAutoCommitInterval(Long autoCommitInterval) {\n \t\t\tthis.autoCommitInterval = autoCommitInterval;\n \t\t}", "fixed": " \t\t\treturn this.ssl;\n \t\t}\n\t\tpublic Integer getAutoCommitInterval() {\n \t\t\treturn this.autoCommitInterval;\n \t\t}\n\t\tpublic void setAutoCommitInterval(Integer autoCommitInterval) {\n \t\t\tthis.autoCommitInterval = autoCommitInterval;\n \t\t}", "sourceBeforeFix": "Long autoCommitInterval", "sourceAfterFix": "Integer autoCommitInterval"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "5c2293d770a717694d0cedf4ebf9c9b2223571d0", "projectName": "alibaba.dubbo", "bugType": "Same Function Less Args", "problem": "     }\n     private void initDic() {\n        dic.buildRouterChain(invokers);\n     }\n     @Test()", "fixed": "     }\n     private void initDic() {\n        dic.buildRouterChain();\n     }\n     @Test()", "sourceBeforeFix": "dic.buildRouterChain(invokers)", "sourceAfterFix": "dic.buildRouterChain()"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see NormalizableKey\n \t */\n\tpublic void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "fixed": " \t * \n* @see NormalizableKey\n \t */\n\tpublic abstract void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.valueOf(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "fixed": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "    * \n    * @param queueName Name of the job queue.\n    */\n  protected void setQueueName(String queueName) {\n     super.setQueueName(queueName);\n   }", "fixed": "    * \n    * @param queueName Name of the job queue.\n    */\n  @InterfaceAudience.Private\n  public void setQueueName(String queueName) {\n     super.setQueueName(queueName);\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the\n \t *                     input view, which may have an underlying I/O channel from which it reads.\n \t */\n\tpublic void deserialize(T target, DataInputView source) throws IOException;\n \t/**\n \t * Copies exactly one record from the source input view to the target output view. Whether this operation", "fixed": " \t * @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the\n \t *                     input view, which may have an underlying I/O channel from which it reads.\n \t */\n\tpublic abstract void deserialize(T target, DataInputView source) throws IOException;\n \t/**\n \t * Copies exactly one record from the source input view to the target output view. Whether this operation", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "39aa03261a00c409f29341c286febaec99468d65", "projectName": "apache.flink", "bugType": "Change Boolean Literal", "problem": " \t *         thrown if the given vertex cannot be connected to <code>vertex</code> in the requested manner\n \t */\n \tpublic void connectTo(final AbstractJobVertex vertex) throws JobGraphDefinitionException {\n\t\tthis.connectTo(vertex, null, null, -1, -1, DistributionPattern.BIPARTITE, false);\n \t}\n \t/**", "fixed": " \t *         thrown if the given vertex cannot be connected to <code>vertex</code> in the requested manner\n \t */\n \tpublic void connectTo(final AbstractJobVertex vertex) throws JobGraphDefinitionException {\n\t\tthis.connectTo(vertex, null, null, -1, -1, DistributionPattern.BIPARTITE, true);\n \t}\n \t/**", "sourceBeforeFix": "this.connectTo(vertex,channelType,compressionLevel,-1,-1,DistributionPattern.BIPARTITE,false)", "sourceAfterFix": "this.connectTo(vertex,channelType,compressionLevel,-1,-1,DistributionPattern.BIPARTITE,true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n                    Thread.sleep(50);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r", "fixed": "             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n                    Thread.sleep(100);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "3748afae244f81389553e149a023a0b3f81a90ab", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     try {\n       mFileSystemMaster.createFile(new AlluxioURI(\"alluxio:/a/f\"), CreateFileOptions.defaults());\n      Assert.fail();\n     } catch (FileAlreadyExistsException e) {\n     }\n   }", "fixed": "     try {\n       mFileSystemMaster.createFile(new AlluxioURI(\"alluxio:/a/f\"), CreateFileOptions.defaults());\n      Assert.fail(\"createDirectory was expected to fail with FileAlreadyExistsException\");\n     } catch (FileAlreadyExistsException e) {\n     }\n   }", "sourceBeforeFix": "Assert.fail()", "sourceAfterFix": "Assert.fail(\"createDirectory was expected to fail with FileAlreadyExistsException\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\treturn style;\r\n \t}\r\n\tpublic void setText (String text) {\r\n \t\tif (text == null) throw new IllegalArgumentException(\"text cannot be null.\");\r\n \t\tif (text.equals(this.text)) return;\r\n \t\tthis.text = text;\r", "fixed": " \t\treturn style;\r\n \t}\r\n\tpublic void setText (CharSequence text) {\r\n \t\tif (text == null) throw new IllegalArgumentException(\"text cannot be null.\");\r\n \t\tif (text.equals(this.text)) return;\r\n \t\tthis.text = text;\r", "sourceBeforeFix": "String text", "sourceAfterFix": "CharSequence text"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n \t/**\n \t * @param aClass class of object getting length for", "fixed": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t/**\n \t * @param aClass class of object getting length for", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f5d49ee1ec8af12ff786e421e2fa3b3ea74c42e7", "projectName": "gephi.gephi", "bugType": "Change Numeric Literal", "problem": "                     float b = Float.parseFloat(reader.getAttributeValue(null, \"b\"));\n                     float alpha = Float.parseFloat(reader.getAttributeValue(null, \"a\"));\n                     if(r < 0 || g < 0 || b < 0){\n                         r = g = b = 0;\n                        alpha = 1;\n                     }\n                     edge.setR(r);", "fixed": "                     float b = Float.parseFloat(reader.getAttributeValue(null, \"b\"));\n                     float alpha = Float.parseFloat(reader.getAttributeValue(null, \"a\"));\n                     if(r < 0 || g < 0 || b < 0){\n                         r = g = b = 0;\n                        alpha = 0;\n                     }\n                     edge.setR(r);", "sourceBeforeFix": "alpha=1", "sourceAfterFix": "alpha=0"}
{"fixCommitSHA1": "e38662958d7db7030bf961d25341586cedea5f1f", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "     @Message(id = 14238, value = \"More than one timer found in database with id %s\")\n     RuntimeException moreThanOneTimerFoundWithId(String id);\n    @Message(id = 14238, value = \"The timer service has been disabled. Please add a <timer-service> entry into the ejb section of the server configuration to enable it.\")\n     String timerServiceIsNotActive();\n    @Message(id = 14239, value = \"This EJB does not have any timeout methods\")\n     String ejbHasNoTimerMethods();\n }", "fixed": "     @Message(id = 14238, value = \"More than one timer found in database with id %s\")\n     RuntimeException moreThanOneTimerFoundWithId(String id);\n    @Message(id = 14239, value = \"The timer service has been disabled. Please add a <timer-service> entry into the ejb section of the server configuration to enable it.\")\n     String timerServiceIsNotActive();\n    @Message(id = 14240, value = \"This EJB does not have any timeout methods\")\n     String ejbHasNoTimerMethods();\n }", "sourceBeforeFix": "id=14239", "sourceAfterFix": "id=14240"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.debug(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "fixed": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")", "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"}
{"fixCommitSHA1": "2462c82c0ea8766f40cf454c57557a5c63d2c09d", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "   private static final PartitionsSpec DEFAULT_PARTITIONS_SPEC = HashedPartitionsSpec.makeDefaultHashedPartitionsSpec();\n   private static final Map<DateTime, List<HadoopyShardSpec>> DEFAULT_SHARD_SPECS = ImmutableMap.of();\n   private static final IndexSpec DEFAULT_INDEX_SPEC = new IndexSpec();\n  private static final int DEFAULT_ROW_FLUSH_BOUNDARY = 80000;\n   private static final boolean DEFAULT_USE_COMBINER = false;\n   private static final Boolean DEFAULT_BUILD_V9_DIRECTLY = Boolean.FALSE;\n   private static final int DEFAULT_NUM_BACKGROUND_PERSIST_THREADS = 0;", "fixed": "   private static final PartitionsSpec DEFAULT_PARTITIONS_SPEC = HashedPartitionsSpec.makeDefaultHashedPartitionsSpec();\n   private static final Map<DateTime, List<HadoopyShardSpec>> DEFAULT_SHARD_SPECS = ImmutableMap.of();\n   private static final IndexSpec DEFAULT_INDEX_SPEC = new IndexSpec();\n  private static final int DEFAULT_ROW_FLUSH_BOUNDARY = 75000;\n   private static final boolean DEFAULT_USE_COMBINER = false;\n   private static final Boolean DEFAULT_BUILD_V9_DIRECTLY = Boolean.FALSE;\n   private static final int DEFAULT_NUM_BACKGROUND_PERSIST_THREADS = 0;", "sourceBeforeFix": "DEFAULT_ROW_FLUSH_BOUNDARY=80000", "sourceAfterFix": "DEFAULT_ROW_FLUSH_BOUNDARY=75000"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixMapEndpointBuilder\n             extends\n                 AtomixMapEndpointConsumerBuilder, AtomixMapEndpointProducerBuilder {\n         default AdvancedAtomixMapEndpointBuilder advanced() {", "fixed": "     \n    public interface AtomixMapEndpointBuilder\n             extends\n                 AtomixMapEndpointConsumerBuilder, AtomixMapEndpointProducerBuilder {\n         default AdvancedAtomixMapEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testVarArgs1() {", "fixed": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testVarArgs1() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node1)", "sourceAfterFix": "node1.isEquivalentTo(node1)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "8a7c5ce2b440f584c4af52ae1e4d7f7a885a6ac4", "projectName": "alibaba.druid", "bugType": "Change Numeric Literal", "problem": "             }\r\n         }\r\n        for (int i = 0; i < 1000 * 1; ++i) {\r\n             Connection conn = dataSource.getConnection();\r\n             PreparedStatement stmt = conn.prepareStatement(\"SELECT \" + i);\r\n             stmt.execute();\r", "fixed": "             }\r\n         }\r\n        for (int i = 0; i < 10 * 1; ++i) {\r\n             Connection conn = dataSource.getConnection();\r\n             PreparedStatement stmt = conn.prepareStatement(\"SELECT \" + i);\r\n             stmt.execute();\r", "sourceBeforeFix": "1000 * 1", "sourceAfterFix": "10 * 1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "eb71c8999ff29f7dc3fe8dcdba81084f7f6a5fac", "projectName": "NanoHttpd.nanohttpd", "bugType": "Same Function More Args", "problem": "                     while (line != null && line.trim().length() > 0) {\n                         int p = line.indexOf(':');\n                         if (p >= 0)\n                            headers.put(line.substring(0, p).trim().toLowerCase(), line.substring(p + 1).trim());\n                         line = in.readLine();\n                     }\n                 }", "fixed": "                     while (line != null && line.trim().length() > 0) {\n                         int p = line.indexOf(':');\n                         if (p >= 0)\n                            headers.put(line.substring(0, p).trim().toLowerCase(Locale.US), line.substring(p + 1).trim());\n                         line = in.readLine();\n                     }\n                 }", "sourceBeforeFix": "mpline.substring(0,p).trim().toLowerCase()", "sourceAfterFix": "mpline.substring(0,p).trim().toLowerCase(Locale.US)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EjbEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedEjbEndpointBuilder advanced() {\n             return (AdvancedEjbEndpointBuilder) this;\n         }", "fixed": "     \n    public interface EjbEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedEjbEndpointBuilder advanced() {\n             return (AdvancedEjbEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d222fc981c938bd3543ee61f22422d20efcdcd94", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(800);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(800)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see java.lang.Object\n \t */\n\tpublic int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "fixed": " \t * \n* @see java.lang.Object\n \t */\n\tpublic abstract int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "114870164ba9822afc3a92eefe5258f54a1c6a17", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "             assertEquals(1, taskService.createTaskQuery()\n                     .or()\n                     .taskInvolvedUser(\"involvedUser\")\n                    .taskInvolvedGroups(groups)\n                     .endOr()\n                     .count());", "fixed": "             assertEquals(1, taskService.createTaskQuery()\n                     .or()\n                     .taskInvolvedUser(\"involvedUser\")\n                    .taskInvolvedGroupsIn(groups)\n                     .endOr()\n                     .count());", "sourceBeforeFix": "taskService.createTaskQuery().or().taskInvolvedUser(\"involvedUser\").taskInvolvedGroups(groups)", "sourceAfterFix": "taskService.createTaskQuery().or().taskInvolvedUser(\"involvedUser\").taskInvolvedGroupsIn(groups)"}
{"fixCommitSHA1": "e89837b42ece86ae3a0efc8ba272f550c98cd33c", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param ast DetailAST node.\n      * @return Column number if non-comment node exists, -1 otherwise.\n      */\n    private int findColumnNo(DetailAST ast) {\n         int resultNo = -1;\n         DetailAST node = ast;\n         while (node != null) {", "fixed": "      * @param ast DetailAST node.\n      * @return Column number if non-comment node exists, -1 otherwise.\n      */\n    private static int findColumnNo(DetailAST ast) {\n         int resultNo = -1;\n         DetailAST node = ast;\n         while (node != null) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15803, value = \"Caught exception awaiting final response from server %s on host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String serverName, String hostName);\n     /**", "fixed": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10803, value = \"Caught exception awaiting final response from server %s on host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String serverName, String hostName);\n     /**", "sourceBeforeFix": "id=15807", "sourceAfterFix": "id=10807"}
{"fixCommitSHA1": "0682e8dd41045e3375b61d3d76f6e6991e98c869", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "             }\n         }\n         if (simple.getFromReceivedDate() != null) {\n            String s = simple.getFromSentDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));", "fixed": "             }\n         }\n         if (simple.getFromReceivedDate() != null) {\n            String s = simple.getFromReceivedDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));", "sourceBeforeFix": "simple.getFromSentDate()", "sourceAfterFix": "simple.getToSentDate()"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNano(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "fixed": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "    * \n    * @param queueName Name of the job queue.\n    */\n  protected void setQueueName(String queueName) {\n     super.setQueueName(queueName);\n   }", "fixed": "    * \n    * @param queueName Name of the job queue.\n    */\n  @InterfaceAudience.Private\n  public void setQueueName(String queueName) {\n     super.setQueueName(queueName);\n   }", "sourceBeforeFix": "4", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypes()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", \"b\")", "fixed": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", \"b\")", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "0187e5106dfc5034b8b1650083eab37181ff0de3", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tvoid userConfigurationBeans() {\n \t\tthis.contextRunner\n \t\t\t\t.withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)\n \t\t\t\t.run((context) -> {", "fixed": " \t}\n \t@Test\n\tpublic void userConfigurationBeans() {\n \t\tthis.contextRunner\n \t\t\t\t.withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)\n \t\t\t\t.run((context) -> {", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "8969566d0926bdd2ef438e8c9ba6e8e196f7ba7d", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {\n       @Override\n       public Integer execute(Jedis connection) {\n        connection.subscribe(jedisPubSub, patterns);\n         return 0;\n       }\n     }.runWithAnyNode();", "fixed": "     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {\n       @Override\n       public Integer execute(Jedis connection) {\n        connection.psubscribe(jedisPubSub, patterns);\n         return 0;\n       }\n     }.runWithAnyNode();", "sourceBeforeFix": "connection.subscribe(jedisPubSub,patterns)", "sourceAfterFix": "connection.psubscribe(jedisPubSub,patterns)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.valueOf(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "fixed": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "1b93a2f8d9a40a28615c3acc0c6415d678e26466", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         failureCause.compareAndSet(null, toFailure(throwable));\n         boolean failed = queryState.setIf(FAILED, currentState -> !currentState.isDone());\n         if (failed) {\n            log.error(throwable, \"Query %s failed\", queryId);\n         }\n         else {\n             log.debug(throwable, \"Failure after query %s finished\", queryId);", "fixed": "         failureCause.compareAndSet(null, toFailure(throwable));\n         boolean failed = queryState.setIf(FAILED, currentState -> !currentState.isDone());\n         if (failed) {\n            log.debug(throwable, \"Query %s failed\", queryId);\n         }\n         else {\n             log.debug(throwable, \"Failure after query %s finished\", queryId);", "sourceBeforeFix": "log.error(throwable,\"Query %s failed\",queryId)", "sourceAfterFix": "log.debug(throwable,\"Query %s failed\",queryId)"}
{"fixCommitSHA1": "8dfebd28f7231f2b39946cd11f6bfd4edb822969", "projectName": "yusuke.twitter4j", "bugType": "Same Function More Args", "problem": "     public static Date getDate(String name, String format) throws TwitterException {\n         SimpleDateFormat sdf = formatMap.get().get(format);\n         if (null == sdf) {\n            sdf = new SimpleDateFormat(format);\n             sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n             formatMap.get().put(format, sdf);\n         }", "fixed": "     public static Date getDate(String name, String format) throws TwitterException {\n         SimpleDateFormat sdf = formatMap.get().get(format);\n         if (null == sdf) {\n            sdf = new SimpleDateFormat(format, Locale.US);\n             sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n             formatMap.get().put(format, sdf);\n         }", "sourceBeforeFix": "new SimpleDateFormat(format)", "sourceAfterFix": "new SimpleDateFormat(format,Locale.US)"}
{"fixCommitSHA1": "46941b16a30e493238924701f938cbf3318eb355", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "fixed": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());\n     }\n    private void generateConstructor(ClassDefinition classDefinition,\n             List<Integer> joinChannels,\n             FieldDefinition sizeField,\n             List<FieldDefinition> channelFields,", "fixed": "         return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());\n     }\n    private static void generateConstructor(ClassDefinition classDefinition,\n             List<Integer> joinChannels,\n             FieldDefinition sizeField,\n             List<FieldDefinition> channelFields,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "e08f74620ba29298d59c97e7327cbe51fbd5b39e", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tprivate int pressedButton = -1;\r\n \tprivate int button;\r\n \tprivate boolean pressed, over, cancelled;\r\n\tprivate float visualPressedTime;\r\n \tprivate long tapCountInterval = (long)(0.4f * 1000000000l);\r\n \tprivate int tapCount;\r\n \tprivate long lastTapTime;\r", "fixed": " \tprivate int pressedButton = -1;\r\n \tprivate int button;\r\n \tprivate boolean pressed, over, cancelled;\r\n\tprivate long visualPressedTime;\r\n \tprivate long tapCountInterval = (long)(0.4f * 1000000000l);\r\n \tprivate int tapCount;\r\n \tprivate long lastTapTime;\r", "sourceBeforeFix": "TimeUtils.nanoTime()", "sourceAfterFix": "TimeUtils.millis()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "8a9e1bcbff1ff10cf122b23b3a1aa437f02a2086", "projectName": "gephi.gephi", "bugType": "Change Unary Operator\t", "problem": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "fixed": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && !sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "sourceBeforeFix": "sourceEdgeTextData.getText().isEmpty()", "sourceAfterFix": "!sourceEdgeTextData.getText().isEmpty()"}
{"fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }", "fixed": "                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }", "sourceBeforeFix": "invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation)", "sourceAfterFix": "invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation)"}
{"fixCommitSHA1": "d33c0ebf8f8f52fb6fb82d615cec50a10627d267", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\n\t\tprivate String port = \"5000\";\n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n\t\t\t\tconfig.put(\"crash.telnet.port\", this.port);\n \t\t\t}\n \t\t}", "fixed": " \t\t\n\t\tprivate Integer port = 5000;\n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n\t\t\t\tconfig.put(\"crash.telnet.port\", String.valueOf(this.port));\n \t\t\t}\n \t\t}", "sourceBeforeFix": "/**   * Telnet port.  */ private String port=\"5000\"; ", "sourceAfterFix": "/**   * Telnet port.  */ private Integer port=5000; "}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "10c93df27435ffbc037cde5e6063c9dbc6c0eb3f", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         HostAndPort host = HostAndPort.fromString(server);\n         try {\n            return new URI(\"http\", null, host.getHostText(), host.getPortOrDefault(80), null, null, null);\n         }\n         catch (URISyntaxException e) {\n             throw new IllegalArgumentException(e);", "fixed": "         HostAndPort host = HostAndPort.fromString(server);\n         try {\n            return new URI(\"http\", null, host.getHost(), host.getPortOrDefault(80), null, null, null);\n         }\n         catch (URISyntaxException e) {\n             throw new IllegalArgumentException(e);", "sourceBeforeFix": "host.getHostText()", "sourceAfterFix": "host.getHost()"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   @SuppressWarnings(\"unchecked\")\n   @Override\n  public V value(Object node) {\n     Object value = adjacentNodeValues.get(node);\n     if (value == PRED) {\n       return null;", "fixed": "   @SuppressWarnings(\"unchecked\")\n   @Override\n  public V value(N node) {\n     Object value = adjacentNodeValues.get(node);\n     if (value == PRED) {\n       return null;", "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JmsEndpointBuilder\n             extends\n                 JmsEndpointConsumerBuilder, JmsEndpointProducerBuilder {\n         default AdvancedJmsEndpointBuilder advanced() {", "fixed": "     \n    public interface JmsEndpointBuilder\n             extends\n                 JmsEndpointConsumerBuilder, JmsEndpointProducerBuilder {\n         default AdvancedJmsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result2\");\n        mock.expectedBodiesReceived(\"Hello World 2\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result2\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World 2\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\")"}
{"fixCommitSHA1": "ec6db0e0ab4948c4056a7c13da54f67c26c1ccaf", "projectName": "openhab.openhab", "bugType": "Less Specific If", "problem": " \t\t\t\tList<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();\n\t\t\t\tif(configList.size() == 0) {\n \t\t\t\t\tbreak;\n \t\t\t\t}", "fixed": " \t\t\t\tList<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();\n\t\t\t\tif(configList == null || configList.size() == 0) {\n \t\t\t\t\tbreak;\n \t\t\t\t}", "sourceBeforeFix": "configList.size() == 0", "sourceAfterFix": "configList == null || configList.size() == 0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
