{"fixCommitSHA1": "ee8bd325463cae737e0ffd836a3d5376fe695f3f", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "             public void configure() throws Exception {\n                 from(\"seda:foo\")\n                     .startupOrder(1)\n.delay(1000).to(\"file:", "fixed": "             public void configure() throws Exception {\n                 from(\"seda:foo\")\n                     .startupOrder(1)\n.delay(500).to(\"file:", "sourceBeforeFix": "bar.setResultWaitTime(3000)", "sourceAfterFix": "bar.setResultWaitTime(1000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5ac0dcd1b04e38a3dbe11a94897cc0a34ef2d5ec", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Override\n\tpublic void log (String tag, String message, Exception exception) {\n \t\tif (logLevel >= LOG_INFO) Log.i(tag, message, exception);\n \t}", "fixed": " \t}\n \t@Override\n\tpublic void log (String tag, String message, Throwable exception) {\n \t\tif (logLevel >= LOG_INFO) Log.i(tag, message, exception);\n \t}", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "Throwable exception"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "16b799dae56b54f82a14dc0e0ad24977f06df6f6", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "   public void testBulkOutputWithTsvImporterTextMapper() throws Exception {\n     String table = \"test-\" + UUID.randomUUID();\n     String FAMILY = \"FAM\";\n    Path bulkOutputPath = new Path(util.getDataTestDir(table),\"hfiles\");\n     String[] args =\n         new String[] {", "fixed": "   public void testBulkOutputWithTsvImporterTextMapper() throws Exception {\n     String table = \"test-\" + UUID.randomUUID();\n     String FAMILY = \"FAM\";\n    Path bulkOutputPath = new Path(util.getDataTestDirOnTestFS(table),\"hfiles\");\n     String[] args =\n         new String[] {", "sourceBeforeFix": "util.getDataTestDir(table)", "sourceAfterFix": "util.getDataTestDirOnTestFS(table)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "04a010c8499fbc96b1e5a99bdbebaf0b38d24586", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \tpublic void addAll (long[] array, int offset, int length) {\r\n \t\tlong[] items = this.items;\r\n \t\tint sizeNeeded = size + length;\r\n\t\tif (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));\r\n \t\tSystem.arraycopy(array, offset, items, size, length);\r\n \t\tsize += length;\r\n \t}\r", "fixed": " \tpublic void addAll (long[] array, int offset, int length) {\r\n \t\tlong[] items = this.items;\r\n \t\tint sizeNeeded = size + length;\r\n\t\tif (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));\r\n \t\tSystem.arraycopy(array, offset, items, size, length);\r\n \t\tsize += length;\r\n \t}\r", "sourceBeforeFix": "sizeNeeded >= items.length", "sourceAfterFix": "sizeNeeded > items.length"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.valueOf(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "fixed": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "sourceBeforeFix": "Long.valueOf(timeout)", "sourceAfterFix": "Long.parseLong(timeout)"}
{"fixCommitSHA1": "499d9d3f89368592549f1ec3701f5a7616113a4c", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testTokenGetters_2() throws Exception {\n \t\tmkdir(parserpkgdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(674);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"@parser::header {\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");", "fixed": " \t@Test\n \tpublic void testTokenGetters_2() throws Exception {\n \t\tmkdir(parserpkgdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(734);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"@parser::header {\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");", "sourceBeforeFix": "new StringBuilder(674)", "sourceAfterFix": "new StringBuilder(734)"}
{"fixCommitSHA1": "9a3c1894123322a90e5d2e002d7ae417349bfeed", "projectName": "google.guice", "bugType": "Change Identifier Used", "problem": "   }\n   public void testRelatedTypeVariables() {\n    TypeResolver resolver = new TypeResolver(arrayListOfString);\n     assertEquals(String.class, resolver.getParameterTypes(echo).get(0));\n     assertEquals(String.class, resolver.getReturnType(echo));\n   }", "fixed": "   }\n   public void testRelatedTypeVariables() {\n    TypeResolver resolver = new TypeResolver(hasRelatedOfString);\n     assertEquals(String.class, resolver.getParameterTypes(echo).get(0));\n     assertEquals(String.class, resolver.getReturnType(echo));\n   }", "sourceBeforeFix": "new TypeResolver(arrayListOfString)", "sourceAfterFix": "new TypeResolver(hasRelatedOfString)"}
{"fixCommitSHA1": "27c73d4725381f5827b144fc4ead6c8e3a8ad83f", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "     protected Data value;\n    public DataRecord(Data keyData, Data value) {\n         super(keyData);\n         this.value = value;\n     }\n    public DataRecord() {\n     }\n     /*", "fixed": "     protected Data value;\n    DataRecord(Data keyData, Data value) {\n         super(keyData);\n         this.value = value;\n     }\n    DataRecord() {\n     }\n     /*", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    private static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "fixed": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "45e44a390cd287a141dc0f446038169608294879", "projectName": "square.okhttp", "bugType": "Change Numeric Literal", "problem": " public final class DiskLruCacheTest {\n   @Rule public final TemporaryFolder tempDir = new TemporaryFolder();\n  @Rule public final Timeout timeout = new Timeout(30 * 1000);\n   private final FaultyFileSystem fileSystem = new FaultyFileSystem(FileSystem.SYSTEM);\n   private final int appVersion = 100;", "fixed": " public final class DiskLruCacheTest {\n   @Rule public final TemporaryFolder tempDir = new TemporaryFolder();\n  @Rule public final Timeout timeout = new Timeout(60 * 1000);\n   private final FaultyFileSystem fileSystem = new FaultyFileSystem(FileSystem.SYSTEM);\n   private final int appVersion = 100;", "sourceBeforeFix": "30 * 1000", "sourceAfterFix": "60 * 1000"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8abd59029e7c0bc0973b492fd84a386b26661bc7", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "             }\n         });\n         try {\n            finish.await(getTimeout(), TimeUnit.MILLISECONDS);\n         } catch (InterruptedException e) {\n             throw new RemotingException(this, \"client(url: \" + getUrl() + \") failed to connect to server \" + getRemoteAddress() + \" client-side timeout \"\n                    + getTimeout() + \"ms (elapsed: \" + (System.currentTimeMillis() - start)\n                     + \"ms) from netty client \" + NetUtils.getLocalHost() + \" using dubbo version \"\n                     + Version.getVersion() + \", cause: \" + e.getMessage(), e);\n         }", "fixed": "             }\n         });\n         try {\n            finish.await(getConnectTimeout(), TimeUnit.MILLISECONDS);\n         } catch (InterruptedException e) {\n             throw new RemotingException(this, \"client(url: \" + getUrl() + \") failed to connect to server \" + getRemoteAddress() + \" client-side timeout \"\n                    + getConnectTimeout() + \"ms (elapsed: \" + (System.currentTimeMillis() - start)\n                     + \"ms) from netty client \" + NetUtils.getLocalHost() + \" using dubbo version \"\n                     + Version.getVersion() + \", cause: \" + e.getMessage(), e);\n         }", "sourceBeforeFix": "getTimeout()", "sourceAfterFix": "getConnectTimeout()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.", "fixed": " \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EventAdminEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedEventAdminEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface EventAdminEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedEventAdminEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "da5e1827cf1c86cb1bddf3886a83736990a36430", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         if (rightValue instanceof Comparable) {\n            Object value = converter.convertTo(rightValue.getClass(), leftValue);\n             if (value != null) {\n                 return ((Comparable) rightValue).compareTo(value) * -1;\n             }", "fixed": "         if (rightValue instanceof Comparable) {\n            Object value = converter.tryConvertTo(rightValue.getClass(), leftValue);\n             if (value != null) {\n                 return ((Comparable) rightValue).compareTo(value) * -1;\n             }", "sourceBeforeFix": "converter.convertTo(rightValue.getClass(),leftValue)", "sourceAfterFix": "converter.tryConvertTo(rightValue.getClass(),leftValue)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FacebookEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFacebookEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface FacebookEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFacebookEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ea891b1fd030f0e7442611ed4c3c81893124712b", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "         catch (InvocationTargetException ex) {\n             assertTrue(ex.getCause() instanceof IOException);\n             if (System.getProperty(\"os.name\").toLowerCase(ENGLISH).startsWith(\"windows\")) {\n                assertEquals(ex.getCause().getMessage(), \"Unable to read 2 bytes, got 0\");\n             }\n             else {\n                assertEquals(ex.getCause().getMessage(), \"Unable to read 1 bytes, got 0\");\n             }\n         }\n     }", "fixed": "         catch (InvocationTargetException ex) {\n             assertTrue(ex.getCause() instanceof IOException);\n             if (System.getProperty(\"os.name\").toLowerCase(ENGLISH).startsWith(\"windows\")) {\n                assertEquals(\"Unable to read 2 bytes, got 0\", ex.getCause().getMessage());\n             }\n             else {\n                assertEquals(\"Unable to read 1 bytes, got 0\", ex.getCause().getMessage());\n             }\n         }\n     }", "sourceBeforeFix": "assertEquals(iter.next().getMessage(),\"Unable to open ''.\")", "sourceAfterFix": "assertEquals(\"Unable to open ''.\",iter.next().getMessage())"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "         ret = getMS().updatePartitionColumnStatistics(colStats, partVals);\n         return ret;\n       } finally {\n        endFunction(\"write_partition_column_statistics: \", ret != false);\n       }\n     }", "fixed": "         ret = getMS().updatePartitionColumnStatistics(colStats, partVals);\n         return ret;\n       } finally {\n        endFunction(\"write_partition_column_statistics: \", ret != false, null);\n       }\n     }", "sourceBeforeFix": "endFunction(\"write_partition_column_statistics: \",ret != false)", "sourceAfterFix": "endFunction(\"write_partition_column_statistics: \",ret != false,null)"}
{"fixCommitSHA1": "849b3ba2b1282a89d8cf60a10891ea11a9e16bb4", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Wrong Function Name", "problem": "                            HttpServletRequest request,\n                            HttpServletResponse response) throws IOException, ServletException {\n             if (\"GET\".equalsIgnoreCase(request.getMethod())) {\n                response.addHeader(\"target\", r.getUri().toString());\n                 response.setStatus(HttpServletResponse.SC_OK);\n} else {\n                 response.sendError(HttpServletResponse.SC_FORBIDDEN);", "fixed": "                            HttpServletRequest request,\n                            HttpServletResponse response) throws IOException, ServletException {\n             if (\"GET\".equalsIgnoreCase(request.getMethod())) {\n                response.addHeader(\"target\", r.getUri().getPath());\n                 response.setStatus(HttpServletResponse.SC_OK);\n} else {\n                 response.sendError(HttpServletResponse.SC_FORBIDDEN);", "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}
{"fixCommitSHA1": "382391ddb05d6a76ddd1e42f8392ce0e288b10b3", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         String trustStore = getProperty(properties, \"trustStore\", keyStore);\n         String trustStorePassword = getProperty(properties, \"trustStorePassword\", keyStorePassword);\n        String keyManagerAlgorithm = properties.getProperty(\"keyManagerAlgorithm\", TrustManagerFactory.getDefaultAlgorithm());\n         String trustManagerAlgorithm = properties.getProperty(\"trustManagerAlgorithm\", TrustManagerFactory.getDefaultAlgorithm());\n         String protocol = properties.getProperty(\"protocol\", \"TLS\");", "fixed": "         String trustStore = getProperty(properties, \"trustStore\", keyStore);\n         String trustStorePassword = getProperty(properties, \"trustStorePassword\", keyStorePassword);\n        String keyManagerAlgorithm = properties.getProperty(\"keyManagerAlgorithm\", KeyManagerFactory.getDefaultAlgorithm());\n         String trustManagerAlgorithm = properties.getProperty(\"trustManagerAlgorithm\", TrustManagerFactory.getDefaultAlgorithm());\n         String protocol = properties.getProperty(\"protocol\", \"TLS\");", "sourceBeforeFix": "TrustManagerFactory.getDefaultAlgorithm()", "sourceAfterFix": "KeyManagerFactory.getDefaultAlgorithm()"}
{"fixCommitSHA1": "31011d3232ace5a459ea2ba37f5634f7d4940694", "projectName": "openmrs.openmrs-core", "bugType": "Change Caller in Function Call", "problem": " \tpublic boolean hasDuplicateUsername(String username, String systemId, Integer userId) {\r\n \t\tif (username == null || username.length() == 0)\r\n \t\t\tusername = \"-\";\r\n\t\tif (systemId == null || username.length() == 0)\r\n \t\t\tsystemId = \"-\";\r\n \t\tif (userId == null)\r", "fixed": " \tpublic boolean hasDuplicateUsername(String username, String systemId, Integer userId) {\r\n \t\tif (username == null || username.length() == 0)\r\n \t\t\tusername = \"-\";\r\n\t\tif (systemId == null || systemId.length() == 0)\r\n \t\t\tsystemId = \"-\";\r\n \t\tif (userId == null)\r", "sourceBeforeFix": "username.length()", "sourceAfterFix": "systemId.length()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "bee7a939ade6ee0b42f00ea8727996986e31d6db", "projectName": "eclipse.vert.x", "bugType": "Change Binary Operator", "problem": "     @Override\n     public ByteBuf buffer(int initialCapacity) {\n      if (initialCapacity < capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();", "fixed": "     @Override\n     public ByteBuf buffer(int initialCapacity) {\n      if (initialCapacity <= capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();", "sourceBeforeFix": "initialCapacity < capacity", "sourceAfterFix": "initialCapacity <= capacity"}
{"fixCommitSHA1": "dfb39dfaeaafc913d827d42aff17a56fe3f9c535", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     private Collection<InetSocketAddress> getConfigAddresses() {\n         final List<InetSocketAddress> socketAddresses = new LinkedList<InetSocketAddress>();\n        for (String address : getClientConfig().getAddressList()) {\n             socketAddresses.addAll(AddressHelper.getSocketAddresses(address));\n         }\n         Collections.shuffle(socketAddresses);", "fixed": "     private Collection<InetSocketAddress> getConfigAddresses() {\n         final List<InetSocketAddress> socketAddresses = new LinkedList<InetSocketAddress>();\n        for (String address : getClientConfig().getAddresses()) {\n             socketAddresses.addAll(AddressHelper.getSocketAddresses(address));\n         }\n         Collections.shuffle(socketAddresses);", "sourceBeforeFix": "getClientConfig().getAddressList()", "sourceAfterFix": "getClientConfig().getAddresses()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesResourcesQuotaEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesResourcesQuotaEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesResourcesQuotaEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesResourcesQuotaEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e9f14f107361d9cef5582c2d2a8e657691e76ec6", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "     Mockito.when(mockRegionScanner.getRegionInfo()).thenReturn(mockRegionInfo);\n     Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);\n     Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);\n    Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(true);\n     qosFunction.setRegionServer(mockRS);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);\n    Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(false);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.NORMAL_QOS);\n   }", "fixed": "     Mockito.when(mockRegionScanner.getRegionInfo()).thenReturn(mockRegionInfo);\n     Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);\n     Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);\n    Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(true);\n     qosFunction.setRegionServer(mockRS);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);\n    Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(false);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.NORMAL_QOS);\n   }", "sourceBeforeFix": "mockRegionInfo.isMetaRegion()", "sourceAfterFix": "mockRegionInfo.isMetaTable()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void logoutUser();\n     @PUT\n     @Path(\"/{username}\")", "fixed": "     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void logoutUser() throws Exception;\n     @PUT\n     @Path(\"/{username}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "8dad775af94f89faba78ef282c475cf9da02147a", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "             PropertiesAuthenticationResourceDefinition.PATH.marshallAsAttribute(properties, writer);\n             PropertiesAuthenticationResourceDefinition.RELATIVE_TO.marshallAsAttribute(properties, writer);\n             PropertiesAuthenticationResourceDefinition.PLAIN_TEXT.marshallAsAttribute(properties, writer);\n        } else if (authentication.hasDefined(USERS)) {\n             ModelNode userDomain = authentication.get(USERS);\n             ModelNode users = userDomain.hasDefined(USER) ? userDomain.require(USER) : new ModelNode().setEmptyObject();\n             writer.writeStartElement(Element.USERS.getLocalName());", "fixed": "             PropertiesAuthenticationResourceDefinition.PATH.marshallAsAttribute(properties, writer);\n             PropertiesAuthenticationResourceDefinition.RELATIVE_TO.marshallAsAttribute(properties, writer);\n             PropertiesAuthenticationResourceDefinition.PLAIN_TEXT.marshallAsAttribute(properties, writer);\n        } else if (authentication.has(USERS)) {\n             ModelNode userDomain = authentication.get(USERS);\n             ModelNode users = userDomain.hasDefined(USER) ? userDomain.require(USER) : new ModelNode().setEmptyObject();\n             writer.writeStartElement(Element.USERS.getLocalName());", "sourceBeforeFix": "authentication.hasDefined(USERS)", "sourceAfterFix": "authentication.has(USERS)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glGetShader(shader,pname,params)", "sourceAfterFix": "GL20.glGetShaderiv(shader,pname,params)"}
{"fixCommitSHA1": "41467c8004b716fb78002c3139ea771b70ed165d", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tprivate void renderCached () {\r\n\t\tcache5.setColor(red);\r\n \t\tcache5.draw(spriteBatch);\r\n \t\tcache1.draw(spriteBatch);\r", "fixed": " \t}\r\n \tprivate void renderCached () {\r\n\t\tcache5.setColors(red);\r\n \t\tcache5.draw(spriteBatch);\r\n \t\tcache1.draw(spriteBatch);\r", "sourceBeforeFix": "cache5.setColor(red)", "sourceAfterFix": "cache5.setColors(red)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "97d07253e2933dbca0d08cd19072503506bda863", "projectName": "netty.netty", "bugType": "Change Numeric Literal", "problem": "             return OK;\n         case 1:\n             return PROTOCOL_ERROR;\n        case 11:\n             return INTERNAL_ERROR;\n         }", "fixed": "             return OK;\n         case 1:\n             return PROTOCOL_ERROR;\n        case 2:\n             return INTERNAL_ERROR;\n         }", "sourceBeforeFix": "new SpdySessionStatus(11,\"INTERNAL_ERROR\")", "sourceAfterFix": "new SpdySessionStatus(2,\"INTERNAL_ERROR\")"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwitterDirectMessageEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterDirectMessageEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface TwitterDirectMessageEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterDirectMessageEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body);\n }", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "a4662237bc467310f0dc1c28aa621f84571225b1", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "   @Deployment(resources = \"org/activiti/engine/test/api/event/JobEventsTest.testJobCanceledEventOnBoundaryEvent.bpmn20.xml\")\n   public void testJobCanceledEventByManagementService() throws Exception {\n    processEngineConfiguration.getClock().setCurrentTime(new Date(0));\n     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"testTimerCancelledEvent\");\n     listener.clearEventsReceived();", "fixed": "   @Deployment(resources = \"org/activiti/engine/test/api/event/JobEventsTest.testJobCanceledEventOnBoundaryEvent.bpmn20.xml\")\n   public void testJobCanceledEventByManagementService() throws Exception {\n    processEngineConfiguration.getClock().setCurrentTime(new Date(1));\n     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"testTimerCancelledEvent\");\n     listener.clearEventsReceived();", "sourceBeforeFix": "new Date(0)", "sourceAfterFix": "new Date(1)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MasterEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedMasterEndpointBuilder advanced() {\n             return (AdvancedMasterEndpointBuilder) this;\n         }", "fixed": "     \n    public interface MasterEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedMasterEndpointBuilder advanced() {\n             return (AdvancedMasterEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "df0e14359abd61ff3a5713e5e12e116b3fb1c3ed", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " \tprivate static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();\n\tprivate static Set<String> actualStartupOrder;\n \t/**\n \t * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an", "fixed": " \tprivate static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();\n\tprivate static volatile Set<String> actualStartupOrder;\n \t/**\n \t * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an", "sourceBeforeFix": "12", "sourceAfterFix": "76"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     private static final String DELTA= \"void delta()\";\n     private static final String EPSILON= \"void epsilon()\";\n    private static class Dummy {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     private static final String DELTA= \"void delta()\";\n     private static final String EPSILON= \"void epsilon()\";\n    static class Dummy {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CaffeineCacheEndpointBuilder\n             extends\n                 CaffeineCacheEndpointConsumerBuilder, CaffeineCacheEndpointProducerBuilder {\n         default AdvancedCaffeineCacheEndpointBuilder advanced() {", "fixed": "     \n    public interface CaffeineCacheEndpointBuilder\n             extends\n                 CaffeineCacheEndpointConsumerBuilder, CaffeineCacheEndpointProducerBuilder {\n         default AdvancedCaffeineCacheEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6ec426667bbf19be4fca84eec48e03152e2cfffe", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Change Identifier Used", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MllpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMllpEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface MllpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMllpEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f652e2465b9f44d024cbb1a91f5793c147a50471", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         reader.join();\n         writer.join();\n        await().atMost(5, TimeUnit.SECONDS).untilTrue(caughtExceptionInReader);\n         assertTrue(stream.getFailed() instanceof Exception);\n         assertEquals(\"Some weird error\", stream.getFailed().getMessage());\n     }", "fixed": "         reader.join();\n         writer.join();\n        await().atMost(20, TimeUnit.SECONDS).untilTrue(caughtExceptionInReader);\n         assertTrue(stream.getFailed() instanceof Exception);\n         assertEquals(\"Some weird error\", stream.getFailed().getMessage());\n     }", "sourceBeforeFix": "await().atMost(5,TimeUnit.SECONDS)", "sourceAfterFix": "await().atMost(20,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "44908857072c127c1f2daff00e28a92d0aaf1fa1", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                 from(\"atom:file:src/test/data/feed.atom?splitEntries=true&filter=false\").to(\"mock:result2\");\r\n                from(\"atom:file:src/test/data/feed.atom?splitEntries=true&filter=true&lastUpdate=2007-11-13T14:35:00\").to(\"mock:result3\");\r\n             }\r\n         };\r\n     }\r", "fixed": "                 from(\"atom:file:src/test/data/feed.atom?splitEntries=true&filter=false\").to(\"mock:result2\");\r\n                from(\"atom:file:src/test/data/feed.atom?splitEntries=true&filter=true&lastUpdate=2007-11-13T23:59:00\").to(\"mock:result3\");\r\n             }\r\n         };\r\n     }\r", "sourceBeforeFix": "mock.expectedMessageCount(4)", "sourceAfterFix": "mock.expectedMessageCount(2)"}
{"fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "   public boolean isAtCapacity()\n   {\n    return getCurrCapacity() >= worker.getCapacity();\n   }\n   public boolean canRunTask(Task task)\n   {\n    return (worker.getCapacity() - getCurrCapacity() >= task.getTaskResource().getRequiredCapacity()\n             && !getAvailabilityGroups().contains(task.getTaskResource().getAvailabilityGroup()));\n   }", "fixed": "   public boolean isAtCapacity()\n   {\n    return getCurrCapacityUsed() >= worker.getCapacity();\n   }\n   public boolean canRunTask(Task task)\n   {\n    return (worker.getCapacity() - getCurrCapacityUsed() >= task.getTaskResource().getRequiredCapacity()\n             && !getAvailabilityGroups().contains(task.getTaskResource().getAvailabilityGroup()));\n   }", "sourceBeforeFix": "getCurrCapacity()", "sourceAfterFix": "getCurrCapacityUsed()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "fb1a1ca0d397301efc3cc702e4836b9bca169251", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n\t\t        .getRelationships(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r", "fixed": " \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n\t\t        .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r", "sourceBeforeFix": "Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))", "sourceAfterFix": "Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "fixed": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "sourceBeforeFix": "logger.debug(\"attempting to login\")", "sourceAfterFix": "logger.trace(\"attempting to login\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Advanced builder for endpoint for the Kubernetes Service Account\n      * component.\n      */\n    public static interface AdvancedKubernetesServiceAccountsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KubernetesServiceAccountsEndpointBuilder basic() {", "fixed": "      * Advanced builder for endpoint for the Kubernetes Service Account\n      * component.\n      */\n    public interface AdvancedKubernetesServiceAccountsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KubernetesServiceAccountsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c497c93c336a26bb843bb30610baf1e41b55989d", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         Set<ObjectName> set = mbeanServer.queryNames(new ObjectName(\"*:type=endpoints,*\"), null);\n        assertEquals(6, set.size()); \n         set = mbeanServer.queryNames(new ObjectName(\"*:type=routes,*\"), null);", "fixed": "         Set<ObjectName> set = mbeanServer.queryNames(new ObjectName(\"*:type=endpoints,*\"), null);\n        assertEquals(5, set.size()); \n         set = mbeanServer.queryNames(new ObjectName(\"*:type=routes,*\"), null);", "sourceBeforeFix": "assertEquals(6,set.size())", "sourceAfterFix": "assertEquals(5,set.size())"}
{"fixCommitSHA1": "9e756fefbb053926754108335e3ad78b586439ac", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         return new RouteBuilder() {\n             public void configure() {\n                 WebsocketComponent websocketComponent = (WebsocketComponent) context.getComponent(\"websocket\");\n                websocketComponent.setMaxThreads(11);\n                 websocketComponent.setMinThreads(1);\n                 from(\"direct:shop\")\n                     .log(\">>> Message received from Shopping center : ${body}\")", "fixed": "         return new RouteBuilder() {\n             public void configure() {\n                 WebsocketComponent websocketComponent = (WebsocketComponent) context.getComponent(\"websocket\");\n                websocketComponent.setMaxThreads(20);\n                 websocketComponent.setMinThreads(1);\n                 from(\"direct:shop\")\n                     .log(\">>> Message received from Shopping center : ${body}\")", "sourceBeforeFix": "websocketComponent.setMaxThreads(11)", "sourceAfterFix": "websocketComponent.setMaxThreads(20)"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t@Nullable\n\tprivate final CompletableFuture<Boolean> terminationFuture;\n \tAkkaInvocationHandler(\n \t\t\tString address,", "fixed": " \t@Nullable\n\tprivate final CompletableFuture<Void> terminationFuture;\n \tAkkaInvocationHandler(\n \t\t\tString address,", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "         void delta() {}\n         void epsilon() {}\n     }\n    private static class Super {\n         void testOne() {}\n     }\n    private static class Sub extends Super {\n         void testTwo() {}\n     }", "fixed": "         void delta() {}\n         void epsilon() {}\n     }\n    static class Super {\n         void testOne() {}\n     }\n    static class Sub extends Super {\n         void testTwo() {}\n     }", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixSetEndpointBuilder\n             extends\n                 AtomixSetEndpointConsumerBuilder, AtomixSetEndpointProducerBuilder {\n         default AdvancedAtomixSetEndpointBuilder advanced() {", "fixed": "     \n    public interface AtomixSetEndpointBuilder\n             extends\n                 AtomixSetEndpointConsumerBuilder, AtomixSetEndpointProducerBuilder {\n         default AdvancedAtomixSetEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"fixCommitSHA1": "04ad420f594bedd8cd5c40160d67585f70686a9c", "projectName": "aws.aws-sdk-java", "bugType": "Wrong Function Name", "problem": "                 try {\n                     return unmarshaller.unmarshall(jsonContent.jsonNode);\n                 } catch (Exception e) {\n                    LOG.error(\"Unable to unmarshall exception content\", e);\n                     return null;\n                 }\n             }", "fixed": "                 try {\n                     return unmarshaller.unmarshall(jsonContent.jsonNode);\n                 } catch (Exception e) {\n                    LOG.info(\"Unable to unmarshall exception content\", e);\n                     return null;\n                 }\n             }", "sourceBeforeFix": "LOG.error(\"Unable to unmarshall exception content\",e)", "sourceAfterFix": "LOG.info(\"Unable to unmarshall exception content\",e)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MiloServerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMiloServerEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface MiloServerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMiloServerEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "8e94cd6e2655a4e1c4efc5a41b700e24bd1f96cf", "projectName": "b3log.solo", "bugType": "Change Numeric Literal", "problem": "     \n    public static final int MAX_USER_NAME_LENGTH = 20;\n     /**\n      * Min user name length.", "fixed": "     \n    public static final int MAX_USER_NAME_LENGTH = 64;\n     /**\n      * Min user name length.", "sourceBeforeFix": "MAX_USER_NAME_LENGTH=20", "sourceAfterFix": "MAX_USER_NAME_LENGTH=64"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "fa5635c39e3000406103657977b98efa79bd4512", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "fixed": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "sourceBeforeFix": "conf.getSearchBaseURL()", "sourceAfterFix": "conf.getRestBaseURL()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8abd59029e7c0bc0973b492fd84a386b26661bc7", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "         bootstrap.setOption(\"keepAlive\", true);\r\n         bootstrap.setOption(\"tcpNoDelay\", true);\r\n        bootstrap.setOption(\"connectTimeoutMillis\", getTimeout());\r\n         final NettyHandler nettyHandler = new NettyHandler(getUrl(), this);\r\n         bootstrap.setPipelineFactory(new ChannelPipelineFactory() {\r\n             @Override\r", "fixed": "         bootstrap.setOption(\"keepAlive\", true);\r\n         bootstrap.setOption(\"tcpNoDelay\", true);\r\n        bootstrap.setOption(\"connectTimeoutMillis\", getConnectTimeout());\r\n         final NettyHandler nettyHandler = new NettyHandler(getUrl(), this);\r\n         bootstrap.setPipelineFactory(new ChannelPipelineFactory() {\r\n             @Override\r", "sourceBeforeFix": "getTimeout()", "sourceAfterFix": "getConnectTimeout()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n    void deleteOrder(@PathParam(\"order_id\") @ApiParam(\"ID of the order that needs to be deleted\") String orderId);\n     @GET\n     @Path(\"/inventory\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n    void deleteOrder(@PathParam(\"order_id\") @ApiParam(\"ID of the order that needs to be deleted\") String orderId) throws Exception;\n     @GET\n     @Path(\"/inventory\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "fixed": "     }\n     @Override\n    public synchronized void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "fixed": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "sourceBeforeFix": "final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); ", "sourceAfterFix": "final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "204d9f571caab35a0adb72ffd87fd9c85a12300a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       if (!usedPlaceholders.contains(phName)) {\n         throw new MalformedException(\n             \"Unused message placeholder: \" + phName,\n            objLitNode);\n       }\n     }\n   }", "fixed": "       if (!usedPlaceholders.contains(phName)) {\n         throw new MalformedException(\n             \"Unused message placeholder: \" + phName,\n            node);\n       }\n     }\n   }", "sourceBeforeFix": "new MalformedException(\"Unused message placeholder: \" + phName,objLitNode)", "sourceAfterFix": "new MalformedException(\"Unused message placeholder: \" + phName,node)"}
{"fixCommitSHA1": "f5fe5ae0a963ee7db95d1f459280017de281af8f", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     if (blockSizeByte > 0) {\n       return (int) mFSMasterClient.createFile(path.getPath(), blockSizeByte, recursive);\n     } else {\n      return (int) mFSMasterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.getPath(),\n           blockSizeByte, recursive);\n     }\n   }", "fixed": "     if (blockSizeByte > 0) {\n       return (int) mFSMasterClient.createFile(path.getPath(), blockSizeByte, recursive);\n     } else {\n      return (int) mFSMasterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.toString(),\n           blockSizeByte, recursive);\n     }\n   }", "sourceBeforeFix": "ufsPath.getPath()", "sourceAfterFix": "ufsPath.toString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n     /**", "fixed": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n     /**", "sourceBeforeFix": "id=15807", "sourceAfterFix": "id=10807"}
{"fixCommitSHA1": "ad687b722b4d0c3461fdb7c45206257145484d8a", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n      OutputStream out = closer.register(ufs.create(dstPath.getPath(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {", "fixed": "       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n      OutputStream out = closer.register(ufs.create(dstPath.toString(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {", "sourceBeforeFix": "dstPath.getPath()", "sourceAfterFix": "dstPath.toString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fb1a1ca0d397301efc3cc702e4836b9bca169251", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n\t\t        .getRelationships(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r", "fixed": " \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n\t\t        .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r", "sourceBeforeFix": "ps.createRelationship(rel)", "sourceAfterFix": "ps.saveRelationship(rel)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 15809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n }", "fixed": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 10809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n }", "sourceBeforeFix": "id=15806", "sourceAfterFix": "id=10806"}
{"fixCommitSHA1": "50adab26654da357afe0079f7831fd1cf0f8f8cd", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": " \npublic class IterableUtil {\n     private IterableUtil(){\n     }", "fixed": " \npublic final class IterableUtil {\n     private IterableUtil(){\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d039be568920d4aa4ef836f6b323faec909f965a", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.vfs.VirtualFile;\n /**\n  * Date: 05.11.2011\n  *\n  * @author <a href=\"mailto:jperkins@redhat.com\">James R. Perkins</a>", "fixed": " import org.jboss.vfs.VirtualFile;\n /**\n * This module is using message IDs in the range 11000-11099 and 16700-16799.\n * <p/>\n * This file is using the subset 11025-11099 and 16700-16799 for non-logger messages.\n * <p/>\n* See <a href=\"http:\n * list of currently reserved JBAS message id blocks.\n * <p/>\n  * Date: 05.11.2011\n  *\n  * @author <a href=\"mailto:jperkins@redhat.com\">James R. Perkins</a>", "sourceBeforeFix": "id=11100", "sourceAfterFix": "id=16700"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b847c8f134aa71f74efe3098fff6d4c095d63c3c", "projectName": "spring-projects.spring-security-oauth", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t}, key);\n \t\t}\n \t\tcatch (EmptyResultDataAccessException e) {\n\t\t\tif (LOG.isInfoEnabled()) {\n \t\t\t\tLOG.debug(\"Failed to find access token for authentication \" + authentication);\n \t\t\t}\n \t\t}", "fixed": " \t\t\t\t\t}, key);\n \t\t}\n \t\tcatch (EmptyResultDataAccessException e) {\n\t\t\tif (LOG.isDebugEnabled()) {\n \t\t\t\tLOG.debug(\"Failed to find access token for authentication \" + authentication);\n \t\t\t}\n \t\t}", "sourceBeforeFix": "LOG.isInfoEnabled()", "sourceAfterFix": "LOG.isDebugEnabled()"}
{"fixCommitSHA1": "e8d4313f2227440d197eb7706375d24ab8a9f220", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     SORT_FIELD_COMPARATORS.put(\"name\",\n         Comparator.comparing(URIStatus::getName, String.CASE_INSENSITIVE_ORDER));\n     SORT_FIELD_COMPARATORS.put(\"path\", Comparator.comparing(URIStatus::getPath));\n    SORT_FIELD_COMPARATORS.put(\"size\", Comparator.comparingLong(URIStatus::getBlockSizeBytes));\n   }\n   /**", "fixed": "     SORT_FIELD_COMPARATORS.put(\"name\",\n         Comparator.comparing(URIStatus::getName, String.CASE_INSENSITIVE_ORDER));\n     SORT_FIELD_COMPARATORS.put(\"path\", Comparator.comparing(URIStatus::getPath));\n    SORT_FIELD_COMPARATORS.put(\"size\", Comparator.comparingLong(URIStatus::getLength));\n   }\n   /**", "sourceBeforeFix": "URIStatus::getBlockSizeBytes", "sourceAfterFix": "URIStatus::getLength"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n        return Short.valueOf(value.toString());\n     }\n     @Override", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n        return Short.parseShort(value.toString());\n     }\n     @Override", "sourceBeforeFix": "Short.valueOf(value.toString())", "sourceAfterFix": "Short.parseShort(value.toString())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "a24cc003cb42557584c969fdc8b6cffc65af7072", "projectName": "openmrs.openmrs-core", "bugType": "Change Binary Operator", "problem": " \t\t\t\t}\r\n \t\t\t}\r\n            if (StringUtils.hasLength(secretQuestion) || StringUtils.hasLength(secretAnswer)) {\r\n             \tus.changeQuestionAnswer(user, secretQuestion, secretAnswer);\r\n             }\r", "fixed": " \t\t\t\t}\r\n \t\t\t}\r\n            if (StringUtils.hasLength(secretQuestion) && StringUtils.hasLength(secretAnswer)) {\r\n             \tus.changeQuestionAnswer(user, secretQuestion, secretAnswer);\r\n             }\r", "sourceBeforeFix": "StringUtils.hasLength(secretQuestion) || StringUtils.hasLength(secretAnswer)", "sourceAfterFix": "StringUtils.hasLength(secretQuestion) && StringUtils.hasLength(secretAnswer)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "734c7a8318f516e4825fd72ab53699f96fabbe68", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void testConcurrentProducers() throws Exception {\n        Thread.sleep(1000);\n         doSendMessages(10, 5);\n     }", "fixed": "     @Test\n     public void testConcurrentProducers() throws Exception {\n        Thread.sleep(2000);\n         doSendMessages(10, 5);\n     }", "sourceBeforeFix": "Thread.sleep(1000)", "sourceAfterFix": "Thread.sleep(2000)"}
{"fixCommitSHA1": "b46a613b6fc479896edcd659db9369d26063a00f", "projectName": "openhab.openhab", "bugType": "Less Specific If", "problem": " \t\t\t\t}\n\t\t\t\tif (oldestNode == null) {\n \t\t\t\t\toldestNode = node;\n \t\t\t\t} else if (node.getLastSent() == null || node.getLastSent().getTime() < oldestNode.getLastSent().getTime()) {\n \t\t\t\t\toldestNode = node;", "fixed": " \t\t\t\t}\n\t\t\t\tif (oldestNode == null || oldestNode.getLastSent() == null) {\n \t\t\t\t\toldestNode = node;\n \t\t\t\t} else if (node.getLastSent() == null || node.getLastSent().getTime() < oldestNode.getLastSent().getTime()) {\n \t\t\t\t\toldestNode = node;", "sourceBeforeFix": "oldestNode == null", "sourceAfterFix": "oldestNode == null || oldestNode.getLastSent() == null"}
{"fixCommitSHA1": "3a534d35b632476ca1a01520005a63914168d24c", "projectName": "google.guava", "bugType": "Change Binary Operator", "problem": "   try {\n     testCase.tearDown();\n   } catch (Throwable t) {\n    if (failure != null) {\n       failure = t;\n     }\n   }", "fixed": "   try {\n     testCase.tearDown();\n   } catch (Throwable t) {\n    if (failure == null) {\n       failure = t;\n     }\n   }", "sourceBeforeFix": "failure != null", "sourceAfterFix": "failure == null"}
{"fixCommitSHA1": "69495db28bb98a92a4710ba2c86498bfb4005694", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "         socketSelector.close();\n       } catch (IOException ex) {\n        LOG.warn(\"Unable to close socket selector\", ex);\n       }\n       throw e;\n     }", "fixed": "         socketSelector.close();\n       } catch (IOException ex) {\n        LOG.warn(\"Unable to close socket selector\");\n       }\n       throw e;\n     }", "sourceBeforeFix": "LOG.warn(\"Unable to close socket selector\",ex)", "sourceAfterFix": "LOG.warn(\"Unable to close socket selector\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedBeanEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default BeanEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedBeanEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default BeanEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ed0f4cc76b722fb5470d2fa0cbcbae9597385b8d", "projectName": "naver.pinpoint", "bugType": "Change Binary Operator", "problem": "         if (spanEvent.getDepth() != -1) {\n             tSpanEvent.setDepth(spanEvent.getDepth());\n         }\n        if (spanEvent.getNextSpanId() == -1) {\n             tSpanEvent.setNextSpanId(spanEvent.getNextSpanId());\n         }", "fixed": "         if (spanEvent.getDepth() != -1) {\n             tSpanEvent.setDepth(spanEvent.getDepth());\n         }\n        if (spanEvent.getNextSpanId() != -1) {\n             tSpanEvent.setNextSpanId(spanEvent.getNextSpanId());\n         }", "sourceBeforeFix": "spanEvent.getNextSpanId() == -1", "sourceAfterFix": "spanEvent.getNextSpanId() != -1"}
{"fixCommitSHA1": "27301617876b102c50f758608843f9ccf9456a1b", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     private final String tableName;\n     private final URI uri;\n     private final boolean remotelyAccessible;\n    private final ImmutableList<HostAddress> addresses;\n     @JsonCreator\n     public ExampleSplit(", "fixed": "     private final String tableName;\n     private final URI uri;\n     private final boolean remotelyAccessible;\n    private final List<HostAddress> addresses;\n     @JsonCreator\n     public ExampleSplit(", "sourceBeforeFix": "ImmutableList<HostAddress>", "sourceAfterFix": "List<HostAddress>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClientModel(@Valid Client body);\n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })", "fixed": "     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClientModel(@Valid Client body) throws Exception;\n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "95a13b51ee052eb73882682e8f009bfa1e914866", "projectName": "apache.hbase", "bugType": "Change Modifier", "problem": "         && getTimeBetweenRuns() > getMaximumAllowedTimeBetweenRuns();\n   }\n  private synchronized double getMaximumAllowedTimeBetweenRuns() {\n     return 1.5 * period;\n   }", "fixed": "         && getTimeBetweenRuns() > getMaximumAllowedTimeBetweenRuns();\n   }\n  private double getMaximumAllowedTimeBetweenRuns() {\n     return 1.5 * period;\n   }", "sourceBeforeFix": "33", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         context.stop();\n         List<MessagePayload> events = nagios.getMessagePayloadList();\n        assertTrue(\"Should be 12+ events, was: \" + events.size(), events.size() >= 12);\n     }\n     @Test", "fixed": "         context.stop();\n         List<MessagePayload> events = nagios.getMessagePayloadList();\n        assertTrue(\"Should be 11+ events, was: \" + events.size(), events.size() >= 11);\n     }\n     @Test", "sourceBeforeFix": "new NagiosNscaStub(25667,\"password\")", "sourceAfterFix": "new NagiosNscaStub(25669,\"password\")"}
{"fixCommitSHA1": "6a95dd35511f4216481d8d0ffd4952ed1893a1c4", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "     htd.addFamily(hcd);\n     htd.setOwner(USER_OWNER);\n     admin.createTable(htd, new byte[][] { Bytes.toBytes(\"s\") });\n    TEST_UTIL.waitTableEnabled(TEST_TABLE.getTableName());\n     HRegion region = TEST_UTIL.getHBaseCluster().getRegions(TEST_TABLE.getTableName()).get(0);\n     RegionCoprocessorHost rcpHost = region.getCoprocessorHost();", "fixed": "     htd.addFamily(hcd);\n     htd.setOwner(USER_OWNER);\n     admin.createTable(htd, new byte[][] { Bytes.toBytes(\"s\") });\n    TEST_UTIL.waitUntilAllRegionsAssigned(TEST_TABLE.getTableName());\n     HRegion region = TEST_UTIL.getHBaseCluster().getRegions(TEST_TABLE.getTableName()).get(0);\n     RegionCoprocessorHost rcpHost = region.getCoprocessorHost();", "sourceBeforeFix": "TEST_UTIL.waitTableEnabled(tableName)", "sourceAfterFix": "TEST_UTIL.waitUntilAllRegionsAssigned(tableName)"}
{"fixCommitSHA1": "0258fcc52329833429a7c745c610f3b8aaf57ce7", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         public FastStringCreator(Constructor<String> constructor) {\n             this.constructor = constructor;\n            this.useOldStringConstructor = constructor.getTypeParameters().length == 3;\n         }\n         @Override", "fixed": "         public FastStringCreator(Constructor<String> constructor) {\n             this.constructor = constructor;\n            this.useOldStringConstructor = constructor.getParameterTypes().length == 3;\n         }\n         @Override", "sourceBeforeFix": "constructor.getTypeParameters()", "sourceAfterFix": "constructor.getParameterTypes()"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid tag value\", response = Void.class, responseContainer = \"List\") })\n    List<List<Pet>> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags);\n     @GET\n     @Path(\"/{petId}\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid tag value\", response = Void.class, responseContainer = \"List\") })\n    List<Pet> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags) throws Exception;\n     @GET\n     @Path(\"/{petId}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "afb86b272431b41ee7360af0f40f504ba3aeebc9", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Binary Operator", "problem": "       }\n     }\n     boolean overwriteOriginalNer = false;\n    if (prevNerEndIndex != (start-1) && nextNerStartIndex != end) {\n     } else if (startNer == null) {", "fixed": "       }\n     }\n     boolean overwriteOriginalNer = false;\n    if (prevNerEndIndex != (start-1) || nextNerStartIndex != end) {\n     } else if (startNer == null) {", "sourceBeforeFix": "prevNerEndIndex != (start - 1) && nextNerStartIndex != end", "sourceAfterFix": "prevNerEndIndex != (start - 1) || nextNerStartIndex != end"}
{"fixCommitSHA1": "53b0527a5dd35cd2e36650a6352b882cc32f714f", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    * @throws IOException\n    */\n   public void put(Put put, Integer lockid) throws IOException {\n    this.put(put, lockid, put.writeToWAL());\n   }\n   /**", "fixed": "    * @throws IOException\n    */\n   public void put(Put put, Integer lockid) throws IOException {\n    this.put(put, lockid, put.getWriteToWAL());\n   }\n   /**", "sourceBeforeFix": "put.writeToWAL()", "sourceAfterFix": "put.getWriteToWAL()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "9f5dd0f7caa451c4d1620467f13be87bd9ae3f71", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     DeleteBuffer deleteBuffer = new DeleteBuffer();\n     UnderFileStatus[] pathsToDelete = listInternal(path, ListOptions.defaults().setRecursive(true));\n     if (pathsToDelete == null) {\n      LOG.error(\"Unable to delete {} because listInternal returns null\", path);\n       return false;\n     }\n     for (UnderFileStatus pathToDelete : pathsToDelete) {", "fixed": "     DeleteBuffer deleteBuffer = new DeleteBuffer();\n     UnderFileStatus[] pathsToDelete = listInternal(path, ListOptions.defaults().setRecursive(true));\n     if (pathsToDelete == null) {\n      LOG.warn(\"Unable to delete {} because listInternal returns null\", path);\n       return false;\n     }\n     for (UnderFileStatus pathToDelete : pathsToDelete) {", "sourceBeforeFix": "LOG.error(\"Unable to delete {} because listInternal returns null\",path)", "sourceAfterFix": "LOG.warn(\"Unable to delete {} because listInternal returns null\",path)"}
{"fixCommitSHA1": "f616c0c70964fb4e88c3dc60c59d99b6d1d4759a", "projectName": "apache.hbase", "bugType": "Missing Throws Exception", "problem": "   }\n   @Test\n  public void testTableWithMaxSize() {\n     HTablePool pool = new HTablePool(TEST_UTIL.getConfiguration(), 2);", "fixed": "   }\n   @Test\n  public void testTableWithMaxSize() throws Exception {\n     HTablePool pool = new HTablePool(TEST_UTIL.getConfiguration(), 2);", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JGroupsEndpointBuilder\n             extends\n                 JGroupsEndpointConsumerBuilder, JGroupsEndpointProducerBuilder {\n         default AdvancedJGroupsEndpointBuilder advanced() {", "fixed": "     \n    public interface JGroupsEndpointBuilder\n             extends\n                 JGroupsEndpointConsumerBuilder, JGroupsEndpointProducerBuilder {\n         default AdvancedJGroupsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MailEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMailEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface MailEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMailEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "de4cd039b300659a2c4d6b8451615fc64f114cf1", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": " \n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = SingleServerInventoryProvider.class)\n @JsonSubTypes(value = {\n     @JsonSubTypes.Type(name = \"legacy\", value = SingleServerInventoryProvider.class),\n     @JsonSubTypes.Type(name = \"batch\", value = BatchServerInventoryViewProvider.class)", "fixed": " \n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = BatchServerInventoryViewProvider.class)\n @JsonSubTypes(value = {\n     @JsonSubTypes.Type(name = \"legacy\", value = SingleServerInventoryProvider.class),\n     @JsonSubTypes.Type(name = \"batch\", value = BatchServerInventoryViewProvider.class)", "sourceBeforeFix": "SingleServerInventoryProvider.class", "sourceAfterFix": "BatchServerInventoryViewProvider.class"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ZooKeeperEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedZooKeeperEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ZooKeeperEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedZooKeeperEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5ecca6532856178f8802d0a1adde51b0632bc043", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "                 long total = Runtime.getRuntime().totalMemory();\n                 long used = (total - Runtime.getRuntime().freeMemory());\n                 if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {\n                    return maxSize > (used / 1024 / 1024);\n                 } else {\n                    return maxSize > (used / total);\n                 }\n             }\n             return false;", "fixed": "                 long total = Runtime.getRuntime().totalMemory();\n                 long used = (total - Runtime.getRuntime().freeMemory());\n                 if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {\n                    return maxSize < (used / 1024 / 1024);\n                 } else {\n                    return maxSize < (used / total);\n                 }\n             }\n             return false;", "sourceBeforeFix": "maxSize > (used / total)", "sourceAfterFix": "maxSize < (used / total)"}
{"fixCommitSHA1": "3de25164527f5011df4ea2c889794a7c72bcf5ce", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": " \tprivate LoggingSystem loggingSystem;\n\tprivate int order = Ordered.HIGHEST_PRECEDENCE + 11;\n \tprivate boolean parseArgs = true;", "fixed": " \tprivate LoggingSystem loggingSystem;\n\tprivate int order = Ordered.HIGHEST_PRECEDENCE + 20;\n \tprivate boolean parseArgs = true;", "sourceBeforeFix": "Ordered.HIGHEST_PRECEDENCE + 11", "sourceAfterFix": "Ordered.HIGHEST_PRECEDENCE + 20"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleSheetsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GoogleSheetsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.debug(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "fixed": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "sourceBeforeFix": "logger.debug(\"attempting to login\")", "sourceAfterFix": "logger.trace(\"attempting to login\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "b0662ce83b466318ce8dcec13428846b1b190aaf", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n                    ClientConnection current = connections.putIfAbsent(address, clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;", "fixed": "                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n                    ClientConnection current = connections.putIfAbsent(clientConnection.getRemoteEndpoint(), clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;", "sourceBeforeFix": "connections.get(address)", "sourceAfterFix": "connections.get(target)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n \t/**\n \t * Save the given global property to the database", "fixed": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t/**\n \t * Save the given global property to the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "fixed": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glGenTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleBigQueryEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default GoogleBigQueryEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleBigQueryEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default GoogleBigQueryEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "         if (levels.cardinality() == 1) {\n             return String.valueOf(levels.nextSetBit(0));\n         }\n        final StringBuilder sb = new StringBuilder();\n         for (int i = levels.nextSetBit(0); i >= 0;\n             i = levels.nextSetBit(i + 1)) {\n             if (sb.length() > 0) {", "fixed": "         if (levels.cardinality() == 1) {\n             return String.valueOf(levels.nextSetBit(0));\n         }\n        final StringBuilder sb = new StringBuilder(50);\n         for (int i = levels.nextSetBit(0); i >= 0;\n             i = levels.nextSetBit(i + 1)) {\n             if (sb.length() > 0) {", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(50)"}
{"fixCommitSHA1": "3c136fbd9f79b179f010322aff8ed2b829209db8", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n        assertEquals(fc, fc2);\n     }\n }", "fixed": "         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n        assertEquals(fc2, fc);\n     }\n }", "sourceBeforeFix": "assertEquals(fc,fc2)", "sourceAfterFix": "assertEquals(fc2,fc)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5cc0714840bf8f7797a118e4bac5dabdd20e3f67", "projectName": "apache.hbase", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  public void setMasterServices(MasterServices masterServices) {\n     super.setMasterServices(masterServices);\n     this.localityCost.setServices(masterServices);\n     this.localityCandidateGenerator.setServices(masterServices);", "fixed": "   }\n   @Override\n  public synchronized void setMasterServices(MasterServices masterServices) {\n     super.setMasterServices(masterServices);\n     this.localityCost.setServices(masterServices);\n     this.localityCandidateGenerator.setServices(masterServices);", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": "grammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}\ngrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}\ngrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}\n\t\tgrammarBuilder.append(\"  | ID          {$v = 3}\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");", "fixed": "grammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}\ngrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}\ngrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}\n\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");", "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a0cb51880d250a4db339312a0d1c62e42ffafdf0", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         SimpleRegistry registry = new SimpleRegistry();\n        registry.put(\"blogService\", new BlogService());\n         context = new DefaultCamelContext(registry);", "fixed": "         SimpleRegistry registry = new SimpleRegistry();\n        registry.bind(\"blogService\", new BlogService());\n         context = new DefaultCamelContext(registry);", "sourceBeforeFix": "registry.put(\"blogService\",new BlogService())", "sourceAfterFix": "registry.bind(\"blogService\",new BlogService())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "27212f298ec3ee50204e5169f61ba48702346450", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "       \"Redeclared variable: {0}\");\n   static final DiagnosticType AMBIGUOUS_FUNCTION_DECL =\n    DiagnosticType.disabled(\"AMBIGUOUS_FUNCTION_DECL\",\n         \"Ambiguous use of a named function: {0}.\");\n   static final DiagnosticType EARLY_REFERENCE_ERROR = DiagnosticType.error(", "fixed": "       \"Redeclared variable: {0}\");\n   static final DiagnosticType AMBIGUOUS_FUNCTION_DECL =\n    DiagnosticType.error(\"AMBIGUOUS_FUNCTION_DECL\",\n         \"Ambiguous use of a named function: {0}.\");\n   static final DiagnosticType EARLY_REFERENCE_ERROR = DiagnosticType.error(", "sourceBeforeFix": "DiagnosticType.disabled(\"AMBIGUOUS_FUNCTION_DECL\",\"Ambiguous use of a named function: {0}.\")", "sourceAfterFix": "DiagnosticType.error(\"AMBIGUOUS_FUNCTION_DECL\",\"Ambiguous use of a named function: {0}.\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "2b27f6006b63686c9e8f1ff03b411ab2a6d1c791", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         template.sendBodyAndHeader(serverUri, \"Hello World\", HttpProducer.QUERY, \"one=uno&two=dos\");\n        assertMockEndpointsSatisifed();\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "fixed": "         template.sendBodyAndHeader(serverUri, \"Hello World\", HttpProducer.QUERY, \"one=uno&two=dos\");\n        assertMockEndpointsSatisfied();\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "sourceBeforeFix": "assertMockEndpointsSatisifed()", "sourceAfterFix": "assertMockEndpointsSatisfied()"}
{"fixCommitSHA1": "e6c1586717135f4d22f0a03177a1b7b994d5da95", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t\treturn Outcome.match(\"found database driver \" + driverClassName);\n \t\t\t}\n\t\t\treturn Outcome.match(\"missing database driver \" + driverClassName);\n \t\t}\n \t\tprivate String getDriverClassName(Environment environment, ClassLoader classLoader) {", "fixed": " \t\t\t\treturn Outcome.match(\"found database driver \" + driverClassName);\n \t\t\t}\n\t\t\treturn Outcome.noMatch(\"missing database driver \" + driverClassName);\n \t\t}\n \t\tprivate String getDriverClassName(Environment environment, ClassLoader classLoader) {", "sourceBeforeFix": "Outcome.match(\"missing database driver \" + driverClassName)", "sourceAfterFix": "Outcome.noMatch(\"missing database driver \" + driverClassName)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "ec57f0c31f8c41db175aa7dcaab5089c22b2a8a8", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n \t\t}\n \t\t@Bean", "fixed": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.responder());\n \t\t}\n \t\t@Bean", "sourceBeforeFix": "rSocketMessageHandler.serverResponder()", "sourceAfterFix": "rSocketMessageHandler.responder()"}
{"fixCommitSHA1": "71775a876d1b049c7dfc49ffd35eff0d3f066691", "projectName": "perwendel.spark", "bugType": "Change Modifier", "problem": "      *\n      * @param folder the location\n      */\n    public static void configureStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n         if (!staticResourcesSet) {", "fixed": "      *\n      * @param folder the location\n      */\n    public synchronized static void configureStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n         if (!staticResourcesSet) {", "sourceBeforeFix": "9", "sourceAfterFix": "41"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "    * <p>In the undirected case, returns {@code null} if {@code isSelfLoop} is true.\n    */\n   @CanIgnoreReturnValue\n  N removeInEdge(Object edge, boolean isSelfLoop);\n   \n   @CanIgnoreReturnValue\n  N removeOutEdge(Object edge);\n   /**\n    * Add {@code edge} to the set of incoming edges. Implicitly adds {@code node} as a predecessor.", "fixed": "    * <p>In the undirected case, returns {@code null} if {@code isSelfLoop} is true.\n    */\n   @CanIgnoreReturnValue\n  N removeInEdge(E edge, boolean isSelfLoop);\n   \n   @CanIgnoreReturnValue\n  N removeOutEdge(E edge);\n   /**\n    * Add {@code edge} to the set of incoming edges. Implicitly adds {@code node} as a predecessor.", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MvelEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedMvelEndpointBuilder advanced() {\n             return (AdvancedMvelEndpointBuilder) this;\n         }", "fixed": "     \n    public interface MvelEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedMvelEndpointBuilder advanced() {\n             return (AdvancedMvelEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "d57bfb94a942885fce3d93f7cfc8f49191762d5f", "projectName": "xetorthio.jedis", "bugType": "Wrong Function Name", "problem": "     public String clientSetname(final String name) {\n     \tcheckIsInMulti();\n     \tclient.clientSetname(name);\n    \treturn client.getBulkReply();\n     }\n     public String migrate(final String host, final int port, final String key, final int destinationDb, final int timeout) {", "fixed": "     public String clientSetname(final String name) {\n     \tcheckIsInMulti();\n     \tclient.clientSetname(name);\n    \treturn client.getStatusCodeReply();\n     }\n     public String migrate(final String host, final int port, final String key, final int destinationDb, final int timeout) {", "sourceBeforeFix": "client.getBulkReply()", "sourceAfterFix": "client.getStatusCodeReply()"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "4e184a37363ce309c7419d2fa64d98ebf3df375f", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             selectedKeysField.set(selector, set);\n             publicSelectedKeysField.set(selector, set);\n            logger.info(\"Optimized Selector: \" + selector.getClass().getName());\n             return set;\n         } catch (Throwable t) {", "fixed": "             selectedKeysField.set(selector, set);\n             publicSelectedKeysField.set(selector, set);\n            logger.finest(\"Optimized Selector: \" + selector.getClass().getName());\n             return set;\n         } catch (Throwable t) {", "sourceBeforeFix": "logger.info(\"Optimized Selector: \" + selector.getClass().getName())", "sourceAfterFix": "logger.finest(\"Optimized Selector: \" + selector.getClass().getName())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDropboxEndpointBuilder\n             extends\n                 AdvancedDropboxEndpointConsumerBuilder, AdvancedDropboxEndpointProducerBuilder {\n         default DropboxEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDropboxEndpointBuilder\n             extends\n                 AdvancedDropboxEndpointConsumerBuilder, AdvancedDropboxEndpointProducerBuilder {\n         default DropboxEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2d0de2bbf27a71b8d7dad6284e092ba456ec5794", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         private final Endpoint startEndpoint;\n         private final SendProcessor asyncSender;\n        public ExchangeSubmitter(Endpoint startEndpoint, SendProcessor asyncSender) {\n             this.startEndpoint = startEndpoint;\n             this.asyncSender = asyncSender;\n         }", "fixed": "         private final Endpoint startEndpoint;\n         private final SendProcessor asyncSender;\n        ExchangeSubmitter(Endpoint startEndpoint, SendProcessor asyncSender) {\n             this.startEndpoint = startEndpoint;\n             this.asyncSender = asyncSender;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "fixed": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic abstract int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "      * Loads the import control file from a {@link InputSource}.\n      * @param source the source to load from.\n      * @param uri uri of the source being loaded.\n     * @return the root {@link PkgControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n    private static PkgControl load(final InputSource source,\n         final URI uri) throws CheckstyleException {\n         try {\n             final ImportControlLoader loader = new ImportControlLoader();", "fixed": "      * Loads the import control file from a {@link InputSource}.\n      * @param source the source to load from.\n      * @param uri uri of the source being loaded.\n     * @return the root {@link ImportControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n    private static ImportControl load(final InputSource source,\n         final URI uri) throws CheckstyleException {\n         try {\n             final ImportControlLoader loader = new ImportControlLoader();", "sourceBeforeFix": "new PkgControl(stack.peek(),name,regex)", "sourceAfterFix": "new ImportControl(stack.peek(),name,regex)"}
{"fixCommitSHA1": "da067cd627411116af86c4e5f4bb8d105eb75a40", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Numeric Literal", "problem": "     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n     @Test\n    public void matches_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(8L)));\n        assertTrue(predicate.apply(pickleEvent));\n     }\n     @Test", "fixed": "     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n     @Test\n    public void does_not_match_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(4L)));\n        assertFalse(predicate.apply(pickleEvent));\n     }\n     @Test", "sourceBeforeFix": "asList(8L)", "sourceAfterFix": "asList(4L)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(0);\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tthis.thrown.expectMessage(\"Connection refused\");\ngetResponse(\"http:", "fixed": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(0);\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tthis.thrown.expectMessage(\"Connection refused\");\ngetResponse(\"http:", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader\")\n  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "   }\n   @GwtIncompatible(\"Reader\")\n  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface YammerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedYammerEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface YammerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedYammerEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         String annotation)\n     {\n         if (ast == null) {\n            throw new NullPointerException(\"the ast is null\");\n         }\n         if (annotation == null) {\n            throw new NullPointerException(\"the annotation is null\");\n         }\n         if (StringUtils.isBlank(annotation)) {", "fixed": "         String annotation)\n     {\n         if (ast == null) {\n            throw new IllegalArgumentException(\"the ast is null\");\n         }\n         if (annotation == null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n         }\n         if (StringUtils.isBlank(annotation)) {", "sourceBeforeFix": "new NullPointerException(\"the ast is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the ast is null\")"}
{"fixCommitSHA1": "a10a471f4cb04226367516267fa636f257ef9807", "projectName": "yusuke.twitter4j", "bugType": "Change Numeric Literal", "problem": "         this.limit = limit;\n         this.remaining = remaining;\n         this.resetTimeInSeconds = resetTimeInSeconds;\n        this.secondsUntilReset = (int) ((resetTimeInSeconds * 1000 - System.currentTimeMillis()) / 1000);\n     }\n     RateLimitStatusJSONImpl(JSONObject json) throws TwitterException {", "fixed": "         this.limit = limit;\n         this.remaining = remaining;\n         this.resetTimeInSeconds = resetTimeInSeconds;\n        this.secondsUntilReset = (int) ((resetTimeInSeconds * 1000L - System.currentTimeMillis()) / 1000);\n     }\n     RateLimitStatusJSONImpl(JSONObject json) throws TwitterException {", "sourceBeforeFix": "resetTimeInSeconds * 1000", "sourceAfterFix": "resetTimeInSeconds * 1000L"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f1024ba0e7d5f1276a285a4218f26c70252719b5", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t\t\t\ttry {\n \t\t\t\t\tinstance.killTaskManager();\n \t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\tLOG.error(StringUtils.stringifyException(ioe));\n \t\t\t\t}\n \t\t\t}\n \t\t};", "fixed": " \t\t\t\ttry {\n \t\t\t\t\tinstance.killTaskManager();\n \t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\tLOG.error(ioe);\n \t\t\t\t}\n \t\t\t}\n \t\t};", "sourceBeforeFix": "LOG.error(e.getMessage())", "sourceAfterFix": "LOG.error(e.getMessage(),e)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJoltEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JoltEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJoltEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JoltEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "147f64aa12e7491eea259d886f14818b227dadd0", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": " \t\tlogger.debug(\"NODE {}: Got AssignReturnRoute request.\", nodeId);\n \t\tif(incomingMessage.getMessagePayloadByte(1) != 0x00) {\n\t\t\tlogger.error(\"NODE {}: Assign return routes failed with error 0x{}.\", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(0)));\n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssignReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));\n \t\t}", "fixed": " \t\tlogger.debug(\"NODE {}: Got AssignReturnRoute request.\", nodeId);\n \t\tif(incomingMessage.getMessagePayloadByte(1) != 0x00) {\n\t\t\tlogger.error(\"NODE {}: Assign return routes failed with error 0x{}.\", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(1)));\n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssignReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));\n \t\t}", "sourceBeforeFix": "incomingMessage.getMessagePayloadByte(0)", "sourceAfterFix": "incomingMessage.getMessagePayloadByte(1)"}
{"fixCommitSHA1": "59b25b4bc0d483dfbf1cc9004fd6a6083de89313", "projectName": "NanoHttpd.nanohttpd", "bugType": "Less Specific If", "problem": "                     String mpline = in.readLine();\n                     headerLines++;\n                    if (!mpline.contains(boundary)) {\n                         throw new ResponseException(Response.Status.BAD_REQUEST, \"BAD REQUEST: Content type is multipart/form-data but chunk does not start with boundary.\");\n                     }", "fixed": "                     String mpline = in.readLine();\n                     headerLines++;\n                    if (mpline == null || !mpline.contains(boundary)) {\n                         throw new ResponseException(Response.Status.BAD_REQUEST, \"BAD REQUEST: Content type is multipart/form-data but chunk does not start with boundary.\");\n                     }", "sourceBeforeFix": "!mpline.contains(boundary)", "sourceAfterFix": "mpline == null || !mpline.contains(boundary)"}
{"fixCommitSHA1": "ce7567c23bf357a2ab98a6f11bd112f36f8177ba", "projectName": "apache.hbase", "bugType": "Same Function More Args", "problem": "     assertEquals(response.getCode(), 200);\n    HTable table = new HTable(TABLE);\n     Get get = new Get(Bytes.toBytes(ROW_1));\n     get.addFamily(Bytes.toBytes(CFA));\n     get.addFamily(Bytes.toBytes(CFB));", "fixed": "     assertEquals(response.getCode(), 200);\n    HTable table = new HTable(TEST_UTIL.getConfiguration(), TABLE);\n     Get get = new Get(Bytes.toBytes(ROW_1));\n     get.addFamily(Bytes.toBytes(CFA));\n     get.addFamily(Bytes.toBytes(CFB));", "sourceBeforeFix": "new HTable(TABLE)", "sourceAfterFix": "new HTable(TEST_UTIL.getConfiguration(),TABLE)"}
{"fixCommitSHA1": "e5298f62da9c8ff2319709bdd35aceef75e97228", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     @Override\n     protected void initRegistry() {\n         super.initRegistry();\n        getRegistry().put(\"hb\", hb);\n     }\n }", "fixed": "     @Override\n     protected void initRegistry() {\n         super.initRegistry();\n        getRegistry().bind(\"hb\", hb);\n     }\n }", "sourceBeforeFix": "getRegistry().put(\"hb\",hb)", "sourceAfterFix": "getRegistry().bind(\"hb\",hb)"}
{"fixCommitSHA1": "291e15e330c9b71a0d0238e9d56d4b2a473356af", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         context.addRoutes(new RouteBuilder() {\n             @Override\n             public void configure() throws Exception {\n                from(\"direct:bar\").transform(to(\"bar\"));\n             }\n         });\n         context.start();", "fixed": "         context.addRoutes(new RouteBuilder() {\n             @Override\n             public void configure() throws Exception {\n                from(\"direct:bar\").transform(sendTo(\"bar\"));\n             }\n         });\n         context.start();", "sourceBeforeFix": "to(\"bar\")", "sourceAfterFix": "sendTo(\"bar\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         appendToBody.ret();\n     }\n    private void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "fixed": "         appendToBody.ret();\n     }\n    private static void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 15809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n }", "fixed": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 10809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n }", "sourceBeforeFix": "id=15801", "sourceAfterFix": "id=10801"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformiv(program,location,params)"}
{"fixCommitSHA1": "1086c2b18551fedf8144f1640487ba648e5f80f4", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "  */\n public class RingbufferDataSerializerHook implements DataSerializerHook {\n    public static final int F_ID = FactoryIdHelper.getFactoryId(FactoryIdHelper.COLLECTION_DS_FACTORY, -26);\n     public static final int GENERIC_OPERATION = 1;\n     public static final int ADD_BACKUP_OPERATION = 2;", "fixed": "  */\n public class RingbufferDataSerializerHook implements DataSerializerHook {\n    public static final int F_ID = FactoryIdHelper.getFactoryId(FactoryIdHelper.COLLECTION_DS_FACTORY, -29);\n     public static final int GENERIC_OPERATION = 1;\n     public static final int ADD_BACKUP_OPERATION = 2;", "sourceBeforeFix": "-26", "sourceAfterFix": "-29"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService);\n \t\trpcEndpoint.start();\n\t\tCompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\tassertFalse(terminationFuture.isDone());", "fixed": " \t\tfinal DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService);\n \t\trpcEndpoint.start();\n\t\tCompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\tassertFalse(terminationFuture.isDone());", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "fixed": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic abstract boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "5705c43fc67cbb1ebf19515e6676e4f68f299406", "projectName": "hazelcast.hazelcast", "bugType": "Change Boolean Literal", "problem": "         AbstractCacheService service = getService();\n         response = service.createCacheConfigIfAbsent(config);\n        if (createAlsoOnOthers && response == null) {\n             NodeEngine nodeEngine = getNodeEngine();\n             Collection<MemberImpl> members = nodeEngine.getClusterService().getMemberList();\n             int remoteNodeCount = members.size() - 1;", "fixed": "         AbstractCacheService service = getService();\n         response = service.createCacheConfigIfAbsent(config);\n        if (createAlsoOnOthers) {\n             NodeEngine nodeEngine = getNodeEngine();\n             Collection<MemberImpl> members = nodeEngine.getClusterService().getMemberList();\n             int remoteNodeCount = members.size() - 1;", "sourceBeforeFix": "new CacheCreateConfigOperation(config,true)", "sourceAfterFix": "new CacheCreateConfigOperation(config,false)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "16123c79a01ae52fe40c908fbb94502e17cbe653", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tif (tiled != null) return tiled;\r\n \t\tDrawable drawable = optional(name, Drawable.class);\r\n\t\tif (tiled != null) {\r\n \t\t\tif (!(drawable instanceof TiledDrawable)) {\r\n \t\t\t\tthrow new GdxRuntimeException(\"Drawable found but is not a TiledDrawable: \" + name + \", \"\r\n \t\t\t\t\t+ drawable.getClass().getName());\r\n \t\t\t}\r\n\t\t\treturn tiled;\r\n \t\t}\r\n \t\ttiled = new TiledDrawable(getRegion(name));\r", "fixed": " \t\tif (tiled != null) return tiled;\r\n \t\tDrawable drawable = optional(name, Drawable.class);\r\n\t\tif (drawable != null) {\r\n \t\t\tif (!(drawable instanceof TiledDrawable)) {\r\n \t\t\t\tthrow new GdxRuntimeException(\"Drawable found but is not a TiledDrawable: \" + name + \", \"\r\n \t\t\t\t\t+ drawable.getClass().getName());\r\n \t\t\t}\r\n\t\t\treturn (TiledDrawable)drawable;\r\n \t\t}\r\n \t\ttiled = new TiledDrawable(getRegion(name));\r", "sourceBeforeFix": "tiled != null", "sourceAfterFix": "drawable != null"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void createFile(boolean recursive, String path, boolean directory, int columns,\n       ByteBuffer metadata, long blockSizeByte, long creationTimeMs) {\n     if (INACTIVE) {\n       return;", "fixed": "     }\n   }\n  public synchronized void createFile(boolean recursive, String path, boolean directory, int columns,\n       ByteBuffer metadata, long blockSizeByte, long creationTimeMs) {\n     if (INACTIVE) {\n       return;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "0ed957ba961cb7b4057fe1372cfc363afead4f1e", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         Map<String, Object> params = new HashMap<>();\n         params.put(\"custName\", \"${body}\");\n        registry.put(\"params\", params);\n         camelContext.setRegistry(registry);\n         camelContext.addRoutes(new RouteBuilder() {", "fixed": "         Map<String, Object> params = new HashMap<>();\n         params.put(\"custName\", \"${body}\");\n        registry.bind(\"params\", params);\n         camelContext.setRegistry(registry);\n         camelContext.addRoutes(new RouteBuilder() {", "sourceBeforeFix": "registry.put(\"params\",params)", "sourceAfterFix": "registry.bind(\"params\",params)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n                    Thread.sleep(50);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r", "fixed": "             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n                    Thread.sleep(100);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "82bd0baab2dcc4659c68919117b24dd9a8e17ebf", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "         Future future = Mockito.mock(Future.class);\n         Mockito.when(future.get()).thenReturn(rm);\n         org.apache.kafka.clients.producer.KafkaProducer kp = Mockito.mock(org.apache.kafka.clients.producer.KafkaProducer.class);\n        Mockito.when(kp.send(Mockito.any())).thenReturn(future);\n         producer.setKafkaProducer(kp);\n     }", "fixed": "         Future future = Mockito.mock(Future.class);\n         Mockito.when(future.get()).thenReturn(rm);\n         org.apache.kafka.clients.producer.KafkaProducer kp = Mockito.mock(org.apache.kafka.clients.producer.KafkaProducer.class);\n        Mockito.when(kp.send(Mockito.any(ProducerRecord.class))).thenReturn(future);\n         producer.setKafkaProducer(kp);\n     }", "sourceBeforeFix": "Mockito.any()", "sourceAfterFix": "Mockito.any(ProducerRecord.class)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "     }\n     protected void invalidateExpiredEntries() {\n        long now = System.nanoTime();\n         synchronized (messages) {\n             Set<String> inactiveClients = new HashSet<String>();", "fixed": "     }\n     protected void invalidateExpiredEntries() {\n        long now = System.currentTimeMillis();\n         synchronized (messages) {\n             Set<String> inactiveClients = new HashSet<String>();", "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}
{"fixCommitSHA1": "e6bf561b6532c12c8bb202ba7e03aa3f2e6b8a2b", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic Skin loadSync (AssetManager manager, String fileName, SkinParameter parameter) {\r\n \t\tString texturePath;\r\n \t\tif (parameter == null)\r\n\t\t\ttexturePath = Gdx.files.internal(fileName).nameWithoutExtension() + \".png\";\r\n \t\telse\r\n \t\t\ttexturePath = parameter.texturePath;\r\n \t\tTexture texture = manager.get(texturePath, Texture.class);\r", "fixed": " \tpublic Skin loadSync (AssetManager manager, String fileName, SkinParameter parameter) {\r\n \t\tString texturePath;\r\n \t\tif (parameter == null)\r\n\t\t\ttexturePath = Gdx.files.internal(fileName).pathWithoutExtension() + \".png\";\r\n \t\telse\r\n \t\t\ttexturePath = parameter.texturePath;\r\n \t\tTexture texture = manager.get(texturePath, Texture.class);\r", "sourceBeforeFix": "Gdx.files.internal(fileName).nameWithoutExtension()", "sourceAfterFix": "Gdx.files.internal(fileName).pathWithoutExtension()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mongo\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mongo\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "63a368bf671e3356c5be441b8833bad844a4ff8e", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "           fileInfo.getPersistenceState());\n      CommonUtils.sleepMs(5);\n       HeartbeatScheduler.schedule(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC);\n      Assert.assertTrue(HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC, 5,\n           TimeUnit.SECONDS));\n       fileInfo = getFileSystemMasterClient().getFileInfo(fileId);", "fixed": "           fileInfo.getPersistenceState());\n      CommonUtils.sleepMs(200);\n       HeartbeatScheduler.schedule(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC);\n      Assert.assertTrue(HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC, 500,\n           TimeUnit.SECONDS));\n       fileInfo = getFileSystemMasterClient().getFileInfo(fileId);", "sourceBeforeFix": "CommonUtils.sleepMs(5)", "sourceAfterFix": "CommonUtils.sleepMs(200)"}
{"fixCommitSHA1": "53c0cde20042683e48266819a47099612e69d5bd", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         TabularData data = (TabularData) mbeanServer.invoke(on, \"explain\", new Object[]{true}, new String[]{\"boolean\"});\n         assertNotNull(data);\n        assertEquals(2, data.size());\n         data = (TabularData) mbeanServer.invoke(on, \"explain\", new Object[]{false}, new String[]{\"boolean\"});\n         assertNotNull(data);", "fixed": "         TabularData data = (TabularData) mbeanServer.invoke(on, \"explain\", new Object[]{true}, new String[]{\"boolean\"});\n         assertNotNull(data);\n        assertEquals(3, data.size());\n         data = (TabularData) mbeanServer.invoke(on, \"explain\", new Object[]{false}, new String[]{\"boolean\"});\n         assertNotNull(data);", "sourceBeforeFix": "assertEquals(2,data.size())", "sourceAfterFix": "assertEquals(3,data.size())"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "fixed": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "sourceBeforeFix": "logger.debug(\"MyQ binding received command '{}' for item '{}'\",command,itemName)", "sourceAfterFix": "logger.trace(\"MyQ binding received command '{}' for item '{}'\",command,itemName)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GrapeEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedGrapeEndpointBuilder advanced() {\n             return (AdvancedGrapeEndpointBuilder) this;\n         }", "fixed": "     \n    public interface GrapeEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedGrapeEndpointBuilder advanced() {\n             return (AdvancedGrapeEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "fixed": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = this.response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "ade2ef1e23fecc7211fb450ca852bc94fe565e0e", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "               .setParentId(currentInodeDirectory.getId()).setPersisted(options.isPersisted())\n               .build();\n       if (options.isPersisted()) {\n        String ufsPath = mMountTable.resolve(getPath(lastInode)).getPath();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }", "fixed": "               .setParentId(currentInodeDirectory.getId()).setPersisted(options.isPersisted())\n               .build();\n       if (options.isPersisted()) {\n        String ufsPath = mMountTable.resolve(getPath(lastInode)).toString();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }", "sourceBeforeFix": "mMountTable.resolve(getPath(dir)).getPath()", "sourceAfterFix": "mMountTable.resolve(getPath(dir)).toString()"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"part-\" + i + '-' + j).toString();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "fixed": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"part-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "sourceBeforeFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").toString()", "sourceAfterFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").getPath()"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);", "fixed": "             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PdfEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedPdfEndpointBuilder advanced() {\n             return (AdvancedPdfEndpointBuilder) this;\n         }", "fixed": "     \n    public interface PdfEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedPdfEndpointBuilder advanced() {\n             return (AdvancedPdfEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"redis\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"redis\")"}
{"fixCommitSHA1": "4597da262b00311e03c657db986f712387def622", "projectName": "swagger-api.swagger-core", "bugType": "Wrong Function Name", "problem": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertFalse(model.getUniqueItems());\n     }\n }\n\\ No newline at end of file", "fixed": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertTrue(model.getUniqueItems());\n     }\n }\n\\ No newline at end of file", "sourceBeforeFix": "assertFalse(model.getUniqueItems())", "sourceAfterFix": "assertTrue(model.getUniqueItems())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "40df292ac802e1023d0208b497945d8841958022", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "             List<Node> nodes = new ArrayList<Node>();\n             for (Node n : hgraph.getNodes()) {\n                if (n.getNodeData().getId().toLowerCase().contains(str)) {\n                     nodes.add(n);\n                } else if ((n.getNodeData().getLabel() != null) && n.getNodeData().getLabel().toLowerCase().contains(str)) {\n                     nodes.add(n);\n                 }\n             }", "fixed": "             List<Node> nodes = new ArrayList<Node>();\n             for (Node n : hgraph.getNodes()) {\n                if (n.getNodeData().getId().toLowerCase().equals(str)) {\n                     nodes.add(n);\n                } else if ((n.getNodeData().getLabel() != null) && n.getNodeData().getLabel().toLowerCase().equals(str)) {\n                     nodes.add(n);\n                 }\n             }", "sourceBeforeFix": "n.getNodeData().getLabel().toLowerCase().contains(str)", "sourceAfterFix": "n.getNodeData().getLabel().toLowerCase().equals(str)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username);\n     @GET\n     @Path(\"/{username}\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username) throws Exception;\n     @GET\n     @Path(\"/{username}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "27fb87cfcea241c2d7961baf68e84ce97f2dee7a", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "       }\n       statsData.setDecimalStats(decimalStats);\n       statsObj.setStatsData(statsData);\n    } else if (columnType.equalsIgnoreCase(\"date\")) {\n       DateColumnStatsData dateStats = new DateColumnStatsData();\n       Map<String, String> mapProp = work.getMapProp();\n       for (Entry<String, String> entry : mapProp.entrySet()) {", "fixed": "       }\n       statsData.setDecimalStats(decimalStats);\n       statsObj.setStatsData(statsData);\n    } else if (columnType.equalsIgnoreCase(\"date\")\n            || columnType.equalsIgnoreCase(\"timestamp\")) {\n       DateColumnStatsData dateStats = new DateColumnStatsData();\n       Map<String, String> mapProp = work.getMapProp();\n       for (Entry<String, String> entry : mapProp.entrySet()) {", "sourceBeforeFix": "columnType.equalsIgnoreCase(\"date\")", "sourceAfterFix": "columnType.equalsIgnoreCase(\"date\") || columnType.equalsIgnoreCase(\"timestamp\")"}
{"fixCommitSHA1": "f24916302751c0e48d107b68a1b0d61aa81d32a8", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "                                                     getId(),\n                                                     this.getClass(),\n                                                     null);\n            throw new RuntimeException(msg.getMessage());\n         }\n         if (!suppressLoadErrors) {", "fixed": "                                                     getId(),\n                                                     this.getClass(),\n                                                     null);\n            throw new IllegalStateException(msg.getMessage());\n         }\n         if (!suppressLoadErrors) {", "sourceBeforeFix": "new RuntimeException(msg.getMessage())", "sourceAfterFix": "new IllegalStateException(msg.getMessage())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    private static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedLambdaEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LambdaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedLambdaEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LambdaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1dc7ebfc26b5ef1f88e84702582715eb631202db", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     public void delete(String index) throws APIException, IOException {\n        api.path(routes.IndicesResource().single(index))\n                 .timeout(apiTimeout(\"index_delete\", 60, TimeUnit.SECONDS))\n                 .expect(204)\n                 .execute();", "fixed": "     public void delete(String index) throws APIException, IOException {\n        api.path(routes.IndicesResource().delete(index))\n                 .timeout(apiTimeout(\"index_delete\", 60, TimeUnit.SECONDS))\n                 .expect(204)\n                 .execute();", "sourceBeforeFix": "routes.IndicesResource().single(index)", "sourceAfterFix": "routes.IndicesResource().delete(index)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n    void addPet(@Valid Pet body);\n     @DELETE\n     @Path(\"/{petId}\")", "fixed": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n    void addPet(@Valid Pet body) throws Exception;\n     @DELETE\n     @Path(\"/{petId}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "0f8b0553210f71108709aad7361581574f6ba038", "projectName": "eclipse.vert.x", "bugType": "Change Identifier Used", "problem": "         return null;\n       }\n      return name.substring(0, name.length() - 1);\n     } finally {\n       buf.resetReaderIndex();\n     }", "fixed": "         return null;\n       }\n      return name.toString();\n     } finally {\n       buf.resetReaderIndex();\n     }", "sourceBeforeFix": "name.substring(0,name.length() - 1)", "sourceAfterFix": "name.toString()"}
{"fixCommitSHA1": "958fa58492daee485f640bf3261449d9bab9ee6e", "projectName": "facebook.presto", "bugType": "Missing Throws Exception", "problem": "     }\n     @Test(expectedExceptions = UnrecoverableS3OperationException.class, expectedExceptionsMessageRegExp = \".*\\\\Q (Path: /tmp/test/path)\\\\E\")\n    public void testUnrecoverableS3ExceptionMessage()\n     {\n         throw new UnrecoverableS3OperationException(new Path(\"/tmp/test/path\"), new IOException(\"test io exception\"));\n     }", "fixed": "     }\n     @Test(expectedExceptions = UnrecoverableS3OperationException.class, expectedExceptionsMessageRegExp = \".*\\\\Q (Path: /tmp/test/path)\\\\E\")\n    public void testUnrecoverableS3ExceptionMessage() throws Exception\n     {\n         throw new UnrecoverableS3OperationException(new Path(\"/tmp/test/path\"), new IOException(\"test io exception\"));\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "3841ff0cd87dd048dff43379df81153ed9bcf265", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void async_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 5000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "fixed": "     @Test\n     public void async_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 10000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}
{"fixCommitSHA1": "67d12ee748c936512924fc6e493483be8734acea", "projectName": "neo4j.neo4j", "bugType": "Less Specific If", "problem": "      */\n     public String getVersion()\n     {\n        if ( version == null )\n         {\n             return \"<unknown>\";\n         }", "fixed": "      */\n     public String getVersion()\n     {\n        if ( version == null || version.equals( \"\" ) )\n         {\n             return \"<unknown>\";\n         }", "sourceBeforeFix": "version == null", "sourceAfterFix": "version == null || version.equals(\"\")"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "       try {\n         statsObj = getMS().getTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"get_column_statistics_by_table: \", statsObj != null);\n       }\n       return statsObj;\n     }", "fixed": "       try {\n         statsObj = getMS().getTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"get_column_statistics_by_table: \", statsObj != null, null);\n       }\n       return statsObj;\n     }", "sourceBeforeFix": "endFunction(\"delete_column_statistics_by_partition: \",ret != false)", "sourceAfterFix": "endFunction(\"delete_column_statistics_by_partition: \",ret != false,null)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "fixed": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic abstract void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "6618cef776cf1c9ce67ff8ee461412110ca5ada7", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t\ttaskManagerQueryServiceGatewaysFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.warn(\"Requesting TaskManager's path for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tList<String> taskManagersToRetain = queryServiceGateways\n \t\t\t\t\t\t\t\t.stream()", "fixed": " \t\t\t\ttaskManagerQueryServiceGatewaysFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.debug(\"Requesting TaskManager's path for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tList<String> taskManagersToRetain = queryServiceGateways\n \t\t\t\t\t\t\t\t.stream()", "sourceBeforeFix": "LOG.warn(\"Exception while fetching metrics.\",e)", "sourceAfterFix": "LOG.debug(\"Exception while fetching metrics.\",e)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJMXEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default JMXEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJMXEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default JMXEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "45bf206c4d10874716feb5ef11f55a041bd22111", "projectName": "stanfordnlp.CoreNLP", "bugType": "Wrong Function Name", "problem": "   }\n   public static TwoDimensionalMap<String, String, SimpleMatrix> averageBinaryMatrices(List<TwoDimensionalMap<String, String, SimpleMatrix>> maps) {\n    TwoDimensionalMap<String, String, SimpleMatrix> averages = new TwoDimensionalMap<String, String, SimpleMatrix>();\n     for (Pair<String, String> binary : getBinaryMatrixNames(maps)) {\n       int count = 0;\n       SimpleMatrix matrix = null;", "fixed": "   }\n   public static TwoDimensionalMap<String, String, SimpleMatrix> averageBinaryMatrices(List<TwoDimensionalMap<String, String, SimpleMatrix>> maps) {\n    TwoDimensionalMap<String, String, SimpleMatrix> averages = TwoDimensionalMap.treeMap();\n     for (Pair<String, String> binary : getBinaryMatrixNames(maps)) {\n       int count = 0;\n       SimpleMatrix matrix = null;", "sourceBeforeFix": "Generics.newHashMap()", "sourceAfterFix": "Generics.newTreeMap()"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55a4b30e72ad36e69499aa5db9b25f63ea7884ac", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         result.expectedMessageCount(2);\n         MockEndpoint error = getMockEndpoint(\"mock:error\");\n        error.expectedMessageCount(2);\n         MockEndpoint kaboom = getMockEndpoint(\"mock:kaboom\");", "fixed": "         result.expectedMessageCount(2);\n         MockEndpoint error = getMockEndpoint(\"mock:error\");\n        error.expectedMinimumMessageCount(2);\n         MockEndpoint kaboom = getMockEndpoint(\"mock:kaboom\");", "sourceBeforeFix": "error.expectedMessageCount(1)", "sourceAfterFix": "error.expectedMinimumMessageCount(1)"}
{"fixCommitSHA1": "50418466a40024d626e2fce8e87693305be3958e", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "                 String javascriptVersion = request.getHeader(HeaderConfig.X_ATMOSPHERE_FRAMEWORK);\n                 int version = Integer.valueOf(javascriptVersion.split(\"-\")[0].replace(\".\", \"\"));\n                 if (version < 221) {\n                    logger.debug(\"Invalid Atmosphere Version {}\", javascriptVersion);\n                     response.setStatus(501);\n                     response.addHeader(X_ATMOSPHERE_ERROR, \"Atmosphere Protocol version not supported.\");\n                     try {", "fixed": "                 String javascriptVersion = request.getHeader(HeaderConfig.X_ATMOSPHERE_FRAMEWORK);\n                 int version = Integer.valueOf(javascriptVersion.split(\"-\")[0].replace(\".\", \"\"));\n                 if (version < 221) {\n                    logger.error(\"Invalid Atmosphere Version {}\", javascriptVersion);\n                     response.setStatus(501);\n                     response.addHeader(X_ATMOSPHERE_ERROR, \"Atmosphere Protocol version not supported.\");\n                     try {", "sourceBeforeFix": "logger.debug(\"Invalid Atmosphere Version {}\",javascriptVersion)", "sourceAfterFix": "logger.error(\"Invalid Atmosphere Version {}\",javascriptVersion)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MiloServerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMiloServerEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface MiloServerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMiloServerEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "f6b33ebf179c7d5c0ddf16449374dcfb2c55d7df", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         checkDir(new File(\"src/test/resources/com/puppycrawl/tools/checkstyle\"));\n     }\n    private void checkDir(File dir) throws Exception {\n         File[] files = dir.listFiles(new FileFilter() {\n                 @Override\n                 public boolean accept(File file) {", "fixed": "         checkDir(new File(\"src/test/resources/com/puppycrawl/tools/checkstyle\"));\n     }\n    private static void checkDir(File dir) throws Exception {\n         File[] files = dir.listFiles(new FileFilter() {\n                 @Override\n                 public boolean accept(File file) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see java.lang.Object\n \t */\n\tpublic int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "fixed": " \t * \n* @see java.lang.Object\n \t */\n\tpublic abstract int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e90c2eeedb70da6a3ca0d27a048b4752a5dc16e1", "projectName": "google.closure-compiler", "bugType": "Same Function Swap Args", "problem": "         .insertBefore(error.node, \"!\")\n         .setDescription(\"Make type non-nullable\")\n         .build();\n    return ImmutableList.of(qmark, bang);\n   }\n   private static SuggestedFix removeNode(JSError error) {", "fixed": "         .insertBefore(error.node, \"!\")\n         .setDescription(\"Make type non-nullable\")\n         .build();\n    return ImmutableList.of(bang, qmark);\n   }\n   private static SuggestedFix removeNode(JSError error) {", "sourceBeforeFix": "ImmutableList.of(qmark,bang)", "sourceAfterFix": "ImmutableList.of(bang,qmark)"}
{"fixCommitSHA1": "f051bfd17154fe5974bd0af2b10e2926fe8191e8", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": "\t\t\t\tWorldManifold manifold = contact.GetWorldManifold();\r\n \t\t\t\tint numContactPoints = manifold.getNumberOfContactPoints();\r\n \t\t\t\tfor (int j = 0; j < numContactPoints; j++) {\r\n \t\t\t\t\tVector2 point = manifold.getPoints()[j];\r", "fixed": "\t\t\t\tWorldManifold manifold = contact.getWorldManifold();\r\n \t\t\t\tint numContactPoints = manifold.getNumberOfContactPoints();\r\n \t\t\t\tfor (int j = 0; j < numContactPoints; j++) {\r\n \t\t\t\t\tVector2 point = manifold.getPoints()[j];\r", "sourceBeforeFix": "contact.GetWorldManifold()", "sourceAfterFix": "contact.getWorldManifold()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface VelocityEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedVelocityEndpointBuilder advanced() {\n             return (AdvancedVelocityEndpointBuilder) this;\n         }", "fixed": "     \n    public interface VelocityEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedVelocityEndpointBuilder advanced() {\n             return (AdvancedVelocityEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "b17609137ae508249571c3480f9d00c8b7dcc199", "projectName": "gephi.gephi", "bugType": "Same Function More Args", "problem": "         public GraphChangeObserver(Graph graph, Column column) {\n             timer = new Timer(\"GraphChangeObserver\", true);\n             graphObserver = graph.getModel().createGraphObserver(graph, false);\n            columnObserver = column != null ? column.createColumnObserver() : null;\n         }\n         @Override", "fixed": "         public GraphChangeObserver(Graph graph, Column column) {\n             timer = new Timer(\"GraphChangeObserver\", true);\n             graphObserver = graph.getModel().createGraphObserver(graph, false);\n            columnObserver = column != null ? column.createColumnObserver(false) : null;\n         }\n         @Override", "sourceBeforeFix": "column.createColumnObserver()", "sourceAfterFix": "column.createColumnObserver(false)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0ff511d978c273a8eae317ecf9f4f1b98e2efb07", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t}\n \t\t\treturn context;\n \t\t}\n\t\tcatch (Exception ex) {\n \t\t\ttry {\n \t\t\t\tfor (SpringApplicationRunListener runListener : runListeners) {\n \t\t\t\t\tfinishWithException(runListener, context, ex);", "fixed": " \t\t\t}\n \t\t\treturn context;\n \t\t}\n\t\tcatch (Throwable ex) {\n \t\t\ttry {\n \t\t\t\tfor (SpringApplicationRunListener runListener : runListeners) {\n \t\t\t\t\tfinishWithException(runListener, context, ex);", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "Throwable exception"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "bafb1f877934f826d5f74f9f33e824dd1aa30432", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         return getInputFactory().createXMLStreamReader(in);\n     }\n    @Converter\n     public XMLEventReader createXMLEventReader(InputStream in) throws XMLStreamException {\n         return getInputFactory().createXMLEventReader(in);\n     }", "fixed": "         return getInputFactory().createXMLStreamReader(in);\n     }\n    @Deprecated\n     public XMLEventReader createXMLEventReader(InputStream in) throws XMLStreamException {\n         return getInputFactory().createXMLEventReader(in);\n     }", "sourceBeforeFix": "@Converter", "sourceAfterFix": "@Deprecated"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MiloClientEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMiloClientEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface MiloClientEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMiloClientEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0c2232f3917eba133a8b9afe0808375a2dc4dc64", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "             @Override\n             protected void initChannel(Channel ch) throws Exception {\n                int heartbeatInterval = UrlUtils.getIdleTimeout(getUrl());\n                 NettyCodecAdapter adapter = new NettyCodecAdapter(getCodec(), getUrl(), NettyClient.this);\nch.pipeline()\n                         .addLast(\"decoder\", adapter.getDecoder())", "fixed": "             @Override\n             protected void initChannel(Channel ch) throws Exception {\n                int heartbeatInterval = UrlUtils.getHeartbeat(getUrl());\n                 NettyCodecAdapter adapter = new NettyCodecAdapter(getCodec(), getUrl(), NettyClient.this);\nch.pipeline()\n                         .addLast(\"decoder\", adapter.getDecoder())", "sourceBeforeFix": "UrlUtils.getIdleTimeout(getUrl())", "sourceAfterFix": "UrlUtils.getHeartbeat(getUrl())"}
{"fixCommitSHA1": "7907f476688eb48f9b46434e90ef0bb02c1ea5d5", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     void joinReset() {\r\n         joinInProgress = false;\r\n         setJoins.clear();\r\n        timeToStartJoin = System.currentTimeMillis() + WAIT_SECONDS_BEFORE_JOIN + 1000;\r\n     }\r\n     public class AsyncRemotelyObjectCallable extends TargetAwareOp {\r", "fixed": "     void joinReset() {\r\n         joinInProgress = false;\r\n         setJoins.clear();\r\n        timeToStartJoin = System.currentTimeMillis() + WAIT_MILLIS_BEFORE_JOIN;\r\n     }\r\n     public class AsyncRemotelyObjectCallable extends TargetAwareOp {\r", "sourceBeforeFix": "System.currentTimeMillis() + WAIT_SECONDS_BEFORE_JOIN + 1000", "sourceAfterFix": "System.currentTimeMillis() + WAIT_MILLIS_BEFORE_JOIN"}
{"fixCommitSHA1": "f6b33ebf179c7d5c0ddf16449374dcfb2c55d7df", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     \n    private DefaultConfiguration createConfig(boolean verbose)\n     {\n         final DefaultConfiguration checkConfig =\n             createCheckConfig(FileTabCharacterCheck.class);", "fixed": "     \n    private static DefaultConfiguration createConfig(boolean verbose)\n     {\n         final DefaultConfiguration checkConfig =\n             createCheckConfig(FileTabCharacterCheck.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "a4c66dc2824221d05e1fcfd54e4f1f4e2c125c40", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "     @Override\n     protected void wakeup(boolean inEventLoop) {\n        if (wakenUp.compareAndSet(false, true)) {\n             selector.wakeup();\n         }\n     }", "fixed": "     @Override\n     protected void wakeup(boolean inEventLoop) {\n        if (!inEventLoop && wakenUp.compareAndSet(false, true)) {\n             selector.wakeup();\n         }\n     }", "sourceBeforeFix": "processSelectedKeys()", "sourceAfterFix": "runAllTasks()"}
{"fixCommitSHA1": "0ffdc3246d1bd202e6cef4b486ffb4e9257b0311", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "         if (target == this) {\n             task.run();\n         } else {\n            target.addTask(task);\n         }\n     }", "fixed": "         if (target == this) {\n             task.run();\n         } else {\n            target.addTaskAndWakeup(task);\n         }\n     }", "sourceBeforeFix": "17", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "5bbaa3482d2bad347cd5f3199f457050ab60a8ce", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             getContext().addInterceptStrategy(delayer);\n         }\n         InflightRepository inflightRepository = getBeanForType(InflightRepository.class);\n        if (delayer != null) {\n             LOG.info(\"Using custom InflightRepository: \" + inflightRepository);\n             getContext().setInflightRepository(inflightRepository);\n         }", "fixed": "             getContext().addInterceptStrategy(delayer);\n         }\n         InflightRepository inflightRepository = getBeanForType(InflightRepository.class);\n        if (inflightRepository != null) {\n             LOG.info(\"Using custom InflightRepository: \" + inflightRepository);\n             getContext().setInflightRepository(inflightRepository);\n         }", "sourceBeforeFix": "delayer != null", "sourceAfterFix": "inflightRepository != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e78b610375a31d161665d2990bb6baa41933e0ee", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             for (int i = 0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {\n                 RecordStore recordStore = getPartitionContainer(i).getRecordStore(mapContainer.getName());\n                if (nodeEngine.getPartitionService().getPartitionOwner(i).equals(nodeEngine.getClusterService().getThisAddress())) {\n                     if (!recordMap.containsKey(mapContainer)) {\n                         recordMap.put(mapContainer, new ArrayList<Record>());\n                     }", "fixed": "             for (int i = 0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {\n                 RecordStore recordStore = getPartitionContainer(i).getRecordStore(mapContainer.getName());\n                if (nodeEngine.getClusterService().getThisAddress().equals(nodeEngine.getPartitionService().getPartitionOwner(i))) {\n                     if (!recordMap.containsKey(mapContainer)) {\n                         recordMap.put(mapContainer, new ArrayList<Record>());\n                     }", "sourceBeforeFix": "nodeEngine.getPartitionService()", "sourceAfterFix": "nodeEngine.getClusterService()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dd6dbd5cf29795ac5bd8f76b76c562d4737917b8", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       throws IOException {\n     FileSystemMasterClient masterClient = mContext.acquireMasterClient();\n     try {\n      return masterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.getPath(), -1L, recursive);\n     } finally {\n       mContext.releaseMasterClient(masterClient);\n     }", "fixed": "       throws IOException {\n     FileSystemMasterClient masterClient = mContext.acquireMasterClient();\n     try {\n      return masterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.toString(), -1L, recursive);\n     } finally {\n       mContext.releaseMasterClient(masterClient);\n     }", "sourceBeforeFix": "ufsPath.getPath()", "sourceAfterFix": "ufsPath.toString()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "2071f9b5421f853e8515f309b2874399c895c43a", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "         final SeverityLevelCounter counter = new SeverityLevelCounter(SeverityLevel.ERROR);\n         final AuditEvent event = new AuditEvent(this, \"ATest.java\", null);\n         assertEquals(0, counter.getCount());\n        counter.addException(event, new IllegalStateException());\n         assertEquals(1, counter.getCount());\n     }", "fixed": "         final SeverityLevelCounter counter = new SeverityLevelCounter(SeverityLevel.ERROR);\n         final AuditEvent event = new AuditEvent(this, \"ATest.java\", null);\n         assertEquals(0, counter.getCount());\n        counter.addException(event, new IllegalStateException(\"Test IllegalStateException\"));\n         assertEquals(1, counter.getCount());\n     }", "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Test IllegalStateException\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page1 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 1, 2);\n         assertThat(page1.pagination().getCount()).isEqualTo(2);\n        assertThat(page1.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page1.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello2\", \"hello3\");", "fixed": "         final PaginatedList<TestDTO> page1 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 1, 2);\n         assertThat(page1.pagination().getCount()).isEqualTo(2);\n        assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page1.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello2\", \"hello3\");", "sourceBeforeFix": "assertThat(page4.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page4.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"}
{"fixCommitSHA1": "0682e8dd41045e3375b61d3d76f6e6991e98c869", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "             }\n         }\n         if (simple.getToReceivedDate() != null) {\n            String s = simple.getFromSentDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.LE.asNum(), false, offset));", "fixed": "             }\n         }\n         if (simple.getToReceivedDate() != null) {\n            String s = simple.getToReceivedDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.LE.asNum(), false, offset));", "sourceBeforeFix": "simple.getFromSentDate()", "sourceAfterFix": "simple.getToSentDate()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "88bf7f435fd294dc60ea6bcc2a1ee19e9aada3d4", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "       if (tempBackupCheckpointExists) {\n        UnderFileSystemUtils.deleteFileIfExists(mUfs, mCheckpointPath);\n         mUfs.rename(mTempBackupCheckpointPath, mCheckpointPath);\n       }\n       if (backupCheckpointExists) {", "fixed": "       if (tempBackupCheckpointExists) {\n        UnderFileSystemUtils.deleteFileIfExists(mCheckpointPath);\n         mUfs.rename(mTempBackupCheckpointPath, mCheckpointPath);\n       }\n       if (backupCheckpointExists) {", "sourceBeforeFix": "UnderFileSystemUtils.deleteFileIfExists(mUfs,mCheckpointPath)", "sourceAfterFix": "UnderFileSystemUtils.deleteFileIfExists(mCheckpointPath)"}
{"fixCommitSHA1": "ec6f0cffe68e0736c04783b61f980f1271064dd9", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  public int hashCode() {\n     Function<N, Set<E>> nodeToOutEdges = new Function<N, Set<E>>() {\n       @Override\n       public Set<E> apply(N node) {", "fixed": "   }\n   @Override\n  public final int hashCode() {\n     Function<N, Set<E>> nodeToOutEdges = new Function<N, Set<E>>() {\n       @Override\n       public Set<E> apply(N node) {", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "8d133e14729b78621a02916a0ce96a56363c8e0c", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "  */\n public class RoutePerformanceTest extends ContextTestSupport {\n    private int size = 10000;\n     private SimpleDataSet dataSet = new SimpleDataSet(size);\n     private String uri = \"mock:results\";", "fixed": "  */\n public class RoutePerformanceTest extends ContextTestSupport {\n    private int size = 500;\n     private SimpleDataSet dataSet = new SimpleDataSet(size);\n     private String uri = \"mock:results\";", "sourceBeforeFix": "size=10000", "sourceAfterFix": "size=500"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t@Override\r\n \tpublic String getString (String key) {\r\n\t\tNSString value = (NSString)nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return \"\";\r\n \t\treturn value.toString();\r\n \t}\r", "fixed": " \t@Override\r\n \tpublic String getString (String key) {\r\n\t\tObject value = nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return \"\";\r\n \t\treturn value.toString();\r\n \t}\r", "sourceBeforeFix": "NSNumber.numberWithLong(val)", "sourceAfterFix": "NSNumber.numberWithLongLong(val)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "8b9791f8b4b1154d6a053de901a5efd2105409e5", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     private String keySerializerClass;\n     @UriParam(label = \"producer\", defaultValue = \"1\")\n    private Integer requestRequiredAcks = 1;\n     @UriParam(label = \"producer\", defaultValue = \"33554432\")\n     private Integer bufferMemorySize = 33554432;", "fixed": "     private String keySerializerClass;\n     @UriParam(label = \"producer\", defaultValue = \"1\")\n    private String requestRequiredAcks = \"1\";\n     @UriParam(label = \"producer\", defaultValue = \"33554432\")\n     private Integer bufferMemorySize = 33554432;", "sourceBeforeFix": "Integer requestRequiredAcks", "sourceAfterFix": "String requestRequiredAcks"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DataSetEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDataSetEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DataSetEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDataSetEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c9a1cc9df3dc4fe2eef78ad6090a9b1d95a02557", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             .setMeasurementUnit(MeasurementUnit.MILLISECONDS)\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(17500))\n             .build();\n     static final AttributeDefinition[] ATTRIBUTES = new AttributeDefinition[] { ASYNC_MARSHALLING, MODE, QUEUE_SIZE, QUEUE_FLUSH_INTERVAL, REMOTE_TIMEOUT };", "fixed": "             .setMeasurementUnit(MeasurementUnit.MILLISECONDS)\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(17500L))\n             .build();\n     static final AttributeDefinition[] ATTRIBUTES = new AttributeDefinition[] { ASYNC_MARSHALLING, MODE, QUEUE_SIZE, QUEUE_FLUSH_INTERVAL, REMOTE_TIMEOUT };", "sourceBeforeFix": "new ModelNode().set(10)", "sourceAfterFix": "new ModelNode().set(10L)"}
{"fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(littleEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "fixed": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}
{"fixCommitSHA1": "c2d5b41fb48cc2b913a2a04d2b68aa4369acac6a", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Set parse tree.\n      * @param parseTree DetailAST parse tree.\n      */\n    final void setParseTree(DetailAST parseTree) {\n         ((AST) root).setFirstChild(parseTree);\n     }", "fixed": "      * Set parse tree.\n      * @param parseTree DetailAST parse tree.\n      */\n    protected final void setParseTree(DetailAST parseTree) {\n         ((AST) root).setFirstChild(parseTree);\n     }", "sourceBeforeFix": "16", "sourceAfterFix": "20"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CoAPEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCoAPEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CoAPEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCoAPEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9a7cd4fedbaa2cf02c3cb37e2618ad72409e4745", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         context.stop();\n         List<MessagePayload> events = nagios.getMessagePayloadList();\n        assertEquals(10, events.size());\n     }\n     @Test", "fixed": "         context.stop();\n         List<MessagePayload> events = nagios.getMessagePayloadList();\n        assertEquals(12, events.size());\n     }\n     @Test", "sourceBeforeFix": "assertEquals(10,events.size())", "sourceAfterFix": "assertEquals(12,events.size())"}
{"fixCommitSHA1": "1ab4426ed60aec7fbc643db7d66f85e53e9c5619", "projectName": "Activiti.Activiti", "bugType": "Change Boolean Literal", "problem": "   }\n   public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames) {\n    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, false));\n   }\n   public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames, String locale, boolean withLocalizationFallback) {\n    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, false, locale, withLocalizationFallback));\n   }\n   public Object getVariable(String executionId, String variableName) {", "fixed": "   }\n   public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames) {\n    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, true));\n   }\n   public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames, String locale, boolean withLocalizationFallback) {\n    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, true, locale, withLocalizationFallback));\n   }\n   public Object getVariable(String executionId, String variableName) {", "sourceBeforeFix": "new GetExecutionVariableInstancesCmd(executionId,variableNames,false)", "sourceAfterFix": "new GetExecutionVariableInstancesCmd(executionId,variableNames,true)"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testBurstySampling() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "fixed": "     public void testBurstySampling() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "02f1f95e522fd142dc0805c37e91d12880ab5996", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": " import static com.facebook.presto.sql.gen.Bootstrap.CALL_SITES_FIELD_NAME;\n import static java.lang.String.format;\npublic class ByteCodeUtils\n {\n     private ByteCodeUtils()\n     {", "fixed": " import static com.facebook.presto.sql.gen.Bootstrap.CALL_SITES_FIELD_NAME;\n import static java.lang.String.format;\npublic final class ByteCodeUtils\n {\n     private ByteCodeUtils()\n     {", "sourceBeforeFix": "ArrayList<Class<?>>", "sourceAfterFix": "List<Class<?>>"}
{"fixCommitSHA1": "885f7d1e71f16d5051ea7a71fb522ebf85821e97", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                             }\n                         });\n                        configuration.addClientInterceptor(method, factory, InterceptorOrder.View.COMPONENT_DISPATCHER);\n                     }\n                 }", "fixed": "                             }\n                         });\n                        configuration.addViewInterceptor(method, factory, InterceptorOrder.View.COMPONENT_DISPATCHER);\n                     }\n                 }", "sourceBeforeFix": "configuration.addClientInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)", "sourceAfterFix": "configuration.addViewInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {", "fixed": " \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "6a95dd35511f4216481d8d0ffd4952ed1893a1c4", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       setPermission(loadPath, FsPermission.valueOf(\"-rwxrwxrwx\"));\n       try (HTable table = (HTable)TEST_UTIL.getConnection().getTable(tableName)) {\n        TEST_UTIL.waitTableEnabled(tableName);\n         LoadIncrementalHFiles loader = new LoadIncrementalHFiles(conf);\n         loader.doBulkLoad(loadPath, table);\n       }", "fixed": "       setPermission(loadPath, FsPermission.valueOf(\"-rwxrwxrwx\"));\n       try (HTable table = (HTable)TEST_UTIL.getConnection().getTable(tableName)) {\n        TEST_UTIL.waitUntilAllRegionsAssigned(tableName);\n         LoadIncrementalHFiles loader = new LoadIncrementalHFiles(conf);\n         loader.doBulkLoad(loadPath, table);\n       }", "sourceBeforeFix": "TEST_UTIL.waitTableEnabled(TEST_TABLE.getTableName())", "sourceAfterFix": "TEST_UTIL.waitUntilAllRegionsAssigned(TEST_TABLE.getTableName())"}
{"fixCommitSHA1": "f08db599028efb40590226e5feda39dc5e410a9e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         final String bundlePath = config.getBundlePath();\n         final File bundlesDir = new File(bundlePath);\n         if (!bundlesDir.isDirectory()) {\n            throw new IllegalStateException(\"Invalid modules directory: \" + modulesDir);\n         }\n         SecurityActions.setSystemProperty(SYSPROP_KEY_BUNDLE_PATH, bundlePath);", "fixed": "         final String bundlePath = config.getBundlePath();\n         final File bundlesDir = new File(bundlePath);\n         if (!bundlesDir.isDirectory()) {\n            throw new IllegalStateException(\"Invalid modules directory: \" + bundlesDir);\n         }\n         SecurityActions.setSystemProperty(SYSPROP_KEY_BUNDLE_PATH, bundlePath);", "sourceBeforeFix": "\"Invalid modules directory: \" + modulesDir", "sourceAfterFix": "\"Invalid modules directory: \" + bundlesDir"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "407fa8afd0cc9c7cb69859528f3cbb2e6b0f4c8e", "projectName": "apache.camel", "bugType": "Change Binary Operator", "problem": "             if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {\n                 Model oldModel = swagger.getDefinitions().get(entry.getKey());\n                 if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {\n                    oldExt = oldModel.getVendorExtensions().get(\"x-className\") == null;\n                 }\n             }", "fixed": "             if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {\n                 Model oldModel = swagger.getDefinitions().get(entry.getKey());\n                 if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {\n                    oldExt = oldModel.getVendorExtensions().get(\"x-className\") != null;\n                 }\n             }", "sourceBeforeFix": "oldModel.getVendorExtensions().get(\"x-className\") == null", "sourceAfterFix": "oldModel.getVendorExtensions().get(\"x-className\") != null"}
{"fixCommitSHA1": "ef11886bf2190370a0f3fd287616763826239c48", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n\t\t        .getRelationships(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r", "fixed": " \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n\t\t        .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r", "sourceBeforeFix": "Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))", "sourceAfterFix": "Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n \t/**\n \t * Save the given global property to the database", "fixed": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t/**\n \t * Save the given global property to the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3d7e389a85a9c316be6d15754edda832d789e25a", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         try {\n             pathHandler.addPrefixPath(ErrorContextHandler.ERROR_CONTEXT, ErrorContextHandler.createErrorContext(consoleSlot));\n         } catch (ModuleLoadException e) {\n            ROOT_LOGGER.error(consoleSlot == null ? \"main\" : consoleSlot);\n         }\n         ManagementRootConsoleRedirectHandler rootConsoleRedirectHandler = new ManagementRootConsoleRedirectHandler(consoleHandler);", "fixed": "         try {\n             pathHandler.addPrefixPath(ErrorContextHandler.ERROR_CONTEXT, ErrorContextHandler.createErrorContext(consoleSlot));\n         } catch (ModuleLoadException e) {\n            ROOT_LOGGER.errorContextModuleNotFound(consoleSlot == null ? \"main\" : consoleSlot);\n         }\n         ManagementRootConsoleRedirectHandler rootConsoleRedirectHandler = new ManagementRootConsoleRedirectHandler(consoleHandler);", "sourceBeforeFix": "ROOT_LOGGER.error(consoleSlot == null ? \"main\" : consoleSlot)", "sourceAfterFix": "ROOT_LOGGER.errorContextModuleNotFound(consoleSlot == null ? \"main\" : consoleSlot)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @param from The element to be copied.\n \t * @param to The target element.\n \t */\n\tpublic void copyTo(T from, T to);", "fixed": " \t * @param from The element to be copied.\n \t * @param to The target element.\n \t */\n\tpublic abstract void copyTo(T from, T to);", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesConfigMapsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesConfigMapsEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesConfigMapsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesConfigMapsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ca94fbcd444c6d36e7c779def6f364c69f1cf40d", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * multiple test migration versions. For each test specification added,\n \t * an entry will be added for each specified migration version.\n \t */\n\tprotected static final class TestSpecifications {\n \t\tprivate static final int DEFAULT_TEST_DATA_COUNT = 10;\n \t\tprivate static final String DEFAULT_SNAPSHOT_FILENAME_FORMAT = \"flink-%s-%s-snapshot\";", "fixed": " \t * multiple test migration versions. For each test specification added,\n \t * an entry will be added for each specified migration version.\n \t */\n\tpublic static final class TestSpecifications {\n \t\tprivate static final int DEFAULT_TEST_DATA_COUNT = 10;\n \t\tprivate static final String DEFAULT_SNAPSHOT_FILENAME_FORMAT = \"flink-%s-%s-snapshot\";", "sourceBeforeFix": "28", "sourceAfterFix": "25"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean mouseMoved (int screenX, int screenY) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].mouseMoved(screenX, screenY)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean mouseMoved (int screenX, int screenY) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).mouseMoved(screenX, screenY)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2bbc1368b233f630f6acbf6d6c8d52ec5f1d1772", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         setProperties(configuration, parameters);\n        return new ChronicleEngineEnpoint(uri, this, configuration);\n     }\n }", "fixed": "         setProperties(configuration, parameters);\n        return new ChronicleEngineEndpoint(uri, this, configuration);\n     }\n }", "sourceBeforeFix": "new ChronicleEngineEnpoint(uri,this,configuration)", "sourceAfterFix": "new ChronicleEngineEndpoint(uri,this,configuration)"}
{"fixCommitSHA1": "685cb6543333bd3bed23d849fa95e1bce6b4e154", "projectName": "eclipse.vert.x", "bugType": "Change Numeric Literal", "problem": "             .setDescription(\"The source\")\n             .setArgName(\"source\"))\n         .addArgument(new Argument()\n            .setIndex(0)\n             .setDescription(\"The destination\")\n             .setArgName(\"target\"));\n   }", "fixed": "             .setDescription(\"The source\")\n             .setArgName(\"source\"))\n         .addArgument(new Argument()\n            .setIndex(1)\n             .setDescription(\"The destination\")\n             .setArgName(\"target\"));\n   }", "sourceBeforeFix": "new Argument().setIndex(0)", "sourceAfterFix": "new Argument().setIndex(1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8cb66861957089a03000c71b66f1e66e8e66d4c1", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n                createQueryResultSnippet( engine.execute( query ).toString() ) ) );\n         fw.close();\n     }", "fixed": "                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n                createQueryResultSnippet( engine.execute( query ).dumpToString() ) ) );\n         fw.close();\n     }", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "5266fb18f1b3915144b72d8ba25d49004fa18cb0", "projectName": "facebook.presto", "bugType": "Same Function Less Args", "problem": "     private static long getSliceArrayRetainedSizeInBytes(Slice[] values)\n     {\n         long sizeInBytes = sizeOf(values);\n        Map<Object, Boolean> uniqueRetained = new IdentityHashMap<>(values.length);\n         for (Slice value : values) {\n             if (value == null) {\n                 continue;", "fixed": "     private static long getSliceArrayRetainedSizeInBytes(Slice[] values)\n     {\n         long sizeInBytes = sizeOf(values);\n        Map<Object, Boolean> uniqueRetained = new IdentityHashMap<>();\n         for (Slice value : values) {\n             if (value == null) {\n                 continue;", "sourceBeforeFix": "new IdentityHashMap<>(values.length)", "sourceAfterFix": "new IdentityHashMap<>()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fb8fc104115926f045d7898b0c58b647f30fb602", "projectName": "neo4j.neo4j", "bugType": "Same Function Swap Args", "problem": "         JaxRsResponse response = httpPostIndexRelationshipRoot( JsonHelper.createJsonFrom( indexSpecification ) );\n         assertEquals( 201, response.getStatus() );\n         assertNotNull( response.getHeaders().get( \"Location\" ).get( 0 ) );\n        assertEquals( helper.getRelationshipIndexes().length, 1 );\n         assertNotNull( helper.getRelationshipIndex( indexName ) );\n     }", "fixed": "         JaxRsResponse response = httpPostIndexRelationshipRoot( JsonHelper.createJsonFrom( indexSpecification ) );\n         assertEquals( 201, response.getStatus() );\n         assertNotNull( response.getHeaders().get( \"Location\" ).get( 0 ) );\n        assertEquals( 1, helper.getRelationshipIndexes().length);\n         assertNotNull( helper.getRelationshipIndex( indexName ) );\n     }", "sourceBeforeFix": "assertEquals(helper.getRelationshipIndexes().length,1)", "sourceAfterFix": "assertEquals(1,helper.getRelationshipIndexes().length)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "         assertNull(url.getUsername());\r\n         assertNull(url.getPassword());\r\n         assertNull(url.getHost());\r\n        assertEquals(12, url.getPort());\r\n         assertEquals(\"context/path\", url.getPath());\r\n         assertEquals(2, url.getParameters().size());\r\n         assertEquals(\"1.0.0\", url.getParameter(\"version\"));\r", "fixed": "         assertNull(url.getUsername());\r\n         assertNull(url.getPassword());\r\n         assertNull(url.getHost());\r\n        assertEquals(0, url.getPort());\r\n         assertEquals(\"context/path\", url.getPath());\r\n         assertEquals(2, url.getParameters().size());\r\n         assertEquals(\"1.0.0\", url.getParameter(\"version\"));\r", "sourceBeforeFix": "assertEquals(12,url.getPort())", "sourceAfterFix": "assertEquals(0,url.getPort())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "fixed": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "       }\n     }\n    public Entry(Response response) {\n       this.url = response.request().url().toString();\n       this.varyHeaders = HttpHeaders.varyHeaders(response);\n       this.requestMethod = response.request().method();", "fixed": "       }\n     }\n    Entry(Response response) {\n       this.url = response.request().url().toString();\n       this.varyHeaders = HttpHeaders.varyHeaders(response);\n       this.requestMethod = response.request().method();", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "1dc7ebfc26b5ef1f88e84702582715eb631202db", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "     public void delete(String index) throws APIException, IOException {\n        api.path(routes.IndicesResource().single(index))\n                 .timeout(apiTimeout(\"index_delete\", 60, TimeUnit.SECONDS))\n                 .expect(204)\n                 .execute();", "fixed": "     public void delete(String index) throws APIException, IOException {\n        api.path(routes.IndicesResource().delete(index))\n                 .timeout(apiTimeout(\"index_delete\", 60, TimeUnit.SECONDS))\n                 .expect(204)\n                 .execute();", "sourceBeforeFix": "routes.IndicesResource().single(index)", "sourceAfterFix": "routes.IndicesResource().delete(index)"}
{"fixCommitSHA1": "5e7873ebd45790d9d72eb9d312de4611dc97f796", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "     assertEquals(0, historyService.createHistoricActivityInstanceQuery().processDefinitionId(\"nonExistingProcessDefinitionId\").list().size());\n     if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {\n      assertEquals(2, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());\n     } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {\n      assertEquals(1, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());\n     } else {\n       assertEquals(0, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());\n     }", "fixed": "     assertEquals(0, historyService.createHistoricActivityInstanceQuery().processDefinitionId(\"nonExistingProcessDefinitionId\").list().size());\n     if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {\n      assertEquals(3, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());\n     } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {\n      assertEquals(3, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());\n     } else {\n       assertEquals(0, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());\n     }", "sourceBeforeFix": "assertEquals(2,historyService.createHistoricActivityInstanceQuery().finished().list().size())", "sourceAfterFix": "assertEquals(3,historyService.createHistoricActivityInstanceQuery().finished().list().size())"}
{"fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "    * User can override this method if there is a better way to perform bulk lookup\n    */\n  Map<String, String> applyAll(Iterable<String> keys)\n   {\n     if (keys == null) {\n       return Collections.emptyMap();", "fixed": "    * User can override this method if there is a better way to perform bulk lookup\n    */\n  public Map<String, String> applyAll(Iterable<String> keys)\n   {\n     if (keys == null) {\n       return Collections.emptyMap();", "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "9fe147f0d526ec84399f4b1d1ef58bb996466038", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     mMasterInfo.createFile(\"testFile\", Constants.DEFAULT_BLOCK_SIZE_BYTE);\n   }\n  @Test(expected = InvalidPathException.class)\n   public void createFileInvalidPathTest2() throws InvalidPathException, FileAlreadyExistException,\n       BlockInfoException, TachyonException {\n     mMasterInfo.createFile(\"/\", Constants.DEFAULT_BLOCK_SIZE_BYTE);", "fixed": "     mMasterInfo.createFile(\"testFile\", Constants.DEFAULT_BLOCK_SIZE_BYTE);\n   }\n  @Test(expected = FileAlreadyExistException.class)\n   public void createFileInvalidPathTest2() throws InvalidPathException, FileAlreadyExistException,\n       BlockInfoException, TachyonException {\n     mMasterInfo.createFile(\"/\", Constants.DEFAULT_BLOCK_SIZE_BYTE);", "sourceBeforeFix": "InvalidPathException.class", "sourceAfterFix": "FileAlreadyExistException.class"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7bd0482c801680bfd01ee0c3294d811e207a0fb8", "projectName": "thinkaurelius.titan", "bugType": "Less Specific If", "problem": "                 throw new TemporaryStorageException(ee);\n             }\n} else {\n            if (cf.getCompressionType() == null) {\n                 try {\n                     adm.disableTable(tableName);", "fixed": "                 throw new TemporaryStorageException(ee);\n             }\n} else {\n            if (cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE) {\n                 try {\n                     adm.disableTable(tableName);", "sourceBeforeFix": "cf.getCompressionType() == null", "sourceAfterFix": "cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE"}
{"fixCommitSHA1": "250487e835b390d164789fcb58ba946e3c77ef22", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     \n     public Object lookupLink(String name) throws NamingException {\n        return lookup(parseName(name));\n     }\n     ", "fixed": "     \n     public Object lookupLink(String name) throws NamingException {\n        return lookupLink(parseName(name));\n     }\n     ", "sourceBeforeFix": "lookup(parseName(name))", "sourceAfterFix": "lookupLink(parseName(name))"}
{"fixCommitSHA1": "453488cff2a54f32c573589f1cfc47bbf30ebe09", "projectName": "apache.hadoop", "bugType": "Same Function More Args", "problem": "         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n     if (coreSiteXMLInputStream != null) {\n      this.conf.addResource(coreSiteXMLInputStream);\n     }", "fixed": "         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n     if (coreSiteXMLInputStream != null) {\n      this.conf.addResource(coreSiteXMLInputStream,\n          YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n     }", "sourceBeforeFix": "this.conf.addResource(coreSiteXMLInputStream)", "sourceAfterFix": "this.conf.addResource(coreSiteXMLInputStream,YarnConfiguration.CORE_SITE_CONFIGURATION_FILE)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "fixed": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "fixed": "             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "bb5f9fe078e7d586d04d5858792f10e2fdc20ec3", "projectName": "netty.netty", "bugType": "Less Specific If", "problem": "     }\n     private static int scoreAddress(InetAddress addr) {\n        if (addr.isAnyLocalAddress()) {\n             return 0;\n         }\n         if (addr.isMulticastAddress()) {", "fixed": "     }\n     private static int scoreAddress(InetAddress addr) {\n        if (addr.isAnyLocalAddress() || addr.isLoopbackAddress()) {\n             return 0;\n         }\n         if (addr.isMulticastAddress()) {", "sourceBeforeFix": "addr.isAnyLocalAddress()", "sourceAfterFix": "addr.isAnyLocalAddress() || addr.isLoopbackAddress()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IgniteCacheEndpointBuilder\n             extends\n                 IgniteCacheEndpointConsumerBuilder, IgniteCacheEndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointBuilder advanced() {", "fixed": "     \n    public interface IgniteCacheEndpointBuilder\n             extends\n                 IgniteCacheEndpointConsumerBuilder, IgniteCacheEndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "      * @return a comment text String.\n      */\n     private static String getCommentText(String... comments) {\n        final StringBuilder builder = new StringBuilder();\n         for (final String line : comments) {\n             final int textStart = findTextStart(line);", "fixed": "      * @return a comment text String.\n      */\n     private static String getCommentText(String... comments) {\n        final StringBuilder builder = new StringBuilder(1024);\n         for (final String line : comments) {\n             final int textStart = findTextStart(line);", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "     setChildren(children);\n   }\n  protected void setJobStatuses(org.apache.hadoop.mapreduce.JobStatus[] stats) {\n     super.setJobStatuses(stats);\n   }", "fixed": "     setChildren(children);\n   }\n  @InterfaceAudience.Private\n  public void setJobStatuses(org.apache.hadoop.mapreduce.JobStatus[] stats) {\n     super.setJobStatuses(stats);\n   }", "sourceBeforeFix": "4", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AsteriskEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAsteriskEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AsteriskEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAsteriskEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "23efcad891c91fc131ed4729c734ff6b122197df", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnExecution() throws Exception {\n\t\tString processDefinitionId = deployOneTaskProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal CyclicBarrier startBarrier = new CyclicBarrier(2);", "fixed": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnExecution() throws Exception {\n\t\tString processDefinitionId = deployOneTaskTestProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal CyclicBarrier startBarrier = new CyclicBarrier(2);", "sourceBeforeFix": "deployOneTaskProcess()", "sourceAfterFix": "deployOneTaskTestProcess()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CxfEndpointBuilder\n             extends\n                 CxfEndpointConsumerBuilder, CxfEndpointProducerBuilder {\n         default AdvancedCxfEndpointBuilder advanced() {", "fixed": "     \n    public interface CxfEndpointBuilder\n             extends\n                 CxfEndpointConsumerBuilder, CxfEndpointProducerBuilder {\n         default AdvancedCxfEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f7cac84b60c17b81e693fbe85a9cfb6018b2d920", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         }\n         RouteController routeController = getBeanForType(RouteController.class);\n        if (clusterService != null) {\n             LOG.info(\"Using RouteController: \" + routeController);\n             getContext().setRouteController(routeController);\n         }", "fixed": "         }\n         RouteController routeController = getBeanForType(RouteController.class);\n        if (routeController != null) {\n             LOG.info(\"Using RouteController: \" + routeController);\n             getContext().setRouteController(routeController);\n         }", "sourceBeforeFix": "clusterService != null", "sourceAfterFix": "routeController != null"}
{"fixCommitSHA1": "d70d6a71ee43414e3ad54bacc9ac609dcd2efca9", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   }\n   private void getTestHelper(TachyonFS tfs) throws IOException {\n    int fileId = mTfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n    Assert.assertNotNull(mTfs.getFile(fileId));\n   }\n   @Test", "fixed": "   }\n   private void getTestHelper(TachyonFS tfs) throws IOException {\n    int fileId = tfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n    Assert.assertNotNull(tfs.getFile(fileId));\n   }\n   @Test", "sourceBeforeFix": "mTfs.getFile(fileId)", "sourceAfterFix": "tfs.getFile(fileId)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SshEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSshEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SshEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSshEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"redis\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"redis\")"}
{"fixCommitSHA1": "a7ea864d23e4b47cef8056a446ea4e7344c62ee7", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "         DatagramSocket socket = new DatagramSocket();\n         try {\n            InetAddress address = InetAddress.getByName(\"127.0.0.1\");\n             for (int i = 0; i < messageCount; i++) {\n                 byte[] data = message.getBytes();", "fixed": "         DatagramSocket socket = new DatagramSocket();\n         try {\n            InetAddress address = InetAddress.getByName(\"localhost\");\n             for (int i = 0; i < messageCount; i++) {\n                 byte[] data = message.getBytes();", "sourceBeforeFix": "AvailablePortFinder.getNextAvailable()", "sourceAfterFix": "AvailablePortFinder.getNextAvailable(4000)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "fixed": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private static void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "ea36259d22c518ae70f5eb951123c74351be48b6", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         final String newValue = \"NEW_VALUE\";\n         map.put(key, oldValue);\n        map.lock(key, 4, TimeUnit.SECONDS);\n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n                map.tryPut(key, newValue, 8, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();", "fixed": "         final String newValue = \"NEW_VALUE\";\n         map.put(key, oldValue);\n        map.lock(key, 1, TimeUnit.SECONDS);\n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n                map.tryPut(key, newValue, 60, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();", "sourceBeforeFix": "map.tryPut(key,newValue,8,TimeUnit.SECONDS)", "sourceAfterFix": "map.tryPut(key,newValue,60,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void rename(int fileId, String dstPath) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void rename(int fileId, String dstPath) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "         @ApiResponse(code = 200, message = \"successful operation\", response = Order.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n    Order getOrderById(@PathParam(\"order_id\") @Min(1) @Max(5) @ApiParam(\"ID of pet that needs to be fetched\") Long orderId);\n     @POST\n     @Path(\"/order\")", "fixed": "         @ApiResponse(code = 200, message = \"successful operation\", response = Order.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n    Order getOrderById(@PathParam(\"order_id\") @Min(1) @Max(5) @ApiParam(\"ID of pet that needs to be fetched\") Long orderId) throws Exception;\n     @POST\n     @Path(\"/order\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "e981384cc21ca3c1958acd4b494a6ddd147c0a60", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             if (ssl.has(CommonAttributes.CIPHER_SUITE))\n                 config.setSslCiphers(ssl.get(CommonAttributes.CIPHER_SUITE).asString());\n             if (ssl.has(CommonAttributes.PROTOCOL))\n                config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString());\n             if (ssl.has(CommonAttributes.CA_CERTIFICATE_FILE))\n                 config.setSslTrustStore(ssl.get(CommonAttributes.CA_CERTIFICATE_FILE).asString());\n             if (ssl.has(CommonAttributes.CA_REVOCATION_URL))", "fixed": "             if (ssl.has(CommonAttributes.CIPHER_SUITE))\n                 config.setSslCiphers(ssl.get(CommonAttributes.CIPHER_SUITE).asString());\n             if (ssl.has(CommonAttributes.PROTOCOL))\n                config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString());\n             if (ssl.has(CommonAttributes.CA_CERTIFICATE_FILE))\n                 config.setSslTrustStore(ssl.get(CommonAttributes.CA_CERTIFICATE_FILE).asString());\n             if (ssl.has(CommonAttributes.CA_REVOCATION_URL))", "sourceBeforeFix": "config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString())", "sourceAfterFix": "config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString())"}
{"fixCommitSHA1": "7803ca07e7c9e291003fab3d1878945dc2a76eee", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "         binder,\n         \"druid.realtime.chathandler.type\",\n         Key.get(ChatHandlerProvider.class),\n        Key.get(ServiceAnnouncingChatHandlerProvider.class)\n     );\n     final MapBinder<String, ChatHandlerProvider> handlerProviderBinder = PolyBind.optionBinder(\n         binder, Key.get(ChatHandlerProvider.class)", "fixed": "         binder,\n         \"druid.realtime.chathandler.type\",\n         Key.get(ChatHandlerProvider.class),\n        Key.get(NoopChatHandlerProvider.class)\n     );\n     final MapBinder<String, ChatHandlerProvider> handlerProviderBinder = PolyBind.optionBinder(\n         binder, Key.get(ChatHandlerProvider.class)", "sourceBeforeFix": "ServiceAnnouncingChatHandlerProvider.class", "sourceAfterFix": "NoopChatHandlerProvider.class"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MQTTEndpointBuilder\n             extends\n                 MQTTEndpointConsumerBuilder, MQTTEndpointProducerBuilder {\n         default AdvancedMQTTEndpointBuilder advanced() {", "fixed": "     \n    public interface MQTTEndpointBuilder\n             extends\n                 MQTTEndpointConsumerBuilder, MQTTEndpointProducerBuilder {\n         default AdvancedMQTTEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     CLIENT.user_deleteById(fileId);\n   }\n  public ClientFileInfo user_getClientFileInfoByPath(String path)\n       throws FileDoesNotExistException, InvalidPathException, TException {\n     return CLIENT.user_getClientFileInfoByPath(path);\n   }\n  public ClientFileInfo user_getClientFileInfoById(int id)\n       throws FileDoesNotExistException, TException {\n     return CLIENT.user_getClientFileInfoById(id);\n   }", "fixed": "     CLIENT.user_deleteById(fileId);\n   }\n  public synchronized ClientFileInfo user_getClientFileInfoByPath(String path)\n       throws FileDoesNotExistException, InvalidPathException, TException {\n     return CLIENT.user_getClientFileInfoByPath(path);\n   }\n  public synchronized ClientFileInfo user_getClientFileInfoById(int id)\n       throws FileDoesNotExistException, TException {\n     return CLIENT.user_getClientFileInfoById(id);\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface StAXEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedStAXEndpointBuilder advanced() {\n             return (AdvancedStAXEndpointBuilder) this;\n         }", "fixed": "     \n    public interface StAXEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedStAXEndpointBuilder advanced() {\n             return (AdvancedStAXEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "14eade7f6e21e560a08de348504584cba5e94c94", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     public static Archive<?> deployment0() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(), \"web.xml\");\n         System.out.println(war.toString(true));\n         return war;\n     }", "fixed": "     public static Archive<?> deployment0() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.setWebXML(ClusteredWebTestCase.class.getPackage(), \"web.xml\");\n         System.out.println(war.toString(true));\n         return war;\n     }", "sourceBeforeFix": "war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),\"web.xml\")", "sourceAfterFix": "war.setWebXML(ClusteredWebTestCase.class.getPackage(),\"web.xml\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tAssert.assertTrue(paths.iterator().next().startsWith(\n\t\t\t\t(new Path(testBucket.getParent(), \".test-2.inprogress\").toString())));\n \t}\n \t@Test", "fixed": " \t\tAssert.assertTrue(paths.iterator().next().startsWith(\n\t\t\t\t(new Path(testBucket.getParent(), \".test-2.inprogress\").getPath())));\n \t}\n \t@Test", "sourceBeforeFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").toString()", "sourceAfterFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").getPath()"}
{"fixCommitSHA1": "4943b845e40f8943ab906f057502cfe49902d045", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "     MetricsConfig config = new MetricsConfig(mMetricsProps);\n     Map<String, Properties> propertyCategories = config.getPropertyCategories();\n    Assert.assertEquals(2, propertyCategories.size());\n     Properties masterProp = config.getInstanceProperties(\"master\");\n     Map<String, Properties> sourceProps =", "fixed": "     MetricsConfig config = new MetricsConfig(mMetricsProps);\n     Map<String, Properties> propertyCategories = config.getPropertyCategories();\n    Assert.assertEquals(3, propertyCategories.size());\n     Properties masterProp = config.getInstanceProperties(\"master\");\n     Map<String, Properties> sourceProps =", "sourceBeforeFix": "Assert.assertEquals(2,propertyCategories.size())", "sourceAfterFix": "Assert.assertEquals(3,propertyCategories.size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "08665fecde2010f1d4663b7988282bdd978841e8", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": " import org.infinispan.context.Flag;\n import org.infinispan.manager.EmbeddedCacheManager;\npublic class InfinispanUtil {\n     private InfinispanUtil() {\n     }", "fixed": " import org.infinispan.context.Flag;\n import org.infinispan.manager.EmbeddedCacheManager;\npublic final class InfinispanUtil {\n     private InfinispanUtil() {\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "14b91c00dca45c89cac63abe46f38955cdca7b86", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Same Function More Args", "problem": "   @Override\n   public Future<Void> sendBinaryFrame(ByteBuf payload, boolean finalFragment, int rsv) {\n    return channel.writeAndFlush(new BinaryWebSocketFrame(payload));\n   }\n   @Override", "fixed": "   @Override\n   public Future<Void> sendBinaryFrame(ByteBuf payload, boolean finalFragment, int rsv) {\n    return channel.writeAndFlush(new BinaryWebSocketFrame(finalFragment, rsv, payload));\n   }\n   @Override", "sourceBeforeFix": "new BinaryWebSocketFrame(payload)", "sourceAfterFix": "new BinaryWebSocketFrame(finalFragment,rsv,payload)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ReactiveStreamsEndpointBuilder\n             extends\n                 ReactiveStreamsEndpointConsumerBuilder, ReactiveStreamsEndpointProducerBuilder {\n         default AdvancedReactiveStreamsEndpointBuilder advanced() {", "fixed": "     \n    public interface ReactiveStreamsEndpointBuilder\n             extends\n                 ReactiveStreamsEndpointConsumerBuilder, ReactiveStreamsEndpointProducerBuilder {\n         default AdvancedReactiveStreamsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "fixed": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic abstract boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "2d8ae9afea66a45bf7f3dad61c06ee95d3ef9a46", "projectName": "apache.flink", "bugType": "Change Boolean Literal", "problem": " \t@Override\n \tpublic boolean isInputChannel() {\n\t\treturn true;\n \t}\n \t/**", "fixed": " \t@Override\n \tpublic boolean isInputChannel() {\n\t\treturn false;\n \t}\n \t/**", "sourceBeforeFix": "return true; ", "sourceAfterFix": "return false; "}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n        return Double.valueOf(value.toString());\n     }\n }", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n        return Double.parseDouble(value.toString());\n     }\n }", "sourceBeforeFix": "Double.valueOf(value.toString())", "sourceAfterFix": "Double.parseDouble(value.toString())"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   public void normalize() {\n    logger.info(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();", "fixed": "   }\n   public void normalize() {\n    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();", "sourceBeforeFix": "logger.info(\"Creating extern file for exports\")", "sourceAfterFix": "logger.fine(\"Creating extern file for exports\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5ba6ded7e01cc902e75403dac6cb5c5f9d74f74d", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "fixed": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "fixed": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/test\");\n         servlet.service(request, response);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "cddf42c30c1b839e44c03e017ccdb3619d3aa967", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\tif (person.isPersonVoided()) {\r\n\t\t\tif (!StringUtils.hasLength(person.getVoidReason()))\r\n \t\t\t\tthrow new APIException(\r\n \t\t\t\t        \"The voided bit was set to true, so a void reason is required at save time for person: \" + person);\r", "fixed": " \t\tif (person.isPersonVoided()) {\r\n\t\t\tif (!StringUtils.hasLength(person.getPersonVoidReason()))\r\n \t\t\t\tthrow new APIException(\r\n \t\t\t\t        \"The voided bit was set to true, so a void reason is required at save time for person: \" + person);\r", "sourceBeforeFix": "person.getVoidReason()", "sourceAfterFix": "person.getPersonVoidReason()"}
{"fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         HttpResponse res = (HttpResponse) ch.readInbound();\n         DecoderResult dr = res.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertFalse(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "fixed": "         HttpResponse res = (HttpResponse) ch.readInbound();\n         DecoderResult dr = res.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}
{"fixCommitSHA1": "8616612734924c0a8a9781aed94669c866b12981", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         try {\n             final String echo = localEcho.echo(message);\n             Assert.fail(\"Remote invocation on a local view \" + LocalEcho.class.getName() + \" was expected to fail\");\n        } catch (EJBException nsee) {\n             logger.trace(\"Got the expected exception on invoking on a local view, remotely\", nsee);\n         }", "fixed": "         try {\n             final String echo = localEcho.echo(message);\n             Assert.fail(\"Remote invocation on a local view \" + LocalEcho.class.getName() + \" was expected to fail\");\n        } catch (IllegalStateException nsee) {\n             logger.trace(\"Got the expected exception on invoking on a local view, remotely\", nsee);\n         }", "sourceBeforeFix": "EJBException nsee", "sourceAfterFix": "IllegalStateException nsee"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "1c6bc8ead71b0f8f2939e12cf66a8c61f9fae26e", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tprivate IntBuffer toIntBuffer (int v[], int offset, int count) {\r\n \t\tensureBufferCapacity(count << 2);\r\n\t\tfloatBuffer.clear();\r\n \t\tcom.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);\r\n \t\treturn intBuffer;\r\n \t}\r", "fixed": " \tprivate IntBuffer toIntBuffer (int v[], int offset, int count) {\r\n \t\tensureBufferCapacity(count << 2);\r\n\t\tintBuffer.clear();\r\n \t\tcom.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);\r\n \t\treturn intBuffer;\r\n \t}\r", "sourceBeforeFix": "floatBuffer.clear()", "sourceAfterFix": "intBuffer.clear()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "         octree.initArchitecture();\n     }\n    public void updateSelection(GL2 gl, GLU glu) {\n         if (vizConfig.isSelectionEnable() && currentSelectionArea != null && currentSelectionArea.isEnabled()) {\n             float[] mp = Arrays.copyOf(graphIO.getMousePosition(), 2);\n             float[] cent = currentSelectionArea.getSelectionAreaCenter();", "fixed": "         octree.initArchitecture();\n     }\n    public synchronized void updateSelection(GL2 gl, GLU glu) {\n         if (vizConfig.isSelectionEnable() && currentSelectionArea != null && currentSelectionArea.isEnabled()) {\n             float[] mp = Arrays.copyOf(graphIO.getMousePosition(), 2);\n             float[] cent = currentSelectionArea.getSelectionAreaCenter();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "425403eeed99d409a1c49ad5243a3a0bd86ed66c", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "      \"minimizeExitPoints\",\n      \"removeUnreachableCode\");\n  static final List<String> CODE_MOTION_PASSES = ImmutableList.of(\n       Compiler.CROSS_MODULE_CODE_MOTION_NAME, Compiler.CROSS_MODULE_METHOD_MOTION_NAME);\n   static final int MAX_LOOPS = 100;", "fixed": "      \"minimizeExitPoints\",\n      \"removeUnreachableCode\");\n  static final ImmutableList<String> CODE_MOTION_PASSES =\n      ImmutableList.of(\n       Compiler.CROSS_MODULE_CODE_MOTION_NAME, Compiler.CROSS_MODULE_METHOD_MOTION_NAME);\n   static final int MAX_LOOPS = 100;", "sourceBeforeFix": "List<String>", "sourceAfterFix": "ImmutableList<String>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean touchDown (int screenX, int screenY, int pointer, int button) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].touchDown(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean touchDown (int screenX, int screenY, int pointer, int button) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).touchDown(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8e168c23bde5fed98dea0141b0cdcf11a74a7454", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "                     || indentInComment < expectedMinimalIndent && isWarnComment;\n         }\n        throw new IllegalStateException();\n     }\n     private static int getLineStart(String line, final int tabWidth) {", "fixed": "                     || indentInComment < expectedMinimalIndent && isWarnComment;\n         }\n        throw new IllegalStateException(\"Comments are not consistent\");\n     }\n     private static int getLineStart(String line, final int tabWidth) {", "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Comments are not consistent\")"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "fixed": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private static void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "8c0d148cd20199c647b2550ae51068f531ba42a3", "projectName": "apache.hive", "bugType": "Change Caller in Function Call", "problem": "       }\n       node = super.visitCall(call);\n       if (node != call) {\n        node = RexUtil.simplify(rexBuilder, node);\n       }\n       return node;\n     }", "fixed": "       }\n       node = super.visitCall(call);\n       if (node != call) {\n        node = HiveRexUtil.simplify(rexBuilder, node);\n       }\n       return node;\n     }", "sourceBeforeFix": "RexUtil.simplify(rexBuilder,node)", "sourceAfterFix": "HiveRexUtil.simplify(rexBuilder,node)"}
{"fixCommitSHA1": "dce2381dc4a877fcbfb869f115152ecd44a92173", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": " public class RMNodeLabelsManager extends CommonNodeLabelsManager {\n   protected static class Queue {\n    protected Set<String> acccessibleNodeLabels;\n     protected Resource resource;\n     protected Queue() {\n      acccessibleNodeLabels =\n           Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\n       resource = Resource.newInstance(0, 0);\n     }", "fixed": " public class RMNodeLabelsManager extends CommonNodeLabelsManager {\n   protected static class Queue {\n    protected Set<String> accessibleNodeLabels;\n     protected Resource resource;\n     protected Queue() {\n      accessibleNodeLabels =\n           Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\n       resource = Resource.newInstance(0, 0);\n     }", "sourceBeforeFix": "entry.getValue().acccessibleNodeLabels", "sourceAfterFix": "entry.getValue().accessibleNodeLabels"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3fa91f277480e4089c47dba6af63c5f38a7ca5dd", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "  */\n @Internal\n public abstract class ExecutorBase implements Executor {\n\tprivate final String DEFAULT_JOB_NAME = \"Flink Exec Table Job\";\n \tprivate final StreamExecutionEnvironment executionEnvironment;\n \tprotected List<Transformation<?>> transformations = new ArrayList<>();", "fixed": "  */\n @Internal\n public abstract class ExecutorBase implements Executor {\n\tprivate static final String DEFAULT_JOB_NAME = \"Flink Exec Table Job\";\n \tprivate final StreamExecutionEnvironment executionEnvironment;\n \tprotected List<Transformation<?>> transformations = new ArrayList<>();", "sourceBeforeFix": "18", "sourceAfterFix": "26"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         return checker;\n     }\n    private String[] removeSuppressed(String[] from, String[] remove) {\n         final Collection<String> coll =\n             Lists.newArrayList(Arrays.asList(from));\n         coll.removeAll(Arrays.asList(remove));", "fixed": "         return checker;\n     }\n    private static String[] removeSuppressed(String[] from, String[] remove) {\n         final Collection<String> coll =\n             Lists.newArrayList(Arrays.asList(from));\n         coll.removeAll(Arrays.asList(remove));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "daba0256b7cf360824aebb3ff176d5937c862e46", "projectName": "openmrs.openmrs-core", "bugType": "Change Numeric Literal", "problem": " \t\texecuteDataSet(ADMIN_INITIAL_DATA_XML);\n \t\tAdministrationService as = Context.getAdministrationService();\n\t\tAssert.assertEquals(20, as.getAllGlobalProperties().size());\n \t\tas.purgeGlobalProperty(as.getGlobalPropertyObject(\"a_valid_gp_key\"));\n\t\tAssert.assertEquals(19, as.getAllGlobalProperties().size());\n \t}\n \t/**", "fixed": " \t\texecuteDataSet(ADMIN_INITIAL_DATA_XML);\n \t\tAdministrationService as = Context.getAdministrationService();\n\t\tAssert.assertEquals(21, as.getAllGlobalProperties().size());\n \t\tas.purgeGlobalProperty(as.getGlobalPropertyObject(\"a_valid_gp_key\"));\n\t\tAssert.assertEquals(20, as.getAllGlobalProperties().size());\n \t}\n \t/**", "sourceBeforeFix": "Assert.assertEquals(19,as.getAllGlobalProperties().size())", "sourceAfterFix": "Assert.assertEquals(20,as.getAllGlobalProperties().size())"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback);\n     @GET\n     @Consumes({ \"*/*\" })", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback) throws Exception;\n     @GET\n     @Consumes({ \"*/*\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "48b99e43fca1306ba54dad61bdacd4259673552b", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "     synchronized (lock) {\n       if (segmentsToLoad.contains(holder)) {\n         if ((callback != null)) {\n          currentlyProcessing.addCallback(callback);\n         }\n         return;\n       }", "fixed": "     synchronized (lock) {\n       if (segmentsToLoad.contains(holder)) {\n         if ((callback != null)) {\n          holder.addCallback(callback);\n         }\n         return;\n       }", "sourceBeforeFix": "currentlyProcessing.addCallback(callback)", "sourceAfterFix": "holder.addCallback(callback)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Wrong Function Name", "problem": "             for (CodegenProperty var : cm.vars) {\n                String jsDocType = getJSDocTypeWithBraces(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n                 if (Boolean.TRUE.equals(var.required)) {", "fixed": "             for (CodegenProperty var : cm.vars) {\n                String jsDocType = getJSDocType(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n                 if (Boolean.TRUE.equals(var.required)) {", "sourceBeforeFix": "getJSDocTypeWithBraces(operation)", "sourceAfterFix": "getJSDocType(operation)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "979ce2a33924be23a6343640ed0c038af5a33740", "projectName": "libgdx.libgdx", "bugType": "Change Caller in Function Call", "problem": " \tpublic boolean act (float delta) {\n \t\tActor actor = (targetActor != null ? targetActor : this.actor);\n \t\tif (capture)\n\t\t\ttargetActor.addCaptureListener(listener);\n \t\telse\n\t\t\ttargetActor.addListener(listener);\n \t\treturn true;\n \t}", "fixed": " \tpublic boolean act (float delta) {\n \t\tActor actor = (targetActor != null ? targetActor : this.actor);\n \t\tif (capture)\n\t\t\tactor.addCaptureListener(listener);\n \t\telse\n\t\t\tactor.addListener(listener);\n \t\treturn true;\n \t}", "sourceBeforeFix": "targetActor.addCaptureListener(listener)", "sourceAfterFix": "actor.addCaptureListener(listener)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6ee3e54020bc8b28badd689fae4cd34948f78e7a", "projectName": "yusuke.twitter4j", "bugType": "Change Numeric Literal", "problem": "     public void testRetweetMethods() throws Exception {\n         List<Status> statuses;\n        statuses = twitter1.getRetweets(18594701629l);\n         assertNotNull(TwitterObjectFactory.getRawJSON(statuses));\n         assertEquals(statuses.get(0), TwitterObjectFactory.createStatus(TwitterObjectFactory.getRawJSON(statuses.get(0))));\n         assertIsRetweet(statuses);\n        assertTrue(20 < statuses.size());\n        IDs retweeters = twitter1.getRetweeterIds(18594701629l, -1);\n         assertTrue(0 < retweeters.getIDs().length);\n     }", "fixed": "     public void testRetweetMethods() throws Exception {\n         List<Status> statuses;\n        statuses = twitter1.getRetweets(1021608606934822912L);\n         assertNotNull(TwitterObjectFactory.getRawJSON(statuses));\n         assertEquals(statuses.get(0), TwitterObjectFactory.createStatus(TwitterObjectFactory.getRawJSON(statuses.get(0))));\n         assertIsRetweet(statuses);\n        assertTrue(2 < statuses.size());\n        IDs retweeters = twitter1.getRetweeterIds(1021608606934822912L, -1);\n         assertTrue(0 < retweeters.getIDs().length);\n     }", "sourceBeforeFix": "twitter1.getRetweeterIds(18594701629l,-1)", "sourceAfterFix": "twitter1.getRetweeterIds(1021608606934822912L,-1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"rabbit\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"rabbit\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleMailStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default GoogleMailStreamEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleMailStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default GoogleMailStreamEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7eb9f2c98dd576658bf0160d2ef4720740897ab", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "         final Role roleToUpdate = roleService.load(name);\n         roleToUpdate.setName(role.name());\n        roleToUpdate.setDescription(role.description().get());\n         roleToUpdate.setPermissions(role.permissions());\n         try {\n             roleService.save(roleToUpdate);", "fixed": "         final Role roleToUpdate = roleService.load(name);\n         roleToUpdate.setName(role.name());\n        roleToUpdate.setDescription(role.description().orNull());\n         roleToUpdate.setPermissions(role.permissions());\n         try {\n             roleService.save(roleToUpdate);", "sourceBeforeFix": "role.description().get()", "sourceAfterFix": "role.description().orNull()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8c69c5f4aece3330100e4ad9d4d98887db691141", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     protected RouteBuilder createRouteBuilder() throws Exception {\n         return new RouteBuilder() {\n             public void configure() throws Exception {\n                from(\"rss:file:src/test/data/rss20.xml?splitEntries=false&consumer.delay=100\").to(\"mock:result\");\n             }\n         };\n     }", "fixed": "     protected RouteBuilder createRouteBuilder() throws Exception {\n         return new RouteBuilder() {\n             public void configure() throws Exception {\n                from(\"rss:file:src/test/data/rss20.xml?splitEntries=false\").to(\"mock:result\");\n             }\n         };\n     }", "sourceBeforeFix": "mock.expectedMessageCount(1)", "sourceAfterFix": "mock.expectedMinimumMessageCount(1)"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         };\n         verify(checkConfig,\n                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n     }\n     @Test", "fixed": "         };\n         verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5cc0714840bf8f7797a118e4bac5dabdd20e3f67", "projectName": "apache.hbase", "bugType": "Change Modifier", "problem": "    * should always approach the optimal state given enough steps.\n    */\n   @Override\n  public List<RegionPlan> balanceCluster(Map<ServerName, List<HRegionInfo>> clusterState) {\n     List<RegionPlan> plans = balanceMasterRegions(clusterState);\n     if (plans != null || clusterState == null || clusterState.size() <= 1) {\n       return plans;", "fixed": "    * should always approach the optimal state given enough steps.\n    */\n   @Override\n  public synchronized List<RegionPlan> balanceCluster(Map<ServerName,\n    List<HRegionInfo>> clusterState) {\n     List<RegionPlan> plans = balanceMasterRegions(clusterState);\n     if (plans != null || clusterState == null || clusterState.size() <= 1) {\n       return plans;", "sourceBeforeFix": "4", "sourceAfterFix": "36"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.set(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "fixed": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.get(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fBodyGeneric,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "         }\n     );\n    log.info(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n     return retVal;\n   }", "fixed": "         }\n     );\n    log.debug(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n     return retVal;\n   }", "sourceBeforeFix": "log.info(\"Performing lookup: %s --> %s\",nodeIds,retVal)", "sourceAfterFix": "log.debug(\"Performing lookup: %s --> %s\",nodeIds,retVal)"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result4\");\n        mock.expectedBodiesReceived(\"Hello World 3\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result4\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World 3\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World 2\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\")"}
{"fixCommitSHA1": "465403dcb54522a763acdab0ff7fee7c03b0f341", "projectName": "google.closure-compiler", "bugType": "Change Boolean Literal", "problem": "    * and the optimizations see the old types. We plan to switch these users to NTI-only builds\n    * and delete this option.\n    */\n  private boolean runOTIafterNTI = false;\n   /**\n* Relevant only when {@link", "fixed": "    * and the optimizations see the old types. We plan to switch these users to NTI-only builds\n    * and delete this option.\n    */\n  private boolean runOTIafterNTI = true;\n   /**\n* Relevant only when {@link", "sourceBeforeFix": "runOTIafterNTI=false", "sourceAfterFix": "runOTIafterNTI=true"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DdbStreamEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedDdbStreamEndpointBuilder advanced() {\n             return (AdvancedDdbStreamEndpointBuilder) this;\n         }", "fixed": "     \n    public interface DdbStreamEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedDdbStreamEndpointBuilder advanced() {\n             return (AdvancedDdbStreamEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "12a6f937cb623ec89e570883010340016c5493a3", "projectName": "apache.hive", "bugType": "Wrong Function Name", "problem": "     for (Map.Entry<String, ExprNodeDesc> mapEntry : reduceSinkOp.getColumnExprMap().entrySet()) {\n      if (mapEntry.getValue().isSame(source)) {\n         String columnInternalName = mapEntry.getKey();\n         if (source instanceof ExprNodeColumnDesc) {", "fixed": "     for (Map.Entry<String, ExprNodeDesc> mapEntry : reduceSinkOp.getColumnExprMap().entrySet()) {\n      if (mapEntry.getValue().equals(source)) {\n         String columnInternalName = mapEntry.getKey();\n         if (source instanceof ExprNodeColumnDesc) {", "sourceBeforeFix": "mapEntry.getValue().isSame(source)", "sourceAfterFix": "mapEntry.getValue().equals(source)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a076b497cd3ad3b559d00c145d3504441472a48b", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "     public int getDegree(Node node) {\n         view.checkUpdate();\n         AbstractNode absNode = checkNode(node);\n        int count = view.getClusteredLayerInDegree(absNode);\n         return count;\n     }", "fixed": "     public int getDegree(Node node) {\n         view.checkUpdate();\n         AbstractNode absNode = checkNode(node);\n        int count = view.getClusteredLayerDegree(absNode);\n         return count;\n     }", "sourceBeforeFix": "view.getClusteredLayerInDegree(absNode)", "sourceAfterFix": "view.getClusteredLayerDegree(absNode)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f877cc6742ba3c75739edd9debae662d834d191d", "projectName": "mybatis.mybatis-3", "bugType": "Change Identifier Used", "problem": "   Map<Integer, User<String>> getAMapOfUsers();\n   @Select(\"select id, name from users where id=1\")\n  Map<Integer, Object> getUserAsAMap();\n   @Select(\"select id, name from users\")\n  List<Map<Integer, Object>> getAListOfMaps();\n }", "fixed": "   Map<Integer, User<String>> getAMapOfUsers();\n   @Select(\"select id, name from users where id=1\")\n  Map<String, Object> getUserAsAMap();\n   @Select(\"select id, name from users\")\n  List<Map<String, Object>> getAListOfMaps();\n }", "sourceBeforeFix": "Map<Integer,Object>", "sourceAfterFix": "Map<String,Object>"}
{"fixCommitSHA1": "e9c4a734ff5160673024538f5b3ef1339c5424e7", "projectName": "thinkaurelius.titan", "bugType": "Change Identifier Used", "problem": "     @Override\n     public KeyColumnValueStore openDatabase(final String name) throws StorageException {\n        if (!stores.contains(name)) {\n             stores.putIfAbsent(name,new InMemoryKeyColumnValueStore(name));\n         }\n         KeyColumnValueStore store = stores.get(name);", "fixed": "     @Override\n     public KeyColumnValueStore openDatabase(final String name) throws StorageException {\n        if (!stores.containsKey(name)) {\n             stores.putIfAbsent(name,new InMemoryKeyColumnValueStore(name));\n         }\n         KeyColumnValueStore store = stores.get(name);", "sourceBeforeFix": "stores.contains(name)", "sourceAfterFix": "stores.containsKey(name)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ServletEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedServletEndpointBuilder advanced() {\n             return (AdvancedServletEndpointBuilder) this;\n         }", "fixed": "     \n    public interface ServletEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedServletEndpointBuilder advanced() {\n             return (AdvancedServletEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "fixed": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Sjms2EndpointBuilder\n             extends\n                 Sjms2EndpointConsumerBuilder, Sjms2EndpointProducerBuilder {\n         default AdvancedSjms2EndpointBuilder advanced() {", "fixed": "     \n    public interface Sjms2EndpointBuilder\n             extends\n                 Sjms2EndpointConsumerBuilder, Sjms2EndpointProducerBuilder {\n         default AdvancedSjms2EndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f281ead05c3ee771e976e6253685331084ac4c73", "projectName": "wildfly.wildfly", "bugType": "Change Boolean Literal", "problem": "     private static final String extensionName = \"org.jboss.as.web\";\n     static final SensitiveTargetAccessConstraintDefinition WEB_CONNECTOR_CONSTRAINT = new SensitiveTargetAccessConstraintDefinition(\n            new SensitivityClassification(SUBSYSTEM_NAME, \"web-connector\", true, false, false));\n     static final SensitiveTargetAccessConstraintDefinition WEB_VALVE_CONSTRAINT = new SensitiveTargetAccessConstraintDefinition(\n            new SensitivityClassification(SUBSYSTEM_NAME, \"web-valve\", true, false, false));\n     public WebExtension() {\n         super(extensionName, SUBSYSTEM_NAME);", "fixed": "     private static final String extensionName = \"org.jboss.as.web\";\n     static final SensitiveTargetAccessConstraintDefinition WEB_CONNECTOR_CONSTRAINT = new SensitiveTargetAccessConstraintDefinition(\n            new SensitivityClassification(SUBSYSTEM_NAME, \"web-connector\", false, false, false));\n     static final SensitiveTargetAccessConstraintDefinition WEB_VALVE_CONSTRAINT = new SensitiveTargetAccessConstraintDefinition(\n            new SensitivityClassification(SUBSYSTEM_NAME, \"web-valve\", false, false, false));\n     public WebExtension() {\n         super(extensionName, SUBSYSTEM_NAME);", "sourceBeforeFix": "new SensitivityClassification(SUBSYSTEM_NAME,\"web-valve\",true,false,false)", "sourceAfterFix": "new SensitivityClassification(SUBSYSTEM_NAME,\"web-valve\",false,false,false)"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         appendToBody.ret();\n     }\n    private void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "fixed": "         appendToBody.ret();\n     }\n    private static void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "f8d9a3b19b8a69e20c4469b541a5ae96b07e7cc8", "projectName": "druid-io.druid", "bugType": "Change Binary Operator", "problem": "         @Override\n         public long increment(long timeMillis)\n         {\n          return timeMillis - MILLIS_IN;\n         }\n         @Override", "fixed": "         @Override\n         public long increment(long timeMillis)\n         {\n          return timeMillis + MILLIS_IN;\n         }\n         @Override", "sourceBeforeFix": "timeMillis - MILLIS_IN", "sourceAfterFix": "timeMillis + MILLIS_IN"}
{"fixCommitSHA1": "a18c3d7297c81147d0fdf619ba0d4a85fc408726", "projectName": "thinkaurelius.titan", "bugType": "Less Specific If", "problem": "                 throw new TemporaryStorageException(ee);\n             }\n} else {\n            if (cf.getCompressionType() == null) {\n                 try {\n                     adm.disableTable(tableName);", "fixed": "                 throw new TemporaryStorageException(ee);\n             }\n} else {\n            if (cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE) {\n                 try {\n                     adm.disableTable(tableName);", "sourceBeforeFix": "cf.getCompressionType() == null", "sourceAfterFix": "cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n        return Float.valueOf(value.toString());\n     }\n     @Override", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n        return Float.parseFloat(value.toString());\n     }\n     @Override", "sourceBeforeFix": "Byte.valueOf(value.toString())", "sourceAfterFix": "Byte.parseByte(value.toString())"}
{"fixCommitSHA1": "715113fb25e3eaa18df0fdaf2df54211bf691fbe", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "  */\r\n public class DefaultManagementMBeanAssembler implements ManagementMBeanAssembler {\r\n  private static final Logger LOG = LoggerFactory.getLogger(DefaultManagementAgent.class);\r\n   protected final MBeanInfoAssembler assembler;\r", "fixed": "  */\r\n public class DefaultManagementMBeanAssembler implements ManagementMBeanAssembler {\r\n  private static final Logger LOG = LoggerFactory.getLogger(DefaultManagementMBeanAssembler.class);\r\n   protected final MBeanInfoAssembler assembler;\r", "sourceBeforeFix": "DefaultManagementAgent.class", "sourceAfterFix": "DefaultManagementMBeanAssembler.class"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMiloClientEndpointBuilder\n             extends\n                 AdvancedMiloClientEndpointConsumerBuilder, AdvancedMiloClientEndpointProducerBuilder {\n         default MiloClientEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMiloClientEndpointBuilder\n             extends\n                 AdvancedMiloClientEndpointConsumerBuilder, AdvancedMiloClientEndpointProducerBuilder {\n         default MiloClientEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "38ea061af4c43cfed21ad2733528374f61edf9eb", "projectName": "naver.pinpoint", "bugType": "Same Function More Args", "problem": "     @Override\n     public NodeHistogram createNodeHistogram(Application application, Range range) {\n         List<ResponseTime> responseTimes = responseHistogramBuilder.getResponseTimeList(application);\n        final NodeHistogram nodeHistogram = new NodeHistogram(application, range);\n         return nodeHistogram;\n     }\n }", "fixed": "     @Override\n     public NodeHistogram createNodeHistogram(Application application, Range range) {\n         List<ResponseTime> responseTimes = responseHistogramBuilder.getResponseTimeList(application);\n        final NodeHistogram nodeHistogram = new NodeHistogram(application, range, responseTimes);\n         return nodeHistogram;\n     }\n }", "sourceBeforeFix": "new NodeHistogram(application,range)", "sourceAfterFix": "new NodeHistogram(application,range,responseTimes)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n \t/**\n \t * Get a listing or important variables used in openmrs", "fixed": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t/**\n \t * Get a listing or important variables used in openmrs", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArraysEXT(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "fixed": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArrays(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "sourceBeforeFix": "GL.glPolygonOffsetEXT(factor,units)", "sourceAfterFix": "GL.glPolygonOffset(factor,units)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Error_Response_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Error_Response_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xff", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "71775a876d1b049c7dfc49ffd35eff0d3f066691", "projectName": "perwendel.spark", "bugType": "Change Modifier", "problem": "      *\n      * @param folder the location\n      */\n    public static void configureExternalStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n         if (!externalStaticResourcesSet) {", "fixed": "      *\n      * @param folder the location\n      */\n    public synchronized static void configureExternalStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n         if (!externalStaticResourcesSet) {", "sourceBeforeFix": "9", "sourceAfterFix": "41"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b102d67173da3ca972abf7fcd0a2f779ef9870a3", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "   public Optional<ResourceManagementScheduler> getResourceManagementScheduler()\n   {\n     if (leading) {\n      return Optional.of(resourceManagementScheduler);\n     } else {\n       return Optional.absent();\n     }", "fixed": "   public Optional<ResourceManagementScheduler> getResourceManagementScheduler()\n   {\n     if (leading) {\n      return Optional.fromNullable(resourceManagementScheduler);\n     } else {\n       return Optional.absent();\n     }", "sourceBeforeFix": "Optional.of(resourceManagementScheduler)", "sourceAfterFix": "Optional.fromNullable(resourceManagementScheduler)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cbb7f2cf26daf213a6265a99fc27980bfcf4ff89", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     type = routeContext.getDataFormat(ref);\n                 }\n                 if (type != null) {\n                    dataFormat = type.createDataFormat(routeContext);\n                 }\n             }", "fixed": "                     type = routeContext.getDataFormat(ref);\n                 }\n                 if (type != null) {\n                    dataFormat = type.getDataFormat(routeContext);\n                 }\n             }", "sourceBeforeFix": "type.createDataFormat(routeContext)", "sourceAfterFix": "type.getDataFormat(routeContext)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId() throws APIException;\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "fixed": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId();\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5221c15e183cb7029a305766d137d909f77e8941", "projectName": "google.guice", "bugType": "Change Identifier Used", "problem": "     this.source = checkNotNull(source, \"source\");\n     this.classMatcher = checkNotNull(classMatcher, \"classMatcher\");\n     this.methodMatcher = checkNotNull(methodMatcher, \"methodMatcher\");\n    this.interceptors = ImmutableList.of(interceptors);\n   }\n   public Object getSource() {", "fixed": "     this.source = checkNotNull(source, \"source\");\n     this.classMatcher = checkNotNull(classMatcher, \"classMatcher\");\n     this.methodMatcher = checkNotNull(methodMatcher, \"methodMatcher\");\n    this.interceptors = ImmutableList.copyOf(interceptors);\n   }\n   public Object getSource() {", "sourceBeforeFix": "ImmutableList.of(interceptors)", "sourceAfterFix": "ImmutableList.copyOf(interceptors)"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "ca25cb3353b84dbd7cb4266835ebfa771a51c1da", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "     ILogger logger;\n     String group;\n     int port;\n    private boolean stop;\n     public MulticastDiscoverySender(DiscoveryNode discoveryNode, MulticastSocket multicastSocket,\n                                     ILogger logger, String group, int port)", "fixed": "     ILogger logger;\n     String group;\n     int port;\n    private volatile boolean stop;\n     public MulticastDiscoverySender(DiscoveryNode discoveryNode, MulticastSocket multicastSocket,\n                                     ILogger logger, String group, int port)", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)", "sourceAfterFix": "LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)"}
{"fixCommitSHA1": "75c681be8612e7176baf439d83b78ec9e81d1b58", "projectName": "Alluxio.alluxio", "bugType": "Change Unary Operator\t", "problem": "                       dep.addLostFile(tFile.getId());\n                       LOG.info(\"File \" + tFile.getId() + \" got lost from worker \" + worker.getId() +\n                           \" . Trying to recompute it using dependency \" + dep.ID);\n                      if (getPath(tFile).startsWith(MASTER_CONF.TEMPORARY_FOLDER)) {\n                         mMustRecomputeDependencies.add(depId);\n                       }\n                     }", "fixed": "                       dep.addLostFile(tFile.getId());\n                       LOG.info(\"File \" + tFile.getId() + \" got lost from worker \" + worker.getId() +\n                           \" . Trying to recompute it using dependency \" + dep.ID);\n                      if (!getPath(tFile).startsWith(MASTER_CONF.TEMPORARY_FOLDER)) {\n                         mMustRecomputeDependencies.add(depId);\n                       }\n                     }", "sourceBeforeFix": "getPath(tFile).startsWith(MASTER_CONF.TEMPORARY_FOLDER)", "sourceAfterFix": "!getPath(tFile).startsWith(MASTER_CONF.TEMPORARY_FOLDER)"}
{"fixCommitSHA1": "225c805e0416ad90aa2d71a978de8be697949ecf", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             if (!file.exists()) {\n                 return null;\n             }\n            return new VFSEntryResource(file, root.toURL());\n         } catch (MalformedURLException e) {\n             return null;", "fixed": "             if (!file.exists()) {\n                 return null;\n             }\n            return new VFSEntryResource(file, file.toURL());\n         } catch (MalformedURLException e) {\n             return null;", "sourceBeforeFix": "root.toURL()", "sourceAfterFix": "file.toURL()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FacebookEndpointBuilder\n             extends\n                 FacebookEndpointConsumerBuilder, FacebookEndpointProducerBuilder {\n         default AdvancedFacebookEndpointBuilder advanced() {", "fixed": "     \n    public interface FacebookEndpointBuilder\n             extends\n                 FacebookEndpointConsumerBuilder, FacebookEndpointProducerBuilder {\n         default AdvancedFacebookEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJpaEndpointBuilder\n             extends\n                 AdvancedJpaEndpointConsumerBuilder, AdvancedJpaEndpointProducerBuilder {\n         default JpaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJpaEndpointBuilder\n             extends\n                 AdvancedJpaEndpointConsumerBuilder, AdvancedJpaEndpointProducerBuilder {\n         default JpaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6d0b8df8802f95880b33ad6823598b01175e97f6", "projectName": "apache.hadoop", "bugType": "Change Boolean Literal", "problem": "     Collection<URI> dirsToFormat = FSNamesystem.getNamespaceDirs(conf);\n     List<URI> editDirsToFormat = \n                  FSNamesystem.getNamespaceEditsDirs(conf);\n    if (!confirmFormat(dirsToFormat, isConfirmationNeeded, true)) {\nreturn true;\n     }", "fixed": "     Collection<URI> dirsToFormat = FSNamesystem.getNamespaceDirs(conf);\n     List<URI> editDirsToFormat = \n                  FSNamesystem.getNamespaceEditsDirs(conf);\n    if (!confirmFormat(dirsToFormat, force, true)) {\nreturn true;\n     }", "sourceBeforeFix": "format(conf,true)", "sourceAfterFix": "format(conf,false)"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    */\n   public List<DependencyInfo> parseFileReader(String filePath, Reader reader) {\n     depInfos = Lists.newArrayList();\n    logger.info(\"Parsing Dep: \" + filePath);\n     doParse(filePath, reader);\n     return depInfos;\n   }", "fixed": "    */\n   public List<DependencyInfo> parseFileReader(String filePath, Reader reader) {\n     depInfos = Lists.newArrayList();\n    logger.fine(\"Parsing Dep: \" + filePath);\n     doParse(filePath, reader);\n     return depInfos;\n   }", "sourceBeforeFix": "logger.info(\"Parsing Dep: \" + filePath)", "sourceAfterFix": "logger.fine(\"Parsing Dep: \" + filePath)"}
{"fixCommitSHA1": "98390cf27b0ce41447e0a104a8963b2cfdc20795", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \tpublic void add (char value1, char value2, char value3, char value4) {\r\n \t\tchar[] items = this.items;\r\n\t\tif (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.75f)));\r\n \t\titems[size] = value1;\r\n \t\titems[size + 1] = value2;\r\n \t\titems[size + 2] = value3;\r", "fixed": " \tpublic void add (char value1, char value2, char value3, char value4) {\r\n \t\tchar[] items = this.items;\r\nif (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.8f)));\n \t\titems[size] = value1;\r\n \t\titems[size + 1] = value2;\r\n \t\titems[size + 2] = value3;\r", "sourceBeforeFix": "size * 1.75f", "sourceAfterFix": "size * 1.8f"}
{"fixCommitSHA1": "fe6116a7119b1ee8ca55dca247b689ca173aeb53", "projectName": "apache.storm", "bugType": "Change Unary Operator\t", "problem": "      * @return nullToZero\n      */\n     private static Long nullToZero(Long value) {\n        return Objects.isNull(value) ? value : 0;\n     }\n     /**", "fixed": "      * @return nullToZero\n      */\n     private static Long nullToZero(Long value) {\n        return !Objects.isNull(value) ? value : 0;\n     }\n     /**", "sourceBeforeFix": "Objects.isNull(value)", "sourceAfterFix": "!Objects.isNull(value)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10950-10974 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15804", "sourceAfterFix": "id=10804"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bc53fc00817adf77d0e25d07ae0aaea0f16dddd7", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n    Preconditions.checkNotNull(manager);\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());", "fixed": "    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n    Preconditions.checkNotNull(manager,\"manager\");\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "1f8fb8ad37dbd4cb4be77d827ba19e857bd451d1", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": "               log.debug(\"Optimistic locking exception : \" + exception);\n             } else {\n              log.debug(\"Error while closing command context\", exception);\n             }\n             transactionContext.rollback();", "fixed": "               log.debug(\"Optimistic locking exception : \" + exception);\n             } else {\n              log.error(\"Error while closing command context\", exception);\n             }\n             transactionContext.rollback();", "sourceBeforeFix": "log.debug(\"Error while closing command context\",exception)", "sourceAfterFix": "log.error(\"Error while closing command context\",exception)"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {", "sourceBeforeFix": "context.var(\"long\")", "sourceAfterFix": "context.var(\"long\",2)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedBrowseEndpointBuilder\n             extends\n                 AdvancedBrowseEndpointConsumerBuilder, AdvancedBrowseEndpointProducerBuilder {\n         default BrowseEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedBrowseEndpointBuilder\n             extends\n                 AdvancedBrowseEndpointConsumerBuilder, AdvancedBrowseEndpointProducerBuilder {\n         default BrowseEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4ba8a44239804bb05c385384400f52ab978a1070", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "       try {\n         inputRow = parser.parse(value.toString());\n       }\n      catch (IllegalArgumentException e) {\n         if (config.isIgnoreInvalidRows()) {\n           context.getCounter(HadoopDruidIndexerConfig.IndexJobCounters.INVALID_ROW_COUNTER).increment(1);\nreturn;", "fixed": "       try {\n         inputRow = parser.parse(value.toString());\n       }\n      catch (Exception e) {\n         if (config.isIgnoreInvalidRows()) {\n           context.getCounter(HadoopDruidIndexerConfig.IndexJobCounters.INVALID_ROW_COUNTER).increment(1);\nreturn;", "sourceBeforeFix": "IllegalArgumentException e", "sourceAfterFix": "Exception e"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesJobEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesJobEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KubernetesJobEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesJobEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "fixed": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "sourceBeforeFix": "logger.debug(\"rapidRefreshFuture scheduleing for {} millis\",millis)", "sourceAfterFix": "logger.trace(\"rapidRefreshFuture scheduleing for {} millis\",millis)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dcfb1ed2788a4c497bc251ab777c2d04652fa20c", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "       }\n       intervals.add(new Interval(timeList.get(0).getValue().getMinTime().getMillis(),\n              timeList.get(0).getValue().getMaxTime().getMillis()));\n     } else {\n       intervals.addAll(query.getIntervals());\n     }", "fixed": "       }\n       intervals.add(new Interval(timeList.get(0).getValue().getMinTime().getMillis(),\n              timeList.get(0).getValue().getMaxTime().getMillis(), ISOChronology.getInstanceUTC()));\n     } else {\n       intervals.addAll(query.getIntervals());\n     }", "sourceBeforeFix": "new Interval(startTime,endTime)", "sourceAfterFix": "new Interval(startTime,endTime,ISOChronology.getInstanceUTC())"}
{"fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "         }\n     );\n    log.info(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n     return retVal;\n   }", "fixed": "         }\n     );\n    log.debug(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n     return retVal;\n   }", "sourceBeforeFix": "log.info(\"Performing lookup: %s --> %s\",nodeIds,retVal)", "sourceAfterFix": "log.debug(\"Performing lookup: %s --> %s\",nodeIds,retVal)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "fixed": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "3b8080d4f13c4e36a27cf0a35266fe673b228a63", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         meta.setContentMD5(new String(Base64.encode(mHash.digest())));\n       }\n       meta.setContentLength(mFile.length());\n      meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM);", "fixed": "         meta.setContentMD5(new String(Base64.encode(mHash.digest())));\n       }\n       meta.setContentLength(mFile.length());\n      meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM);", "sourceBeforeFix": "meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)", "sourceAfterFix": "meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)"}
{"fixCommitSHA1": "c4ffe721c786c54074a6913cb889d46e83bb32c1", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t\tthrows BeansException {\n \t\t\tif (bean.getClass().isAssignableFrom(JmsTemplate.class)) {\n \t\t\t\tJmsTemplate jmsTemplate = (JmsTemplate) bean;\n\t\t\t\tjmsTemplate.setPubSubDomain(false);\n \t\t\t}\n \t\t\treturn bean;\n \t\t}", "fixed": " \t\t\t\tthrows BeansException {\n \t\t\tif (bean.getClass().isAssignableFrom(JmsTemplate.class)) {\n \t\t\t\tJmsTemplate jmsTemplate = (JmsTemplate) bean;\n\t\t\t\tjmsTemplate.setPubSubDomain(true);\n \t\t\t}\n \t\t\treturn bean;\n \t\t}", "sourceBeforeFix": "assertTrue(jmsTemplate.isPubSubDomain())", "sourceAfterFix": "assertFalse(jmsTemplate.isPubSubDomain())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b8c3e8445524a78fda3e7823893a4ef8415d7fa3", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "                     if (name.startsWith(normalizedPrefix)) {\n                         String subName = name.substring(normalizedPrefix.length());\n                         String value = propertyResolver.getProperty(name);\n                        subProperties.put(subName, value);\n                     }\n                 }\n             }", "fixed": "                     if (name.startsWith(normalizedPrefix)) {\n                         String subName = name.substring(normalizedPrefix.length());\n                         String value = propertyResolver.getProperty(name);\n                        subProperties.putIfAbsent(subName, value);\n                     }\n                 }\n             }", "sourceBeforeFix": "subProperties.put(subName,value)", "sourceAfterFix": "subProperties.putIfAbsent(subName,value)"}
{"fixCommitSHA1": "48b99e43fca1306ba54dad61bdacd4259673552b", "projectName": "druid-io.druid", "bugType": "Change Caller in Function Call", "problem": "     synchronized (lock) {\n       if (segmentsToDrop.contains(holder)) {\n         if (callback != null) {\n          currentlyProcessing.addCallback(callback);\n         }\n         return;\n       }", "fixed": "     synchronized (lock) {\n       if (segmentsToDrop.contains(holder)) {\n         if (callback != null) {\n          holder.addCallback(callback);\n         }\n         return;\n       }", "sourceBeforeFix": "currentlyProcessing.addCallback(callback)", "sourceAfterFix": "holder.addCallback(callback)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result4\");\n        mock.expectedBodiesReceived(\"Hello World 3\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result4\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World 3\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "fixed": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomixQueueEndpointBuilder\n             extends\n                 AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {\n         default AtomixQueueEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomixQueueEndpointBuilder\n             extends\n                 AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {\n         default AtomixQueueEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4031a54f71a1df311b0b9ab24640297e0d526bfe", "projectName": "google.closure-compiler", "bugType": "Same Function Less Args", "problem": "   public void testVarReferenceInExterns() {\n     testSame(\"asdf;\", \"var asdf;\",\n        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR, true);\n   }\n   public void testCallInExterns() {\n     testSame(\"yz();\", \"function yz() {}\",\n        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR, true);\n   }\n   public void testPropReferenceInExterns1() {", "fixed": "   public void testVarReferenceInExterns() {\n     testSame(\"asdf;\", \"var asdf;\",\n        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);\n   }\n   public void testCallInExterns() {\n     testSame(\"yz();\", \"function yz() {}\",\n        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);\n   }\n   public void testPropReferenceInExterns1() {", "sourceBeforeFix": "testSame(\"yz();\",\"function yz() {}\",VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,true)", "sourceAfterFix": "testSame(\"yz();\",\"function yz() {}\",VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR)"}
{"fixCommitSHA1": "14eade7f6e21e560a08de348504584cba5e94c94", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     public static Archive<?> deployment0() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(), \"web.xml\");\n         System.out.println(war.toString(true));\n         return war;\n     }", "fixed": "     public static Archive<?> deployment0() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.setWebXML(ClusteredWebTestCase.class.getPackage(), \"web.xml\");\n         System.out.println(war.toString(true));\n         return war;\n     }", "sourceBeforeFix": "war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),\"web.xml\")", "sourceAfterFix": "war.setWebXML(ClusteredWebTestCase.class.getPackage(),\"web.xml\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformiv(program,location,params)"}
{"fixCommitSHA1": "8b0fec4451e8147bbe5bdbf29d235744c9aca01a", "projectName": "gephi.gephi", "bugType": "Change Binary Operator", "problem": "             positionKey2E.setAttribute(\"attr.type\", \"float\");\n             positionKey2E.setAttribute(\"for\", \"node\");\n             root.appendChild(positionKey2E);\n            if (minZ != 0f && maxZ != 0f) {\n                 Element positionKey3E = document.createElement(\"key\");\n                 positionKey3E.setAttribute(\"id\", \"z\");\n                 positionKey3E.setAttribute(\"attr.name\", \"z\");", "fixed": "             positionKey2E.setAttribute(\"attr.type\", \"float\");\n             positionKey2E.setAttribute(\"for\", \"node\");\n             root.appendChild(positionKey2E);\n            if (minZ != 0f || maxZ != 0f) {\n                 Element positionKey3E = document.createElement(\"key\");\n                 positionKey3E.setAttribute(\"id\", \"z\");\n                 positionKey3E.setAttribute(\"attr.name\", \"z\");", "sourceBeforeFix": "minZ != 0f && maxZ != 0f", "sourceAfterFix": "minZ != 0f || maxZ != 0f"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fcea9dfeb6b2e12cb04602baac67b3a1c3cb58c9", "projectName": "wildfly.wildfly", "bugType": "Change Boolean Literal", "problem": "     SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create(\"encoding\", ModelType.STRING, true).build();\n    SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create(\"file\", ModelType.OBJECT, true).\n             setCorrector(FileCorrector.INSTANCE).\n             setValidator(new FileValidator()).\n             build();", "fixed": "     SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create(\"encoding\", ModelType.STRING, true).build();\n    SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create(\"file\", ModelType.OBJECT, false).\n             setCorrector(FileCorrector.INSTANCE).\n             setValidator(new FileValidator()).\n             build();", "sourceBeforeFix": "EnumValidator.create(Target.class,false,false)", "sourceAfterFix": "EnumValidator.create(Target.class,true,false)"}
{"fixCommitSHA1": "849b3ba2b1282a89d8cf60a10891ea11a9e16bb4", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "                            HttpServletRequest request,\n                            HttpServletResponse response) throws IOException, ServletException {\n             if (\"GET\".equalsIgnoreCase(request.getMethod())) {\n                response.addHeader(\"target\", r.getUri().toString());\n                 response.setStatus(HttpServletResponse.SC_OK);\n} else {\n                 response.sendError(HttpServletResponse.SC_FORBIDDEN);", "fixed": "                            HttpServletRequest request,\n                            HttpServletResponse response) throws IOException, ServletException {\n             if (\"GET\".equalsIgnoreCase(request.getMethod())) {\n                response.addHeader(\"target\", r.getUri().getPath());\n                 response.setStatus(HttpServletResponse.SC_OK);\n} else {\n                 response.sendError(HttpServletResponse.SC_FORBIDDEN);", "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}
{"fixCommitSHA1": "2763f44d32286938fdd6c5afd58d4a69bc8bce8f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic void glGenBuffers (int n, int[] buffers, int offset) {\r\n \t\tfor (int i = offset; i < offset + n; i++)\r\n\t\t\tbuffers[offset] = GL15.glGenBuffers();\r\n \t}\r\n \tpublic void glGenBuffers (int n, IntBuffer buffers) {\r", "fixed": " \tpublic void glGenBuffers (int n, int[] buffers, int offset) {\r\n \t\tfor (int i = offset; i < offset + n; i++)\r\n\t\t\tbuffers[i] = GL15.glGenBuffers();\r\n \t}\r\n \tpublic void glGenBuffers (int n, IntBuffer buffers) {\r", "sourceBeforeFix": "buffers[offset]", "sourceAfterFix": "buffers[i]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": "     \t\t}\n     \t\trecvQueue.add(recvMessage);\n\t\t\tlogger.trace(\"Receive queue ADD: Length={}\", recvQueue.size());\n         }\n \t\t/**", "fixed": "     \t\t}\n     \t\trecvQueue.add(recvMessage);\n\t\t\tlogger.debug(\"Receive queue ADD: Length={}\", recvQueue.size());\n         }\n \t\t/**", "sourceBeforeFix": "logger.trace(\"Receive queue ADD: Length={}\",recvQueue.size())", "sourceAfterFix": "logger.debug(\"Receive queue ADD: Length={}\",recvQueue.size())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleCalendarEndpointBuilder\n             extends\n                 AdvancedGoogleCalendarEndpointConsumerBuilder, AdvancedGoogleCalendarEndpointProducerBuilder {\n         default GoogleCalendarEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleCalendarEndpointBuilder\n             extends\n                 AdvancedGoogleCalendarEndpointConsumerBuilder, AdvancedGoogleCalendarEndpointProducerBuilder {\n         default GoogleCalendarEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2918286bf4a010c9ac8eadffb958ff10fb41ad62", "projectName": "junit-team.junit", "bugType": "Change Identifier Used", "problem": "  * @since 4.5\n  */\n public class BlockJUnit4ClassRunner extends ParentRunner<FrameworkMethod> {\n    private ConcurrentHashMap<FrameworkMethod, Description> fMethodDescriptions = new ConcurrentHashMap<FrameworkMethod, Description>();\n     /**\n      * Creates a BlockJUnit4ClassRunner to run {@code klass}\n      *", "fixed": "  * @since 4.5\n  */\n public class BlockJUnit4ClassRunner extends ParentRunner<FrameworkMethod> {\n    private final ConcurrentHashMap<FrameworkMethod, Description> fMethodDescriptions = new ConcurrentHashMap<FrameworkMethod, Description>();\n     /**\n      * Creates a BlockJUnit4ClassRunner to run {@code klass}\n      *", "sourceBeforeFix": "fMethodDescriptions.put(method,description)", "sourceAfterFix": "fMethodDescriptions.putIfAbsent(method,description)"}
{"fixCommitSHA1": "713759b4f55e6bdccb6cd43ea0ad3e202c3440b2", "projectName": "google.closure-compiler", "bugType": "Same Function More Args", "problem": "   static final DiagnosticType REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME =\n       DiagnosticType.disabled(\n           \"JSC_REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME\",\n          \"Reference fully qualified import name ''{0}''. Please use the short name instead.\");\n   static final DiagnosticType REQUIRE_NOT_AT_TOP_LEVEL =\n       DiagnosticType.error(", "fixed": "   static final DiagnosticType REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME =\n       DiagnosticType.disabled(\n           \"JSC_REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME\",\n          \"Reference to fully qualified import name ''{0}''. Please use the short name instead.\");\n   static final DiagnosticType REQUIRE_NOT_AT_TOP_LEVEL =\n       DiagnosticType.error(", "sourceBeforeFix": "t.report(n,REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME)", "sourceAfterFix": "t.report(n,REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME,n.getQualifiedName())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GuavaEventBusEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGuavaEventBusEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GuavaEventBusEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGuavaEventBusEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "         errors.add(formatDetailedMessage(message, sourceName, line));\n     }\n    private String formatDetailedMessage(\n         String message, String sourceName, int lineNumber) {\n       String details = message;\n       if (sourceName == null || lineNumber <= 0) {", "fixed": "         errors.add(formatDetailedMessage(message, sourceName, line));\n     }\n    private static String formatDetailedMessage(\n         String message, String sourceName, int lineNumber) {\n       String details = message;\n       if (sourceName == null || lineNumber <= 0) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "06318999148f2e755fc1df25a6786a862e194e1c", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "                 String location = response.getHeader(HttpHeaders.Names.LOCATION);\n                 URI uri = AsyncHttpProviderUtils.getRedirectUri(future.getURI(), location);\n                 boolean stripQueryString = config.isRemoveQueryParamOnRedirect();\n                if (!uri.toString().equalsIgnoreCase(future.getURI().toString())) {\n                     final RequestBuilder nBuilder = stripQueryString ?\n                             new RequestBuilder(future.getRequest()).setQueryParameters(null)\n                             : new RequestBuilder(future.getRequest());", "fixed": "                 String location = response.getHeader(HttpHeaders.Names.LOCATION);\n                 URI uri = AsyncHttpProviderUtils.getRedirectUri(future.getURI(), location);\n                 boolean stripQueryString = config.isRemoveQueryParamOnRedirect();\n                if (!uri.toString().equals(future.getURI().toString())) {\n                     final RequestBuilder nBuilder = stripQueryString ?\n                             new RequestBuilder(future.getRequest()).setQueryParameters(null)\n                             : new RequestBuilder(future.getRequest());", "sourceBeforeFix": "uri.toString().equalsIgnoreCase(future.getURI().toString())", "sourceAfterFix": "uri.toString().equals(future.getURI().toString())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "fixed": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,externsRoot)", "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,externsRoot)"}
{"fixCommitSHA1": "2bbc1368b233f630f6acbf6d6c8d52ec5f1d1772", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         setProperties(configuration, parameters);\n        return new ChronicleEngineEnpoint(uri, this, configuration);\n     }\n }", "fixed": "         setProperties(configuration, parameters);\n        return new ChronicleEngineEndpoint(uri, this, configuration);\n     }\n }", "sourceBeforeFix": "ChronicleEngineEnpoint.class", "sourceAfterFix": "ChronicleEngineEndpoint.class"}
{"fixCommitSHA1": "34c2a9bfd05bed467b523b0be9a311fa37d34d21", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function Less Args", "problem": "                 if (clusterType.equals(\"jgroups\")){\n                     event.getAtmosphereConfig().getServletContext().log(\"JGroupsFilter enabled\");\n                     bc.getBroadcasterConfig().addFilter(\n                            new JGroupsFilter(bc, event.getAtmosphereConfig().getWebServerName()));\n                 }\n             }", "fixed": "                 if (clusterType.equals(\"jgroups\")){\n                     event.getAtmosphereConfig().getServletContext().log(\"JGroupsFilter enabled\");\n                     bc.getBroadcasterConfig().addFilter(\n                            new JGroupsFilter(bc));\n                 }\n             }", "sourceBeforeFix": "new JGroupsFilter(bc,event.getAtmosphereConfig().getWebServerName())", "sourceAfterFix": "new JGroupsFilter(bc)"}
{"fixCommitSHA1": "d76ba8118cca9f2f1c4f0e89e2dd15a9db02f7e8", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\t\t\t\ty = (int)event.getY(pointerIndex);\r\n \t\t\t\t\trealPointerIndex = input.lookUpPointerIndex(pointerId);\r\n \t\t\t\t\tif (realPointerIndex == -1) continue;\r\n\t\t\t\t\tif (realPointerIndex > AndroidInput.NUM_TOUCHES) break;\r\n \t\t\t\t\tpostTouchEvent(input, TouchEvent.TOUCH_DRAGGED, x, y, realPointerIndex, timeStamp);\r\n \t\t\t\t\tinput.deltaX[realPointerIndex] = x - input.touchX[realPointerIndex];\r\n \t\t\t\t\tinput.deltaY[realPointerIndex] = y - input.touchY[realPointerIndex];\r", "fixed": " \t\t\t\t\ty = (int)event.getY(pointerIndex);\r\n \t\t\t\t\trealPointerIndex = input.lookUpPointerIndex(pointerId);\r\n \t\t\t\t\tif (realPointerIndex == -1) continue;\r\n\t\t\t\t\tif (realPointerIndex >= AndroidInput.NUM_TOUCHES) break;\r\n \t\t\t\t\tpostTouchEvent(input, TouchEvent.TOUCH_DRAGGED, x, y, realPointerIndex, timeStamp);\r\n \t\t\t\t\tinput.deltaX[realPointerIndex] = x - input.touchX[realPointerIndex];\r\n \t\t\t\t\tinput.deltaY[realPointerIndex] = y - input.touchY[realPointerIndex];\r", "sourceBeforeFix": "realPointerIndex > AndroidInput.NUM_TOUCHES", "sourceAfterFix": "realPointerIndex >= AndroidInput.NUM_TOUCHES"}
{"fixCommitSHA1": "26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getPath() == null && that.getPath() != null) {\n             return false;\n        } else if (that.getPath() == null) {\n             return false;\n         }\n         if (!getPath().equals(that.getPath())) {", "fixed": "         if (getPath() == null && that.getPath() != null) {\n             return false;\n        } else if (that.getPath() == null && getPath() != null) {\n             return false;\n         }\n         if (!getPath().equals(that.getPath())) {", "sourceBeforeFix": "c.getDomain() == null", "sourceAfterFix": "c.getDomain() == null && getDomain() != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "75fccf13c0a0323179f37083f4249f8a4be38d85", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "                 thread.shutdown();\n             }\n             synchronized (ticket) {\n                ticket.notify();\n             }\n         }\n     }", "fixed": "                 thread.shutdown();\n             }\n             synchronized (ticket) {\n                ticket.notifyAll();\n             }\n         }\n     }", "sourceBeforeFix": "ticket.notify()", "sourceAfterFix": "ticket.notifyAll()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "885bfcae0994d0b56d6978dc7482f71be04cfe3b", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     PosixFileAttributeView view =\n         Files.getFileAttributeView(Paths.get(path), PosixFileAttributeView.class,\n             LinkOption.NOFOLLOW_LINKS);\n    UserPrincipal userPrincipal = lookupService.lookupPrincipalByGroupName(user);\n     view.setOwner(userPrincipal);\n   }", "fixed": "     PosixFileAttributeView view =\n         Files.getFileAttributeView(Paths.get(path), PosixFileAttributeView.class,\n             LinkOption.NOFOLLOW_LINKS);\n    UserPrincipal userPrincipal = lookupService.lookupPrincipalByName(user);\n     view.setOwner(userPrincipal);\n   }", "sourceBeforeFix": "lookupService.lookupPrincipalByGroupName(user)", "sourceAfterFix": "lookupService.lookupPrincipalByName(user)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MongoDbEndpointBuilder\n             extends\n                 MongoDbEndpointConsumerBuilder, MongoDbEndpointProducerBuilder {\n         default AdvancedMongoDbEndpointBuilder advanced() {", "fixed": "     \n    public interface MongoDbEndpointBuilder\n             extends\n                 MongoDbEndpointConsumerBuilder, MongoDbEndpointProducerBuilder {\n         default AdvancedMongoDbEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dea7ef0e0aae5ba4aef9d104cd10af986be9fc53", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         private String name;\n         private String queryString;\n        public MyHttpProducer(HttpEndpoint endpoint, String name, String queryString) {\n             super(endpoint);\n             this.name = name;\n             this.queryString = queryString;", "fixed": "         private String name;\n         private String queryString;\n        MyHttpProducer(HttpEndpoint endpoint, String name, String queryString) {\n             super(endpoint);\n             this.name = name;\n             this.queryString = queryString;", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n                mapConfig.setTimeToLiveSeconds(Integer.valueOf(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {", "fixed": "             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n                mapConfig.setTimeToLiveSeconds(Integer.parseInt(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {", "sourceBeforeFix": "Integer.valueOf(sessionTTL)", "sourceAfterFix": "Integer.parseInt(sessionTTL)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "46125686874f5b69bcdb6f4c9bef3f900a7057c6", "projectName": "netty.netty", "bugType": "Change Numeric Literal", "problem": "                         processSelectedKeys(selector.selectedKeys());\n                     }\n                     long currentTimeNanos = System.nanoTime();\n                    if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) {\n                         lastConnectTimeoutCheckTimeNanos = currentTimeNanos;\n                         processConnectTimeout(selector.keys(), currentTimeNanos);\n                     }", "fixed": "                         processSelectedKeys(selector.selectedKeys());\n                     }\n                     long currentTimeNanos = System.nanoTime();\n                    if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 10 * 1000000L) {\n                         lastConnectTimeoutCheckTimeNanos = currentTimeNanos;\n                         processConnectTimeout(selector.keys(), currentTimeNanos);\n                     }", "sourceBeforeFix": "500 * 1000000L", "sourceAfterFix": "10 * 1000000L"}
{"fixCommitSHA1": "59c498e520c50c99b06affb6b2ff96959ae9744e", "projectName": "naver.pinpoint", "bugType": "Wrong Function Name", "problem": "             }\n         }\n         if (logger.isInfoEnabled()) {\n            logger.debug(\"defineClass pluginClass:{} cl:{}\", className, classLoader);\n         }\n         final byte[] bytes = ct.toBytecode();\n         return (Class<?>)DEFINE_CLASS.invoke(classLoader, ct.getName(), bytes, 0, bytes.length);", "fixed": "             }\n         }\n         if (logger.isInfoEnabled()) {\n            logger.info(\"defineClass pluginClass:{} cl:{}\", className, classLoader);\n         }\n         final byte[] bytes = ct.toBytecode();\n         return (Class<?>)DEFINE_CLASS.invoke(classLoader, ct.getName(), bytes, 0, bytes.length);", "sourceBeforeFix": "logger.debug(\"defineClass pluginClass:{} cl:{}\",className,classLoader)", "sourceAfterFix": "logger.info(\"defineClass pluginClass:{} cl:{}\",className,classLoader)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0559e4a6a1c956394bf3ce184be7bf4f9a91108e", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \tprivate static final String TEST_DATA_FILE = \"/testdata.avro\";\n \tstatic {\n\t\tLogUtils.initializeDefaultConsoleLogger();\n \t}\n \t@Test", "fixed": " \tprivate static final String TEST_DATA_FILE = \"/testdata.avro\";\n \tstatic {\n\t\tLogUtils.initializeDefaultTestConsoleLogger();\n \t}\n \t@Test", "sourceBeforeFix": "LogUtils.initializeDefaultConsoleLogger()", "sourceAfterFix": "LogUtils.initializeDefaultTestConsoleLogger()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomixMultiMapEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AtomixMultiMapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomixMultiMapEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AtomixMultiMapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WeatherEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWeatherEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface WeatherEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWeatherEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "270185aba54cef1d8ce59ec347b5623f2e502afe", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \telse\n \t\t{\n \t\tISeq s = RT.seq(sizeOrSeq);\n\t\tint size = s.count();\n \t\tlong[] ret = new long[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\tret[i] = ((Number) s.first()).longValue();", "fixed": " \telse\n \t\t{\n \t\tISeq s = RT.seq(sizeOrSeq);\n\t\tint size = RT.count(s);\n \t\tlong[] ret = new long[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\tret[i] = ((Number) s.first()).longValue();", "sourceBeforeFix": "s.count()", "sourceAfterFix": "RT.count(s)"}
{"fixCommitSHA1": "1b086ac0176dd15144c76c1d521de992a5db7e63", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "             assertEquals(row.getField(0), 1L);\n             row = result.getMaterializedRows().get(1);\n            assertEquals(row.getField(0), 2L);\n             row = result.getMaterializedRows().get(2);\n            assertEquals(row.getField(0), 3L);\n         }\n     }", "fixed": "             assertEquals(row.getField(0), 1L);\n             row = result.getMaterializedRows().get(1);\n            assertEquals(row.getField(0), 3L);\n             row = result.getMaterializedRows().get(2);\n            assertEquals(row.getField(0), 2L);\n         }\n     }", "sourceBeforeFix": "assertEquals(row.getField(0),2L)", "sourceAfterFix": "assertEquals(row.getField(0),3L)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,value)"}
{"fixCommitSHA1": "8a9e1bcbff1ff10cf122b23b3a1aa437f02a2086", "projectName": "gephi.gephi", "bugType": "Change Unary Operator\t", "problem": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "fixed": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && !sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "sourceBeforeFix": "sourceEdgeTextData.getText().isEmpty()", "sourceAfterFix": "!sourceEdgeTextData.getText().isEmpty()"}
{"fixCommitSHA1": "4f952dac30892ce9458bee0403d908ee642c4481", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "                     .setXmlName(Attribute.MODE.getLocalName())\n                     .setAllowExpression(true)\n                     .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n                    .setValidator(new EnumValidator<Mode>(Mode.class, true, false))\n                     .build();\n     ClusteredCacheAdd(CacheMode mode) {", "fixed": "                     .setXmlName(Attribute.MODE.getLocalName())\n                     .setAllowExpression(true)\n                     .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n                    .setValidator(new EnumValidator<Mode>(Mode.class, false, true))\n                     .build();\n     ClusteredCacheAdd(CacheMode mode) {", "sourceBeforeFix": "new EnumValidator<Mode>(Mode.class,true,false)", "sourceAfterFix": "new EnumValidator<Mode>(Mode.class,false,true)"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "cb488601eb5c45dcd1774022fdc8748e9a3668aa", "projectName": "mybatis.mybatis-3", "bugType": "Change Modifier", "problem": "   public void clear() {\n     delegate.clear();\n    keyList.clear();\n   }\n   public ReadWriteLock getReadWriteLock() {", "fixed": "   public void clear() {\n     delegate.clear();\nkeyList = new LinkedList<Object>();\n   }\n   public ReadWriteLock getReadWriteLock() {", "sourceBeforeFix": "18", "sourceAfterFix": "2"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MllpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMllpEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface MllpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMllpEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   }\n   void recordFunctionInformation() {\n    logger.info(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(", "fixed": "   }\n   void recordFunctionInformation() {\n    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(", "sourceBeforeFix": "logger.info(\"Normalizing\")", "sourceAfterFix": "logger.fine(\"Normalizing\")"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args)", "sourceAfterFix": "doInvoke(args)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStream<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStream<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "fixed": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStreamSink<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "cb1b4d02e48d37e5c76932c430be95c0511e34dc", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "  */\n public class AlluxioLogServerProcess implements Process {\n   private static final String LOGSERVER_CLIENT_LOGGER_APPENDER_NAME = \"LOGSERVER_CLIENT_LOGGER\";\n  private static final Logger LOG = LoggerFactory.getLogger(AlluxioLogServer.class);\n   private static final long STOP_TIMEOUT_MS = 60000;\n   private static final int BASE_SLEEP_TIME_MS = 50;\n   private static final int MAX_SLEEP_TIME_MS = 30000;", "fixed": "  */\n public class AlluxioLogServerProcess implements Process {\n   private static final String LOGSERVER_CLIENT_LOGGER_APPENDER_NAME = \"LOGSERVER_CLIENT_LOGGER\";\n  private static final Logger LOG = LoggerFactory.getLogger(AlluxioLogServerProcess.class);\n   private static final long STOP_TIMEOUT_MS = 60000;\n   private static final int BASE_SLEEP_TIME_MS = 50;\n   private static final int MAX_SLEEP_TIME_MS = 30000;", "sourceBeforeFix": "AlluxioLogServer.class", "sourceAfterFix": "AlluxioLogServerProcess.class"}
{"fixCommitSHA1": "acc9d3961e1d0d8ebf12269a08566222ec382cf2", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "put(43239, new VariableInformation(1,\t\"Total hot water operation time add\",\tNibeDataType.S32,\tType.Sensor));\nput(43395, new VariableInformation(1,\t\"HPAC relays\",\t\t\t\t\t\t\tNibeDataType.U8,\tType.Sensor));\nput(43416, new VariableInformation(1,\t\"Compressor starts EB100-EP14\",\t\t\tNibeDataType.S32,\tType.Sensor));\nput(43420, new VariableInformation(10,\t\"Total operation time compressor\",\t\tNibeDataType.S32,\tType.Sensor));\nput(43424, new VariableInformation(1,\t\"Total hot water operation time compr\",\tNibeDataType.S32,\tType.Sensor));\nput(43427, new VariableInformation(1,\t\"Compressor state EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));\nput(43514, new VariableInformation(1,\t\"PCA-Base relayes EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));", "fixed": "put(43239, new VariableInformation(1,\t\"Total hot water operation time add\",\tNibeDataType.S32,\tType.Sensor));\nput(43395, new VariableInformation(1,\t\"HPAC relays\",\t\t\t\t\t\t\tNibeDataType.U8,\tType.Sensor));\nput(43416, new VariableInformation(1,\t\"Compressor starts EB100-EP14\",\t\t\tNibeDataType.S32,\tType.Sensor));\nput(43420, new VariableInformation(1,\t\"Total operation time compressor\",\t\tNibeDataType.S32,\tType.Sensor));\nput(43424, new VariableInformation(1,\t\"Total hot water operation time compr\",\tNibeDataType.S32,\tType.Sensor));\nput(43427, new VariableInformation(1,\t\"Compressor state EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));\nput(43514, new VariableInformation(1,\t\"PCA-Base relayes EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));", "sourceBeforeFix": "new VariableInformation(10,\"Total operation time compressor\",NibeDataType.S32,Type.Sensor)", "sourceAfterFix": "new VariableInformation(1,\"Total operation time compressor\",NibeDataType.S32,Type.Sensor)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @param from The element to copy.\n \t * @return A copy of the given element.\n \t */\n\tpublic T createCopy(T from);\n \t/**\n \t * Creates a copy from the given element, storing the copied result in the given target element.", "fixed": " \t * @param from The element to copy.\n \t * @return A copy of the given element.\n \t */\n\tpublic abstract T createCopy(T from);\n \t/**\n \t * Creates a copy from the given element, storing the copied result in the given target element.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e3f3ae5f48a12ad28a8506302f1a440ed4e2fb17", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\ttry {\r\n \t\t\t\tin = new DataInputStream(new BufferedInputStream(new GZIPInputStream(pkmFile.read())));\r\n \t\t\t\tint fileSize = in.readInt();\r\n\t\t\t\tcompressedData = BufferUtils.newByteBuffer(fileSize);\r\n \t\t\t\tint readBytes = 0;\r\n \t\t\t\twhile ((readBytes = in.read(buffer)) != -1) {\r\n \t\t\t\t\tcompressedData.put(buffer, 0, readBytes);\r", "fixed": " \t\t\ttry {\r\n \t\t\t\tin = new DataInputStream(new BufferedInputStream(new GZIPInputStream(pkmFile.read())));\r\n \t\t\t\tint fileSize = in.readInt();\r\n\t\t\t\tcompressedData = BufferUtils.newUnsafeByteBuffer(fileSize);\r\n \t\t\t\tint readBytes = 0;\r\n \t\t\t\twhile ((readBytes = in.read(buffer)) != -1) {\r\n \t\t\t\t\tcompressedData.put(buffer, 0, readBytes);\r", "sourceBeforeFix": "BufferUtils.newByteBuffer(fileSize)", "sourceAfterFix": "BufferUtils.newUnsafeByteBuffer(fileSize)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "18563f01c5a013657dbde3b245f0e735d1e86cec", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void testMapConfig() {\n         assertNotNull(config);\n        assertEquals(8, config.getMapConfigs().size());\n         MapConfig testMapConfig = config.getMapConfig(\"testMap\");\n         assertNotNull(testMapConfig);\n         assertEquals(\"testMap\", testMapConfig.getName());", "fixed": "     @Test\n     public void testMapConfig() {\n         assertNotNull(config);\n        assertEquals(6, config.getMapConfigs().size());\n         MapConfig testMapConfig = config.getMapConfig(\"testMap\");\n         assertNotNull(testMapConfig);\n         assertEquals(\"testMap\", testMapConfig.getName());", "sourceBeforeFix": "assertEquals(8,config.getMapConfigs().size())", "sourceAfterFix": "assertEquals(6,config.getMapConfigs().size())"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClientModel(@Valid Client body);\n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })", "fixed": "     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClientModel(@Valid Client body) throws Exception;\n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74cab2dc9b8c32482d2c86a66a0dd9318930b4bc", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": " import org.junit.runner.FilterFactoryParams;\n import org.junit.runner.manipulation.Filter;\nabstract class CategoryFilterFactory extends FilterFactory {\n     @Override\n     public FilterFactoryParams parseArgs(String args) throws FilterNotCreatedException {\n         try {", "fixed": " import org.junit.runner.FilterFactoryParams;\n import org.junit.runner.manipulation.Filter;\n\r\npublic abstract class CategoryFilterFactory extends FilterFactory {\r\n     @Override\n     public FilterFactoryParams parseArgs(String args) throws FilterNotCreatedException {\n         try {", "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleSheetsStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedGoogleSheetsStreamEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleSheetsStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedGoogleSheetsStreamEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "09cf30fa0023aceb26e7f3ff7315a63fe5ed72ae", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "  */\n public final class BlockHandlerLocal extends BlockHandler {\n  private final Logger LOG = LoggerFactory.getLogger(Constants.LOGGER_TYPE);\n   private final RandomAccessFile mLocalFile;\n   private final FileChannel mLocalFileChannel;\n   private boolean mPermission = false;", "fixed": "  */\n public final class BlockHandlerLocal extends BlockHandler {\n  private static final Logger LOG = LoggerFactory.getLogger(Constants.LOGGER_TYPE);\n   private final RandomAccessFile mLocalFile;\n   private final FileChannel mLocalFileChannel;\n   private boolean mPermission = false;", "sourceBeforeFix": "18", "sourceAfterFix": "26"}
{"fixCommitSHA1": "55a4b30e72ad36e69499aa5db9b25f63ea7884ac", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         result.expectedMessageCount(2);\n         MockEndpoint error = getMockEndpoint(\"mock:error\");\n        error.expectedMessageCount(2);\n         MockEndpoint kaboom = getMockEndpoint(\"mock:kaboom\");", "fixed": "         result.expectedMessageCount(2);\n         MockEndpoint error = getMockEndpoint(\"mock:error\");\n        error.expectedMinimumMessageCount(2);\n         MockEndpoint kaboom = getMockEndpoint(\"mock:kaboom\");", "sourceBeforeFix": "error.expectedMessageCount(1)", "sourceAfterFix": "error.expectedMinimumMessageCount(1)"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testBurstySampling() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "fixed": "     public void testBurstySampling() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "sourceBeforeFix": "mock.expectedMessageCount(3)", "sourceAfterFix": "mock.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5ab2a833f50c61a5322778a38dbfdd33c9b478d0", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": " /*\n * Copyright 2007 Yusuke Yamamoto\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "fixed": " /*\n * Copyright (C) 2007 Yusuke Yamamoto\n * Copyright (C) 2011 Twitter, Inc.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "sourceBeforeFix": "assertSame(conf,(Configuration)serializeDeserialize(conf))", "sourceAfterFix": "assertEquals(conf,(Configuration)serializeDeserialize(conf))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "42e0782a5258626a58177d154ca0cf3da87cdf7a", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "      * @param r {@link AtmosphereResource}\n      */\n     public void unRegisterUuidForFindCandidate(AtmosphereResource r) {\n        logger.debug(\"Removing: {}\", r);\n         resources.remove(r.uuid());\n     }", "fixed": "      * @param r {@link AtmosphereResource}\n      */\n     public void unRegisterUuidForFindCandidate(AtmosphereResource r) {\n        logger.trace(\"Removing: {}\", r);\n         resources.remove(r.uuid());\n     }", "sourceBeforeFix": "logger.debug(\"Removing: {}\",r)", "sourceAfterFix": "logger.trace(\"Removing: {}\",r)"}
{"fixCommitSHA1": "40e6bbe55f7141bd66a52261e108a1f3b575ca6f", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "fixed": "             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean touchUp (int screenX, int screenY, int pointer, int button) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].touchUp(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean touchUp (int screenX, int screenY, int pointer, int button) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).touchUp(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "e0617be01454b663de5e21ae73f0f1d61b504da0", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t\treturn this;\n \t}\n\tpublic ResultPartitionBuilder setBoundedBlockingSubpartitionType(BoundedBlockingSubpartitionType blockingSubpartitionType) {\n \t\tthis.blockingSubpartitionType = blockingSubpartitionType;\n \t\treturn this;\n \t}", "fixed": " \t\treturn this;\n \t}\n\tResultPartitionBuilder setBoundedBlockingSubpartitionType(\n\t\t\t@SuppressWarnings(\"SameParameterValue\") BoundedBlockingSubpartitionType blockingSubpartitionType) {\n \t\tthis.blockingSubpartitionType = blockingSubpartitionType;\n \t\treturn this;\n \t}", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "eb91fa49db99396c3cf0e79d02962dbbaef55e06", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": " @SuppressWarnings(\"serial\")\n public class LlapServlet extends HttpServlet {\n  private static final Log LOG = LogFactory.getLog(JMXJsonServlet.class);\n   /**\n    * Initialize this servlet.", "fixed": " @SuppressWarnings(\"serial\")\n public class LlapServlet extends HttpServlet {\n  private static final Log LOG = LogFactory.getLog(LlapServlet.class);\n   /**\n    * Initialize this servlet.", "sourceBeforeFix": "JMXJsonServlet.class", "sourceAfterFix": "LlapServlet.class"}
{"fixCommitSHA1": "2ee3a88dcc211304bd91f236a5e09c98971a59a0", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "                 GroupConfig groupConfig = instance.getConfig().getGroupConfig();\n                 while (running.get()) {\n                     if (versionMismatch) {\n                        Thread.sleep(1000 * 5);\n                         versionMismatch = false;\n                     }\n                     try {", "fixed": "                 GroupConfig groupConfig = instance.getConfig().getGroupConfig();\n                 while (running.get()) {\n                     if (versionMismatch) {\n                        Thread.sleep(1000 * 60);\n                         versionMismatch = false;\n                     }\n                     try {", "sourceBeforeFix": "1000 * 5", "sourceAfterFix": "1000 * 60"}
{"fixCommitSHA1": "5bd04f29e3b4b0392a9c8133d6dddd0e33d09229", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "         messagesDiscarded.mark(messages.size());\n     }\n    public interface Factory extends MessageOutput.Factory<GelfOutput> {\n         @Override\n        GelfOutput create(Stream stream, Configuration configuration);\n         @Override\n         Config getConfig();", "fixed": "         messagesDiscarded.mark(messages.size());\n     }\n    public interface Factory extends MessageOutput.Factory<DiscardMessageOutput> {\n         @Override\n        DiscardMessageOutput create(Stream stream, Configuration configuration);\n         @Override\n         Config getConfig();", "sourceBeforeFix": "@Override GelfOutput create(Stream stream,Configuration configuration); ", "sourceAfterFix": "@Override DiscardMessageOutput create(Stream stream,Configuration configuration); "}
{"fixCommitSHA1": "e1d74627f527eb147f041030d9b853190a5c1046", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": "  * Auto-configuration for {@link MockRestServiceServer} support.\n  *\n  * @author Phillip Webb\n  * @see AutoConfigureMockRestServiceServer\n  */\n @Configuration\n @ConditionalOnProperty(prefix = \"spring.test.webclient.mockrestserviceserver\", name = \"enabled\")\nclass MockRestServiceServerAutoConfiguration {\n \t@Bean\n \tpublic MockServerRestTemplateCustomizer mockServerRestTemplateCustomizer() {", "fixed": "  * Auto-configuration for {@link MockRestServiceServer} support.\n  *\n  * @author Phillip Webb\n * @since 1.4.0\n  * @see AutoConfigureMockRestServiceServer\n  */\n @Configuration\n @ConditionalOnProperty(prefix = \"spring.test.webclient.mockrestserviceserver\", name = \"enabled\")\npublic class MockRestServiceServerAutoConfiguration {\n \t@Bean\n \tpublic MockServerRestTemplateCustomizer mockServerRestTemplateCustomizer() {", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "b55782ed056e6265eeee028f891f291eb11d736b", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         Node node = archive.get(MANIFEST);\n         Assert.assertNotNull(node);\n        Manifest mf = processor.getOrCreateManifest(archive);\n         Attributes attributes = mf.getMainAttributes();\n         String value = attributes.getValue(\"Dependencies\");\n         Set<String> deps = new HashSet<String>();", "fixed": "         Node node = archive.get(MANIFEST);\n         Assert.assertNotNull(node);\n        Manifest mf = ManifestUtils.getOrCreateManifest(archive);\n         Attributes attributes = mf.getMainAttributes();\n         String value = attributes.getValue(\"Dependencies\");\n         Set<String> deps = new HashSet<String>();", "sourceBeforeFix": "processor.getOrCreateManifest(archive)", "sourceAfterFix": "ManifestUtils.getOrCreateManifest(archive)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "c256ca546b3d6169bbfd8df1153c151cc67cfe62", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         mock.reset();\n        mock.expectedMessageCount(1);\n         context().startRoute(\"trigger\");", "fixed": "         mock.reset();\n        mock.expectedMinimumMessageCount(1);\n         context().startRoute(\"trigger\");", "sourceBeforeFix": "mock.expectedMessageCount(1)", "sourceAfterFix": "mock.expectedMinimumMessageCount(1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "       logger\n           .error(\n              \"database connection error may be wrong password, username or dbname: {}\",\n               e.getMessage());\n     }\n   }", "fixed": "       logger\n           .error(\n              \"database error: {}\",\n               e.getMessage());\n     }\n   }", "sourceBeforeFix": "logger.error(\"Configuration for influxdb not yet loaded or broken.\")", "sourceAfterFix": "logger.warn(\"Configuration for influxdb not yet loaded or broken.\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMSKEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MSKEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMSKEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MSKEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ticker.advance(16000000);\n     stopwatch.start();\n    assertEquals(9, stopwatch.elapsedMillis());\n     ticker.advance(25000000);\n    assertEquals(34, stopwatch.elapsedMillis());\n     stopwatch.stop();\n     ticker.advance(36000000);\n    assertEquals(34, stopwatch.elapsedMillis());\n   }\n   @GwtIncompatible(\"String.format()\")", "fixed": "     ticker.advance(16000000);\n     stopwatch.start();\n    assertEquals(9, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(25000000);\n    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n     stopwatch.stop();\n     ticker.advance(36000000);\n    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n   }\n   @GwtIncompatible(\"String.format()\")", "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "fixed": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic abstract boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "af4319015e0c1ab6da03083d793e465b7ca58def", "projectName": "swagger-api.swagger-codegen", "bugType": "Same Function More Args", "problem": "             if (is == null) {\nis = new FileInputStream(new File(name));\n             }\n            return new InputStreamReader(is);\n         } catch (Exception e) {\n             LOGGER.error(e.getMessage());\n         }", "fixed": "             if (is == null) {\nis = new FileInputStream(new File(name));\n             }\n            return new InputStreamReader(is, \"UTF-8\");\n         } catch (Exception e) {\n             LOGGER.error(e.getMessage());\n         }", "sourceBeforeFix": "new InputStreamReader(is)", "sourceAfterFix": "new InputStreamReader(is,\"UTF-8\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,value)"}
{"fixCommitSHA1": "dce2381dc4a877fcbfb869f115152ecd44a92173", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "       for (Entry<String, Queue> entry : queueCollections.entrySet()) {\n         String queueName = entry.getKey();\n        Set<String> queueLabels = entry.getValue().acccessibleNodeLabels;\n         if (queueLabels.contains(label)) {\n           throw new IOException(\"Cannot remove label=\" + label\n               + \", because queue=\" + queueName + \" is using this label. \"", "fixed": "       for (Entry<String, Queue> entry : queueCollections.entrySet()) {\n         String queueName = entry.getKey();\n        Set<String> queueLabels = entry.getValue().accessibleNodeLabels;\n         if (queueLabels.contains(label)) {\n           throw new IOException(\"Cannot remove label=\" + label\n               + \", because queue=\" + queueName + \" is using this label. \"", "sourceBeforeFix": "entry.getValue().acccessibleNodeLabels", "sourceAfterFix": "entry.getValue().accessibleNodeLabels"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ee9057ad99b9cc95140ee3e56265f32b6a28d709", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                 setExposeHeaders(response);\n             }\n         }\n        ctx.writeAndFlush(msg, promise);\n     }\n     private static void forbidden(final ChannelHandlerContext ctx, final HttpRequest request) {", "fixed": "                 setExposeHeaders(response);\n             }\n         }\n        ctx.write(msg, promise);\n     }\n     private static void forbidden(final ChannelHandlerContext ctx, final HttpRequest request) {", "sourceBeforeFix": "ctx.writeAndFlush(msg,promise)", "sourceAfterFix": "ctx.write(msg,promise)"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "         parent.getRegionName(), rowContent, COL_SPLITB);\n     if (!hasReferencesA && !hasReferencesB) {\n      LOG.info(\"Deleting region \" + parent.getRegionName() +\n         \" because daughter splits no longer hold references\");\n       HRegion.deleteRegion(master.fs, master.rootdir, parent);", "fixed": "         parent.getRegionName(), rowContent, COL_SPLITB);\n     if (!hasReferencesA && !hasReferencesB) {\n      LOG.info(\"Deleting region \" + parent.getRegionNameAsString() +\n         \" because daughter splits no longer hold references\");\n       HRegion.deleteRegion(master.fs, master.rootdir, parent);", "sourceBeforeFix": "info.getRegionName()", "sourceAfterFix": "info.getRegionNameAsString()"}
{"fixCommitSHA1": "615135aaa2ec18ea6c0b4785749079df4db5fd7a", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Change Identifier Used", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJiraEndpointBuilder\n             extends\n                 AdvancedJiraEndpointConsumerBuilder, AdvancedJiraEndpointProducerBuilder {\n         default JiraEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJiraEndpointBuilder\n             extends\n                 AdvancedJiraEndpointConsumerBuilder, AdvancedJiraEndpointProducerBuilder {\n         default JiraEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "0940ca6f4588c99837f551bd1bdf64dec5392a45", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   public void testInvalidGoogBase14() {\n     testError(\"class Foo extends BaseFoo { constructor() { Foo.base(this); } }\",\n        GOOG_BASE_CLASS_ERROR);\n   }\n   public void testInvalidGoogBase14b() {\n     testError(\"class Foo extends BaseFoo { method() { Foo.base(this, 'method'); } }\",\n        GOOG_BASE_CLASS_ERROR);\n   }\n   public void testValidBase1() {", "fixed": "   public void testInvalidGoogBase14() {\n     testError(\"class Foo extends BaseFoo { constructor() { Foo.base(this); } }\",\n        BASE_CLASS_ERROR);\n   }\n   public void testInvalidGoogBase14b() {\n     testError(\"class Foo extends BaseFoo { method() { Foo.base(this, 'method'); } }\",\n        BASE_CLASS_ERROR);\n   }\n   public void testValidBase1() {", "sourceBeforeFix": "testError(\"class Foo extends BaseFoo { constructor() { Foo.base(this); } }\",GOOG_BASE_CLASS_ERROR)", "sourceAfterFix": "testError(\"class Foo extends BaseFoo { constructor() { Foo.base(this); } }\",BASE_CLASS_ERROR)"}
{"fixCommitSHA1": "2cf6eb9e746ab1c610460badf4f99f1ee19bf0b3", "projectName": "clojure.clojure", "bugType": "Same Function Swap Args", "problem": " \tprivate HashCollisionNode ensureEditable(AtomicReference<Thread> edit){\n \t\tif(this.edit == edit)\n \t\t\treturn this;\n\t\treturn new HashCollisionNode(edit, count, hash, array);\n \t}\n \tprivate HashCollisionNode ensureEditable(AtomicReference<Thread> edit, int count, Object[] array){", "fixed": " \tprivate HashCollisionNode ensureEditable(AtomicReference<Thread> edit){\n \t\tif(this.edit == edit)\n \t\t\treturn this;\n\t\treturn new HashCollisionNode(edit, hash, count, array);\n \t}\n \tprivate HashCollisionNode ensureEditable(AtomicReference<Thread> edit, int count, Object[] array){", "sourceBeforeFix": "new HashCollisionNode(edit,count,hash,array)", "sourceAfterFix": "new HashCollisionNode(edit,hash,count,array)"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DrillEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedDrillEndpointBuilder advanced() {\n             return (AdvancedDrillEndpointBuilder) this;\n         }", "fixed": "     \n    public interface DrillEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedDrillEndpointBuilder advanced() {\n             return (AdvancedDrillEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClientModel(@Valid Client body);\n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })", "fixed": "     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testClientModel(@Valid Client body) throws Exception;\n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwitterDirectMessageEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterDirectMessageEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface TwitterDirectMessageEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterDirectMessageEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "98dfe7e6b2c2d098a216c1bd60cf9deaa83098ef", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {\n       @Override\n       public Integer execute(Jedis connection) {\n        connection.subscribe(jedisPubSub, patterns);\n         return 0;\n       }\n     }.runWithAnyNode();", "fixed": "     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {\n       @Override\n       public Integer execute(Jedis connection) {\n        connection.psubscribe(jedisPubSub, patterns);\n         return 0;\n       }\n     }.runWithAnyNode();", "sourceBeforeFix": "connection.subscribe(jedisPubSub,patterns)", "sourceAfterFix": "connection.psubscribe(jedisPubSub,patterns)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b31b4de025de3beefcd5bf164bb64e13f2ce0691", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * name whose type is capable of being refined.\n    * @return The current type of the node if it can be refined, null otherwise.\n    */\n  JSType getTypeIfRefinable(Node node, FlowScope scope) {\n     switch (node.getType()) {\n       case Token.NAME:\n         StaticSlot<JSType> nameVar = scope.getSlot(node.getString());", "fixed": "    * name whose type is capable of being refined.\n    * @return The current type of the node if it can be refined, null otherwise.\n    */\n  protected JSType getTypeIfRefinable(Node node, FlowScope scope) {\n     switch (node.getType()) {\n       case Token.NAME:\n         StaticSlot<JSType> nameVar = scope.getSlot(node.getString());", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "a1f7739ce78345b312c8d2b6298214586e237090", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @NotNull\n     @Valid\n    private Optional<Duration> frequency = Optional.of(Duration.seconds(1));\n     public TimeUnit getDurationUnit() {\n         return durationUnit;", "fixed": "     @NotNull\n     @Valid\n    private Optional<Duration> frequency = Optional.absent();\n     public TimeUnit getDurationUnit() {\n         return durationUnit;", "sourceBeforeFix": "Optional.of(Duration.seconds(1))", "sourceAfterFix": "Optional.absent()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cb84b2788aeed6aad2bc4b1acb98290e060861e2", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "fixed": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "sourceBeforeFix": "ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())", "sourceAfterFix": "ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())"}
{"fixCommitSHA1": "ba98d83f598bbf2e9f5c41eeb51d36369a088fa6", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "         }\n         \n        protected int getMessageLength() {\n             return currentOutputPosition;\n         }", "fixed": "         }\n         \n        protected final int getMessageLength() {\n             return currentOutputPosition;\n         }", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "9e76b5319ef9790d8bce27eacbc2aff4ba312cac", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         try {\n             InetAddress address = resolver.resolve(\"10.0.0.1\").syncUninterruptibly().getNow();\n            assertEquals(\"10.0.0.1\", address.getHostName());\n         } finally {\n             resolver.close();\n         }", "fixed": "         try {\n             InetAddress address = resolver.resolve(\"10.0.0.1\").syncUninterruptibly().getNow();\n            assertEquals(\"10.0.0.1\", address.getHostAddress());\n         } finally {\n             resolver.close();\n         }", "sourceBeforeFix": "address.getHostName()", "sourceAfterFix": "address.getHostAddress()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "499d9d3f89368592549f1ec3701f5a7616113a4c", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t\tgrammarBuilder.append(\"}\\n\");\n \t\tgrammarBuilder.append(\"  : r=a ;\\n\");\n \t\tgrammarBuilder.append(\"a : 'x' { \\n\");\n\t\tgrammarBuilder.append(\"fmt.Println(p.GetRuleInvocationStack(nil))\\n\");\n \t\tgrammarBuilder.append(\"} ;\");\n \t\tString grammar = grammarBuilder.toString();\n \t\tString input =\"x\";", "fixed": " \t\tgrammarBuilder.append(\"}\\n\");\n \t\tgrammarBuilder.append(\"  : r=a ;\\n\");\n \t\tgrammarBuilder.append(\"a : 'x' { \\n\");\n\t\tgrammarBuilder.append(\"fmt.Println(antlr.PrintArrayJavaStyle(p.GetRuleInvocationStack(nil)))\\n\");\n \t\tgrammarBuilder.append(\"} ;\");\n \t\tString grammar = grammarBuilder.toString();\n \t\tString input =\"x\";", "sourceBeforeFix": "new StringBuilder(167)", "sourceAfterFix": "new StringBuilder(194)"}
{"fixCommitSHA1": "1e757414b3767a8e91c21d4ede5c40baa94550fd", "projectName": "Atmosphere.atmosphere", "bugType": "Change Unary Operator\t", "problem": "     public void configure(AtmosphereConfig config) {\n         String ac = config.getInitParameter(ApplicationConfig.DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);\n         if (ac != null) {\n            enableAccessControl = Boolean.parseBoolean(ac);\n         }\n     }", "fixed": "     public void configure(AtmosphereConfig config) {\n         String ac = config.getInitParameter(ApplicationConfig.DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);\n         if (ac != null) {\n            enableAccessControl = !Boolean.parseBoolean(ac);\n         }\n     }", "sourceBeforeFix": "Boolean.parseBoolean(ac)", "sourceAfterFix": "!Boolean.parseBoolean(ac)"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "fixed": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesDeploymentsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesDeploymentsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KubernetesDeploymentsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesDeploymentsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e981384cc21ca3c1958acd4b494a6ddd147c0a60", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "             if (ssl.has(CommonAttributes.CIPHER_SUITE))\n                 config.setSslCiphers(ssl.get(CommonAttributes.CIPHER_SUITE).asString());\n             if (ssl.has(CommonAttributes.PROTOCOL))\n                config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString());\n             if (ssl.has(CommonAttributes.CA_CERTIFICATE_FILE))\n                 config.setSslTrustStore(ssl.get(CommonAttributes.CA_CERTIFICATE_FILE).asString());\n             if (ssl.has(CommonAttributes.CA_REVOCATION_URL))", "fixed": "             if (ssl.has(CommonAttributes.CIPHER_SUITE))\n                 config.setSslCiphers(ssl.get(CommonAttributes.CIPHER_SUITE).asString());\n             if (ssl.has(CommonAttributes.PROTOCOL))\n                config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString());\n             if (ssl.has(CommonAttributes.CA_CERTIFICATE_FILE))\n                 config.setSslTrustStore(ssl.get(CommonAttributes.CA_CERTIFICATE_FILE).asString());\n             if (ssl.has(CommonAttributes.CA_REVOCATION_URL))", "sourceBeforeFix": "config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString())", "sourceAfterFix": "config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "d1cb70710f70a129598e92a638d536b9207aa01f", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "  * Created by russellb337 on 7/9/15.\n  */\n public interface Response {\n    ResponseImpl schema(Property property);\n    ResponseImpl description(String description);\n    ResponseImpl example(String type, Object example);\n    ResponseImpl header(String name, Property property);\n    ResponseImpl headers(Map<String, Property> headers);\n     String getDescription();", "fixed": "  * Created by russellb337 on 7/9/15.\n  */\n public interface Response {\n    Response schema(Property property);\n    Response description(String description);\n    Response example(String type, Object example);\n    Response header(String name, Property property);\n    Response headers(Map<String, Property> headers);\n     String getDescription();", "sourceBeforeFix": "ResponseImpl example(String type,Object example); ", "sourceAfterFix": "Response example(String type,Object example); "}
{"fixCommitSHA1": "dff64bf31f0406905c321e100e29d3600cf618e3", "projectName": "apache.camel", "bugType": "Missing Throws Exception", "problem": "      * Allow this route to be run as an application\n      *\n      * @param args\n      */\n    public static void main(String[] args) {\n         new Main().run(args);\n     }", "fixed": "      * Allow this route to be run as an application\n      *\n      * @param args\n     * @throws Exception \n      */\n    public static void main(String[] args) throws Exception {\n         new Main().run(args);\n     }", "sourceBeforeFix": "9", "sourceAfterFix": "9"}
{"fixCommitSHA1": "f281ead05c3ee771e976e6253685331084ac4c73", "projectName": "wildfly.wildfly", "bugType": "Change Boolean Literal", "problem": "     private static final String extensionName = \"org.jboss.as.web\";\n     static final SensitiveTargetAccessConstraintDefinition WEB_CONNECTOR_CONSTRAINT = new SensitiveTargetAccessConstraintDefinition(\n            new SensitivityClassification(SUBSYSTEM_NAME, \"web-connector\", true, false, false));\n     static final SensitiveTargetAccessConstraintDefinition WEB_VALVE_CONSTRAINT = new SensitiveTargetAccessConstraintDefinition(\n            new SensitivityClassification(SUBSYSTEM_NAME, \"web-valve\", true, false, false));\n     public WebExtension() {\n         super(extensionName, SUBSYSTEM_NAME);", "fixed": "     private static final String extensionName = \"org.jboss.as.web\";\n     static final SensitiveTargetAccessConstraintDefinition WEB_CONNECTOR_CONSTRAINT = new SensitiveTargetAccessConstraintDefinition(\n            new SensitivityClassification(SUBSYSTEM_NAME, \"web-connector\", false, false, false));\n     static final SensitiveTargetAccessConstraintDefinition WEB_VALVE_CONSTRAINT = new SensitiveTargetAccessConstraintDefinition(\n            new SensitivityClassification(SUBSYSTEM_NAME, \"web-valve\", false, false, false));\n     public WebExtension() {\n         super(extensionName, SUBSYSTEM_NAME);", "sourceBeforeFix": "new SensitivityClassification(SUBSYSTEM_NAME,\"web-connector\",true,false,false)", "sourceAfterFix": "new SensitivityClassification(SUBSYSTEM_NAME,\"web-connector\",false,false,false)"}
{"fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request);\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent(\"Disconnect\", DISCONNECT, w));", "fixed": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent(\"Disconnect\", DISCONNECT, w));", "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}
{"fixCommitSHA1": "02f1f95e522fd142dc0805c37e91d12880ab5996", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         Block block = new Block(context)\n                 .setDescription(\"invoke \" + signature);\n        ArrayList<Class<?>> stackTypes = new ArrayList<>();\n         int index = 0;\n         for (Class<?> type : methodType.parameterArray()) {", "fixed": "         Block block = new Block(context)\n                 .setDescription(\"invoke \" + signature);\n        List<Class<?>> stackTypes = new ArrayList<>();\n         int index = 0;\n         for (Class<?> type : methodType.parameterArray()) {", "sourceBeforeFix": "ArrayList<Class<?>>", "sourceAfterFix": "List<Class<?>>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c5edc0976145a61a5551053dfda8a8c3394100ee", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\tif (preferences.containsKey(name)) {\n \t\t\treturn preferences.get(name);\n \t\t} else {\n\t\t\tPreferences prefs = new LwjglPreferences(name);\n \t\t\tpreferences.put(name, prefs);\n \t\t\treturn prefs;\n \t\t}", "fixed": " \t\tif (preferences.containsKey(name)) {\n \t\t\treturn preferences.get(name);\n \t\t} else {\n\t\t\tPreferences prefs = new LwjglPreferences(name, \".prefs/\");\n \t\t\tpreferences.put(name, prefs);\n \t\t\treturn prefs;\n \t\t}", "sourceBeforeFix": "new LwjglPreferences(name)", "sourceAfterFix": "new LwjglPreferences(name,\".prefs/\")"}
{"fixCommitSHA1": "849b3ba2b1282a89d8cf60a10891ea11a9e16bb4", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n        assertEquals(resp.getHeader(\"target\"), target);\n         client.close();\n     }", "fixed": "         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n        assertEquals(resp.getHeader(\"target\"), \"/\");\n         client.close();\n     }", "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8c7c5d4dc981cb21d4151379d0e6b9e5c131d7ec", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t\tproperties.putAll(map);\n \t\t\t}\n \t\t}\n\t\tcatch (IllegalArgumentException e) {\n \t\t\tlogger.error(\"Could not parse VCAP_APPLICATION\", e);\n \t\t}\n \t\treturn properties;", "fixed": " \t\t\t\tproperties.putAll(map);\n \t\t\t}\n \t\t}\n\t\tcatch (Exception e) {\n \t\t\tlogger.error(\"Could not parse VCAP_APPLICATION\", e);\n \t\t}\n \t\treturn properties;", "sourceBeforeFix": "IllegalArgumentException e", "sourceAfterFix": "Exception e"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "e5298f62da9c8ff2319709bdd35aceef75e97228", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     protected void initRegistry() {\n         Map<String, String> ht = new Hashtable<>();\n         ht.put(\"name\", \"simpleBean\");\n        getRegistry().put(\"myTable\", ht);\n     }\n }", "fixed": "     protected void initRegistry() {\n         Map<String, String> ht = new Hashtable<>();\n         ht.put(\"name\", \"simpleBean\");\n        getRegistry().bind(\"myTable\", ht);\n     }\n }", "sourceBeforeFix": "getRegistry().put(\"myTable\",ht)", "sourceAfterFix": "getRegistry().bind(\"myTable\",ht)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "93ec35952feb5bdcd58a7ac6ad0f07307ed0d367", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                 prop.getField().getJavaDoc().setFullText(option.getDescription());\n             }\n             if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getType())) {\n                     prop.getField().setStringInitializer(option.getDefaultValue());\n                 } else if (\"long\".equals(option.getJavaType()) || \"java.lang.Long\".equals(option.getJavaType())) {", "fixed": "                 prop.getField().getJavaDoc().setFullText(option.getDescription());\n             }\n             if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getJavaType())) {\n                     prop.getField().setStringInitializer(option.getDefaultValue());\n                 } else if (\"long\".equals(option.getJavaType()) || \"java.lang.Long\".equals(option.getJavaType())) {", "sourceBeforeFix": "option.getType()", "sourceAfterFix": "option.getJavaType()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "23efcad891c91fc131ed4729c734ff6b122197df", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnTask() throws Exception {\n\t\tString processDefinitionId = deployOneTaskProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();", "fixed": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnTask() throws Exception {\n\t\tString processDefinitionId = deployOneTaskTestProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();", "sourceBeforeFix": "deployOneTaskProcess()", "sourceAfterFix": "deployOneTaskTestProcess()"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "fixed": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)", "sourceAfterFix": "GL.glGenTextures(n,toBuffer(textures,offset),0)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"part-\" + i + '-' + j).toString();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "fixed": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"part-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "sourceBeforeFix": "new Path(bucketPath,\"part-\" + i + '-'+ j).toString()", "sourceAfterFix": "new Path(bucketPath,\"part-\" + i + '-'+ j).getPath()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         context.stop();\n         List<MessagePayload> events = nagios.getMessagePayloadList();\n        assertTrue(\"Should be 10+ events, was: \" + events.size(), events.size() >= 10);\n     }\n     @Override", "fixed": "         context.stop();\n         List<MessagePayload> events = nagios.getMessagePayloadList();\n        assertTrue(\"Should be 9+ events, was: \" + events.size(), events.size() >= 9);\n     }\n     @Override", "sourceBeforeFix": "new NagiosNscaStub(25667,\"password\")", "sourceAfterFix": "new NagiosNscaStub(25669,\"password\")"}
{"fixCommitSHA1": "9a9b02c330e9e452f37335d0e59c462175bb5df7", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"hello\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"hello\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"hello\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"hello\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "ed13d3007bbe9cb7df8641d2e287bf94c314fb86", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 }\n             });\n         }\n        long newReservation = memoryReservation.getAndAdd(bytes);\n         if (newReservation > maxMemoryReservation) {\n             memoryReservation.getAndAdd(-bytes);\n             throw new ExceededMemoryLimitException(getMaxMemorySize());", "fixed": "                 }\n             });\n         }\n        long newReservation = memoryReservation.addAndGet(bytes);\n         if (newReservation > maxMemoryReservation) {\n             memoryReservation.getAndAdd(-bytes);\n             throw new ExceededMemoryLimitException(getMaxMemorySize());", "sourceBeforeFix": "memoryReservation.getAndAdd(bytes)", "sourceAfterFix": "memoryReservation.addAndGet(bytes)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "40e6bbe55f7141bd66a52261e108a1f3b575ca6f", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;", "fixed": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "cb2fec4fd92bd8a2f21737e4d1618946ae6170bd", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     if (blockSizeByte > 0) {\n       return (int) mFSMasterClient.createFile(path.getPath(), blockSizeByte, recursive);\n     } else {\n      return (int) mFSMasterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.getPath(),\n           blockSizeByte, recursive);\n     }\n   }", "fixed": "     if (blockSizeByte > 0) {\n       return (int) mFSMasterClient.createFile(path.getPath(), blockSizeByte, recursive);\n     } else {\n      return (int) mFSMasterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.toString(),\n           blockSizeByte, recursive);\n     }\n   }", "sourceBeforeFix": "ufsPath.getPath()", "sourceAfterFix": "ufsPath.toString()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "e9e5a477895f240f4c62285364ba3877c34ff1cb", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "     }\n     public void delete(Node node, Input input, String extractorId) throws IOException, APIException {\n        api.path(resource.terminate(input.getId(), extractorId))\n                 .node(node)\n                 .expect(Http.Status.NO_CONTENT)\n                 .execute();", "fixed": "     }\n     public void delete(Node node, Input input, String extractorId) throws IOException, APIException {\n        api.path(resource.removeExtractor(input.getId(), extractorId))\n                 .node(node)\n                 .expect(Http.Status.NO_CONTENT)\n                 .execute();", "sourceBeforeFix": "resource.terminate(input.getId(),extractorId)", "sourceAfterFix": "resource.removeExtractor(input.getId(),extractorId)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = ModelApiResponse.class) })\n     ModelApiResponse uploadFile(@PathParam(\"petId\") @ApiParam(\"ID of pet to update\") Long petId,@FormParam(value = \"additionalMetadata\")  String additionalMetadata, @FormParam(value = \"file\") InputStream fileInputStream,\n   @FormParam(value = \"file\") Attachment fileDetail);\n }", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = ModelApiResponse.class) })\n     ModelApiResponse uploadFile(@PathParam(\"petId\") @ApiParam(\"ID of pet to update\") Long petId,@FormParam(value = \"additionalMetadata\")  String additionalMetadata, @FormParam(value = \"file\") InputStream fileInputStream,\n   @FormParam(value = \"file\") Attachment fileDetail) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "a2eab9e8e70af1aee9585bda90a1bce3ee6276dd", "projectName": "wildfly.wildfly", "bugType": "More Specific If", "problem": "             final String server = SERVER.resolveModelAttribute(context, subModel).asString();\n             final ServiceController<?> controller = context.getServiceRegistry(false).getService(UndertowService.deploymentServiceName(server, host, path));\nif (controller.getState() != ServiceController.State.UP){\n                 return;\n             }", "fixed": "             final String server = SERVER.resolveModelAttribute(context, subModel).asString();\n             final ServiceController<?> controller = context.getServiceRegistry(false).getService(UndertowService.deploymentServiceName(server, host, path));\nif (controller != null && controller.getState() != ServiceController.State.UP){\n                 return;\n             }", "sourceBeforeFix": "controller.getState() != ServiceController.State.UP", "sourceAfterFix": "controller != null && controller.getState() != ServiceController.State.UP"}
{"fixCommitSHA1": "bb94905af696c5c2d4a748a2cafef937999a07ee", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "         }\n     }\n    private class EmptyIterator implements Iterator {\n         @Override\n         public boolean hasNext() {", "fixed": "         }\n     }\n    private static class EmptyIterator implements Iterator {\n         @Override\n         public boolean hasNext() {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fa5635c39e3000406103657977b98efa79bd4512", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()\n                 + \"trends/weekly.json\"));\n     }", "fixed": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()\n                 + \"trends/weekly.json\"));\n     }", "sourceBeforeFix": "conf.getSearchBaseURL()", "sourceAfterFix": "conf.getRestBaseURL()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "50331333ca6a1ee5237cb435eb32fd6a3de2a060", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tEditor editor = prefs.edit();\r\n \t\teditor.putInt(\"index\", listView.getFirstVisiblePosition());\r\n \t\teditor.putInt(\"top\", listView.getChildAt(0) == null ? 0 : listView.getChildAt(0).getTop());\r\n\t\teditor.commit();\r\n \t\tObject o = this.getListAdapter().getItem(position);\r\n \t\tString testName = o.toString();\r", "fixed": " \t\tEditor editor = prefs.edit();\r\n \t\teditor.putInt(\"index\", listView.getFirstVisiblePosition());\r\n \t\teditor.putInt(\"top\", listView.getChildAt(0) == null ? 0 : listView.getChildAt(0).getTop());\r\n\t\teditor.apply();\r\n \t\tObject o = this.getListAdapter().getItem(position);\r\n \t\tString testName = o.toString();\r", "sourceBeforeFix": "editor.commit()", "sourceAfterFix": "editor.apply()"}
{"fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      *\n      * @param exceptionClass Type of exception\n      */\n    public void exceptionClass(Class<? extends Exception> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }", "fixed": "      *\n      * @param exceptionClass Type of exception\n      */\n    public void exceptionClass(Class<? extends T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }", "sourceBeforeFix": "? extends Exception", "sourceAfterFix": "? extends T"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BrowseEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBrowseEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface BrowseEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBrowseEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastSedaEndpointBuilder\n             extends\n                 HazelcastSedaEndpointConsumerBuilder, HazelcastSedaEndpointProducerBuilder {\n         default AdvancedHazelcastSedaEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastSedaEndpointBuilder\n             extends\n                 HazelcastSedaEndpointConsumerBuilder, HazelcastSedaEndpointProducerBuilder {\n         default AdvancedHazelcastSedaEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface LambdaEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedLambdaEndpointBuilder advanced() {\n             return (AdvancedLambdaEndpointBuilder) this;\n         }", "fixed": "     \n    public interface LambdaEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedLambdaEndpointBuilder advanced() {\n             return (AdvancedLambdaEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "eb71c8999ff29f7dc3fe8dcdba81084f7f6a5fac", "projectName": "NanoHttpd.nanohttpd", "bugType": "Same Function More Args", "problem": "                             String token = st.nextToken();\n                             int p = token.indexOf('=');\n                             if (p != -1) {\n                                disposition.put(token.substring(0, p).trim().toLowerCase(), token.substring(p + 1).trim());\n                             }\n                         }\n                         String pname = disposition.get(\"name\");", "fixed": "                             String token = st.nextToken();\n                             int p = token.indexOf('=');\n                             if (p != -1) {\n                                disposition.put(token.substring(0, p).trim().toLowerCase(Locale.US), token.substring(p + 1).trim());\n                             }\n                         }\n                         String pname = disposition.get(\"name\");", "sourceBeforeFix": "mpline.substring(0,p).trim().toLowerCase()", "sourceAfterFix": "mpline.substring(0,p).trim().toLowerCase(Locale.US)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "a2700252c45833de9ec344792e625b1ed81fcce5", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "     private HttpResponse httpResponse;\n     private final AtomicReference<ExecutionException> exEx = new AtomicReference<ExecutionException>();\n     private final AtomicInteger redirectCount = new AtomicInteger();\n    private Future<?> reaperFuture;\n     private final AtomicBoolean inAuth = new AtomicBoolean(false);\n     private final AtomicBoolean statusReceived = new AtomicBoolean(false);\n     private final AtomicLong touch = new AtomicLong(System.currentTimeMillis());", "fixed": "     private HttpResponse httpResponse;\n     private final AtomicReference<ExecutionException> exEx = new AtomicReference<ExecutionException>();\n     private final AtomicInteger redirectCount = new AtomicInteger();\n    private volatile Future<?> reaperFuture;\n     private final AtomicBoolean inAuth = new AtomicBoolean(false);\n     private final AtomicBoolean statusReceived = new AtomicBoolean(false);\n     private final AtomicLong touch = new AtomicLong(System.currentTimeMillis());", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "2c3feeb727c012f119e4c55efb51665a71a2d259", "projectName": "apache.hadoop", "bugType": "Change Numeric Literal", "problem": "   }\n  @Test (timeout = 120000)\n   public void testProfiler() throws IOException, InterruptedException,\n       ClassNotFoundException {\n     if (!(new File(MiniMRYarnCluster.APPJAR)).exists()) {", "fixed": "   }\n  @Test (timeout = 150000)\n   public void testProfiler() throws IOException, InterruptedException,\n       ClassNotFoundException {\n     if (!(new File(MiniMRYarnCluster.APPJAR)).exists()) {", "sourceBeforeFix": "timeout=120000", "sourceAfterFix": "timeout=150000"}
{"fixCommitSHA1": "70b2b5e86c88c8bf0bb0a096c8952e6cd48b7521", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Boolean Literal", "problem": "     }\n     if (attach && puncFilter.accept(t.headWordNode().label().value())) {\n       TreeGraphNode parent = t.parent().highestNodeWithSameHead();\n      if (!basicGraph.isEdge(parent, t) && basicGraph.getShortestPath(root, t, true) == null) {\n         basicGraph.add(parent, t, GrammaticalRelation.DEPENDENT);\n       }\n     }", "fixed": "     }\n     if (attach && puncFilter.accept(t.headWordNode().label().value())) {\n       TreeGraphNode parent = t.parent().highestNodeWithSameHead();\n      if (!basicGraph.isEdge(parent, t) && basicGraph.getShortestPath(root, t, false) == null) {\n         basicGraph.add(parent, t, GrammaticalRelation.DEPENDENT);\n       }\n     }", "sourceBeforeFix": "basicGraph.getShortestPath(root,t,true)", "sourceAfterFix": "basicGraph.getShortestPath(root,t,false)"}
{"fixCommitSHA1": "d725e4c654270636bc7de92cc6d74683b1de29fe", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "             Expression rewritten = subPlan.rewrite(windowFunction);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getType(windowFunction));\n             boolean needCoercion = rewritten instanceof Cast;", "fixed": "             Expression rewritten = subPlan.rewrite(windowFunction);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getTypeWithCoercions(windowFunction));\n             boolean needCoercion = rewritten instanceof Cast;", "sourceBeforeFix": "analysis.getType(expression)", "sourceAfterFix": "analysis.getTypeWithCoercions(expression)"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(0);\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tthis.thrown.expectMessage(\"Connection refused\");\ngetResponse(\"http:", "fixed": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(0);\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tthis.thrown.expectMessage(\"Connection refused\");\ngetResponse(\"http:", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "4e24ea071ff17f2b98b47dd42dcb4a0fd0ac74e6", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": " public class NonStopInvalidatorTest extends AbstractInvalidatorTest {\n     @Override\n    Invalidator createInvalidator(NodeEngineImpl nodeEngine) {\n         return new NonStopInvalidator(MapService.SERVICE_NAME, TRUE_FILTER, nodeEngine);\n     }\n }", "fixed": " public class NonStopInvalidatorTest extends AbstractInvalidatorTest {\n     @Override\n    public Invalidator createInvalidator(NodeEngineImpl nodeEngine) {\n         return new NonStopInvalidator(MapService.SERVICE_NAME, TRUE_FILTER, nodeEngine);\n     }\n }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCwEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default CwEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCwEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default CwEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generateHashRowMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes)\n     {\n         Parameter position = arg(\"position\", int.class);\n         Parameter blocks = arg(\"blocks\", Block[].class);", "fixed": "                 .retInt();\n     }\n    private static void generateHashRowMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes)\n     {\n         Parameter position = arg(\"position\", int.class);\n         Parameter blocks = arg(\"blocks\", Block[].class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477c6ea32082b4741375c84fa3d2c9e8d8822c0c", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "      */\n     public static InputStream loadResourceAsStream(String name, ClassLoader loader) {\n         try {\n            URL res = loadResourceAsURL(name);\n             return res != null ? res.openStream() : null;\n         } catch (IOException e) {\n             return null;", "fixed": "      */\n     public static InputStream loadResourceAsStream(String name, ClassLoader loader) {\n         try {\n            URL res = loadResourceAsURL(name, loader);\n             return res != null ? res.openStream() : null;\n         } catch (IOException e) {\n             return null;", "sourceBeforeFix": "loadResourceAsURL(name)", "sourceAfterFix": "loadResourceAsURL(name,loader)"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Mina2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMina2EndpointProducerBuilder advanced() {", "fixed": "     \n    public interface Mina2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMina2EndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e6c1586717135f4d22f0a03177a1b7b994d5da95", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t\t\treturn Outcome.match(\"found database driver \" + driverClassName);\n \t\t\t}\n\t\t\treturn Outcome.match(\"missing database driver \" + driverClassName);\n \t\t}\n \t\tprivate String getDriverClassName(Environment environment, ClassLoader classLoader) {", "fixed": " \t\t\t\treturn Outcome.match(\"found database driver \" + driverClassName);\n \t\t\t}\n\t\t\treturn Outcome.noMatch(\"missing database driver \" + driverClassName);\n \t\t}\n \t\tprivate String getDriverClassName(Environment environment, ClassLoader classLoader) {", "sourceBeforeFix": "Outcome.match(\"missing database driver \" + driverClassName)", "sourceAfterFix": "Outcome.noMatch(\"missing database driver \" + driverClassName)"}
{"fixCommitSHA1": "ecfa6bd1b16a9e2a5a80cf4dd3ff1146c48353c2", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "           retVal.put(metricName, factory.combine(arg1Val.getMetric(metricName), arg2Val.getMetric(metricName)));\n         }\n         for (PostAggregator postAgg : postAggregations) {\n          if (postAgg.getName().equals(topNMetricName)) {\n             retVal.put(postAgg.getName(), postAgg.compute(retVal));\n           }\n         }", "fixed": "           retVal.put(metricName, factory.combine(arg1Val.getMetric(metricName), arg2Val.getMetric(metricName)));\n         }\n         for (PostAggregator postAgg : postAggregations) {\n          if (postAgg.getName().equalsIgnoreCase(topNMetricName)) {\n             retVal.put(postAgg.getName(), postAgg.compute(retVal));\n           }\n         }", "sourceBeforeFix": "postAgg.getName().equals(topNMetricName)", "sourceAfterFix": "postAgg.getName().equalsIgnoreCase(topNMetricName)"}
{"fixCommitSHA1": "e1626ef3aeecb1ccf7acf4056fb7bcf23243be25", "projectName": "apache.hive", "bugType": "Change Numeric Literal", "problem": "   }\n  @Test (timeout = 5000)\n   public void testFragmentSpecToTaskSpec() {\n     ByteBuffer procBb = ByteBuffer.allocate(4);", "fixed": "   }\n  @Test (timeout = 10000)\n   public void testFragmentSpecToTaskSpec() {\n     ByteBuffer procBb = ByteBuffer.allocate(4);", "sourceBeforeFix": "timeout=5000", "sourceAfterFix": "timeout=10000"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "4405698ee99fe26d0ac9317a2df96096f2731a7b", "projectName": "apache.hbase", "bugType": "Change Boolean Literal", "problem": "       Collection<Future<Void>> tasks = futures;\n       LOG.debug(\"cancelling \" + tasks.size() + \" tasks for snapshot \" + name);\n       for (Future<Void> f: tasks) {\n        f.cancel(true);\n       }", "fixed": "       Collection<Future<Void>> tasks = futures;\n       LOG.debug(\"cancelling \" + tasks.size() + \" tasks for snapshot \" + name);\n       for (Future<Void> f: tasks) {\n        f.cancel(false);\n       }", "sourceBeforeFix": "f.cancel(true)", "sourceAfterFix": "f.cancel(false)"}
{"fixCommitSHA1": "8af2dd3da2bacbd93965edb9de9d5ba3a8bf9ca4", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "                   HConstants.HREGION_EDITS_REPLAY_SKIP_ERRORS + \" instead.\");\n         }\n         if (skipErrors) {\n          Path p = WALSplitter.moveAsideBadEditsFile(walFS, edits);\n           LOG.error(HConstants.HREGION_EDITS_REPLAY_SKIP_ERRORS\n               + \"=true so continuing. Renamed \" + edits +\n               \" as \" + p, e);", "fixed": "                   HConstants.HREGION_EDITS_REPLAY_SKIP_ERRORS + \" instead.\");\n         }\n         if (skipErrors) {\n          Path p = WALSplitter.moveAsideBadEditsFile(fs, edits);\n           LOG.error(HConstants.HREGION_EDITS_REPLAY_SKIP_ERRORS\n               + \"=true so continuing. Renamed \" + edits +\n               \" as \" + p, e);", "sourceBeforeFix": "WALSplitter.moveAsideBadEditsFile(walFS,edits)", "sourceAfterFix": "WALSplitter.moveAsideBadEditsFile(fs,edits)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "370ead7395fc9194a3dc2d05afc4b3409f6b27da", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     this.outerQueryLimit = -1;\n   }\n  public void setAggregationExprsForClause(String clause, HashMap<String, ASTNode> aggregationTrees) {\n     this.destToAggregationExprs.put(clause, aggregationTrees);\n   }", "fixed": "     this.outerQueryLimit = -1;\n   }\n  public void setAggregationExprsForClause(String clause, LinkedHashMap<String, ASTNode> aggregationTrees) {\n     this.destToAggregationExprs.put(clause, aggregationTrees);\n   }", "sourceBeforeFix": "HashMap<String,HashMap<String,ASTNode>>", "sourceAfterFix": "LinkedHashMap<String,LinkedHashMap<String,ASTNode>>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastTopicEndpointBuilder\n             extends\n                 HazelcastTopicEndpointConsumerBuilder, HazelcastTopicEndpointProducerBuilder {\n         default AdvancedHazelcastTopicEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastTopicEndpointBuilder\n             extends\n                 HazelcastTopicEndpointConsumerBuilder, HazelcastTopicEndpointProducerBuilder {\n         default AdvancedHazelcastTopicEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(IllegalAccessException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(IllegalAccessException.class))\n         );\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a091e3c4af00b17456e583298e4bcba6ac9b13e9", "projectName": "Atmosphere.atmosphere", "bugType": "More Specific If", "problem": "     public WebSocket resource(AtmosphereResource r) {\n        if (this.r != null) {\n             AtmosphereResourceImpl.class.cast(r).cloneState(this.r);\n         }", "fixed": "     public WebSocket resource(AtmosphereResource r) {\n        if (this.r != null && r != null) {\n             AtmosphereResourceImpl.class.cast(r).cloneState(this.r);\n         }", "sourceBeforeFix": "this.r != null", "sourceAfterFix": "this.r != null && r != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "25923003ecdba4ed236618b917dadeb36e74addf", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                }\r\n                if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "fixed": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "6f0c0f64ee399c80509f0675eb9793f4b94af3da", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": " public class Barista {\n    private long hotDrinkDelay = 500;\n     private long coldDrinkDelay = 100;", "fixed": " public class Barista {\n    private long hotDrinkDelay = 300;\n     private long coldDrinkDelay = 100;", "sourceBeforeFix": "hotDrinkDelay=500", "sourceAfterFix": "hotDrinkDelay=300"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "eba20b3dcc401fb4c873afc5948cc92fbcb00097", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\tint size = s.count();\n \t\tdouble[] ret = new double[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\tret[i] = ((Number) s.first()).intValue();\n \t\treturn ret;\n \t\t}\n }", "fixed": " \t\tint size = s.count();\n \t\tdouble[] ret = new double[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\tret[i] = ((Number) s.first()).doubleValue();\n \t\treturn ret;\n \t\t}\n }", "sourceBeforeFix": "((Number)s.first()).intValue()", "sourceAfterFix": "((Number)s.first()).floatValue()"}
{"fixCommitSHA1": "0592e84a3c07b4451e81d2eecc0c51af384858d2", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "             new LinkedBlockingQueue<Runnable>(100),\n             new NamedThreadFactory(\"Close-ExecutorService-Timer\", true));\n    public static boolean isShutdown(Executor executor) {\n         if (executor instanceof ExecutorService) {\n            if (((ExecutorService) executor).isShutdown()) {\n                 return true;\n             }\n         }", "fixed": "             new LinkedBlockingQueue<Runnable>(100),\n             new NamedThreadFactory(\"Close-ExecutorService-Timer\", true));\n    public static boolean isTerminated(Executor executor) {\n         if (executor instanceof ExecutorService) {\n            if (((ExecutorService) executor).isTerminated()) {\n                 return true;\n             }\n         }", "sourceBeforeFix": "((ExecutorService)executor).isShutdown()", "sourceAfterFix": "((ExecutorService)executor).isTerminated()"}
